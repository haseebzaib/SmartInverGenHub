#include <stdint.h>
#include <stdio.h>

uint16_t CRC16_Check(const uint8_t *P, uint16_t ubCRCNum) // CRC check function
{
    uint8_t temp;
    uint8_t i;
    uint16_t c;
    uint8_t TT;
    uint16_t crc = 0xFFFF;

    for (c = 0; c < ubCRCNum; c++)
    {
        temp = P[c];
        crc = crc ^ temp;

        for (i = 0; i < 8; i++)
        {
            TT = crc & 1;
            crc = crc >> 1;
            crc = crc & 0x7FFF;

            if (TT == 1)
            {
                crc = crc ^ 0xA001;
            }

            crc = crc & 0xFFFF;
        }
    }

    return crc;
}

int main()
{
    uint8_t data[] = {0x55, 0x03, 0x00, 0x00,0x00,0x0D}; // Example data to calculate CRC
    uint16_t length = sizeof(data) / sizeof(data[0]);
    
    uint16_t crc = CRC16_Check(data, length);
    
    printf("Calculated CRC: 0x%04X\n", crc); // Print CRC in hexadecimal format
    
    return 0;
}


//for asci

#include <stdint.h>
#include <stdio.h>
#include <string.h>

// CRC16 Check Function
uint16_t CRC16_Check(const uint8_t *P, uint16_t ubCRCNum)
{
    uint8_t temp;
    uint8_t i;
    uint16_t c;
    uint8_t TT;
    uint16_t crc = 0xFFFF;

    for (c = 0; c < ubCRCNum; c++)
    {
        temp = P[c];
        crc = crc ^ temp;

        for (i = 0; i < 8; i++)
        {
            TT = crc & 1;
            crc = crc >> 1;
            crc = crc & 0x7FFF;

            if (TT == 1)
            {
                crc = crc ^ 0xA001;
            }

            crc = crc & 0xFFFF;
        }
    }

    return crc;
}

int main()
{
    // Example ASCII command
    char command[] = "QTPR"; // Replace with your actual command
    uint16_t length = strlen(command); // Calculate the length of the string

    // Convert the command string to a byte array
    uint8_t *data = (uint8_t *)command;

    // Calculate CRC16
    uint16_t crc = CRC16_Check(data, length);

    // Print the CRC in hexadecimal format
    printf("ASCII Command: %s\n", command);
    printf("Calculated CRC: 0x%04X\n", crc);

    return 0;
}