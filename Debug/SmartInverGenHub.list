
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d14  080100e0  080100e0  000110e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010df4  08010df4  00012220  2**0
                  CONTENTS
  4 .ARM          00000008  08010df4  08010df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dfc  08010dfc  00012220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08010dfc  08010dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e10  08010e10  00011e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08010e14  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012220  2**0
                  CONTENTS
 10 .bss          0000c844  20000220  20000220  00012220  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ca64  2000ca64  00012220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000384af  00000000  00000000  00012250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f03  00000000  00000000  0004a6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002000  00000000  00000000  00052608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c9  00000000  00000000  00054608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030b95  00000000  00000000  00055ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033d5b  00000000  00000000  00086a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9665  00000000  00000000  000ba7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b3e26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000975c  00000000  00000000  001b3e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001bd5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100c8 	.word	0x080100c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	080100c8 	.word	0x080100c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_Z20ControlnDDisplayTaskPv>:

char batTime[20];



void ControlnDDisplayTask(void *pvParameters) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	f5ad 6d86 	sub.w	sp, sp, #1072	@ 0x430
 8000f7e:	af04      	add	r7, sp, #16
 8000f80:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f84:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000f88:	6018      	str	r0, [r3, #0]

	struct ModemData_Queue ModemData = { 0 };
 8000f8a:	f507 7351 	add.w	r3, r7, #836	@ 0x344
 8000f8e:	22d9      	movs	r2, #217	@ 0xd9
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00c fe75 	bl	800dc82 <memset>

	struct ControlData_Queue ControlData = { 0 };
 8000f98:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2374      	movs	r3, #116	@ 0x74
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f00c fe6b 	bl	800dc82 <memset>

	InverterData_Queue InverterData = { 0 };
 8000fac:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000fb0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f240 23c2 	movw	r3, #706	@ 0x2c2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f00c fe60 	bl	800dc82 <memset>

	System_Rtos::delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc6:	f003 fde9 	bl	8004b9c <_ZN11System_Rtos5delayEm>
	LCD.Startup();
 8000fca:	4897      	ldr	r0, [pc, #604]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8000fcc:	f000 fe44 	bl	8001c58 <_ZN3HMI4DWIN7StartupEv>

	parsing.convertEpochToSTMTime(&hrtc,1732186868,5);
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	4a96      	ldr	r2, [pc, #600]	@ (800122c <_Z20ControlnDDisplayTaskPv+0x2b4>)
 8000fd4:	4996      	ldr	r1, [pc, #600]	@ (8001230 <_Z20ControlnDDisplayTaskPv+0x2b8>)
 8000fd6:	4897      	ldr	r0, [pc, #604]	@ (8001234 <_Z20ControlnDDisplayTaskPv+0x2bc>)
 8000fd8:	f004 fafa 	bl	80055d0 <_ZN10System_sys16Parsing_Checking21convertEpochToSTMTimeEP17RTC_HandleTypeDefli>


	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 8000fdc:	f000 fd4a 	bl	8001a74 <_ZN8UniqueID6GetUidEv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00d f81a 	bl	800e022 <strcpy>

	while (1) {

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4991      	ldr	r1, [pc, #580]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 8000ff2:	488f      	ldr	r0, [pc, #572]	@ (8001230 <_Z20ControlnDDisplayTaskPv+0x2b8>)
 8000ff4:	f008 f99f 	bl	8009336 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4990      	ldr	r1, [pc, #576]	@ (800123c <_Z20ControlnDDisplayTaskPv+0x2c4>)
 8000ffc:	488c      	ldr	r0, [pc, #560]	@ (8001230 <_Z20ControlnDDisplayTaskPv+0x2b8>)
 8000ffe:	f008 fa7c 	bl	80094fa <HAL_RTC_GetDate>
		ControlData.timestamp = parsing.convertToEpoch(sDate, sTime, 5);
 8001002:	4b8d      	ldr	r3, [pc, #564]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 8001004:	4d8d      	ldr	r5, [pc, #564]	@ (800123c <_Z20ControlnDDisplayTaskPv+0x2c4>)
 8001006:	2205      	movs	r2, #5
 8001008:	9203      	str	r2, [sp, #12]
 800100a:	466c      	mov	r4, sp
 800100c:	f103 0208 	add.w	r2, r3, #8
 8001010:	ca07      	ldmia	r2, {r0, r1, r2}
 8001012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001016:	cb0c      	ldmia	r3, {r2, r3}
 8001018:	6829      	ldr	r1, [r5, #0]
 800101a:	4886      	ldr	r0, [pc, #536]	@ (8001234 <_Z20ControlnDDisplayTaskPv+0x2bc>)
 800101c:	f004 fa46 	bl	80054ac <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001028:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800102c:	611a      	str	r2, [r3, #16]



		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 800102e:	4b82      	ldr	r3, [pc, #520]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b80      	ldr	r3, [pc, #512]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 8001036:	785b      	ldrb	r3, [r3, #1]
 8001038:	4619      	mov	r1, r3
				sTime.Seconds);
 800103a:	4b7f      	ldr	r3, [pc, #508]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 800103c:	789b      	ldrb	r3, [r3, #2]
		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	460b      	mov	r3, r1
 8001042:	497f      	ldr	r1, [pc, #508]	@ (8001240 <_Z20ControlnDDisplayTaskPv+0x2c8>)
 8001044:	487f      	ldr	r0, [pc, #508]	@ (8001244 <_Z20ControlnDDisplayTaskPv+0x2cc>)
 8001046:	f00c fdb9 	bl	800dbbc <siprintf>
		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
 800104a:	4b7c      	ldr	r3, [pc, #496]	@ (800123c <_Z20ControlnDDisplayTaskPv+0x2c4>)
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	4619      	mov	r1, r3
 8001050:	4b7a      	ldr	r3, [pc, #488]	@ (800123c <_Z20ControlnDDisplayTaskPv+0x2c4>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	461a      	mov	r2, r3
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	4a7a      	ldr	r2, [pc, #488]	@ (8001248 <_Z20ControlnDDisplayTaskPv+0x2d0>)
 800105e:	4413      	add	r3, r2
				sDate.Year);
 8001060:	4a76      	ldr	r2, [pc, #472]	@ (800123c <_Z20ControlnDDisplayTaskPv+0x2c4>)
 8001062:	78d2      	ldrb	r2, [r2, #3]
		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
 8001064:	9200      	str	r2, [sp, #0]
 8001066:	460a      	mov	r2, r1
 8001068:	4978      	ldr	r1, [pc, #480]	@ (800124c <_Z20ControlnDDisplayTaskPv+0x2d4>)
 800106a:	4879      	ldr	r0, [pc, #484]	@ (8001250 <_Z20ControlnDDisplayTaskPv+0x2d8>)
 800106c:	f00c fda6 	bl	800dbbc <siprintf>

		if (ModemDataQueue.queueReceive((void*) &ModemData)
 8001070:	f507 7351 	add.w	r3, r7, #836	@ 0x344
 8001074:	4619      	mov	r1, r3
 8001076:	4877      	ldr	r0, [pc, #476]	@ (8001254 <_Z20ControlnDDisplayTaskPv+0x2dc>)
 8001078:	f003 fe35 	bl	8004ce6 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 800107c:	4603      	mov	r3, r0
				== ModemDataQueue.queues_recived) {
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
		if (ModemDataQueue.queueReceive((void*) &ModemData)
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01e      	beq.n	80010ca <_Z20ControlnDDisplayTaskPv+0x152>

			LCD.SendTextData(LCD.Network, ModemData.networkStat);
 800108c:	f507 7351 	add.w	r3, r7, #836	@ 0x344
 8001090:	330f      	adds	r3, #15
 8001092:	461a      	mov	r2, r3
 8001094:	f248 1110 	movw	r1, #33040	@ 0x8110
 8001098:	4863      	ldr	r0, [pc, #396]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 800109a:	f000 ff09 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
			LCD.SendTextData(LCD.SigQ, ModemData.quality);
 800109e:	f507 7351 	add.w	r3, r7, #836	@ 0x344
 80010a2:	332d      	adds	r3, #45	@ 0x2d
 80010a4:	461a      	mov	r2, r3
 80010a6:	f248 2120 	movw	r1, #33312	@ 0x8220
 80010aa:	485f      	ldr	r0, [pc, #380]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 80010ac:	f000 ff00 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
			LCD.SendTextData(LCD.Net,ModemData.internet == 1 ? const_cast<char *>("Conn") : const_cast<char *>("DisConn"));
 80010b0:	f897 341b 	ldrb.w	r3, [r7, #1051]	@ 0x41b
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <_Z20ControlnDDisplayTaskPv+0x144>
 80010b8:	4b67      	ldr	r3, [pc, #412]	@ (8001258 <_Z20ControlnDDisplayTaskPv+0x2e0>)
 80010ba:	e000      	b.n	80010be <_Z20ControlnDDisplayTaskPv+0x146>
 80010bc:	4b67      	ldr	r3, [pc, #412]	@ (800125c <_Z20ControlnDDisplayTaskPv+0x2e4>)
 80010be:	461a      	mov	r2, r3
 80010c0:	f248 3130 	movw	r1, #33584	@ 0x8330
 80010c4:	4858      	ldr	r0, [pc, #352]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 80010c6:	f000 fef3 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
		}

		if (InverterDataQueue.queueReceive((void*) &InverterData) == InverterDataQueue.queues_recived) {
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	4863      	ldr	r0, [pc, #396]	@ (8001260 <_Z20ControlnDDisplayTaskPv+0x2e8>)
 80010d2:	f003 fe08 	bl	8004ce6 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d067      	beq.n	80011b6 <_Z20ControlnDDisplayTaskPv+0x23e>


			ControlData.batteryLevel = std::atoi(const_cast<const char *>(InverterData.inverterData_qpigs[static_cast<int>(inverter_data_qpigs_cmd::batt_cap)]));
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	3364      	adds	r3, #100	@ 0x64
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00b ffc3 	bl	800d078 <atoi>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010fc:	661a      	str	r2, [r3, #96]	@ 0x60

			parsing.binarystringToUint8(InverterData.inverterData_qpigs[static_cast<int>(inverter_data_qpigs_cmd::dev_stat_1)], &batt_charging_status);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	33a0      	adds	r3, #160	@ 0xa0
 8001104:	4a57      	ldr	r2, [pc, #348]	@ (8001264 <_Z20ControlnDDisplayTaskPv+0x2ec>)
 8001106:	4619      	mov	r1, r3
 8001108:	484a      	ldr	r0, [pc, #296]	@ (8001234 <_Z20ControlnDDisplayTaskPv+0x2bc>)
 800110a:	f004 f98e 	bl	800542a <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh>
            if(InverterData.device_mode == 3)
 800110e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001112:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001116:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 800111a:	2b03      	cmp	r3, #3
 800111c:	d112      	bne.n	8001144 <_Z20ControlnDDisplayTaskPv+0x1cc>
            {
            	LCD.SendTextData(LCD.source_bat,  const_cast<char *>("OFF"));
 800111e:	4a52      	ldr	r2, [pc, #328]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 8001120:	f245 1110 	movw	r1, #20752	@ 0x5110
 8001124:	4840      	ldr	r0, [pc, #256]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8001126:	f000 fec3 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            	LCD.SendTextData(LCD.source_gen, const_cast<char *>("ON"));
 800112a:	4a50      	ldr	r2, [pc, #320]	@ (800126c <_Z20ControlnDDisplayTaskPv+0x2f4>)
 800112c:	f245 2120 	movw	r1, #21024	@ 0x5220
 8001130:	483d      	ldr	r0, [pc, #244]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8001132:	f000 febd 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            	LCD.SendTextData(LCD.source_sol, const_cast<char *>("OFF"));
 8001136:	4a4c      	ldr	r2, [pc, #304]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 8001138:	f245 3130 	movw	r1, #21296	@ 0x5330
 800113c:	483a      	ldr	r0, [pc, #232]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 800113e:	f000 feb7 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
 8001142:	e02c      	b.n	800119e <_Z20ControlnDDisplayTaskPv+0x226>
            }
            else if(InverterData.device_mode == 4)
 8001144:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001148:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800114c:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8001150:	2b04      	cmp	r3, #4
 8001152:	d112      	bne.n	800117a <_Z20ControlnDDisplayTaskPv+0x202>
            {
            	LCD.SendTextData(LCD.source_bat,  const_cast<char *>("ON"));
 8001154:	4a45      	ldr	r2, [pc, #276]	@ (800126c <_Z20ControlnDDisplayTaskPv+0x2f4>)
 8001156:	f245 1110 	movw	r1, #20752	@ 0x5110
 800115a:	4833      	ldr	r0, [pc, #204]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 800115c:	f000 fea8 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            	LCD.SendTextData(LCD.source_gen, const_cast<char *>("OFF"));
 8001160:	4a41      	ldr	r2, [pc, #260]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 8001162:	f245 2120 	movw	r1, #21024	@ 0x5220
 8001166:	4830      	ldr	r0, [pc, #192]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8001168:	f000 fea2 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            	LCD.SendTextData(LCD.source_sol, const_cast<char *>("OFF"));
 800116c:	4a3e      	ldr	r2, [pc, #248]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 800116e:	f245 3130 	movw	r1, #21296	@ 0x5330
 8001172:	482d      	ldr	r0, [pc, #180]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8001174:	f000 fe9c 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
 8001178:	e011      	b.n	800119e <_Z20ControlnDDisplayTaskPv+0x226>
            }
            else {
            	LCD.SendTextData(LCD.source_bat,  const_cast<char *>("OFF"));
 800117a:	4a3b      	ldr	r2, [pc, #236]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 800117c:	f245 1110 	movw	r1, #20752	@ 0x5110
 8001180:	4829      	ldr	r0, [pc, #164]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8001182:	f000 fe95 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            	LCD.SendTextData(LCD.source_gen, const_cast<char *>("OFF"));
 8001186:	4a38      	ldr	r2, [pc, #224]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 8001188:	f245 2120 	movw	r1, #21024	@ 0x5220
 800118c:	4826      	ldr	r0, [pc, #152]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 800118e:	f000 fe8f 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            	LCD.SendTextData(LCD.source_sol, const_cast<char *>("OFF"));
 8001192:	4a35      	ldr	r2, [pc, #212]	@ (8001268 <_Z20ControlnDDisplayTaskPv+0x2f0>)
 8001194:	f245 3130 	movw	r1, #21296	@ 0x5330
 8001198:	4823      	ldr	r0, [pc, #140]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 800119a:	f000 fe89 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
            }


			LCD.SendNumericData(LCD.Battery,static_cast<uint16_t>(ControlData.batteryLevel));
 800119e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80011a2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	f247 0110 	movw	r1, #28688	@ 0x7010
 80011b0:	481d      	ldr	r0, [pc, #116]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 80011b2:	f000 fdfb 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>

		}


		if((batt_charging_status & 0x07) == SCC_AC_charge_on
 80011b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <_Z20ControlnDDisplayTaskPv+0x2ec>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d00b      	beq.n	80011da <_Z20ControlnDDisplayTaskPv+0x262>
				|| (batt_charging_status & 0x07) == SCC_charge_on || (batt_charging_status & 0x07) == AC_charge_on)
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <_Z20ControlnDDisplayTaskPv+0x2ec>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d005      	beq.n	80011da <_Z20ControlnDDisplayTaskPv+0x262>
 80011ce:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <_Z20ControlnDDisplayTaskPv+0x2ec>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d14e      	bne.n	8001278 <_Z20ControlnDDisplayTaskPv+0x300>
		{
			if(!batt_chargetimekeeping_Flag)
 80011da:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <_Z20ControlnDDisplayTaskPv+0x2f8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d16f      	bne.n	80012c2 <_Z20ControlnDDisplayTaskPv+0x34a>
			{
				batt_chargetimekeeping_Flag = 1;
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <_Z20ControlnDDisplayTaskPv+0x2f8>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeStartTime = ControlData.timestamp;
 80011e8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80011ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80011f6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011fa:	665a      	str	r2, [r3, #100]	@ 0x64
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	4619      	mov	r1, r3
						sTime.Seconds);
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <_Z20ControlnDDisplayTaskPv+0x2c0>)
 800120a:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	460b      	mov	r3, r1
 8001210:	490b      	ldr	r1, [pc, #44]	@ (8001240 <_Z20ControlnDDisplayTaskPv+0x2c8>)
 8001212:	4818      	ldr	r0, [pc, #96]	@ (8001274 <_Z20ControlnDDisplayTaskPv+0x2fc>)
 8001214:	f00c fcd2 	bl	800dbbc <siprintf>
				LCD.SendTextData(LCD.chrgT,  batTime);
 8001218:	4a16      	ldr	r2, [pc, #88]	@ (8001274 <_Z20ControlnDDisplayTaskPv+0x2fc>)
 800121a:	f247 2120 	movw	r1, #29216	@ 0x7220
 800121e:	4802      	ldr	r0, [pc, #8]	@ (8001228 <_Z20ControlnDDisplayTaskPv+0x2b0>)
 8001220:	f000 fe46 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
			if(!batt_chargetimekeeping_Flag)
 8001224:	e04d      	b.n	80012c2 <_Z20ControlnDDisplayTaskPv+0x34a>
 8001226:	bf00      	nop
 8001228:	20000294 	.word	0x20000294
 800122c:	673f12f4 	.word	0x673f12f4
 8001230:	20001cd4 	.word	0x20001cd4
 8001234:	200002a0 	.word	0x200002a0
 8001238:	20000240 	.word	0x20000240
 800123c:	2000023c 	.word	0x2000023c
 8001240:	080100e0 	.word	0x080100e0
 8001244:	200002a4 	.word	0x200002a4
 8001248:	20000000 	.word	0x20000000
 800124c:	080100f0 	.word	0x080100f0
 8001250:	200002b8 	.word	0x200002b8
 8001254:	2000178c 	.word	0x2000178c
 8001258:	08010100 	.word	0x08010100
 800125c:	08010108 	.word	0x08010108
 8001260:	20001b7c 	.word	0x20001b7c
 8001264:	200002cc 	.word	0x200002cc
 8001268:	08010110 	.word	0x08010110
 800126c:	08010114 	.word	0x08010114
 8001270:	200002cd 	.word	0x200002cd
 8001274:	200002d0 	.word	0x200002d0
			}
		}
		else
		{
			if(batt_chargetimekeeping_Flag)
 8001278:	4b48      	ldr	r3, [pc, #288]	@ (800139c <_Z20ControlnDDisplayTaskPv+0x424>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <_Z20ControlnDDisplayTaskPv+0x34a>
			{
				batt_chargetimekeeping_Flag = 0;
 8001280:	4b46      	ldr	r3, [pc, #280]	@ (800139c <_Z20ControlnDDisplayTaskPv+0x424>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeEndTime = ControlData.timestamp;
 8001286:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800128a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001294:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001298:	669a      	str	r2, [r3, #104]	@ 0x68
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 800129a:	4b41      	ldr	r3, [pc, #260]	@ (80013a0 <_Z20ControlnDDisplayTaskPv+0x428>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <_Z20ControlnDDisplayTaskPv+0x428>)
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	4619      	mov	r1, r3
							sTime.Seconds);
 80012a6:	4b3e      	ldr	r3, [pc, #248]	@ (80013a0 <_Z20ControlnDDisplayTaskPv+0x428>)
 80012a8:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	460b      	mov	r3, r1
 80012ae:	493d      	ldr	r1, [pc, #244]	@ (80013a4 <_Z20ControlnDDisplayTaskPv+0x42c>)
 80012b0:	483d      	ldr	r0, [pc, #244]	@ (80013a8 <_Z20ControlnDDisplayTaskPv+0x430>)
 80012b2:	f00c fc83 	bl	800dbbc <siprintf>
				LCD.SendTextData(LCD.dchgT, batTime);
 80012b6:	4a3c      	ldr	r2, [pc, #240]	@ (80013a8 <_Z20ControlnDDisplayTaskPv+0x430>)
 80012b8:	f247 3130 	movw	r1, #29488	@ 0x7330
 80012bc:	483b      	ldr	r0, [pc, #236]	@ (80013ac <_Z20ControlnDDisplayTaskPv+0x434>)
 80012be:	f000 fdf7 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
			}
		}


		liquidSensor.Measurement_loop(sensor_liquidMeas::liquidSensor::Meter,
 80012c2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80012c6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 80012d0:	f102 0054 	add.w	r0, r2, #84	@ 0x54
 80012d4:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 80012d8:	f102 0150 	add.w	r1, r2, #80	@ 0x50
 80012dc:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 80012e0:	325c      	adds	r2, #92	@ 0x5c
 80012e2:	9202      	str	r2, [sp, #8]
 80012e4:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 80012e8:	3258      	adds	r2, #88	@ 0x58
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 80013b0 <_Z20ControlnDDisplayTaskPv+0x438>
 80012f6:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80012fa:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80013b4 <_Z20ControlnDDisplayTaskPv+0x43c>
 80012fe:	2100      	movs	r1, #0
 8001300:	482d      	ldr	r0, [pc, #180]	@ (80013b8 <_Z20ControlnDDisplayTaskPv+0x440>)
 8001302:	f003 fab3 	bl	800486c <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>
				0.0, 10.0, 3.3, &ControlData.fuelPer, &ControlData.fuelConsp,
				ControlData.timestamp, &ControlData.refuelingStartTime,
				&ControlData.refuelingEndTime);
		AHT20.measure(&ControlData.temp, &ControlData.humid);
 8001306:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800130a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800130e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001312:	336c      	adds	r3, #108	@ 0x6c
 8001314:	4619      	mov	r1, r3
 8001316:	4829      	ldr	r0, [pc, #164]	@ (80013bc <_Z20ControlnDDisplayTaskPv+0x444>)
 8001318:	f003 f966 	bl	80045e8 <_ZN15sensor_TempHumd5AHT207measureEPmS1_>


		LCD.SendTextData(LCD.Time, time);
 800131c:	4a28      	ldr	r2, [pc, #160]	@ (80013c0 <_Z20ControlnDDisplayTaskPv+0x448>)
 800131e:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001322:	4822      	ldr	r0, [pc, #136]	@ (80013ac <_Z20ControlnDDisplayTaskPv+0x434>)
 8001324:	f000 fdc4 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>
		LCD.SendTextData(LCD.Date, date);
 8001328:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <_Z20ControlnDDisplayTaskPv+0x44c>)
 800132a:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800132e:	481f      	ldr	r0, [pc, #124]	@ (80013ac <_Z20ControlnDDisplayTaskPv+0x434>)
 8001330:	f000 fdbe 	bl	8001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>

		LCD.SendNumericData(LCD.TankLevel,
				static_cast<uint16_t>(ControlData.fuelPer));
 8001334:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001338:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800133c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
		LCD.SendNumericData(LCD.TankLevel,
 8001340:	461a      	mov	r2, r3
 8001342:	f242 0110 	movw	r1, #8208	@ 0x2010
 8001346:	4819      	ldr	r0, [pc, #100]	@ (80013ac <_Z20ControlnDDisplayTaskPv+0x434>)
 8001348:	f000 fd30 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>

		LCD.SendNumericData(LCD.Temperature,
				static_cast<uint16_t>(ControlData.temp));
 800134c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001350:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
		LCD.SendNumericData(LCD.Temperature,
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	f244 0110 	movw	r1, #16400	@ 0x4010
 800135e:	4813      	ldr	r0, [pc, #76]	@ (80013ac <_Z20ControlnDDisplayTaskPv+0x434>)
 8001360:	f000 fd24 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>
		LCD.SendNumericData(LCD.Humidity,
				static_cast<uint16_t>(ControlData.humid));
 8001364:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001368:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
		LCD.SendNumericData(LCD.Humidity,
 800136e:	b29b      	uxth	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	f244 0120 	movw	r1, #16416	@ 0x4020
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <_Z20ControlnDDisplayTaskPv+0x434>)
 8001378:	f000 fd18 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>

		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 800137c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001380:	4619      	mov	r1, r3
 8001382:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <_Z20ControlnDDisplayTaskPv+0x450>)
 8001384:	f003 fc92 	bl	8004cac <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 8001388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138c:	480f      	ldr	r0, [pc, #60]	@ (80013cc <_Z20ControlnDDisplayTaskPv+0x454>)
 800138e:	f006 f806 	bl	800739e <HAL_GPIO_TogglePin>
		System_Rtos::delay(150);
 8001392:	2096      	movs	r0, #150	@ 0x96
 8001394:	f003 fc02 	bl	8004b9c <_ZN11System_Rtos5delayEm>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001398:	e629      	b.n	8000fee <_Z20ControlnDDisplayTaskPv+0x76>
 800139a:	bf00      	nop
 800139c:	200002cd 	.word	0x200002cd
 80013a0:	20000240 	.word	0x20000240
 80013a4:	080100e0 	.word	0x080100e0
 80013a8:	200002d0 	.word	0x200002d0
 80013ac:	20000294 	.word	0x20000294
 80013b0:	40533333 	.word	0x40533333
 80013b4:	00000000 	.word	0x00000000
 80013b8:	20000254 	.word	0x20000254
 80013bc:	20000280 	.word	0x20000280
 80013c0:	200002a4 	.word	0x200002a4
 80013c4:	200002b8 	.word	0x200002b8
 80013c8:	2000185c 	.word	0x2000185c
 80013cc:	40020800 	.word	0x40020800

080013d0 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d116      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d111      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x3e>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1);
 80013ea:	490b      	ldr	r1, [pc, #44]	@ (8001418 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80013ec:	480b      	ldr	r0, [pc, #44]	@ (800141c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80013ee:	f003 fa13 	bl	8004818 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 80013f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f6:	2238      	movs	r2, #56	@ 0x38
 80013f8:	4909      	ldr	r1, [pc, #36]	@ (8001420 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80013fa:	480a      	ldr	r0, [pc, #40]	@ (8001424 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80013fc:	f003 f8dc 	bl	80045b8 <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
HMI::DWIN LCD(&HMI_UART5);
 8001400:	4909      	ldr	r1, [pc, #36]	@ (8001428 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001402:	480a      	ldr	r0, [pc, #40]	@ (800142c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001404:	f000 fc18 	bl	8001c38 <_ZN3HMI4DWINC1EP20__UART_HandleTypeDef>
System_sys::Parsing_Checking parsing;
 8001408:	4809      	ldr	r0, [pc, #36]	@ (8001430 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800140a:	f003 fe69 	bl	80050e0 <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20001c38 	.word	0x20001c38
 800141c:	20000254 	.word	0x20000254
 8001420:	20001c80 	.word	0x20001c80
 8001424:	20000280 	.word	0x20000280
 8001428:	20001d88 	.word	0x20001d88
 800142c:	20000294 	.word	0x20000294
 8001430:	200002a0 	.word	0x200002a0

08001434 <_GLOBAL__sub_I_sDate>:
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
 8001438:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff ffc7 	bl	80013d0 <_Z41__static_initialization_and_destruction_0ii>
 8001442:	bd80      	pop	{r7, pc}

08001444 <_Z12InverterTaskPv>:
char ver[20];




void InverterTask(void *pvParameters) {
 8001444:	b580      	push	{r7, lr}
 8001446:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800144a:	af00      	add	r7, sp, #0
 800144c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001450:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8001454:	6018      	str	r0, [r3, #0]

	InverterData_Queue InverterData = {0};
 8001456:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800145a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 800145e:	4618      	mov	r0, r3
 8001460:	f240 23c2 	movw	r3, #706	@ 0x2c2
 8001464:	461a      	mov	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	f00c fc0b 	bl	800dc82 <memset>

	System_Rtos::delay(1000);
 800146c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001470:	f003 fb94 	bl	8004b9c <_ZN11System_Rtos5delayEm>
	while (1) {

		//Voltronic.ProtocolID_Inquiry(protoID);
		//Voltronic.DeviceID_Inquiry(devID);
		//Voltronic.CPUFW_Ver_Inquiry(ver);
		Voltronic.DeviceStat_Inquiry_qpigs(InverterData.inverterData_qpigs);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <_Z12InverterTaskPv+0x64>)
 800147c:	f000 fe56 	bl	800212c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c>
		//Voltronic.DeviceStat_Inquiry_qipgs2(InverterData.inverterData_qpigs2);
		//Voltronic.DeviceStat_Inquiry_qipgsN(InverterData.inverterData_qpigsN);
		Voltronic.DeviceStat_Inquiry_mode(&InverterData.device_mode);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	f203 23c1 	addw	r3, r3, #705	@ 0x2c1
 8001488:	4619      	mov	r1, r3
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <_Z12InverterTaskPv+0x64>)
 800148c:	f000 fec6 	bl	800221c <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh>

		InverterDataQueue.queueSend(reinterpret_cast<void*>(&InverterData));
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <_Z12InverterTaskPv+0x68>)
 8001498:	f003 fc08 	bl	8004cac <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		System_Rtos::delay(1000);
 800149c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a0:	f003 fb7c 	bl	8004b9c <_ZN11System_Rtos5delayEm>
		Voltronic.DeviceStat_Inquiry_qpigs(InverterData.inverterData_qpigs);
 80014a4:	bf00      	nop
 80014a6:	e7e5      	b.n	8001474 <_Z12InverterTaskPv+0x30>
 80014a8:	200002e4 	.word	0x200002e4
 80014ac:	20001b7c 	.word	0x20001b7c

080014b0 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10b      	bne.n	80014d8 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d106      	bne.n	80014d8 <_Z41__static_initialization_and_destruction_0ii+0x28>
Inverter::Voltronic Voltronic(&INVERTER_USART3,DE_GPIO_Port,DE_Pin);
 80014ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80014d0:	4904      	ldr	r1, [pc, #16]	@ (80014e4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80014d4:	f000 fdc0 	bl	8002058 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	20001e60 	.word	0x20001e60
 80014e8:	200002e4 	.word	0x200002e4

080014ec <_GLOBAL__sub_I_Voltronic>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff ffdb 	bl	80014b0 <_Z41__static_initialization_and_destruction_0ii>
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	6839      	ldr	r1, [r7, #0]
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f00c fbe2 	bl	800dcd2 <strstr>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_Z9ModemTaskPv>:


char command_buffer[255] = {0};


void ModemTask(void *pvParameters) {
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b0e3      	sub	sp, #396	@ 0x18c
 800151c:	af08      	add	r7, sp, #32
 800151e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001522:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001526:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8001528:	48c9      	ldr	r0, [pc, #804]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 800152a:	f001 f94f 	bl	80027cc <_ZN5Modem8simA76724initEv>

	struct ModemData_Queue ModemData = { 0 };
 800152e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001532:	22d9      	movs	r2, #217	@ 0xd9
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f00c fba3 	bl	800dc82 <memset>

	struct ControlData_Queue ControlData = {0};
 800153c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001540:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001544:	4618      	mov	r0, r3
 8001546:	2374      	movs	r3, #116	@ 0x74
 8001548:	461a      	mov	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f00c fb99 	bl	800dc82 <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001550:	2301      	movs	r3, #1
 8001552:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166

	enum routine mqtt_routine = net_enable;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 8001562:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001566:	334b      	adds	r3, #75	@ 0x4b
 8001568:	4aba      	ldr	r2, [pc, #744]	@ (8001854 <_Z9ModemTaskPv+0x33c>)
 800156a:	4614      	mov	r4, r2
 800156c:	469c      	mov	ip, r3
 800156e:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001572:	4665      	mov	r5, ip
 8001574:	4626      	mov	r6, r4
 8001576:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001578:	6028      	str	r0, [r5, #0]
 800157a:	6069      	str	r1, [r5, #4]
 800157c:	60aa      	str	r2, [r5, #8]
 800157e:	60eb      	str	r3, [r5, #12]
 8001580:	3410      	adds	r4, #16
 8001582:	f10c 0c10 	add.w	ip, ip, #16
 8001586:	4574      	cmp	r4, lr
 8001588:	d1f3      	bne.n	8001572 <_Z9ModemTaskPv+0x5a>
 800158a:	4662      	mov	r2, ip
 800158c:	4623      	mov	r3, r4
 800158e:	cb03      	ldmia	r3!, {r0, r1}
 8001590:	6010      	str	r0, [r2, #0]
 8001592:	6051      	str	r1, [r2, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 8001598:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800159c:	3337      	adds	r3, #55	@ 0x37
 800159e:	4aae      	ldr	r2, [pc, #696]	@ (8001858 <_Z9ModemTaskPv+0x340>)
 80015a0:	461c      	mov	r4, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015a6:	6020      	str	r0, [r4, #0]
 80015a8:	6061      	str	r1, [r4, #4]
 80015aa:	60a2      	str	r2, [r4, #8]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 80015b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015b4:	33c3      	adds	r3, #195	@ 0xc3
 80015b6:	4aa9      	ldr	r2, [pc, #676]	@ (800185c <_Z9ModemTaskPv+0x344>)
 80015b8:	6810      	ldr	r0, [r2, #0]
 80015ba:	6018      	str	r0, [r3, #0]
 80015bc:	8892      	ldrh	r2, [r2, #4]
 80015be:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 80015c0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015c4:	33af      	adds	r3, #175	@ 0xaf
 80015c6:	49a6      	ldr	r1, [pc, #664]	@ (8001860 <_Z9ModemTaskPv+0x348>)
 80015c8:	461a      	mov	r2, r3
 80015ca:	460b      	mov	r3, r1
 80015cc:	cb03      	ldmia	r3!, {r0, r1}
 80015ce:	6010      	str	r0, [r2, #0]
 80015d0:	6051      	str	r1, [r2, #4]
 80015d2:	8819      	ldrh	r1, [r3, #0]
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	8111      	strh	r1, [r2, #8]
 80015d8:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 80015e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015e4:	4619      	mov	r1, r3
 80015e6:	489a      	ldr	r0, [pc, #616]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80015e8:	f001 fadc 	bl	8002ba4 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 80015ec:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015f0:	330f      	adds	r3, #15
 80015f2:	4619      	mov	r1, r3
 80015f4:	4896      	ldr	r0, [pc, #600]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80015f6:	f001 fb3f 	bl	8002c78 <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 80015fa:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015fe:	331e      	adds	r3, #30
 8001600:	4619      	mov	r1, r3
 8001602:	4893      	ldr	r0, [pc, #588]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001604:	f001 fc1e 	bl	8002e44 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 8001608:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800160c:	332d      	adds	r3, #45	@ 0x2d
 800160e:	4619      	mov	r1, r3
 8001610:	488f      	ldr	r0, [pc, #572]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001612:	f001 fe0b 	bl	800322c <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 8001616:	f107 0313 	add.w	r3, r7, #19
 800161a:	4619      	mov	r1, r3
 800161c:	488c      	ldr	r0, [pc, #560]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 800161e:	f001 fd55 	bl	80030cc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 8001622:	f107 0312 	add.w	r3, r7, #18
 8001626:	4619      	mov	r1, r3
 8001628:	4889      	ldr	r0, [pc, #548]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 800162a:	f001 fce3 	bl	8002ff4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 800162e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001632:	4619      	mov	r1, r3
 8001634:	488b      	ldr	r0, [pc, #556]	@ (8001864 <_Z9ModemTaskPv+0x34c>)
 8001636:	f003 fb39 	bl	8004cac <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 800163a:	2032      	movs	r0, #50	@ 0x32
 800163c:	f003 faae 	bl	8004b9c <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4888      	ldr	r0, [pc, #544]	@ (8001868 <_Z9ModemTaskPv+0x350>)
 8001648:	f003 fb4d 	bl	8004ce6 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001650:	f897 3165 	ldrb.w	r3, [r7, #357]	@ 0x165
 8001654:	2b03      	cmp	r3, #3
 8001656:	f200 81b8 	bhi.w	80019ca <_Z9ModemTaskPv+0x4b2>
 800165a:	a201      	add	r2, pc, #4	@ (adr r2, 8001660 <_Z9ModemTaskPv+0x148>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001671 	.word	0x08001671
 8001664:	08001759 	.word	0x08001759
 8001668:	08001879 	.word	0x08001879
 800166c:	080018c9 	.word	0x080018c9

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001670:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001674:	330f      	adds	r3, #15
 8001676:	497d      	ldr	r1, [pc, #500]	@ (800186c <_Z9ModemTaskPv+0x354>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff3f 	bl	80014fc <_ZSt6strstrPcPKc>
 800167e:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <_Z9ModemTaskPv+0x180>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001684:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001688:	330f      	adds	r3, #15
 800168a:	4979      	ldr	r1, [pc, #484]	@ (8001870 <_Z9ModemTaskPv+0x358>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff35 	bl	80014fc <_ZSt6strstrPcPKc>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01c      	beq.n	80016d2 <_Z9ModemTaskPv+0x1ba>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001698:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800169c:	331e      	adds	r3, #30
 800169e:	4973      	ldr	r1, [pc, #460]	@ (800186c <_Z9ModemTaskPv+0x354>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff2b 	bl	80014fc <_ZSt6strstrPcPKc>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <_Z9ModemTaskPv+0x1a8>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 80016ac:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80016b0:	331e      	adds	r3, #30
 80016b2:	496f      	ldr	r1, [pc, #444]	@ (8001870 <_Z9ModemTaskPv+0x358>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff21 	bl	80014fc <_ZSt6strstrPcPKc>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <_Z9ModemTaskPv+0x1ba>
					&& cpsiInfo != Modem::simA7672::no_service) {
 80016c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80016c4:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_Z9ModemTaskPv+0x1ba>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <_Z9ModemTaskPv+0x1bc>
 80016d2:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 817a 	beq.w	80019ce <_Z9ModemTaskPv+0x4b6>


				modeminfo = simA7672.setAPN(ModemData.apn);
 80016da:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80016de:	3337      	adds	r3, #55	@ 0x37
 80016e0:	4619      	mov	r1, r3
 80016e2:	485b      	ldr	r0, [pc, #364]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80016e4:	f001 f9b2 	bl	8002a4c <_ZN5Modem8simA76726setAPNEPc>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

				simA7672.sslversionset();
 80016ee:	4858      	ldr	r0, [pc, #352]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80016f0:	f002 fb04 	bl	8003cfc <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 80016f4:	4856      	ldr	r0, [pc, #344]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80016f6:	f002 fb3d 	bl	8003d74 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 80016fa:	4855      	ldr	r0, [pc, #340]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80016fc:	f002 fb76 	bl	8003dec <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 8001700:	4853      	ldr	r0, [pc, #332]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001702:	f002 fbaf 	bl	8003e64 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 8001706:	4852      	ldr	r0, [pc, #328]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001708:	f002 fbe8 	bl	8003edc <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 800170c:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 815c 	bne.w	80019ce <_Z9ModemTaskPv+0x4b6>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001716:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 800171a:	2b02      	cmp	r3, #2
 800171c:	d108      	bne.n	8001730 <_Z9ModemTaskPv+0x218>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 800171e:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 8001722:	4619      	mov	r1, r3
 8001724:	484a      	ldr	r0, [pc, #296]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001726:	f002 f89b 	bl	8003860 <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001730:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10b      	bne.n	8001750 <_Z9ModemTaskPv+0x238>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001738:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 800173c:	4619      	mov	r1, r3
 800173e:	4844      	ldr	r0, [pc, #272]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001740:	f001 ffb4 	bl	80036ac <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001744:	4842      	ldr	r0, [pc, #264]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001746:	f001 fee9 	bl	800351c <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
					}

					mqtt_routine = mqtt_enable;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165

				}

			}

			break;
 8001756:	e13a      	b.n	80019ce <_Z9ModemTaskPv+0x4b6>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001758:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800175c:	330f      	adds	r3, #15
 800175e:	4943      	ldr	r1, [pc, #268]	@ (800186c <_Z9ModemTaskPv+0x354>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fecb 	bl	80014fc <_ZSt6strstrPcPKc>
 8001766:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <_Z9ModemTaskPv+0x268>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 800176c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001770:	330f      	adds	r3, #15
 8001772:	493f      	ldr	r1, [pc, #252]	@ (8001870 <_Z9ModemTaskPv+0x358>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fec1 	bl	80014fc <_ZSt6strstrPcPKc>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <_Z9ModemTaskPv+0x2aa>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001780:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001784:	331e      	adds	r3, #30
 8001786:	4939      	ldr	r1, [pc, #228]	@ (800186c <_Z9ModemTaskPv+0x354>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff feb7 	bl	80014fc <_ZSt6strstrPcPKc>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <_Z9ModemTaskPv+0x290>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001794:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001798:	331e      	adds	r3, #30
 800179a:	4935      	ldr	r1, [pc, #212]	@ (8001870 <_Z9ModemTaskPv+0x358>)
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fead 	bl	80014fc <_ZSt6strstrPcPKc>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00c      	beq.n	80017c2 <_Z9ModemTaskPv+0x2aa>
					&& cpsiInfo != Modem::simA7672::no_service
 80017a8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80017ac:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <_Z9ModemTaskPv+0x2aa>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 80017b6:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <_Z9ModemTaskPv+0x2aa>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <_Z9ModemTaskPv+0x2ac>
 80017c2:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8104 	beq.w	80019d2 <_Z9ModemTaskPv+0x4ba>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 80017ca:	2100      	movs	r1, #0
 80017cc:	4820      	ldr	r0, [pc, #128]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80017ce:	f001 f995 	bl	8002afc <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 80017d2:	2101      	movs	r1, #1
 80017d4:	481e      	ldr	r0, [pc, #120]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80017d6:	f001 f991 	bl	8002afc <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 80017da:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80017de:	33d8      	adds	r3, #216	@ 0xd8
 80017e0:	4619      	mov	r1, r3
 80017e2:	481b      	ldr	r0, [pc, #108]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 80017e4:	f001 fe2a 	bl	800343c <_ZN5Modem8simA76729mqttStartEPh>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 80017ee:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d121      	bne.n	800183a <_Z9ModemTaskPv+0x322>

					mqttstartinfo = simA7672.mqttSetClient(
 80017f6:	f897 1160 	ldrb.w	r1, [r7, #352]	@ 0x160
 80017fa:	2301      	movs	r3, #1
 80017fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001874 <_Z9ModemTaskPv+0x35c>)
 80017fe:	4814      	ldr	r0, [pc, #80]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001800:	f001 fef2 	bl	80035e8 <_ZN5Modem8simA767213mqttSetClientEhPch>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 800180a:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <_Z9ModemTaskPv+0x30e>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 8001812:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 8001816:	4619      	mov	r1, r3
 8001818:	480d      	ldr	r0, [pc, #52]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 800181a:	f002 fa13 	bl	8003c44 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 800181e:	2302      	movs	r3, #2
 8001820:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
					simA7672.mqttStop();
				}

			}

			break;
 8001824:	e0d5      	b.n	80019d2 <_Z9ModemTaskPv+0x4ba>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001826:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 800182a:	4619      	mov	r1, r3
 800182c:	4808      	ldr	r0, [pc, #32]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 800182e:	f001 ff3d 	bl	80036ac <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001832:	4807      	ldr	r0, [pc, #28]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001834:	f001 fe72 	bl	800351c <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001838:	e0cb      	b.n	80019d2 <_Z9ModemTaskPv+0x4ba>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 800183a:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 800183e:	4619      	mov	r1, r3
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001842:	f001 ff33 	bl	80036ac <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 8001846:	4802      	ldr	r0, [pc, #8]	@ (8001850 <_Z9ModemTaskPv+0x338>)
 8001848:	f001 fe68 	bl	800351c <_ZN5Modem8simA76728mqttStopEv>
			break;
 800184c:	e0c1      	b.n	80019d2 <_Z9ModemTaskPv+0x4ba>
 800184e:	bf00      	nop
 8001850:	20000514 	.word	0x20000514
 8001854:	08010118 	.word	0x08010118
 8001858:	08010154 	.word	0x08010154
 800185c:	08010164 	.word	0x08010164
 8001860:	0801016c 	.word	0x0801016c
 8001864:	2000178c 	.word	0x2000178c
 8001868:	2000185c 	.word	0x2000185c
 800186c:	080107ec 	.word	0x080107ec
 8001870:	080107f8 	.word	0x080107f8
 8001874:	08010178 	.word	0x08010178
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 8001878:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 80aa 	bne.w	80019d6 <_Z9ModemTaskPv+0x4be>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 8001882:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 8001886:	2b02      	cmp	r3, #2
 8001888:	f000 80a5 	beq.w	80019d6 <_Z9ModemTaskPv+0x4be>

				mqttserverinfo = simA7672.mqttConnectServer(
 800188c:	f897 1160 	ldrb.w	r1, [r7, #352]	@ 0x160
 8001890:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001894:	334b      	adds	r3, #75	@ 0x4b
 8001896:	461a      	mov	r2, r3
 8001898:	4851      	ldr	r0, [pc, #324]	@ (80019e0 <_Z9ModemTaskPv+0x4c8>)
 800189a:	f001 ff63 	bl	8003764 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 800189e:	4603      	mov	r3, r0
 80018a0:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 80018a4:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d103      	bne.n	80018b4 <_Z9ModemTaskPv+0x39c>

					mqtt_routine = mqtt_loop;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
					mqtt_routine = net_enable;
				}

			}

			break;
 80018b2:	e090      	b.n	80019d6 <_Z9ModemTaskPv+0x4be>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80018b4:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 80018b8:	4619      	mov	r1, r3
 80018ba:	4849      	ldr	r0, [pc, #292]	@ (80019e0 <_Z9ModemTaskPv+0x4c8>)
 80018bc:	f001 ffd0 	bl	8003860 <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
			break;
 80018c6:	e086      	b.n	80019d6 <_Z9ModemTaskPv+0x4be>
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 80018c8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80018cc:	334b      	adds	r3, #75	@ 0x4b
 80018ce:	4619      	mov	r1, r3
 80018d0:	4843      	ldr	r0, [pc, #268]	@ (80019e0 <_Z9ModemTaskPv+0x4c8>)
 80018d2:	f001 fd3b 	bl	800334c <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
			mqtt_counter++;
 80018dc:	f897 3164 	ldrb.w	r3, [r7, #356]	@ 0x164
 80018e0:	3301      	adds	r3, #1
 80018e2:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 80018e6:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d010      	beq.n	8001910 <_Z9ModemTaskPv+0x3f8>
 80018ee:	f897 3164 	ldrb.w	r3, [r7, #356]	@ 0x164
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d90c      	bls.n	8001910 <_Z9ModemTaskPv+0x3f8>
				ModemData.internet = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80018fc:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 8001900:	4619      	mov	r1, r3
 8001902:	4837      	ldr	r0, [pc, #220]	@ (80019e0 <_Z9ModemTaskPv+0x4c8>)
 8001904:	f001 ffac 	bl	8003860 <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 800190e:	e064      	b.n	80019da <_Z9ModemTaskPv+0x4c2>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 8001910:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 8001914:	2b02      	cmp	r3, #2
 8001916:	d160      	bne.n	80019da <_Z9ModemTaskPv+0x4c2>
				ModemData.internet = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
				mqtt_counter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT,ControlData.uniqueID,ControlData.timestamp,ControlData.fuelPer
 8001924:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001928:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001934:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001938:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800193c:	607b      	str	r3, [r7, #4]
						,ControlData.fuelConsp,ControlData.refuelingStartTime,ControlData.refuelingEndTime,
 800193e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001942:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT,ControlData.uniqueID,ControlData.timestamp,ControlData.fuelPer
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8001956:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 800195a:	6d89      	ldr	r1, [r1, #88]	@ 0x58
 800195c:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001960:	f5a0 70aa 	sub.w	r0, r0, #340	@ 0x154
 8001964:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8001966:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 800196a:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 800196e:	6ee4      	ldr	r4, [r4, #108]	@ 0x6c
 8001970:	f507 75b4 	add.w	r5, r7, #360	@ 0x168
 8001974:	f5a5 75aa 	sub.w	r5, r5, #340	@ 0x154
 8001978:	6f2d      	ldr	r5, [r5, #112]	@ 0x70
 800197a:	f107 0614 	add.w	r6, r7, #20
 800197e:	9507      	str	r5, [sp, #28]
 8001980:	9406      	str	r4, [sp, #24]
 8001982:	9005      	str	r0, [sp, #20]
 8001984:	9104      	str	r1, [sp, #16]
 8001986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	9200      	str	r2, [sp, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4632      	mov	r2, r6
 8001992:	4914      	ldr	r1, [pc, #80]	@ (80019e4 <_Z9ModemTaskPv+0x4cc>)
 8001994:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <_Z9ModemTaskPv+0x4d0>)
 8001996:	f00c f911 	bl	800dbbc <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 800199a:	f897 1160 	ldrb.w	r1, [r7, #352]	@ 0x160
 800199e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019a2:	f103 02c3 	add.w	r2, r3, #195	@ 0xc3
 80019a6:	23ff      	movs	r3, #255	@ 0xff
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <_Z9ModemTaskPv+0x4d4>)
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <_Z9ModemTaskPv+0x4c8>)
 80019ae:	f001 ffd3 	bl	8003958 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 80019b6:	f897 1160 	ldrb.w	r1, [r7, #352]	@ 0x160
 80019ba:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019be:	33c3      	adds	r3, #195	@ 0xc3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <_Z9ModemTaskPv+0x4c8>)
 80019c4:	f002 f884 	bl	8003ad0 <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 80019c8:	e007      	b.n	80019da <_Z9ModemTaskPv+0x4c2>
		}

		default:
			break;
 80019ca:	bf00      	nop
 80019cc:	e608      	b.n	80015e0 <_Z9ModemTaskPv+0xc8>
			break;
 80019ce:	bf00      	nop
 80019d0:	e606      	b.n	80015e0 <_Z9ModemTaskPv+0xc8>
			break;
 80019d2:	bf00      	nop
 80019d4:	e604      	b.n	80015e0 <_Z9ModemTaskPv+0xc8>
			break;
 80019d6:	bf00      	nop
 80019d8:	e602      	b.n	80015e0 <_Z9ModemTaskPv+0xc8>
			break;
 80019da:	bf00      	nop
		simA7672.getSim(ModemData.pin);
 80019dc:	e600      	b.n	80015e0 <_Z9ModemTaskPv+0xc8>
 80019de:	bf00      	nop
 80019e0:	20000514 	.word	0x20000514
 80019e4:	08010180 	.word	0x08010180
 80019e8:	20000d14 	.word	0x20000d14
 80019ec:	20001544 	.word	0x20001544

080019f0 <_Z41__static_initialization_and_destruction_0ii>:



	}

}
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d103      	bne.n	8001a12 <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_USART2);
 8001a0a:	4904      	ldr	r1, [pc, #16]	@ (8001a1c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001a0c:	4804      	ldr	r0, [pc, #16]	@ (8001a20 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001a0e:	f000 fe79 	bl	8002704 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20001e18 	.word	0x20001e18
 8001a20:	20000514 	.word	0x20000514

08001a24 <_GLOBAL__sub_I_simA7672>:
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff ffdf 	bl	80019f0 <_Z41__static_initialization_and_destruction_0ii>
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZN8UniqueID12CharToHexascEPhh>:
System_Rtos::freertos_queues InverterDataQueue(1,sizeof(struct InverterData_Queue),	queuebuffer_2);

const char kaHexAsc[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
     *pPos++ = kaHexAsc[Wert >> 4];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 8001a4a:	5c99      	ldrb	r1, [r3, r2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	460a      	mov	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
     *pPos = kaHexAsc[Wert & 0x0f];
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 8001a5e:	5cd2      	ldrb	r2, [r2, r3]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	701a      	strb	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	08010804 	.word	0x08010804

08001a74 <_ZN8UniqueID6GetUidEv>:

char *UniqueID::GetUid()
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001a7a:	f004 fdbf 	bl	80065fc <HAL_GetUIDw1>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001a84:	f004 fdba 	bl	80065fc <HAL_GetUIDw1>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001a90:	4c1c      	ldr	r4, [pc, #112]	@ (8001b04 <_ZN8UniqueID6GetUidEv+0x90>)
 8001a92:	f004 fdbf 	bl	8006614 <HAL_GetUIDw2>
 8001a96:	4603      	mov	r3, r0
 8001a98:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b23      	cmp	r3, #35	@ 0x23
 8001a9e:	d909      	bls.n	8001ab4 <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b3d      	cmp	r3, #61	@ 0x3d
 8001aa4:	bf28      	it	cs
 8001aa6:	233d      	movcs	r3, #61	@ 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	333d      	adds	r3, #61	@ 0x3d
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001ab0:	71da      	strb	r2, [r3, #7]
 8001ab2:	e00b      	b.n	8001acc <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b09      	cmp	r3, #9
 8001ab8:	d901      	bls.n	8001abe <_ZN8UniqueID6GetUidEv+0x4a>
 8001aba:	2241      	movs	r2, #65	@ 0x41
 8001abc:	e000      	b.n	8001ac0 <_ZN8UniqueID6GetUidEv+0x4c>
 8001abe:	2230      	movs	r2, #48	@ 0x30
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001aca:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001acc:	f004 fd8a 	bl	80065e4 <HAL_GetUIDw0>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480b      	ldr	r0, [pc, #44]	@ (8001b08 <_ZN8UniqueID6GetUidEv+0x94>)
 8001ada:	f7ff ffab 	bl	8001a34 <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001ade:	f004 fd81 	bl	80065e4 <HAL_GetUIDw0>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4808      	ldr	r0, [pc, #32]	@ (8001b0c <_ZN8UniqueID6GetUidEv+0x98>)
 8001aea:	f7ff ffa3 	bl	8001a34 <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8001aee:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001af4:	4b02      	ldr	r3, [pc, #8]	@ (8001b00 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20001bd8 	.word	0x20001bd8
 8001b04:	20001bdb 	.word	0x20001bdb
 8001b08:	20001be0 	.word	0x20001be0
 8001b0c:	20001be2 	.word	0x20001be2

08001b10 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8001b14:	4809      	ldr	r0, [pc, #36]	@ (8001b3c <_Z11app_mainCppv+0x2c>)
 8001b16:	f003 f878 	bl	8004c0a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
	InverterTaskHandler.createTask();
 8001b1a:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <_Z11app_mainCppv+0x30>)
 8001b1c:	f003 f875 	bl	8004c0a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ControlnDDisplayTaskHandler.createTask();
 8001b20:	4808      	ldr	r0, [pc, #32]	@ (8001b44 <_Z11app_mainCppv+0x34>)
 8001b22:	f003 f872 	bl	8004c0a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ModemDataQueue.queueCreate();
 8001b26:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <_Z11app_mainCppv+0x38>)
 8001b28:	f003 f8a4 	bl	8004c74 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    ControlDataQueue.queueCreate();
 8001b2c:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <_Z11app_mainCppv+0x3c>)
 8001b2e:	f003 f8a1 	bl	8004c74 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    InverterDataQueue.queueCreate();
 8001b32:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <_Z11app_mainCppv+0x40>)
 8001b34:	f003 f89e 	bl	8004c74 <_ZN11System_Rtos15freertos_queues11queueCreateEv>

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20001644 	.word	0x20001644
 8001b40:	20001668 	.word	0x20001668
 8001b44:	2000168c 	.word	0x2000168c
 8001b48:	2000178c 	.word	0x2000178c
 8001b4c:	2000185c 	.word	0x2000185c
 8001b50:	20001b7c 	.word	0x20001b7c

08001b54 <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
    	app_mainCpp();
 8001b58:	f7ff ffda 	bl	8001b10 <_Z11app_mainCppv>
    }
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_Z41__static_initialization_and_destruction_0ii>:


}
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d138      	bne.n	8001be2 <_Z41__static_initialization_and_destruction_0ii+0x82>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d133      	bne.n	8001be2 <_Z41__static_initialization_and_destruction_0ii+0x82>
System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 8001b7a:	2318      	movs	r3, #24
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b86:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001b88:	4919      	ldr	r1, [pc, #100]	@ (8001bf0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b8a:	481a      	ldr	r0, [pc, #104]	@ (8001bf4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001b8c:	f003 f81c 	bl	8004bc8 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks InverterTaskHandler(InverterTask,"Inverter",_StackSize_Inverter, (void*) 1,24);
 8001b90:	2318      	movs	r3, #24
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2301      	movs	r3, #1
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9c:	4a16      	ldr	r2, [pc, #88]	@ (8001bf8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001b9e:	4917      	ldr	r1, [pc, #92]	@ (8001bfc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001ba0:	4817      	ldr	r0, [pc, #92]	@ (8001c00 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001ba2:	f003 f811 	bl	8004bc8 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlnDDisplayTaskHandler(ControlnDDisplayTask,"ControlDis",_StackSize_ControlnDDisplay, (void*) 1,24);
 8001ba6:	2318      	movs	r3, #24
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bb2:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001bb4:	4914      	ldr	r1, [pc, #80]	@ (8001c08 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001bb6:	4815      	ldr	r0, [pc, #84]	@ (8001c0c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001bb8:	f003 f806 	bl	8004bc8 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_queues ModemDataQueue(1,sizeof(struct ModemData_Queue),	queuebuffer);
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001bbe:	22d9      	movs	r2, #217	@ 0xd9
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001bc4:	f003 f83b 	bl	8004c3e <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues ControlDataQueue(1,sizeof(struct ControlData_Queue),	queuebuffer_1);
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001bca:	2274      	movs	r2, #116	@ 0x74
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4813      	ldr	r0, [pc, #76]	@ (8001c1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001bd0:	f003 f835 	bl	8004c3e <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues InverterDataQueue(1,sizeof(struct InverterData_Queue),	queuebuffer_2);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001bd6:	f240 22c2 	movw	r2, #706	@ 0x2c2
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4811      	ldr	r0, [pc, #68]	@ (8001c24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001bde:	f003 f82e 	bl	8004c3e <_ZN11System_Rtos15freertos_queuesC1EttPh>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0801046c 	.word	0x0801046c
 8001bf0:	08001519 	.word	0x08001519
 8001bf4:	20001644 	.word	0x20001644
 8001bf8:	08010474 	.word	0x08010474
 8001bfc:	08001445 	.word	0x08001445
 8001c00:	20001668 	.word	0x20001668
 8001c04:	08010480 	.word	0x08010480
 8001c08:	08000f79 	.word	0x08000f79
 8001c0c:	2000168c 	.word	0x2000168c
 8001c10:	200016b0 	.word	0x200016b0
 8001c14:	2000178c 	.word	0x2000178c
 8001c18:	200017e8 	.word	0x200017e8
 8001c1c:	2000185c 	.word	0x2000185c
 8001c20:	200018b8 	.word	0x200018b8
 8001c24:	20001b7c 	.word	0x20001b7c

08001c28 <_GLOBAL__sub_I_ModemTaskHandler>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ff95 	bl	8001b60 <_Z41__static_initialization_and_destruction_0ii>
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN3HMI4DWINC1EP20__UART_HandleTypeDef>:

namespace HMI {



DWIN::DWIN(UART_HandleTypeDef *huart) : serial_(huart){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3308      	adds	r3, #8
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 f9fa 	bl	8005042 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>

}
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZN3HMI4DWIN7StartupEv>:


void DWIN::Startup()
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

	clearBox(Time);
 8001c60:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f987 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(Date);
 8001c6a:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f982 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(Network);
 8001c74:	f248 1110 	movw	r1, #33040	@ 0x8110
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f97d 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(SigQ);
 8001c7e:	f248 2120 	movw	r1, #33312	@ 0x8220
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f978 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(Net);
 8001c88:	f248 3130 	movw	r1, #33584	@ 0x8330
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f973 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>

	clearBox(source_bat);
 8001c92:	f245 1110 	movw	r1, #20752	@ 0x5110
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f96e 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(source_gen);
 8001c9c:	f245 2120 	movw	r1, #21024	@ 0x5220
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f969 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(source_sol);
 8001ca6:	f245 3130 	movw	r1, #21296	@ 0x5330
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f964 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(alarm_freq);
 8001cb0:	f246 1110 	movw	r1, #24848	@ 0x6110
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f95f 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(alarm_overl);
 8001cba:	f246 2120 	movw	r1, #25120	@ 0x6220
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f95a 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(alarm_phasel);
 8001cc4:	f246 3130 	movw	r1, #25392	@ 0x6330
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f955 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(chrgT);
 8001cce:	f247 2120 	movw	r1, #29216	@ 0x7220
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f950 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>
	clearBox(dchgT);
 8001cd8:	f247 3130 	movw	r1, #29488	@ 0x7330
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f94b 	bl	8001f78 <_ZN3HMI4DWIN8clearBoxEt>

	SendNumericData(Temperature,0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f244 0110 	movw	r1, #16400	@ 0x4010
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f85f 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>
	SendNumericData(Humidity,0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f244 0120 	movw	r1, #16416	@ 0x4020
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f859 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>
	SendNumericData(TankLevel,0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f242 0110 	movw	r1, #8208	@ 0x2010
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f853 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>
	SendNumericData(Battery,0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f247 0110 	movw	r1, #28688	@ 0x7010
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f84d 	bl	8001dac <_ZN3HMI4DWIN15SendNumericDataEtt>


	SendFloatData(phase1,0.00);
 8001d12:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d16:	f243 1110 	movw	r1, #12560	@ 0x3110
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f884 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(phase2,0.00);
 8001d20:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d24:	f243 2120 	movw	r1, #12832	@ 0x3220
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f87d 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(phase3,0.00);
 8001d2e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d32:	f243 3130 	movw	r1, #13104	@ 0x3330
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f876 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(curr1,0.00);
 8001d3c:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d40:	f44f 5151 	mov.w	r1, #13376	@ 0x3440
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f86f 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(curr2,0.00);
 8001d4a:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d4e:	f243 5150 	movw	r1, #13648	@ 0x3550
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f868 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(curr3,0.00);
 8001d58:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d5c:	f243 6160 	movw	r1, #13920	@ 0x3660
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f861 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(energy,0.00);
 8001d66:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d6a:	f243 1111 	movw	r1, #12561	@ 0x3111
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f85a 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(pwr1,0.00);
 8001d74:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d78:	f243 7170 	movw	r1, #14192	@ 0x3770
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f853 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(pwr2,0.00);
 8001d82:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d86:	f44f 5162 	mov.w	r1, #14464	@ 0x3880
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f84c 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>
	SendFloatData(pwr3,0.00);
 8001d90:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001da8 <_ZN3HMI4DWIN7StartupEv+0x150>
 8001d94:	f643 1190 	movw	r1, #14736	@ 0x3990
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f845 	bl	8001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>



}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	00000000 	.word	0x00000000

08001dac <_ZN3HMI4DWIN15SendNumericDataEtt>:

enum DWIN::status DWIN::SendNumericData(uint16_t id,uint16_t val)
   {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b09c      	sub	sp, #112	@ 0x70
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	803b      	strh	r3, [r7, #0]
       status stat = DWIN_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
       uint8_t buf[100] = {0};
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	2260      	movs	r2, #96	@ 0x60
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00b ff57 	bl	800dc82 <memset>
       buf[0] = frame1;
 8001dd4:	235a      	movs	r3, #90	@ 0x5a
 8001dd6:	723b      	strb	r3, [r7, #8]
       buf[1] = frame2;
 8001dd8:	23a5      	movs	r3, #165	@ 0xa5
 8001dda:	727b      	strb	r3, [r7, #9]
       buf[2] = 0x05;
 8001ddc:	2305      	movs	r3, #5
 8001dde:	72bb      	strb	r3, [r7, #10]
       buf[3] = Send;
 8001de0:	2382      	movs	r3, #130	@ 0x82
 8001de2:	72fb      	strb	r3, [r7, #11]
       convert_16bit_to_8bit.W = id;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	801a      	strh	r2, [r3, #0]
       buf[4] = convert_16bit_to_8bit.B.Hb;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	733b      	strb	r3, [r7, #12]
       buf[5] = convert_16bit_to_8bit.B.Lb;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	737b      	strb	r3, [r7, #13]
       convert_16bit_to_8bit.W = val;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	883a      	ldrh	r2, [r7, #0]
 8001dfa:	801a      	strh	r2, [r3, #0]
       buf[6] = convert_16bit_to_8bit.B.Hb;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	73bb      	strb	r3, [r7, #14]
       buf[7] = convert_16bit_to_8bit.B.Lb;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	73fb      	strb	r3, [r7, #15]

       //clearTextBox(id);
       serial_.TransmitData(buf, 8, 1000);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f103 0008 	add.w	r0, r3, #8
 8001e0e:	f107 0108 	add.w	r1, r7, #8
 8001e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e16:	2208      	movs	r2, #8
 8001e18:	f003 f922 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>

       return stat;
 8001e1c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
   }
 8001e20:	4618      	mov	r0, r3
 8001e22:	3770      	adds	r7, #112	@ 0x70
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZN3HMI4DWIN13SendFloatDataEtf>:

enum DWIN::status DWIN::SendFloatData(uint16_t id,float val)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b09e      	sub	sp, #120	@ 0x78
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	460b      	mov	r3, r1
 8001e32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e36:	817b      	strh	r3, [r7, #10]
    status stat = DWIN_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint8_t buf[100] = {0};
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	2260      	movs	r2, #96	@ 0x60
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f00b ff19 	bl	800dc82 <memset>
    buf[0] = frame1;
 8001e50:	235a      	movs	r3, #90	@ 0x5a
 8001e52:	743b      	strb	r3, [r7, #16]
    buf[1] = frame2;
 8001e54:	23a5      	movs	r3, #165	@ 0xa5
 8001e56:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x07;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	74bb      	strb	r3, [r7, #18]
    buf[3] = Send;
 8001e5c:	2382      	movs	r3, #130	@ 0x82
 8001e5e:	74fb      	strb	r3, [r7, #19]
    convert_16bit_to_8bit.W = id;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	897a      	ldrh	r2, [r7, #10]
 8001e64:	801a      	strh	r2, [r3, #0]
    buf[4] = convert_16bit_to_8bit.B.Hb;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	753b      	strb	r3, [r7, #20]
    buf[5] = convert_16bit_to_8bit.B.Lb;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	757b      	strb	r3, [r7, #21]
    convert_float_to_bytes.f = val;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]
    buf[6] = convert_float_to_bytes.B[3];
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	79db      	ldrb	r3, [r3, #7]
 8001e7c:	75bb      	strb	r3, [r7, #22]
    buf[7] = convert_float_to_bytes.B[2];
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	799b      	ldrb	r3, [r3, #6]
 8001e82:	75fb      	strb	r3, [r7, #23]
    buf[8] = convert_float_to_bytes.B[1];
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	795b      	ldrb	r3, [r3, #5]
 8001e88:	763b      	strb	r3, [r7, #24]
    buf[9] = convert_float_to_bytes.B[0];
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	767b      	strb	r3, [r7, #25]

    //clearTextBox(id);
    serial_.TransmitData(buf, 10, 1000);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f103 0008 	add.w	r0, r3, #8
 8001e96:	f107 0110 	add.w	r1, r7, #16
 8001e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9e:	220a      	movs	r2, #10
 8001ea0:	f003 f8de 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>

    return stat;
 8001ea4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3778      	adds	r7, #120	@ 0x78
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZN3HMI4DWIN12SendTextDataEtPc>:



enum DWIN::status DWIN::SendTextData(uint16_t id,char *data)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0a0      	sub	sp, #128	@ 0x80
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	817b      	strh	r3, [r7, #10]
	 status stat = DWIN_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	 uint8_t len = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	 uint8_t buf[100] = {0};
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2260      	movs	r2, #96	@ 0x60
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f00b fed3 	bl	800dc82 <memset>

    buf[0] = frame1;
 8001edc:	235a      	movs	r3, #90	@ 0x5a
 8001ede:	743b      	strb	r3, [r7, #16]
    buf[1] = frame2;
 8001ee0:	23a5      	movs	r3, #165	@ 0xa5
 8001ee2:	747b      	strb	r3, [r7, #17]
    buf[3] = Send;
 8001ee4:	2382      	movs	r3, #130	@ 0x82
 8001ee6:	74fb      	strb	r3, [r7, #19]
    convert_16bit_to_8bit.W = id;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	897a      	ldrh	r2, [r7, #10]
 8001eec:	801a      	strh	r2, [r3, #0]
    buf[4] = convert_16bit_to_8bit.B.Hb;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	753b      	strb	r3, [r7, #20]
    buf[5] = convert_16bit_to_8bit.B.Lb;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	757b      	strb	r3, [r7, #21]
    len = 3;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    len = stringTohex(data,buf,6,len);
 8001f00:	f107 0210 	add.w	r2, r7, #16
 8001f04:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f869 	bl	8001fe6 <_ZN3HMI4DWIN11stringTohexEPcPhhh>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

    len = len + 3;
 8001f1a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f1e:	3303      	adds	r3, #3
 8001f20:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    buf[len] = ' ';
 8001f24:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f28:	3378      	adds	r3, #120	@ 0x78
 8001f2a:	443b      	add	r3, r7
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f803 2c68 	strb.w	r2, [r3, #-104]
    len = len + 1;
 8001f32:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f36:	3301      	adds	r3, #1
 8001f38:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    buf[len] = ' ';
 8001f3c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f40:	3378      	adds	r3, #120	@ 0x78
 8001f42:	443b      	add	r3, r7
 8001f44:	2220      	movs	r2, #32
 8001f46:	f803 2c68 	strb.w	r2, [r3, #-104]

    buf[2] = len; //additional to erase extra text in system
 8001f4a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f4e:	74bb      	strb	r3, [r7, #18]

    //clearTextBox(id);
    serial_.TransmitData(buf, len + 3, 1000);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f103 0008 	add.w	r0, r3, #8
 8001f56:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3303      	adds	r3, #3
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	f107 0110 	add.w	r1, r7, #16
 8001f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f68:	f003 f87a 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>

	 return stat;
 8001f6c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3778      	adds	r7, #120	@ 0x78
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN3HMI4DWIN8clearBoxEt>:

enum DWIN::status DWIN::clearBox(uint16_t id)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09c      	sub	sp, #112	@ 0x70
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
	 status stat = DWIN_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	 uint8_t buf[100] = {0};
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2260      	movs	r2, #96	@ 0x60
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00b fe73 	bl	800dc82 <memset>

    buf[0] = frame1;
 8001f9c:	235a      	movs	r3, #90	@ 0x5a
 8001f9e:	723b      	strb	r3, [r7, #8]
    buf[1] = frame2;
 8001fa0:	23a5      	movs	r3, #165	@ 0xa5
 8001fa2:	727b      	strb	r3, [r7, #9]
    buf[2] = 0x05;
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	72bb      	strb	r3, [r7, #10]
    buf[3] = Send;
 8001fa8:	2382      	movs	r3, #130	@ 0x82
 8001faa:	72fb      	strb	r3, [r7, #11]
    convert_16bit_to_8bit.W = id;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	801a      	strh	r2, [r3, #0]
    buf[4] = convert_16bit_to_8bit.B.Hb;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	733b      	strb	r3, [r7, #12]
    buf[5] = convert_16bit_to_8bit.B.Lb;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	737b      	strb	r3, [r7, #13]
    buf[6] = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73bb      	strb	r3, [r7, #14]
    buf[7] = 0x00;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]

    serial_.TransmitData(buf, 8, 1000);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f103 0008 	add.w	r0, r3, #8
 8001fcc:	f107 0108 	add.w	r1, r7, #8
 8001fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	f003 f843 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>
    return stat;
 8001fda:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3770      	adds	r7, #112	@ 0x70
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_ZN3HMI4DWIN11stringTohexEPcPhhh>:


uint8_t DWIN::stringTohex(char *input,uint8_t *output,uint8_t index,uint8_t len)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	70fb      	strb	r3, [r7, #3]

	    size_t length = std::strlen(input);
 8001ff4:	68b8      	ldr	r0, [r7, #8]
 8001ff6:	f7fe f93b 	bl	8000270 <strlen>
 8001ffa:	6138      	str	r0, [r7, #16]


	     for (size_t i = 0; i < length; ++i) {
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e01f      	b.n	8002042 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x5c>
	    	if(input[i] != '\0')
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x4a>
	    	 {
	    	   output[index] = static_cast<uint8_t>(input[i]);
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	441a      	add	r2, r3
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	440b      	add	r3, r1
 800201a:	7812      	ldrb	r2, [r2, #0]
 800201c:	701a      	strb	r2, [r3, #0]
	    	   len++;
 800201e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002022:	3301      	adds	r3, #1
 8002024:	f887 3020 	strb.w	r3, [r7, #32]
	    	   index++;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	3301      	adds	r3, #1
 800202c:	70fb      	strb	r3, [r7, #3]
 800202e:	e005      	b.n	800203c <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x56>
	    	 }
	    	else
	    	{
	    		 output[index] = 0x00;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	    		break;
 800203a:	e006      	b.n	800204a <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x64>
	     for (size_t i = 0; i < length; ++i) {
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3db      	bcc.n	8002002 <_ZN3HMI4DWIN11stringTohexEPcPhhh+0x1c>
	    	}
	     }

	    return len;
 800204a:	f897 3020 	ldrb.w	r3, [r7, #32]

}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:
struct Voltronic::classInstanceRecorder Voltronic::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t Voltronic::ClassInstanceIncrementer = 0;

Voltronic::Voltronic(UART_HandleTypeDef *huart, GPIO_TypeDef *GPIOx,
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	807b      	strh	r3, [r7, #2]
		uint16_t GPIO_Pin) :
		GlobalTxBufs { Voltronic::Txbuffer }, GlobalRxBufs { Voltronic::Rxbuffer }, serial_(
				huart), checking() {
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4618      	mov	r0, r3
 800206a:	23ff      	movs	r3, #255	@ 0xff
 800206c:	461a      	mov	r2, r3
 800206e:	2100      	movs	r1, #0
 8002070:	f00b fe07 	bl	800dc82 <memset>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	33ff      	adds	r3, #255	@ 0xff
 8002078:	22ff      	movs	r2, #255	@ 0xff
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f00b fe00 	bl	800dc82 <memset>
		GlobalTxBufs { Voltronic::Txbuffer }, GlobalRxBufs { Voltronic::Rxbuffer }, serial_(
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f103 02ff 	add.w	r2, r3, #255	@ 0xff
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 ffcf 	bl	8005042 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 f818 	bl	80050e0 <_ZN10System_sys16Parsing_CheckingC1Ev>

	Voltronic::ClassInstances[ClassInstanceIncrementer].huart = huart;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc8>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	Voltronic::ClassInstances[ClassInstanceIncrementer].Instance = this;
 80020be:	4b17      	ldr	r3, [pc, #92]	@ (800211c <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4a17      	ldr	r2, [pc, #92]	@ (8002120 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc8>)
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]

	Voltronic::ClassInstanceIncrementer++;
 80020cc:	4b13      	ldr	r3, [pc, #76]	@ (800211c <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 80020d6:	701a      	strb	r2, [r3, #0]
	if (Voltronic::ClassInstanceIncrementer > numberofuart) {
 80020d8:	4b10      	ldr	r3, [pc, #64]	@ (800211c <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d902      	bls.n	80020e6 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x8e>
		Voltronic::ClassInstanceIncrementer = 0;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
	}

	setInverterCallback(Voltronic::RxCBStatic, Voltronic::TxCBStatic);
 80020e6:	490f      	ldr	r1, [pc, #60]	@ (8002124 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xcc>)
 80020e8:	480f      	ldr	r0, [pc, #60]	@ (8002128 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xd0>)
 80020ea:	f002 fe2f 	bl	8004d4c <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

	DE_Port_ = GPIOx;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	DE_Pin_ = GPIO_Pin;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	Disable_DE
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	f005 f92d 	bl	800736c <HAL_GPIO_WritePin>
	; // lower the DE         NAK
}
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20001c00 	.word	0x20001c00
 8002120:	20001be8 	.word	0x20001be8
 8002124:	080026f1 	.word	0x080026f1
 8002128:	0800268d 	.word	0x0800268d

0800212c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c>:
void Voltronic::Model_Inquiry(char *Model) {
	//status stat = Voltronic_OK;

}

void Voltronic::DeviceStat_Inquiry_qpigs(char buf[24][10]) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t i = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
	status stat = Voltronic_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
	uint8_t *current;
	PrepRxTx(DevGenStatus, sizeof(DevGenStatus) - 1, 1000, _CR, 1);
 800213e:	2301      	movs	r3, #1
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	230d      	movs	r3, #13
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	2206      	movs	r2, #6
 800214c:	4931      	ldr	r1, [pc, #196]	@ (8002214 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xe8>)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8f4 	bl	800233c <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>
	stat = check_eventTimeout(rx_evt, 1200);
 8002154:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002158:	2100      	movs	r1, #0
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f9e3 	bl	8002526 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]
	if (stat == Voltronic_OK) {
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13a      	bne.n	80021e0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>

		if (Rxbuffer[0] == '(' && Rxbuffer[1] != 'N' && Rxbuffer[2] != 'A'
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b28      	cmp	r3, #40	@ 0x28
 8002170:	d136      	bne.n	80021e0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	2b4e      	cmp	r3, #78	@ 0x4e
 8002178:	d032      	beq.n	80021e0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	2b41      	cmp	r3, #65	@ 0x41
 8002180:	d02e      	beq.n	80021e0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
				&& Rxbuffer[3] != 'K') {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	2b4b      	cmp	r3, #75	@ 0x4b
 8002188:	d02a      	beq.n	80021e0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
			current = Rxbuffer;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	613b      	str	r3, [r7, #16]
			while (i < 24
 800218e:	e007      	b.n	80021a0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0x74>
					&& checking.extractdatainsegments(
							reinterpret_cast<char*>(current), buf[i], 10, &len,
							' ') == checking.sys_ok) {
				current += len; //increment buffer to next position we got from function
 8002190:	89bb      	ldrh	r3, [r7, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
				i++;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	3301      	adds	r3, #1
 800219e:	75fb      	strb	r3, [r7, #23]
					&& checking.extractdatainsegments(
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b17      	cmp	r3, #23
 80021a4:	d818      	bhi.n	80021d8 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xac>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f503 7006 	add.w	r0, r3, #536	@ 0x218
							reinterpret_cast<char*>(current), buf[i], 10, &len,
 80021ac:	7dfa      	ldrb	r2, [r7, #23]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	441a      	add	r2, r3
					&& checking.extractdatainsegments(
 80021bc:	2320      	movs	r3, #32
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	230a      	movs	r3, #10
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	f003 f8d6 	bl	800537a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xac>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xae>
 80021d8:	2300      	movs	r3, #0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1d8      	bne.n	8002190 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0x64>
			}

			return;
 80021de:	e015      	b.n	800220c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xe0>
		}

	}

	/*will reach this point only if something is not right*/
	i = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	75fb      	strb	r3, [r7, #23]
	while (i < 24) {
 80021e4:	e00f      	b.n	8002206 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xda>
		std::strncpy(buf[i], "0", 2);
 80021e6:	7dfa      	ldrb	r2, [r7, #23]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	4908      	ldr	r1, [pc, #32]	@ (8002218 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xec>)
 80021f8:	461a      	mov	r2, r3
 80021fa:	460b      	mov	r3, r1
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	8013      	strh	r3, [r2, #0]
		i++;
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	3301      	adds	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
	while (i < 24) {
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b17      	cmp	r3, #23
 800220a:	d9ec      	bls.n	80021e6 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xba>
	}

}
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08010814 	.word	0x08010814
 8002218:	08010494 	.word	0x08010494

0800221c <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh>:
		i++;
	}

}

void Voltronic::DeviceStat_Inquiry_mode(uint8_t *mode) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t i = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
	status stat = Voltronic_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	75bb      	strb	r3, [r7, #22]
	uint8_t *current;
	char buf[5];
	PrepRxTx(DevModeInquiry, sizeof(DevModeInquiry) - 1, 1000, _CR, 1);
 800222e:	2301      	movs	r3, #1
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	230d      	movs	r3, #13
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	2205      	movs	r2, #5
 800223c:	493e      	ldr	r1, [pc, #248]	@ (8002338 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x11c>)
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f87c 	bl	800233c <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>
	stat = check_eventTimeout(rx_evt, 1200);
 8002244:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002248:	2100      	movs	r1, #0
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f96b 	bl	8002526 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>
 8002250:	4603      	mov	r3, r0
 8002252:	75bb      	strb	r3, [r7, #22]
	if (stat == Voltronic_OK) {
 8002254:	7dbb      	ldrb	r3, [r7, #22]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d16b      	bne.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>

		if (Rxbuffer[0] == '(' && Rxbuffer[1] != 'N' && Rxbuffer[2] != 'A'
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b28      	cmp	r3, #40	@ 0x28
 8002260:	d167      	bne.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	2b4e      	cmp	r3, #78	@ 0x4e
 8002268:	d063      	beq.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	789b      	ldrb	r3, [r3, #2]
 800226e:	2b41      	cmp	r3, #65	@ 0x41
 8002270:	d05f      	beq.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				&& Rxbuffer[3] != 'K') {
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	78db      	ldrb	r3, [r3, #3]
 8002276:	2b4b      	cmp	r3, #75	@ 0x4b
 8002278:	d05b      	beq.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
			current = Rxbuffer;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	613b      	str	r3, [r7, #16]
			if (checking.extractdatainsegments(reinterpret_cast<char*>(current),
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f503 7006 	add.w	r0, r3, #536	@ 0x218
 8002284:	f107 0208 	add.w	r2, r7, #8
 8002288:	2320      	movs	r3, #32
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	f107 030e 	add.w	r3, r7, #14
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2302      	movs	r3, #2
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	f003 f870 	bl	800537a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>
 800229a:	4603      	mov	r3, r0
					buf, 2, &len, ' ') == checking.sys_ok) {
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
			if (checking.extractdatainsegments(reinterpret_cast<char*>(current),
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d043      	beq.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>

				switch (static_cast<invertermode>(buf[0])) {
 80022aa:	7a3b      	ldrb	r3, [r7, #8]
 80022ac:	3b42      	subs	r3, #66	@ 0x42
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d83e      	bhi.n	8002330 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x114>
 80022b2:	a201      	add	r2, pc, #4	@ (adr r2, 80022b8 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x9c>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	08002319 	.word	0x08002319
 80022bc:	08002331 	.word	0x08002331
 80022c0:	08002329 	.word	0x08002329
 80022c4:	08002331 	.word	0x08002331
 80022c8:	08002321 	.word	0x08002321
 80022cc:	08002331 	.word	0x08002331
 80022d0:	08002331 	.word	0x08002331
 80022d4:	08002331 	.word	0x08002331
 80022d8:	08002331 	.word	0x08002331
 80022dc:	08002331 	.word	0x08002331
 80022e0:	08002311 	.word	0x08002311
 80022e4:	08002331 	.word	0x08002331
 80022e8:	08002331 	.word	0x08002331
 80022ec:	08002331 	.word	0x08002331
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002331 	.word	0x08002331
 80022f8:	08002331 	.word	0x08002331
 80022fc:	08002309 	.word	0x08002309
				case invertermode::PowerOnMode: {
					*mode = 1;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
					break;
 8002306:	e014      	b.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::StandByMode: {
					*mode = 2;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
					break;
 800230e:	e010      	b.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::LineMode: {
					*mode = 3;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
					break;
 8002316:	e00c      	b.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::BatteryMode: {
					*mode = 4;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2204      	movs	r2, #4
 800231c:	701a      	strb	r2, [r3, #0]
					break;
 800231e:	e008      	b.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::FaultMode: {
					*mode = 5;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2205      	movs	r2, #5
 8002324:	701a      	strb	r2, [r3, #0]
					break;
 8002326:	e004      	b.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::ShutdownMode: {
					*mode = 6;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2206      	movs	r2, #6
 800232c:	701a      	strb	r2, [r3, #0]
					break;
 800232e:	e000      	b.n	8002332 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				}

				return;
 8002330:	bf00      	nop
			}
		}

	}
}
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	0801081c 	.word	0x0801081c

0800233c <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>:

void Voltronic::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, uint8_t cal_crc) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	460b      	mov	r3, r1
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	4613      	mov	r3, r2
 8002350:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	22ff      	movs	r2, #255	@ 0xff
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f00b fc92 	bl	800dc82 <memset>
	memset(Txbuffer, 0, BufferLen);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	33ff      	adds	r3, #255	@ 0xff
 8002362:	22ff      	movs	r2, #255	@ 0xff
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f00b fc8b 	bl	800dc82 <memset>
	rst_event(rx_evt);
 800236c:	2100      	movs	r1, #0
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f899 	bl	80024a6 <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8002374:	2101      	movs	r1, #1
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f895 	bl	80024a6 <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>

	Rx_info.EndChar = end_char;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002382:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a
	Rx_info.Rx = Rxbuffer;
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	Rx_info.Rxcount = 0;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80023a2:	22ff      	movs	r2, #255	@ 0xff
 80023a4:	4619      	mov	r1, r3
 80023a6:	f002 fe6e 	bl	8005086 <_ZN13System_serial6serial7RxintEnEPht>

	if (cal_crc == 1) {
 80023aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d13e      	bne.n	8002430 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh+0xf4>
		uint16_t crc = CRC16_cal(Txbuf, len - 1);
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f8ee 	bl	800259e <_ZN8Inverter9Voltronic9CRC16_calEPKht>
 80023c2:	4603      	mov	r3, r0
 80023c4:	82fb      	strh	r3, [r7, #22]
		memcpy(Txbuffer, Txbuf, len - 1);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f103 00ff 	add.w	r0, r3, #255	@ 0xff
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	461a      	mov	r2, r3
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	f00b fe2d 	bl	800e032 <memcpy>
		breaking_bits.w = crc;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8afa      	ldrh	r2, [r7, #22]
 80023dc:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		Txbuffer[len - 1] = breaking_bits.bytes.Hb;
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	f892 1209 	ldrb.w	r1, [r2, #521]	@ 0x209
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	460a      	mov	r2, r1
 80023f0:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		len = len + 1;
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	3301      	adds	r3, #1
 80023f8:	80fb      	strh	r3, [r7, #6]
		Txbuffer[len - 1] = breaking_bits.bytes.Lb;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f892 1208 	ldrb.w	r1, [r2, #520]	@ 0x208
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	460a      	mov	r2, r1
 800240a:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		len = len + 1;
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	3301      	adds	r3, #1
 8002412:	80fb      	strh	r3, [r7, #6]
		Txbuffer[len - 1] = _CR;
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	3b01      	subs	r3, #1
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	220d      	movs	r2, #13
 800241e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		Txbuffer[len] = _EOS;
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	2200      	movs	r2, #0
 800242a:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
 800242e:	e006      	b.n	800243e <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh+0x102>
	} else {
		memcpy(Txbuffer, Txbuf, len);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	33ff      	adds	r3, #255	@ 0xff
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f00b fdfa 	bl	800e032 <memcpy>
	}

	Enable_DE
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 800244a:	2201      	movs	r2, #1
 800244c:	4619      	mov	r1, r3
 800244e:	f004 ff8d 	bl	800736c <HAL_GPIO_WritePin>
	;
	serial_.TransmitData(Txbuffer, len, timeout);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f103 01ff 	add.w	r1, r3, #255	@ 0xff
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	f002 fdfd 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>
	Disable_DE
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8002472:	2200      	movs	r2, #0
 8002474:	4619      	mov	r1, r3
 8002476:	f004 ff79 	bl	800736c <HAL_GPIO_WritePin>
	;
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_ZN8Inverter9Voltronic9set_eventENS0_9eventTypeE>:

inline void Voltronic::set_event(enum eventType event) {
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	2201      	movs	r2, #1
 8002496:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>:
inline void Voltronic::rst_event(enum eventType event) {
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>:
enum Voltronic::status Voltronic::check_event(enum eventType event) {
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]

	status stat = Voltronic_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x30>
		stat = Voltronic_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e00e      	b.n	8002518 <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x4e>
	} else if (!Event[event]) {
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x4e>
		stat = Voltronic_ERR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8002518:	7bfb      	ldrb	r3, [r7, #15]

}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum Voltronic::status Voltronic::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	70fb      	strb	r3, [r7, #3]
 8002532:	4613      	mov	r3, r2
 8002534:	803b      	strh	r3, [r7, #0]
	status stat = Voltronic_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
	uint32_t prev_time = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

	prev_time = HAL_GetTick(); //we get new time before going into while
 800253e:	f004 f845 	bl	80065cc <HAL_GetTick>
 8002542:	60b8      	str	r0, [r7, #8]
	while ((check_event(event) != Voltronic_OK)
 8002544:	e002      	b.n	800254c <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x26>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 8002546:	200a      	movs	r0, #10
 8002548:	f002 fb28 	bl	8004b9c <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != Voltronic_OK)
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffba 	bl	80024ca <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>
 8002556:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4a>
 800255c:	f004 f836 	bl	80065cc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad2      	subs	r2, r2, r3
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d201      	bcs.n	8002570 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4a>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4c>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e7      	bne.n	8002546 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x20>
	}

	if (check_event(event) != Voltronic_OK) {
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffa5 	bl	80024ca <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x6e>
		stat = Voltronic_ERR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8002594:	7bfb      	ldrb	r3, [r7, #15]

}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_ZN8Inverter9Voltronic9CRC16_calEPKht>:

uint16_t Voltronic::CRC16_cal(const uint8_t *P, uint16_t len) {
 800259e:	b480      	push	{r7}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	4613      	mov	r3, r2
 80025aa:	80fb      	strh	r3, [r7, #6]
	uint8_t temp;
	uint8_t i;
	uint16_t c;
	uint8_t TT;
	uint16_t crc = 0xFFFF;
 80025ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025b0:	827b      	strh	r3, [r7, #18]

	for (c = 0; c < len; c++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	82bb      	strh	r3, [r7, #20]
 80025b6:	e02b      	b.n	8002610 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x72>
		temp = P[c];
 80025b8:	8abb      	ldrh	r3, [r7, #20]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	747b      	strb	r3, [r7, #17]
		crc = crc ^ temp;
 80025c2:	7c7b      	ldrb	r3, [r7, #17]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	8a7b      	ldrh	r3, [r7, #18]
 80025c8:	4053      	eors	r3, r2
 80025ca:	827b      	strh	r3, [r7, #18]

		for (i = 0; i < 8; i++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
 80025d0:	e018      	b.n	8002604 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x66>
			TT = crc & 1;
 80025d2:	8a7b      	ldrh	r3, [r7, #18]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	743b      	strb	r3, [r7, #16]
			crc = crc >> 1;
 80025dc:	8a7b      	ldrh	r3, [r7, #18]
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	827b      	strh	r3, [r7, #18]
			crc = crc & 0x7FFF;
 80025e2:	8a7b      	ldrh	r3, [r7, #18]
 80025e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025e8:	827b      	strh	r3, [r7, #18]

			if (TT == 1) {
 80025ea:	7c3b      	ldrb	r3, [r7, #16]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d106      	bne.n	80025fe <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x60>
				crc = crc ^ 0xA001;
 80025f0:	8a7b      	ldrh	r3, [r7, #18]
 80025f2:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80025f6:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80025fa:	43db      	mvns	r3, r3
 80025fc:	827b      	strh	r3, [r7, #18]
		for (i = 0; i < 8; i++) {
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	3301      	adds	r3, #1
 8002602:	75fb      	strb	r3, [r7, #23]
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b07      	cmp	r3, #7
 8002608:	d9e3      	bls.n	80025d2 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x34>
	for (c = 0; c < len; c++) {
 800260a:	8abb      	ldrh	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	82bb      	strh	r3, [r7, #20]
 8002610:	8aba      	ldrh	r2, [r7, #20]
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	429a      	cmp	r2, r3
 8002616:	d3cf      	bcc.n	80025b8 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x1a>

			crc = crc & 0xFFFF;
		}
	}

	return crc;
 8002618:	8a7b      	ldrh	r3, [r7, #18]
}
 800261a:	4618      	mov	r0, r3
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_ZN8Inverter9Voltronic4RxCBEh>:

/*Interrupt callbacks*/

void Voltronic::RxCB(uint8_t data) {
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	*Rx_info.Rx++ = data;
 8002632:	78f8      	ldrb	r0, [r7, #3]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	f8c2 121c 	str.w	r1, [r2, #540]	@ 0x21c
 8002642:	4602      	mov	r2, r0
 8002644:	701a      	strb	r2, [r3, #0]
	Rx_info.Rxcount++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 800264c:	b29b      	uxth	r3, r3
 800264e:	3301      	adds	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220

	if (data == Rx_info.EndChar) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 800265e:	b2db      	uxtb	r3, r3
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	429a      	cmp	r2, r3
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <_ZN8Inverter9Voltronic4RxCBEh+0x5e>
		set_event(rx_evt);
 8002670:	2100      	movs	r1, #0
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff05 	bl	8002482 <_ZN8Inverter9Voltronic9set_eventENS0_9eventTypeE>
		serial_.RxintDis();
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fd13 	bl	80050aa <_ZN13System_serial6serial8RxintDisEv>
	}
#pragma GCC diagnostic pop
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh>:

void Voltronic::TxCB(UART_HandleTypeDef *huart) {

}

void Voltronic::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e009      	b.n	80026b6 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 80026a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d006      	beq.n	80026be <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d9f2      	bls.n	80026a2 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 80026bc:	e000      	b.n	80026c0 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 80026be:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	4a06      	ldr	r2, [pc, #24]	@ (80026ec <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ffa2 	bl	8002626 <_ZN8Inverter9Voltronic4RxCBEh>
	}

}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20001be8 	.word	0x20001be8

080026f0 <_ZN8Inverter9Voltronic10TxCBStaticEP20__UART_HandleTypeDef>:
void Voltronic::TxCBStatic(UART_HandleTypeDef *huart) {
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002716:	461a      	mov	r2, r3
 8002718:	2100      	movs	r1, #0
 800271a:	f00b fab2 	bl	800dc82 <memset>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f00b faa9 	bl	800dc82 <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002746:	6053      	str	r3, [r2, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800274e:	3304      	adds	r3, #4
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fc75 	bl	8005042 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800275e:	3308      	adds	r3, #8
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fcbd 	bl	80050e0 <_ZN10System_sys16Parsing_CheckingC1Ev>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276c:	461a      	mov	r2, r3
 800276e:	2300      	movs	r3, #0
 8002770:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8002780:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4a0e      	ldr	r2, [pc, #56]	@ (80027c0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002798:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d902      	bls.n	80027a8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 80027a8:	4906      	ldr	r1, [pc, #24]	@ (80027c4 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 80027aa:	4807      	ldr	r0, [pc, #28]	@ (80027c8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 80027ac:	f002 fab8 	bl	8004d20 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20001c1c 	.word	0x20001c1c
 80027c0:	20001c04 	.word	0x20001c04
 80027c4:	080045a5 	.word	0x080045a5
 80027c8:	08004541 	.word	0x08004541

080027cc <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80027d8:	2301      	movs	r3, #1
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	230a      	movs	r3, #10
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027e4:	2204      	movs	r2, #4
 80027e6:	498f      	ldr	r1, [pc, #572]	@ (8002a24 <_ZN5Modem8simA76724initEv+0x258>)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f001 fbb3 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	2100      	movs	r1, #0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 fcda 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	230a      	movs	r3, #10
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800280a:	2204      	movs	r2, #4
 800280c:	4985      	ldr	r1, [pc, #532]	@ (8002a24 <_ZN5Modem8simA76724initEv+0x258>)
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f001 fba0 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	2100      	movs	r1, #0
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f001 fcc7 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002824:	2301      	movs	r3, #1
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	230a      	movs	r3, #10
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002830:	2204      	movs	r2, #4
 8002832:	497c      	ldr	r1, [pc, #496]	@ (8002a24 <_ZN5Modem8simA76724initEv+0x258>)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f001 fb8d 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	2100      	movs	r1, #0
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fcb4 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 800284a:	2301      	movs	r3, #1
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	230a      	movs	r3, #10
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002856:	220b      	movs	r2, #11
 8002858:	4973      	ldr	r1, [pc, #460]	@ (8002a28 <_ZN5Modem8simA76724initEv+0x25c>)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f001 fb7a 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	2100      	movs	r1, #0
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f001 fca1 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 8002870:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002874:	f002 f992 	bl	8004b9c <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002878:	2301      	movs	r3, #1
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	230a      	movs	r3, #10
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002884:	2204      	movs	r2, #4
 8002886:	4967      	ldr	r1, [pc, #412]	@ (8002a24 <_ZN5Modem8simA76724initEv+0x258>)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f001 fb63 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	2100      	movs	r1, #0
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f001 fc8a 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800289a:	4603      	mov	r3, r0
 800289c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 800289e:	2301      	movs	r3, #1
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	230a      	movs	r3, #10
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028aa:	2204      	movs	r2, #4
 80028ac:	495d      	ldr	r1, [pc, #372]	@ (8002a24 <_ZN5Modem8simA76724initEv+0x258>)
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f001 fb50 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80028b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b8:	2100      	movs	r1, #0
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f001 fc77 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80028c4:	2301      	movs	r3, #1
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	230a      	movs	r3, #10
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d0:	2204      	movs	r2, #4
 80028d2:	4954      	ldr	r1, [pc, #336]	@ (8002a24 <_ZN5Modem8simA76724initEv+0x258>)
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 fb3d 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	2100      	movs	r1, #0
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f001 fc64 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 80028ea:	2301      	movs	r3, #1
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	230a      	movs	r3, #10
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f6:	2207      	movs	r2, #7
 80028f8:	494c      	ldr	r1, [pc, #304]	@ (8002a2c <_ZN5Modem8simA76724initEv+0x260>)
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f001 fb2a 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002904:	2100      	movs	r1, #0
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f001 fc51 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	230a      	movs	r3, #10
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800291c:	2206      	movs	r2, #6
 800291e:	4944      	ldr	r1, [pc, #272]	@ (8002a30 <_ZN5Modem8simA76724initEv+0x264>)
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f001 fb17 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292a:	2100      	movs	r1, #0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f001 fc3e 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002932:	4603      	mov	r3, r0
 8002934:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 8002936:	2301      	movs	r3, #1
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	230a      	movs	r3, #10
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002942:	220b      	movs	r2, #11
 8002944:	493b      	ldr	r1, [pc, #236]	@ (8002a34 <_ZN5Modem8simA76724initEv+0x268>)
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f001 fb04 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800294c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002950:	2100      	movs	r1, #0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f001 fc2b 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002958:	4603      	mov	r3, r0
 800295a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 800295c:	2301      	movs	r3, #1
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	230a      	movs	r3, #10
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002968:	220c      	movs	r2, #12
 800296a:	4933      	ldr	r1, [pc, #204]	@ (8002a38 <_ZN5Modem8simA76724initEv+0x26c>)
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 faf1 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	2100      	movs	r1, #0
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f001 fc18 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800297e:	4603      	mov	r3, r0
 8002980:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 8002982:	2301      	movs	r3, #1
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	230a      	movs	r3, #10
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800298e:	2218      	movs	r2, #24
 8002990:	492a      	ldr	r1, [pc, #168]	@ (8002a3c <_ZN5Modem8simA76724initEv+0x270>)
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f001 fade 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299c:	2100      	movs	r1, #0
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fc05 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 80029a8:	2301      	movs	r3, #1
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	230a      	movs	r3, #10
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029b4:	220b      	movs	r2, #11
 80029b6:	4922      	ldr	r1, [pc, #136]	@ (8002a40 <_ZN5Modem8simA76724initEv+0x274>)
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f001 facb 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	2100      	movs	r1, #0
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f001 fbf2 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	230a      	movs	r3, #10
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029da:	220b      	movs	r2, #11
 80029dc:	4919      	ldr	r1, [pc, #100]	@ (8002a44 <_ZN5Modem8simA76724initEv+0x278>)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f001 fab8 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80029e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e8:	2100      	movs	r1, #0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 fbdf 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 80029f4:	2301      	movs	r3, #1
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	230a      	movs	r3, #10
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a00:	220c      	movs	r2, #12
 8002a02:	4911      	ldr	r1, [pc, #68]	@ (8002a48 <_ZN5Modem8simA76724initEv+0x27c>)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 faa5 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	2100      	movs	r1, #0
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f001 fbcc 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]

	return stat;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]

}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	08010824 	.word	0x08010824
 8002a28:	0801082c 	.word	0x0801082c
 8002a2c:	080108e0 	.word	0x080108e0
 8002a30:	080108e8 	.word	0x080108e8
 8002a34:	08010838 	.word	0x08010838
 8002a38:	08010844 	.word	0x08010844
 8002a3c:	08010854 	.word	0x08010854
 8002a40:	08010870 	.word	0x08010870
 8002a44:	0801087c 	.word	0x0801087c
 8002a48:	08010888 	.word	0x08010888

08002a4c <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b092      	sub	sp, #72	@ 0x48
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	222e      	movs	r2, #46	@ 0x2e
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00b f90a 	bl	800dc82 <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4920      	ldr	r1, [pc, #128]	@ (8002af8 <_ZN5Modem8simA76726setAPNEPc+0xac>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00b f8a0 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fbf5 	bl	8000270 <strlen>
 8002a86:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	f107 010c 	add.w	r1, r7, #12
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	230a      	movs	r3, #10
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f001 fa5a 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002aa0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f001 fb81 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <_ZN5Modem8simA76726setAPNEPc+0x8e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002aca:	8a92      	ldrh	r2, [r2, #20]
 8002acc:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fb12 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <_ZN5Modem8simA76726setAPNEPc+0x92>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <_ZN5Modem8simA76726setAPNEPc+0x94>
 8002ade:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 8002aea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3740      	adds	r7, #64	@ 0x40
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	080104a8 	.word	0x080104a8

08002afc <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	491e      	ldr	r1, [pc, #120]	@ (8002ba0 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 8002b26:	4618      	mov	r0, r3
 8002b28:	f00b f848 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fb9d 	bl	8000270 <strlen>
 8002b36:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	f107 0108 	add.w	r1, r7, #8
 8002b3e:	2301      	movs	r3, #1
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	230a      	movs	r3, #10
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f001 fa02 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f001 fb29 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b60:	7ffb      	ldrb	r3, [r7, #31]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b76:	8a92      	ldrh	r2, [r2, #20]
 8002b78:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fabc 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 8002b8a:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8002b94:	7ffb      	ldrb	r3, [r7, #31]

}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	080104c4 	.word	0x080104c4

08002ba4 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 8002bae:	2301      	movs	r3, #1
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bba:	220a      	movs	r2, #10
 8002bbc:	492b      	ldr	r1, [pc, #172]	@ (8002c6c <_ZN5Modem8simA76726getSimEPc+0xc8>)
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f001 f9c8 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002bc4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 faef 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d111      	bne.n	8002bfe <_ZN5Modem8simA76726getSimEPc+0x5a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002be0:	3308      	adds	r3, #8
 8002be2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bea:	8a92      	ldrh	r2, [r2, #20]
 8002bec:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fa82 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <_ZN5Modem8simA76726getSimEPc+0x5a>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <_ZN5Modem8simA76726getSimEPc+0x5c>
 8002bfe:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d024      	beq.n	8002c4e <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002c0a:	3008      	adds	r0, #8
 8002c0c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c14:	8a9b      	ldrh	r3, [r3, #20]
 8002c16:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	9302      	str	r3, [sp, #8]
 8002c1c:	230d      	movs	r3, #13
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	233a      	movs	r3, #58	@ 0x3a
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <_ZN5Modem8simA76726getSimEPc+0xcc>)
 8002c26:	f002 fa8d 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002c2a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	490d      	ldr	r1, [pc, #52]	@ (8002c74 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002c3e:	461a      	mov	r2, r3
 8002c40:	460b      	mov	r3, r1
 8002c42:	cb03      	ldmia	r3!, {r0, r1}
 8002c44:	6010      	str	r0, [r2, #0]
 8002c46:	6051      	str	r1, [r2, #4]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	7213      	strb	r3, [r2, #8]
 8002c4c:	e00a      	b.n	8002c64 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	4908      	ldr	r1, [pc, #32]	@ (8002c74 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002c52:	461a      	mov	r2, r3
 8002c54:	460b      	mov	r3, r1
 8002c56:	cb03      	ldmia	r3!, {r0, r1}
 8002c58:	6010      	str	r0, [r2, #0]
 8002c5a:	6051      	str	r1, [r2, #4]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	7213      	strb	r3, [r2, #8]
 8002c60:	e000      	b.n	8002c64 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 8002c62:	bf00      	nop
	}

}
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	08010898 	.word	0x08010898
 8002c70:	080104d4 	.word	0x080104d4
 8002c74:	080104dc 	.word	0x080104dc

08002c78 <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 8002c82:	2301      	movs	r3, #1
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	230a      	movs	r3, #10
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c8e:	220a      	movs	r2, #10
 8002c90:	4961      	ldr	r1, [pc, #388]	@ (8002e18 <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f001 f95e 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002c98:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f001 fa85 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d111      	bne.n	8002cd2 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cbe:	8a92      	ldrh	r2, [r2, #20]
 8002cc0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 fa18 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 8002cd2:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8093 	beq.w	8002e00 <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002ce0:	3008      	adds	r0, #8
 8002ce2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cea:	8a9b      	ldrh	r3, [r3, #20]
 8002cec:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	230d      	movs	r3, #13
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	232c      	movs	r3, #44	@ 0x2c
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 8002cfc:	f002 fa22 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002d00:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06d      	beq.n	8002dec <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	3b30      	subs	r3, #48	@ 0x30
 8002d16:	2b07      	cmp	r3, #7
 8002d18:	d85d      	bhi.n	8002dd6 <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 8002d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d41 	.word	0x08002d41
 8002d24:	08002d51 	.word	0x08002d51
 8002d28:	08002d65 	.word	0x08002d65
 8002d2c:	08002d79 	.word	0x08002d79
 8002d30:	08002d91 	.word	0x08002d91
 8002d34:	08002da1 	.word	0x08002da1
 8002d38:	08002db3 	.word	0x08002db3
 8002d3c:	08002dc3 	.word	0x08002dc3
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 8002d44:	461a      	mov	r2, r3
 8002d46:	460b      	mov	r3, r1
 8002d48:	cb03      	ldmia	r3!, {r0, r1}
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	6051      	str	r1, [r2, #4]

				break;
 8002d4e:	e04c      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4934      	ldr	r1, [pc, #208]	@ (8002e24 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 8002d54:	461a      	mov	r2, r3
 8002d56:	460b      	mov	r3, r1
 8002d58:	cb03      	ldmia	r3!, {r0, r1}
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	6051      	str	r1, [r2, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	7213      	strb	r3, [r2, #8]

				break;
 8002d62:	e042      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4930      	ldr	r1, [pc, #192]	@ (8002e28 <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 8002d68:	461a      	mov	r2, r3
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	cb03      	ldmia	r3!, {r0, r1}
 8002d6e:	6010      	str	r0, [r2, #0]
 8002d70:	6051      	str	r1, [r2, #4]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	8113      	strh	r3, [r2, #8]

				break;
 8002d76:	e038      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	492c      	ldr	r1, [pc, #176]	@ (8002e2c <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	460b      	mov	r3, r1
 8002d80:	cb03      	ldmia	r3!, {r0, r1}
 8002d82:	6010      	str	r0, [r2, #0]
 8002d84:	6051      	str	r1, [r2, #4]
 8002d86:	8819      	ldrh	r1, [r3, #0]
 8002d88:	789b      	ldrb	r3, [r3, #2]
 8002d8a:	8111      	strh	r1, [r2, #8]
 8002d8c:	7293      	strb	r3, [r2, #10]

				break;
 8002d8e:	e02c      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4927      	ldr	r1, [pc, #156]	@ (8002e30 <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8002d94:	461a      	mov	r2, r3
 8002d96:	460b      	mov	r3, r1
 8002d98:	cb03      	ldmia	r3!, {r0, r1}
 8002d9a:	6010      	str	r0, [r2, #0]
 8002d9c:	6051      	str	r1, [r2, #4]

				break;
 8002d9e:	e024      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4a24      	ldr	r2, [pc, #144]	@ (8002e34 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 8002da4:	461c      	mov	r4, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002daa:	6020      	str	r0, [r4, #0]
 8002dac:	6061      	str	r1, [r4, #4]
 8002dae:	60a2      	str	r2, [r4, #8]

				break;
 8002db0:	e01b      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	4920      	ldr	r1, [pc, #128]	@ (8002e38 <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	cb03      	ldmia	r3!, {r0, r1}
 8002dbc:	6010      	str	r0, [r2, #0]
 8002dbe:	6051      	str	r1, [r2, #4]

				break;
 8002dc0:	e013      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	491d      	ldr	r1, [pc, #116]	@ (8002e3c <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	cb03      	ldmia	r3!, {r0, r1}
 8002dcc:	6010      	str	r0, [r2, #0]
 8002dce:	6051      	str	r1, [r2, #4]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	7213      	strb	r3, [r2, #8]

				break;
 8002dd4:	e009      	b.n	8002dea <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	4919      	ldr	r1, [pc, #100]	@ (8002e40 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8002dda:	461a      	mov	r2, r3
 8002ddc:	460b      	mov	r3, r1
 8002dde:	cb03      	ldmia	r3!, {r0, r1}
 8002de0:	6010      	str	r0, [r2, #0]
 8002de2:	6051      	str	r1, [r2, #4]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	7213      	strb	r3, [r2, #8]

				break;
 8002de8:	bf00      	nop
			}
			}
			return;
 8002dea:	e012      	b.n	8002e12 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4914      	ldr	r1, [pc, #80]	@ (8002e40 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8002df0:	461a      	mov	r2, r3
 8002df2:	460b      	mov	r3, r1
 8002df4:	cb03      	ldmia	r3!, {r0, r1}
 8002df6:	6010      	str	r0, [r2, #0]
 8002df8:	6051      	str	r1, [r2, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	7213      	strb	r3, [r2, #8]
 8002dfe:	e008      	b.n	8002e12 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	490f      	ldr	r1, [pc, #60]	@ (8002e40 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8002e04:	461a      	mov	r2, r3
 8002e06:	460b      	mov	r3, r1
 8002e08:	cb03      	ldmia	r3!, {r0, r1}
 8002e0a:	6010      	str	r0, [r2, #0]
 8002e0c:	6051      	str	r1, [r2, #4]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	7213      	strb	r3, [r2, #8]
	}

}
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	080108a4 	.word	0x080108a4
 8002e1c:	080104e8 	.word	0x080104e8
 8002e20:	080104f0 	.word	0x080104f0
 8002e24:	080104f8 	.word	0x080104f8
 8002e28:	08010504 	.word	0x08010504
 8002e2c:	08010510 	.word	0x08010510
 8002e30:	0801051c 	.word	0x0801051c
 8002e34:	08010524 	.word	0x08010524
 8002e38:	08010530 	.word	0x08010530
 8002e3c:	08010538 	.word	0x08010538
 8002e40:	080104dc 	.word	0x080104dc

08002e44 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b089      	sub	sp, #36	@ 0x24
 8002e48:	af04      	add	r7, sp, #16
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 8002e4e:	2301      	movs	r3, #1
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	230a      	movs	r3, #10
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5a:	220b      	movs	r2, #11
 8002e5c:	495b      	ldr	r1, [pc, #364]	@ (8002fcc <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f001 f878 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002e64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f001 f99f 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002e70:	4603      	mov	r3, r0
 8002e72:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d111      	bne.n	8002e9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e80:	3308      	adds	r3, #8
 8002e82:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e8a:	8a92      	ldrh	r2, [r2, #20]
 8002e8c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 f932 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 8002e9e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8087 	beq.w	8002fb4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002eac:	3008      	adds	r0, #8
 8002eae:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb6:	8a9b      	ldrh	r3, [r3, #20]
 8002eb8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9302      	str	r3, [sp, #8]
 8002ebe:	230d      	movs	r3, #13
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	232c      	movs	r3, #44	@ 0x2c
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4b42      	ldr	r3, [pc, #264]	@ (8002fd0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 8002ec8:	f002 f93c 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002ecc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d061      	beq.n	8002fa0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	3b30      	subs	r3, #48	@ 0x30
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d851      	bhi.n	8002f8a <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f2d 	.word	0x08002f2d
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f59 	.word	0x08002f59
 8002f00:	08002f69 	.word	0x08002f69
 8002f04:	08002f7b 	.word	0x08002f7b
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4932      	ldr	r1, [pc, #200]	@ (8002fd4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	cb03      	ldmia	r3!, {r0, r1}
 8002f12:	6010      	str	r0, [r2, #0]
 8002f14:	6051      	str	r1, [r2, #4]

				break;
 8002f16:	e042      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	492f      	ldr	r1, [pc, #188]	@ (8002fd8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	460b      	mov	r3, r1
 8002f20:	cb03      	ldmia	r3!, {r0, r1}
 8002f22:	6010      	str	r0, [r2, #0]
 8002f24:	6051      	str	r1, [r2, #4]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	7213      	strb	r3, [r2, #8]

				break;
 8002f2a:	e038      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	492b      	ldr	r1, [pc, #172]	@ (8002fdc <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 8002f30:	461a      	mov	r2, r3
 8002f32:	460b      	mov	r3, r1
 8002f34:	cb03      	ldmia	r3!, {r0, r1}
 8002f36:	6010      	str	r0, [r2, #0]
 8002f38:	6051      	str	r1, [r2, #4]
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	8113      	strh	r3, [r2, #8]

				break;
 8002f3e:	e02e      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4927      	ldr	r1, [pc, #156]	@ (8002fe0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 8002f44:	461a      	mov	r2, r3
 8002f46:	460b      	mov	r3, r1
 8002f48:	cb03      	ldmia	r3!, {r0, r1}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	6051      	str	r1, [r2, #4]
 8002f4e:	8819      	ldrh	r1, [r3, #0]
 8002f50:	789b      	ldrb	r3, [r3, #2]
 8002f52:	8111      	strh	r1, [r2, #8]
 8002f54:	7293      	strb	r3, [r2, #10]

				break;
 8002f56:	e022      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4922      	ldr	r1, [pc, #136]	@ (8002fe4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	460b      	mov	r3, r1
 8002f60:	cb03      	ldmia	r3!, {r0, r1}
 8002f62:	6010      	str	r0, [r2, #0]
 8002f64:	6051      	str	r1, [r2, #4]

				break;
 8002f66:	e01a      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 8002f6c:	461c      	mov	r4, r3
 8002f6e:	4613      	mov	r3, r2
 8002f70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f72:	6020      	str	r0, [r4, #0]
 8002f74:	6061      	str	r1, [r4, #4]
 8002f76:	60a2      	str	r2, [r4, #8]

				break;
 8002f78:	e011      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	491b      	ldr	r1, [pc, #108]	@ (8002fec <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	cb03      	ldmia	r3!, {r0, r1}
 8002f84:	6010      	str	r0, [r2, #0]
 8002f86:	6051      	str	r1, [r2, #4]

				break;
 8002f88:	e009      	b.n	8002f9e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	4918      	ldr	r1, [pc, #96]	@ (8002ff0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002f8e:	461a      	mov	r2, r3
 8002f90:	460b      	mov	r3, r1
 8002f92:	cb03      	ldmia	r3!, {r0, r1}
 8002f94:	6010      	str	r0, [r2, #0]
 8002f96:	6051      	str	r1, [r2, #4]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	7213      	strb	r3, [r2, #8]

				break;
 8002f9c:	bf00      	nop
			}
			}
			return;
 8002f9e:	e012      	b.n	8002fc6 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4913      	ldr	r1, [pc, #76]	@ (8002ff0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	cb03      	ldmia	r3!, {r0, r1}
 8002faa:	6010      	str	r0, [r2, #0]
 8002fac:	6051      	str	r1, [r2, #4]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	7213      	strb	r3, [r2, #8]
 8002fb2:	e008      	b.n	8002fc6 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	490e      	ldr	r1, [pc, #56]	@ (8002ff0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002fb8:	461a      	mov	r2, r3
 8002fba:	460b      	mov	r3, r1
 8002fbc:	cb03      	ldmia	r3!, {r0, r1}
 8002fbe:	6010      	str	r0, [r2, #0]
 8002fc0:	6051      	str	r1, [r2, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	7213      	strb	r3, [r2, #8]
	}

}
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}
 8002fcc:	080108b0 	.word	0x080108b0
 8002fd0:	08010544 	.word	0x08010544
 8002fd4:	080104f0 	.word	0x080104f0
 8002fd8:	080104f8 	.word	0x080104f8
 8002fdc:	08010504 	.word	0x08010504
 8002fe0:	08010510 	.word	0x08010510
 8002fe4:	0801051c 	.word	0x0801051c
 8002fe8:	08010524 	.word	0x08010524
 8002fec:	08010530 	.word	0x08010530
 8002ff0:	080104dc 	.word	0x080104dc

08002ff4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af04      	add	r7, sp, #16
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	f107 0310 	add.w	r3, r7, #16
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 8003012:	2301      	movs	r3, #1
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	230a      	movs	r3, #10
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800301e:	220b      	movs	r2, #11
 8003020:	4928      	ldr	r1, [pc, #160]	@ (80030c4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 ff96 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003028:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800302c:	2100      	movs	r1, #0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f001 f8bd 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d111      	bne.n	8003062 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003044:	3308      	adds	r3, #8
 8003046:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800304e:	8a92      	ldrh	r2, [r2, #20]
 8003050:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003052:	4618      	mov	r0, r3
 8003054:	f002 f850 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 8003062:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003064:	2b00      	cmp	r3, #0
 8003066:	d029      	beq.n	80030bc <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800306e:	3008      	adds	r0, #8
 8003070:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003078:	8a9b      	ldrh	r3, [r3, #20]
 800307a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	9302      	str	r3, [sp, #8]
 8003082:	232c      	movs	r3, #44	@ 0x2c
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	233a      	movs	r3, #58	@ 0x3a
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 800308c:	f002 f85a 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003090:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 80030a0:	7b3b      	ldrb	r3, [r7, #12]
 80030a2:	2b30      	cmp	r3, #48	@ 0x30
 80030a4:	d002      	beq.n	80030ac <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 80030a6:	2b31      	cmp	r3, #49	@ 0x31
 80030a8:	d004      	beq.n	80030b4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 80030aa:	e007      	b.n	80030bc <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
				break;
 80030b2:	e003      	b.n	80030bc <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
				break;
 80030ba:	bf00      	nop
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	080108bc 	.word	0x080108bc
 80030c8:	0801054c 	.word	0x0801054c

080030cc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af04      	add	r7, sp, #16
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 80030ee:	2301      	movs	r3, #1
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	230a      	movs	r3, #10
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fa:	220a      	movs	r2, #10
 80030fc:	4945      	ldr	r1, [pc, #276]	@ (8003214 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 ff28 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003108:	2100      	movs	r1, #0
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f001 f84f 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003110:	4603      	mov	r3, r0
 8003112:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d111      	bne.n	800313e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003120:	3308      	adds	r3, #8
 8003122:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800312a:	8a92      	ldrh	r2, [r2, #20]
 800312c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800312e:	4618      	mov	r0, r3
 8003130:	f001 ffe2 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 800313e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003140:	2b00      	cmp	r3, #0
 8003142:	d062      	beq.n	800320a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800314a:	3008      	adds	r0, #8
 800314c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003154:	8a9b      	ldrh	r3, [r3, #20]
 8003156:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003158:	f107 0308 	add.w	r3, r7, #8
 800315c:	9302      	str	r3, [sp, #8]
 800315e:	232c      	movs	r3, #44	@ 0x2c
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	233a      	movs	r3, #58	@ 0x3a
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	4b2c      	ldr	r3, [pc, #176]	@ (8003218 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 8003168:	f001 ffec 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800316c:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003178:	2b00      	cmp	r3, #0
 800317a:	d046      	beq.n	800320a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	4926      	ldr	r1, [pc, #152]	@ (800321c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f9ba 	bl	80014fc <_ZSt6strstrPcPKc>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800319e:	e034      	b.n	800320a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	491e      	ldr	r1, [pc, #120]	@ (8003220 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f9a8 	bl	80014fc <_ZSt6strstrPcPKc>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
}
 80031c2:	e022      	b.n	800320a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	4916      	ldr	r1, [pc, #88]	@ (8003224 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f996 	bl	80014fc <_ZSt6strstrPcPKc>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2202      	movs	r2, #2
 80031e4:	701a      	strb	r2, [r3, #0]
}
 80031e6:	e010      	b.n	800320a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	490e      	ldr	r1, [pc, #56]	@ (8003228 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe f984 	bl	80014fc <_ZSt6strstrPcPKc>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2203      	movs	r2, #3
 8003208:	701a      	strb	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	080108c8 	.word	0x080108c8
 8003218:	08010554 	.word	0x08010554
 800321c:	0801055c 	.word	0x0801055c
 8003220:	08010568 	.word	0x08010568
 8003224:	0801056c 	.word	0x0801056c
 8003228:	08010574 	.word	0x08010574

0800322c <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	@ 0x28
 8003230:	af04      	add	r7, sp, #16
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	f107 0310 	add.w	r3, r7, #16
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 8003248:	2301      	movs	r3, #1
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	230a      	movs	r3, #10
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003254:	2208      	movs	r2, #8
 8003256:	4939      	ldr	r1, [pc, #228]	@ (800333c <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fe7b 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800325e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003262:	2100      	movs	r1, #0
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 ffa2 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800326a:	4603      	mov	r3, r0
 800326c:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800326e:	7dbb      	ldrb	r3, [r7, #22]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800327a:	3308      	adds	r3, #8
 800327c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003284:	8a92      	ldrh	r2, [r2, #20]
 8003286:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003288:	4618      	mov	r0, r3
 800328a:	f001 ff35 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 8003298:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800329a:	2b00      	cmp	r3, #0
 800329c:	d041      	beq.n	8003322 <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80032a4:	3008      	adds	r0, #8
 80032a6:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ae:	8a9b      	ldrh	r3, [r3, #20]
 80032b0:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80032b2:	f107 030c 	add.w	r3, r7, #12
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	232c      	movs	r3, #44	@ 0x2c
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	233a      	movs	r3, #58	@ 0x3a
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003340 <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 80032c2:	f001 ff3f 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80032c6:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01b      	beq.n	800330e <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 80032d6:	f107 030c 	add.w	r3, r7, #12
 80032da:	4618      	mov	r0, r3
 80032dc:	f009 fecc 	bl	800d078 <atoi>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 80032e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e8:	2b62      	cmp	r3, #98	@ 0x62
 80032ea:	dd02      	ble.n	80032f2 <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	75fb      	strb	r3, [r7, #23]
 80032f0:	e005      	b.n	80032fe <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3b71      	subs	r3, #113	@ 0x71
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 80032fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003302:	461a      	mov	r2, r3
 8003304:	490f      	ldr	r1, [pc, #60]	@ (8003344 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	f00a fc58 	bl	800dbbc <siprintf>
 800330c:	e012      	b.n	8003334 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	490d      	ldr	r1, [pc, #52]	@ (8003348 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	cb03      	ldmia	r3!, {r0, r1}
 8003318:	6010      	str	r0, [r2, #0]
 800331a:	6051      	str	r1, [r2, #4]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	7213      	strb	r3, [r2, #8]
 8003320:	e008      	b.n	8003334 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4908      	ldr	r1, [pc, #32]	@ (8003348 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8003326:	461a      	mov	r2, r3
 8003328:	460b      	mov	r3, r1
 800332a:	cb03      	ldmia	r3!, {r0, r1}
 800332c:	6010      	str	r0, [r2, #0]
 800332e:	6051      	str	r1, [r2, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	7213      	strb	r3, [r2, #8]
	}

}
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	080108d4 	.word	0x080108d4
 8003340:	08010578 	.word	0x08010578
 8003344:	08010580 	.word	0x08010580
 8003348:	080104dc 	.word	0x080104dc

0800334c <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b0a0      	sub	sp, #128	@ 0x80
 8003350:	af04      	add	r7, sp, #16
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 800335c:	2303      	movs	r3, #3
 800335e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	2260      	movs	r2, #96	@ 0x60
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f00a fc87 	bl	800dc82 <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8003374:	2301      	movs	r3, #1
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	230a      	movs	r3, #10
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003380:	2212      	movs	r2, #18
 8003382:	492c      	ldr	r1, [pc, #176]	@ (8003434 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fde5 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 800338a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 ff0c 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800339c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80033aa:	3308      	adds	r3, #8
 80033ac:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033b4:	8a92      	ldrh	r2, [r2, #20]
 80033b6:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fe9d 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 80033c8:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d02c      	beq.n	8003428 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80033d4:	3008      	adds	r0, #8
 80033d6:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033de:	8a9b      	ldrh	r3, [r3, #20]
 80033e0:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	2322      	movs	r3, #34	@ 0x22
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	2322      	movs	r3, #34	@ 0x22
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 80033f2:	f001 fea7 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80033f6:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4619      	mov	r1, r3
 800340c:	6838      	ldr	r0, [r7, #0]
 800340e:	f7fe f875 	bl	80014fc <_ZSt6strstrPcPKc>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 8003422:	2302      	movs	r3, #2
 8003424:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 8003428:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800342c:	4618      	mov	r0, r3
 800342e:	3770      	adds	r7, #112	@ 0x70
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	08010910 	.word	0x08010910
 8003438:	080105a8 	.word	0x080105a8

0800343c <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af04      	add	r7, sp, #16
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 8003446:	2301      	movs	r3, #1
 8003448:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 800345c:	2303      	movs	r3, #3
 800345e:	9303      	str	r3, [sp, #12]
 8003460:	230a      	movs	r3, #10
 8003462:	9302      	str	r3, [sp, #8]
 8003464:	2302      	movs	r3, #2
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	232b      	movs	r3, #43	@ 0x2b
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003470:	220f      	movs	r2, #15
 8003472:	4928      	ldr	r1, [pc, #160]	@ (8003514 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fdcf 	bl	8004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 800347a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800347e:	2100      	movs	r1, #0
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fe94 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003486:	4603      	mov	r3, r0
 8003488:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800348a:	7dbb      	ldrb	r3, [r7, #22]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003496:	3308      	adds	r3, #8
 8003498:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034a0:	8a92      	ldrh	r2, [r2, #20]
 80034a2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fe27 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 80034b4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d026      	beq.n	8003508 <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80034c0:	3008      	adds	r0, #8
 80034c2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ca:	8a9b      	ldrh	r3, [r3, #20]
 80034cc:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	9302      	str	r3, [sp, #8]
 80034d4:	230a      	movs	r3, #10
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	233a      	movs	r3, #58	@ 0x3a
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 80034de:	f001 fe31 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80034e2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4618      	mov	r0, r3
 80034fc:	f009 fdbc 	bl	800d078 <atoi>
 8003500:	4603      	mov	r3, r0
 8003502:	b2da      	uxtb	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 8003508:	7dfb      	ldrb	r3, [r7, #23]

}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	080108f0 	.word	0x080108f0
 8003518:	080105b8 	.word	0x080105b8

0800351c <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	@ 0x28
 8003520:	af04      	add	r7, sp, #16
 8003522:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003524:	2301      	movs	r3, #1
 8003526:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 800353a:	2303      	movs	r3, #3
 800353c:	9303      	str	r3, [sp, #12]
 800353e:	230a      	movs	r3, #10
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	2302      	movs	r3, #2
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	232b      	movs	r3, #43	@ 0x2b
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800354e:	220e      	movs	r2, #14
 8003550:	4923      	ldr	r1, [pc, #140]	@ (80035e0 <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fd60 	bl	8004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8003558:	f242 7210 	movw	r2, #10000	@ 0x2710
 800355c:	2100      	movs	r1, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fe25 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003564:	4603      	mov	r3, r0
 8003566:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003568:	7dbb      	ldrb	r3, [r7, #22]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d111      	bne.n	8003592 <_ZN5Modem8simA76728mqttStopEv+0x76>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003574:	3308      	adds	r3, #8
 8003576:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800357e:	8a92      	ldrh	r2, [r2, #20]
 8003580:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fdb8 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <_ZN5Modem8simA76728mqttStopEv+0x76>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8003592:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01d      	beq.n	80035d4 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800359e:	3008      	adds	r0, #8
 80035a0:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a8:	8a9b      	ldrh	r3, [r3, #20]
 80035aa:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	9302      	str	r3, [sp, #8]
 80035b2:	230a      	movs	r3, #10
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	233a      	movs	r3, #58	@ 0x3a
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 80035bc:	f001 fdc2 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80035c0:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	08010900 	.word	0x08010900
 80035e4:	080105c8 	.word	0x080105c8

080035e8 <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b09c      	sub	sp, #112	@ 0x70
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	72fb      	strb	r3, [r7, #11]
 80035f8:	4613      	mov	r3, r2
 80035fa:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f107 0318 	add.w	r3, r7, #24
 8003610:	224c      	movs	r2, #76	@ 0x4c
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f00a fb34 	bl	800dc82 <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 800361a:	7afa      	ldrb	r2, [r7, #11]
 800361c:	7abb      	ldrb	r3, [r7, #10]
 800361e:	f107 0014 	add.w	r0, r7, #20
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4920      	ldr	r1, [pc, #128]	@ (80036a8 <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 8003628:	f00a fac8 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc fe1d 	bl	8000270 <strlen>
 8003636:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003638:	b29a      	uxth	r2, r3
 800363a:	f107 0114 	add.w	r1, r7, #20
 800363e:	2301      	movs	r3, #1
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	230a      	movs	r3, #10
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fc82 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003650:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003654:	2100      	movs	r1, #0
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fda9 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003662:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003666:	2b00      	cmp	r3, #0
 8003668:	d111      	bne.n	800368e <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003670:	3308      	adds	r3, #8
 8003672:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800367a:	8a92      	ldrh	r2, [r2, #20]
 800367c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fd3a 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 800368e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 800369a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3768      	adds	r7, #104	@ 0x68
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	080105d4 	.word	0x080105d4

080036ac <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b09a      	sub	sp, #104	@ 0x68
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	224c      	movs	r2, #76	@ 0x4c
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f00a fad6 	bl	800dc82 <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	4920      	ldr	r1, [pc, #128]	@ (8003760 <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f00a fa6c 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc fdc1 	bl	8000270 <strlen>
 80036ee:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	f107 010c 	add.w	r1, r7, #12
 80036f6:	2301      	movs	r3, #1
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	230a      	movs	r3, #10
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fc26 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003708:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800370c:	2100      	movs	r1, #0
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fd4d 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800371a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800371e:	2b00      	cmp	r3, #0
 8003720:	d111      	bne.n	8003746 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003728:	3308      	adds	r3, #8
 800372a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003732:	8a92      	ldrh	r2, [r2, #20]
 8003734:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fcde 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 8003746:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 8003752:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8003756:	4618      	mov	r0, r3
 8003758:	3760      	adds	r7, #96	@ 0x60
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	080105f0 	.word	0x080105f0

08003764 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b0b0      	sub	sp, #192	@ 0xc0
 8003768:	af04      	add	r7, sp, #16
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	460b      	mov	r3, r1
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	2292      	movs	r2, #146	@ 0x92
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f00a fa79 	bl	800dc82 <memset>
	char recv_buf[5] = { 0 };
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	2300      	movs	r3, #0
 8003796:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8003798:	7afa      	ldrb	r2, [r7, #11]
 800379a:	f107 0018 	add.w	r0, r7, #24
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	492c      	ldr	r1, [pc, #176]	@ (8003854 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 80037a2:	f00a fa0b 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 80037a6:	f107 0318 	add.w	r3, r7, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fd60 	bl	8000270 <strlen>
 80037b0:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f107 0118 	add.w	r1, r7, #24
 80037b8:	2303      	movs	r3, #3
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	230a      	movs	r3, #10
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	232b      	movs	r3, #43	@ 0x2b
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fc23 	bl	8004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 80037d2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80037d6:	2100      	movs	r1, #0
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fce8 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 80037e4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d12c      	bne.n	8003846 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80037f2:	3008      	adds	r0, #8
 80037f4:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037fc:	8a9b      	ldrh	r3, [r3, #20]
 80037fe:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	230a      	movs	r3, #10
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	232c      	movs	r3, #44	@ 0x2c
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 8003810:	f001 fc98 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003814:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	490c      	ldr	r1, [pc, #48]	@ (800385c <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fe66 	bl	80014fc <_ZSt6strstrPcPKc>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 8003840:	2302      	movs	r3, #2
 8003842:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8003846:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800384a:	4618      	mov	r0, r3
 800384c:	37b0      	adds	r7, #176	@ 0xb0
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	08010604 	.word	0x08010604
 8003858:	080105a8 	.word	0x080105a8
 800385c:	08010624 	.word	0x08010624

08003860 <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b0ae      	sub	sp, #184	@ 0xb8
 8003864:	af04      	add	r7, sp, #16
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	2292      	movs	r2, #146	@ 0x92
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f00a f9fc 	bl	800dc82 <memset>
	char recv_buf[5] = { 0 };
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	2300      	movs	r3, #0
 8003890:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	492c      	ldr	r1, [pc, #176]	@ (800394c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 800389a:	4618      	mov	r0, r3
 800389c:	f00a f98e 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fce3 	bl	8000270 <strlen>
 80038aa:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	f107 0110 	add.w	r1, r7, #16
 80038b2:	2303      	movs	r3, #3
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	230a      	movs	r3, #10
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	232b      	movs	r3, #43	@ 0x2b
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fba6 	bl	8004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 80038cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fc6b 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 80038de:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d12c      	bne.n	8003940 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80038ec:	3008      	adds	r0, #8
 80038ee:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f6:	8a9b      	ldrh	r3, [r3, #20]
 80038f8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	230a      	movs	r3, #10
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	232c      	movs	r3, #44	@ 0x2c
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 800390a:	f001 fc1b 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800390e:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	490c      	ldr	r1, [pc, #48]	@ (8003954 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fde9 	bl	80014fc <_ZSt6strstrPcPKc>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 800393a:	2303      	movs	r3, #3
 800393c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 8003940:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 8003944:	4618      	mov	r0, r3
 8003946:	37a8      	adds	r7, #168	@ 0xa8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	08010628 	.word	0x08010628
 8003950:	08010640 	.word	0x08010640
 8003954:	08010624 	.word	0x08010624

08003958 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b0af      	sub	sp, #188	@ 0xbc
 800395c:	af04      	add	r7, sp, #16
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	2292      	movs	r2, #146	@ 0x92
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f00a f97e 	bl	800dc82 <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 8003986:	7afc      	ldrb	r4, [r7, #11]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fc fc71 	bl	8000270 <strlen>
 800398e:	4603      	mov	r3, r0
 8003990:	f107 0010 	add.w	r0, r7, #16
 8003994:	4622      	mov	r2, r4
 8003996:	494b      	ldr	r1, [pc, #300]	@ (8003ac4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 8003998:	f00a f910 	bl	800dbbc <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fc65 	bl	8000270 <strlen>
 80039a6:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	f107 0110 	add.w	r1, r7, #16
 80039ae:	2302      	movs	r3, #2
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	233e      	movs	r3, #62	@ 0x3e
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 faca 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 80039c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039c4:	2100      	movs	r1, #0
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fbf1 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 80039d2:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d16e      	bne.n	8003ab8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80039e0:	3008      	adds	r0, #8
 80039e2:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ea:	8a9b      	ldrh	r3, [r3, #20]
 80039ec:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80039ee:	2300      	movs	r3, #0
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	230a      	movs	r3, #10
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	232c      	movs	r3, #44	@ 0x2c
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 80039fc:	f001 fba2 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003a00:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d053      	beq.n	8003ab8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fc fc2d 	bl	8000270 <strlen>
 8003a16:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	9303      	str	r3, [sp, #12]
 8003a1e:	230a      	movs	r3, #10
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	2305      	movs	r3, #5
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	232b      	movs	r3, #43	@ 0x2b
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 faf1 	bl	8004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 8003a36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fbb6 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003a48:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d111      	bne.n	8003a74 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003a56:	3308      	adds	r3, #8
 8003a58:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a60:	8a92      	ldrh	r2, [r2, #20]
 8003a62:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fb47 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 8003a74:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003a80:	3008      	adds	r0, #8
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	230d      	movs	r3, #13
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	230a      	movs	r3, #10
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 8003a96:	f001 fc1d 	bl	80052d4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 8003aaa:	2305      	movs	r3, #5
 8003aac:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003ab0:	e002      	b.n	8003ab8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 8003ab8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	37ac      	adds	r7, #172	@ 0xac
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}
 8003ac4:	0801064c 	.word	0x0801064c
 8003ac8:	08010664 	.word	0x08010664
 8003acc:	08010668 	.word	0x08010668

08003ad0 <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b0b1      	sub	sp, #196	@ 0xc4
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	f107 031c 	add.w	r3, r7, #28
 8003af2:	2292      	movs	r2, #146	@ 0x92
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00a f8c3 	bl	800dc82 <memset>
	char recv_buf[5] = { 0 };
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 8003b04:	7afc      	ldrb	r4, [r7, #11]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fc fbb2 	bl	8000270 <strlen>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f107 0018 	add.w	r0, r7, #24
 8003b12:	4622      	mov	r2, r4
 8003b14:	4947      	ldr	r1, [pc, #284]	@ (8003c34 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 8003b16:	f00a f851 	bl	800dbbc <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8003b1a:	f107 0318 	add.w	r3, r7, #24
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fba6 	bl	8000270 <strlen>
 8003b24:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	f107 0118 	add.w	r1, r7, #24
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	233e      	movs	r3, #62	@ 0x3e
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fa0b 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8003b3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b42:	2100      	movs	r1, #0
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fb32 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 8003b50:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d167      	bne.n	8003c28 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003b5e:	3008      	adds	r0, #8
 8003b60:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b68:	8a9b      	ldrh	r3, [r3, #20]
 8003b6a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	230a      	movs	r3, #10
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	232c      	movs	r3, #44	@ 0x2c
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4b2f      	ldr	r3, [pc, #188]	@ (8003c38 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 8003b7a:	f001 fae3 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003b7e:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d04c      	beq.n	8003c28 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fc fb6e 	bl	8000270 <strlen>
 8003b94:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	2303      	movs	r3, #3
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	232b      	movs	r3, #43	@ 0x2b
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fa32 	bl	8004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 8003bb4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003bb8:	2100      	movs	r1, #0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 faf7 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 8003bc6:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d12c      	bne.n	8003c28 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003bd4:	3008      	adds	r0, #8
 8003bd6:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bde:	8a9b      	ldrh	r3, [r3, #20]
 8003be0:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	9302      	str	r3, [sp, #8]
 8003be8:	230a      	movs	r3, #10
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	232c      	movs	r3, #44	@ 0x2c
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4b12      	ldr	r3, [pc, #72]	@ (8003c3c <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 8003bf2:	f001 faa7 	bl	8005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003bf6:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d010      	beq.n	8003c28 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 8003c06:	f107 0310 	add.w	r3, r7, #16
 8003c0a:	490d      	ldr	r1, [pc, #52]	@ (8003c40 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd fc75 	bl	80014fc <_ZSt6strstrPcPKc>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 8003c28:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	37b4      	adds	r7, #180	@ 0xb4
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}
 8003c34:	0801067c 	.word	0x0801067c
 8003c38:	08010664 	.word	0x08010664
 8003c3c:	08010694 	.word	0x08010694
 8003c40:	08010624 	.word	0x08010624

08003c44 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b09a      	sub	sp, #104	@ 0x68
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	f107 0310 	add.w	r3, r7, #16
 8003c64:	224c      	movs	r2, #76	@ 0x4c
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00a f80a 	bl	800dc82 <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	4920      	ldr	r1, [pc, #128]	@ (8003cf8 <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 8003c76:	4618      	mov	r0, r3
 8003c78:	f009 ffa0 	bl	800dbbc <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc faf5 	bl	8000270 <strlen>
 8003c86:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	f107 010c 	add.w	r1, r7, #12
 8003c8e:	2301      	movs	r3, #1
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	230a      	movs	r3, #10
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f95a 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003ca0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa81 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003cb2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d111      	bne.n	8003cde <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cca:	8a92      	ldrh	r2, [r2, #20]
 8003ccc:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fa12 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 8003cde:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 8003cea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3760      	adds	r7, #96	@ 0x60
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	080106a4 	.word	0x080106a4

08003cfc <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	230a      	movs	r3, #10
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d18:	221d      	movs	r2, #29
 8003d1a:	4915      	ldr	r1, [pc, #84]	@ (8003d70 <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f919 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003d22:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003d26:	2100      	movs	r1, #0
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fa40 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003d32:	7bbb      	ldrb	r3, [r7, #14]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d111      	bne.n	8003d5c <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003d3e:	3308      	adds	r3, #8
 8003d40:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d48:	8a92      	ldrh	r2, [r2, #20]
 8003d4a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 f9d3 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <_ZN5Modem8simA767213sslversionsetEv+0x62>
 8003d5c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	08010924 	.word	0x08010924

08003d74 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8003d84:	2301      	movs	r3, #1
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	230a      	movs	r3, #10
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d90:	221b      	movs	r2, #27
 8003d92:	4915      	ldr	r1, [pc, #84]	@ (8003de8 <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8dd 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003d9a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa04 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003db6:	3308      	adds	r3, #8
 8003db8:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dc0:	8a92      	ldrh	r2, [r2, #20]
 8003dc2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f997 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <_ZN5Modem8simA767210sslauthsetEv+0x62>
 8003dd4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	08010944 	.word	0x08010944

08003dec <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	230a      	movs	r3, #10
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e08:	2220      	movs	r2, #32
 8003e0a:	4915      	ldr	r1, [pc, #84]	@ (8003e60 <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8a1 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003e12:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003e16:	2100      	movs	r1, #0
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f9c8 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d111      	bne.n	8003e4c <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003e2e:	3308      	adds	r3, #8
 8003e30:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e38:	8a92      	ldrh	r2, [r2, #20]
 8003e3a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f95b 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 8003e4c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	08010960 	.word	0x08010960

08003e64 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 8003e74:	2301      	movs	r3, #1
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	230a      	movs	r3, #10
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e80:	222c      	movs	r2, #44	@ 0x2c
 8003e82:	4915      	ldr	r1, [pc, #84]	@ (8003ed8 <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f865 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003e8a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f98c 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003e96:	4603      	mov	r3, r0
 8003e98:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003e9a:	7bbb      	ldrb	r3, [r7, #14]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d111      	bne.n	8003ec4 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eb0:	8a92      	ldrh	r2, [r2, #20]
 8003eb2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f91f 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 8003ec4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	08010984 	.word	0x08010984

08003edc <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 8003eec:	2301      	movs	r3, #1
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ef8:	222a      	movs	r2, #42	@ 0x2a
 8003efa:	4915      	ldr	r1, [pc, #84]	@ (8003f50 <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f829 	bl	8003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003f02:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003f06:	2100      	movs	r1, #0
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f950 	bl	80041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003f12:	7bbb      	ldrb	r3, [r7, #14]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003f1e:	3308      	adds	r3, #8
 8003f20:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f28:	8a92      	ldrh	r2, [r2, #20]
 8003f2a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f8e3 	bl	80050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 8003f3c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]

}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	080109b4 	.word	0x080109b4

08003f54 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	460b      	mov	r3, r1
 8003f64:	80fb      	strh	r3, [r7, #6]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f009 fe85 	bl	800dc82 <memset>
	memset(Txbuffer, 0, BufferLen);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f009 fe7c 	bl	800dc82 <memset>
	rst_event(rx_evt);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f8c8 	bl	8004122 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8003f92:	2101      	movs	r1, #1
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f8c4 	bl	8004122 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	7e3b      	ldrb	r3, [r7, #24]
 8003fa4:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fac:	461a      	mov	r2, r3
 8003fae:	7f3b      	ldrb	r3, [r7, #28]
 8003fb0:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb8:	2200      	movs	r2, #0
 8003fba:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fcc:	22ff      	movs	r2, #255	@ 0xff
 8003fce:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fd8:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003fea:	3304      	adds	r3, #4
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ff2:	6911      	ldr	r1, [r2, #16]
 8003ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 f844 	bl	8005086 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004004:	3004      	adds	r0, #4
 8004006:	88bb      	ldrh	r3, [r7, #4]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	f001 f828 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	4611      	mov	r1, r2
 8004024:	461a      	mov	r2, r3
 8004026:	460b      	mov	r3, r1
 8004028:	80fb      	strh	r3, [r7, #6]
 800402a:	4613      	mov	r3, r2
 800402c:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f009 fe23 	bl	800dc82 <memset>
	memset(Txbuffer, 0, BufferLen);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f009 fe1a 	bl	800dc82 <memset>
	rst_event(rx_evt);
 800404e:	2100      	movs	r1, #0
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f866 	bl	8004122 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8004056:	2101      	movs	r1, #1
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f862 	bl	8004122 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004064:	461a      	mov	r2, r3
 8004066:	f897 3020 	ldrb.w	r3, [r7, #32]
 800406a:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004072:	461a      	mov	r2, r3
 8004074:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004078:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004080:	2200      	movs	r2, #0
 8004082:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408a:	2200      	movs	r2, #0
 800408c:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004094:	22ff      	movs	r2, #255	@ 0xff
 8004096:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040a0:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a8:	2200      	movs	r2, #0
 80040aa:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b2:	461a      	mov	r2, r3
 80040b4:	7e3b      	ldrb	r3, [r7, #24]
 80040b6:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 80040b8:	7f3b      	ldrb	r3, [r7, #28]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c4:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80040cc:	3304      	adds	r3, #4
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040d4:	6911      	ldr	r1, [r2, #16]
 80040d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ffd3 	bl	8005086 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80040e6:	3004      	adds	r0, #4
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	f000 ffb7 	bl	8005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004110:	3309      	adds	r3, #9
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004138:	3309      	adds	r3, #9
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004164:	3309      	adds	r3, #9
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e010      	b.n	80041a0 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004188:	3309      	adds	r3, #9
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]

}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
 80041ba:	4613      	mov	r3, r2
 80041bc:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 80041ce:	f002 f9fd 	bl	80065cc <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041da:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 80041dc:	e002      	b.n	80041e4 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 80041de:	200a      	movs	r0, #10
 80041e0:	f000 fcdc 	bl	8004b9c <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ffae 	bl	800414a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80041ee:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80041f4:	f002 f9ea 	bl	80065cc <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	883b      	ldrh	r3, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d201      	bcs.n	800420e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e4      	bne.n	80041de <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff96 	bl	800414a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8004232:	7bfb      	ldrb	r3, [r7, #15]

}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800424e:	7adb      	ldrb	r3, [r3, #11]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 808a 	beq.w	8004376 <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 8004262:	78f8      	ldrb	r0, [r7, #3]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004274:	610a      	str	r2, [r1, #16]
 8004276:	4602      	mov	r2, r0
 8004278:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004280:	8a9b      	ldrh	r3, [r3, #20]
 8004282:	b29b      	uxth	r3, r3
 8004284:	3301      	adds	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800428e:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004296:	7b1b      	ldrb	r3, [r3, #12]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00c      	beq.n	80042c2 <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ae:	7b9b      	ldrb	r3, [r3, #14]
 80042b0:	b25b      	sxtb	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	b25a      	sxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c0:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c8:	7a9b      	ldrb	r3, [r3, #10]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <_ZN5Modem8simA76724RxCBEh+0xa4>
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2b4f      	cmp	r3, #79	@ 0x4f
 80042d4:	d002      	beq.n	80042dc <_ZN5Modem8simA76724RxCBEh+0xa0>
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	2b45      	cmp	r3, #69	@ 0x45
 80042da:	d101      	bne.n	80042e0 <_ZN5Modem8simA76724RxCBEh+0xa4>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <_ZN5Modem8simA76724RxCBEh+0xa6>
 80042e0:	2300      	movs	r3, #0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01b      	beq.n	800431e <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ec:	2200      	movs	r2, #0
 80042ee:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f6:	2201      	movs	r2, #1
 80042f8:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80042fe:	d105      	bne.n	800430c <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	2202      	movs	r2, #2
 8004308:	735a      	strb	r2, [r3, #13]
 800430a:	e00d      	b.n	8004328 <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	2b45      	cmp	r3, #69	@ 0x45
 8004310:	d10a      	bne.n	8004328 <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004318:	2205      	movs	r2, #5
 800431a:	735a      	strb	r2, [r3, #13]
 800431c:	e004      	b.n	8004328 <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004324:	2200      	movs	r2, #0
 8004326:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	2b0a      	cmp	r3, #10
 800432c:	d104      	bne.n	8004338 <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004334:	2201      	movs	r2, #1
 8004336:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433e:	7b9b      	ldrb	r3, [r3, #14]
 8004340:	b25b      	sxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434a:	7b5b      	ldrb	r3, [r3, #13]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	429a      	cmp	r2, r3
 8004350:	bfac      	ite	ge
 8004352:	2301      	movge	r3, #1
 8004354:	2300      	movlt	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80ed 	beq.w	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 800435e:	2100      	movs	r1, #0
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff feca 	bl	80040fa <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fe9b 	bl	80050aa <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8004374:	e0e0      	b.n	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437c:	7adb      	ldrb	r3, [r3, #11]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d072      	beq.n	8004474 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 800438e:	78f8      	ldrb	r0, [r7, #3]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80043a0:	610a      	str	r2, [r1, #16]
 80043a2:	4602      	mov	r2, r0
 80043a4:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ac:	8a9b      	ldrh	r3, [r3, #20]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ba:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c2:	7a1b      	ldrb	r3, [r3, #8]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	bf14      	ite	ne
 80043ca:	2301      	movne	r3, #1
 80043cc:	2300      	moveq	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00f      	beq.n	80043f4 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80043d8:	f040 80ae 	bne.w	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 80043dc:	2100      	movs	r1, #0
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fe8b 	bl	80040fa <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80043ea:	3304      	adds	r3, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fe5c 	bl	80050aa <_ZN13System_serial6serial8RxintDisEv>
}
 80043f2:	e0a1      	b.n	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fa:	7b1b      	ldrb	r3, [r3, #12]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d104      	bne.n	800440c <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	2b45      	cmp	r3, #69	@ 0x45
 8004406:	d101      	bne.n	800440c <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <_ZN5Modem8simA76724RxCBEh+0x1d2>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004418:	2202      	movs	r2, #2
 800441a:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b0a      	cmp	r3, #10
 8004420:	d10a      	bne.n	8004438 <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004428:	7b1b      	ldrb	r3, [r3, #12]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004436:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443e:	7b1b      	ldrb	r3, [r3, #12]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444a:	7b9b      	ldrb	r3, [r3, #14]
 800444c:	b25b      	sxtb	r3, r3
 800444e:	429a      	cmp	r2, r3
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d06d      	beq.n	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fe4b 	bl	80040fa <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800446a:	3304      	adds	r3, #4
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fe1c 	bl	80050aa <_ZN13System_serial6serial8RxintDisEv>
}
 8004472:	e061      	b.n	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447a:	7adb      	ldrb	r3, [r3, #11]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b03      	cmp	r3, #3
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d055      	beq.n	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 800448c:	78f8      	ldrb	r0, [r7, #3]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800449e:	610a      	str	r2, [r1, #16]
 80044a0:	4602      	mov	r2, r0
 80044a2:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044aa:	8a9b      	ldrh	r3, [r3, #20]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b8:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c0:	7f9b      	ldrb	r3, [r3, #30]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	bf0c      	ite	eq
 80044ca:	2301      	moveq	r3, #1
 80044cc:	2300      	movne	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044da:	7b9b      	ldrb	r3, [r3, #14]
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	b25a      	sxtb	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ec:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f4:	7a1b      	ldrb	r3, [r3, #8]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d10e      	bne.n	800451c <_ZN5Modem8simA76724RxCBEh+0x2e0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004504:	7b9b      	ldrb	r3, [r3, #14]
 8004506:	b25b      	sxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004510:	7fdb      	ldrb	r3, [r3, #31]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	429a      	cmp	r2, r3
 8004516:	db01      	blt.n	800451c <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <_ZN5Modem8simA76724RxCBEh+0x2e2>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fde8 	bl	80040fa <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004530:	3304      	adds	r3, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fdb9 	bl	80050aa <_ZN13System_serial6serial8RxintDisEv>
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8004550:	2300      	movs	r3, #0
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	e009      	b.n	800456a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	4a11      	ldr	r2, [pc, #68]	@ (80045a0 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 800455a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d006      	beq.n	8004572 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	3301      	adds	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d9f2      	bls.n	8004556 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8004570:	e000      	b.n	8004574 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8004572:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	4a06      	ldr	r2, [pc, #24]	@ (80045a0 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fe53 	bl	800423c <_ZN5Modem8simA76724RxCBEh>
	}

}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20001c04 	.word	0x20001c04

080045a4 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout)
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	71fb      	strb	r3, [r7, #7]
{
	_aht20_ui2c=ui2c;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	79fa      	ldrb	r2, [r7, #7]
 80045d2:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	uint8_t cmd = AHT20_SOFT_RESET;
		HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_ << 1, &cmd, 1, timeout_);
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
	uint16_t counter = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 80045f8:	2032      	movs	r0, #50	@ 0x32
 80045fa:	f000 facf 	bl	8004b9c <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 80045fe:	23ac      	movs	r3, #172	@ 0xac
 8004600:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 8004602:	2333      	movs	r3, #51	@ 0x33
 8004604:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 8004606:	2300      	movs	r3, #0
 8004608:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f875 	bl	80046fa <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d068      	beq.n	80046f2 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6858      	ldr	r0, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	7a1b      	ldrb	r3, [r3, #8]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	b299      	uxth	r1, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f107 0218 	add.w	r2, r7, #24
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2303      	movs	r3, #3
 8004638:	f003 f810 	bl	800765c <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 800463c:	2064      	movs	r0, #100	@ 0x64
 800463e:	f000 faad 	bl	8004b9c <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6858      	ldr	r0, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	7a1b      	ldrb	r3, [r3, #8]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	b299      	uxth	r1, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f107 0210 	add.w	r2, r7, #16
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2307      	movs	r3, #7
 800465a:	f003 f8fd 	bl	8007858 <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 800465e:	7c3a      	ldrb	r2, [r7, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	7a5b      	ldrb	r3, [r3, #9]
 8004668:	b25b      	sxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	db36      	blt.n	80046dc <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0xf4>
    		{
    	    DATA_Humi=ahtRData[1];
 800466e:	7c7b      	ldrb	r3, [r7, #17]
 8004670:	461a      	mov	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	7cba      	ldrb	r2, [r7, #18]
 800467e:	431a      	orrs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	7cfa      	ldrb	r2, [r7, #19]
 800468c:	0912      	lsrs	r2, r2, #4
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	7d3a      	ldrb	r2, [r7, #20]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	7d7a      	ldrb	r2, [r7, #21]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 80046bc:	7dba      	ldrb	r2, [r7, #22]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f83a 	bl	800473c <_ZN15sensor_TempHumd5AHT204tempEv>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f870 	bl	80047b4 <_ZN15sensor_TempHumd5AHT205humidEv>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]
    		break;
 80046da:	e00a      	b.n	80046f2 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
    		}
    	else {
    		counter++;
 80046dc:	8bfb      	ldrh	r3, [r7, #30]
 80046de:	3301      	adds	r3, #1
 80046e0:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 80046e2:	200a      	movs	r0, #10
 80046e4:	f000 fa5a 	bl	8004b9c <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 80046e8:	8bfb      	ldrh	r3, [r7, #30]
 80046ea:	2b32      	cmp	r3, #50	@ 0x32
 80046ec:	d800      	bhi.n	80046f0 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x108>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 80046ee:	e7a8      	b.n	8004642 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x5a>
    		{
    			break;
 80046f0:	bf00      	nop
    		}
    	}
    }
	}
}
 80046f2:	bf00      	nop
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6858      	ldr	r0, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7a1b      	ldrb	r3, [r3, #8]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	b299      	uxth	r1, r3
 8004712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004716:	2203      	movs	r2, #3
 8004718:	f003 fad0 	bl	8007cbc <HAL_I2C_IsDeviceReady>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 8004730:	7bfb      	ldrb	r3, [r7, #15]

}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fb fedb 	bl	8000504 <__aeabi_ui2d>
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	4b15      	ldr	r3, [pc, #84]	@ (80047a8 <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8004754:	f7fc f87a 	bl	800084c <__aeabi_ddiv>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8004766:	f7fc f871 	bl	800084c <__aeabi_ddiv>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b0d      	ldr	r3, [pc, #52]	@ (80047ac <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 8004778:	f7fb ff3e 	bl	80005f8 <__aeabi_dmul>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 800478a:	f7fb fd7d 	bl	8000288 <__aeabi_dsub>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	f7fc fa07 	bl	8000ba8 <__aeabi_d2uiz>
 800479a:	4603      	mov	r3, r0
 800479c:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40900000 	.word	0x40900000
 80047ac:	40690000 	.word	0x40690000
 80047b0:	40490000 	.word	0x40490000

080047b4 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fb fe9f 	bl	8000504 <__aeabi_ui2d>
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 80047cc:	f7fc f83e 	bl	800084c <__aeabi_ddiv>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 80047de:	f7fc f835 	bl	800084c <__aeabi_ddiv>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 80047f0:	f7fb ff02 	bl	80005f8 <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fc f9d4 	bl	8000ba8 <__aeabi_d2uiz>
 8004800:	4603      	mov	r3, r0
 8004802:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40900000 	.word	0x40900000
 8004814:	40590000 	.word	0x40590000

08004818 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc)
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a10      	ldr	r2, [pc, #64]	@ (8004868 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a0b      	ldr	r2, [pc, #44]	@ (8004868 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 800483a:	615a      	str	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	761a      	strb	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	61da      	str	r2, [r3, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	621a      	str	r2, [r3, #32]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	625a      	str	r2, [r3, #36]	@ 0x24
{
	hadc_sensor = hadc;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	bf800000 	.word	0xbf800000

0800486c <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>:

void liquidSensor::Measurement_loop(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	61f8      	str	r0, [r7, #28]
 8004874:	ed87 0a05 	vstr	s0, [r7, #20]
 8004878:	edc7 0a04 	vstr	s1, [r7, #16]
 800487c:	ed87 1a03 	vstr	s2, [r7, #12]
 8004880:	60ba      	str	r2, [r7, #8]
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	76fb      	strb	r3, [r7, #27]
	getLevel(unit_,LowSpan,fullSpan,VoltOut,getlevel);
 8004888:	7efb      	ldrb	r3, [r7, #27]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	ed97 1a03 	vldr	s2, [r7, #12]
 8004890:	edd7 0a04 	vldr	s1, [r7, #16]
 8004894:	ed97 0a05 	vldr	s0, [r7, #20]
 8004898:	4619      	mov	r1, r3
 800489a:	69f8      	ldr	r0, [r7, #28]
 800489c:	f000 f80e 	bl	80048bc <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>
	consumptionliters(consumption);
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	69f8      	ldr	r0, [r7, #28]
 80048a4:	f000 f8e8 	bl	8004a78 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ae:	69f8      	ldr	r0, [r7, #28]
 80048b0:	f000 f91c 	bl	8004aec <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 80048b4:	bf00      	nop
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>:

liquidSensor::status liquidSensor::getLevel(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b09a      	sub	sp, #104	@ 0x68
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	61f8      	str	r0, [r7, #28]
 80048c4:	460b      	mov	r3, r1
 80048c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80048ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80048ce:	ed87 1a03 	vstr	s2, [r7, #12]
 80048d2:	60ba      	str	r2, [r7, #8]
 80048d4:	76fb      	strb	r3, [r7, #27]


	enum status stat = liquidSensor_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	float totalSpan = fullSpan - LowSpan;
 80048dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80048e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80048e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 80048ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048f0:	2228      	movs	r2, #40	@ 0x28
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f009 f9c4 	bl	800dc82 <memset>
	  uint32_t adcValue = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	667b      	str	r3, [r7, #100]	@ 0x64




	if(hadc_sensor == NULL)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x4e>
	{
		return liquidSensor_ERR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0a8      	b.n	8004a5c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
	}
    for(int i = 0; i< 10; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	663b      	str	r3, [r7, #96]	@ 0x60
 800490e:	e030      	b.n	8004972 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xb6>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fecd 	bl	80066b4 <HAL_ADC_Start>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x72>
 800492a:	2301      	movs	r3, #1
 800492c:	e096      	b.n	8004a5c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004936:	4618      	mov	r0, r3
 8004938:	f001 ffc1 	bl	80068be <HAL_ADC_PollForConversion>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf14      	ite	ne
 8004942:	2301      	movne	r3, #1
 8004944:	2300      	moveq	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x94>
 800494c:	2301      	movs	r3, #1
 800494e:	e085      	b.n	8004a5c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	4618      	mov	r0, r3
 8004956:	f002 f83d 	bl	80069d4 <HAL_ADC_GetValue>
 800495a:	4602      	mov	r2, r0
 800495c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	3360      	adds	r3, #96	@ 0x60
 8004962:	f107 0108 	add.w	r1, r7, #8
 8004966:	440b      	add	r3, r1
 8004968:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 800496c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800496e:	3301      	adds	r3, #1
 8004970:	663b      	str	r3, [r7, #96]	@ 0x60
 8004972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004974:	2b09      	cmp	r3, #9
 8004976:	ddcb      	ble.n	8004910 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x54>
    }
    HAL_ADC_Stop(hadc_sensor);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	4618      	mov	r0, r3
 800497e:	f001 ff6b 	bl	8006858 <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004986:	e00d      	b.n	80049a4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xe8>
    {
    	adcValue = adcValue +  adcaverage[i];
 8004988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	3360      	adds	r3, #96	@ 0x60
 800498e:	f107 0208 	add.w	r2, r7, #8
 8004992:	4413      	add	r3, r2
 8004994:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004998:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800499a:	4413      	add	r3, r2
 800499c:	667b      	str	r3, [r7, #100]	@ 0x64
    for(int i = 0; i< 10; i++)
 800499e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a0:	3301      	adds	r3, #1
 80049a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a6:	2b09      	cmp	r3, #9
 80049a8:	ddee      	ble.n	8004988 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xcc>
    }
    adcValue = adcValue/10;
 80049aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004a64 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a8>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	667b      	str	r3, [r7, #100]	@ 0x64
    float voltage = (adcValue / Resolution) * Vref;
 80049b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049c0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8004a68 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1ac>
 80049c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004a6c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b0>
 80049cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    current_mA = ((voltage/VoltOut) *  (max_cur - min_cur)) + min_cur;
 80049d4:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80049d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80049dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80049e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049e8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80049ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049f0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 80049f4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80049f8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80049fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a00:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004a04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a08:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a1c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a24:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004a70 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 8004a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	ed93 7a00 	vldr	s14, [r3]
 8004a38:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8004a70 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 8004a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a40:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004a74 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b8>
 8004a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a50:	793b      	ldrb	r3, [r7, #4]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	701a      	strb	r2, [r3, #0]

	  return stat;
 8004a58:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3768      	adds	r7, #104	@ 0x68
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	cccccccd 	.word	0xcccccccd
 8004a68:	45800000 	.word	0x45800000
 8004a6c:	40533333 	.word	0x40533333
 8004a70:	43fa0000 	.word	0x43fa0000
 8004a74:	42c80000 	.word	0x42c80000

08004a78 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

    uint32_t current_time = HAL_GetTick();
 8004a82:	f001 fda3 	bl	80065cc <HAL_GetTick>
 8004a86:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	edd3 7a00 	vldr	s15, [r3]
 8004a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9c:	d507      	bpl.n	8004aae <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x36>
    {
        prev_volumeLiters = tank_volumeLiters;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	61da      	str	r2, [r3, #28]

        return;
 8004aac:	e018      	b.n	8004ae0 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x70>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d311      	bcc.n	8004ae0 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	edd3 7a00 	vldr	s15, [r3]
 8004ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	61da      	str	r2, [r3, #28]
    }

}
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	0036ee80 	.word	0x0036ee80

08004aec <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
	current_volume_change = tank_volumeLiters;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d504      	bpl.n	8004b1c <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x30>
    {
    	prev_volume_change = current_volume_change;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	615a      	str	r2, [r3, #20]

        return;
 8004b1a:	e03c      	b.n	8004b96 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b30:	ee17 2a90 	vmov	r2, s15
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 8004b38:	f001 fd48 	bl	80065cc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	7e1b      	ldrb	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10e      	bne.n	8004b68 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x7c>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	dd1d      	ble.n	8004b8e <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xa2>
    	  refueling_active = 1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e012      	b.n	8004b8e <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xa2>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dc0e      	bgt.n	8004b8e <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xa2>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d905      	bls.n	8004b8e <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xa2>

			  refueling_active = 0;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	601a      	str	r2, [r3, #0]
		  }
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	615a      	str	r2, [r3, #20]

}
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	4a05      	ldr	r2, [pc, #20]	@ (8004bc4 <_ZN11System_Rtos5delayEm+0x28>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f006 fd46 	bl	800b648 <vTaskDelay>
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	10624dd3 	.word	0x10624dd3

08004bc8 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3304      	adds	r3, #4
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f009 fa1a 	bl	800e022 <strcpy>
	usStackDepth = usStackDepth_;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	887a      	ldrh	r2, [r7, #2]
 8004bf2:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	61da      	str	r2, [r3, #28]


}
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 8004c0a:	b5b0      	push	{r4, r5, r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af02      	add	r7, sp, #8
 8004c10:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	1d19      	adds	r1, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8a9c      	ldrh	r4, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699d      	ldr	r5, [r3, #24]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	3220      	adds	r2, #32
 8004c2a:	9201      	str	r2, [sp, #4]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	462b      	mov	r3, r5
 8004c30:	4622      	mov	r2, r4
 8004c32:	f006 fbab 	bl	800b38c <xTaskCreate>
			&taskHandle);
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bdb0      	pop	{r4, r5, r7, pc}

08004c3e <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	817b      	strh	r3, [r7, #10]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	897a      	ldrh	r2, [r7, #10]
 8004c54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	893a      	ldrh	r2, [r7, #8]
 8004c5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	659a      	str	r2, [r3, #88]	@ 0x58

}
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004c82:	4618      	mov	r0, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c8a:	461c      	mov	r4, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2100      	movs	r1, #0
 8004c96:	9100      	str	r1, [sp, #0]
 8004c98:	4621      	mov	r1, r4
 8004c9a:	f005 fe87 	bl	800a9ac <xQueueGenericCreateStatic>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd90      	pop	{r4, r7, pc}

08004cac <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	22c8      	movs	r2, #200	@ 0xc8
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	f005 ff12 	bl	800aaec <xQueueGenericSend>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e000      	b.n	8004cde <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]

}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2232      	movs	r2, #50	@ 0x32
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f006 f895 	bl	800ae2c <xQueueReceive>
 8004d02:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e000      	b.n	8004d18 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

void setDisplayCallback(DisplayRxCB Rxcb, DisplayTxCB TxCB) {
	LocalDisplayRxCB = Rxcb;
	LocalDisplayTxCB = TxCB;
}
void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 8004d2a:	4a06      	ldr	r2, [pc, #24]	@ (8004d44 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 8004d30:	4a05      	ldr	r2, [pc, #20]	@ (8004d48 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20001c24 	.word	0x20001c24
 8004d48:	20001c30 	.word	0x20001c30

08004d4c <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	LocalInverterRxCB = Rxcb;
 8004d56:	4a06      	ldr	r2, [pc, #24]	@ (8004d70 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6013      	str	r3, [r2, #0]
	LocalInverterTxCB = TxCB;
 8004d5c:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6013      	str	r3, [r2, #0]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20001c28 	.word	0x20001c28
 8004d74:	20001c34 	.word	0x20001c34

08004d78 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d84:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b22      	cmp	r3, #34	@ 0x22
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03f      	beq.n	8004e1c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa4>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 8004da8:	89bb      	ldrh	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 8004dae:	89bb      	ldrh	r3, [r7, #12]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	b21a      	sxth	r2, r3
 8004db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	81fb      	strh	r3, [r7, #14]


		if (huart == &HMI_UART5) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e2c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10a      	bne.n	8004ddc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>

			if(LocalDisplayRxCB)
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalDisplayRxCB(huart,(uint8_t)uhData);
 8004dce:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	89fa      	ldrh	r2, [r7, #14]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
			}

		}

		if (huart == &GSM_USART2) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a15      	ldr	r2, [pc, #84]	@ (8004e34 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xbc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10a      	bne.n	8004dfa <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			if(LocalModemRxCB)
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d006      	beq.n	8004dfa <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 8004dec:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	89fa      	ldrh	r2, [r7, #14]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	4611      	mov	r1, r2
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
			}

		}

		if (huart == &INVERTER_USART3) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8004e3c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10a      	bne.n	8004e18 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>

			if(LocalInverterRxCB)
 8004e02:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>
			{
				LocalInverterRxCB(huart,(uint8_t)uhData);
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	89fa      	ldrh	r2, [r7, #14]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	4611      	mov	r1, r2
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
			}

		}

		return HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e003      	b.n	8004e24 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xac>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
	}
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20001d88 	.word	0x20001d88
 8004e30:	20001c20 	.word	0x20001c20
 8004e34:	20001e18 	.word	0x20001e18
 8004e38:	20001c24 	.word	0x20001c24
 8004e3c:	20001e60 	.word	0x20001e60
 8004e40:	20001c28 	.word	0x20001c28

08004e44 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10d      	bne.n	8004e92 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff74 	bl	8004d78 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 8004e90:	e0bc      	b.n	800500c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8083 	beq.w	8004fa8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d078      	beq.n	8004fa8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00f      	beq.n	8004ee0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f06f 0201 	mvn.w	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00f      	beq.n	8004f0a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0202 	mvn.w	r2, #2
 8004efc:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00f      	beq.n	8004f34 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0204 	mvn.w	r2, #4
 8004f26:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2c:	f043 0202 	orr.w	r2, r3, #2
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0208 	mvn.w	r2, #8
 8004f5a:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	f043 0208 	orr.w	r2, r3, #8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d045      	beq.n	8005006 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c2>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f005 f80e 	bl	8009fbc <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 8004fa6:	e02e      	b.n	8005006 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c2>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02c      	beq.n	800500c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d027      	beq.n	800500c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	  {
			if (huart == &HMI_UART5) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d107      	bne.n	8004fd4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>

				if(LocalDisplayTxCB)
 8004fc4:	4b14      	ldr	r3, [pc, #80]	@ (8005018 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>
				{
					LocalDisplayTxCB(huart);
 8004fcc:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
				}

			}

			if (huart == &GSM_USART2) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a11      	ldr	r2, [pc, #68]	@ (800501c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d107      	bne.n	8004fec <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a8>
				if(LocalModemTxCB)
 8004fdc:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1dc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a8>
				{
					LocalModemTxCB(huart);
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8005020 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1dc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
				}

			}

			if (huart == &INVERTER_USART3) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0d      	ldr	r2, [pc, #52]	@ (8005024 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10a      	bne.n	800500a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>

				if(LocalInverterTxCB)
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d006      	beq.n	800500a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>
				{
					LocalInverterTxCB(huart);
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
				}

			}
	    return;
 8005004:	e001      	b.n	800500a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>
	    return;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	    return;
 800500a:	bf00      	nop
	  }



}
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20001d88 	.word	0x20001d88
 8005018:	20001c2c 	.word	0x20001c2c
 800501c:	20001e18 	.word	0x20001e18
 8005020:	20001c30 	.word	0x20001c30
 8005024:	20001e60 	.word	0x20001e60
 8005028:	20001c34 	.word	0x20001c34

0800502c <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ff05 	bl	8004e44 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <_ZN13System_serial6serial12TransmitDataEPKhtm>:

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	88fa      	ldrh	r2, [r7, #6]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	f004 fe3d 	bl	8009cf8 <HAL_UART_Transmit>

}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	88fa      	ldrh	r2, [r7, #6]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f004 feb6 	bl	8009e0e <HAL_UART_Receive_IT>
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 fece 	bl	8009e58 <HAL_UART_AbortReceive_IT>
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f008 fdde 	bl	800dc92 <strchr>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
{

}
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 8005106:	2302      	movs	r3, #2
 8005108:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 800510a:	490c      	ldr	r1, [pc, #48]	@ (800513c <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f008 fde0 	bl	800dcd2 <strstr>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 8005118:	2300      	movs	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
 800511c:	e008      	b.n	8005130 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 800511e:	4908      	ldr	r1, [pc, #32]	@ (8005140 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 8005120:	68b8      	ldr	r0, [r7, #8]
 8005122:	f008 fdd6 	bl	800dcd2 <strstr>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 8005130:	7dfb      	ldrb	r3, [r7, #23]


}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	08010710 	.word	0x08010710
 8005140:	08010714 	.word	0x08010714

08005144 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800514a:	af00      	add	r7, sp, #0
 800514c:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8005150:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8005154:	6020      	str	r0, [r4, #0]
 8005156:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 800515a:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 800515e:	6001      	str	r1, [r0, #0]
 8005160:	4611      	mov	r1, r2
 8005162:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005166:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005170:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005174:	460a      	mov	r2, r1
 8005176:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 8005178:	2302      	movs	r3, #2
 800517a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 8005184:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005188:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005192:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8005196:	f107 0014 	add.w	r0, r7, #20
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	f008 fd86 	bl	800dcac <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 80051a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051a4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80051a8:	f107 0214 	add.w	r2, r7, #20
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	4610      	mov	r0, r2
 80051b0:	f008 fd8f 	bl	800dcd2 <strstr>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 80051ba:	2302      	movs	r3, #2
 80051bc:	e085      	b.n	80052ca <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 80051be:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e07f      	b.n	80052ca <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 80051ca:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 80051ce:	f107 0314 	add.w	r3, r7, #20
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff ff75 	bl	80050c4 <_ZSt6strchrPci>
 80051da:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 80051de:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 80051e6:	f107 0314 	add.w	r3, r7, #20
 80051ea:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 80051f4:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 80051f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80051fa:	d105      	bne.n	8005208 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 80051fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005200:	3302      	adds	r3, #2
 8005202:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8005206:	e007      	b.n	8005218 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 8005208:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800520c:	3301      	adds	r3, #1
 800520e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8005212:	e001      	b.n	8005218 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 8005214:	2302      	movs	r3, #2
 8005216:	e058      	b.n	80052ca <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 8005218:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800521c:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8005220:	e03c      	b.n	800529c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 8005222:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005226:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800522a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	4413      	add	r3, r2
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005238:	429a      	cmp	r2, r3
 800523a:	d00f      	beq.n	800525c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 800523c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005240:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005244:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005250:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8005254:	440b      	add	r3, r1
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e015      	b.n	8005288 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 800525c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005260:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005264:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	4413      	add	r3, r2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005272:	429a      	cmp	r2, r3
 8005274:	d108      	bne.n	8005288 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8005276:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800527a:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 800527e:	4413      	add	r3, r2
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8005284:	2300      	movs	r3, #0
 8005286:	e020      	b.n	80052ca <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8005288:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800528c:	3301      	adds	r3, #1
 800528e:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 8005292:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005296:	3301      	adds	r3, #1
 8005298:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 800529c:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 80052a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052a4:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80052a8:	8819      	ldrh	r1, [r3, #0]
 80052aa:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	429a      	cmp	r2, r3
 80052b2:	da08      	bge.n	80052c6 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 80052b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052b8:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80052bc:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d3ad      	bcc.n	8005222 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 80052c6:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd90      	pop	{r4, r7, pc}

080052d4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 80052e2:	2300      	movs	r3, #0
 80052e4:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 80052e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e040      	b.n	8005372 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	68b8      	ldr	r0, [r7, #8]
 80052f4:	f008 fced 	bl	800dcd2 <strstr>
 80052f8:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 8005300:	2302      	movs	r3, #2
 8005302:	e036      	b.n	8005372 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fa ffb3 	bl	8000270 <strlen>
 800530a:	4602      	mov	r2, r0
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	3301      	adds	r3, #1
 8005316:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	4619      	mov	r1, r3
 800531c:	69f8      	ldr	r0, [r7, #28]
 800531e:	f7ff fed1 	bl	80050c4 <_ZSt6strchrPci>
 8005322:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 800532a:	2302      	movs	r3, #2
 800532c:	e021      	b.n	8005372 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 8005338:	e00a      	b.n	8005350 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	61fa      	str	r2, [r7, #28]
 8005340:	7819      	ldrb	r1, [r3, #0]
 8005342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005344:	8b7b      	ldrh	r3, [r7, #26]
 8005346:	1c58      	adds	r0, r3, #1
 8005348:	8378      	strh	r0, [r7, #26]
 800534a:	4413      	add	r3, r2
 800534c:	460a      	mov	r2, r1
 800534e:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005358:	429a      	cmp	r2, r3
 800535a:	d004      	beq.n	8005366 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 800535c:	8b7a      	ldrh	r2, [r7, #26]
 800535e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005360:	3b01      	subs	r3, #1
 8005362:	429a      	cmp	r2, r3
 8005364:	dbe9      	blt.n	800533a <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8005366:	8b7b      	ldrh	r3, [r7, #26]
 8005368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800536a:	4413      	add	r3, r2
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]


    return stat;
 8005370:	7e7b      	ldrb	r3, [r7, #25]

}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>:

enum Parsing_Checking::status Parsing_Checking::extractdatainsegments(char *input,char *output,uint16_t output_len,uint16_t *get_len,uint8_t skip_char)
{
 800537a:	b480      	push	{r7}
 800537c:	b087      	sub	sp, #28
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	807b      	strh	r3, [r7, #2]

	enum status stat = sys_ok;
 8005388:	2300      	movs	r3, #0
 800538a:	757b      	strb	r3, [r7, #21]


	   if (!input || !output || output_len == 0 || !get_len) {
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005398:	887b      	ldrh	r3, [r7, #2]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2e>
	        return sys_err; // Invalid parameters
 80053a4:	2301      	movs	r3, #1
 80053a6:	e03a      	b.n	800541e <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0xa4>
	    }


	   uint16_t len = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	82fb      	strh	r3, [r7, #22]


	   // Skip leading spaces (if any)
	    while (*input == skip_char || *input == '(') {
 80053ac:	e002      	b.n	80053b4 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x3a>
	        input++;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60bb      	str	r3, [r7, #8]
	    while (*input == skip_char || *input == '(') {
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80053bc:	429a      	cmp	r2, r3
 80053be:	d0f6      	beq.n	80053ae <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x34>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b28      	cmp	r3, #40	@ 0x28
 80053c6:	d0f2      	beq.n	80053ae <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x34>
	    }

	    // Extract characters until space or end of string
	      while (*input != '\0' && *input != skip_char && len < output_len - 1) {
 80053c8:	e00a      	b.n	80053e0 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x66>
	          output[len++] = *input++;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	60ba      	str	r2, [r7, #8]
 80053d0:	7819      	ldrb	r1, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	8afb      	ldrh	r3, [r7, #22]
 80053d6:	1c58      	adds	r0, r3, #1
 80053d8:	82f8      	strh	r0, [r7, #22]
 80053da:	4413      	add	r3, r2
 80053dc:	460a      	mov	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]
	      while (*input != '\0' && *input != skip_char && len < output_len - 1) {
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x84>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d004      	beq.n	80053fe <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x84>
 80053f4:	8afa      	ldrh	r2, [r7, #22]
 80053f6:	887b      	ldrh	r3, [r7, #2]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	dbe5      	blt.n	80053ca <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x50>
	      }

	    // Null-terminate the output
	     output[len] = '\0';
 80053fe:	8afb      	ldrh	r3, [r7, #22]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]

	     // If no data was extracted, return false
	        if (len == 0) {
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x98>
	            return sys_err;
 800540e:	2301      	movs	r3, #1
 8005410:	e005      	b.n	800541e <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0xa4>
	        }

	        // Store the extracted length
	         *get_len = len+1;
 8005412:	8afb      	ldrh	r3, [r7, #22]
 8005414:	3301      	adds	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	801a      	strh	r2, [r3, #0]

    return stat;
 800541c:	7d7b      	ldrb	r3, [r7, #21]

}
 800541e:	4618      	mov	r0, r3
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh>:

enum Parsing_Checking::status Parsing_Checking::binarystringToUint8(char *binaryString,uint8_t *result)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b088      	sub	sp, #32
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
	enum status stat = sys_ok;
 8005436:	2300      	movs	r3, #0
 8005438:	76fb      	strb	r3, [r7, #27]


	  // Check if the input string is valid
	    size_t length = std::strlen(binaryString);
 800543a:	68b8      	ldr	r0, [r7, #8]
 800543c:	f7fa ff18 	bl	8000270 <strlen>
 8005440:	6178      	str	r0, [r7, #20]

	    if (length == 0 || length > 8) {
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x24>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b08      	cmp	r3, #8
 800544c:	d901      	bls.n	8005452 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x28>
	        return sys_err;
 800544e:	2301      	movs	r3, #1
 8005450:	e027      	b.n	80054a2 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x78>
	    }

		*result = 0;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
	    // Iterate through each character in the string
	    for (size_t i = 0; i < length; ++i) {
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e01c      	b.n	8005498 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x6e>
	        char c = binaryString[i];
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	74fb      	strb	r3, [r7, #19]
	        if (c != '0' && c != '1') {
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	2b30      	cmp	r3, #48	@ 0x30
 800546c:	d004      	beq.n	8005478 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x4e>
 800546e:	7cfb      	ldrb	r3, [r7, #19]
 8005470:	2b31      	cmp	r3, #49	@ 0x31
 8005472:	d001      	beq.n	8005478 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x4e>
	        	   return sys_err;
 8005474:	2301      	movs	r3, #1
 8005476:	e014      	b.n	80054a2 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x78>
	        }

	        // Shift result left by 1 bit and add the current bit
	        *result = (*result << 1) | (c - '0');
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	b25a      	sxtb	r2, r3
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	3b30      	subs	r3, #48	@ 0x30
 8005484:	b2db      	uxtb	r3, r3
 8005486:	b25b      	sxtb	r3, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	b25b      	sxtb	r3, r3
 800548c:	b2da      	uxtb	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	701a      	strb	r2, [r3, #0]
	    for (size_t i = 0; i < length; ++i) {
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3301      	adds	r3, #1
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3de      	bcc.n	800545e <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x34>
	    }



    return stat;
 80054a0:	7efb      	ldrb	r3, [r7, #27]

}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

int32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 80054ac:	b082      	sub	sp, #8
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b08c      	sub	sp, #48	@ 0x30
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
 80054b8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80054bc:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 80054c0:	78bb      	ldrb	r3, [r7, #2]
 80054c2:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 80054c4:	787b      	ldrb	r3, [r7, #1]
 80054c6:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b45      	cmp	r3, #69	@ 0x45
 80054d0:	dc02      	bgt.n	80054d8 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 80054d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80054d6:	e001      	b.n	80054dc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 80054d8:	f240 736c 	movw	r3, #1900	@ 0x76c
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4413      	add	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 80054e2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80054e6:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 80054e8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80054ec:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 80054ee:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80054f2:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 80054f4:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 80054f8:	4613      	mov	r3, r2
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    int32_t epoch = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 8005506:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550c:	e011      	b.n	8005532 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x86>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 800550e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8bf 	bl	8005694 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 800551c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8005520:	e001      	b.n	8005526 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 8005522:	f240 136d 	movw	r3, #365	@ 0x16d
 8005526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005528:	4413      	add	r3, r2
 800552a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	3301      	adds	r3, #1
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	429a      	cmp	r2, r3
 8005538:	dbe9      	blt.n	800550e <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	4a23      	ldr	r2, [pc, #140]	@ (80055cc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 8005544:	2301      	movs	r3, #1
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
 8005548:	e00e      	b.n	8005568 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xbc>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 800554a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554c:	69b9      	ldr	r1, [r7, #24]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8d0 	bl	80056f4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 8005554:	4603      	mov	r3, r0
 8005556:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555e:	4413      	add	r3, r2
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	dbec      	blt.n	800554a <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x9e>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	3b01      	subs	r3, #1
 8005574:	4a15      	ldr	r2, [pc, #84]	@ (80055cc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557c:	4413      	add	r3, r2
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800558c:	4413      	add	r3, r2
 800558e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	461a      	mov	r2, r3
 800559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559e:	4413      	add	r3, r2
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 80055a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4613      	mov	r3, r2
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	461a      	mov	r2, r3
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	4413      	add	r3, r2
 80055ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3730      	adds	r7, #48	@ 0x30
 80055c2:	46bd      	mov	sp, r7
 80055c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c8:	b002      	add	sp, #8
 80055ca:	4770      	bx	lr
 80055cc:	00015180 	.word	0x00015180

080055d0 <_ZN10System_sys16Parsing_Checking21convertEpochToSTMTimeEP17RTC_HandleTypeDefli>:


}

void Parsing_Checking::convertEpochToSTMTime(RTC_HandleTypeDef *hrtc,int32_t epoch,int timezone)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b090      	sub	sp, #64	@ 0x40
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef gTime;

	int TimezoneQuaters;
	int TimezoneOffsetMinutes;

	TimezoneQuaters = timezone*4;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TimezoneOffsetMinutes = TimezoneQuaters*15;
 80055e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	63bb      	str	r3, [r7, #56]	@ 0x38



	 // Adjust epoch time by adding the default timezone offset to convert UTC to local time
	    epoch += TimezoneOffsetMinutes * SECONDS_IN_MINUTE;
 80055ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	607b      	str	r3, [r7, #4]

	    // Convert adjusted epoch time to a UTC tm structure
	    time_t rawTime = epoch;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	17da      	asrs	r2, r3, #31
 8005604:	461c      	mov	r4, r3
 8005606:	4615      	mov	r5, r2
 8005608:	e9c7 4504 	strd	r4, r5, [r7, #16]
	    struct tm* timeinfo = gmtime(&rawTime);  // gmtime gives us the time in UTC
 800560c:	f107 0310 	add.w	r3, r7, #16
 8005610:	4618      	mov	r0, r3
 8005612:	f008 fb75 	bl	800dd00 <gmtime>
 8005616:	6378      	str	r0, [r7, #52]	@ 0x34

	    // Extract date and time components
	    gDate.Year = (timeinfo->tm_year + 1900) % 100;  // tm_year is years since 1900
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8005620:	4a1b      	ldr	r2, [pc, #108]	@ (8005690 <_ZN10System_sys16Parsing_Checking21convertEpochToSTMTimeEP17RTC_HandleTypeDefli+0xc0>)
 8005622:	fb82 1203 	smull	r1, r2, r2, r3
 8005626:	1151      	asrs	r1, r2, #5
 8005628:	17da      	asrs	r2, r3, #31
 800562a:	1a8a      	subs	r2, r1, r2
 800562c:	2164      	movs	r1, #100	@ 0x64
 800562e:	fb01 f202 	mul.w	r2, r1, r2
 8005632:	1a9a      	subs	r2, r3, r2
 8005634:	b2d3      	uxtb	r3, r2
 8005636:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	    gDate.Month = timeinfo->tm_mon + 1;     // tm_mon is months since January (0-11)
 800563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	3301      	adds	r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	    gDate.Date = timeinfo->tm_mday;
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	    gTime.Hours = timeinfo->tm_hour;
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	773b      	strb	r3, [r7, #28]
	    gTime.Minutes = timeinfo->tm_min;
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	777b      	strb	r3, [r7, #29]
	    gTime.Seconds = timeinfo->tm_sec;
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	77bb      	strb	r3, [r7, #30]

	    HAL_RTC_SetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 800566a:	f107 031c 	add.w	r3, r7, #28
 800566e:	2200      	movs	r2, #0
 8005670:	4619      	mov	r1, r3
 8005672:	68b8      	ldr	r0, [r7, #8]
 8005674:	f003 fdc5 	bl	8009202 <HAL_RTC_SetTime>
	    HAL_RTC_SetDate(hrtc, &gDate, RTC_FORMAT_BIN);
 8005678:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800567c:	2200      	movs	r2, #0
 800567e:	4619      	mov	r1, r3
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f003 feb6 	bl	80093f2 <HAL_RTC_SetDate>

}
 8005686:	bf00      	nop
 8005688:	3740      	adds	r7, #64	@ 0x40
 800568a:	46bd      	mov	sp, r7
 800568c:	bdb0      	pop	{r4, r5, r7, pc}
 800568e:	bf00      	nop
 8005690:	51eb851f 	.word	0x51eb851f

08005694 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:

bool Parsing_Checking::isLeapYear(int year)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10c      	bne.n	80056c2 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	4b11      	ldr	r3, [pc, #68]	@ (80056f0 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 80056ac:	fb83 1302 	smull	r1, r3, r3, r2
 80056b0:	1159      	asrs	r1, r3, #5
 80056b2:	17d3      	asrs	r3, r2, #31
 80056b4:	1acb      	subs	r3, r1, r3
 80056b6:	2164      	movs	r1, #100	@ 0x64
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 80056c6:	fb83 1302 	smull	r1, r3, r3, r2
 80056ca:	11d9      	asrs	r1, r3, #7
 80056cc:	17d3      	asrs	r3, r2, #31
 80056ce:	1acb      	subs	r3, r1, r3
 80056d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	51eb851f 	.word	0x51eb851f

080056f4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d108      	bne.n	8005718 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff ffc3 	bl	8005694 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 800571e:	231d      	movs	r3, #29
 8005720:	e004      	b.n	800572c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	4a03      	ldr	r2, [pc, #12]	@ (8005734 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8005728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	080109e0 	.word	0x080109e0

08005738 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800573e:	463b      	mov	r3, r7
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800574a:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <MX_ADC1_Init+0x98>)
 800574c:	4a21      	ldr	r2, [pc, #132]	@ (80057d4 <MX_ADC1_Init+0x9c>)
 800574e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005750:	4b1f      	ldr	r3, [pc, #124]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005752:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005758:	4b1d      	ldr	r3, [pc, #116]	@ (80057d0 <MX_ADC1_Init+0x98>)
 800575a:	2200      	movs	r2, #0
 800575c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800575e:	4b1c      	ldr	r3, [pc, #112]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005760:	2200      	movs	r2, #0
 8005762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005764:	4b1a      	ldr	r3, [pc, #104]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005766:	2200      	movs	r2, #0
 8005768:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800576a:	4b19      	ldr	r3, [pc, #100]	@ (80057d0 <MX_ADC1_Init+0x98>)
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005772:	4b17      	ldr	r3, [pc, #92]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005774:	2200      	movs	r2, #0
 8005776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005778:	4b15      	ldr	r3, [pc, #84]	@ (80057d0 <MX_ADC1_Init+0x98>)
 800577a:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <MX_ADC1_Init+0xa0>)
 800577c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800577e:	4b14      	ldr	r3, [pc, #80]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005780:	2200      	movs	r2, #0
 8005782:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005784:	4b12      	ldr	r3, [pc, #72]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005786:	2201      	movs	r2, #1
 8005788:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800578a:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <MX_ADC1_Init+0x98>)
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005792:	4b0f      	ldr	r3, [pc, #60]	@ (80057d0 <MX_ADC1_Init+0x98>)
 8005794:	2201      	movs	r2, #1
 8005796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005798:	480d      	ldr	r0, [pc, #52]	@ (80057d0 <MX_ADC1_Init+0x98>)
 800579a:	f000 ff47 	bl	800662c <HAL_ADC_Init>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80057a4:	f000 fa0c 	bl	8005bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80057ac:	2301      	movs	r3, #1
 80057ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80057b0:	2307      	movs	r3, #7
 80057b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057b4:	463b      	mov	r3, r7
 80057b6:	4619      	mov	r1, r3
 80057b8:	4805      	ldr	r0, [pc, #20]	@ (80057d0 <MX_ADC1_Init+0x98>)
 80057ba:	f001 f919 	bl	80069f0 <HAL_ADC_ConfigChannel>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80057c4:	f000 f9fc 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20001c38 	.word	0x20001c38
 80057d4:	40012000 	.word	0x40012000
 80057d8:	0f000001 	.word	0x0f000001

080057dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <HAL_ADC_MspInit+0x7c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d127      	bne.n	800584e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <HAL_ADC_MspInit+0x80>)
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	4a15      	ldr	r2, [pc, #84]	@ (800585c <HAL_ADC_MspInit+0x80>)
 8005808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580c:	6453      	str	r3, [r2, #68]	@ 0x44
 800580e:	4b13      	ldr	r3, [pc, #76]	@ (800585c <HAL_ADC_MspInit+0x80>)
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	4b0f      	ldr	r3, [pc, #60]	@ (800585c <HAL_ADC_MspInit+0x80>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	4a0e      	ldr	r2, [pc, #56]	@ (800585c <HAL_ADC_MspInit+0x80>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6313      	str	r3, [r2, #48]	@ 0x30
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <HAL_ADC_MspInit+0x80>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_0_LevelSensor_Pin;
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800583a:	2303      	movs	r3, #3
 800583c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_0_LevelSensor_GPIO_Port, &GPIO_InitStruct);
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	4619      	mov	r1, r3
 8005848:	4805      	ldr	r0, [pc, #20]	@ (8005860 <HAL_ADC_MspInit+0x84>)
 800584a:	f001 fbf3 	bl	8007034 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800584e:	bf00      	nop
 8005850:	3728      	adds	r7, #40	@ 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40012000 	.word	0x40012000
 800585c:	40023800 	.word	0x40023800
 8005860:	40020000 	.word	0x40020000

08005864 <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0


	app_mainC();
 8005868:	f7fc f974 	bl	8001b54 <app_mainC>
    vTaskStartScheduler();
 800586c:	f005 ff22 	bl	800b6b4 <vTaskStartScheduler>
}
 8005870:	bf00      	nop
 8005872:	bd80      	pop	{r7, pc}

08005874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	@ 0x30
 8005878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800587a:	f107 031c 	add.w	r3, r7, #28
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	4b40      	ldr	r3, [pc, #256]	@ (8005990 <MX_GPIO_Init+0x11c>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	4a3f      	ldr	r2, [pc, #252]	@ (8005990 <MX_GPIO_Init+0x11c>)
 8005894:	f043 0304 	orr.w	r3, r3, #4
 8005898:	6313      	str	r3, [r2, #48]	@ 0x30
 800589a:	4b3d      	ldr	r3, [pc, #244]	@ (8005990 <MX_GPIO_Init+0x11c>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	4a38      	ldr	r2, [pc, #224]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b6:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	4b32      	ldr	r3, [pc, #200]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058e8:	f043 0310 	orr.w	r3, r3, #16
 80058ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ee:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <MX_GPIO_Init+0x11c>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <MX_GPIO_Init+0x11c>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	4a23      	ldr	r2, [pc, #140]	@ (8005990 <MX_GPIO_Init+0x11c>)
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	6313      	str	r3, [r2, #48]	@ 0x30
 800590a:	4b21      	ldr	r3, [pc, #132]	@ (8005990 <MX_GPIO_Init+0x11c>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	4b1d      	ldr	r3, [pc, #116]	@ (8005990 <MX_GPIO_Init+0x11c>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <MX_GPIO_Init+0x11c>)
 8005920:	f043 0308 	orr.w	r3, r3, #8
 8005924:	6313      	str	r3, [r2, #48]	@ 0x30
 8005926:	4b1a      	ldr	r3, [pc, #104]	@ (8005990 <MX_GPIO_Init+0x11c>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 8005932:	2200      	movs	r2, #0
 8005934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005938:	4816      	ldr	r0, [pc, #88]	@ (8005994 <MX_GPIO_Init+0x120>)
 800593a:	f001 fd17 	bl	800736c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 800593e:	2200      	movs	r2, #0
 8005940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005944:	4814      	ldr	r0, [pc, #80]	@ (8005998 <MX_GPIO_Init+0x124>)
 8005946:	f001 fd11 	bl	800736c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 800594a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800594e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005950:	2301      	movs	r3, #1
 8005952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005958:	2300      	movs	r3, #0
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 800595c:	f107 031c 	add.w	r3, r7, #28
 8005960:	4619      	mov	r1, r3
 8005962:	480c      	ldr	r0, [pc, #48]	@ (8005994 <MX_GPIO_Init+0x120>)
 8005964:	f001 fb66 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DE_Pin;
 8005968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800596e:	2301      	movs	r3, #1
 8005970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005976:	2300      	movs	r3, #0
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 800597a:	f107 031c 	add.w	r3, r7, #28
 800597e:	4619      	mov	r1, r3
 8005980:	4805      	ldr	r0, [pc, #20]	@ (8005998 <MX_GPIO_Init+0x124>)
 8005982:	f001 fb57 	bl	8007034 <HAL_GPIO_Init>

}
 8005986:	bf00      	nop
 8005988:	3730      	adds	r7, #48	@ 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40023800 	.word	0x40023800
 8005994:	40020800 	.word	0x40020800
 8005998:	40021000 	.word	0x40021000

0800599c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80059a0:	4b12      	ldr	r3, [pc, #72]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059a2:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <MX_I2C1_Init+0x54>)
 80059a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80059a6:	4b11      	ldr	r3, [pc, #68]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059a8:	4a12      	ldr	r2, [pc, #72]	@ (80059f4 <MX_I2C1_Init+0x58>)
 80059aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80059ac:	4b0f      	ldr	r3, [pc, #60]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80059b2:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80059b8:	4b0c      	ldr	r3, [pc, #48]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80059be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059cc:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059d8:	4804      	ldr	r0, [pc, #16]	@ (80059ec <MX_I2C1_Init+0x50>)
 80059da:	f001 fcfb 	bl	80073d4 <HAL_I2C_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80059e4:	f000 f8ec 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20001c80 	.word	0x20001c80
 80059f0:	40005400 	.word	0x40005400
 80059f4:	000186a0 	.word	0x000186a0

080059f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	@ 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <HAL_I2C_MspInit+0x84>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d12c      	bne.n	8005a74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	4b18      	ldr	r3, [pc, #96]	@ (8005a80 <HAL_I2C_MspInit+0x88>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	4a17      	ldr	r2, [pc, #92]	@ (8005a80 <HAL_I2C_MspInit+0x88>)
 8005a24:	f043 0302 	orr.w	r3, r3, #2
 8005a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a2a:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <HAL_I2C_MspInit+0x88>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a3c:	2312      	movs	r3, #18
 8005a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a44:	2303      	movs	r3, #3
 8005a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a48:	2304      	movs	r3, #4
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	4619      	mov	r1, r3
 8005a52:	480c      	ldr	r0, [pc, #48]	@ (8005a84 <HAL_I2C_MspInit+0x8c>)
 8005a54:	f001 faee 	bl	8007034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <HAL_I2C_MspInit+0x88>)
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a60:	4a07      	ldr	r2, [pc, #28]	@ (8005a80 <HAL_I2C_MspInit+0x88>)
 8005a62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a68:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <HAL_I2C_MspInit+0x88>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005a74:	bf00      	nop
 8005a76:	3728      	adds	r7, #40	@ 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40005400 	.word	0x40005400
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40020400 	.word	0x40020400

08005a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a8c:	f000 fd68 	bl	8006560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a90:	f000 f818 	bl	8005ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a94:	f7ff feee 	bl	8005874 <MX_GPIO_Init>
  MX_ADC1_Init();
 8005a98:	f7ff fe4e 	bl	8005738 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005a9c:	f7ff ff7e 	bl	800599c <MX_I2C1_Init>
  MX_RTC_Init();
 8005aa0:	f000 f894 	bl	8005bcc <MX_RTC_Init>
  MX_UART4_Init();
 8005aa4:	f000 faa6 	bl	8005ff4 <MX_UART4_Init>
  MX_UART5_Init();
 8005aa8:	f000 face 	bl	8006048 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8005aac:	f000 faf6 	bl	800609c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005ab0:	f000 fb1e 	bl	80060f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005ab4:	f000 fb46 	bl	8006144 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8005ab8:	f000 fb6e 	bl	8006198 <MX_USART6_UART_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 8005abc:	f7ff fed2 	bl	8005864 <MX_FREERTOS_Init>
  while (1)
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <main+0x38>

08005ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b094      	sub	sp, #80	@ 0x50
 8005ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005aca:	f107 0320 	add.w	r3, r7, #32
 8005ace:	2230      	movs	r2, #48	@ 0x30
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f008 f8d5 	bl	800dc82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	4b29      	ldr	r3, [pc, #164]	@ (8005b94 <SystemClock_Config+0xd0>)
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	4a28      	ldr	r2, [pc, #160]	@ (8005b94 <SystemClock_Config+0xd0>)
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af8:	4b26      	ldr	r3, [pc, #152]	@ (8005b94 <SystemClock_Config+0xd0>)
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b04:	2300      	movs	r3, #0
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	4b23      	ldr	r3, [pc, #140]	@ (8005b98 <SystemClock_Config+0xd4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a22      	ldr	r2, [pc, #136]	@ (8005b98 <SystemClock_Config+0xd4>)
 8005b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	4b20      	ldr	r3, [pc, #128]	@ (8005b98 <SystemClock_Config+0xd4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005b20:	230a      	movs	r3, #10
 8005b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b24:	2301      	movs	r3, #1
 8005b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b28:	2310      	movs	r3, #16
 8005b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b30:	2302      	movs	r3, #2
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005b38:	2308      	movs	r3, #8
 8005b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005b3c:	23a8      	movs	r3, #168	@ 0xa8
 8005b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b40:	2302      	movs	r3, #2
 8005b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005b44:	2304      	movs	r3, #4
 8005b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b48:	f107 0320 	add.w	r3, r7, #32
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f002 fd69 	bl	8008624 <HAL_RCC_OscConfig>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005b58:	f000 f832 	bl	8005bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b5c:	230f      	movs	r3, #15
 8005b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b60:	2302      	movs	r3, #2
 8005b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b74:	f107 030c 	add.w	r3, r7, #12
 8005b78:	2105      	movs	r1, #5
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 ffca 	bl	8008b14 <HAL_RCC_ClockConfig>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005b86:	f000 f81b 	bl	8005bc0 <Error_Handler>
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	3750      	adds	r7, #80	@ 0x50
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40007000 	.word	0x40007000

08005b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a04      	ldr	r2, [pc, #16]	@ (8005bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005bae:	f000 fcf9 	bl	80065a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40000400 	.word	0x40000400

08005bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bc4:	b672      	cpsid	i
}
 8005bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005bc8:	bf00      	nop
 8005bca:	e7fd      	b.n	8005bc8 <Error_Handler+0x8>

08005bcc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bd2:	4a10      	ldr	r2, [pc, #64]	@ (8005c14 <MX_RTC_Init+0x48>)
 8005bd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bde:	227f      	movs	r2, #127	@ 0x7f
 8005be0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005be4:	22ff      	movs	r2, #255	@ 0xff
 8005be6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005bee:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005bf4:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005bfa:	4805      	ldr	r0, [pc, #20]	@ (8005c10 <MX_RTC_Init+0x44>)
 8005bfc:	f003 fa7e 	bl	80090fc <HAL_RTC_Init>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8005c06:	f7ff ffdb 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005c0a:	bf00      	nop
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20001cd4 	.word	0x20001cd4
 8005c14:	40002800 	.word	0x40002800

08005c18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c20:	f107 0308 	add.w	r3, r7, #8
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a0c      	ldr	r2, [pc, #48]	@ (8005c64 <HAL_RTC_MspInit+0x4c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c40:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c42:	f107 0308 	add.w	r3, r7, #8
 8005c46:	4618      	mov	r0, r3
 8005c48:	f003 f976 	bl	8008f38 <HAL_RCCEx_PeriphCLKConfig>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005c52:	f7ff ffb5 	bl	8005bc0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005c56:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <HAL_RTC_MspInit+0x50>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40002800 	.word	0x40002800
 8005c68:	42470e3c 	.word	0x42470e3c

08005c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <HAL_MspInit+0x54>)
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	4a11      	ldr	r2, [pc, #68]	@ (8005cc0 <HAL_MspInit+0x54>)
 8005c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c82:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc0 <HAL_MspInit+0x54>)
 8005c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c8a:	607b      	str	r3, [r7, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	2300      	movs	r3, #0
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <HAL_MspInit+0x54>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc0 <HAL_MspInit+0x54>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c9e:	4b08      	ldr	r3, [pc, #32]	@ (8005cc0 <HAL_MspInit+0x54>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005caa:	2200      	movs	r2, #0
 8005cac:	210f      	movs	r1, #15
 8005cae:	f06f 0001 	mvn.w	r0, #1
 8005cb2:	f001 f973 	bl	8006f9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800

08005cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08e      	sub	sp, #56	@ 0x38
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <HAL_InitTick+0xe4>)
 8005cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cdc:	4a32      	ldr	r2, [pc, #200]	@ (8005da8 <HAL_InitTick+0xe4>)
 8005cde:	f043 0302 	orr.w	r3, r3, #2
 8005ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce4:	4b30      	ldr	r3, [pc, #192]	@ (8005da8 <HAL_InitTick+0xe4>)
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cf0:	f107 0210 	add.w	r2, r7, #16
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f003 f8ea 	bl	8008ed4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f003 f8bb 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d10:	e004      	b.n	8005d1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005d12:	f003 f8b7 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 8005d16:	4603      	mov	r3, r0
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	4a23      	ldr	r2, [pc, #140]	@ (8005dac <HAL_InitTick+0xe8>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0c9b      	lsrs	r3, r3, #18
 8005d26:	3b01      	subs	r3, #1
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8005d2a:	4b21      	ldr	r3, [pc, #132]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d2c:	4a21      	ldr	r2, [pc, #132]	@ (8005db4 <HAL_InitTick+0xf0>)
 8005d2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8005d30:	4b1f      	ldr	r3, [pc, #124]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d36:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8005d38:	4a1d      	ldr	r2, [pc, #116]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d44:	4b1a      	ldr	r3, [pc, #104]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d4a:	4b19      	ldr	r3, [pc, #100]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8005d50:	4817      	ldr	r0, [pc, #92]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d52:	f003 fcdf 	bl	8009714 <HAL_TIM_Base_Init>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11b      	bne.n	8005d9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8005d64:	4812      	ldr	r0, [pc, #72]	@ (8005db0 <HAL_InitTick+0xec>)
 8005d66:	f003 fd2f 	bl	80097c8 <HAL_TIM_Base_Start_IT>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d111      	bne.n	8005d9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d78:	201d      	movs	r0, #29
 8005d7a:	f001 f92b 	bl	8006fd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b0f      	cmp	r3, #15
 8005d82:	d808      	bhi.n	8005d96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8005d84:	2200      	movs	r2, #0
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	201d      	movs	r0, #29
 8005d8a:	f001 f907 	bl	8006f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005db8 <HAL_InitTick+0xf4>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e002      	b.n	8005d9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3738      	adds	r7, #56	@ 0x38
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	431bde83 	.word	0x431bde83
 8005db0:	20001cf4 	.word	0x20001cf4
 8005db4:	40000400 	.word	0x40000400
 8005db8:	2000004c 	.word	0x2000004c

08005dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <NMI_Handler+0x4>

08005dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <HardFault_Handler+0x4>

08005dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <MemManage_Handler+0x4>

08005dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <BusFault_Handler+0x4>

08005ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <UsageFault_Handler+0x4>

08005de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005df8:	4802      	ldr	r0, [pc, #8]	@ (8005e04 <TIM3_IRQHandler+0x10>)
 8005dfa:	f003 fd55 	bl	80098a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005dfe:	bf00      	nop
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20001cf4 	.word	0x20001cf4

08005e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 8005e0c:	4802      	ldr	r0, [pc, #8]	@ (8005e18 <USART2_IRQHandler+0x10>)
 8005e0e:	f7ff f90d 	bl	800502c <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20001e18 	.word	0x20001e18

08005e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart3);
 8005e20:	4802      	ldr	r0, [pc, #8]	@ (8005e2c <USART3_IRQHandler+0x10>)
 8005e22:	f7ff f903 	bl	800502c <My_UART_IRQHandlerC>
  /* USER CODE END USART3_IRQn 1 */
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20001e60 	.word	0x20001e60

08005e30 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart5);
 8005e34:	4802      	ldr	r0, [pc, #8]	@ (8005e40 <UART5_IRQHandler+0x10>)
 8005e36:	f7ff f8f9 	bl	800502c <My_UART_IRQHandlerC>
  /* USER CODE END UART5_IRQn 1 */
}
 8005e3a:	bf00      	nop
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20001d88 	.word	0x20001d88

08005e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return 1;
 8005e48:	2301      	movs	r3, #1
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <_kill>:

int _kill(int pid, int sig)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e5e:	f008 f8b3 	bl	800dfc8 <__errno>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2216      	movs	r2, #22
 8005e66:	601a      	str	r2, [r3, #0]
  return -1;
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_exit>:

void _exit (int status)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ffe7 	bl	8005e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <_exit+0x12>

08005e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e00a      	b.n	8005eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	60ba      	str	r2, [r7, #8]
 8005ea8:	b2ca      	uxtb	r2, r1
 8005eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	dbf0      	blt.n	8005e9c <_read+0x12>
  }

  return len;
 8005eba:	687b      	ldr	r3, [r7, #4]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e009      	b.n	8005eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	60ba      	str	r2, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	dbf1      	blt.n	8005ed6 <_write+0x12>
  }
  return len;
 8005ef2:	687b      	ldr	r3, [r7, #4]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_close>:

int _close(int file)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f24:	605a      	str	r2, [r3, #4]
  return 0;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <_isatty>:

int _isatty(int file)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f3c:	2301      	movs	r3, #1
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f6c:	4a14      	ldr	r2, [pc, #80]	@ (8005fc0 <_sbrk+0x5c>)
 8005f6e:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <_sbrk+0x60>)
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f78:	4b13      	ldr	r3, [pc, #76]	@ (8005fc8 <_sbrk+0x64>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f80:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <_sbrk+0x64>)
 8005f82:	4a12      	ldr	r2, [pc, #72]	@ (8005fcc <_sbrk+0x68>)
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f86:	4b10      	ldr	r3, [pc, #64]	@ (8005fc8 <_sbrk+0x64>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d207      	bcs.n	8005fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f94:	f008 f818 	bl	800dfc8 <__errno>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	220c      	movs	r2, #12
 8005f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	e009      	b.n	8005fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fa4:	4b08      	ldr	r3, [pc, #32]	@ (8005fc8 <_sbrk+0x64>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <_sbrk+0x64>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4a05      	ldr	r2, [pc, #20]	@ (8005fc8 <_sbrk+0x64>)
 8005fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20020000 	.word	0x20020000
 8005fc4:	00000400 	.word	0x00000400
 8005fc8:	20001d3c 	.word	0x20001d3c
 8005fcc:	2000ca68 	.word	0x2000ca68

08005fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fd4:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <SystemInit+0x20>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fda:	4a05      	ldr	r2, [pc, #20]	@ (8005ff0 <SystemInit+0x20>)
 8005fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005ff8:	4b11      	ldr	r3, [pc, #68]	@ (8006040 <MX_UART4_Init+0x4c>)
 8005ffa:	4a12      	ldr	r2, [pc, #72]	@ (8006044 <MX_UART4_Init+0x50>)
 8005ffc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005ffe:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <MX_UART4_Init+0x4c>)
 8006000:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006004:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006006:	4b0e      	ldr	r3, [pc, #56]	@ (8006040 <MX_UART4_Init+0x4c>)
 8006008:	2200      	movs	r2, #0
 800600a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <MX_UART4_Init+0x4c>)
 800600e:	2200      	movs	r2, #0
 8006010:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006012:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <MX_UART4_Init+0x4c>)
 8006014:	2200      	movs	r2, #0
 8006016:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006018:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <MX_UART4_Init+0x4c>)
 800601a:	220c      	movs	r2, #12
 800601c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800601e:	4b08      	ldr	r3, [pc, #32]	@ (8006040 <MX_UART4_Init+0x4c>)
 8006020:	2200      	movs	r2, #0
 8006022:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006024:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <MX_UART4_Init+0x4c>)
 8006026:	2200      	movs	r2, #0
 8006028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800602a:	4805      	ldr	r0, [pc, #20]	@ (8006040 <MX_UART4_Init+0x4c>)
 800602c:	f003 fe14 	bl	8009c58 <HAL_UART_Init>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8006036:	f7ff fdc3 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800603a:	bf00      	nop
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20001d40 	.word	0x20001d40
 8006044:	40004c00 	.word	0x40004c00

08006048 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800604c:	4b11      	ldr	r3, [pc, #68]	@ (8006094 <MX_UART5_Init+0x4c>)
 800604e:	4a12      	ldr	r2, [pc, #72]	@ (8006098 <MX_UART5_Init+0x50>)
 8006050:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006052:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <MX_UART5_Init+0x4c>)
 8006054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006058:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800605a:	4b0e      	ldr	r3, [pc, #56]	@ (8006094 <MX_UART5_Init+0x4c>)
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <MX_UART5_Init+0x4c>)
 8006062:	2200      	movs	r2, #0
 8006064:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006066:	4b0b      	ldr	r3, [pc, #44]	@ (8006094 <MX_UART5_Init+0x4c>)
 8006068:	2200      	movs	r2, #0
 800606a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800606c:	4b09      	ldr	r3, [pc, #36]	@ (8006094 <MX_UART5_Init+0x4c>)
 800606e:	220c      	movs	r2, #12
 8006070:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006072:	4b08      	ldr	r3, [pc, #32]	@ (8006094 <MX_UART5_Init+0x4c>)
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006078:	4b06      	ldr	r3, [pc, #24]	@ (8006094 <MX_UART5_Init+0x4c>)
 800607a:	2200      	movs	r2, #0
 800607c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800607e:	4805      	ldr	r0, [pc, #20]	@ (8006094 <MX_UART5_Init+0x4c>)
 8006080:	f003 fdea 	bl	8009c58 <HAL_UART_Init>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800608a:	f7ff fd99 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20001d88 	.word	0x20001d88
 8006098:	40005000 	.word	0x40005000

0800609c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060a0:	4b11      	ldr	r3, [pc, #68]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060a2:	4a12      	ldr	r2, [pc, #72]	@ (80060ec <MX_USART1_UART_Init+0x50>)
 80060a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80060a6:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80060ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060ae:	4b0e      	ldr	r3, [pc, #56]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060bc:	2200      	movs	r2, #0
 80060be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060c0:	4b09      	ldr	r3, [pc, #36]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060c2:	220c      	movs	r2, #12
 80060c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060c6:	4b08      	ldr	r3, [pc, #32]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060cc:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060d2:	4805      	ldr	r0, [pc, #20]	@ (80060e8 <MX_USART1_UART_Init+0x4c>)
 80060d4:	f003 fdc0 	bl	8009c58 <HAL_UART_Init>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80060de:	f7ff fd6f 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20001dd0 	.word	0x20001dd0
 80060ec:	40011000 	.word	0x40011000

080060f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060f4:	4b11      	ldr	r3, [pc, #68]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 80060f6:	4a12      	ldr	r2, [pc, #72]	@ (8006140 <MX_USART2_UART_Init+0x50>)
 80060f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80060fa:	4b10      	ldr	r3, [pc, #64]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 80060fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006102:	4b0e      	ldr	r3, [pc, #56]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 8006104:	2200      	movs	r2, #0
 8006106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006108:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 800610a:	2200      	movs	r2, #0
 800610c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800610e:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 8006110:	2200      	movs	r2, #0
 8006112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006114:	4b09      	ldr	r3, [pc, #36]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 8006116:	220c      	movs	r2, #12
 8006118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800611a:	4b08      	ldr	r3, [pc, #32]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 800611c:	2200      	movs	r2, #0
 800611e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006120:	4b06      	ldr	r3, [pc, #24]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 8006122:	2200      	movs	r2, #0
 8006124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006126:	4805      	ldr	r0, [pc, #20]	@ (800613c <MX_USART2_UART_Init+0x4c>)
 8006128:	f003 fd96 	bl	8009c58 <HAL_UART_Init>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006132:	f7ff fd45 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20001e18 	.word	0x20001e18
 8006140:	40004400 	.word	0x40004400

08006144 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006148:	4b11      	ldr	r3, [pc, #68]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <MX_USART3_UART_Init+0x50>)
 800614c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2400;
 800614e:	4b10      	ldr	r3, [pc, #64]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 8006150:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8006154:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006156:	4b0e      	ldr	r3, [pc, #56]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 8006158:	2200      	movs	r2, #0
 800615a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 800615e:	2200      	movs	r2, #0
 8006160:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006162:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 8006164:	2200      	movs	r2, #0
 8006166:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 800616a:	220c      	movs	r2, #12
 800616c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800616e:	4b08      	ldr	r3, [pc, #32]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 8006170:	2200      	movs	r2, #0
 8006172:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006174:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 8006176:	2200      	movs	r2, #0
 8006178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800617a:	4805      	ldr	r0, [pc, #20]	@ (8006190 <MX_USART3_UART_Init+0x4c>)
 800617c:	f003 fd6c 	bl	8009c58 <HAL_UART_Init>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006186:	f7ff fd1b 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800618a:	bf00      	nop
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20001e60 	.word	0x20001e60
 8006194:	40004800 	.word	0x40004800

08006198 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800619c:	4b11      	ldr	r3, [pc, #68]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 800619e:	4a12      	ldr	r2, [pc, #72]	@ (80061e8 <MX_USART6_UART_Init+0x50>)
 80061a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80061a2:	4b10      	ldr	r3, [pc, #64]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80061a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80061aa:	4b0e      	ldr	r3, [pc, #56]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80061bc:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061be:	220c      	movs	r2, #12
 80061c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061c2:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80061ce:	4805      	ldr	r0, [pc, #20]	@ (80061e4 <MX_USART6_UART_Init+0x4c>)
 80061d0:	f003 fd42 	bl	8009c58 <HAL_UART_Init>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80061da:	f7ff fcf1 	bl	8005bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20001ea8 	.word	0x20001ea8
 80061e8:	40011400 	.word	0x40011400

080061ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b094      	sub	sp, #80	@ 0x50
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a98      	ldr	r2, [pc, #608]	@ (800646c <HAL_UART_MspInit+0x280>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d12d      	bne.n	800626a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006212:	4b97      	ldr	r3, [pc, #604]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	4a96      	ldr	r2, [pc, #600]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006218:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800621c:	6413      	str	r3, [r2, #64]	@ 0x40
 800621e:	4b94      	ldr	r3, [pc, #592]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006226:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
 800622e:	4b90      	ldr	r3, [pc, #576]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006232:	4a8f      	ldr	r2, [pc, #572]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006234:	f043 0304 	orr.w	r3, r3, #4
 8006238:	6313      	str	r3, [r2, #48]	@ 0x30
 800623a:	4b8d      	ldr	r3, [pc, #564]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
 8006244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 8006246:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624c:	2302      	movs	r3, #2
 800624e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006250:	2300      	movs	r3, #0
 8006252:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006254:	2303      	movs	r3, #3
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006258:	2308      	movs	r3, #8
 800625a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800625c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006260:	4619      	mov	r1, r3
 8006262:	4884      	ldr	r0, [pc, #528]	@ (8006474 <HAL_UART_MspInit+0x288>)
 8006264:	f000 fee6 	bl	8007034 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006268:	e145      	b.n	80064f6 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==UART5)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a82      	ldr	r2, [pc, #520]	@ (8006478 <HAL_UART_MspInit+0x28c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d153      	bne.n	800631c <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006274:	2300      	movs	r3, #0
 8006276:	633b      	str	r3, [r7, #48]	@ 0x30
 8006278:	4b7d      	ldr	r3, [pc, #500]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	4a7c      	ldr	r2, [pc, #496]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800627e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006282:	6413      	str	r3, [r2, #64]	@ 0x40
 8006284:	4b7a      	ldr	r3, [pc, #488]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800628c:	633b      	str	r3, [r7, #48]	@ 0x30
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006290:	2300      	movs	r3, #0
 8006292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006294:	4b76      	ldr	r3, [pc, #472]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	4a75      	ldr	r2, [pc, #468]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800629a:	f043 0304 	orr.w	r3, r3, #4
 800629e:	6313      	str	r3, [r2, #48]	@ 0x30
 80062a0:	4b73      	ldr	r3, [pc, #460]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062ac:	2300      	movs	r3, #0
 80062ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80062b6:	f043 0308 	orr.w	r3, r3, #8
 80062ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80062bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = HMI_UART5_TX_Pin;
 80062c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ce:	2302      	movs	r3, #2
 80062d0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d6:	2303      	movs	r3, #3
 80062d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80062da:	2308      	movs	r3, #8
 80062dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(HMI_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80062de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80062e2:	4619      	mov	r1, r3
 80062e4:	4863      	ldr	r0, [pc, #396]	@ (8006474 <HAL_UART_MspInit+0x288>)
 80062e6:	f000 fea5 	bl	8007034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HMI_UART5_RX_Pin;
 80062ea:	2304      	movs	r3, #4
 80062ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ee:	2302      	movs	r3, #2
 80062f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f6:	2303      	movs	r3, #3
 80062f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80062fa:	2308      	movs	r3, #8
 80062fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(HMI_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80062fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006302:	4619      	mov	r1, r3
 8006304:	485d      	ldr	r0, [pc, #372]	@ (800647c <HAL_UART_MspInit+0x290>)
 8006306:	f000 fe95 	bl	8007034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800630a:	2200      	movs	r2, #0
 800630c:	2105      	movs	r1, #5
 800630e:	2035      	movs	r0, #53	@ 0x35
 8006310:	f000 fe44 	bl	8006f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006314:	2035      	movs	r0, #53	@ 0x35
 8006316:	f000 fe5d 	bl	8006fd4 <HAL_NVIC_EnableIRQ>
}
 800631a:	e0ec      	b.n	80064f6 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a57      	ldr	r2, [pc, #348]	@ (8006480 <HAL_UART_MspInit+0x294>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d12d      	bne.n	8006382 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
 800632a:	4b51      	ldr	r3, [pc, #324]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	4a50      	ldr	r2, [pc, #320]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006330:	f043 0310 	orr.w	r3, r3, #16
 8006334:	6453      	str	r3, [r2, #68]	@ 0x44
 8006336:	4b4e      	ldr	r3, [pc, #312]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	4b4a      	ldr	r3, [pc, #296]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634a:	4a49      	ldr	r2, [pc, #292]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	6313      	str	r3, [r2, #48]	@ 0x30
 8006352:	4b47      	ldr	r3, [pc, #284]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 800635e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006364:	2302      	movs	r3, #2
 8006366:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006368:	2300      	movs	r3, #0
 800636a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800636c:	2303      	movs	r3, #3
 800636e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006370:	2307      	movs	r3, #7
 8006372:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006374:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006378:	4619      	mov	r1, r3
 800637a:	4842      	ldr	r0, [pc, #264]	@ (8006484 <HAL_UART_MspInit+0x298>)
 800637c:	f000 fe5a 	bl	8007034 <HAL_GPIO_Init>
}
 8006380:	e0b9      	b.n	80064f6 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a40      	ldr	r2, [pc, #256]	@ (8006488 <HAL_UART_MspInit+0x29c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d134      	bne.n	80063f6 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800638c:	2300      	movs	r3, #0
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	4b37      	ldr	r3, [pc, #220]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006394:	4a36      	ldr	r2, [pc, #216]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639a:	6413      	str	r3, [r2, #64]	@ 0x40
 800639c:	4b34      	ldr	r3, [pc, #208]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	4b30      	ldr	r3, [pc, #192]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80063b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006470 <HAL_UART_MspInit+0x284>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 80063c4:	230c      	movs	r3, #12
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c8:	2302      	movs	r3, #2
 80063ca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063d0:	2303      	movs	r3, #3
 80063d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063d4:	2307      	movs	r3, #7
 80063d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80063dc:	4619      	mov	r1, r3
 80063de:	4829      	ldr	r0, [pc, #164]	@ (8006484 <HAL_UART_MspInit+0x298>)
 80063e0:	f000 fe28 	bl	8007034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80063e4:	2200      	movs	r2, #0
 80063e6:	2105      	movs	r1, #5
 80063e8:	2026      	movs	r0, #38	@ 0x26
 80063ea:	f000 fdd7 	bl	8006f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063ee:	2026      	movs	r0, #38	@ 0x26
 80063f0:	f000 fdf0 	bl	8006fd4 <HAL_NVIC_EnableIRQ>
}
 80063f4:	e07f      	b.n	80064f6 <HAL_UART_MspInit+0x30a>
  else if(uartHandle->Instance==USART3)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a24      	ldr	r2, [pc, #144]	@ (800648c <HAL_UART_MspInit+0x2a0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d149      	bne.n	8006494 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	4b1a      	ldr	r3, [pc, #104]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	4a19      	ldr	r2, [pc, #100]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800640a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800640e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006410:	4b17      	ldr	r3, [pc, #92]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	4a12      	ldr	r2, [pc, #72]	@ (8006470 <HAL_UART_MspInit+0x284>)
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	6313      	str	r3, [r2, #48]	@ 0x30
 800642c:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <HAL_UART_MspInit+0x284>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INVERTER_USART3_TX_Pin|INVERTER_USART3_RX_Pin;
 8006438:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643e:	2302      	movs	r3, #2
 8006440:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006442:	2300      	movs	r3, #0
 8006444:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006446:	2303      	movs	r3, #3
 8006448:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800644a:	2307      	movs	r3, #7
 800644c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800644e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006452:	4619      	mov	r1, r3
 8006454:	480e      	ldr	r0, [pc, #56]	@ (8006490 <HAL_UART_MspInit+0x2a4>)
 8006456:	f000 fded 	bl	8007034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800645a:	2200      	movs	r2, #0
 800645c:	2105      	movs	r1, #5
 800645e:	2027      	movs	r0, #39	@ 0x27
 8006460:	f000 fd9c 	bl	8006f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006464:	2027      	movs	r0, #39	@ 0x27
 8006466:	f000 fdb5 	bl	8006fd4 <HAL_NVIC_EnableIRQ>
}
 800646a:	e044      	b.n	80064f6 <HAL_UART_MspInit+0x30a>
 800646c:	40004c00 	.word	0x40004c00
 8006470:	40023800 	.word	0x40023800
 8006474:	40020800 	.word	0x40020800
 8006478:	40005000 	.word	0x40005000
 800647c:	40020c00 	.word	0x40020c00
 8006480:	40011000 	.word	0x40011000
 8006484:	40020000 	.word	0x40020000
 8006488:	40004400 	.word	0x40004400
 800648c:	40004800 	.word	0x40004800
 8006490:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a19      	ldr	r2, [pc, #100]	@ (8006500 <HAL_UART_MspInit+0x314>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d12b      	bne.n	80064f6 <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	4b18      	ldr	r3, [pc, #96]	@ (8006504 <HAL_UART_MspInit+0x318>)
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <HAL_UART_MspInit+0x318>)
 80064a8:	f043 0320 	orr.w	r3, r3, #32
 80064ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ae:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <HAL_UART_MspInit+0x318>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <HAL_UART_MspInit+0x318>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c2:	4a10      	ldr	r2, [pc, #64]	@ (8006504 <HAL_UART_MspInit+0x318>)
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80064ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006504 <HAL_UART_MspInit+0x318>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	60bb      	str	r3, [r7, #8]
 80064d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 80064d6:	23c0      	movs	r3, #192	@ 0xc0
 80064d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064da:	2302      	movs	r3, #2
 80064dc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e2:	2303      	movs	r3, #3
 80064e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80064e6:	2308      	movs	r3, #8
 80064e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80064ee:	4619      	mov	r1, r3
 80064f0:	4805      	ldr	r0, [pc, #20]	@ (8006508 <HAL_UART_MspInit+0x31c>)
 80064f2:	f000 fd9f 	bl	8007034 <HAL_GPIO_Init>
}
 80064f6:	bf00      	nop
 80064f8:	3750      	adds	r7, #80	@ 0x50
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40011400 	.word	0x40011400
 8006504:	40023800 	.word	0x40023800
 8006508:	40020800 	.word	0x40020800

0800650c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800650c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006544 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006510:	f7ff fd5e 	bl	8005fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006514:	480c      	ldr	r0, [pc, #48]	@ (8006548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006516:	490d      	ldr	r1, [pc, #52]	@ (800654c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006518:	4a0d      	ldr	r2, [pc, #52]	@ (8006550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800651a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800651c:	e002      	b.n	8006524 <LoopCopyDataInit>

0800651e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800651e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006522:	3304      	adds	r3, #4

08006524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006528:	d3f9      	bcc.n	800651e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800652a:	4a0a      	ldr	r2, [pc, #40]	@ (8006554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800652c:	4c0a      	ldr	r4, [pc, #40]	@ (8006558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800652e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006530:	e001      	b.n	8006536 <LoopFillZerobss>

08006532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006534:	3204      	adds	r2, #4

08006536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006538:	d3fb      	bcc.n	8006532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800653a:	f007 fd4b 	bl	800dfd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800653e:	f7ff faa3 	bl	8005a88 <main>
  bx  lr    
 8006542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800654c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006550:	08010e14 	.word	0x08010e14
  ldr r2, =_sbss
 8006554:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006558:	2000ca64 	.word	0x2000ca64

0800655c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800655c:	e7fe      	b.n	800655c <ADC_IRQHandler>
	...

08006560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006564:	4b0e      	ldr	r3, [pc, #56]	@ (80065a0 <HAL_Init+0x40>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0d      	ldr	r2, [pc, #52]	@ (80065a0 <HAL_Init+0x40>)
 800656a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800656e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <HAL_Init+0x40>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a0a      	ldr	r2, [pc, #40]	@ (80065a0 <HAL_Init+0x40>)
 8006576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800657a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800657c:	4b08      	ldr	r3, [pc, #32]	@ (80065a0 <HAL_Init+0x40>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a07      	ldr	r2, [pc, #28]	@ (80065a0 <HAL_Init+0x40>)
 8006582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006588:	2003      	movs	r0, #3
 800658a:	f000 fcfc 	bl	8006f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800658e:	200f      	movs	r0, #15
 8006590:	f7ff fb98 	bl	8005cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006594:	f7ff fb6a 	bl	8005c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40023c00 	.word	0x40023c00

080065a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065a8:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <HAL_IncTick+0x20>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <HAL_IncTick+0x24>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4413      	add	r3, r2
 80065b4:	4a04      	ldr	r2, [pc, #16]	@ (80065c8 <HAL_IncTick+0x24>)
 80065b6:	6013      	str	r3, [r2, #0]
}
 80065b8:	bf00      	nop
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000050 	.word	0x20000050
 80065c8:	20001ef0 	.word	0x20001ef0

080065cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return uwTick;
 80065d0:	4b03      	ldr	r3, [pc, #12]	@ (80065e0 <HAL_GetTick+0x14>)
 80065d2:	681b      	ldr	r3, [r3, #0]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20001ef0 	.word	0x20001ef0

080065e4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80065e8:	4b03      	ldr	r3, [pc, #12]	@ (80065f8 <HAL_GetUIDw0+0x14>)
 80065ea:	681b      	ldr	r3, [r3, #0]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	1fff7a10 	.word	0x1fff7a10

080065fc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006600:	4b03      	ldr	r3, [pc, #12]	@ (8006610 <HAL_GetUIDw1+0x14>)
 8006602:	681b      	ldr	r3, [r3, #0]
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	1fff7a14 	.word	0x1fff7a14

08006614 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006618:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <HAL_GetUIDw2+0x14>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	1fff7a18 	.word	0x1fff7a18

0800662c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e033      	b.n	80066aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff f8c6 	bl	80057dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	d118      	bne.n	800669c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006672:	f023 0302 	bic.w	r3, r3, #2
 8006676:	f043 0202 	orr.w	r2, r3, #2
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fad8 	bl	8006c34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	641a      	str	r2, [r3, #64]	@ 0x40
 800669a:	e001      	b.n	80066a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_ADC_Start+0x1a>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e0b2      	b.n	8006834 <HAL_ADC_Start+0x180>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d018      	beq.n	8006716 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80066f4:	4b52      	ldr	r3, [pc, #328]	@ (8006840 <HAL_ADC_Start+0x18c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a52      	ldr	r2, [pc, #328]	@ (8006844 <HAL_ADC_Start+0x190>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	0c9a      	lsrs	r2, r3, #18
 8006700:	4613      	mov	r3, r2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006708:	e002      	b.n	8006710 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3b01      	subs	r3, #1
 800670e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f9      	bne.n	800670a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b01      	cmp	r3, #1
 8006722:	d17a      	bne.n	800681a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800674e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006762:	d106      	bne.n	8006772 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006768:	f023 0206 	bic.w	r2, r3, #6
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006770:	e002      	b.n	8006778 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006780:	4b31      	ldr	r3, [pc, #196]	@ (8006848 <HAL_ADC_Start+0x194>)
 8006782:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800678c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	2b00      	cmp	r3, #0
 8006798:	d12a      	bne.n	80067f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2b      	ldr	r2, [pc, #172]	@ (800684c <HAL_ADC_Start+0x198>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d015      	beq.n	80067d0 <HAL_ADC_Start+0x11c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a29      	ldr	r2, [pc, #164]	@ (8006850 <HAL_ADC_Start+0x19c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d105      	bne.n	80067ba <HAL_ADC_Start+0x106>
 80067ae:	4b26      	ldr	r3, [pc, #152]	@ (8006848 <HAL_ADC_Start+0x194>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a25      	ldr	r2, [pc, #148]	@ (8006854 <HAL_ADC_Start+0x1a0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d136      	bne.n	8006832 <HAL_ADC_Start+0x17e>
 80067c4:	4b20      	ldr	r3, [pc, #128]	@ (8006848 <HAL_ADC_Start+0x194>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d130      	bne.n	8006832 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d129      	bne.n	8006832 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067ec:	609a      	str	r2, [r3, #8]
 80067ee:	e020      	b.n	8006832 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a15      	ldr	r2, [pc, #84]	@ (800684c <HAL_ADC_Start+0x198>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d11b      	bne.n	8006832 <HAL_ADC_Start+0x17e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d114      	bne.n	8006832 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	e00b      	b.n	8006832 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	f043 0210 	orr.w	r2, r3, #16
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682a:	f043 0201 	orr.w	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000048 	.word	0x20000048
 8006844:	431bde83 	.word	0x431bde83
 8006848:	40012300 	.word	0x40012300
 800684c:	40012000 	.word	0x40012000
 8006850:	40012100 	.word	0x40012100
 8006854:	40012200 	.word	0x40012200

08006858 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_ADC_Stop+0x16>
 800686a:	2302      	movs	r3, #2
 800686c:	e021      	b.n	80068b2 <HAL_ADC_Stop+0x5a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	f043 0201 	orr.w	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068da:	d113      	bne.n	8006904 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80068e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ea:	d10b      	bne.n	8006904 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e063      	b.n	80069cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006904:	f7ff fe62 	bl	80065cc <HAL_GetTick>
 8006908:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800690a:	e021      	b.n	8006950 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d01d      	beq.n	8006950 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <HAL_ADC_PollForConversion+0x6c>
 800691a:	f7ff fe57 	bl	80065cc <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d212      	bcs.n	8006950 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d00b      	beq.n	8006950 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	f043 0204 	orr.w	r2, r3, #4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e03d      	b.n	80069cc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d1d6      	bne.n	800690c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f06f 0212 	mvn.w	r2, #18
 8006966:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d123      	bne.n	80069ca <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006986:	2b00      	cmp	r3, #0
 8006988:	d11f      	bne.n	80069ca <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d111      	bne.n	80069ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_ADC_ConfigChannel+0x1c>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e105      	b.n	8006c18 <HAL_ADC_ConfigChannel+0x228>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d925      	bls.n	8006a68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68d9      	ldr	r1, [r3, #12]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	3b1e      	subs	r3, #30
 8006a32:	2207      	movs	r2, #7
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	43da      	mvns	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	400a      	ands	r2, r1
 8006a40:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68d9      	ldr	r1, [r3, #12]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	4618      	mov	r0, r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4403      	add	r3, r0
 8006a5a:	3b1e      	subs	r3, #30
 8006a5c:	409a      	lsls	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	e022      	b.n	8006aae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6919      	ldr	r1, [r3, #16]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	4613      	mov	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	2207      	movs	r2, #7
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43da      	mvns	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	400a      	ands	r2, r1
 8006a8a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6919      	ldr	r1, [r3, #16]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4403      	add	r3, r0
 8006aa4:	409a      	lsls	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d824      	bhi.n	8006b00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3b05      	subs	r3, #5
 8006ac8:	221f      	movs	r2, #31
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43da      	mvns	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	3b05      	subs	r3, #5
 8006af2:	fa00 f203 	lsl.w	r2, r0, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006afe:	e04c      	b.n	8006b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	d824      	bhi.n	8006b52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	3b23      	subs	r3, #35	@ 0x23
 8006b1a:	221f      	movs	r2, #31
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	43da      	mvns	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	400a      	ands	r2, r1
 8006b28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4618      	mov	r0, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	3b23      	subs	r3, #35	@ 0x23
 8006b44:	fa00 f203 	lsl.w	r2, r0, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b50:	e023      	b.n	8006b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	3b41      	subs	r3, #65	@ 0x41
 8006b64:	221f      	movs	r2, #31
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	43da      	mvns	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	400a      	ands	r2, r1
 8006b72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4618      	mov	r0, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3b41      	subs	r3, #65	@ 0x41
 8006b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b9a:	4b22      	ldr	r3, [pc, #136]	@ (8006c24 <HAL_ADC_ConfigChannel+0x234>)
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <HAL_ADC_ConfigChannel+0x238>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d109      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x1cc>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b12      	cmp	r3, #18
 8006bae:	d105      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	@ (8006c28 <HAL_ADC_ConfigChannel+0x238>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d123      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x21e>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d003      	beq.n	8006bd6 <HAL_ADC_ConfigChannel+0x1e6>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b11      	cmp	r3, #17
 8006bd4:	d11b      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d111      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006bea:	4b10      	ldr	r3, [pc, #64]	@ (8006c2c <HAL_ADC_ConfigChannel+0x23c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a10      	ldr	r2, [pc, #64]	@ (8006c30 <HAL_ADC_ConfigChannel+0x240>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	0c9a      	lsrs	r2, r3, #18
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c00:	e002      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f9      	bne.n	8006c02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40012300 	.word	0x40012300
 8006c28:	40012000 	.word	0x40012000
 8006c2c:	20000048 	.word	0x20000048
 8006c30:	431bde83 	.word	0x431bde83

08006c34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c3c:	4b79      	ldr	r3, [pc, #484]	@ (8006e24 <ADC_Init+0x1f0>)
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	431a      	orrs	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6859      	ldr	r1, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	021a      	lsls	r2, r3, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6899      	ldr	r1, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	4a58      	ldr	r2, [pc, #352]	@ (8006e28 <ADC_Init+0x1f4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d022      	beq.n	8006d12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006cda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6899      	ldr	r1, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6899      	ldr	r1, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	609a      	str	r2, [r3, #8]
 8006d10:	e00f      	b.n	8006d32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0202 	bic.w	r2, r2, #2
 8006d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7e1b      	ldrb	r3, [r3, #24]
 8006d4c:	005a      	lsls	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01b      	beq.n	8006d98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006d7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6859      	ldr	r1, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	035a      	lsls	r2, r3, #13
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	e007      	b.n	8006da8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	051a      	lsls	r2, r3, #20
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6899      	ldr	r1, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006dea:	025a      	lsls	r2, r3, #9
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6899      	ldr	r1, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	029a      	lsls	r2, r3, #10
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	40012300 	.word	0x40012300
 8006e28:	0f000001 	.word	0x0f000001

08006e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <__NVIC_SetPriorityGrouping+0x44>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e5e:	4a04      	ldr	r2, [pc, #16]	@ (8006e70 <__NVIC_SetPriorityGrouping+0x44>)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	60d3      	str	r3, [r2, #12]
}
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	e000ed00 	.word	0xe000ed00

08006e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <__NVIC_GetPriorityGrouping+0x18>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	f003 0307 	and.w	r3, r3, #7
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	db0b      	blt.n	8006eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	f003 021f 	and.w	r2, r3, #31
 8006ea8:	4907      	ldr	r1, [pc, #28]	@ (8006ec8 <__NVIC_EnableIRQ+0x38>)
 8006eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8006eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	e000e100 	.word	0xe000e100

08006ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	db0a      	blt.n	8006ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	490c      	ldr	r1, [pc, #48]	@ (8006f18 <__NVIC_SetPriority+0x4c>)
 8006ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eea:	0112      	lsls	r2, r2, #4
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	440b      	add	r3, r1
 8006ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ef4:	e00a      	b.n	8006f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	4908      	ldr	r1, [pc, #32]	@ (8006f1c <__NVIC_SetPriority+0x50>)
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	3b04      	subs	r3, #4
 8006f04:	0112      	lsls	r2, r2, #4
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	440b      	add	r3, r1
 8006f0a:	761a      	strb	r2, [r3, #24]
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	e000e100 	.word	0xe000e100
 8006f1c:	e000ed00 	.word	0xe000ed00

08006f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	@ 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f1c3 0307 	rsb	r3, r3, #7
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	bf28      	it	cs
 8006f3e:	2304      	movcs	r3, #4
 8006f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3304      	adds	r3, #4
 8006f46:	2b06      	cmp	r3, #6
 8006f48:	d902      	bls.n	8006f50 <NVIC_EncodePriority+0x30>
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3b03      	subs	r3, #3
 8006f4e:	e000      	b.n	8006f52 <NVIC_EncodePriority+0x32>
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	43da      	mvns	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	401a      	ands	r2, r3
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f68:	f04f 31ff 	mov.w	r1, #4294967295
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f72:	43d9      	mvns	r1, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f78:	4313      	orrs	r3, r2
         );
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3724      	adds	r7, #36	@ 0x24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff4c 	bl	8006e2c <__NVIC_SetPriorityGrouping>
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fae:	f7ff ff61 	bl	8006e74 <__NVIC_GetPriorityGrouping>
 8006fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	6978      	ldr	r0, [r7, #20]
 8006fba:	f7ff ffb1 	bl	8006f20 <NVIC_EncodePriority>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff80 	bl	8006ecc <__NVIC_SetPriority>
}
 8006fcc:	bf00      	nop
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff54 	bl	8006e90 <__NVIC_EnableIRQ>
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d004      	beq.n	800700e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2280      	movs	r2, #128	@ 0x80
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e00c      	b.n	8007028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2205      	movs	r2, #5
 8007012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	@ 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e16b      	b.n	8007328 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007050:	2201      	movs	r2, #1
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4013      	ands	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	429a      	cmp	r2, r3
 800706a:	f040 815a 	bne.w	8007322 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b01      	cmp	r3, #1
 8007078:	d005      	beq.n	8007086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007082:	2b02      	cmp	r3, #2
 8007084:	d130      	bne.n	80070e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	2203      	movs	r2, #3
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070bc:	2201      	movs	r2, #1
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 0201 	and.w	r2, r3, #1
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	4313      	orrs	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d017      	beq.n	8007124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	2203      	movs	r2, #3
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	4313      	orrs	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d123      	bne.n	8007178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	08da      	lsrs	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3208      	adds	r2, #8
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	220f      	movs	r2, #15
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4313      	orrs	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	08da      	lsrs	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3208      	adds	r2, #8
 8007172:	69b9      	ldr	r1, [r7, #24]
 8007174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	2203      	movs	r2, #3
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	4013      	ands	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 0203 	and.w	r2, r3, #3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80b4 	beq.w	8007322 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	4b60      	ldr	r3, [pc, #384]	@ (8007340 <HAL_GPIO_Init+0x30c>)
 80071c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c2:	4a5f      	ldr	r2, [pc, #380]	@ (8007340 <HAL_GPIO_Init+0x30c>)
 80071c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80071ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007340 <HAL_GPIO_Init+0x30c>)
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007344 <HAL_GPIO_Init+0x310>)
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	3302      	adds	r3, #2
 80071de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	220f      	movs	r2, #15
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43db      	mvns	r3, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4013      	ands	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a52      	ldr	r2, [pc, #328]	@ (8007348 <HAL_GPIO_Init+0x314>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02b      	beq.n	800725a <HAL_GPIO_Init+0x226>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a51      	ldr	r2, [pc, #324]	@ (800734c <HAL_GPIO_Init+0x318>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d025      	beq.n	8007256 <HAL_GPIO_Init+0x222>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a50      	ldr	r2, [pc, #320]	@ (8007350 <HAL_GPIO_Init+0x31c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01f      	beq.n	8007252 <HAL_GPIO_Init+0x21e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a4f      	ldr	r2, [pc, #316]	@ (8007354 <HAL_GPIO_Init+0x320>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d019      	beq.n	800724e <HAL_GPIO_Init+0x21a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a4e      	ldr	r2, [pc, #312]	@ (8007358 <HAL_GPIO_Init+0x324>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <HAL_GPIO_Init+0x216>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a4d      	ldr	r2, [pc, #308]	@ (800735c <HAL_GPIO_Init+0x328>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00d      	beq.n	8007246 <HAL_GPIO_Init+0x212>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a4c      	ldr	r2, [pc, #304]	@ (8007360 <HAL_GPIO_Init+0x32c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <HAL_GPIO_Init+0x20e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a4b      	ldr	r2, [pc, #300]	@ (8007364 <HAL_GPIO_Init+0x330>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <HAL_GPIO_Init+0x20a>
 800723a:	2307      	movs	r3, #7
 800723c:	e00e      	b.n	800725c <HAL_GPIO_Init+0x228>
 800723e:	2308      	movs	r3, #8
 8007240:	e00c      	b.n	800725c <HAL_GPIO_Init+0x228>
 8007242:	2306      	movs	r3, #6
 8007244:	e00a      	b.n	800725c <HAL_GPIO_Init+0x228>
 8007246:	2305      	movs	r3, #5
 8007248:	e008      	b.n	800725c <HAL_GPIO_Init+0x228>
 800724a:	2304      	movs	r3, #4
 800724c:	e006      	b.n	800725c <HAL_GPIO_Init+0x228>
 800724e:	2303      	movs	r3, #3
 8007250:	e004      	b.n	800725c <HAL_GPIO_Init+0x228>
 8007252:	2302      	movs	r3, #2
 8007254:	e002      	b.n	800725c <HAL_GPIO_Init+0x228>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <HAL_GPIO_Init+0x228>
 800725a:	2300      	movs	r3, #0
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	f002 0203 	and.w	r2, r2, #3
 8007262:	0092      	lsls	r2, r2, #2
 8007264:	4093      	lsls	r3, r2
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	4313      	orrs	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800726c:	4935      	ldr	r1, [pc, #212]	@ (8007344 <HAL_GPIO_Init+0x310>)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	089b      	lsrs	r3, r3, #2
 8007272:	3302      	adds	r3, #2
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800727a:	4b3b      	ldr	r3, [pc, #236]	@ (8007368 <HAL_GPIO_Init+0x334>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	43db      	mvns	r3, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	4013      	ands	r3, r2
 8007288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800729e:	4a32      	ldr	r2, [pc, #200]	@ (8007368 <HAL_GPIO_Init+0x334>)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072a4:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <HAL_GPIO_Init+0x334>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	43db      	mvns	r3, r3
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	4013      	ands	r3, r2
 80072b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072c8:	4a27      	ldr	r2, [pc, #156]	@ (8007368 <HAL_GPIO_Init+0x334>)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072ce:	4b26      	ldr	r3, [pc, #152]	@ (8007368 <HAL_GPIO_Init+0x334>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	4013      	ands	r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007368 <HAL_GPIO_Init+0x334>)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007368 <HAL_GPIO_Init+0x334>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	43db      	mvns	r3, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4013      	ands	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800731c:	4a12      	ldr	r2, [pc, #72]	@ (8007368 <HAL_GPIO_Init+0x334>)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	3301      	adds	r3, #1
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b0f      	cmp	r3, #15
 800732c:	f67f ae90 	bls.w	8007050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3724      	adds	r7, #36	@ 0x24
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40023800 	.word	0x40023800
 8007344:	40013800 	.word	0x40013800
 8007348:	40020000 	.word	0x40020000
 800734c:	40020400 	.word	0x40020400
 8007350:	40020800 	.word	0x40020800
 8007354:	40020c00 	.word	0x40020c00
 8007358:	40021000 	.word	0x40021000
 800735c:	40021400 	.word	0x40021400
 8007360:	40021800 	.word	0x40021800
 8007364:	40021c00 	.word	0x40021c00
 8007368:	40013c00 	.word	0x40013c00

0800736c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
 8007378:	4613      	mov	r3, r2
 800737a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800737c:	787b      	ldrb	r3, [r7, #1]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007382:	887a      	ldrh	r2, [r7, #2]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007388:	e003      	b.n	8007392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800738a:	887b      	ldrh	r3, [r7, #2]
 800738c:	041a      	lsls	r2, r3, #16
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	619a      	str	r2, [r3, #24]
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073b0:	887a      	ldrh	r2, [r7, #2]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4013      	ands	r3, r2
 80073b6:	041a      	lsls	r2, r3, #16
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	43d9      	mvns	r1, r3
 80073bc:	887b      	ldrh	r3, [r7, #2]
 80073be:	400b      	ands	r3, r1
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	619a      	str	r2, [r3, #24]
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e12b      	b.n	800763e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fe fafc 	bl	80059f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2224      	movs	r2, #36	@ 0x24
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007438:	f001 fd24 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 800743c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4a81      	ldr	r2, [pc, #516]	@ (8007648 <HAL_I2C_Init+0x274>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d807      	bhi.n	8007458 <HAL_I2C_Init+0x84>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a80      	ldr	r2, [pc, #512]	@ (800764c <HAL_I2C_Init+0x278>)
 800744c:	4293      	cmp	r3, r2
 800744e:	bf94      	ite	ls
 8007450:	2301      	movls	r3, #1
 8007452:	2300      	movhi	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	e006      	b.n	8007466 <HAL_I2C_Init+0x92>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a7d      	ldr	r2, [pc, #500]	@ (8007650 <HAL_I2C_Init+0x27c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	bf94      	ite	ls
 8007460:	2301      	movls	r3, #1
 8007462:	2300      	movhi	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e0e7      	b.n	800763e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a78      	ldr	r2, [pc, #480]	@ (8007654 <HAL_I2C_Init+0x280>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	0c9b      	lsrs	r3, r3, #18
 8007478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	4a6a      	ldr	r2, [pc, #424]	@ (8007648 <HAL_I2C_Init+0x274>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d802      	bhi.n	80074a8 <HAL_I2C_Init+0xd4>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3301      	adds	r3, #1
 80074a6:	e009      	b.n	80074bc <HAL_I2C_Init+0xe8>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	4a69      	ldr	r2, [pc, #420]	@ (8007658 <HAL_I2C_Init+0x284>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	099b      	lsrs	r3, r3, #6
 80074ba:	3301      	adds	r3, #1
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80074ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	495c      	ldr	r1, [pc, #368]	@ (8007648 <HAL_I2C_Init+0x274>)
 80074d8:	428b      	cmp	r3, r1
 80074da:	d819      	bhi.n	8007510 <HAL_I2C_Init+0x13c>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	1e59      	subs	r1, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80074ea:	1c59      	adds	r1, r3, #1
 80074ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80074f0:	400b      	ands	r3, r1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_I2C_Init+0x138>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	1e59      	subs	r1, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	fbb1 f3f3 	udiv	r3, r1, r3
 8007504:	3301      	adds	r3, #1
 8007506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750a:	e051      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 800750c:	2304      	movs	r3, #4
 800750e:	e04f      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d111      	bne.n	800753c <HAL_I2C_Init+0x168>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1e58      	subs	r0, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6859      	ldr	r1, [r3, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	440b      	add	r3, r1
 8007526:	fbb0 f3f3 	udiv	r3, r0, r3
 800752a:	3301      	adds	r3, #1
 800752c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007530:	2b00      	cmp	r3, #0
 8007532:	bf0c      	ite	eq
 8007534:	2301      	moveq	r3, #1
 8007536:	2300      	movne	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	e012      	b.n	8007562 <HAL_I2C_Init+0x18e>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1e58      	subs	r0, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6859      	ldr	r1, [r3, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	0099      	lsls	r1, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007552:	3301      	adds	r3, #1
 8007554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007558:	2b00      	cmp	r3, #0
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_I2C_Init+0x196>
 8007566:	2301      	movs	r3, #1
 8007568:	e022      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10e      	bne.n	8007590 <HAL_I2C_Init+0x1bc>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1e58      	subs	r0, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	460b      	mov	r3, r1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	440b      	add	r3, r1
 8007580:	fbb0 f3f3 	udiv	r3, r0, r3
 8007584:	3301      	adds	r3, #1
 8007586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800758a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800758e:	e00f      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	1e58      	subs	r0, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	0099      	lsls	r1, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075a6:	3301      	adds	r3, #1
 80075a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	6809      	ldr	r1, [r1, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69da      	ldr	r2, [r3, #28]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80075de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6911      	ldr	r1, [r2, #16]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68d2      	ldr	r2, [r2, #12]
 80075ea:	4311      	orrs	r1, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	000186a0 	.word	0x000186a0
 800764c:	001e847f 	.word	0x001e847f
 8007650:	003d08ff 	.word	0x003d08ff
 8007654:	431bde83 	.word	0x431bde83
 8007658:	10624dd3 	.word	0x10624dd3

0800765c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	461a      	mov	r2, r3
 8007668:	460b      	mov	r3, r1
 800766a:	817b      	strh	r3, [r7, #10]
 800766c:	4613      	mov	r3, r2
 800766e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007670:	f7fe ffac 	bl	80065cc <HAL_GetTick>
 8007674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b20      	cmp	r3, #32
 8007680:	f040 80e0 	bne.w	8007844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2319      	movs	r3, #25
 800768a:	2201      	movs	r2, #1
 800768c:	4970      	ldr	r1, [pc, #448]	@ (8007850 <HAL_I2C_Master_Transmit+0x1f4>)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fd92 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
 800769c:	e0d3      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_I2C_Master_Transmit+0x50>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0cc      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d007      	beq.n	80076d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2221      	movs	r2, #33	@ 0x21
 80076e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2210      	movs	r2, #16
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	893a      	ldrh	r2, [r7, #8]
 8007702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a50      	ldr	r2, [pc, #320]	@ (8007854 <HAL_I2C_Master_Transmit+0x1f8>)
 8007712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007714:	8979      	ldrh	r1, [r7, #10]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a3a      	ldr	r2, [r7, #32]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fbfc 	bl	8007f18 <I2C_MasterRequestWrite>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e08d      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772a:	2300      	movs	r3, #0
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007740:	e066      	b.n	8007810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	6a39      	ldr	r1, [r7, #32]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fe50 	bl	80083ec <I2C_WaitOnTXEFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	2b04      	cmp	r3, #4
 8007758:	d107      	bne.n	800776a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e06b      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d11b      	bne.n	80077e4 <HAL_I2C_Master_Transmit+0x188>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d017      	beq.n	80077e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	6a39      	ldr	r1, [r7, #32]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fe47 	bl	800847c <I2C_WaitOnBTFFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d107      	bne.n	800780c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800780a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e01a      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d194      	bne.n	8007742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	e000      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007844:	2302      	movs	r3, #2
  }
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	00100002 	.word	0x00100002
 8007854:	ffff0000 	.word	0xffff0000

08007858 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	@ 0x30
 800785c:	af02      	add	r7, sp, #8
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	461a      	mov	r2, r3
 8007864:	460b      	mov	r3, r1
 8007866:	817b      	strh	r3, [r7, #10]
 8007868:	4613      	mov	r3, r2
 800786a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800786c:	f7fe feae 	bl	80065cc <HAL_GetTick>
 8007870:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b20      	cmp	r3, #32
 800787c:	f040 8217 	bne.w	8007cae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2319      	movs	r3, #25
 8007886:	2201      	movs	r2, #1
 8007888:	497c      	ldr	r1, [pc, #496]	@ (8007a7c <HAL_I2C_Master_Receive+0x224>)
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fc94 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
 8007898:	e20a      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_I2C_Master_Receive+0x50>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e203      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d007      	beq.n	80078ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0201 	orr.w	r2, r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2222      	movs	r2, #34	@ 0x22
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2210      	movs	r2, #16
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	893a      	ldrh	r2, [r7, #8]
 80078fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a5c      	ldr	r2, [pc, #368]	@ (8007a80 <HAL_I2C_Master_Receive+0x228>)
 800790e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007910:	8979      	ldrh	r1, [r7, #10]
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fb80 	bl	800801c <I2C_MasterRequestRead>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e1c4      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d113      	bne.n	8007956 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792e:	2300      	movs	r3, #0
 8007930:	623b      	str	r3, [r7, #32]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e198      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800795a:	2b01      	cmp	r3, #1
 800795c:	d11b      	bne.n	8007996 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800796c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e178      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800799a:	2b02      	cmp	r3, #2
 800799c:	d11b      	bne.n	80079d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	e158      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80079fc:	e144      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	f200 80f1 	bhi.w	8007bea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d123      	bne.n	8007a58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fd79 	bl	800850c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e145      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a56:	e117      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d14e      	bne.n	8007afe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	4906      	ldr	r1, [pc, #24]	@ (8007a84 <HAL_I2C_Master_Receive+0x22c>)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fba4 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e11a      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
 8007a7a:	bf00      	nop
 8007a7c:	00100002 	.word	0x00100002
 8007a80:	ffff0000 	.word	0xffff0000
 8007a84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007afc:	e0c4      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	2200      	movs	r2, #0
 8007b06:	496c      	ldr	r1, [pc, #432]	@ (8007cb8 <HAL_I2C_Master_Receive+0x460>)
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fb55 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e0cb      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	4955      	ldr	r1, [pc, #340]	@ (8007cb8 <HAL_I2C_Master_Receive+0x460>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fb27 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e09d      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007be8:	e04e      	b.n	8007c88 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fc8c 	bl	800850c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e058      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d124      	bne.n	8007c88 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d107      	bne.n	8007c56 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c54:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c60:	b2d2      	uxtb	r2, r2
 8007c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f aeb6 	bne.w	80079fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	e000      	b.n	8007cb0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007cae:	2302      	movs	r3, #2
  }
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3728      	adds	r7, #40	@ 0x28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	00010004 	.word	0x00010004

08007cbc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	@ 0x28
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	607a      	str	r2, [r7, #4]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007ccc:	f7fe fc7e 	bl	80065cc <HAL_GetTick>
 8007cd0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b20      	cmp	r3, #32
 8007ce0:	f040 8111 	bne.w	8007f06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2319      	movs	r3, #25
 8007cea:	2201      	movs	r2, #1
 8007cec:	4988      	ldr	r1, [pc, #544]	@ (8007f10 <HAL_I2C_IsDeviceReady+0x254>)
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fa62 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e104      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_I2C_IsDeviceReady+0x50>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e0fd      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d007      	beq.n	8007d32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0201 	orr.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2224      	movs	r2, #36	@ 0x24
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a70      	ldr	r2, [pc, #448]	@ (8007f14 <HAL_I2C_IsDeviceReady+0x258>)
 8007d54:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 fa20 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00d      	beq.n	8007d9a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8c:	d103      	bne.n	8007d96 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d94:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e0b6      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d9a:	897b      	ldrh	r3, [r7, #10]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007da8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007daa:	f7fe fc0f 	bl	80065cc <HAL_GetTick>
 8007dae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dd4:	bf0c      	ite	eq
 8007dd6:	2301      	moveq	r3, #1
 8007dd8:	2300      	movne	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007dde:	e025      	b.n	8007e2c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007de0:	f7fe fbf4 	bl	80065cc <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d302      	bcc.n	8007df6 <HAL_I2C_IsDeviceReady+0x13a>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	22a0      	movs	r2, #160	@ 0xa0
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	bf0c      	ite	eq
 8007e0c:	2301      	moveq	r3, #1
 8007e0e:	2300      	movne	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e36:	d005      	beq.n	8007e44 <HAL_I2C_IsDeviceReady+0x188>
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <HAL_I2C_IsDeviceReady+0x188>
 8007e3e:	7dbb      	ldrb	r3, [r7, #22]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0cd      	beq.n	8007de0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d129      	bne.n	8007eae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2319      	movs	r3, #25
 8007e86:	2201      	movs	r2, #1
 8007e88:	4921      	ldr	r1, [pc, #132]	@ (8007f10 <HAL_I2C_IsDeviceReady+0x254>)
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f994 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e036      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e02c      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ebc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ec6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2319      	movs	r3, #25
 8007ece:	2201      	movs	r2, #1
 8007ed0:	490f      	ldr	r1, [pc, #60]	@ (8007f10 <HAL_I2C_IsDeviceReady+0x254>)
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f970 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e012      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	f4ff af32 	bcc.w	8007d56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007f06:	2302      	movs	r3, #2
  }
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3720      	adds	r7, #32
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	00100002 	.word	0x00100002
 8007f14:	ffff0000 	.word	0xffff0000

08007f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	460b      	mov	r3, r1
 8007f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d006      	beq.n	8007f42 <I2C_MasterRequestWrite+0x2a>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d003      	beq.n	8007f42 <I2C_MasterRequestWrite+0x2a>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f40:	d108      	bne.n	8007f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	e00b      	b.n	8007f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f58:	2b12      	cmp	r3, #18
 8007f5a:	d107      	bne.n	8007f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f91d 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00d      	beq.n	8007fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f92:	d103      	bne.n	8007f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e035      	b.n	800800c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fa8:	d108      	bne.n	8007fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007faa:	897b      	ldrh	r3, [r7, #10]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fb8:	611a      	str	r2, [r3, #16]
 8007fba:	e01b      	b.n	8007ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fbc:	897b      	ldrh	r3, [r7, #10]
 8007fbe:	11db      	asrs	r3, r3, #7
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f003 0306 	and.w	r3, r3, #6
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f063 030f 	orn	r3, r3, #15
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	490e      	ldr	r1, [pc, #56]	@ (8008014 <I2C_MasterRequestWrite+0xfc>)
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f966 	bl	80082ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e010      	b.n	800800c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007fea:	897b      	ldrh	r3, [r7, #10]
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4907      	ldr	r1, [pc, #28]	@ (8008018 <I2C_MasterRequestWrite+0x100>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f956 	bl	80082ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	00010008 	.word	0x00010008
 8008018:	00010002 	.word	0x00010002

0800801c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	460b      	mov	r3, r1
 800802a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008040:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b08      	cmp	r3, #8
 8008046:	d006      	beq.n	8008056 <I2C_MasterRequestRead+0x3a>
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d003      	beq.n	8008056 <I2C_MasterRequestRead+0x3a>
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008054:	d108      	bne.n	8008068 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	e00b      	b.n	8008080 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806c:	2b11      	cmp	r3, #17
 800806e:	d107      	bne.n	8008080 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800807e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f893 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a6:	d103      	bne.n	80080b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e079      	b.n	80081a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080bc:	d108      	bne.n	80080d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080be:	897b      	ldrh	r3, [r7, #10]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	611a      	str	r2, [r3, #16]
 80080ce:	e05f      	b.n	8008190 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080d0:	897b      	ldrh	r3, [r7, #10]
 80080d2:	11db      	asrs	r3, r3, #7
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0306 	and.w	r3, r3, #6
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f063 030f 	orn	r3, r3, #15
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4930      	ldr	r1, [pc, #192]	@ (80081b0 <I2C_MasterRequestRead+0x194>)
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 f8dc 	bl	80082ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e054      	b.n	80081a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080fe:	897b      	ldrh	r3, [r7, #10]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4929      	ldr	r1, [pc, #164]	@ (80081b4 <I2C_MasterRequestRead+0x198>)
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f8cc 	bl	80082ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e044      	b.n	80081a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800811e:	2300      	movs	r3, #0
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f831 	bl	80081b8 <I2C_WaitOnFlagUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00d      	beq.n	8008178 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800816a:	d103      	bne.n	8008174 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008172:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e017      	b.n	80081a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008178:	897b      	ldrh	r3, [r7, #10]
 800817a:	11db      	asrs	r3, r3, #7
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0306 	and.w	r3, r3, #6
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f063 030e 	orn	r3, r3, #14
 8008188:	b2da      	uxtb	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4907      	ldr	r1, [pc, #28]	@ (80081b4 <I2C_MasterRequestRead+0x198>)
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f888 	bl	80082ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	00010008 	.word	0x00010008
 80081b4:	00010002 	.word	0x00010002

080081b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	4613      	mov	r3, r2
 80081c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c8:	e048      	b.n	800825c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d044      	beq.n	800825c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d2:	f7fe f9fb 	bl	80065cc <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d139      	bne.n	800825c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10d      	bne.n	800820e <I2C_WaitOnFlagUntilTimeout+0x56>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	43da      	mvns	r2, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4013      	ands	r3, r2
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	e00c      	b.n	8008228 <I2C_WaitOnFlagUntilTimeout+0x70>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	43da      	mvns	r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4013      	ands	r3, r2
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	bf0c      	ite	eq
 8008220:	2301      	moveq	r3, #1
 8008222:	2300      	movne	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	429a      	cmp	r2, r3
 800822c:	d116      	bne.n	800825c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e023      	b.n	80082a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d10d      	bne.n	8008282 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	43da      	mvns	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4013      	ands	r3, r2
 8008272:	b29b      	uxth	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	e00c      	b.n	800829c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	43da      	mvns	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4013      	ands	r3, r2
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d093      	beq.n	80081ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082ba:	e071      	b.n	80083a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ca:	d123      	bne.n	8008314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80082e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008300:	f043 0204 	orr.w	r2, r3, #4
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e067      	b.n	80083e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d041      	beq.n	80083a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800831c:	f7fe f956 	bl	80065cc <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d136      	bne.n	80083a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	0c1b      	lsrs	r3, r3, #16
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d10c      	bne.n	8008356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	43da      	mvns	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4013      	ands	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	bf14      	ite	ne
 800834e:	2301      	movne	r3, #1
 8008350:	2300      	moveq	r3, #0
 8008352:	b2db      	uxtb	r3, r3
 8008354:	e00b      	b.n	800836e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	43da      	mvns	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4013      	ands	r3, r2
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	bf14      	ite	ne
 8008368:	2301      	movne	r3, #1
 800836a:	2300      	moveq	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d016      	beq.n	80083a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2220      	movs	r2, #32
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838c:	f043 0220 	orr.w	r2, r3, #32
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e021      	b.n	80083e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	0c1b      	lsrs	r3, r3, #16
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d10c      	bne.n	80083c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	43da      	mvns	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4013      	ands	r3, r2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bf14      	ite	ne
 80083bc:	2301      	movne	r3, #1
 80083be:	2300      	moveq	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e00b      	b.n	80083dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	43da      	mvns	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4013      	ands	r3, r2
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bf14      	ite	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	2300      	moveq	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f47f af6d 	bne.w	80082bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083f8:	e034      	b.n	8008464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f8e3 	bl	80085c6 <I2C_IsAcknowledgeFailed>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e034      	b.n	8008474 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d028      	beq.n	8008464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008412:	f7fe f8db 	bl	80065cc <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	d302      	bcc.n	8008428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d11d      	bne.n	8008464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	2b80      	cmp	r3, #128	@ 0x80
 8008434:	d016      	beq.n	8008464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008450:	f043 0220 	orr.w	r2, r3, #32
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e007      	b.n	8008474 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800846e:	2b80      	cmp	r3, #128	@ 0x80
 8008470:	d1c3      	bne.n	80083fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008488:	e034      	b.n	80084f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f89b 	bl	80085c6 <I2C_IsAcknowledgeFailed>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e034      	b.n	8008504 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d028      	beq.n	80084f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a2:	f7fe f893 	bl	80065cc <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d302      	bcc.n	80084b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11d      	bne.n	80084f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d016      	beq.n	80084f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e0:	f043 0220 	orr.w	r2, r3, #32
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e007      	b.n	8008504 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d1c3      	bne.n	800848a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008518:	e049      	b.n	80085ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b10      	cmp	r3, #16
 8008526:	d119      	bne.n	800855c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0210 	mvn.w	r2, #16
 8008530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2220      	movs	r2, #32
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e030      	b.n	80085be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855c:	f7fe f836 	bl	80065cc <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d11d      	bne.n	80085ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857c:	2b40      	cmp	r3, #64	@ 0x40
 800857e:	d016      	beq.n	80085ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e007      	b.n	80085be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b8:	2b40      	cmp	r3, #64	@ 0x40
 80085ba:	d1ae      	bne.n	800851a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085dc:	d11b      	bne.n	8008616 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008602:	f043 0204 	orr.w	r2, r3, #4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e267      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d075      	beq.n	800872e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008642:	4b88      	ldr	r3, [pc, #544]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 030c 	and.w	r3, r3, #12
 800864a:	2b04      	cmp	r3, #4
 800864c:	d00c      	beq.n	8008668 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800864e:	4b85      	ldr	r3, [pc, #532]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008656:	2b08      	cmp	r3, #8
 8008658:	d112      	bne.n	8008680 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800865a:	4b82      	ldr	r3, [pc, #520]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008666:	d10b      	bne.n	8008680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008668:	4b7e      	ldr	r3, [pc, #504]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d05b      	beq.n	800872c <HAL_RCC_OscConfig+0x108>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d157      	bne.n	800872c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e242      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008688:	d106      	bne.n	8008698 <HAL_RCC_OscConfig+0x74>
 800868a:	4b76      	ldr	r3, [pc, #472]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a75      	ldr	r2, [pc, #468]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e01d      	b.n	80086d4 <HAL_RCC_OscConfig+0xb0>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086a0:	d10c      	bne.n	80086bc <HAL_RCC_OscConfig+0x98>
 80086a2:	4b70      	ldr	r3, [pc, #448]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a6f      	ldr	r2, [pc, #444]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	4b6d      	ldr	r3, [pc, #436]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a6c      	ldr	r2, [pc, #432]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	e00b      	b.n	80086d4 <HAL_RCC_OscConfig+0xb0>
 80086bc:	4b69      	ldr	r3, [pc, #420]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a68      	ldr	r2, [pc, #416]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	4b66      	ldr	r3, [pc, #408]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a65      	ldr	r2, [pc, #404]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d013      	beq.n	8008704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fd ff76 	bl	80065cc <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086e4:	f7fd ff72 	bl	80065cc <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b64      	cmp	r3, #100	@ 0x64
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e207      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086f6:	4b5b      	ldr	r3, [pc, #364]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f0      	beq.n	80086e4 <HAL_RCC_OscConfig+0xc0>
 8008702:	e014      	b.n	800872e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008704:	f7fd ff62 	bl	80065cc <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800870c:	f7fd ff5e 	bl	80065cc <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b64      	cmp	r3, #100	@ 0x64
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e1f3      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800871e:	4b51      	ldr	r3, [pc, #324]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f0      	bne.n	800870c <HAL_RCC_OscConfig+0xe8>
 800872a:	e000      	b.n	800872e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d063      	beq.n	8008802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800873a:	4b4a      	ldr	r3, [pc, #296]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00b      	beq.n	800875e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008746:	4b47      	ldr	r3, [pc, #284]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800874e:	2b08      	cmp	r3, #8
 8008750:	d11c      	bne.n	800878c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008752:	4b44      	ldr	r3, [pc, #272]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d116      	bne.n	800878c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875e:	4b41      	ldr	r3, [pc, #260]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <HAL_RCC_OscConfig+0x152>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d001      	beq.n	8008776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e1c7      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008776:	4b3b      	ldr	r3, [pc, #236]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	4937      	ldr	r1, [pc, #220]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008786:	4313      	orrs	r3, r2
 8008788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800878a:	e03a      	b.n	8008802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d020      	beq.n	80087d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008794:	4b34      	ldr	r3, [pc, #208]	@ (8008868 <HAL_RCC_OscConfig+0x244>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879a:	f7fd ff17 	bl	80065cc <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a0:	e008      	b.n	80087b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a2:	f7fd ff13 	bl	80065cc <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e1a8      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0f0      	beq.n	80087a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c0:	4b28      	ldr	r3, [pc, #160]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4925      	ldr	r1, [pc, #148]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	600b      	str	r3, [r1, #0]
 80087d4:	e015      	b.n	8008802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087d6:	4b24      	ldr	r3, [pc, #144]	@ (8008868 <HAL_RCC_OscConfig+0x244>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087dc:	f7fd fef6 	bl	80065cc <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087e4:	f7fd fef2 	bl	80065cc <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e187      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1f0      	bne.n	80087e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d036      	beq.n	800887c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008816:	4b15      	ldr	r3, [pc, #84]	@ (800886c <HAL_RCC_OscConfig+0x248>)
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800881c:	f7fd fed6 	bl	80065cc <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008824:	f7fd fed2 	bl	80065cc <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e167      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008836:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <HAL_RCC_OscConfig+0x240>)
 8008838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x200>
 8008842:	e01b      	b.n	800887c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008844:	4b09      	ldr	r3, [pc, #36]	@ (800886c <HAL_RCC_OscConfig+0x248>)
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800884a:	f7fd febf 	bl	80065cc <HAL_GetTick>
 800884e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008850:	e00e      	b.n	8008870 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008852:	f7fd febb 	bl	80065cc <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d907      	bls.n	8008870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e150      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
 8008864:	40023800 	.word	0x40023800
 8008868:	42470000 	.word	0x42470000
 800886c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008870:	4b88      	ldr	r3, [pc, #544]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1ea      	bne.n	8008852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8097 	beq.w	80089b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800888e:	4b81      	ldr	r3, [pc, #516]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10f      	bne.n	80088ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	4b7d      	ldr	r3, [pc, #500]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	4a7c      	ldr	r2, [pc, #496]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80088a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80088aa:	4b7a      	ldr	r3, [pc, #488]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088b2:	60bb      	str	r3, [r7, #8]
 80088b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088b6:	2301      	movs	r3, #1
 80088b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ba:	4b77      	ldr	r3, [pc, #476]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d118      	bne.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c6:	4b74      	ldr	r3, [pc, #464]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a73      	ldr	r2, [pc, #460]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088d2:	f7fd fe7b 	bl	80065cc <HAL_GetTick>
 80088d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d8:	e008      	b.n	80088ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088da:	f7fd fe77 	bl	80065cc <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e10c      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ec:	4b6a      	ldr	r3, [pc, #424]	@ (8008a98 <HAL_RCC_OscConfig+0x474>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d106      	bne.n	800890e <HAL_RCC_OscConfig+0x2ea>
 8008900:	4b64      	ldr	r3, [pc, #400]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008904:	4a63      	ldr	r2, [pc, #396]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	6713      	str	r3, [r2, #112]	@ 0x70
 800890c:	e01c      	b.n	8008948 <HAL_RCC_OscConfig+0x324>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b05      	cmp	r3, #5
 8008914:	d10c      	bne.n	8008930 <HAL_RCC_OscConfig+0x30c>
 8008916:	4b5f      	ldr	r3, [pc, #380]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891a:	4a5e      	ldr	r2, [pc, #376]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	6713      	str	r3, [r2, #112]	@ 0x70
 8008922:	4b5c      	ldr	r3, [pc, #368]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008926:	4a5b      	ldr	r2, [pc, #364]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6713      	str	r3, [r2, #112]	@ 0x70
 800892e:	e00b      	b.n	8008948 <HAL_RCC_OscConfig+0x324>
 8008930:	4b58      	ldr	r3, [pc, #352]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008934:	4a57      	ldr	r2, [pc, #348]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	6713      	str	r3, [r2, #112]	@ 0x70
 800893c:	4b55      	ldr	r3, [pc, #340]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 800893e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008940:	4a54      	ldr	r2, [pc, #336]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008942:	f023 0304 	bic.w	r3, r3, #4
 8008946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d015      	beq.n	800897c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008950:	f7fd fe3c 	bl	80065cc <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008956:	e00a      	b.n	800896e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008958:	f7fd fe38 	bl	80065cc <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e0cb      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800896e:	4b49      	ldr	r3, [pc, #292]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0ee      	beq.n	8008958 <HAL_RCC_OscConfig+0x334>
 800897a:	e014      	b.n	80089a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800897c:	f7fd fe26 	bl	80065cc <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008982:	e00a      	b.n	800899a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008984:	f7fd fe22 	bl	80065cc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e0b5      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800899a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1ee      	bne.n	8008984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d105      	bne.n	80089b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089ac:	4b39      	ldr	r3, [pc, #228]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b0:	4a38      	ldr	r2, [pc, #224]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 80a1 	beq.w	8008b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089c2:	4b34      	ldr	r3, [pc, #208]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f003 030c 	and.w	r3, r3, #12
 80089ca:	2b08      	cmp	r3, #8
 80089cc:	d05c      	beq.n	8008a88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d141      	bne.n	8008a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d6:	4b31      	ldr	r3, [pc, #196]	@ (8008a9c <HAL_RCC_OscConfig+0x478>)
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089dc:	f7fd fdf6 	bl	80065cc <HAL_GetTick>
 80089e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e4:	f7fd fdf2 	bl	80065cc <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e087      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f6:	4b27      	ldr	r3, [pc, #156]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f0      	bne.n	80089e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69da      	ldr	r2, [r3, #28]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	019b      	lsls	r3, r3, #6
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	041b      	lsls	r3, r3, #16
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	491b      	ldr	r1, [pc, #108]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a9c <HAL_RCC_OscConfig+0x478>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a32:	f7fd fdcb 	bl	80065cc <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a38:	e008      	b.n	8008a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a3a:	f7fd fdc7 	bl	80065cc <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e05c      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4c:	4b11      	ldr	r3, [pc, #68]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0f0      	beq.n	8008a3a <HAL_RCC_OscConfig+0x416>
 8008a58:	e054      	b.n	8008b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5a:	4b10      	ldr	r3, [pc, #64]	@ (8008a9c <HAL_RCC_OscConfig+0x478>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a60:	f7fd fdb4 	bl	80065cc <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a68:	f7fd fdb0 	bl	80065cc <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e045      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a7a:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <HAL_RCC_OscConfig+0x470>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x444>
 8008a86:	e03d      	b.n	8008b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e038      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40007000 	.word	0x40007000
 8008a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <HAL_RCC_OscConfig+0x4ec>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d028      	beq.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d121      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d11a      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d111      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d107      	bne.n	8008b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d001      	beq.n	8008b04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40023800 	.word	0x40023800

08008b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0cc      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b28:	4b68      	ldr	r3, [pc, #416]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d90c      	bls.n	8008b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b36:	4b65      	ldr	r3, [pc, #404]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3e:	4b63      	ldr	r3, [pc, #396]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d001      	beq.n	8008b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0b8      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d020      	beq.n	8008b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b68:	4b59      	ldr	r3, [pc, #356]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	4a58      	ldr	r2, [pc, #352]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b80:	4b53      	ldr	r3, [pc, #332]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	4a52      	ldr	r2, [pc, #328]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b8c:	4b50      	ldr	r3, [pc, #320]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	494d      	ldr	r1, [pc, #308]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d044      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb2:	4b47      	ldr	r3, [pc, #284]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d119      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e07f      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d003      	beq.n	8008bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e06f      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be2:	4b3b      	ldr	r3, [pc, #236]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e067      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bf2:	4b37      	ldr	r3, [pc, #220]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f023 0203 	bic.w	r2, r3, #3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4934      	ldr	r1, [pc, #208]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c04:	f7fd fce2 	bl	80065cc <HAL_GetTick>
 8008c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c0a:	e00a      	b.n	8008c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c0c:	f7fd fcde 	bl	80065cc <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e04f      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c22:	4b2b      	ldr	r3, [pc, #172]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 020c 	and.w	r2, r3, #12
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d1eb      	bne.n	8008c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c34:	4b25      	ldr	r3, [pc, #148]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d20c      	bcs.n	8008c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c42:	4b22      	ldr	r3, [pc, #136]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4a:	4b20      	ldr	r3, [pc, #128]	@ (8008ccc <HAL_RCC_ClockConfig+0x1b8>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d001      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e032      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d008      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c68:	4b19      	ldr	r3, [pc, #100]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4916      	ldr	r1, [pc, #88]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c86:	4b12      	ldr	r3, [pc, #72]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	490e      	ldr	r1, [pc, #56]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c9a:	f000 f821 	bl	8008ce0 <HAL_RCC_GetSysClockFreq>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	490a      	ldr	r1, [pc, #40]	@ (8008cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8008cac:	5ccb      	ldrb	r3, [r1, r3]
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	4a09      	ldr	r2, [pc, #36]	@ (8008cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008cb6:	4b09      	ldr	r3, [pc, #36]	@ (8008cdc <HAL_RCC_ClockConfig+0x1c8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fd f802 	bl	8005cc4 <HAL_InitTick>

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40023c00 	.word	0x40023c00
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	08010a10 	.word	0x08010a10
 8008cd8:	20000048 	.word	0x20000048
 8008cdc:	2000004c 	.word	0x2000004c

08008ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce4:	b090      	sub	sp, #64	@ 0x40
 8008ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cf8:	4b59      	ldr	r3, [pc, #356]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 030c 	and.w	r3, r3, #12
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d00d      	beq.n	8008d20 <HAL_RCC_GetSysClockFreq+0x40>
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	f200 80a1 	bhi.w	8008e4c <HAL_RCC_GetSysClockFreq+0x16c>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_RCC_GetSysClockFreq+0x34>
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d003      	beq.n	8008d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8008d12:	e09b      	b.n	8008e4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d14:	4b53      	ldr	r3, [pc, #332]	@ (8008e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d18:	e09b      	b.n	8008e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d1a:	4b53      	ldr	r3, [pc, #332]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d1e:	e098      	b.n	8008e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d20:	4b4f      	ldr	r3, [pc, #316]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d028      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d36:	4b4a      	ldr	r3, [pc, #296]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	099b      	lsrs	r3, r3, #6
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	623b      	str	r3, [r7, #32]
 8008d40:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4b47      	ldr	r3, [pc, #284]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d4c:	fb03 f201 	mul.w	r2, r3, r1
 8008d50:	2300      	movs	r3, #0
 8008d52:	fb00 f303 	mul.w	r3, r0, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	4a43      	ldr	r2, [pc, #268]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d5a:	fba0 1202 	umull	r1, r2, r0, r2
 8008d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d60:	460a      	mov	r2, r1
 8008d62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d66:	4413      	add	r3, r2
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
 8008d70:	61fa      	str	r2, [r7, #28]
 8008d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d7a:	f7f7 ff85 	bl	8000c88 <__aeabi_uldivmod>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4613      	mov	r3, r2
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d86:	e053      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d88:	4b35      	ldr	r3, [pc, #212]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	099b      	lsrs	r3, r3, #6
 8008d8e:	2200      	movs	r2, #0
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	617a      	str	r2, [r7, #20]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d9a:	f04f 0b00 	mov.w	fp, #0
 8008d9e:	4652      	mov	r2, sl
 8008da0:	465b      	mov	r3, fp
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f04f 0100 	mov.w	r1, #0
 8008daa:	0159      	lsls	r1, r3, #5
 8008dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008db0:	0150      	lsls	r0, r2, #5
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	ebb2 080a 	subs.w	r8, r2, sl
 8008dba:	eb63 090b 	sbc.w	r9, r3, fp
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008dca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008dce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008dd2:	ebb2 0408 	subs.w	r4, r2, r8
 8008dd6:	eb63 0509 	sbc.w	r5, r3, r9
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	00eb      	lsls	r3, r5, #3
 8008de4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008de8:	00e2      	lsls	r2, r4, #3
 8008dea:	4614      	mov	r4, r2
 8008dec:	461d      	mov	r5, r3
 8008dee:	eb14 030a 	adds.w	r3, r4, sl
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	eb45 030b 	adc.w	r3, r5, fp
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e06:	4629      	mov	r1, r5
 8008e08:	028b      	lsls	r3, r1, #10
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e10:	4621      	mov	r1, r4
 8008e12:	028a      	lsls	r2, r1, #10
 8008e14:	4610      	mov	r0, r2
 8008e16:	4619      	mov	r1, r3
 8008e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	60fa      	str	r2, [r7, #12]
 8008e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e24:	f7f7 ff30 	bl	8000c88 <__aeabi_uldivmod>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008e30:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	0c1b      	lsrs	r3, r3, #16
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008e40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e4a:	e002      	b.n	8008e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e4c:	4b05      	ldr	r3, [pc, #20]	@ (8008e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3740      	adds	r7, #64	@ 0x40
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5e:	bf00      	nop
 8008e60:	40023800 	.word	0x40023800
 8008e64:	00f42400 	.word	0x00f42400
 8008e68:	017d7840 	.word	0x017d7840

08008e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e70:	4b03      	ldr	r3, [pc, #12]	@ (8008e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000048 	.word	0x20000048

08008e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e88:	f7ff fff0 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	0a9b      	lsrs	r3, r3, #10
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	4903      	ldr	r1, [pc, #12]	@ (8008ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e9a:	5ccb      	ldrb	r3, [r1, r3]
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	08010a20 	.word	0x08010a20

08008eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008eb0:	f7ff ffdc 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b05      	ldr	r3, [pc, #20]	@ (8008ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	0b5b      	lsrs	r3, r3, #13
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	4903      	ldr	r1, [pc, #12]	@ (8008ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ec2:	5ccb      	ldrb	r3, [r1, r3]
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	08010a20 	.word	0x08010a20

08008ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	220f      	movs	r2, #15
 8008ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ee4:	4b12      	ldr	r3, [pc, #72]	@ (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 0203 	and.w	r2, r3, #3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008efc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f08:	4b09      	ldr	r3, [pc, #36]	@ (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	08db      	lsrs	r3, r3, #3
 8008f0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f16:	4b07      	ldr	r3, [pc, #28]	@ (8008f34 <HAL_RCC_GetClockConfig+0x60>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0207 	and.w	r2, r3, #7
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	601a      	str	r2, [r3, #0]
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40023800 	.word	0x40023800
 8008f34:	40023c00 	.word	0x40023c00

08008f38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d035      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f60:	4b62      	ldr	r3, [pc, #392]	@ (80090ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f66:	f7fd fb31 	bl	80065cc <HAL_GetTick>
 8008f6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f6c:	e008      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008f6e:	f7fd fb2d 	bl	80065cc <HAL_GetTick>
 8008f72:	4602      	mov	r2, r0
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d901      	bls.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e0b0      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f80:	4b5b      	ldr	r3, [pc, #364]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1f0      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	019a      	lsls	r2, r3, #6
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	071b      	lsls	r3, r3, #28
 8008f98:	4955      	ldr	r1, [pc, #340]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008fa0:	4b52      	ldr	r3, [pc, #328]	@ (80090ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fa6:	f7fd fb11 	bl	80065cc <HAL_GetTick>
 8008faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fac:	e008      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008fae:	f7fd fb0d 	bl	80065cc <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e090      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0f0      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8083 	beq.w	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	4b44      	ldr	r3, [pc, #272]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe2:	4a43      	ldr	r2, [pc, #268]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008fea:	4b41      	ldr	r3, [pc, #260]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009000:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009002:	f7fd fae3 	bl	80065cc <HAL_GetTick>
 8009006:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009008:	e008      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800900a:	f7fd fadf 	bl	80065cc <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e062      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800901c:	4b35      	ldr	r3, [pc, #212]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0f0      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009028:	4b31      	ldr	r3, [pc, #196]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800902a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009030:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02f      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	429a      	cmp	r2, r3
 8009044:	d028      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009046:	4b2a      	ldr	r3, [pc, #168]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800904a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800904e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009050:	4b29      	ldr	r3, [pc, #164]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009052:	2201      	movs	r2, #1
 8009054:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009056:	4b28      	ldr	r3, [pc, #160]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800905c:	4a24      	ldr	r2, [pc, #144]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009062:	4b23      	ldr	r3, [pc, #140]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b01      	cmp	r3, #1
 800906c:	d114      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800906e:	f7fd faad 	bl	80065cc <HAL_GetTick>
 8009072:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009074:	e00a      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009076:	f7fd faa9 	bl	80065cc <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009084:	4293      	cmp	r3, r2
 8009086:	d901      	bls.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e02a      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800908c:	4b18      	ldr	r3, [pc, #96]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800908e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0ee      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090a4:	d10d      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80090a6:	4b12      	ldr	r3, [pc, #72]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80090b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ba:	490d      	ldr	r1, [pc, #52]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	608b      	str	r3, [r1, #8]
 80090c0:	e005      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80090c2:	4b0b      	ldr	r3, [pc, #44]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	4a0a      	ldr	r2, [pc, #40]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090c8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80090cc:	6093      	str	r3, [r2, #8]
 80090ce:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090da:	4905      	ldr	r1, [pc, #20]	@ (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	42470068 	.word	0x42470068
 80090f0:	40023800 	.word	0x40023800
 80090f4:	40007000 	.word	0x40007000
 80090f8:	42470e40 	.word	0x42470e40

080090fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e073      	b.n	80091fa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7f5b      	ldrb	r3, [r3, #29]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d105      	bne.n	8009128 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7fc fd78 	bl	8005c18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	2b10      	cmp	r3, #16
 800913a:	d055      	beq.n	80091e8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	22ca      	movs	r2, #202	@ 0xca
 8009142:	625a      	str	r2, [r3, #36]	@ 0x24
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2253      	movs	r2, #83	@ 0x53
 800914a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa49 	bl	80095e4 <RTC_EnterInitMode>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d12c      	bne.n	80091b6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800916a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800916e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6899      	ldr	r1, [r3, #8]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	431a      	orrs	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68d2      	ldr	r2, [r2, #12]
 8009196:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6919      	ldr	r1, [r3, #16]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	041a      	lsls	r2, r3, #16
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa50 	bl	8009652 <RTC_ExitInitMode>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d110      	bne.n	80091de <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80091ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	22ff      	movs	r2, #255	@ 0xff
 80091e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80091e6:	e001      	b.n	80091ec <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009202:	b590      	push	{r4, r7, lr}
 8009204:	b087      	sub	sp, #28
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	7f1b      	ldrb	r3, [r3, #28]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_RTC_SetTime+0x1c>
 800921a:	2302      	movs	r3, #2
 800921c:	e087      	b.n	800932e <HAL_RTC_SetTime+0x12c>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2202      	movs	r2, #2
 8009228:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d126      	bne.n	800927e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2200      	movs	r2, #0
 8009242:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fa27 	bl	800969c <RTC_ByteToBcd2>
 800924e:	4603      	mov	r3, r0
 8009250:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fa20 	bl	800969c <RTC_ByteToBcd2>
 800925c:	4603      	mov	r3, r0
 800925e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009260:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	789b      	ldrb	r3, [r3, #2]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fa18 	bl	800969c <RTC_ByteToBcd2>
 800926c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800926e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	78db      	ldrb	r3, [r3, #3]
 8009276:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	e018      	b.n	80092b0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2200      	movs	r2, #0
 8009290:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800929e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80092a4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	78db      	ldrb	r3, [r3, #3]
 80092aa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	22ca      	movs	r2, #202	@ 0xca
 80092b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2253      	movs	r2, #83	@ 0x53
 80092be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f98f 	bl	80095e4 <RTC_EnterInitMode>
 80092c6:	4603      	mov	r3, r0
 80092c8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80092ca:	7cfb      	ldrb	r3, [r7, #19]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d120      	bne.n	8009312 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80092da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80092de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689a      	ldr	r2, [r3, #8]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80092ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6899      	ldr	r1, [r3, #8]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	431a      	orrs	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f9a2 	bl	8009652 <RTC_ExitInitMode>
 800930e:	4603      	mov	r3, r0
 8009310:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009312:	7cfb      	ldrb	r3, [r7, #19]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	22ff      	movs	r2, #255	@ 0xff
 8009324:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	771a      	strb	r2, [r3, #28]

  return status;
 800932c:	7cfb      	ldrb	r3, [r7, #19]
}
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd90      	pop	{r4, r7, pc}

08009336 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009368:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800936c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	0c1b      	lsrs	r3, r3, #16
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009378:	b2da      	uxtb	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009396:	b2da      	uxtb	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	0d9b      	lsrs	r3, r3, #22
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d11a      	bne.n	80093e8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f98e 	bl	80096d8 <RTC_Bcd2ToByte>
 80093bc:	4603      	mov	r3, r0
 80093be:	461a      	mov	r2, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f985 	bl	80096d8 <RTC_Bcd2ToByte>
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	789b      	ldrb	r3, [r3, #2]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f97c 	bl	80096d8 <RTC_Bcd2ToByte>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80093f2:	b590      	push	{r4, r7, lr}
 80093f4:	b087      	sub	sp, #28
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	7f1b      	ldrb	r3, [r3, #28]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_RTC_SetDate+0x1c>
 800940a:	2302      	movs	r3, #2
 800940c:	e071      	b.n	80094f2 <HAL_RTC_SetDate+0x100>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2202      	movs	r2, #2
 8009418:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10e      	bne.n	800943e <HAL_RTC_SetDate+0x4c>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	785b      	ldrb	r3, [r3, #1]
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b00      	cmp	r3, #0
 800942a:	d008      	beq.n	800943e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	f023 0310 	bic.w	r3, r3, #16
 8009434:	b2db      	uxtb	r3, r3
 8009436:	330a      	adds	r3, #10
 8009438:	b2da      	uxtb	r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d11c      	bne.n	800947e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	78db      	ldrb	r3, [r3, #3]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 f927 	bl	800969c <RTC_ByteToBcd2>
 800944e:	4603      	mov	r3, r0
 8009450:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f920 	bl	800969c <RTC_ByteToBcd2>
 800945c:	4603      	mov	r3, r0
 800945e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009460:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	789b      	ldrb	r3, [r3, #2]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f918 	bl	800969c <RTC_ByteToBcd2>
 800946c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800946e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e00e      	b.n	800949c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	78db      	ldrb	r3, [r3, #3]
 8009482:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800948a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009490:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	22ca      	movs	r2, #202	@ 0xca
 80094a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2253      	movs	r2, #83	@ 0x53
 80094aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f899 	bl	80095e4 <RTC_EnterInitMode>
 80094b2:	4603      	mov	r3, r0
 80094b4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80094b6:	7cfb      	ldrb	r3, [r7, #19]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10c      	bne.n	80094d6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80094c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094ca:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f8c0 	bl	8009652 <RTC_ExitInitMode>
 80094d2:	4603      	mov	r3, r0
 80094d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80094d6:	7cfb      	ldrb	r3, [r7, #19]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	22ff      	movs	r2, #255	@ 0xff
 80094e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	771a      	strb	r2, [r3, #28]

  return status;
 80094f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd90      	pop	{r4, r7, pc}

080094fa <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009514:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009518:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	0c1b      	lsrs	r3, r3, #16
 800951e:	b2da      	uxtb	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f003 031f 	and.w	r3, r3, #31
 800952e:	b2da      	uxtb	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800953c:	b2da      	uxtb	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	0b5b      	lsrs	r3, r3, #13
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	b2da      	uxtb	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d11a      	bne.n	800958e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	78db      	ldrb	r3, [r3, #3]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 f8bb 	bl	80096d8 <RTC_Bcd2ToByte>
 8009562:	4603      	mov	r3, r0
 8009564:	461a      	mov	r2, r3
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f8b2 	bl	80096d8 <RTC_Bcd2ToByte>
 8009574:	4603      	mov	r3, r0
 8009576:	461a      	mov	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	789b      	ldrb	r3, [r3, #2]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 f8a9 	bl	80096d8 <RTC_Bcd2ToByte>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a0d      	ldr	r2, [pc, #52]	@ (80095e0 <HAL_RTC_WaitForSynchro+0x48>)
 80095aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095ac:	f7fd f80e 	bl	80065cc <HAL_GetTick>
 80095b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095b2:	e009      	b.n	80095c8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095b4:	f7fd f80a 	bl	80065cc <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095c2:	d901      	bls.n	80095c8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e007      	b.n	80095d8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0ee      	beq.n	80095b4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	00017f5f 	.word	0x00017f5f

080095e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d122      	bne.n	8009648 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009610:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009612:	f7fc ffdb 	bl	80065cc <HAL_GetTick>
 8009616:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009618:	e00c      	b.n	8009634 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800961a:	f7fc ffd7 	bl	80065cc <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009628:	d904      	bls.n	8009634 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2204      	movs	r2, #4
 800962e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <RTC_EnterInitMode+0x64>
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d1e8      	bne.n	800961a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800966c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff ff8b 	bl	8009598 <HAL_RTC_WaitForSynchro>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2204      	movs	r2, #4
 800968c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80096aa:	e005      	b.n	80096b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3301      	adds	r3, #1
 80096b0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	3b0a      	subs	r3, #10
 80096b6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d8f6      	bhi.n	80096ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b2db      	uxtb	r3, r3
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	091b      	lsrs	r3, r3, #4
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	79fb      	ldrb	r3, [r7, #7]
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	b2db      	uxtb	r3, r3
 8009704:	4413      	add	r3, r2
 8009706:	b2db      	uxtb	r3, r3
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e041      	b.n	80097aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f839 	bl	80097b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f000 f9c0 	bl	8009ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
	...

080097c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d001      	beq.n	80097e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e04e      	b.n	800987e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a23      	ldr	r2, [pc, #140]	@ (800988c <HAL_TIM_Base_Start_IT+0xc4>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d022      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800980a:	d01d      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a1f      	ldr	r2, [pc, #124]	@ (8009890 <HAL_TIM_Base_Start_IT+0xc8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d018      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a1e      	ldr	r2, [pc, #120]	@ (8009894 <HAL_TIM_Base_Start_IT+0xcc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d013      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a1c      	ldr	r2, [pc, #112]	@ (8009898 <HAL_TIM_Base_Start_IT+0xd0>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00e      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a1b      	ldr	r2, [pc, #108]	@ (800989c <HAL_TIM_Base_Start_IT+0xd4>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d009      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a19      	ldr	r2, [pc, #100]	@ (80098a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d004      	beq.n	8009848 <HAL_TIM_Base_Start_IT+0x80>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a18      	ldr	r2, [pc, #96]	@ (80098a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d111      	bne.n	800986c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b06      	cmp	r3, #6
 8009858:	d010      	beq.n	800987c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f042 0201 	orr.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986a:	e007      	b.n	800987c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0201 	orr.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	40010000 	.word	0x40010000
 8009890:	40000400 	.word	0x40000400
 8009894:	40000800 	.word	0x40000800
 8009898:	40000c00 	.word	0x40000c00
 800989c:	40010400 	.word	0x40010400
 80098a0:	40014000 	.word	0x40014000
 80098a4:	40001800 	.word	0x40001800

080098a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d020      	beq.n	800990c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d01b      	beq.n	800990c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f06f 0202 	mvn.w	r2, #2
 80098dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f8d2 	bl	8009a9c <HAL_TIM_IC_CaptureCallback>
 80098f8:	e005      	b.n	8009906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f8c4 	bl	8009a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f8d5 	bl	8009ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d020      	beq.n	8009958 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01b      	beq.n	8009958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0204 	mvn.w	r2, #4
 8009928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2202      	movs	r2, #2
 800992e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f8ac 	bl	8009a9c <HAL_TIM_IC_CaptureCallback>
 8009944:	e005      	b.n	8009952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f89e 	bl	8009a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f8af 	bl	8009ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f003 0308 	and.w	r3, r3, #8
 800995e:	2b00      	cmp	r3, #0
 8009960:	d020      	beq.n	80099a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01b      	beq.n	80099a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f06f 0208 	mvn.w	r2, #8
 8009974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2204      	movs	r2, #4
 800997a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f886 	bl	8009a9c <HAL_TIM_IC_CaptureCallback>
 8009990:	e005      	b.n	800999e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f878 	bl	8009a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f889 	bl	8009ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f003 0310 	and.w	r3, r3, #16
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d020      	beq.n	80099f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01b      	beq.n	80099f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0210 	mvn.w	r2, #16
 80099c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2208      	movs	r2, #8
 80099c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f860 	bl	8009a9c <HAL_TIM_IC_CaptureCallback>
 80099dc:	e005      	b.n	80099ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f852 	bl	8009a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f863 	bl	8009ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f06f 0201 	mvn.w	r2, #1
 8009a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fc f8c4 	bl	8005b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00c      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f906 	bl	8009c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00c      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f834 	bl	8009ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00c      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f06f 0220 	mvn.w	r2, #32
 8009a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f8d8 	bl	8009c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a80:	bf00      	nop
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a46      	ldr	r2, [pc, #280]	@ (8009c04 <TIM_Base_SetConfig+0x12c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d013      	beq.n	8009b18 <TIM_Base_SetConfig+0x40>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009af6:	d00f      	beq.n	8009b18 <TIM_Base_SetConfig+0x40>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a43      	ldr	r2, [pc, #268]	@ (8009c08 <TIM_Base_SetConfig+0x130>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00b      	beq.n	8009b18 <TIM_Base_SetConfig+0x40>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a42      	ldr	r2, [pc, #264]	@ (8009c0c <TIM_Base_SetConfig+0x134>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d007      	beq.n	8009b18 <TIM_Base_SetConfig+0x40>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a41      	ldr	r2, [pc, #260]	@ (8009c10 <TIM_Base_SetConfig+0x138>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d003      	beq.n	8009b18 <TIM_Base_SetConfig+0x40>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a40      	ldr	r2, [pc, #256]	@ (8009c14 <TIM_Base_SetConfig+0x13c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d108      	bne.n	8009b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a35      	ldr	r2, [pc, #212]	@ (8009c04 <TIM_Base_SetConfig+0x12c>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d02b      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b38:	d027      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a32      	ldr	r2, [pc, #200]	@ (8009c08 <TIM_Base_SetConfig+0x130>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d023      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a31      	ldr	r2, [pc, #196]	@ (8009c0c <TIM_Base_SetConfig+0x134>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d01f      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a30      	ldr	r2, [pc, #192]	@ (8009c10 <TIM_Base_SetConfig+0x138>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d01b      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a2f      	ldr	r2, [pc, #188]	@ (8009c14 <TIM_Base_SetConfig+0x13c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d017      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8009c18 <TIM_Base_SetConfig+0x140>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d013      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a2d      	ldr	r2, [pc, #180]	@ (8009c1c <TIM_Base_SetConfig+0x144>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d00f      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8009c20 <TIM_Base_SetConfig+0x148>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00b      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a2b      	ldr	r2, [pc, #172]	@ (8009c24 <TIM_Base_SetConfig+0x14c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d007      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009c28 <TIM_Base_SetConfig+0x150>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d003      	beq.n	8009b8a <TIM_Base_SetConfig+0xb2>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a29      	ldr	r2, [pc, #164]	@ (8009c2c <TIM_Base_SetConfig+0x154>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d108      	bne.n	8009b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	689a      	ldr	r2, [r3, #8]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a10      	ldr	r2, [pc, #64]	@ (8009c04 <TIM_Base_SetConfig+0x12c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d003      	beq.n	8009bd0 <TIM_Base_SetConfig+0xf8>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a12      	ldr	r2, [pc, #72]	@ (8009c14 <TIM_Base_SetConfig+0x13c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d103      	bne.n	8009bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	691a      	ldr	r2, [r3, #16]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d105      	bne.n	8009bf6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f023 0201 	bic.w	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	611a      	str	r2, [r3, #16]
  }
}
 8009bf6:	bf00      	nop
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	40010000 	.word	0x40010000
 8009c08:	40000400 	.word	0x40000400
 8009c0c:	40000800 	.word	0x40000800
 8009c10:	40000c00 	.word	0x40000c00
 8009c14:	40010400 	.word	0x40010400
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40014400 	.word	0x40014400
 8009c20:	40014800 	.word	0x40014800
 8009c24:	40001800 	.word	0x40001800
 8009c28:	40001c00 	.word	0x40001c00
 8009c2c:	40002000 	.word	0x40002000

08009c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e042      	b.n	8009cf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7fc fab4 	bl	80061ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2224      	movs	r2, #36	@ 0x24
 8009c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 faaf 	bl	800a200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695a      	ldr	r2, [r3, #20]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08a      	sub	sp, #40	@ 0x28
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	4613      	mov	r3, r2
 8009d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d175      	bne.n	8009e04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <HAL_UART_Transmit+0x2c>
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e06e      	b.n	8009e06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2221      	movs	r2, #33	@ 0x21
 8009d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d36:	f7fc fc49 	bl	80065cc <HAL_GetTick>
 8009d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	88fa      	ldrh	r2, [r7, #6]
 8009d40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d50:	d108      	bne.n	8009d64 <HAL_UART_Transmit+0x6c>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	e003      	b.n	8009d6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d6c:	e02e      	b.n	8009dcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2200      	movs	r2, #0
 8009d76:	2180      	movs	r1, #128	@ 0x80
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f933 	bl	8009fe4 <UART_WaitOnFlagUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d005      	beq.n	8009d90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e03a      	b.n	8009e06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10b      	bne.n	8009dae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	3302      	adds	r3, #2
 8009daa:	61bb      	str	r3, [r7, #24]
 8009dac:	e007      	b.n	8009dbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	781a      	ldrb	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1cb      	bne.n	8009d6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2140      	movs	r1, #64	@ 0x40
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f8ff 	bl	8009fe4 <UART_WaitOnFlagUntilTimeout>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e006      	b.n	8009e06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	e000      	b.n	8009e06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009e04:	2302      	movs	r3, #2
  }
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d112      	bne.n	8009e4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_UART_Receive_IT+0x26>
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e00b      	b.n	8009e50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e3e:	88fb      	ldrh	r3, [r7, #6]
 8009e40:	461a      	mov	r2, r3
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f000 f926 	bl	800a096 <UART_Start_Receive_IT>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	e000      	b.n	8009e50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009e4e:	2302      	movs	r3, #2
  }
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b09a      	sub	sp, #104	@ 0x68
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	330c      	adds	r3, #12
 8009e66:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6a:	e853 3f00 	ldrex	r3, [r3]
 8009e6e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e76:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	330c      	adds	r3, #12
 8009e7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e80:	657a      	str	r2, [r7, #84]	@ 0x54
 8009e82:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e5      	bne.n	8009e60 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3314      	adds	r3, #20
 8009e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3314      	adds	r3, #20
 8009eb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009eb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8009eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e5      	bne.n	8009e94 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d119      	bne.n	8009f04 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f023 0310 	bic.w	r3, r3, #16
 8009ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	330c      	adds	r3, #12
 8009eee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef8:	e841 2300 	strex	r3, r2, [r1]
 8009efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e5      	bne.n	8009ed0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0e:	2b40      	cmp	r3, #64	@ 0x40
 8009f10:	d13f      	bne.n	8009f92 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3314      	adds	r3, #20
 8009f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3314      	adds	r3, #20
 8009f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f32:	61ba      	str	r2, [r7, #24]
 8009f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6979      	ldr	r1, [r7, #20]
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e5      	bne.n	8009f12 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d013      	beq.n	8009f76 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f52:	4a19      	ldr	r2, [pc, #100]	@ (8009fb8 <HAL_UART_AbortReceive_IT+0x160>)
 8009f54:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fd f848 	bl	8006ff0 <HAL_DMA_Abort_IT>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d022      	beq.n	8009fac <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f70:	4610      	mov	r0, r2
 8009f72:	4798      	blx	r3
 8009f74:	e01a      	b.n	8009fac <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f820 	bl	8009fd0 <HAL_UART_AbortReceiveCpltCallback>
 8009f90:	e00c      	b.n	8009fac <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f812 	bl	8009fd0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3768      	adds	r7, #104	@ 0x68
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800a1d1 	.word	0x0800a1d1

08009fbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff4:	e03b      	b.n	800a06e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffc:	d037      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ffe:	f7fc fae5 	bl	80065cc <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	6a3a      	ldr	r2, [r7, #32]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d302      	bcc.n	800a014 <UART_WaitOnFlagUntilTimeout+0x30>
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e03a      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	2b00      	cmp	r3, #0
 800a024:	d023      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b80      	cmp	r3, #128	@ 0x80
 800a02a:	d020      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b40      	cmp	r3, #64	@ 0x40
 800a030:	d01d      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	d116      	bne.n	800a06e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 f857 	bl	800a10a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2208      	movs	r2, #8
 800a060:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e00f      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4013      	ands	r3, r2
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	bf0c      	ite	eq
 800a07e:	2301      	moveq	r3, #1
 800a080:	2300      	movne	r3, #0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	461a      	mov	r2, r3
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d0b4      	beq.n	8009ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a096:	b480      	push	{r7}
 800a098:	b085      	sub	sp, #20
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	88fa      	ldrh	r2, [r7, #6]
 800a0ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	88fa      	ldrh	r2, [r7, #6]
 800a0b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2222      	movs	r2, #34	@ 0x22
 800a0c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	695a      	ldr	r2, [r3, #20]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0201 	orr.w	r2, r2, #1
 800a0ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f042 0220 	orr.w	r2, r2, #32
 800a0fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b095      	sub	sp, #84	@ 0x54
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	330c      	adds	r3, #12
 800a118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	330c      	adds	r3, #12
 800a130:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a132:	643a      	str	r2, [r7, #64]	@ 0x40
 800a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e5      	bne.n	800a112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3314      	adds	r3, #20
 800a14c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	61fb      	str	r3, [r7, #28]
   return(result);
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3314      	adds	r3, #20
 800a164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a168:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a16c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e5      	bne.n	800a146 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d119      	bne.n	800a1b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	60bb      	str	r3, [r7, #8]
   return(result);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f023 0310 	bic.w	r3, r3, #16
 800a198:	647b      	str	r3, [r7, #68]	@ 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1a2:	61ba      	str	r2, [r7, #24]
 800a1a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e5      	bne.n	800a182 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a1c4:	bf00      	nop
 800a1c6:	3754      	adds	r7, #84	@ 0x54
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1dc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff feec 	bl	8009fd0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a204:	b0c0      	sub	sp, #256	@ 0x100
 800a206:	af00      	add	r7, sp, #0
 800a208:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21c:	68d9      	ldr	r1, [r3, #12]
 800a21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	ea40 0301 	orr.w	r3, r0, r1
 800a228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	431a      	orrs	r2, r3
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	431a      	orrs	r2, r3
 800a240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4313      	orrs	r3, r2
 800a248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a258:	f021 010c 	bic.w	r1, r1, #12
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a266:	430b      	orrs	r3, r1
 800a268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a27a:	6999      	ldr	r1, [r3, #24]
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	ea40 0301 	orr.w	r3, r0, r1
 800a286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	4b8f      	ldr	r3, [pc, #572]	@ (800a4cc <UART_SetConfig+0x2cc>)
 800a290:	429a      	cmp	r2, r3
 800a292:	d005      	beq.n	800a2a0 <UART_SetConfig+0xa0>
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	4b8d      	ldr	r3, [pc, #564]	@ (800a4d0 <UART_SetConfig+0x2d0>)
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d104      	bne.n	800a2aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2a0:	f7fe fe04 	bl	8008eac <HAL_RCC_GetPCLK2Freq>
 800a2a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a2a8:	e003      	b.n	800a2b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2aa:	f7fe fdeb 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 800a2ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2bc:	f040 810c 	bne.w	800a4d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a2ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	1891      	adds	r1, r2, r2
 800a2d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a2da:	415b      	adcs	r3, r3
 800a2dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	eb12 0801 	adds.w	r8, r2, r1
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	eb43 0901 	adc.w	r9, r3, r1
 800a2ee:	f04f 0200 	mov.w	r2, #0
 800a2f2:	f04f 0300 	mov.w	r3, #0
 800a2f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a302:	4690      	mov	r8, r2
 800a304:	4699      	mov	r9, r3
 800a306:	4623      	mov	r3, r4
 800a308:	eb18 0303 	adds.w	r3, r8, r3
 800a30c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a310:	462b      	mov	r3, r5
 800a312:	eb49 0303 	adc.w	r3, r9, r3
 800a316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a326:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a32a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a32e:	460b      	mov	r3, r1
 800a330:	18db      	adds	r3, r3, r3
 800a332:	653b      	str	r3, [r7, #80]	@ 0x50
 800a334:	4613      	mov	r3, r2
 800a336:	eb42 0303 	adc.w	r3, r2, r3
 800a33a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a33c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a344:	f7f6 fca0 	bl	8000c88 <__aeabi_uldivmod>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4b61      	ldr	r3, [pc, #388]	@ (800a4d4 <UART_SetConfig+0x2d4>)
 800a34e:	fba3 2302 	umull	r2, r3, r3, r2
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	011c      	lsls	r4, r3, #4
 800a356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a360:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	1891      	adds	r1, r2, r2
 800a36e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a370:	415b      	adcs	r3, r3
 800a372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a378:	4641      	mov	r1, r8
 800a37a:	eb12 0a01 	adds.w	sl, r2, r1
 800a37e:	4649      	mov	r1, r9
 800a380:	eb43 0b01 	adc.w	fp, r3, r1
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a398:	4692      	mov	sl, r2
 800a39a:	469b      	mov	fp, r3
 800a39c:	4643      	mov	r3, r8
 800a39e:	eb1a 0303 	adds.w	r3, sl, r3
 800a3a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a3ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a3c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	18db      	adds	r3, r3, r3
 800a3c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	eb42 0303 	adc.w	r3, r2, r3
 800a3d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a3d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a3da:	f7f6 fc55 	bl	8000c88 <__aeabi_uldivmod>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a4d4 <UART_SetConfig+0x2d4>)
 800a3e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	2264      	movs	r2, #100	@ 0x64
 800a3ee:	fb02 f303 	mul.w	r3, r2, r3
 800a3f2:	1acb      	subs	r3, r1, r3
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a3fa:	4b36      	ldr	r3, [pc, #216]	@ (800a4d4 <UART_SetConfig+0x2d4>)
 800a3fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a400:	095b      	lsrs	r3, r3, #5
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a408:	441c      	add	r4, r3
 800a40a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a414:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a41c:	4642      	mov	r2, r8
 800a41e:	464b      	mov	r3, r9
 800a420:	1891      	adds	r1, r2, r2
 800a422:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a424:	415b      	adcs	r3, r3
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a42c:	4641      	mov	r1, r8
 800a42e:	1851      	adds	r1, r2, r1
 800a430:	6339      	str	r1, [r7, #48]	@ 0x30
 800a432:	4649      	mov	r1, r9
 800a434:	414b      	adcs	r3, r1
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
 800a438:	f04f 0200 	mov.w	r2, #0
 800a43c:	f04f 0300 	mov.w	r3, #0
 800a440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a444:	4659      	mov	r1, fp
 800a446:	00cb      	lsls	r3, r1, #3
 800a448:	4651      	mov	r1, sl
 800a44a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a44e:	4651      	mov	r1, sl
 800a450:	00ca      	lsls	r2, r1, #3
 800a452:	4610      	mov	r0, r2
 800a454:	4619      	mov	r1, r3
 800a456:	4603      	mov	r3, r0
 800a458:	4642      	mov	r2, r8
 800a45a:	189b      	adds	r3, r3, r2
 800a45c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a460:	464b      	mov	r3, r9
 800a462:	460a      	mov	r2, r1
 800a464:	eb42 0303 	adc.w	r3, r2, r3
 800a468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a478:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a47c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a480:	460b      	mov	r3, r1
 800a482:	18db      	adds	r3, r3, r3
 800a484:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a486:	4613      	mov	r3, r2
 800a488:	eb42 0303 	adc.w	r3, r2, r3
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a48e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a496:	f7f6 fbf7 	bl	8000c88 <__aeabi_uldivmod>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d4 <UART_SetConfig+0x2d4>)
 800a4a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4a4:	095b      	lsrs	r3, r3, #5
 800a4a6:	2164      	movs	r1, #100	@ 0x64
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	3332      	adds	r3, #50	@ 0x32
 800a4b2:	4a08      	ldr	r2, [pc, #32]	@ (800a4d4 <UART_SetConfig+0x2d4>)
 800a4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	f003 0207 	and.w	r2, r3, #7
 800a4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4422      	add	r2, r4
 800a4c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4c8:	e106      	b.n	800a6d8 <UART_SetConfig+0x4d8>
 800a4ca:	bf00      	nop
 800a4cc:	40011000 	.word	0x40011000
 800a4d0:	40011400 	.word	0x40011400
 800a4d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a4e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a4e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a4ea:	4642      	mov	r2, r8
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	1891      	adds	r1, r2, r2
 800a4f0:	6239      	str	r1, [r7, #32]
 800a4f2:	415b      	adcs	r3, r3
 800a4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	1854      	adds	r4, r2, r1
 800a4fe:	4649      	mov	r1, r9
 800a500:	eb43 0501 	adc.w	r5, r3, r1
 800a504:	f04f 0200 	mov.w	r2, #0
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	00eb      	lsls	r3, r5, #3
 800a50e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a512:	00e2      	lsls	r2, r4, #3
 800a514:	4614      	mov	r4, r2
 800a516:	461d      	mov	r5, r3
 800a518:	4643      	mov	r3, r8
 800a51a:	18e3      	adds	r3, r4, r3
 800a51c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a520:	464b      	mov	r3, r9
 800a522:	eb45 0303 	adc.w	r3, r5, r3
 800a526:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a536:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a546:	4629      	mov	r1, r5
 800a548:	008b      	lsls	r3, r1, #2
 800a54a:	4621      	mov	r1, r4
 800a54c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a550:	4621      	mov	r1, r4
 800a552:	008a      	lsls	r2, r1, #2
 800a554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a558:	f7f6 fb96 	bl	8000c88 <__aeabi_uldivmod>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4b60      	ldr	r3, [pc, #384]	@ (800a6e4 <UART_SetConfig+0x4e4>)
 800a562:	fba3 2302 	umull	r2, r3, r3, r2
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	011c      	lsls	r4, r3, #4
 800a56a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a574:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	1891      	adds	r1, r2, r2
 800a582:	61b9      	str	r1, [r7, #24]
 800a584:	415b      	adcs	r3, r3
 800a586:	61fb      	str	r3, [r7, #28]
 800a588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a58c:	4641      	mov	r1, r8
 800a58e:	1851      	adds	r1, r2, r1
 800a590:	6139      	str	r1, [r7, #16]
 800a592:	4649      	mov	r1, r9
 800a594:	414b      	adcs	r3, r1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	00cb      	lsls	r3, r1, #3
 800a5a8:	4651      	mov	r1, sl
 800a5aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ae:	4651      	mov	r1, sl
 800a5b0:	00ca      	lsls	r2, r1, #3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	189b      	adds	r3, r3, r2
 800a5bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	460a      	mov	r2, r1
 800a5c4:	eb42 0303 	adc.w	r3, r2, r3
 800a5c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	008b      	lsls	r3, r1, #2
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	008a      	lsls	r2, r1, #2
 800a5f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a5f6:	f7f6 fb47 	bl	8000c88 <__aeabi_uldivmod>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4611      	mov	r1, r2
 800a600:	4b38      	ldr	r3, [pc, #224]	@ (800a6e4 <UART_SetConfig+0x4e4>)
 800a602:	fba3 2301 	umull	r2, r3, r3, r1
 800a606:	095b      	lsrs	r3, r3, #5
 800a608:	2264      	movs	r2, #100	@ 0x64
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	1acb      	subs	r3, r1, r3
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	3332      	adds	r3, #50	@ 0x32
 800a614:	4a33      	ldr	r2, [pc, #204]	@ (800a6e4 <UART_SetConfig+0x4e4>)
 800a616:	fba2 2303 	umull	r2, r3, r2, r3
 800a61a:	095b      	lsrs	r3, r3, #5
 800a61c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a620:	441c      	add	r4, r3
 800a622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a626:	2200      	movs	r2, #0
 800a628:	673b      	str	r3, [r7, #112]	@ 0x70
 800a62a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a62c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	1891      	adds	r1, r2, r2
 800a636:	60b9      	str	r1, [r7, #8]
 800a638:	415b      	adcs	r3, r3
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a640:	4641      	mov	r1, r8
 800a642:	1851      	adds	r1, r2, r1
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	4649      	mov	r1, r9
 800a648:	414b      	adcs	r3, r1
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a658:	4659      	mov	r1, fp
 800a65a:	00cb      	lsls	r3, r1, #3
 800a65c:	4651      	mov	r1, sl
 800a65e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a662:	4651      	mov	r1, sl
 800a664:	00ca      	lsls	r2, r1, #3
 800a666:	4610      	mov	r0, r2
 800a668:	4619      	mov	r1, r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	4642      	mov	r2, r8
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a672:	464b      	mov	r3, r9
 800a674:	460a      	mov	r2, r1
 800a676:	eb42 0303 	adc.w	r3, r2, r3
 800a67a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	663b      	str	r3, [r7, #96]	@ 0x60
 800a686:	667a      	str	r2, [r7, #100]	@ 0x64
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a694:	4649      	mov	r1, r9
 800a696:	008b      	lsls	r3, r1, #2
 800a698:	4641      	mov	r1, r8
 800a69a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a69e:	4641      	mov	r1, r8
 800a6a0:	008a      	lsls	r2, r1, #2
 800a6a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a6a6:	f7f6 faef 	bl	8000c88 <__aeabi_uldivmod>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <UART_SetConfig+0x4e4>)
 800a6b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	2164      	movs	r1, #100	@ 0x64
 800a6b8:	fb01 f303 	mul.w	r3, r1, r3
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	3332      	adds	r3, #50	@ 0x32
 800a6c2:	4a08      	ldr	r2, [pc, #32]	@ (800a6e4 <UART_SetConfig+0x4e4>)
 800a6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c8:	095b      	lsrs	r3, r3, #5
 800a6ca:	f003 020f 	and.w	r2, r3, #15
 800a6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4422      	add	r2, r4
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6e4:	51eb851f 	.word	0x51eb851f

0800a6e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6ec:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <SysTick_Handler+0x1c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6f0:	f001 fc44 	bl	800bf7c <xTaskGetSchedulerState>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d001      	beq.n	800a6fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6fa:	f002 fa3d 	bl	800cb78 <xPortSysTickHandler>
  }
}
 800a6fe:	bf00      	nop
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	e000e010 	.word	0xe000e010

0800a708 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4a07      	ldr	r2, [pc, #28]	@ (800a734 <vApplicationGetIdleTaskMemory+0x2c>)
 800a718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4a06      	ldr	r2, [pc, #24]	@ (800a738 <vApplicationGetIdleTaskMemory+0x30>)
 800a71e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2280      	movs	r2, #128	@ 0x80
 800a724:	601a      	str	r2, [r3, #0]
}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	20001ef4 	.word	0x20001ef4
 800a738:	20001f9c 	.word	0x20001f9c

0800a73c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4a07      	ldr	r2, [pc, #28]	@ (800a768 <vApplicationGetTimerTaskMemory+0x2c>)
 800a74c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	4a06      	ldr	r2, [pc, #24]	@ (800a76c <vApplicationGetTimerTaskMemory+0x30>)
 800a752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a75a:	601a      	str	r2, [r3, #0]
}
 800a75c:	bf00      	nop
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	2000219c 	.word	0x2000219c
 800a76c:	20002244 	.word	0x20002244

0800a770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f103 0208 	add.w	r2, r3, #8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f103 0208 	add.w	r2, r3, #8
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f103 0208 	add.w	r2, r3, #8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7be:	bf00      	nop
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
}
 800a806:	bf00      	nop
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d103      	bne.n	800a832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	e00c      	b.n	800a84c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3308      	adds	r3, #8
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	e002      	b.n	800a840 <vListInsert+0x2e>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d2f6      	bcs.n	800a83a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	601a      	str	r2, [r3, #0]
}
 800a878:	bf00      	nop
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6892      	ldr	r2, [r2, #8]
 800a89a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6852      	ldr	r2, [r2, #4]
 800a8a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d103      	bne.n	800a8b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689a      	ldr	r2, [r3, #8]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	1e5a      	subs	r2, r3, #1
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8fe:	bf00      	nop
 800a900:	bf00      	nop
 800a902:	e7fd      	b.n	800a900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a904:	f002 f8a8 	bl	800ca58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a910:	68f9      	ldr	r1, [r7, #12]
 800a912:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a914:	fb01 f303 	mul.w	r3, r1, r3
 800a918:	441a      	add	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a934:	3b01      	subs	r3, #1
 800a936:	68f9      	ldr	r1, [r7, #12]
 800a938:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a93a:	fb01 f303 	mul.w	r3, r1, r3
 800a93e:	441a      	add	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	22ff      	movs	r2, #255	@ 0xff
 800a948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	22ff      	movs	r2, #255	@ 0xff
 800a950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d114      	bne.n	800a984 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01a      	beq.n	800a998 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3310      	adds	r3, #16
 800a966:	4618      	mov	r0, r3
 800a968:	f001 f942 	bl	800bbf0 <xTaskRemoveFromEventList>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d012      	beq.n	800a998 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a972:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <xQueueGenericReset+0xd0>)
 800a974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	e009      	b.n	800a998 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3310      	adds	r3, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fef1 	bl	800a770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3324      	adds	r3, #36	@ 0x24
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff feec 	bl	800a770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a998:	f002 f890 	bl	800cabc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a99c:	2301      	movs	r3, #1
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08e      	sub	sp, #56	@ 0x38
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10b      	bne.n	800a9d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a9d2:	bf00      	nop
 800a9d4:	bf00      	nop
 800a9d6:	e7fd      	b.n	800a9d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10b      	bne.n	800a9f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9f0:	bf00      	nop
 800a9f2:	bf00      	nop
 800a9f4:	e7fd      	b.n	800a9f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <xQueueGenericCreateStatic+0x56>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <xQueueGenericCreateStatic+0x5a>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <xQueueGenericCreateStatic+0x5c>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10b      	bne.n	800aa24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	623b      	str	r3, [r7, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	e7fd      	b.n	800aa20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d102      	bne.n	800aa30 <xQueueGenericCreateStatic+0x84>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <xQueueGenericCreateStatic+0x88>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e000      	b.n	800aa36 <xQueueGenericCreateStatic+0x8a>
 800aa34:	2300      	movs	r3, #0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	61fb      	str	r3, [r7, #28]
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	e7fd      	b.n	800aa4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa52:	2350      	movs	r3, #80	@ 0x50
 800aa54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b50      	cmp	r3, #80	@ 0x50
 800aa5a:	d00b      	beq.n	800aa74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	61bb      	str	r3, [r7, #24]
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	e7fd      	b.n	800aa70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00d      	beq.n	800aa9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aa8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	4613      	mov	r3, r2
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	68b9      	ldr	r1, [r7, #8]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f805 	bl	800aaa6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3730      	adds	r7, #48	@ 0x30
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
 800aab2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d103      	bne.n	800aac2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	e002      	b.n	800aac8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aad4:	2101      	movs	r1, #1
 800aad6:	69b8      	ldr	r0, [r7, #24]
 800aad8:	f7ff fefe 	bl	800a8d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	78fa      	ldrb	r2, [r7, #3]
 800aae0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aae4:	bf00      	nop
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08e      	sub	sp, #56	@ 0x38
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aafa:	2300      	movs	r3, #0
 800aafc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10b      	bne.n	800ab20 <xQueueGenericSend+0x34>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	e7fd      	b.n	800ab1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d103      	bne.n	800ab2e <xQueueGenericSend+0x42>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <xQueueGenericSend+0x46>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xQueueGenericSend+0x48>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10b      	bne.n	800ab50 <xQueueGenericSend+0x64>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab4a:	bf00      	nop
 800ab4c:	bf00      	nop
 800ab4e:	e7fd      	b.n	800ab4c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d103      	bne.n	800ab5e <xQueueGenericSend+0x72>
 800ab56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d101      	bne.n	800ab62 <xQueueGenericSend+0x76>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <xQueueGenericSend+0x78>
 800ab62:	2300      	movs	r3, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10b      	bne.n	800ab80 <xQueueGenericSend+0x94>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	623b      	str	r3, [r7, #32]
}
 800ab7a:	bf00      	nop
 800ab7c:	bf00      	nop
 800ab7e:	e7fd      	b.n	800ab7c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab80:	f001 f9fc 	bl	800bf7c <xTaskGetSchedulerState>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d102      	bne.n	800ab90 <xQueueGenericSend+0xa4>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <xQueueGenericSend+0xa8>
 800ab90:	2301      	movs	r3, #1
 800ab92:	e000      	b.n	800ab96 <xQueueGenericSend+0xaa>
 800ab94:	2300      	movs	r3, #0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10b      	bne.n	800abb2 <xQueueGenericSend+0xc6>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	61fb      	str	r3, [r7, #28]
}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	e7fd      	b.n	800abae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abb2:	f001 ff51 	bl	800ca58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d302      	bcc.n	800abc8 <xQueueGenericSend+0xdc>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d129      	bne.n	800ac1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abce:	f000 fa0f 	bl	800aff0 <prvCopyDataToQueue>
 800abd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d010      	beq.n	800abfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abde:	3324      	adds	r3, #36	@ 0x24
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 f805 	bl	800bbf0 <xTaskRemoveFromEventList>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d013      	beq.n	800ac14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abec:	4b3f      	ldr	r3, [pc, #252]	@ (800acec <xQueueGenericSend+0x200>)
 800abee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	e00a      	b.n	800ac14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d007      	beq.n	800ac14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac04:	4b39      	ldr	r3, [pc, #228]	@ (800acec <xQueueGenericSend+0x200>)
 800ac06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac14:	f001 ff52 	bl	800cabc <vPortExitCritical>
				return pdPASS;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e063      	b.n	800ace4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d103      	bne.n	800ac2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac22:	f001 ff4b 	bl	800cabc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e05c      	b.n	800ace4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d106      	bne.n	800ac3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac30:	f107 0314 	add.w	r3, r7, #20
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f83f 	bl	800bcb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac3e:	f001 ff3d 	bl	800cabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac42:	f000 fda7 	bl	800b794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac46:	f001 ff07 	bl	800ca58 <vPortEnterCritical>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac50:	b25b      	sxtb	r3, r3
 800ac52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac56:	d103      	bne.n	800ac60 <xQueueGenericSend+0x174>
 800ac58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac66:	b25b      	sxtb	r3, r3
 800ac68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6c:	d103      	bne.n	800ac76 <xQueueGenericSend+0x18a>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac76:	f001 ff21 	bl	800cabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac7a:	1d3a      	adds	r2, r7, #4
 800ac7c:	f107 0314 	add.w	r3, r7, #20
 800ac80:	4611      	mov	r1, r2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f001 f82e 	bl	800bce4 <xTaskCheckForTimeOut>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d124      	bne.n	800acd8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac90:	f000 faa6 	bl	800b1e0 <prvIsQueueFull>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d018      	beq.n	800accc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	3310      	adds	r3, #16
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4611      	mov	r1, r2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 ff52 	bl	800bb4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acaa:	f000 fa31 	bl	800b110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800acae:	f000 fd7f 	bl	800b7b0 <xTaskResumeAll>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f47f af7c 	bne.w	800abb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800acba:	4b0c      	ldr	r3, [pc, #48]	@ (800acec <xQueueGenericSend+0x200>)
 800acbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	e772      	b.n	800abb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800accc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acce:	f000 fa1f 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acd2:	f000 fd6d 	bl	800b7b0 <xTaskResumeAll>
 800acd6:	e76c      	b.n	800abb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acda:	f000 fa19 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acde:	f000 fd67 	bl	800b7b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ace2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3738      	adds	r7, #56	@ 0x38
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	e000ed04 	.word	0xe000ed04

0800acf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b090      	sub	sp, #64	@ 0x40
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ad02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10b      	bne.n	800ad20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	e7fd      	b.n	800ad1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d103      	bne.n	800ad2e <xQueueGenericSendFromISR+0x3e>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <xQueueGenericSendFromISR+0x42>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e000      	b.n	800ad34 <xQueueGenericSendFromISR+0x44>
 800ad32:	2300      	movs	r3, #0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10b      	bne.n	800ad50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad4a:	bf00      	nop
 800ad4c:	bf00      	nop
 800ad4e:	e7fd      	b.n	800ad4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d103      	bne.n	800ad5e <xQueueGenericSendFromISR+0x6e>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <xQueueGenericSendFromISR+0x72>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <xQueueGenericSendFromISR+0x74>
 800ad62:	2300      	movs	r3, #0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10b      	bne.n	800ad80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	623b      	str	r3, [r7, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	bf00      	nop
 800ad7e:	e7fd      	b.n	800ad7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad80:	f001 ff4a 	bl	800cc18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad84:	f3ef 8211 	mrs	r2, BASEPRI
 800ad88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	61fa      	str	r2, [r7, #28]
 800ad9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ada4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d302      	bcc.n	800adb2 <xQueueGenericSendFromISR+0xc2>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d12f      	bne.n	800ae12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800adb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	68b9      	ldr	r1, [r7, #8]
 800adc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800adc8:	f000 f912 	bl	800aff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d112      	bne.n	800adfc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800add6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adda:	2b00      	cmp	r3, #0
 800addc:	d016      	beq.n	800ae0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade0:	3324      	adds	r3, #36	@ 0x24
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 ff04 	bl	800bbf0 <xTaskRemoveFromEventList>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00e      	beq.n	800ae0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	e007      	b.n	800ae0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800adfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ae00:	3301      	adds	r3, #1
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	b25a      	sxtb	r2, r3
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ae10:	e001      	b.n	800ae16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3740      	adds	r7, #64	@ 0x40
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08c      	sub	sp, #48	@ 0x30
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <xQueueReceive+0x32>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	623b      	str	r3, [r7, #32]
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	e7fd      	b.n	800ae5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d103      	bne.n	800ae6c <xQueueReceive+0x40>
 800ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <xQueueReceive+0x44>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e000      	b.n	800ae72 <xQueueReceive+0x46>
 800ae70:	2300      	movs	r3, #0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10b      	bne.n	800ae8e <xQueueReceive+0x62>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	61fb      	str	r3, [r7, #28]
}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	e7fd      	b.n	800ae8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae8e:	f001 f875 	bl	800bf7c <xTaskGetSchedulerState>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <xQueueReceive+0x72>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <xQueueReceive+0x76>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <xQueueReceive+0x78>
 800aea2:	2300      	movs	r3, #0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10b      	bne.n	800aec0 <xQueueReceive+0x94>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	61bb      	str	r3, [r7, #24]
}
 800aeba:	bf00      	nop
 800aebc:	bf00      	nop
 800aebe:	e7fd      	b.n	800aebc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aec0:	f001 fdca 	bl	800ca58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01f      	beq.n	800af10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aed4:	f000 f8f6 	bl	800b0c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeda:	1e5a      	subs	r2, r3, #1
 800aedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aede:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00f      	beq.n	800af08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	3310      	adds	r3, #16
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fe7f 	bl	800bbf0 <xTaskRemoveFromEventList>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aef8:	4b3c      	ldr	r3, [pc, #240]	@ (800afec <xQueueReceive+0x1c0>)
 800aefa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af08:	f001 fdd8 	bl	800cabc <vPortExitCritical>
				return pdPASS;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e069      	b.n	800afe4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d103      	bne.n	800af1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af16:	f001 fdd1 	bl	800cabc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e062      	b.n	800afe4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af24:	f107 0310 	add.w	r3, r7, #16
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 fec5 	bl	800bcb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af2e:	2301      	movs	r3, #1
 800af30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af32:	f001 fdc3 	bl	800cabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af36:	f000 fc2d 	bl	800b794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af3a:	f001 fd8d 	bl	800ca58 <vPortEnterCritical>
 800af3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af44:	b25b      	sxtb	r3, r3
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d103      	bne.n	800af54 <xQueueReceive+0x128>
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af5a:	b25b      	sxtb	r3, r3
 800af5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af60:	d103      	bne.n	800af6a <xQueueReceive+0x13e>
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af6a:	f001 fda7 	bl	800cabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af6e:	1d3a      	adds	r2, r7, #4
 800af70:	f107 0310 	add.w	r3, r7, #16
 800af74:	4611      	mov	r1, r2
 800af76:	4618      	mov	r0, r3
 800af78:	f000 feb4 	bl	800bce4 <xTaskCheckForTimeOut>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d123      	bne.n	800afca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af84:	f000 f916 	bl	800b1b4 <prvIsQueueEmpty>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d017      	beq.n	800afbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af90:	3324      	adds	r3, #36	@ 0x24
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	4611      	mov	r1, r2
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fdd8 	bl	800bb4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af9e:	f000 f8b7 	bl	800b110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afa2:	f000 fc05 	bl	800b7b0 <xTaskResumeAll>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d189      	bne.n	800aec0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800afac:	4b0f      	ldr	r3, [pc, #60]	@ (800afec <xQueueReceive+0x1c0>)
 800afae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	e780      	b.n	800aec0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800afbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afc0:	f000 f8a6 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afc4:	f000 fbf4 	bl	800b7b0 <xTaskResumeAll>
 800afc8:	e77a      	b.n	800aec0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800afca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afcc:	f000 f8a0 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afd0:	f000 fbee 	bl	800b7b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afd6:	f000 f8ed 	bl	800b1b4 <prvIsQueueEmpty>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f43f af6f 	beq.w	800aec0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800afe2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3730      	adds	r7, #48	@ 0x30
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800affc:	2300      	movs	r3, #0
 800affe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10d      	bne.n	800b02a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d14d      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 ffcc 	bl	800bfb8 <xTaskPriorityDisinherit>
 800b020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	e043      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d119      	bne.n	800b064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6858      	ldr	r0, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b038:	461a      	mov	r2, r3
 800b03a:	68b9      	ldr	r1, [r7, #8]
 800b03c:	f002 fff9 	bl	800e032 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b048:	441a      	add	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	429a      	cmp	r2, r3
 800b058:	d32b      	bcc.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	e026      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68d8      	ldr	r0, [r3, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06c:	461a      	mov	r2, r3
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	f002 ffdf 	bl	800e032 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07c:	425b      	negs	r3, r3
 800b07e:	441a      	add	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d207      	bcs.n	800b0a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b098:	425b      	negs	r3, r3
 800b09a:	441a      	add	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d105      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b0ba:	697b      	ldr	r3, [r7, #20]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d018      	beq.n	800b108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0de:	441a      	add	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d303      	bcc.n	800b0f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68d9      	ldr	r1, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	461a      	mov	r2, r3
 800b102:	6838      	ldr	r0, [r7, #0]
 800b104:	f002 ff95 	bl	800e032 <memcpy>
	}
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b118:	f001 fc9e 	bl	800ca58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b124:	e011      	b.n	800b14a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d012      	beq.n	800b154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3324      	adds	r3, #36	@ 0x24
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fd5c 	bl	800bbf0 <xTaskRemoveFromEventList>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b13e:	f000 fe35 	bl	800bdac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	3b01      	subs	r3, #1
 800b146:	b2db      	uxtb	r3, r3
 800b148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dce9      	bgt.n	800b126 <prvUnlockQueue+0x16>
 800b152:	e000      	b.n	800b156 <prvUnlockQueue+0x46>
					break;
 800b154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	22ff      	movs	r2, #255	@ 0xff
 800b15a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b15e:	f001 fcad 	bl	800cabc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b162:	f001 fc79 	bl	800ca58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b16c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b16e:	e011      	b.n	800b194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3310      	adds	r3, #16
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fd37 	bl	800bbf0 <xTaskRemoveFromEventList>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b188:	f000 fe10 	bl	800bdac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	3b01      	subs	r3, #1
 800b190:	b2db      	uxtb	r3, r3
 800b192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dce9      	bgt.n	800b170 <prvUnlockQueue+0x60>
 800b19c:	e000      	b.n	800b1a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b19e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	22ff      	movs	r2, #255	@ 0xff
 800b1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b1a8:	f001 fc88 	bl	800cabc <vPortExitCritical>
}
 800b1ac:	bf00      	nop
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1bc:	f001 fc4c 	bl	800ca58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e001      	b.n	800b1d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1d2:	f001 fc73 	bl	800cabc <vPortExitCritical>

	return xReturn;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1e8:	f001 fc36 	bl	800ca58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d102      	bne.n	800b1fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e001      	b.n	800b202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b202:	f001 fc5b 	bl	800cabc <vPortExitCritical>

	return xReturn;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b21a:	2300      	movs	r3, #0
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e014      	b.n	800b24a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b220:	4a0f      	ldr	r2, [pc, #60]	@ (800b260 <vQueueAddToRegistry+0x50>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10b      	bne.n	800b244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b22c:	490c      	ldr	r1, [pc, #48]	@ (800b260 <vQueueAddToRegistry+0x50>)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b236:	4a0a      	ldr	r2, [pc, #40]	@ (800b260 <vQueueAddToRegistry+0x50>)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	4413      	add	r3, r2
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b242:	e006      	b.n	800b252 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b07      	cmp	r3, #7
 800b24e:	d9e7      	bls.n	800b220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	20002644 	.word	0x20002644

0800b264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b274:	f001 fbf0 	bl	800ca58 <vPortEnterCritical>
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b27e:	b25b      	sxtb	r3, r3
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b284:	d103      	bne.n	800b28e <vQueueWaitForMessageRestricted+0x2a>
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b294:	b25b      	sxtb	r3, r3
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29a:	d103      	bne.n	800b2a4 <vQueueWaitForMessageRestricted+0x40>
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2a4:	f001 fc0a 	bl	800cabc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	3324      	adds	r3, #36	@ 0x24
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fc6d 	bl	800bb98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2be:	6978      	ldr	r0, [r7, #20]
 800b2c0:	f7ff ff26 	bl	800b110 <prvUnlockQueue>
	}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08e      	sub	sp, #56	@ 0x38
 800b2d0:	af04      	add	r7, sp, #16
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10b      	bne.n	800b2f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	623b      	str	r3, [r7, #32]
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10b      	bne.n	800b316 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	61fb      	str	r3, [r7, #28]
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	e7fd      	b.n	800b312 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b316:	23a8      	movs	r3, #168	@ 0xa8
 800b318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b31e:	d00b      	beq.n	800b338 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	61bb      	str	r3, [r7, #24]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b338:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01e      	beq.n	800b37e <xTaskCreateStatic+0xb2>
 800b340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d01b      	beq.n	800b37e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b348:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b34e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	2202      	movs	r2, #2
 800b354:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b358:	2300      	movs	r3, #0
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	f107 0314 	add.w	r3, r7, #20
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 f851 	bl	800b418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b376:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b378:	f000 f8f6 	bl	800b568 <prvAddNewTaskToReadyList>
 800b37c:	e001      	b.n	800b382 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b382:	697b      	ldr	r3, [r7, #20]
	}
 800b384:	4618      	mov	r0, r3
 800b386:	3728      	adds	r7, #40	@ 0x28
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08c      	sub	sp, #48	@ 0x30
 800b390:	af04      	add	r7, sp, #16
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	4613      	mov	r3, r2
 800b39a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 fc7b 	bl	800cc9c <pvPortMalloc>
 800b3a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00e      	beq.n	800b3cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3ae:	20a8      	movs	r0, #168	@ 0xa8
 800b3b0:	f001 fc74 	bl	800cc9c <pvPortMalloc>
 800b3b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3c2:	e005      	b.n	800b3d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3c4:	6978      	ldr	r0, [r7, #20]
 800b3c6:	f001 fd37 	bl	800ce38 <vPortFree>
 800b3ca:	e001      	b.n	800b3d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d017      	beq.n	800b406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3de:	88fa      	ldrh	r2, [r7, #6]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	9302      	str	r3, [sp, #8]
 800b3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	68b9      	ldr	r1, [r7, #8]
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 f80f 	bl	800b418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3fa:	69f8      	ldr	r0, [r7, #28]
 800b3fc:	f000 f8b4 	bl	800b568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b400:	2301      	movs	r3, #1
 800b402:	61bb      	str	r3, [r7, #24]
 800b404:	e002      	b.n	800b40c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b406:	f04f 33ff 	mov.w	r3, #4294967295
 800b40a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b40c:	69bb      	ldr	r3, [r7, #24]
	}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
 800b424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	461a      	mov	r2, r3
 800b430:	21a5      	movs	r1, #165	@ 0xa5
 800b432:	f002 fc26 	bl	800dc82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b440:	3b01      	subs	r3, #1
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f023 0307 	bic.w	r3, r3, #7
 800b44e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00b      	beq.n	800b472 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	617b      	str	r3, [r7, #20]
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	e7fd      	b.n	800b46e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01f      	beq.n	800b4b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b478:	2300      	movs	r3, #0
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e012      	b.n	800b4a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	4413      	add	r3, r2
 800b484:	7819      	ldrb	r1, [r3, #0]
 800b486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	4413      	add	r3, r2
 800b48c:	3334      	adds	r3, #52	@ 0x34
 800b48e:	460a      	mov	r2, r1
 800b490:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d006      	beq.n	800b4ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	61fb      	str	r3, [r7, #28]
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	2b0f      	cmp	r3, #15
 800b4a8:	d9e9      	bls.n	800b47e <prvInitialiseNewTask+0x66>
 800b4aa:	e000      	b.n	800b4ae <prvInitialiseNewTask+0x96>
			{
				break;
 800b4ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b4b6:	e003      	b.n	800b4c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	2b37      	cmp	r3, #55	@ 0x37
 800b4c4:	d901      	bls.n	800b4ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4c6:	2337      	movs	r3, #55	@ 0x37
 800b4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d8:	2200      	movs	r2, #0
 800b4da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff f965 	bl	800a7b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	3318      	adds	r3, #24
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff f960 	bl	800a7b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b504:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	2200      	movs	r2, #0
 800b50a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	2200      	movs	r2, #0
 800b512:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	3354      	adds	r3, #84	@ 0x54
 800b51a:	224c      	movs	r2, #76	@ 0x4c
 800b51c:	2100      	movs	r1, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 fbaf 	bl	800dc82 <memset>
 800b524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b526:	4a0d      	ldr	r2, [pc, #52]	@ (800b55c <prvInitialiseNewTask+0x144>)
 800b528:	659a      	str	r2, [r3, #88]	@ 0x58
 800b52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52c:	4a0c      	ldr	r2, [pc, #48]	@ (800b560 <prvInitialiseNewTask+0x148>)
 800b52e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	4a0c      	ldr	r2, [pc, #48]	@ (800b564 <prvInitialiseNewTask+0x14c>)
 800b534:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	68f9      	ldr	r1, [r7, #12]
 800b53a:	69b8      	ldr	r0, [r7, #24]
 800b53c:	f001 f95a 	bl	800c7f4 <pxPortInitialiseStack>
 800b540:	4602      	mov	r2, r0
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b552:	bf00      	nop
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	2000c918 	.word	0x2000c918
 800b560:	2000c980 	.word	0x2000c980
 800b564:	2000c9e8 	.word	0x2000c9e8

0800b568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b570:	f001 fa72 	bl	800ca58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b574:	4b2d      	ldr	r3, [pc, #180]	@ (800b62c <prvAddNewTaskToReadyList+0xc4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3301      	adds	r3, #1
 800b57a:	4a2c      	ldr	r2, [pc, #176]	@ (800b62c <prvAddNewTaskToReadyList+0xc4>)
 800b57c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b57e:	4b2c      	ldr	r3, [pc, #176]	@ (800b630 <prvAddNewTaskToReadyList+0xc8>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d109      	bne.n	800b59a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b586:	4a2a      	ldr	r2, [pc, #168]	@ (800b630 <prvAddNewTaskToReadyList+0xc8>)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b58c:	4b27      	ldr	r3, [pc, #156]	@ (800b62c <prvAddNewTaskToReadyList+0xc4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d110      	bne.n	800b5b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b594:	f000 fc2e 	bl	800bdf4 <prvInitialiseTaskLists>
 800b598:	e00d      	b.n	800b5b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b59a:	4b26      	ldr	r3, [pc, #152]	@ (800b634 <prvAddNewTaskToReadyList+0xcc>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d109      	bne.n	800b5b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5a2:	4b23      	ldr	r3, [pc, #140]	@ (800b630 <prvAddNewTaskToReadyList+0xc8>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d802      	bhi.n	800b5b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b630 <prvAddNewTaskToReadyList+0xc8>)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5b6:	4b20      	ldr	r3, [pc, #128]	@ (800b638 <prvAddNewTaskToReadyList+0xd0>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	4a1e      	ldr	r2, [pc, #120]	@ (800b638 <prvAddNewTaskToReadyList+0xd0>)
 800b5be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b638 <prvAddNewTaskToReadyList+0xd0>)
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b63c <prvAddNewTaskToReadyList+0xd4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d903      	bls.n	800b5dc <prvAddNewTaskToReadyList+0x74>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d8:	4a18      	ldr	r2, [pc, #96]	@ (800b63c <prvAddNewTaskToReadyList+0xd4>)
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4a15      	ldr	r2, [pc, #84]	@ (800b640 <prvAddNewTaskToReadyList+0xd8>)
 800b5ea:	441a      	add	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	f7ff f8e9 	bl	800a7ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5f8:	f001 fa60 	bl	800cabc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b634 <prvAddNewTaskToReadyList+0xcc>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00e      	beq.n	800b622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b604:	4b0a      	ldr	r3, [pc, #40]	@ (800b630 <prvAddNewTaskToReadyList+0xc8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60e:	429a      	cmp	r2, r3
 800b610:	d207      	bcs.n	800b622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b612:	4b0c      	ldr	r3, [pc, #48]	@ (800b644 <prvAddNewTaskToReadyList+0xdc>)
 800b614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20002b58 	.word	0x20002b58
 800b630:	20002684 	.word	0x20002684
 800b634:	20002b64 	.word	0x20002b64
 800b638:	20002b74 	.word	0x20002b74
 800b63c:	20002b60 	.word	0x20002b60
 800b640:	20002688 	.word	0x20002688
 800b644:	e000ed04 	.word	0xe000ed04

0800b648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b650:	2300      	movs	r3, #0
 800b652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d018      	beq.n	800b68c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b65a:	4b14      	ldr	r3, [pc, #80]	@ (800b6ac <vTaskDelay+0x64>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00b      	beq.n	800b67a <vTaskDelay+0x32>
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	60bb      	str	r3, [r7, #8]
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop
 800b678:	e7fd      	b.n	800b676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b67a:	f000 f88b 	bl	800b794 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b67e:	2100      	movs	r1, #0
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fd09 	bl	800c098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b686:	f000 f893 	bl	800b7b0 <xTaskResumeAll>
 800b68a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d107      	bne.n	800b6a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b692:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <vTaskDelay+0x68>)
 800b694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20002b80 	.word	0x20002b80
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08a      	sub	sp, #40	@ 0x28
 800b6b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6c2:	463a      	mov	r2, r7
 800b6c4:	1d39      	adds	r1, r7, #4
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff f81c 	bl	800a708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	9202      	str	r2, [sp, #8]
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	460a      	mov	r2, r1
 800b6e2:	4924      	ldr	r1, [pc, #144]	@ (800b774 <vTaskStartScheduler+0xc0>)
 800b6e4:	4824      	ldr	r0, [pc, #144]	@ (800b778 <vTaskStartScheduler+0xc4>)
 800b6e6:	f7ff fdf1 	bl	800b2cc <xTaskCreateStatic>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4a23      	ldr	r2, [pc, #140]	@ (800b77c <vTaskStartScheduler+0xc8>)
 800b6ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6f0:	4b22      	ldr	r3, [pc, #136]	@ (800b77c <vTaskStartScheduler+0xc8>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e001      	b.n	800b702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d102      	bne.n	800b70e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b708:	f000 fd1a 	bl	800c140 <xTimerCreateTimerTask>
 800b70c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d11b      	bne.n	800b74c <vTaskStartScheduler+0x98>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	613b      	str	r3, [r7, #16]
}
 800b726:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b728:	4b15      	ldr	r3, [pc, #84]	@ (800b780 <vTaskStartScheduler+0xcc>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3354      	adds	r3, #84	@ 0x54
 800b72e:	4a15      	ldr	r2, [pc, #84]	@ (800b784 <vTaskStartScheduler+0xd0>)
 800b730:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b732:	4b15      	ldr	r3, [pc, #84]	@ (800b788 <vTaskStartScheduler+0xd4>)
 800b734:	f04f 32ff 	mov.w	r2, #4294967295
 800b738:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b73a:	4b14      	ldr	r3, [pc, #80]	@ (800b78c <vTaskStartScheduler+0xd8>)
 800b73c:	2201      	movs	r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b740:	4b13      	ldr	r3, [pc, #76]	@ (800b790 <vTaskStartScheduler+0xdc>)
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b746:	f001 f8e3 	bl	800c910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b74a:	e00f      	b.n	800b76c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b752:	d10b      	bne.n	800b76c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	60fb      	str	r3, [r7, #12]
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	e7fd      	b.n	800b768 <vTaskStartScheduler+0xb4>
}
 800b76c:	bf00      	nop
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	080107d4 	.word	0x080107d4
 800b778:	0800bdc5 	.word	0x0800bdc5
 800b77c:	20002b7c 	.word	0x20002b7c
 800b780:	20002684 	.word	0x20002684
 800b784:	20000064 	.word	0x20000064
 800b788:	20002b78 	.word	0x20002b78
 800b78c:	20002b64 	.word	0x20002b64
 800b790:	20002b5c 	.word	0x20002b5c

0800b794 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b798:	4b04      	ldr	r3, [pc, #16]	@ (800b7ac <vTaskSuspendAll+0x18>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3301      	adds	r3, #1
 800b79e:	4a03      	ldr	r2, [pc, #12]	@ (800b7ac <vTaskSuspendAll+0x18>)
 800b7a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7a2:	bf00      	nop
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20002b80 	.word	0x20002b80

0800b7b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7be:	4b42      	ldr	r3, [pc, #264]	@ (800b8c8 <xTaskResumeAll+0x118>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10b      	bne.n	800b7de <xTaskResumeAll+0x2e>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	603b      	str	r3, [r7, #0]
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	e7fd      	b.n	800b7da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7de:	f001 f93b 	bl	800ca58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7e2:	4b39      	ldr	r3, [pc, #228]	@ (800b8c8 <xTaskResumeAll+0x118>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	4a37      	ldr	r2, [pc, #220]	@ (800b8c8 <xTaskResumeAll+0x118>)
 800b7ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ec:	4b36      	ldr	r3, [pc, #216]	@ (800b8c8 <xTaskResumeAll+0x118>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d162      	bne.n	800b8ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7f4:	4b35      	ldr	r3, [pc, #212]	@ (800b8cc <xTaskResumeAll+0x11c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d05e      	beq.n	800b8ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7fc:	e02f      	b.n	800b85e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7fe:	4b34      	ldr	r3, [pc, #208]	@ (800b8d0 <xTaskResumeAll+0x120>)
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3318      	adds	r3, #24
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff f83a 	bl	800a884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3304      	adds	r3, #4
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff f835 	bl	800a884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81e:	4b2d      	ldr	r3, [pc, #180]	@ (800b8d4 <xTaskResumeAll+0x124>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d903      	bls.n	800b82e <xTaskResumeAll+0x7e>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8d4 <xTaskResumeAll+0x124>)
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b832:	4613      	mov	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4a27      	ldr	r2, [pc, #156]	@ (800b8d8 <xTaskResumeAll+0x128>)
 800b83c:	441a      	add	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3304      	adds	r3, #4
 800b842:	4619      	mov	r1, r3
 800b844:	4610      	mov	r0, r2
 800b846:	f7fe ffc0 	bl	800a7ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b84e:	4b23      	ldr	r3, [pc, #140]	@ (800b8dc <xTaskResumeAll+0x12c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b854:	429a      	cmp	r2, r3
 800b856:	d302      	bcc.n	800b85e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b858:	4b21      	ldr	r3, [pc, #132]	@ (800b8e0 <xTaskResumeAll+0x130>)
 800b85a:	2201      	movs	r2, #1
 800b85c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b85e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8d0 <xTaskResumeAll+0x120>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1cb      	bne.n	800b7fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b86c:	f000 fb66 	bl	800bf3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b870:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e4 <xTaskResumeAll+0x134>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d010      	beq.n	800b89e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b87c:	f000 f846 	bl	800b90c <xTaskIncrementTick>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b886:	4b16      	ldr	r3, [pc, #88]	@ (800b8e0 <xTaskResumeAll+0x130>)
 800b888:	2201      	movs	r2, #1
 800b88a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3b01      	subs	r3, #1
 800b890:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1f1      	bne.n	800b87c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b898:	4b12      	ldr	r3, [pc, #72]	@ (800b8e4 <xTaskResumeAll+0x134>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b89e:	4b10      	ldr	r3, [pc, #64]	@ (800b8e0 <xTaskResumeAll+0x130>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d009      	beq.n	800b8ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e8 <xTaskResumeAll+0x138>)
 800b8ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8ba:	f001 f8ff 	bl	800cabc <vPortExitCritical>

	return xAlreadyYielded;
 800b8be:	68bb      	ldr	r3, [r7, #8]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20002b80 	.word	0x20002b80
 800b8cc:	20002b58 	.word	0x20002b58
 800b8d0:	20002b18 	.word	0x20002b18
 800b8d4:	20002b60 	.word	0x20002b60
 800b8d8:	20002688 	.word	0x20002688
 800b8dc:	20002684 	.word	0x20002684
 800b8e0:	20002b6c 	.word	0x20002b6c
 800b8e4:	20002b68 	.word	0x20002b68
 800b8e8:	e000ed04 	.word	0xe000ed04

0800b8ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8f2:	4b05      	ldr	r3, [pc, #20]	@ (800b908 <xTaskGetTickCount+0x1c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8f8:	687b      	ldr	r3, [r7, #4]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	20002b5c 	.word	0x20002b5c

0800b90c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b912:	2300      	movs	r3, #0
 800b914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b916:	4b4f      	ldr	r3, [pc, #316]	@ (800ba54 <xTaskIncrementTick+0x148>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f040 8090 	bne.w	800ba40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b920:	4b4d      	ldr	r3, [pc, #308]	@ (800ba58 <xTaskIncrementTick+0x14c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3301      	adds	r3, #1
 800b926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b928:	4a4b      	ldr	r2, [pc, #300]	@ (800ba58 <xTaskIncrementTick+0x14c>)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d121      	bne.n	800b978 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b934:	4b49      	ldr	r3, [pc, #292]	@ (800ba5c <xTaskIncrementTick+0x150>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00b      	beq.n	800b956 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	603b      	str	r3, [r7, #0]
}
 800b950:	bf00      	nop
 800b952:	bf00      	nop
 800b954:	e7fd      	b.n	800b952 <xTaskIncrementTick+0x46>
 800b956:	4b41      	ldr	r3, [pc, #260]	@ (800ba5c <xTaskIncrementTick+0x150>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]
 800b95c:	4b40      	ldr	r3, [pc, #256]	@ (800ba60 <xTaskIncrementTick+0x154>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a3e      	ldr	r2, [pc, #248]	@ (800ba5c <xTaskIncrementTick+0x150>)
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	4a3e      	ldr	r2, [pc, #248]	@ (800ba60 <xTaskIncrementTick+0x154>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	4b3e      	ldr	r3, [pc, #248]	@ (800ba64 <xTaskIncrementTick+0x158>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3301      	adds	r3, #1
 800b970:	4a3c      	ldr	r2, [pc, #240]	@ (800ba64 <xTaskIncrementTick+0x158>)
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	f000 fae2 	bl	800bf3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b978:	4b3b      	ldr	r3, [pc, #236]	@ (800ba68 <xTaskIncrementTick+0x15c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d349      	bcc.n	800ba16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b982:	4b36      	ldr	r3, [pc, #216]	@ (800ba5c <xTaskIncrementTick+0x150>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d104      	bne.n	800b996 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b98c:	4b36      	ldr	r3, [pc, #216]	@ (800ba68 <xTaskIncrementTick+0x15c>)
 800b98e:	f04f 32ff 	mov.w	r2, #4294967295
 800b992:	601a      	str	r2, [r3, #0]
					break;
 800b994:	e03f      	b.n	800ba16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b996:	4b31      	ldr	r3, [pc, #196]	@ (800ba5c <xTaskIncrementTick+0x150>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d203      	bcs.n	800b9b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9ae:	4a2e      	ldr	r2, [pc, #184]	@ (800ba68 <xTaskIncrementTick+0x15c>)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9b4:	e02f      	b.n	800ba16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe ff62 	bl	800a884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	3318      	adds	r3, #24
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe ff59 	bl	800a884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d6:	4b25      	ldr	r3, [pc, #148]	@ (800ba6c <xTaskIncrementTick+0x160>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d903      	bls.n	800b9e6 <xTaskIncrementTick+0xda>
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e2:	4a22      	ldr	r2, [pc, #136]	@ (800ba6c <xTaskIncrementTick+0x160>)
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4413      	add	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4a1f      	ldr	r2, [pc, #124]	@ (800ba70 <xTaskIncrementTick+0x164>)
 800b9f4:	441a      	add	r2, r3
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	f7fe fee4 	bl	800a7ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba06:	4b1b      	ldr	r3, [pc, #108]	@ (800ba74 <xTaskIncrementTick+0x168>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d3b8      	bcc.n	800b982 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ba10:	2301      	movs	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba14:	e7b5      	b.n	800b982 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba16:	4b17      	ldr	r3, [pc, #92]	@ (800ba74 <xTaskIncrementTick+0x168>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba1c:	4914      	ldr	r1, [pc, #80]	@ (800ba70 <xTaskIncrementTick+0x164>)
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	440b      	add	r3, r1
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d901      	bls.n	800ba32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba32:	4b11      	ldr	r3, [pc, #68]	@ (800ba78 <xTaskIncrementTick+0x16c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d007      	beq.n	800ba4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	e004      	b.n	800ba4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba40:	4b0e      	ldr	r3, [pc, #56]	@ (800ba7c <xTaskIncrementTick+0x170>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3301      	adds	r3, #1
 800ba46:	4a0d      	ldr	r2, [pc, #52]	@ (800ba7c <xTaskIncrementTick+0x170>)
 800ba48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba4a:	697b      	ldr	r3, [r7, #20]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20002b80 	.word	0x20002b80
 800ba58:	20002b5c 	.word	0x20002b5c
 800ba5c:	20002b10 	.word	0x20002b10
 800ba60:	20002b14 	.word	0x20002b14
 800ba64:	20002b70 	.word	0x20002b70
 800ba68:	20002b78 	.word	0x20002b78
 800ba6c:	20002b60 	.word	0x20002b60
 800ba70:	20002688 	.word	0x20002688
 800ba74:	20002684 	.word	0x20002684
 800ba78:	20002b6c 	.word	0x20002b6c
 800ba7c:	20002b68 	.word	0x20002b68

0800ba80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba86:	4b2b      	ldr	r3, [pc, #172]	@ (800bb34 <vTaskSwitchContext+0xb4>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba8e:	4b2a      	ldr	r3, [pc, #168]	@ (800bb38 <vTaskSwitchContext+0xb8>)
 800ba90:	2201      	movs	r2, #1
 800ba92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba94:	e047      	b.n	800bb26 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ba96:	4b28      	ldr	r3, [pc, #160]	@ (800bb38 <vTaskSwitchContext+0xb8>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba9c:	4b27      	ldr	r3, [pc, #156]	@ (800bb3c <vTaskSwitchContext+0xbc>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	e011      	b.n	800bac8 <vTaskSwitchContext+0x48>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10b      	bne.n	800bac2 <vTaskSwitchContext+0x42>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	607b      	str	r3, [r7, #4]
}
 800babc:	bf00      	nop
 800babe:	bf00      	nop
 800bac0:	e7fd      	b.n	800babe <vTaskSwitchContext+0x3e>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	491d      	ldr	r1, [pc, #116]	@ (800bb40 <vTaskSwitchContext+0xc0>)
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	4613      	mov	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	440b      	add	r3, r1
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0e3      	beq.n	800baa4 <vTaskSwitchContext+0x24>
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	4613      	mov	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4a16      	ldr	r2, [pc, #88]	@ (800bb40 <vTaskSwitchContext+0xc0>)
 800bae8:	4413      	add	r3, r2
 800baea:	60bb      	str	r3, [r7, #8]
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	605a      	str	r2, [r3, #4]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	3308      	adds	r3, #8
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d104      	bne.n	800bb0c <vTaskSwitchContext+0x8c>
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	605a      	str	r2, [r3, #4]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	4a0c      	ldr	r2, [pc, #48]	@ (800bb44 <vTaskSwitchContext+0xc4>)
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	4a09      	ldr	r2, [pc, #36]	@ (800bb3c <vTaskSwitchContext+0xbc>)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb1c:	4b09      	ldr	r3, [pc, #36]	@ (800bb44 <vTaskSwitchContext+0xc4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3354      	adds	r3, #84	@ 0x54
 800bb22:	4a09      	ldr	r2, [pc, #36]	@ (800bb48 <vTaskSwitchContext+0xc8>)
 800bb24:	6013      	str	r3, [r2, #0]
}
 800bb26:	bf00      	nop
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	20002b80 	.word	0x20002b80
 800bb38:	20002b6c 	.word	0x20002b6c
 800bb3c:	20002b60 	.word	0x20002b60
 800bb40:	20002688 	.word	0x20002688
 800bb44:	20002684 	.word	0x20002684
 800bb48:	20000064 	.word	0x20000064

0800bb4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10b      	bne.n	800bb74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb74:	4b07      	ldr	r3, [pc, #28]	@ (800bb94 <vTaskPlaceOnEventList+0x48>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3318      	adds	r3, #24
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7fe fe48 	bl	800a812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb82:	2101      	movs	r1, #1
 800bb84:	6838      	ldr	r0, [r7, #0]
 800bb86:	f000 fa87 	bl	800c098 <prvAddCurrentTaskToDelayedList>
}
 800bb8a:	bf00      	nop
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20002684 	.word	0x20002684

0800bb98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10b      	bne.n	800bbc2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	617b      	str	r3, [r7, #20]
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	e7fd      	b.n	800bbbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbec <vTaskPlaceOnEventListRestricted+0x54>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	4619      	mov	r1, r3
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7fe fdfd 	bl	800a7ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	68b8      	ldr	r0, [r7, #8]
 800bbe0:	f000 fa5a 	bl	800c098 <prvAddCurrentTaskToDelayedList>
	}
 800bbe4:	bf00      	nop
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20002684 	.word	0x20002684

0800bbf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10b      	bne.n	800bc1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	60fb      	str	r3, [r7, #12]
}
 800bc18:	bf00      	nop
 800bc1a:	bf00      	nop
 800bc1c:	e7fd      	b.n	800bc1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	3318      	adds	r3, #24
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fe fe2e 	bl	800a884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc28:	4b1d      	ldr	r3, [pc, #116]	@ (800bca0 <xTaskRemoveFromEventList+0xb0>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d11d      	bne.n	800bc6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fe25 	bl	800a884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3e:	4b19      	ldr	r3, [pc, #100]	@ (800bca4 <xTaskRemoveFromEventList+0xb4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d903      	bls.n	800bc4e <xTaskRemoveFromEventList+0x5e>
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4a:	4a16      	ldr	r2, [pc, #88]	@ (800bca4 <xTaskRemoveFromEventList+0xb4>)
 800bc4c:	6013      	str	r3, [r2, #0]
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4a13      	ldr	r2, [pc, #76]	@ (800bca8 <xTaskRemoveFromEventList+0xb8>)
 800bc5c:	441a      	add	r2, r3
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4619      	mov	r1, r3
 800bc64:	4610      	mov	r0, r2
 800bc66:	f7fe fdb0 	bl	800a7ca <vListInsertEnd>
 800bc6a:	e005      	b.n	800bc78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	3318      	adds	r3, #24
 800bc70:	4619      	mov	r1, r3
 800bc72:	480e      	ldr	r0, [pc, #56]	@ (800bcac <xTaskRemoveFromEventList+0xbc>)
 800bc74:	f7fe fda9 	bl	800a7ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb0 <xTaskRemoveFromEventList+0xc0>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d905      	bls.n	800bc92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc86:	2301      	movs	r3, #1
 800bc88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb4 <xTaskRemoveFromEventList+0xc4>)
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	e001      	b.n	800bc96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bc92:	2300      	movs	r3, #0
 800bc94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc96:	697b      	ldr	r3, [r7, #20]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20002b80 	.word	0x20002b80
 800bca4:	20002b60 	.word	0x20002b60
 800bca8:	20002688 	.word	0x20002688
 800bcac:	20002b18 	.word	0x20002b18
 800bcb0:	20002684 	.word	0x20002684
 800bcb4:	20002b6c 	.word	0x20002b6c

0800bcb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <vTaskInternalSetTimeOutState+0x24>)
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcc8:	4b05      	ldr	r3, [pc, #20]	@ (800bce0 <vTaskInternalSetTimeOutState+0x28>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	605a      	str	r2, [r3, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	20002b70 	.word	0x20002b70
 800bce0:	20002b5c 	.word	0x20002b5c

0800bce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b088      	sub	sp, #32
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10b      	bne.n	800bd0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	613b      	str	r3, [r7, #16]
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	e7fd      	b.n	800bd08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10b      	bne.n	800bd2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	60fb      	str	r3, [r7, #12]
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop
 800bd28:	e7fd      	b.n	800bd26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bd2a:	f000 fe95 	bl	800ca58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd2e:	4b1d      	ldr	r3, [pc, #116]	@ (800bda4 <xTaskCheckForTimeOut+0xc0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	69ba      	ldr	r2, [r7, #24]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d102      	bne.n	800bd4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	e023      	b.n	800bd96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	4b15      	ldr	r3, [pc, #84]	@ (800bda8 <xTaskCheckForTimeOut+0xc4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d007      	beq.n	800bd6a <xTaskCheckForTimeOut+0x86>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d302      	bcc.n	800bd6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd64:	2301      	movs	r3, #1
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	e015      	b.n	800bd96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d20b      	bcs.n	800bd8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	1ad2      	subs	r2, r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff ff99 	bl	800bcb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd86:	2300      	movs	r3, #0
 800bd88:	61fb      	str	r3, [r7, #28]
 800bd8a:	e004      	b.n	800bd96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd92:	2301      	movs	r3, #1
 800bd94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd96:	f000 fe91 	bl	800cabc <vPortExitCritical>

	return xReturn;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3720      	adds	r7, #32
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20002b5c 	.word	0x20002b5c
 800bda8:	20002b70 	.word	0x20002b70

0800bdac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bdac:	b480      	push	{r7}
 800bdae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdb0:	4b03      	ldr	r3, [pc, #12]	@ (800bdc0 <vTaskMissedYield+0x14>)
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]
}
 800bdb6:	bf00      	nop
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	20002b6c 	.word	0x20002b6c

0800bdc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdcc:	f000 f852 	bl	800be74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdd0:	4b06      	ldr	r3, [pc, #24]	@ (800bdec <prvIdleTask+0x28>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d9f9      	bls.n	800bdcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdd8:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <prvIdleTask+0x2c>)
 800bdda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bde8:	e7f0      	b.n	800bdcc <prvIdleTask+0x8>
 800bdea:	bf00      	nop
 800bdec:	20002688 	.word	0x20002688
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	607b      	str	r3, [r7, #4]
 800bdfe:	e00c      	b.n	800be1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	4613      	mov	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4a12      	ldr	r2, [pc, #72]	@ (800be54 <prvInitialiseTaskLists+0x60>)
 800be0c:	4413      	add	r3, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fe fcae 	bl	800a770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3301      	adds	r3, #1
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b37      	cmp	r3, #55	@ 0x37
 800be1e:	d9ef      	bls.n	800be00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be20:	480d      	ldr	r0, [pc, #52]	@ (800be58 <prvInitialiseTaskLists+0x64>)
 800be22:	f7fe fca5 	bl	800a770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be26:	480d      	ldr	r0, [pc, #52]	@ (800be5c <prvInitialiseTaskLists+0x68>)
 800be28:	f7fe fca2 	bl	800a770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be2c:	480c      	ldr	r0, [pc, #48]	@ (800be60 <prvInitialiseTaskLists+0x6c>)
 800be2e:	f7fe fc9f 	bl	800a770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be32:	480c      	ldr	r0, [pc, #48]	@ (800be64 <prvInitialiseTaskLists+0x70>)
 800be34:	f7fe fc9c 	bl	800a770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be38:	480b      	ldr	r0, [pc, #44]	@ (800be68 <prvInitialiseTaskLists+0x74>)
 800be3a:	f7fe fc99 	bl	800a770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be3e:	4b0b      	ldr	r3, [pc, #44]	@ (800be6c <prvInitialiseTaskLists+0x78>)
 800be40:	4a05      	ldr	r2, [pc, #20]	@ (800be58 <prvInitialiseTaskLists+0x64>)
 800be42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be44:	4b0a      	ldr	r3, [pc, #40]	@ (800be70 <prvInitialiseTaskLists+0x7c>)
 800be46:	4a05      	ldr	r2, [pc, #20]	@ (800be5c <prvInitialiseTaskLists+0x68>)
 800be48:	601a      	str	r2, [r3, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20002688 	.word	0x20002688
 800be58:	20002ae8 	.word	0x20002ae8
 800be5c:	20002afc 	.word	0x20002afc
 800be60:	20002b18 	.word	0x20002b18
 800be64:	20002b2c 	.word	0x20002b2c
 800be68:	20002b44 	.word	0x20002b44
 800be6c:	20002b10 	.word	0x20002b10
 800be70:	20002b14 	.word	0x20002b14

0800be74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be7a:	e019      	b.n	800beb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be7c:	f000 fdec 	bl	800ca58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be80:	4b10      	ldr	r3, [pc, #64]	@ (800bec4 <prvCheckTasksWaitingTermination+0x50>)
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fe fcf9 	bl	800a884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be92:	4b0d      	ldr	r3, [pc, #52]	@ (800bec8 <prvCheckTasksWaitingTermination+0x54>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3b01      	subs	r3, #1
 800be98:	4a0b      	ldr	r2, [pc, #44]	@ (800bec8 <prvCheckTasksWaitingTermination+0x54>)
 800be9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be9c:	4b0b      	ldr	r3, [pc, #44]	@ (800becc <prvCheckTasksWaitingTermination+0x58>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	4a0a      	ldr	r2, [pc, #40]	@ (800becc <prvCheckTasksWaitingTermination+0x58>)
 800bea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bea6:	f000 fe09 	bl	800cabc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f810 	bl	800bed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beb0:	4b06      	ldr	r3, [pc, #24]	@ (800becc <prvCheckTasksWaitingTermination+0x58>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e1      	bne.n	800be7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800beb8:	bf00      	nop
 800beba:	bf00      	nop
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20002b2c 	.word	0x20002b2c
 800bec8:	20002b58 	.word	0x20002b58
 800becc:	20002b40 	.word	0x20002b40

0800bed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3354      	adds	r3, #84	@ 0x54
 800bedc:	4618      	mov	r0, r3
 800bede:	f001 ffe7 	bl	800deb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d108      	bne.n	800befe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 ffa1 	bl	800ce38 <vPortFree>
				vPortFree( pxTCB );
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 ff9e 	bl	800ce38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800befc:	e019      	b.n	800bf32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d103      	bne.n	800bf10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 ff95 	bl	800ce38 <vPortFree>
	}
 800bf0e:	e010      	b.n	800bf32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d00b      	beq.n	800bf32 <prvDeleteTCB+0x62>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	60fb      	str	r3, [r7, #12]
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	e7fd      	b.n	800bf2e <prvDeleteTCB+0x5e>
	}
 800bf32:	bf00      	nop
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf42:	4b0c      	ldr	r3, [pc, #48]	@ (800bf74 <prvResetNextTaskUnblockTime+0x38>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <prvResetNextTaskUnblockTime+0x3c>)
 800bf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf54:	e008      	b.n	800bf68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf56:	4b07      	ldr	r3, [pc, #28]	@ (800bf74 <prvResetNextTaskUnblockTime+0x38>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	4a04      	ldr	r2, [pc, #16]	@ (800bf78 <prvResetNextTaskUnblockTime+0x3c>)
 800bf66:	6013      	str	r3, [r2, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20002b10 	.word	0x20002b10
 800bf78:	20002b78 	.word	0x20002b78

0800bf7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf82:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb0 <xTaskGetSchedulerState+0x34>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d102      	bne.n	800bf90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	e008      	b.n	800bfa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf90:	4b08      	ldr	r3, [pc, #32]	@ (800bfb4 <xTaskGetSchedulerState+0x38>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf98:	2302      	movs	r3, #2
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	e001      	b.n	800bfa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfa2:	687b      	ldr	r3, [r7, #4]
	}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	20002b64 	.word	0x20002b64
 800bfb4:	20002b80 	.word	0x20002b80

0800bfb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d058      	beq.n	800c080 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfce:	4b2f      	ldr	r3, [pc, #188]	@ (800c08c <xTaskPriorityDisinherit+0xd4>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d00b      	beq.n	800bff0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	60fb      	str	r3, [r7, #12]
}
 800bfea:	bf00      	nop
 800bfec:	bf00      	nop
 800bfee:	e7fd      	b.n	800bfec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10b      	bne.n	800c010 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	60bb      	str	r3, [r7, #8]
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	e7fd      	b.n	800c00c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c014:	1e5a      	subs	r2, r3, #1
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c022:	429a      	cmp	r2, r3
 800c024:	d02c      	beq.n	800c080 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d128      	bne.n	800c080 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	3304      	adds	r3, #4
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fc26 	bl	800a884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c050:	4b0f      	ldr	r3, [pc, #60]	@ (800c090 <xTaskPriorityDisinherit+0xd8>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	429a      	cmp	r2, r3
 800c056:	d903      	bls.n	800c060 <xTaskPriorityDisinherit+0xa8>
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c05c:	4a0c      	ldr	r2, [pc, #48]	@ (800c090 <xTaskPriorityDisinherit+0xd8>)
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4a09      	ldr	r2, [pc, #36]	@ (800c094 <xTaskPriorityDisinherit+0xdc>)
 800c06e:	441a      	add	r2, r3
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	3304      	adds	r3, #4
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f7fe fba7 	bl	800a7ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c07c:	2301      	movs	r3, #1
 800c07e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c080:	697b      	ldr	r3, [r7, #20]
	}
 800c082:	4618      	mov	r0, r3
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	20002684 	.word	0x20002684
 800c090:	20002b60 	.word	0x20002b60
 800c094:	20002688 	.word	0x20002688

0800c098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0a2:	4b21      	ldr	r3, [pc, #132]	@ (800c128 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0a8:	4b20      	ldr	r3, [pc, #128]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fbe8 	bl	800a884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ba:	d10a      	bne.n	800c0d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d007      	beq.n	800c0d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4819      	ldr	r0, [pc, #100]	@ (800c130 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0cc:	f7fe fb7d 	bl	800a7ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0d0:	e026      	b.n	800c120 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0da:	4b14      	ldr	r3, [pc, #80]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d209      	bcs.n	800c0fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0ea:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	f7fe fb8b 	bl	800a812 <vListInsert>
}
 800c0fc:	e010      	b.n	800c120 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3304      	adds	r3, #4
 800c108:	4619      	mov	r1, r3
 800c10a:	4610      	mov	r0, r2
 800c10c:	f7fe fb81 	bl	800a812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c110:	4b0a      	ldr	r3, [pc, #40]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	429a      	cmp	r2, r3
 800c118:	d202      	bcs.n	800c120 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c11a:	4a08      	ldr	r2, [pc, #32]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	6013      	str	r3, [r2, #0]
}
 800c120:	bf00      	nop
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20002b5c 	.word	0x20002b5c
 800c12c:	20002684 	.word	0x20002684
 800c130:	20002b44 	.word	0x20002b44
 800c134:	20002b14 	.word	0x20002b14
 800c138:	20002b10 	.word	0x20002b10
 800c13c:	20002b78 	.word	0x20002b78

0800c140 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08a      	sub	sp, #40	@ 0x28
 800c144:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c14a:	f000 fb13 	bl	800c774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c14e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1c4 <xTimerCreateTimerTask+0x84>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d021      	beq.n	800c19a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c15e:	1d3a      	adds	r2, r7, #4
 800c160:	f107 0108 	add.w	r1, r7, #8
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe fae7 	bl	800a73c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c16e:	6879      	ldr	r1, [r7, #4]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	2337      	movs	r3, #55	@ 0x37
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	2300      	movs	r3, #0
 800c17e:	460a      	mov	r2, r1
 800c180:	4911      	ldr	r1, [pc, #68]	@ (800c1c8 <xTimerCreateTimerTask+0x88>)
 800c182:	4812      	ldr	r0, [pc, #72]	@ (800c1cc <xTimerCreateTimerTask+0x8c>)
 800c184:	f7ff f8a2 	bl	800b2cc <xTaskCreateStatic>
 800c188:	4603      	mov	r3, r0
 800c18a:	4a11      	ldr	r2, [pc, #68]	@ (800c1d0 <xTimerCreateTimerTask+0x90>)
 800c18c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c18e:	4b10      	ldr	r3, [pc, #64]	@ (800c1d0 <xTimerCreateTimerTask+0x90>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c196:	2301      	movs	r3, #1
 800c198:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10b      	bne.n	800c1b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c1b8:	697b      	ldr	r3, [r7, #20]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20002bb4 	.word	0x20002bb4
 800c1c8:	080107dc 	.word	0x080107dc
 800c1cc:	0800c30d 	.word	0x0800c30d
 800c1d0:	20002bb8 	.word	0x20002bb8

0800c1d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	@ 0x28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10b      	bne.n	800c204 <xTimerGenericCommand+0x30>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	623b      	str	r3, [r7, #32]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c204:	4b19      	ldr	r3, [pc, #100]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d02a      	beq.n	800c262 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b05      	cmp	r3, #5
 800c21c:	dc18      	bgt.n	800c250 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c21e:	f7ff fead 	bl	800bf7c <xTaskGetSchedulerState>
 800c222:	4603      	mov	r3, r0
 800c224:	2b02      	cmp	r3, #2
 800c226:	d109      	bne.n	800c23c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c228:	4b10      	ldr	r3, [pc, #64]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f107 0110 	add.w	r1, r7, #16
 800c230:	2300      	movs	r3, #0
 800c232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c234:	f7fe fc5a 	bl	800aaec <xQueueGenericSend>
 800c238:	6278      	str	r0, [r7, #36]	@ 0x24
 800c23a:	e012      	b.n	800c262 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c23c:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c23e:	6818      	ldr	r0, [r3, #0]
 800c240:	f107 0110 	add.w	r1, r7, #16
 800c244:	2300      	movs	r3, #0
 800c246:	2200      	movs	r2, #0
 800c248:	f7fe fc50 	bl	800aaec <xQueueGenericSend>
 800c24c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c24e:	e008      	b.n	800c262 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c250:	4b06      	ldr	r3, [pc, #24]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c252:	6818      	ldr	r0, [r3, #0]
 800c254:	f107 0110 	add.w	r1, r7, #16
 800c258:	2300      	movs	r3, #0
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	f7fe fd48 	bl	800acf0 <xQueueGenericSendFromISR>
 800c260:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c264:	4618      	mov	r0, r3
 800c266:	3728      	adds	r7, #40	@ 0x28
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20002bb4 	.word	0x20002bb4

0800c270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af02      	add	r7, sp, #8
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c27a:	4b23      	ldr	r3, [pc, #140]	@ (800c308 <prvProcessExpiredTimer+0x98>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	3304      	adds	r3, #4
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe fafb 	bl	800a884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d023      	beq.n	800c2e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	699a      	ldr	r2, [r3, #24]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	18d1      	adds	r1, r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	6978      	ldr	r0, [r7, #20]
 800c2aa:	f000 f8d5 	bl	800c458 <prvInsertTimerInActiveList>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d020      	beq.n	800c2f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6978      	ldr	r0, [r7, #20]
 800c2c0:	f7ff ff88 	bl	800c1d4 <xTimerGenericCommand>
 800c2c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d114      	bne.n	800c2f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60fb      	str	r3, [r7, #12]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ea:	f023 0301 	bic.w	r3, r3, #1
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	6978      	ldr	r0, [r7, #20]
 800c2fc:	4798      	blx	r3
}
 800c2fe:	bf00      	nop
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20002bac 	.word	0x20002bac

0800c30c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c314:	f107 0308 	add.w	r3, r7, #8
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 f859 	bl	800c3d0 <prvGetNextExpireTime>
 800c31e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	4619      	mov	r1, r3
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 f805 	bl	800c334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c32a:	f000 f8d7 	bl	800c4dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c32e:	bf00      	nop
 800c330:	e7f0      	b.n	800c314 <prvTimerTask+0x8>
	...

0800c334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c33e:	f7ff fa29 	bl	800b794 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c342:	f107 0308 	add.w	r3, r7, #8
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f866 	bl	800c418 <prvSampleTimeNow>
 800c34c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d130      	bne.n	800c3b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10a      	bne.n	800c370 <prvProcessTimerOrBlockTask+0x3c>
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d806      	bhi.n	800c370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c362:	f7ff fa25 	bl	800b7b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c366:	68f9      	ldr	r1, [r7, #12]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff ff81 	bl	800c270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c36e:	e024      	b.n	800c3ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d008      	beq.n	800c388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c376:	4b13      	ldr	r3, [pc, #76]	@ (800c3c4 <prvProcessTimerOrBlockTask+0x90>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <prvProcessTimerOrBlockTask+0x50>
 800c380:	2301      	movs	r3, #1
 800c382:	e000      	b.n	800c386 <prvProcessTimerOrBlockTask+0x52>
 800c384:	2300      	movs	r3, #0
 800c386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c388:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c8 <prvProcessTimerOrBlockTask+0x94>)
 800c38a:	6818      	ldr	r0, [r3, #0]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	4619      	mov	r1, r3
 800c396:	f7fe ff65 	bl	800b264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c39a:	f7ff fa09 	bl	800b7b0 <xTaskResumeAll>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3a4:	4b09      	ldr	r3, [pc, #36]	@ (800c3cc <prvProcessTimerOrBlockTask+0x98>)
 800c3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	f3bf 8f6f 	isb	sy
}
 800c3b4:	e001      	b.n	800c3ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c3b6:	f7ff f9fb 	bl	800b7b0 <xTaskResumeAll>
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20002bb0 	.word	0x20002bb0
 800c3c8:	20002bb4 	.word	0x20002bb4
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c414 <prvGetNextExpireTime+0x44>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <prvGetNextExpireTime+0x16>
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	e000      	b.n	800c3e8 <prvGetNextExpireTime+0x18>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d105      	bne.n	800c400 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3f4:	4b07      	ldr	r3, [pc, #28]	@ (800c414 <prvGetNextExpireTime+0x44>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e001      	b.n	800c404 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c404:	68fb      	ldr	r3, [r7, #12]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20002bac 	.word	0x20002bac

0800c418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c420:	f7ff fa64 	bl	800b8ec <xTaskGetTickCount>
 800c424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c426:	4b0b      	ldr	r3, [pc, #44]	@ (800c454 <prvSampleTimeNow+0x3c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d205      	bcs.n	800c43c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c430:	f000 f93a 	bl	800c6a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	e002      	b.n	800c442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c442:	4a04      	ldr	r2, [pc, #16]	@ (800c454 <prvSampleTimeNow+0x3c>)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c448:	68fb      	ldr	r3, [r7, #12]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20002bbc 	.word	0x20002bbc

0800c458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c466:	2300      	movs	r3, #0
 800c468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d812      	bhi.n	800c4a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	1ad2      	subs	r2, r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d302      	bcc.n	800c492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	617b      	str	r3, [r7, #20]
 800c490:	e01b      	b.n	800c4ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <prvInsertTimerInActiveList+0x7c>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3304      	adds	r3, #4
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	f7fe f9b8 	bl	800a812 <vListInsert>
 800c4a2:	e012      	b.n	800c4ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d206      	bcs.n	800c4ba <prvInsertTimerInActiveList+0x62>
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d302      	bcc.n	800c4ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	e007      	b.n	800c4ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4ba:	4b07      	ldr	r3, [pc, #28]	@ (800c4d8 <prvInsertTimerInActiveList+0x80>)
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f7fe f9a4 	bl	800a812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4ca:	697b      	ldr	r3, [r7, #20]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	20002bb0 	.word	0x20002bb0
 800c4d8:	20002bac 	.word	0x20002bac

0800c4dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08e      	sub	sp, #56	@ 0x38
 800c4e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4e2:	e0ce      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	da19      	bge.n	800c51e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4ea:	1d3b      	adds	r3, r7, #4
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10b      	bne.n	800c50e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61fb      	str	r3, [r7, #28]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c514:	6850      	ldr	r0, [r2, #4]
 800c516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c518:	6892      	ldr	r2, [r2, #8]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	f2c0 80ae 	blt.w	800c682 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d004      	beq.n	800c53c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c534:	3304      	adds	r3, #4
 800c536:	4618      	mov	r0, r3
 800c538:	f7fe f9a4 	bl	800a884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c53c:	463b      	mov	r3, r7
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff ff6a 	bl	800c418 <prvSampleTimeNow>
 800c544:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b09      	cmp	r3, #9
 800c54a:	f200 8097 	bhi.w	800c67c <prvProcessReceivedCommands+0x1a0>
 800c54e:	a201      	add	r2, pc, #4	@ (adr r2, 800c554 <prvProcessReceivedCommands+0x78>)
 800c550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c554:	0800c57d 	.word	0x0800c57d
 800c558:	0800c57d 	.word	0x0800c57d
 800c55c:	0800c57d 	.word	0x0800c57d
 800c560:	0800c5f3 	.word	0x0800c5f3
 800c564:	0800c607 	.word	0x0800c607
 800c568:	0800c653 	.word	0x0800c653
 800c56c:	0800c57d 	.word	0x0800c57d
 800c570:	0800c57d 	.word	0x0800c57d
 800c574:	0800c5f3 	.word	0x0800c5f3
 800c578:	0800c607 	.word	0x0800c607
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c582:	f043 0301 	orr.w	r3, r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	18d1      	adds	r1, r2, r3
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c59a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c59c:	f7ff ff5c 	bl	800c458 <prvInsertTimerInActiveList>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d06c      	beq.n	800c680 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d061      	beq.n	800c680 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	441a      	add	r2, r3
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ce:	f7ff fe01 	bl	800c1d4 <xTimerGenericCommand>
 800c5d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d152      	bne.n	800c680 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	61bb      	str	r3, [r7, #24]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c604:	e03d      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c60c:	f043 0301 	orr.w	r3, r3, #1
 800c610:	b2da      	uxtb	r2, r3
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10b      	bne.n	800c63e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	617b      	str	r3, [r7, #20]
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	e7fd      	b.n	800c63a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c640:	699a      	ldr	r2, [r3, #24]
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	18d1      	adds	r1, r2, r3
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c64a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c64c:	f7ff ff04 	bl	800c458 <prvInsertTimerInActiveList>
					break;
 800c650:	e017      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d103      	bne.n	800c668 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c662:	f000 fbe9 	bl	800ce38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c666:	e00c      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c66e:	f023 0301 	bic.w	r3, r3, #1
 800c672:	b2da      	uxtb	r2, r3
 800c674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c67a:	e002      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c67c:	bf00      	nop
 800c67e:	e000      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
					break;
 800c680:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c682:	4b08      	ldr	r3, [pc, #32]	@ (800c6a4 <prvProcessReceivedCommands+0x1c8>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	1d39      	adds	r1, r7, #4
 800c688:	2200      	movs	r2, #0
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe fbce 	bl	800ae2c <xQueueReceive>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	f47f af26 	bne.w	800c4e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	3730      	adds	r7, #48	@ 0x30
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20002bb4 	.word	0x20002bb4

0800c6a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6ae:	e049      	b.n	800c744 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6b0:	4b2e      	ldr	r3, [pc, #184]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fe f8db 	bl	800a884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d02f      	beq.n	800c744 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d90e      	bls.n	800c714 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c702:	4b1a      	ldr	r3, [pc, #104]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3304      	adds	r3, #4
 800c70a:	4619      	mov	r1, r3
 800c70c:	4610      	mov	r0, r2
 800c70e:	f7fe f880 	bl	800a812 <vListInsert>
 800c712:	e017      	b.n	800c744 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c714:	2300      	movs	r3, #0
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	2300      	movs	r3, #0
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	2100      	movs	r1, #0
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7ff fd58 	bl	800c1d4 <xTimerGenericCommand>
 800c724:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10b      	bne.n	800c744 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	603b      	str	r3, [r7, #0]
}
 800c73e:	bf00      	nop
 800c740:	bf00      	nop
 800c742:	e7fd      	b.n	800c740 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c744:	4b09      	ldr	r3, [pc, #36]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1b0      	bne.n	800c6b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c74e:	4b07      	ldr	r3, [pc, #28]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c754:	4b06      	ldr	r3, [pc, #24]	@ (800c770 <prvSwitchTimerLists+0xc8>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a04      	ldr	r2, [pc, #16]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c75a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c75c:	4a04      	ldr	r2, [pc, #16]	@ (800c770 <prvSwitchTimerLists+0xc8>)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	6013      	str	r3, [r2, #0]
}
 800c762:	bf00      	nop
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20002bac 	.word	0x20002bac
 800c770:	20002bb0 	.word	0x20002bb0

0800c774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c77a:	f000 f96d 	bl	800ca58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c77e:	4b15      	ldr	r3, [pc, #84]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d120      	bne.n	800c7c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c786:	4814      	ldr	r0, [pc, #80]	@ (800c7d8 <prvCheckForValidListAndQueue+0x64>)
 800c788:	f7fd fff2 	bl	800a770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c78c:	4813      	ldr	r0, [pc, #76]	@ (800c7dc <prvCheckForValidListAndQueue+0x68>)
 800c78e:	f7fd ffef 	bl	800a770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c792:	4b13      	ldr	r3, [pc, #76]	@ (800c7e0 <prvCheckForValidListAndQueue+0x6c>)
 800c794:	4a10      	ldr	r2, [pc, #64]	@ (800c7d8 <prvCheckForValidListAndQueue+0x64>)
 800c796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c798:	4b12      	ldr	r3, [pc, #72]	@ (800c7e4 <prvCheckForValidListAndQueue+0x70>)
 800c79a:	4a10      	ldr	r2, [pc, #64]	@ (800c7dc <prvCheckForValidListAndQueue+0x68>)
 800c79c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	4b11      	ldr	r3, [pc, #68]	@ (800c7e8 <prvCheckForValidListAndQueue+0x74>)
 800c7a4:	4a11      	ldr	r2, [pc, #68]	@ (800c7ec <prvCheckForValidListAndQueue+0x78>)
 800c7a6:	2110      	movs	r1, #16
 800c7a8:	200a      	movs	r0, #10
 800c7aa:	f7fe f8ff 	bl	800a9ac <xQueueGenericCreateStatic>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4a08      	ldr	r2, [pc, #32]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c7b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7b4:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d005      	beq.n	800c7c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7bc:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	490b      	ldr	r1, [pc, #44]	@ (800c7f0 <prvCheckForValidListAndQueue+0x7c>)
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fd24 	bl	800b210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7c8:	f000 f978 	bl	800cabc <vPortExitCritical>
}
 800c7cc:	bf00      	nop
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20002bb4 	.word	0x20002bb4
 800c7d8:	20002b84 	.word	0x20002b84
 800c7dc:	20002b98 	.word	0x20002b98
 800c7e0:	20002bac 	.word	0x20002bac
 800c7e4:	20002bb0 	.word	0x20002bb0
 800c7e8:	20002c60 	.word	0x20002c60
 800c7ec:	20002bc0 	.word	0x20002bc0
 800c7f0:	080107e4 	.word	0x080107e4

0800c7f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3b04      	subs	r3, #4
 800c804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3b04      	subs	r3, #4
 800c812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f023 0201 	bic.w	r2, r3, #1
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3b04      	subs	r3, #4
 800c822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c824:	4a0c      	ldr	r2, [pc, #48]	@ (800c858 <pxPortInitialiseStack+0x64>)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3b14      	subs	r3, #20
 800c82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3b04      	subs	r3, #4
 800c83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f06f 0202 	mvn.w	r2, #2
 800c842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3b20      	subs	r3, #32
 800c848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c84a:	68fb      	ldr	r3, [r7, #12]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	0800c85d 	.word	0x0800c85d

0800c85c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c866:	4b13      	ldr	r3, [pc, #76]	@ (800c8b4 <prvTaskExitError+0x58>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86e:	d00b      	beq.n	800c888 <prvTaskExitError+0x2c>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <prvTaskExitError+0x28>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	60bb      	str	r3, [r7, #8]
}
 800c89a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c89c:	bf00      	nop
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d0fc      	beq.n	800c89e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8a4:	bf00      	nop
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	20000054 	.word	0x20000054
	...

0800c8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8c0:	4b07      	ldr	r3, [pc, #28]	@ (800c8e0 <pxCurrentTCBConst2>)
 800c8c2:	6819      	ldr	r1, [r3, #0]
 800c8c4:	6808      	ldr	r0, [r1, #0]
 800c8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	f380 8809 	msr	PSP, r0
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f04f 0000 	mov.w	r0, #0
 800c8d6:	f380 8811 	msr	BASEPRI, r0
 800c8da:	4770      	bx	lr
 800c8dc:	f3af 8000 	nop.w

0800c8e0 <pxCurrentTCBConst2>:
 800c8e0:	20002684 	.word	0x20002684
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop

0800c8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8e8:	4808      	ldr	r0, [pc, #32]	@ (800c90c <prvPortStartFirstTask+0x24>)
 800c8ea:	6800      	ldr	r0, [r0, #0]
 800c8ec:	6800      	ldr	r0, [r0, #0]
 800c8ee:	f380 8808 	msr	MSP, r0
 800c8f2:	f04f 0000 	mov.w	r0, #0
 800c8f6:	f380 8814 	msr	CONTROL, r0
 800c8fa:	b662      	cpsie	i
 800c8fc:	b661      	cpsie	f
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	df00      	svc	0
 800c908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c90a:	bf00      	nop
 800c90c:	e000ed08 	.word	0xe000ed08

0800c910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c916:	4b47      	ldr	r3, [pc, #284]	@ (800ca34 <xPortStartScheduler+0x124>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a47      	ldr	r2, [pc, #284]	@ (800ca38 <xPortStartScheduler+0x128>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d10b      	bne.n	800c938 <xPortStartScheduler+0x28>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	613b      	str	r3, [r7, #16]
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	e7fd      	b.n	800c934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c938:	4b3e      	ldr	r3, [pc, #248]	@ (800ca34 <xPortStartScheduler+0x124>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a3f      	ldr	r2, [pc, #252]	@ (800ca3c <xPortStartScheduler+0x12c>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d10b      	bne.n	800c95a <xPortStartScheduler+0x4a>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	60fb      	str	r3, [r7, #12]
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop
 800c958:	e7fd      	b.n	800c956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c95a:	4b39      	ldr	r3, [pc, #228]	@ (800ca40 <xPortStartScheduler+0x130>)
 800c95c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	22ff      	movs	r2, #255	@ 0xff
 800c96a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c974:	78fb      	ldrb	r3, [r7, #3]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	4b31      	ldr	r3, [pc, #196]	@ (800ca44 <xPortStartScheduler+0x134>)
 800c980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c982:	4b31      	ldr	r3, [pc, #196]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c984:	2207      	movs	r2, #7
 800c986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c988:	e009      	b.n	800c99e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c98a:	4b2f      	ldr	r3, [pc, #188]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3b01      	subs	r3, #1
 800c990:	4a2d      	ldr	r2, [pc, #180]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c994:	78fb      	ldrb	r3, [r7, #3]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9a6:	2b80      	cmp	r3, #128	@ 0x80
 800c9a8:	d0ef      	beq.n	800c98a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9aa:	4b27      	ldr	r3, [pc, #156]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f1c3 0307 	rsb	r3, r3, #7
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d00b      	beq.n	800c9ce <xPortStartScheduler+0xbe>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60bb      	str	r3, [r7, #8]
}
 800c9c8:	bf00      	nop
 800c9ca:	bf00      	nop
 800c9cc:	e7fd      	b.n	800c9ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	4a1c      	ldr	r2, [pc, #112]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c9e0:	4a19      	ldr	r2, [pc, #100]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ec:	4b17      	ldr	r3, [pc, #92]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a16      	ldr	r2, [pc, #88]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c9f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9f8:	4b14      	ldr	r3, [pc, #80]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a13      	ldr	r2, [pc, #76]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ca02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca04:	f000 f8da 	bl	800cbbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca08:	4b11      	ldr	r3, [pc, #68]	@ (800ca50 <xPortStartScheduler+0x140>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca0e:	f000 f8f9 	bl	800cc04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca12:	4b10      	ldr	r3, [pc, #64]	@ (800ca54 <xPortStartScheduler+0x144>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a0f      	ldr	r2, [pc, #60]	@ (800ca54 <xPortStartScheduler+0x144>)
 800ca18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ca1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca1e:	f7ff ff63 	bl	800c8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca22:	f7ff f82d 	bl	800ba80 <vTaskSwitchContext>
	prvTaskExitError();
 800ca26:	f7ff ff19 	bl	800c85c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	e000ed00 	.word	0xe000ed00
 800ca38:	410fc271 	.word	0x410fc271
 800ca3c:	410fc270 	.word	0x410fc270
 800ca40:	e000e400 	.word	0xe000e400
 800ca44:	20002cb0 	.word	0x20002cb0
 800ca48:	20002cb4 	.word	0x20002cb4
 800ca4c:	e000ed20 	.word	0xe000ed20
 800ca50:	20000054 	.word	0x20000054
 800ca54:	e000ef34 	.word	0xe000ef34

0800ca58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca72:	4b10      	ldr	r3, [pc, #64]	@ (800cab4 <vPortEnterCritical+0x5c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	4a0e      	ldr	r2, [pc, #56]	@ (800cab4 <vPortEnterCritical+0x5c>)
 800ca7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <vPortEnterCritical+0x5c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d110      	bne.n	800caa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca84:	4b0c      	ldr	r3, [pc, #48]	@ (800cab8 <vPortEnterCritical+0x60>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	603b      	str	r3, [r7, #0]
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	e7fd      	b.n	800caa2 <vPortEnterCritical+0x4a>
	}
}
 800caa6:	bf00      	nop
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	20000054 	.word	0x20000054
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cac2:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <vPortExitCritical+0x50>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10b      	bne.n	800cae2 <vPortExitCritical+0x26>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	607b      	str	r3, [r7, #4]
}
 800cadc:	bf00      	nop
 800cade:	bf00      	nop
 800cae0:	e7fd      	b.n	800cade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cae2:	4b0a      	ldr	r3, [pc, #40]	@ (800cb0c <vPortExitCritical+0x50>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	4a08      	ldr	r2, [pc, #32]	@ (800cb0c <vPortExitCritical+0x50>)
 800caea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800caec:	4b07      	ldr	r3, [pc, #28]	@ (800cb0c <vPortExitCritical+0x50>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <vPortExitCritical+0x44>
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f383 8811 	msr	BASEPRI, r3
}
 800cafe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	20000054 	.word	0x20000054

0800cb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb10:	f3ef 8009 	mrs	r0, PSP
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	4b15      	ldr	r3, [pc, #84]	@ (800cb70 <pxCurrentTCBConst>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	f01e 0f10 	tst.w	lr, #16
 800cb20:	bf08      	it	eq
 800cb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2a:	6010      	str	r0, [r2, #0]
 800cb2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cb34:	f380 8811 	msr	BASEPRI, r0
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f7fe ff9e 	bl	800ba80 <vTaskSwitchContext>
 800cb44:	f04f 0000 	mov.w	r0, #0
 800cb48:	f380 8811 	msr	BASEPRI, r0
 800cb4c:	bc09      	pop	{r0, r3}
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	6808      	ldr	r0, [r1, #0]
 800cb52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb56:	f01e 0f10 	tst.w	lr, #16
 800cb5a:	bf08      	it	eq
 800cb5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb60:	f380 8809 	msr	PSP, r0
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	f3af 8000 	nop.w

0800cb70 <pxCurrentTCBConst>:
 800cb70:	20002684 	.word	0x20002684
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb92:	f7fe febb 	bl	800b90c <xTaskIncrementTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb9c:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <xPortSysTickHandler+0x40>)
 800cb9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
}
 800cbae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf0 <vPortSetupTimerInterrupt+0x34>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbc6:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf4 <vPortSetupTimerInterrupt+0x38>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf8 <vPortSetupTimerInterrupt+0x3c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a0a      	ldr	r2, [pc, #40]	@ (800cbfc <vPortSetupTimerInterrupt+0x40>)
 800cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd6:	099b      	lsrs	r3, r3, #6
 800cbd8:	4a09      	ldr	r2, [pc, #36]	@ (800cc00 <vPortSetupTimerInterrupt+0x44>)
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbde:	4b04      	ldr	r3, [pc, #16]	@ (800cbf0 <vPortSetupTimerInterrupt+0x34>)
 800cbe0:	2207      	movs	r2, #7
 800cbe2:	601a      	str	r2, [r3, #0]
}
 800cbe4:	bf00      	nop
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	e000e010 	.word	0xe000e010
 800cbf4:	e000e018 	.word	0xe000e018
 800cbf8:	20000048 	.word	0x20000048
 800cbfc:	10624dd3 	.word	0x10624dd3
 800cc00:	e000e014 	.word	0xe000e014

0800cc04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cc14 <vPortEnableVFP+0x10>
 800cc08:	6801      	ldr	r1, [r0, #0]
 800cc0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cc0e:	6001      	str	r1, [r0, #0]
 800cc10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc12:	bf00      	nop
 800cc14:	e000ed88 	.word	0xe000ed88

0800cc18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc1e:	f3ef 8305 	mrs	r3, IPSR
 800cc22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2b0f      	cmp	r3, #15
 800cc28:	d915      	bls.n	800cc56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc2a:	4a18      	ldr	r2, [pc, #96]	@ (800cc8c <vPortValidateInterruptPriority+0x74>)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc34:	4b16      	ldr	r3, [pc, #88]	@ (800cc90 <vPortValidateInterruptPriority+0x78>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	7afa      	ldrb	r2, [r7, #11]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d20b      	bcs.n	800cc56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	607b      	str	r3, [r7, #4]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc56:	4b0f      	ldr	r3, [pc, #60]	@ (800cc94 <vPortValidateInterruptPriority+0x7c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cc5e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc98 <vPortValidateInterruptPriority+0x80>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d90b      	bls.n	800cc7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	603b      	str	r3, [r7, #0]
}
 800cc78:	bf00      	nop
 800cc7a:	bf00      	nop
 800cc7c:	e7fd      	b.n	800cc7a <vPortValidateInterruptPriority+0x62>
	}
 800cc7e:	bf00      	nop
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	e000e3f0 	.word	0xe000e3f0
 800cc90:	20002cb0 	.word	0x20002cb0
 800cc94:	e000ed0c 	.word	0xe000ed0c
 800cc98:	20002cb4 	.word	0x20002cb4

0800cc9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b08a      	sub	sp, #40	@ 0x28
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cca4:	2300      	movs	r3, #0
 800cca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cca8:	f7fe fd74 	bl	800b794 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccac:	4b5c      	ldr	r3, [pc, #368]	@ (800ce20 <pvPortMalloc+0x184>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccb4:	f000 f924 	bl	800cf00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ce24 <pvPortMalloc+0x188>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f040 8095 	bne.w	800cdf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01e      	beq.n	800cd0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cccc:	2208      	movs	r2, #8
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d015      	beq.n	800cd0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f023 0307 	bic.w	r3, r3, #7
 800cce4:	3308      	adds	r3, #8
 800cce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f003 0307 	and.w	r3, r3, #7
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00b      	beq.n	800cd0a <pvPortMalloc+0x6e>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	617b      	str	r3, [r7, #20]
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop
 800cd08:	e7fd      	b.n	800cd06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d06f      	beq.n	800cdf0 <pvPortMalloc+0x154>
 800cd10:	4b45      	ldr	r3, [pc, #276]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d86a      	bhi.n	800cdf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd1a:	4b44      	ldr	r3, [pc, #272]	@ (800ce2c <pvPortMalloc+0x190>)
 800cd1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd1e:	4b43      	ldr	r3, [pc, #268]	@ (800ce2c <pvPortMalloc+0x190>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd24:	e004      	b.n	800cd30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d903      	bls.n	800cd42 <pvPortMalloc+0xa6>
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1f1      	bne.n	800cd26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd42:	4b37      	ldr	r3, [pc, #220]	@ (800ce20 <pvPortMalloc+0x184>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d051      	beq.n	800cdf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2208      	movs	r2, #8
 800cd52:	4413      	add	r3, r2
 800cd54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	1ad2      	subs	r2, r2, r3
 800cd66:	2308      	movs	r3, #8
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d920      	bls.n	800cdb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4413      	add	r3, r2
 800cd74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	f003 0307 	and.w	r3, r3, #7
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00b      	beq.n	800cd98 <pvPortMalloc+0xfc>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	613b      	str	r3, [r7, #16]
}
 800cd92:	bf00      	nop
 800cd94:	bf00      	nop
 800cd96:	e7fd      	b.n	800cd94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	1ad2      	subs	r2, r2, r3
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdaa:	69b8      	ldr	r0, [r7, #24]
 800cdac:	f000 f90a 	bl	800cfc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	4a1b      	ldr	r2, [pc, #108]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ce30 <pvPortMalloc+0x194>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d203      	bcs.n	800cdd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdca:	4b17      	ldr	r3, [pc, #92]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a18      	ldr	r2, [pc, #96]	@ (800ce30 <pvPortMalloc+0x194>)
 800cdd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	4b13      	ldr	r3, [pc, #76]	@ (800ce24 <pvPortMalloc+0x188>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	431a      	orrs	r2, r3
 800cddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cde6:	4b13      	ldr	r3, [pc, #76]	@ (800ce34 <pvPortMalloc+0x198>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3301      	adds	r3, #1
 800cdec:	4a11      	ldr	r2, [pc, #68]	@ (800ce34 <pvPortMalloc+0x198>)
 800cdee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdf0:	f7fe fcde 	bl	800b7b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00b      	beq.n	800ce16 <pvPortMalloc+0x17a>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	60fb      	str	r3, [r7, #12]
}
 800ce10:	bf00      	nop
 800ce12:	bf00      	nop
 800ce14:	e7fd      	b.n	800ce12 <pvPortMalloc+0x176>
	return pvReturn;
 800ce16:	69fb      	ldr	r3, [r7, #28]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3728      	adds	r7, #40	@ 0x28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000c900 	.word	0x2000c900
 800ce24:	2000c914 	.word	0x2000c914
 800ce28:	2000c904 	.word	0x2000c904
 800ce2c:	2000c8f8 	.word	0x2000c8f8
 800ce30:	2000c908 	.word	0x2000c908
 800ce34:	2000c90c 	.word	0x2000c90c

0800ce38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d04f      	beq.n	800ceea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce4a:	2308      	movs	r3, #8
 800ce4c:	425b      	negs	r3, r3
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	4413      	add	r3, r2
 800ce52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	4b25      	ldr	r3, [pc, #148]	@ (800cef4 <vPortFree+0xbc>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4013      	ands	r3, r2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10b      	bne.n	800ce7e <vPortFree+0x46>
	__asm volatile
 800ce66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	60fb      	str	r3, [r7, #12]
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	e7fd      	b.n	800ce7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00b      	beq.n	800ce9e <vPortFree+0x66>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	60bb      	str	r3, [r7, #8]
}
 800ce98:	bf00      	nop
 800ce9a:	bf00      	nop
 800ce9c:	e7fd      	b.n	800ce9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	4b14      	ldr	r3, [pc, #80]	@ (800cef4 <vPortFree+0xbc>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4013      	ands	r3, r2
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d01e      	beq.n	800ceea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d11a      	bne.n	800ceea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cef4 <vPortFree+0xbc>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	43db      	mvns	r3, r3
 800cebe:	401a      	ands	r2, r3
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cec4:	f7fe fc66 	bl	800b794 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b0a      	ldr	r3, [pc, #40]	@ (800cef8 <vPortFree+0xc0>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4413      	add	r3, r2
 800ced2:	4a09      	ldr	r2, [pc, #36]	@ (800cef8 <vPortFree+0xc0>)
 800ced4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ced6:	6938      	ldr	r0, [r7, #16]
 800ced8:	f000 f874 	bl	800cfc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cedc:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <vPortFree+0xc4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	4a06      	ldr	r2, [pc, #24]	@ (800cefc <vPortFree+0xc4>)
 800cee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cee6:	f7fe fc63 	bl	800b7b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ceea:	bf00      	nop
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	2000c914 	.word	0x2000c914
 800cef8:	2000c904 	.word	0x2000c904
 800cefc:	2000c910 	.word	0x2000c910

0800cf00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf06:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800cf0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf0c:	4b27      	ldr	r3, [pc, #156]	@ (800cfac <prvHeapInit+0xac>)
 800cf0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00c      	beq.n	800cf34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3307      	adds	r3, #7
 800cf1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f023 0307 	bic.w	r3, r3, #7
 800cf26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	4a1f      	ldr	r2, [pc, #124]	@ (800cfac <prvHeapInit+0xac>)
 800cf30:	4413      	add	r3, r2
 800cf32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf38:	4a1d      	ldr	r2, [pc, #116]	@ (800cfb0 <prvHeapInit+0xb0>)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf3e:	4b1c      	ldr	r3, [pc, #112]	@ (800cfb0 <prvHeapInit+0xb0>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68ba      	ldr	r2, [r7, #8]
 800cf48:	4413      	add	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf4c:	2208      	movs	r2, #8
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	1a9b      	subs	r3, r3, r2
 800cf52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f023 0307 	bic.w	r3, r3, #7
 800cf5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4a15      	ldr	r2, [pc, #84]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf62:	4b14      	ldr	r3, [pc, #80]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2200      	movs	r2, #0
 800cf68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf6a:	4b12      	ldr	r3, [pc, #72]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	1ad2      	subs	r2, r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf80:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	4a0a      	ldr	r2, [pc, #40]	@ (800cfb8 <prvHeapInit+0xb8>)
 800cf8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	4a09      	ldr	r2, [pc, #36]	@ (800cfbc <prvHeapInit+0xbc>)
 800cf96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf98:	4b09      	ldr	r3, [pc, #36]	@ (800cfc0 <prvHeapInit+0xc0>)
 800cf9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf9e:	601a      	str	r2, [r3, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	20002cb8 	.word	0x20002cb8
 800cfb0:	2000c8f8 	.word	0x2000c8f8
 800cfb4:	2000c900 	.word	0x2000c900
 800cfb8:	2000c908 	.word	0x2000c908
 800cfbc:	2000c904 	.word	0x2000c904
 800cfc0:	2000c914 	.word	0x2000c914

0800cfc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfcc:	4b28      	ldr	r3, [pc, #160]	@ (800d070 <prvInsertBlockIntoFreeList+0xac>)
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e002      	b.n	800cfd8 <prvInsertBlockIntoFreeList+0x14>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d8f7      	bhi.n	800cfd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	4413      	add	r3, r2
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d108      	bne.n	800d006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	685a      	ldr	r2, [r3, #4]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	441a      	add	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	441a      	add	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d118      	bne.n	800d04c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b15      	ldr	r3, [pc, #84]	@ (800d074 <prvInsertBlockIntoFreeList+0xb0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	429a      	cmp	r2, r3
 800d024:	d00d      	beq.n	800d042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	441a      	add	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	e008      	b.n	800d054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d042:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <prvInsertBlockIntoFreeList+0xb0>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	e003      	b.n	800d054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d002      	beq.n	800d062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d062:	bf00      	nop
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	2000c8f8 	.word	0x2000c8f8
 800d074:	2000c900 	.word	0x2000c900

0800d078 <atoi>:
 800d078:	220a      	movs	r2, #10
 800d07a:	2100      	movs	r1, #0
 800d07c:	f000 b87a 	b.w	800d174 <strtol>

0800d080 <_strtol_l.constprop.0>:
 800d080:	2b24      	cmp	r3, #36	@ 0x24
 800d082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d086:	4686      	mov	lr, r0
 800d088:	4690      	mov	r8, r2
 800d08a:	d801      	bhi.n	800d090 <_strtol_l.constprop.0+0x10>
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d106      	bne.n	800d09e <_strtol_l.constprop.0+0x1e>
 800d090:	f000 ff9a 	bl	800dfc8 <__errno>
 800d094:	2316      	movs	r3, #22
 800d096:	6003      	str	r3, [r0, #0]
 800d098:	2000      	movs	r0, #0
 800d09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09e:	4834      	ldr	r0, [pc, #208]	@ (800d170 <_strtol_l.constprop.0+0xf0>)
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0a8:	5d06      	ldrb	r6, [r0, r4]
 800d0aa:	f016 0608 	ands.w	r6, r6, #8
 800d0ae:	d1f8      	bne.n	800d0a2 <_strtol_l.constprop.0+0x22>
 800d0b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0b2:	d12d      	bne.n	800d110 <_strtol_l.constprop.0+0x90>
 800d0b4:	782c      	ldrb	r4, [r5, #0]
 800d0b6:	2601      	movs	r6, #1
 800d0b8:	1c95      	adds	r5, r2, #2
 800d0ba:	f033 0210 	bics.w	r2, r3, #16
 800d0be:	d109      	bne.n	800d0d4 <_strtol_l.constprop.0+0x54>
 800d0c0:	2c30      	cmp	r4, #48	@ 0x30
 800d0c2:	d12a      	bne.n	800d11a <_strtol_l.constprop.0+0x9a>
 800d0c4:	782a      	ldrb	r2, [r5, #0]
 800d0c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d0ca:	2a58      	cmp	r2, #88	@ 0x58
 800d0cc:	d125      	bne.n	800d11a <_strtol_l.constprop.0+0x9a>
 800d0ce:	786c      	ldrb	r4, [r5, #1]
 800d0d0:	2310      	movs	r3, #16
 800d0d2:	3502      	adds	r5, #2
 800d0d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d0d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d0dc:	2200      	movs	r2, #0
 800d0de:	fbbc f9f3 	udiv	r9, ip, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d0ec:	2f09      	cmp	r7, #9
 800d0ee:	d81b      	bhi.n	800d128 <_strtol_l.constprop.0+0xa8>
 800d0f0:	463c      	mov	r4, r7
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	dd27      	ble.n	800d146 <_strtol_l.constprop.0+0xc6>
 800d0f6:	1c57      	adds	r7, r2, #1
 800d0f8:	d007      	beq.n	800d10a <_strtol_l.constprop.0+0x8a>
 800d0fa:	4581      	cmp	r9, r0
 800d0fc:	d320      	bcc.n	800d140 <_strtol_l.constprop.0+0xc0>
 800d0fe:	d101      	bne.n	800d104 <_strtol_l.constprop.0+0x84>
 800d100:	45a2      	cmp	sl, r4
 800d102:	db1d      	blt.n	800d140 <_strtol_l.constprop.0+0xc0>
 800d104:	fb00 4003 	mla	r0, r0, r3, r4
 800d108:	2201      	movs	r2, #1
 800d10a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d10e:	e7eb      	b.n	800d0e8 <_strtol_l.constprop.0+0x68>
 800d110:	2c2b      	cmp	r4, #43	@ 0x2b
 800d112:	bf04      	itt	eq
 800d114:	782c      	ldrbeq	r4, [r5, #0]
 800d116:	1c95      	addeq	r5, r2, #2
 800d118:	e7cf      	b.n	800d0ba <_strtol_l.constprop.0+0x3a>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1da      	bne.n	800d0d4 <_strtol_l.constprop.0+0x54>
 800d11e:	2c30      	cmp	r4, #48	@ 0x30
 800d120:	bf0c      	ite	eq
 800d122:	2308      	moveq	r3, #8
 800d124:	230a      	movne	r3, #10
 800d126:	e7d5      	b.n	800d0d4 <_strtol_l.constprop.0+0x54>
 800d128:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d12c:	2f19      	cmp	r7, #25
 800d12e:	d801      	bhi.n	800d134 <_strtol_l.constprop.0+0xb4>
 800d130:	3c37      	subs	r4, #55	@ 0x37
 800d132:	e7de      	b.n	800d0f2 <_strtol_l.constprop.0+0x72>
 800d134:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d138:	2f19      	cmp	r7, #25
 800d13a:	d804      	bhi.n	800d146 <_strtol_l.constprop.0+0xc6>
 800d13c:	3c57      	subs	r4, #87	@ 0x57
 800d13e:	e7d8      	b.n	800d0f2 <_strtol_l.constprop.0+0x72>
 800d140:	f04f 32ff 	mov.w	r2, #4294967295
 800d144:	e7e1      	b.n	800d10a <_strtol_l.constprop.0+0x8a>
 800d146:	1c53      	adds	r3, r2, #1
 800d148:	d108      	bne.n	800d15c <_strtol_l.constprop.0+0xdc>
 800d14a:	2322      	movs	r3, #34	@ 0x22
 800d14c:	f8ce 3000 	str.w	r3, [lr]
 800d150:	4660      	mov	r0, ip
 800d152:	f1b8 0f00 	cmp.w	r8, #0
 800d156:	d0a0      	beq.n	800d09a <_strtol_l.constprop.0+0x1a>
 800d158:	1e69      	subs	r1, r5, #1
 800d15a:	e006      	b.n	800d16a <_strtol_l.constprop.0+0xea>
 800d15c:	b106      	cbz	r6, 800d160 <_strtol_l.constprop.0+0xe0>
 800d15e:	4240      	negs	r0, r0
 800d160:	f1b8 0f00 	cmp.w	r8, #0
 800d164:	d099      	beq.n	800d09a <_strtol_l.constprop.0+0x1a>
 800d166:	2a00      	cmp	r2, #0
 800d168:	d1f6      	bne.n	800d158 <_strtol_l.constprop.0+0xd8>
 800d16a:	f8c8 1000 	str.w	r1, [r8]
 800d16e:	e794      	b.n	800d09a <_strtol_l.constprop.0+0x1a>
 800d170:	08010a29 	.word	0x08010a29

0800d174 <strtol>:
 800d174:	4613      	mov	r3, r2
 800d176:	460a      	mov	r2, r1
 800d178:	4601      	mov	r1, r0
 800d17a:	4802      	ldr	r0, [pc, #8]	@ (800d184 <strtol+0x10>)
 800d17c:	6800      	ldr	r0, [r0, #0]
 800d17e:	f7ff bf7f 	b.w	800d080 <_strtol_l.constprop.0>
 800d182:	bf00      	nop
 800d184:	20000064 	.word	0x20000064

0800d188 <__cvt>:
 800d188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	ec57 6b10 	vmov	r6, r7, d0
 800d190:	2f00      	cmp	r7, #0
 800d192:	460c      	mov	r4, r1
 800d194:	4619      	mov	r1, r3
 800d196:	463b      	mov	r3, r7
 800d198:	bfbb      	ittet	lt
 800d19a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d19e:	461f      	movlt	r7, r3
 800d1a0:	2300      	movge	r3, #0
 800d1a2:	232d      	movlt	r3, #45	@ 0x2d
 800d1a4:	700b      	strb	r3, [r1, #0]
 800d1a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d1ac:	4691      	mov	r9, r2
 800d1ae:	f023 0820 	bic.w	r8, r3, #32
 800d1b2:	bfbc      	itt	lt
 800d1b4:	4632      	movlt	r2, r6
 800d1b6:	4616      	movlt	r6, r2
 800d1b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1bc:	d005      	beq.n	800d1ca <__cvt+0x42>
 800d1be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d1c2:	d100      	bne.n	800d1c6 <__cvt+0x3e>
 800d1c4:	3401      	adds	r4, #1
 800d1c6:	2102      	movs	r1, #2
 800d1c8:	e000      	b.n	800d1cc <__cvt+0x44>
 800d1ca:	2103      	movs	r1, #3
 800d1cc:	ab03      	add	r3, sp, #12
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	ab02      	add	r3, sp, #8
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	ec47 6b10 	vmov	d0, r6, r7
 800d1d8:	4653      	mov	r3, sl
 800d1da:	4622      	mov	r2, r4
 800d1dc:	f000 ffe0 	bl	800e1a0 <_dtoa_r>
 800d1e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	d119      	bne.n	800d21c <__cvt+0x94>
 800d1e8:	f019 0f01 	tst.w	r9, #1
 800d1ec:	d00e      	beq.n	800d20c <__cvt+0x84>
 800d1ee:	eb00 0904 	add.w	r9, r0, r4
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	4639      	mov	r1, r7
 800d1fa:	f7f3 fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1fe:	b108      	cbz	r0, 800d204 <__cvt+0x7c>
 800d200:	f8cd 900c 	str.w	r9, [sp, #12]
 800d204:	2230      	movs	r2, #48	@ 0x30
 800d206:	9b03      	ldr	r3, [sp, #12]
 800d208:	454b      	cmp	r3, r9
 800d20a:	d31e      	bcc.n	800d24a <__cvt+0xc2>
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d210:	1b5b      	subs	r3, r3, r5
 800d212:	4628      	mov	r0, r5
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	b004      	add	sp, #16
 800d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d220:	eb00 0904 	add.w	r9, r0, r4
 800d224:	d1e5      	bne.n	800d1f2 <__cvt+0x6a>
 800d226:	7803      	ldrb	r3, [r0, #0]
 800d228:	2b30      	cmp	r3, #48	@ 0x30
 800d22a:	d10a      	bne.n	800d242 <__cvt+0xba>
 800d22c:	2200      	movs	r2, #0
 800d22e:	2300      	movs	r3, #0
 800d230:	4630      	mov	r0, r6
 800d232:	4639      	mov	r1, r7
 800d234:	f7f3 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 800d238:	b918      	cbnz	r0, 800d242 <__cvt+0xba>
 800d23a:	f1c4 0401 	rsb	r4, r4, #1
 800d23e:	f8ca 4000 	str.w	r4, [sl]
 800d242:	f8da 3000 	ldr.w	r3, [sl]
 800d246:	4499      	add	r9, r3
 800d248:	e7d3      	b.n	800d1f2 <__cvt+0x6a>
 800d24a:	1c59      	adds	r1, r3, #1
 800d24c:	9103      	str	r1, [sp, #12]
 800d24e:	701a      	strb	r2, [r3, #0]
 800d250:	e7d9      	b.n	800d206 <__cvt+0x7e>

0800d252 <__exponent>:
 800d252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d254:	2900      	cmp	r1, #0
 800d256:	bfba      	itte	lt
 800d258:	4249      	neglt	r1, r1
 800d25a:	232d      	movlt	r3, #45	@ 0x2d
 800d25c:	232b      	movge	r3, #43	@ 0x2b
 800d25e:	2909      	cmp	r1, #9
 800d260:	7002      	strb	r2, [r0, #0]
 800d262:	7043      	strb	r3, [r0, #1]
 800d264:	dd29      	ble.n	800d2ba <__exponent+0x68>
 800d266:	f10d 0307 	add.w	r3, sp, #7
 800d26a:	461d      	mov	r5, r3
 800d26c:	270a      	movs	r7, #10
 800d26e:	461a      	mov	r2, r3
 800d270:	fbb1 f6f7 	udiv	r6, r1, r7
 800d274:	fb07 1416 	mls	r4, r7, r6, r1
 800d278:	3430      	adds	r4, #48	@ 0x30
 800d27a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d27e:	460c      	mov	r4, r1
 800d280:	2c63      	cmp	r4, #99	@ 0x63
 800d282:	f103 33ff 	add.w	r3, r3, #4294967295
 800d286:	4631      	mov	r1, r6
 800d288:	dcf1      	bgt.n	800d26e <__exponent+0x1c>
 800d28a:	3130      	adds	r1, #48	@ 0x30
 800d28c:	1e94      	subs	r4, r2, #2
 800d28e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d292:	1c41      	adds	r1, r0, #1
 800d294:	4623      	mov	r3, r4
 800d296:	42ab      	cmp	r3, r5
 800d298:	d30a      	bcc.n	800d2b0 <__exponent+0x5e>
 800d29a:	f10d 0309 	add.w	r3, sp, #9
 800d29e:	1a9b      	subs	r3, r3, r2
 800d2a0:	42ac      	cmp	r4, r5
 800d2a2:	bf88      	it	hi
 800d2a4:	2300      	movhi	r3, #0
 800d2a6:	3302      	adds	r3, #2
 800d2a8:	4403      	add	r3, r0
 800d2aa:	1a18      	subs	r0, r3, r0
 800d2ac:	b003      	add	sp, #12
 800d2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d2b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d2b8:	e7ed      	b.n	800d296 <__exponent+0x44>
 800d2ba:	2330      	movs	r3, #48	@ 0x30
 800d2bc:	3130      	adds	r1, #48	@ 0x30
 800d2be:	7083      	strb	r3, [r0, #2]
 800d2c0:	70c1      	strb	r1, [r0, #3]
 800d2c2:	1d03      	adds	r3, r0, #4
 800d2c4:	e7f1      	b.n	800d2aa <__exponent+0x58>
	...

0800d2c8 <_printf_float>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	b08d      	sub	sp, #52	@ 0x34
 800d2ce:	460c      	mov	r4, r1
 800d2d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d2d4:	4616      	mov	r6, r2
 800d2d6:	461f      	mov	r7, r3
 800d2d8:	4605      	mov	r5, r0
 800d2da:	f000 fdd5 	bl	800de88 <_localeconv_r>
 800d2de:	6803      	ldr	r3, [r0, #0]
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7f2 ffc4 	bl	8000270 <strlen>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f0:	9005      	str	r0, [sp, #20]
 800d2f2:	3307      	adds	r3, #7
 800d2f4:	f023 0307 	bic.w	r3, r3, #7
 800d2f8:	f103 0208 	add.w	r2, r3, #8
 800d2fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d300:	f8d4 b000 	ldr.w	fp, [r4]
 800d304:	f8c8 2000 	str.w	r2, [r8]
 800d308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d30c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	f8cd 8018 	str.w	r8, [sp, #24]
 800d316:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d31a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d31e:	4b9c      	ldr	r3, [pc, #624]	@ (800d590 <_printf_float+0x2c8>)
 800d320:	f04f 32ff 	mov.w	r2, #4294967295
 800d324:	f7f3 fc02 	bl	8000b2c <__aeabi_dcmpun>
 800d328:	bb70      	cbnz	r0, 800d388 <_printf_float+0xc0>
 800d32a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d32e:	4b98      	ldr	r3, [pc, #608]	@ (800d590 <_printf_float+0x2c8>)
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	f7f3 fbdc 	bl	8000af0 <__aeabi_dcmple>
 800d338:	bb30      	cbnz	r0, 800d388 <_printf_float+0xc0>
 800d33a:	2200      	movs	r2, #0
 800d33c:	2300      	movs	r3, #0
 800d33e:	4640      	mov	r0, r8
 800d340:	4649      	mov	r1, r9
 800d342:	f7f3 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800d346:	b110      	cbz	r0, 800d34e <_printf_float+0x86>
 800d348:	232d      	movs	r3, #45	@ 0x2d
 800d34a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d34e:	4a91      	ldr	r2, [pc, #580]	@ (800d594 <_printf_float+0x2cc>)
 800d350:	4b91      	ldr	r3, [pc, #580]	@ (800d598 <_printf_float+0x2d0>)
 800d352:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d356:	bf94      	ite	ls
 800d358:	4690      	movls	r8, r2
 800d35a:	4698      	movhi	r8, r3
 800d35c:	2303      	movs	r3, #3
 800d35e:	6123      	str	r3, [r4, #16]
 800d360:	f02b 0304 	bic.w	r3, fp, #4
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	f04f 0900 	mov.w	r9, #0
 800d36a:	9700      	str	r7, [sp, #0]
 800d36c:	4633      	mov	r3, r6
 800d36e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f9d2 	bl	800d71c <_printf_common>
 800d378:	3001      	adds	r0, #1
 800d37a:	f040 808d 	bne.w	800d498 <_printf_float+0x1d0>
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	b00d      	add	sp, #52	@ 0x34
 800d384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d388:	4642      	mov	r2, r8
 800d38a:	464b      	mov	r3, r9
 800d38c:	4640      	mov	r0, r8
 800d38e:	4649      	mov	r1, r9
 800d390:	f7f3 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 800d394:	b140      	cbz	r0, 800d3a8 <_printf_float+0xe0>
 800d396:	464b      	mov	r3, r9
 800d398:	2b00      	cmp	r3, #0
 800d39a:	bfbc      	itt	lt
 800d39c:	232d      	movlt	r3, #45	@ 0x2d
 800d39e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d3a2:	4a7e      	ldr	r2, [pc, #504]	@ (800d59c <_printf_float+0x2d4>)
 800d3a4:	4b7e      	ldr	r3, [pc, #504]	@ (800d5a0 <_printf_float+0x2d8>)
 800d3a6:	e7d4      	b.n	800d352 <_printf_float+0x8a>
 800d3a8:	6863      	ldr	r3, [r4, #4]
 800d3aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d3ae:	9206      	str	r2, [sp, #24]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	d13b      	bne.n	800d42c <_printf_float+0x164>
 800d3b4:	2306      	movs	r3, #6
 800d3b6:	6063      	str	r3, [r4, #4]
 800d3b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d3bc:	2300      	movs	r3, #0
 800d3be:	6022      	str	r2, [r4, #0]
 800d3c0:	9303      	str	r3, [sp, #12]
 800d3c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d3c8:	ab09      	add	r3, sp, #36	@ 0x24
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	6861      	ldr	r1, [r4, #4]
 800d3ce:	ec49 8b10 	vmov	d0, r8, r9
 800d3d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	f7ff fed6 	bl	800d188 <__cvt>
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3e0:	2b47      	cmp	r3, #71	@ 0x47
 800d3e2:	4680      	mov	r8, r0
 800d3e4:	d129      	bne.n	800d43a <_printf_float+0x172>
 800d3e6:	1cc8      	adds	r0, r1, #3
 800d3e8:	db02      	blt.n	800d3f0 <_printf_float+0x128>
 800d3ea:	6863      	ldr	r3, [r4, #4]
 800d3ec:	4299      	cmp	r1, r3
 800d3ee:	dd41      	ble.n	800d474 <_printf_float+0x1ac>
 800d3f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d3f4:	fa5f fa8a 	uxtb.w	sl, sl
 800d3f8:	3901      	subs	r1, #1
 800d3fa:	4652      	mov	r2, sl
 800d3fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d400:	9109      	str	r1, [sp, #36]	@ 0x24
 800d402:	f7ff ff26 	bl	800d252 <__exponent>
 800d406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d408:	1813      	adds	r3, r2, r0
 800d40a:	2a01      	cmp	r2, #1
 800d40c:	4681      	mov	r9, r0
 800d40e:	6123      	str	r3, [r4, #16]
 800d410:	dc02      	bgt.n	800d418 <_printf_float+0x150>
 800d412:	6822      	ldr	r2, [r4, #0]
 800d414:	07d2      	lsls	r2, r2, #31
 800d416:	d501      	bpl.n	800d41c <_printf_float+0x154>
 800d418:	3301      	adds	r3, #1
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0a2      	beq.n	800d36a <_printf_float+0xa2>
 800d424:	232d      	movs	r3, #45	@ 0x2d
 800d426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d42a:	e79e      	b.n	800d36a <_printf_float+0xa2>
 800d42c:	9a06      	ldr	r2, [sp, #24]
 800d42e:	2a47      	cmp	r2, #71	@ 0x47
 800d430:	d1c2      	bne.n	800d3b8 <_printf_float+0xf0>
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1c0      	bne.n	800d3b8 <_printf_float+0xf0>
 800d436:	2301      	movs	r3, #1
 800d438:	e7bd      	b.n	800d3b6 <_printf_float+0xee>
 800d43a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d43e:	d9db      	bls.n	800d3f8 <_printf_float+0x130>
 800d440:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d444:	d118      	bne.n	800d478 <_printf_float+0x1b0>
 800d446:	2900      	cmp	r1, #0
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	dd0b      	ble.n	800d464 <_printf_float+0x19c>
 800d44c:	6121      	str	r1, [r4, #16]
 800d44e:	b913      	cbnz	r3, 800d456 <_printf_float+0x18e>
 800d450:	6822      	ldr	r2, [r4, #0]
 800d452:	07d0      	lsls	r0, r2, #31
 800d454:	d502      	bpl.n	800d45c <_printf_float+0x194>
 800d456:	3301      	adds	r3, #1
 800d458:	440b      	add	r3, r1
 800d45a:	6123      	str	r3, [r4, #16]
 800d45c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d45e:	f04f 0900 	mov.w	r9, #0
 800d462:	e7db      	b.n	800d41c <_printf_float+0x154>
 800d464:	b913      	cbnz	r3, 800d46c <_printf_float+0x1a4>
 800d466:	6822      	ldr	r2, [r4, #0]
 800d468:	07d2      	lsls	r2, r2, #31
 800d46a:	d501      	bpl.n	800d470 <_printf_float+0x1a8>
 800d46c:	3302      	adds	r3, #2
 800d46e:	e7f4      	b.n	800d45a <_printf_float+0x192>
 800d470:	2301      	movs	r3, #1
 800d472:	e7f2      	b.n	800d45a <_printf_float+0x192>
 800d474:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d47a:	4299      	cmp	r1, r3
 800d47c:	db05      	blt.n	800d48a <_printf_float+0x1c2>
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	6121      	str	r1, [r4, #16]
 800d482:	07d8      	lsls	r0, r3, #31
 800d484:	d5ea      	bpl.n	800d45c <_printf_float+0x194>
 800d486:	1c4b      	adds	r3, r1, #1
 800d488:	e7e7      	b.n	800d45a <_printf_float+0x192>
 800d48a:	2900      	cmp	r1, #0
 800d48c:	bfd4      	ite	le
 800d48e:	f1c1 0202 	rsble	r2, r1, #2
 800d492:	2201      	movgt	r2, #1
 800d494:	4413      	add	r3, r2
 800d496:	e7e0      	b.n	800d45a <_printf_float+0x192>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	055a      	lsls	r2, r3, #21
 800d49c:	d407      	bmi.n	800d4ae <_printf_float+0x1e6>
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	4642      	mov	r2, r8
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	47b8      	blx	r7
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d12b      	bne.n	800d504 <_printf_float+0x23c>
 800d4ac:	e767      	b.n	800d37e <_printf_float+0xb6>
 800d4ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4b2:	f240 80dd 	bls.w	800d670 <_printf_float+0x3a8>
 800d4b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f7f3 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d033      	beq.n	800d52e <_printf_float+0x266>
 800d4c6:	4a37      	ldr	r2, [pc, #220]	@ (800d5a4 <_printf_float+0x2dc>)
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	47b8      	blx	r7
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	f43f af54 	beq.w	800d37e <_printf_float+0xb6>
 800d4d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d4da:	4543      	cmp	r3, r8
 800d4dc:	db02      	blt.n	800d4e4 <_printf_float+0x21c>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	07d8      	lsls	r0, r3, #31
 800d4e2:	d50f      	bpl.n	800d504 <_printf_float+0x23c>
 800d4e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	47b8      	blx	r7
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	f43f af45 	beq.w	800d37e <_printf_float+0xb6>
 800d4f4:	f04f 0900 	mov.w	r9, #0
 800d4f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4fc:	f104 0a1a 	add.w	sl, r4, #26
 800d500:	45c8      	cmp	r8, r9
 800d502:	dc09      	bgt.n	800d518 <_printf_float+0x250>
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	079b      	lsls	r3, r3, #30
 800d508:	f100 8103 	bmi.w	800d712 <_printf_float+0x44a>
 800d50c:	68e0      	ldr	r0, [r4, #12]
 800d50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d510:	4298      	cmp	r0, r3
 800d512:	bfb8      	it	lt
 800d514:	4618      	movlt	r0, r3
 800d516:	e734      	b.n	800d382 <_printf_float+0xba>
 800d518:	2301      	movs	r3, #1
 800d51a:	4652      	mov	r2, sl
 800d51c:	4631      	mov	r1, r6
 800d51e:	4628      	mov	r0, r5
 800d520:	47b8      	blx	r7
 800d522:	3001      	adds	r0, #1
 800d524:	f43f af2b 	beq.w	800d37e <_printf_float+0xb6>
 800d528:	f109 0901 	add.w	r9, r9, #1
 800d52c:	e7e8      	b.n	800d500 <_printf_float+0x238>
 800d52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d530:	2b00      	cmp	r3, #0
 800d532:	dc39      	bgt.n	800d5a8 <_printf_float+0x2e0>
 800d534:	4a1b      	ldr	r2, [pc, #108]	@ (800d5a4 <_printf_float+0x2dc>)
 800d536:	2301      	movs	r3, #1
 800d538:	4631      	mov	r1, r6
 800d53a:	4628      	mov	r0, r5
 800d53c:	47b8      	blx	r7
 800d53e:	3001      	adds	r0, #1
 800d540:	f43f af1d 	beq.w	800d37e <_printf_float+0xb6>
 800d544:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d548:	ea59 0303 	orrs.w	r3, r9, r3
 800d54c:	d102      	bne.n	800d554 <_printf_float+0x28c>
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	07d9      	lsls	r1, r3, #31
 800d552:	d5d7      	bpl.n	800d504 <_printf_float+0x23c>
 800d554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d558:	4631      	mov	r1, r6
 800d55a:	4628      	mov	r0, r5
 800d55c:	47b8      	blx	r7
 800d55e:	3001      	adds	r0, #1
 800d560:	f43f af0d 	beq.w	800d37e <_printf_float+0xb6>
 800d564:	f04f 0a00 	mov.w	sl, #0
 800d568:	f104 0b1a 	add.w	fp, r4, #26
 800d56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d56e:	425b      	negs	r3, r3
 800d570:	4553      	cmp	r3, sl
 800d572:	dc01      	bgt.n	800d578 <_printf_float+0x2b0>
 800d574:	464b      	mov	r3, r9
 800d576:	e793      	b.n	800d4a0 <_printf_float+0x1d8>
 800d578:	2301      	movs	r3, #1
 800d57a:	465a      	mov	r2, fp
 800d57c:	4631      	mov	r1, r6
 800d57e:	4628      	mov	r0, r5
 800d580:	47b8      	blx	r7
 800d582:	3001      	adds	r0, #1
 800d584:	f43f aefb 	beq.w	800d37e <_printf_float+0xb6>
 800d588:	f10a 0a01 	add.w	sl, sl, #1
 800d58c:	e7ee      	b.n	800d56c <_printf_float+0x2a4>
 800d58e:	bf00      	nop
 800d590:	7fefffff 	.word	0x7fefffff
 800d594:	08010b29 	.word	0x08010b29
 800d598:	08010b2d 	.word	0x08010b2d
 800d59c:	08010b31 	.word	0x08010b31
 800d5a0:	08010b35 	.word	0x08010b35
 800d5a4:	08010b39 	.word	0x08010b39
 800d5a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5ae:	4553      	cmp	r3, sl
 800d5b0:	bfa8      	it	ge
 800d5b2:	4653      	movge	r3, sl
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	4699      	mov	r9, r3
 800d5b8:	dc36      	bgt.n	800d628 <_printf_float+0x360>
 800d5ba:	f04f 0b00 	mov.w	fp, #0
 800d5be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5c2:	f104 021a 	add.w	r2, r4, #26
 800d5c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5c8:	9306      	str	r3, [sp, #24]
 800d5ca:	eba3 0309 	sub.w	r3, r3, r9
 800d5ce:	455b      	cmp	r3, fp
 800d5d0:	dc31      	bgt.n	800d636 <_printf_float+0x36e>
 800d5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5d4:	459a      	cmp	sl, r3
 800d5d6:	dc3a      	bgt.n	800d64e <_printf_float+0x386>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	07da      	lsls	r2, r3, #31
 800d5dc:	d437      	bmi.n	800d64e <_printf_float+0x386>
 800d5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e0:	ebaa 0903 	sub.w	r9, sl, r3
 800d5e4:	9b06      	ldr	r3, [sp, #24]
 800d5e6:	ebaa 0303 	sub.w	r3, sl, r3
 800d5ea:	4599      	cmp	r9, r3
 800d5ec:	bfa8      	it	ge
 800d5ee:	4699      	movge	r9, r3
 800d5f0:	f1b9 0f00 	cmp.w	r9, #0
 800d5f4:	dc33      	bgt.n	800d65e <_printf_float+0x396>
 800d5f6:	f04f 0800 	mov.w	r8, #0
 800d5fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5fe:	f104 0b1a 	add.w	fp, r4, #26
 800d602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d604:	ebaa 0303 	sub.w	r3, sl, r3
 800d608:	eba3 0309 	sub.w	r3, r3, r9
 800d60c:	4543      	cmp	r3, r8
 800d60e:	f77f af79 	ble.w	800d504 <_printf_float+0x23c>
 800d612:	2301      	movs	r3, #1
 800d614:	465a      	mov	r2, fp
 800d616:	4631      	mov	r1, r6
 800d618:	4628      	mov	r0, r5
 800d61a:	47b8      	blx	r7
 800d61c:	3001      	adds	r0, #1
 800d61e:	f43f aeae 	beq.w	800d37e <_printf_float+0xb6>
 800d622:	f108 0801 	add.w	r8, r8, #1
 800d626:	e7ec      	b.n	800d602 <_printf_float+0x33a>
 800d628:	4642      	mov	r2, r8
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	d1c2      	bne.n	800d5ba <_printf_float+0x2f2>
 800d634:	e6a3      	b.n	800d37e <_printf_float+0xb6>
 800d636:	2301      	movs	r3, #1
 800d638:	4631      	mov	r1, r6
 800d63a:	4628      	mov	r0, r5
 800d63c:	9206      	str	r2, [sp, #24]
 800d63e:	47b8      	blx	r7
 800d640:	3001      	adds	r0, #1
 800d642:	f43f ae9c 	beq.w	800d37e <_printf_float+0xb6>
 800d646:	9a06      	ldr	r2, [sp, #24]
 800d648:	f10b 0b01 	add.w	fp, fp, #1
 800d64c:	e7bb      	b.n	800d5c6 <_printf_float+0x2fe>
 800d64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d652:	4631      	mov	r1, r6
 800d654:	4628      	mov	r0, r5
 800d656:	47b8      	blx	r7
 800d658:	3001      	adds	r0, #1
 800d65a:	d1c0      	bne.n	800d5de <_printf_float+0x316>
 800d65c:	e68f      	b.n	800d37e <_printf_float+0xb6>
 800d65e:	9a06      	ldr	r2, [sp, #24]
 800d660:	464b      	mov	r3, r9
 800d662:	4442      	add	r2, r8
 800d664:	4631      	mov	r1, r6
 800d666:	4628      	mov	r0, r5
 800d668:	47b8      	blx	r7
 800d66a:	3001      	adds	r0, #1
 800d66c:	d1c3      	bne.n	800d5f6 <_printf_float+0x32e>
 800d66e:	e686      	b.n	800d37e <_printf_float+0xb6>
 800d670:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d674:	f1ba 0f01 	cmp.w	sl, #1
 800d678:	dc01      	bgt.n	800d67e <_printf_float+0x3b6>
 800d67a:	07db      	lsls	r3, r3, #31
 800d67c:	d536      	bpl.n	800d6ec <_printf_float+0x424>
 800d67e:	2301      	movs	r3, #1
 800d680:	4642      	mov	r2, r8
 800d682:	4631      	mov	r1, r6
 800d684:	4628      	mov	r0, r5
 800d686:	47b8      	blx	r7
 800d688:	3001      	adds	r0, #1
 800d68a:	f43f ae78 	beq.w	800d37e <_printf_float+0xb6>
 800d68e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d692:	4631      	mov	r1, r6
 800d694:	4628      	mov	r0, r5
 800d696:	47b8      	blx	r7
 800d698:	3001      	adds	r0, #1
 800d69a:	f43f ae70 	beq.w	800d37e <_printf_float+0xb6>
 800d69e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6aa:	f7f3 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6ae:	b9c0      	cbnz	r0, 800d6e2 <_printf_float+0x41a>
 800d6b0:	4653      	mov	r3, sl
 800d6b2:	f108 0201 	add.w	r2, r8, #1
 800d6b6:	4631      	mov	r1, r6
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	47b8      	blx	r7
 800d6bc:	3001      	adds	r0, #1
 800d6be:	d10c      	bne.n	800d6da <_printf_float+0x412>
 800d6c0:	e65d      	b.n	800d37e <_printf_float+0xb6>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	465a      	mov	r2, fp
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	f43f ae56 	beq.w	800d37e <_printf_float+0xb6>
 800d6d2:	f108 0801 	add.w	r8, r8, #1
 800d6d6:	45d0      	cmp	r8, sl
 800d6d8:	dbf3      	blt.n	800d6c2 <_printf_float+0x3fa>
 800d6da:	464b      	mov	r3, r9
 800d6dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d6e0:	e6df      	b.n	800d4a2 <_printf_float+0x1da>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	f104 0b1a 	add.w	fp, r4, #26
 800d6ea:	e7f4      	b.n	800d6d6 <_printf_float+0x40e>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	4642      	mov	r2, r8
 800d6f0:	e7e1      	b.n	800d6b6 <_printf_float+0x3ee>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	464a      	mov	r2, r9
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	47b8      	blx	r7
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	f43f ae3e 	beq.w	800d37e <_printf_float+0xb6>
 800d702:	f108 0801 	add.w	r8, r8, #1
 800d706:	68e3      	ldr	r3, [r4, #12]
 800d708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d70a:	1a5b      	subs	r3, r3, r1
 800d70c:	4543      	cmp	r3, r8
 800d70e:	dcf0      	bgt.n	800d6f2 <_printf_float+0x42a>
 800d710:	e6fc      	b.n	800d50c <_printf_float+0x244>
 800d712:	f04f 0800 	mov.w	r8, #0
 800d716:	f104 0919 	add.w	r9, r4, #25
 800d71a:	e7f4      	b.n	800d706 <_printf_float+0x43e>

0800d71c <_printf_common>:
 800d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	4616      	mov	r6, r2
 800d722:	4698      	mov	r8, r3
 800d724:	688a      	ldr	r2, [r1, #8]
 800d726:	690b      	ldr	r3, [r1, #16]
 800d728:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d72c:	4293      	cmp	r3, r2
 800d72e:	bfb8      	it	lt
 800d730:	4613      	movlt	r3, r2
 800d732:	6033      	str	r3, [r6, #0]
 800d734:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d738:	4607      	mov	r7, r0
 800d73a:	460c      	mov	r4, r1
 800d73c:	b10a      	cbz	r2, 800d742 <_printf_common+0x26>
 800d73e:	3301      	adds	r3, #1
 800d740:	6033      	str	r3, [r6, #0]
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	0699      	lsls	r1, r3, #26
 800d746:	bf42      	ittt	mi
 800d748:	6833      	ldrmi	r3, [r6, #0]
 800d74a:	3302      	addmi	r3, #2
 800d74c:	6033      	strmi	r3, [r6, #0]
 800d74e:	6825      	ldr	r5, [r4, #0]
 800d750:	f015 0506 	ands.w	r5, r5, #6
 800d754:	d106      	bne.n	800d764 <_printf_common+0x48>
 800d756:	f104 0a19 	add.w	sl, r4, #25
 800d75a:	68e3      	ldr	r3, [r4, #12]
 800d75c:	6832      	ldr	r2, [r6, #0]
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	42ab      	cmp	r3, r5
 800d762:	dc26      	bgt.n	800d7b2 <_printf_common+0x96>
 800d764:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d768:	6822      	ldr	r2, [r4, #0]
 800d76a:	3b00      	subs	r3, #0
 800d76c:	bf18      	it	ne
 800d76e:	2301      	movne	r3, #1
 800d770:	0692      	lsls	r2, r2, #26
 800d772:	d42b      	bmi.n	800d7cc <_printf_common+0xb0>
 800d774:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d778:	4641      	mov	r1, r8
 800d77a:	4638      	mov	r0, r7
 800d77c:	47c8      	blx	r9
 800d77e:	3001      	adds	r0, #1
 800d780:	d01e      	beq.n	800d7c0 <_printf_common+0xa4>
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	6922      	ldr	r2, [r4, #16]
 800d786:	f003 0306 	and.w	r3, r3, #6
 800d78a:	2b04      	cmp	r3, #4
 800d78c:	bf02      	ittt	eq
 800d78e:	68e5      	ldreq	r5, [r4, #12]
 800d790:	6833      	ldreq	r3, [r6, #0]
 800d792:	1aed      	subeq	r5, r5, r3
 800d794:	68a3      	ldr	r3, [r4, #8]
 800d796:	bf0c      	ite	eq
 800d798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d79c:	2500      	movne	r5, #0
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	bfc4      	itt	gt
 800d7a2:	1a9b      	subgt	r3, r3, r2
 800d7a4:	18ed      	addgt	r5, r5, r3
 800d7a6:	2600      	movs	r6, #0
 800d7a8:	341a      	adds	r4, #26
 800d7aa:	42b5      	cmp	r5, r6
 800d7ac:	d11a      	bne.n	800d7e4 <_printf_common+0xc8>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e008      	b.n	800d7c4 <_printf_common+0xa8>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	4641      	mov	r1, r8
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	47c8      	blx	r9
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d103      	bne.n	800d7c8 <_printf_common+0xac>
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c8:	3501      	adds	r5, #1
 800d7ca:	e7c6      	b.n	800d75a <_printf_common+0x3e>
 800d7cc:	18e1      	adds	r1, r4, r3
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	2030      	movs	r0, #48	@ 0x30
 800d7d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7d6:	4422      	add	r2, r4
 800d7d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7e0:	3302      	adds	r3, #2
 800d7e2:	e7c7      	b.n	800d774 <_printf_common+0x58>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	4641      	mov	r1, r8
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	47c8      	blx	r9
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	d0e6      	beq.n	800d7c0 <_printf_common+0xa4>
 800d7f2:	3601      	adds	r6, #1
 800d7f4:	e7d9      	b.n	800d7aa <_printf_common+0x8e>
	...

0800d7f8 <_printf_i>:
 800d7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7fc:	7e0f      	ldrb	r7, [r1, #24]
 800d7fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d800:	2f78      	cmp	r7, #120	@ 0x78
 800d802:	4691      	mov	r9, r2
 800d804:	4680      	mov	r8, r0
 800d806:	460c      	mov	r4, r1
 800d808:	469a      	mov	sl, r3
 800d80a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d80e:	d807      	bhi.n	800d820 <_printf_i+0x28>
 800d810:	2f62      	cmp	r7, #98	@ 0x62
 800d812:	d80a      	bhi.n	800d82a <_printf_i+0x32>
 800d814:	2f00      	cmp	r7, #0
 800d816:	f000 80d2 	beq.w	800d9be <_printf_i+0x1c6>
 800d81a:	2f58      	cmp	r7, #88	@ 0x58
 800d81c:	f000 80b9 	beq.w	800d992 <_printf_i+0x19a>
 800d820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d824:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d828:	e03a      	b.n	800d8a0 <_printf_i+0xa8>
 800d82a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d82e:	2b15      	cmp	r3, #21
 800d830:	d8f6      	bhi.n	800d820 <_printf_i+0x28>
 800d832:	a101      	add	r1, pc, #4	@ (adr r1, 800d838 <_printf_i+0x40>)
 800d834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d838:	0800d891 	.word	0x0800d891
 800d83c:	0800d8a5 	.word	0x0800d8a5
 800d840:	0800d821 	.word	0x0800d821
 800d844:	0800d821 	.word	0x0800d821
 800d848:	0800d821 	.word	0x0800d821
 800d84c:	0800d821 	.word	0x0800d821
 800d850:	0800d8a5 	.word	0x0800d8a5
 800d854:	0800d821 	.word	0x0800d821
 800d858:	0800d821 	.word	0x0800d821
 800d85c:	0800d821 	.word	0x0800d821
 800d860:	0800d821 	.word	0x0800d821
 800d864:	0800d9a5 	.word	0x0800d9a5
 800d868:	0800d8cf 	.word	0x0800d8cf
 800d86c:	0800d95f 	.word	0x0800d95f
 800d870:	0800d821 	.word	0x0800d821
 800d874:	0800d821 	.word	0x0800d821
 800d878:	0800d9c7 	.word	0x0800d9c7
 800d87c:	0800d821 	.word	0x0800d821
 800d880:	0800d8cf 	.word	0x0800d8cf
 800d884:	0800d821 	.word	0x0800d821
 800d888:	0800d821 	.word	0x0800d821
 800d88c:	0800d967 	.word	0x0800d967
 800d890:	6833      	ldr	r3, [r6, #0]
 800d892:	1d1a      	adds	r2, r3, #4
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6032      	str	r2, [r6, #0]
 800d898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d89c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e09d      	b.n	800d9e0 <_printf_i+0x1e8>
 800d8a4:	6833      	ldr	r3, [r6, #0]
 800d8a6:	6820      	ldr	r0, [r4, #0]
 800d8a8:	1d19      	adds	r1, r3, #4
 800d8aa:	6031      	str	r1, [r6, #0]
 800d8ac:	0606      	lsls	r6, r0, #24
 800d8ae:	d501      	bpl.n	800d8b4 <_printf_i+0xbc>
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	e003      	b.n	800d8bc <_printf_i+0xc4>
 800d8b4:	0645      	lsls	r5, r0, #25
 800d8b6:	d5fb      	bpl.n	800d8b0 <_printf_i+0xb8>
 800d8b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8bc:	2d00      	cmp	r5, #0
 800d8be:	da03      	bge.n	800d8c8 <_printf_i+0xd0>
 800d8c0:	232d      	movs	r3, #45	@ 0x2d
 800d8c2:	426d      	negs	r5, r5
 800d8c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8c8:	4859      	ldr	r0, [pc, #356]	@ (800da30 <_printf_i+0x238>)
 800d8ca:	230a      	movs	r3, #10
 800d8cc:	e011      	b.n	800d8f2 <_printf_i+0xfa>
 800d8ce:	6821      	ldr	r1, [r4, #0]
 800d8d0:	6833      	ldr	r3, [r6, #0]
 800d8d2:	0608      	lsls	r0, r1, #24
 800d8d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8d8:	d402      	bmi.n	800d8e0 <_printf_i+0xe8>
 800d8da:	0649      	lsls	r1, r1, #25
 800d8dc:	bf48      	it	mi
 800d8de:	b2ad      	uxthmi	r5, r5
 800d8e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8e2:	4853      	ldr	r0, [pc, #332]	@ (800da30 <_printf_i+0x238>)
 800d8e4:	6033      	str	r3, [r6, #0]
 800d8e6:	bf14      	ite	ne
 800d8e8:	230a      	movne	r3, #10
 800d8ea:	2308      	moveq	r3, #8
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d8f2:	6866      	ldr	r6, [r4, #4]
 800d8f4:	60a6      	str	r6, [r4, #8]
 800d8f6:	2e00      	cmp	r6, #0
 800d8f8:	bfa2      	ittt	ge
 800d8fa:	6821      	ldrge	r1, [r4, #0]
 800d8fc:	f021 0104 	bicge.w	r1, r1, #4
 800d900:	6021      	strge	r1, [r4, #0]
 800d902:	b90d      	cbnz	r5, 800d908 <_printf_i+0x110>
 800d904:	2e00      	cmp	r6, #0
 800d906:	d04b      	beq.n	800d9a0 <_printf_i+0x1a8>
 800d908:	4616      	mov	r6, r2
 800d90a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d90e:	fb03 5711 	mls	r7, r3, r1, r5
 800d912:	5dc7      	ldrb	r7, [r0, r7]
 800d914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d918:	462f      	mov	r7, r5
 800d91a:	42bb      	cmp	r3, r7
 800d91c:	460d      	mov	r5, r1
 800d91e:	d9f4      	bls.n	800d90a <_printf_i+0x112>
 800d920:	2b08      	cmp	r3, #8
 800d922:	d10b      	bne.n	800d93c <_printf_i+0x144>
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	07df      	lsls	r7, r3, #31
 800d928:	d508      	bpl.n	800d93c <_printf_i+0x144>
 800d92a:	6923      	ldr	r3, [r4, #16]
 800d92c:	6861      	ldr	r1, [r4, #4]
 800d92e:	4299      	cmp	r1, r3
 800d930:	bfde      	ittt	le
 800d932:	2330      	movle	r3, #48	@ 0x30
 800d934:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d938:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d93c:	1b92      	subs	r2, r2, r6
 800d93e:	6122      	str	r2, [r4, #16]
 800d940:	f8cd a000 	str.w	sl, [sp]
 800d944:	464b      	mov	r3, r9
 800d946:	aa03      	add	r2, sp, #12
 800d948:	4621      	mov	r1, r4
 800d94a:	4640      	mov	r0, r8
 800d94c:	f7ff fee6 	bl	800d71c <_printf_common>
 800d950:	3001      	adds	r0, #1
 800d952:	d14a      	bne.n	800d9ea <_printf_i+0x1f2>
 800d954:	f04f 30ff 	mov.w	r0, #4294967295
 800d958:	b004      	add	sp, #16
 800d95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	f043 0320 	orr.w	r3, r3, #32
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	4833      	ldr	r0, [pc, #204]	@ (800da34 <_printf_i+0x23c>)
 800d968:	2778      	movs	r7, #120	@ 0x78
 800d96a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	6831      	ldr	r1, [r6, #0]
 800d972:	061f      	lsls	r7, r3, #24
 800d974:	f851 5b04 	ldr.w	r5, [r1], #4
 800d978:	d402      	bmi.n	800d980 <_printf_i+0x188>
 800d97a:	065f      	lsls	r7, r3, #25
 800d97c:	bf48      	it	mi
 800d97e:	b2ad      	uxthmi	r5, r5
 800d980:	6031      	str	r1, [r6, #0]
 800d982:	07d9      	lsls	r1, r3, #31
 800d984:	bf44      	itt	mi
 800d986:	f043 0320 	orrmi.w	r3, r3, #32
 800d98a:	6023      	strmi	r3, [r4, #0]
 800d98c:	b11d      	cbz	r5, 800d996 <_printf_i+0x19e>
 800d98e:	2310      	movs	r3, #16
 800d990:	e7ac      	b.n	800d8ec <_printf_i+0xf4>
 800d992:	4827      	ldr	r0, [pc, #156]	@ (800da30 <_printf_i+0x238>)
 800d994:	e7e9      	b.n	800d96a <_printf_i+0x172>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	f023 0320 	bic.w	r3, r3, #32
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	e7f6      	b.n	800d98e <_printf_i+0x196>
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	e7bd      	b.n	800d920 <_printf_i+0x128>
 800d9a4:	6833      	ldr	r3, [r6, #0]
 800d9a6:	6825      	ldr	r5, [r4, #0]
 800d9a8:	6961      	ldr	r1, [r4, #20]
 800d9aa:	1d18      	adds	r0, r3, #4
 800d9ac:	6030      	str	r0, [r6, #0]
 800d9ae:	062e      	lsls	r6, r5, #24
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	d501      	bpl.n	800d9b8 <_printf_i+0x1c0>
 800d9b4:	6019      	str	r1, [r3, #0]
 800d9b6:	e002      	b.n	800d9be <_printf_i+0x1c6>
 800d9b8:	0668      	lsls	r0, r5, #25
 800d9ba:	d5fb      	bpl.n	800d9b4 <_printf_i+0x1bc>
 800d9bc:	8019      	strh	r1, [r3, #0]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6123      	str	r3, [r4, #16]
 800d9c2:	4616      	mov	r6, r2
 800d9c4:	e7bc      	b.n	800d940 <_printf_i+0x148>
 800d9c6:	6833      	ldr	r3, [r6, #0]
 800d9c8:	1d1a      	adds	r2, r3, #4
 800d9ca:	6032      	str	r2, [r6, #0]
 800d9cc:	681e      	ldr	r6, [r3, #0]
 800d9ce:	6862      	ldr	r2, [r4, #4]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7f2 fbfc 	bl	80001d0 <memchr>
 800d9d8:	b108      	cbz	r0, 800d9de <_printf_i+0x1e6>
 800d9da:	1b80      	subs	r0, r0, r6
 800d9dc:	6060      	str	r0, [r4, #4]
 800d9de:	6863      	ldr	r3, [r4, #4]
 800d9e0:	6123      	str	r3, [r4, #16]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9e8:	e7aa      	b.n	800d940 <_printf_i+0x148>
 800d9ea:	6923      	ldr	r3, [r4, #16]
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	4640      	mov	r0, r8
 800d9f2:	47d0      	blx	sl
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	d0ad      	beq.n	800d954 <_printf_i+0x15c>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	079b      	lsls	r3, r3, #30
 800d9fc:	d413      	bmi.n	800da26 <_printf_i+0x22e>
 800d9fe:	68e0      	ldr	r0, [r4, #12]
 800da00:	9b03      	ldr	r3, [sp, #12]
 800da02:	4298      	cmp	r0, r3
 800da04:	bfb8      	it	lt
 800da06:	4618      	movlt	r0, r3
 800da08:	e7a6      	b.n	800d958 <_printf_i+0x160>
 800da0a:	2301      	movs	r3, #1
 800da0c:	4632      	mov	r2, r6
 800da0e:	4649      	mov	r1, r9
 800da10:	4640      	mov	r0, r8
 800da12:	47d0      	blx	sl
 800da14:	3001      	adds	r0, #1
 800da16:	d09d      	beq.n	800d954 <_printf_i+0x15c>
 800da18:	3501      	adds	r5, #1
 800da1a:	68e3      	ldr	r3, [r4, #12]
 800da1c:	9903      	ldr	r1, [sp, #12]
 800da1e:	1a5b      	subs	r3, r3, r1
 800da20:	42ab      	cmp	r3, r5
 800da22:	dcf2      	bgt.n	800da0a <_printf_i+0x212>
 800da24:	e7eb      	b.n	800d9fe <_printf_i+0x206>
 800da26:	2500      	movs	r5, #0
 800da28:	f104 0619 	add.w	r6, r4, #25
 800da2c:	e7f5      	b.n	800da1a <_printf_i+0x222>
 800da2e:	bf00      	nop
 800da30:	08010b3b 	.word	0x08010b3b
 800da34:	08010b4c 	.word	0x08010b4c

0800da38 <std>:
 800da38:	2300      	movs	r3, #0
 800da3a:	b510      	push	{r4, lr}
 800da3c:	4604      	mov	r4, r0
 800da3e:	e9c0 3300 	strd	r3, r3, [r0]
 800da42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da46:	6083      	str	r3, [r0, #8]
 800da48:	8181      	strh	r1, [r0, #12]
 800da4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800da4c:	81c2      	strh	r2, [r0, #14]
 800da4e:	6183      	str	r3, [r0, #24]
 800da50:	4619      	mov	r1, r3
 800da52:	2208      	movs	r2, #8
 800da54:	305c      	adds	r0, #92	@ 0x5c
 800da56:	f000 f914 	bl	800dc82 <memset>
 800da5a:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <std+0x58>)
 800da5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800da5e:	4b0d      	ldr	r3, [pc, #52]	@ (800da94 <std+0x5c>)
 800da60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da62:	4b0d      	ldr	r3, [pc, #52]	@ (800da98 <std+0x60>)
 800da64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da66:	4b0d      	ldr	r3, [pc, #52]	@ (800da9c <std+0x64>)
 800da68:	6323      	str	r3, [r4, #48]	@ 0x30
 800da6a:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <std+0x68>)
 800da6c:	6224      	str	r4, [r4, #32]
 800da6e:	429c      	cmp	r4, r3
 800da70:	d006      	beq.n	800da80 <std+0x48>
 800da72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da76:	4294      	cmp	r4, r2
 800da78:	d002      	beq.n	800da80 <std+0x48>
 800da7a:	33d0      	adds	r3, #208	@ 0xd0
 800da7c:	429c      	cmp	r4, r3
 800da7e:	d105      	bne.n	800da8c <std+0x54>
 800da80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da88:	f000 bac8 	b.w	800e01c <__retarget_lock_init_recursive>
 800da8c:	bd10      	pop	{r4, pc}
 800da8e:	bf00      	nop
 800da90:	0800dbfd 	.word	0x0800dbfd
 800da94:	0800dc1f 	.word	0x0800dc1f
 800da98:	0800dc57 	.word	0x0800dc57
 800da9c:	0800dc7b 	.word	0x0800dc7b
 800daa0:	2000c918 	.word	0x2000c918

0800daa4 <stdio_exit_handler>:
 800daa4:	4a02      	ldr	r2, [pc, #8]	@ (800dab0 <stdio_exit_handler+0xc>)
 800daa6:	4903      	ldr	r1, [pc, #12]	@ (800dab4 <stdio_exit_handler+0x10>)
 800daa8:	4803      	ldr	r0, [pc, #12]	@ (800dab8 <stdio_exit_handler+0x14>)
 800daaa:	f000 b869 	b.w	800db80 <_fwalk_sglue>
 800daae:	bf00      	nop
 800dab0:	20000058 	.word	0x20000058
 800dab4:	0800f9e5 	.word	0x0800f9e5
 800dab8:	20000068 	.word	0x20000068

0800dabc <cleanup_stdio>:
 800dabc:	6841      	ldr	r1, [r0, #4]
 800dabe:	4b0c      	ldr	r3, [pc, #48]	@ (800daf0 <cleanup_stdio+0x34>)
 800dac0:	4299      	cmp	r1, r3
 800dac2:	b510      	push	{r4, lr}
 800dac4:	4604      	mov	r4, r0
 800dac6:	d001      	beq.n	800dacc <cleanup_stdio+0x10>
 800dac8:	f001 ff8c 	bl	800f9e4 <_fflush_r>
 800dacc:	68a1      	ldr	r1, [r4, #8]
 800dace:	4b09      	ldr	r3, [pc, #36]	@ (800daf4 <cleanup_stdio+0x38>)
 800dad0:	4299      	cmp	r1, r3
 800dad2:	d002      	beq.n	800dada <cleanup_stdio+0x1e>
 800dad4:	4620      	mov	r0, r4
 800dad6:	f001 ff85 	bl	800f9e4 <_fflush_r>
 800dada:	68e1      	ldr	r1, [r4, #12]
 800dadc:	4b06      	ldr	r3, [pc, #24]	@ (800daf8 <cleanup_stdio+0x3c>)
 800dade:	4299      	cmp	r1, r3
 800dae0:	d004      	beq.n	800daec <cleanup_stdio+0x30>
 800dae2:	4620      	mov	r0, r4
 800dae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dae8:	f001 bf7c 	b.w	800f9e4 <_fflush_r>
 800daec:	bd10      	pop	{r4, pc}
 800daee:	bf00      	nop
 800daf0:	2000c918 	.word	0x2000c918
 800daf4:	2000c980 	.word	0x2000c980
 800daf8:	2000c9e8 	.word	0x2000c9e8

0800dafc <global_stdio_init.part.0>:
 800dafc:	b510      	push	{r4, lr}
 800dafe:	4b0b      	ldr	r3, [pc, #44]	@ (800db2c <global_stdio_init.part.0+0x30>)
 800db00:	4c0b      	ldr	r4, [pc, #44]	@ (800db30 <global_stdio_init.part.0+0x34>)
 800db02:	4a0c      	ldr	r2, [pc, #48]	@ (800db34 <global_stdio_init.part.0+0x38>)
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	4620      	mov	r0, r4
 800db08:	2200      	movs	r2, #0
 800db0a:	2104      	movs	r1, #4
 800db0c:	f7ff ff94 	bl	800da38 <std>
 800db10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800db14:	2201      	movs	r2, #1
 800db16:	2109      	movs	r1, #9
 800db18:	f7ff ff8e 	bl	800da38 <std>
 800db1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800db20:	2202      	movs	r2, #2
 800db22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db26:	2112      	movs	r1, #18
 800db28:	f7ff bf86 	b.w	800da38 <std>
 800db2c:	2000ca50 	.word	0x2000ca50
 800db30:	2000c918 	.word	0x2000c918
 800db34:	0800daa5 	.word	0x0800daa5

0800db38 <__sfp_lock_acquire>:
 800db38:	4801      	ldr	r0, [pc, #4]	@ (800db40 <__sfp_lock_acquire+0x8>)
 800db3a:	f000 ba70 	b.w	800e01e <__retarget_lock_acquire_recursive>
 800db3e:	bf00      	nop
 800db40:	2000ca59 	.word	0x2000ca59

0800db44 <__sfp_lock_release>:
 800db44:	4801      	ldr	r0, [pc, #4]	@ (800db4c <__sfp_lock_release+0x8>)
 800db46:	f000 ba6b 	b.w	800e020 <__retarget_lock_release_recursive>
 800db4a:	bf00      	nop
 800db4c:	2000ca59 	.word	0x2000ca59

0800db50 <__sinit>:
 800db50:	b510      	push	{r4, lr}
 800db52:	4604      	mov	r4, r0
 800db54:	f7ff fff0 	bl	800db38 <__sfp_lock_acquire>
 800db58:	6a23      	ldr	r3, [r4, #32]
 800db5a:	b11b      	cbz	r3, 800db64 <__sinit+0x14>
 800db5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db60:	f7ff bff0 	b.w	800db44 <__sfp_lock_release>
 800db64:	4b04      	ldr	r3, [pc, #16]	@ (800db78 <__sinit+0x28>)
 800db66:	6223      	str	r3, [r4, #32]
 800db68:	4b04      	ldr	r3, [pc, #16]	@ (800db7c <__sinit+0x2c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1f5      	bne.n	800db5c <__sinit+0xc>
 800db70:	f7ff ffc4 	bl	800dafc <global_stdio_init.part.0>
 800db74:	e7f2      	b.n	800db5c <__sinit+0xc>
 800db76:	bf00      	nop
 800db78:	0800dabd 	.word	0x0800dabd
 800db7c:	2000ca50 	.word	0x2000ca50

0800db80 <_fwalk_sglue>:
 800db80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db84:	4607      	mov	r7, r0
 800db86:	4688      	mov	r8, r1
 800db88:	4614      	mov	r4, r2
 800db8a:	2600      	movs	r6, #0
 800db8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db90:	f1b9 0901 	subs.w	r9, r9, #1
 800db94:	d505      	bpl.n	800dba2 <_fwalk_sglue+0x22>
 800db96:	6824      	ldr	r4, [r4, #0]
 800db98:	2c00      	cmp	r4, #0
 800db9a:	d1f7      	bne.n	800db8c <_fwalk_sglue+0xc>
 800db9c:	4630      	mov	r0, r6
 800db9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dba2:	89ab      	ldrh	r3, [r5, #12]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d907      	bls.n	800dbb8 <_fwalk_sglue+0x38>
 800dba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbac:	3301      	adds	r3, #1
 800dbae:	d003      	beq.n	800dbb8 <_fwalk_sglue+0x38>
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	47c0      	blx	r8
 800dbb6:	4306      	orrs	r6, r0
 800dbb8:	3568      	adds	r5, #104	@ 0x68
 800dbba:	e7e9      	b.n	800db90 <_fwalk_sglue+0x10>

0800dbbc <siprintf>:
 800dbbc:	b40e      	push	{r1, r2, r3}
 800dbbe:	b500      	push	{lr}
 800dbc0:	b09c      	sub	sp, #112	@ 0x70
 800dbc2:	ab1d      	add	r3, sp, #116	@ 0x74
 800dbc4:	9002      	str	r0, [sp, #8]
 800dbc6:	9006      	str	r0, [sp, #24]
 800dbc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dbcc:	4809      	ldr	r0, [pc, #36]	@ (800dbf4 <siprintf+0x38>)
 800dbce:	9107      	str	r1, [sp, #28]
 800dbd0:	9104      	str	r1, [sp, #16]
 800dbd2:	4909      	ldr	r1, [pc, #36]	@ (800dbf8 <siprintf+0x3c>)
 800dbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbd8:	9105      	str	r1, [sp, #20]
 800dbda:	6800      	ldr	r0, [r0, #0]
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	a902      	add	r1, sp, #8
 800dbe0:	f001 fd80 	bl	800f6e4 <_svfiprintf_r>
 800dbe4:	9b02      	ldr	r3, [sp, #8]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	b01c      	add	sp, #112	@ 0x70
 800dbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbf0:	b003      	add	sp, #12
 800dbf2:	4770      	bx	lr
 800dbf4:	20000064 	.word	0x20000064
 800dbf8:	ffff0208 	.word	0xffff0208

0800dbfc <__sread>:
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	460c      	mov	r4, r1
 800dc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc04:	f000 f9bc 	bl	800df80 <_read_r>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	bfab      	itete	ge
 800dc0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc0e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc10:	181b      	addge	r3, r3, r0
 800dc12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc16:	bfac      	ite	ge
 800dc18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc1a:	81a3      	strhlt	r3, [r4, #12]
 800dc1c:	bd10      	pop	{r4, pc}

0800dc1e <__swrite>:
 800dc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc22:	461f      	mov	r7, r3
 800dc24:	898b      	ldrh	r3, [r1, #12]
 800dc26:	05db      	lsls	r3, r3, #23
 800dc28:	4605      	mov	r5, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	d505      	bpl.n	800dc3c <__swrite+0x1e>
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	2302      	movs	r3, #2
 800dc36:	2200      	movs	r2, #0
 800dc38:	f000 f990 	bl	800df5c <_lseek_r>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc46:	81a3      	strh	r3, [r4, #12]
 800dc48:	4632      	mov	r2, r6
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc52:	f000 b9a7 	b.w	800dfa4 <_write_r>

0800dc56 <__sseek>:
 800dc56:	b510      	push	{r4, lr}
 800dc58:	460c      	mov	r4, r1
 800dc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5e:	f000 f97d 	bl	800df5c <_lseek_r>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	bf15      	itete	ne
 800dc68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc72:	81a3      	strheq	r3, [r4, #12]
 800dc74:	bf18      	it	ne
 800dc76:	81a3      	strhne	r3, [r4, #12]
 800dc78:	bd10      	pop	{r4, pc}

0800dc7a <__sclose>:
 800dc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc7e:	f000 b907 	b.w	800de90 <_close_r>

0800dc82 <memset>:
 800dc82:	4402      	add	r2, r0
 800dc84:	4603      	mov	r3, r0
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d100      	bne.n	800dc8c <memset+0xa>
 800dc8a:	4770      	bx	lr
 800dc8c:	f803 1b01 	strb.w	r1, [r3], #1
 800dc90:	e7f9      	b.n	800dc86 <memset+0x4>

0800dc92 <strchr>:
 800dc92:	b2c9      	uxtb	r1, r1
 800dc94:	4603      	mov	r3, r0
 800dc96:	4618      	mov	r0, r3
 800dc98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc9c:	b112      	cbz	r2, 800dca4 <strchr+0x12>
 800dc9e:	428a      	cmp	r2, r1
 800dca0:	d1f9      	bne.n	800dc96 <strchr+0x4>
 800dca2:	4770      	bx	lr
 800dca4:	2900      	cmp	r1, #0
 800dca6:	bf18      	it	ne
 800dca8:	2000      	movne	r0, #0
 800dcaa:	4770      	bx	lr

0800dcac <strncpy>:
 800dcac:	b510      	push	{r4, lr}
 800dcae:	3901      	subs	r1, #1
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	b132      	cbz	r2, 800dcc2 <strncpy+0x16>
 800dcb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dcb8:	f803 4b01 	strb.w	r4, [r3], #1
 800dcbc:	3a01      	subs	r2, #1
 800dcbe:	2c00      	cmp	r4, #0
 800dcc0:	d1f7      	bne.n	800dcb2 <strncpy+0x6>
 800dcc2:	441a      	add	r2, r3
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d100      	bne.n	800dccc <strncpy+0x20>
 800dcca:	bd10      	pop	{r4, pc}
 800dccc:	f803 1b01 	strb.w	r1, [r3], #1
 800dcd0:	e7f9      	b.n	800dcc6 <strncpy+0x1a>

0800dcd2 <strstr>:
 800dcd2:	780a      	ldrb	r2, [r1, #0]
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	b96a      	cbnz	r2, 800dcf4 <strstr+0x22>
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d109      	bne.n	800dcf2 <strstr+0x20>
 800dcde:	460c      	mov	r4, r1
 800dce0:	4605      	mov	r5, r0
 800dce2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d0f6      	beq.n	800dcd8 <strstr+0x6>
 800dcea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	d0f7      	beq.n	800dce2 <strstr+0x10>
 800dcf2:	3001      	adds	r0, #1
 800dcf4:	7803      	ldrb	r3, [r0, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1ef      	bne.n	800dcda <strstr+0x8>
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	e7ec      	b.n	800dcd8 <strstr+0x6>
	...

0800dd00 <gmtime>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	4b0b      	ldr	r3, [pc, #44]	@ (800dd30 <gmtime+0x30>)
 800dd04:	681d      	ldr	r5, [r3, #0]
 800dd06:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800dd08:	4604      	mov	r4, r0
 800dd0a:	b953      	cbnz	r3, 800dd22 <gmtime+0x22>
 800dd0c:	2024      	movs	r0, #36	@ 0x24
 800dd0e:	f001 f855 	bl	800edbc <malloc>
 800dd12:	4602      	mov	r2, r0
 800dd14:	6368      	str	r0, [r5, #52]	@ 0x34
 800dd16:	b920      	cbnz	r0, 800dd22 <gmtime+0x22>
 800dd18:	4b06      	ldr	r3, [pc, #24]	@ (800dd34 <gmtime+0x34>)
 800dd1a:	4807      	ldr	r0, [pc, #28]	@ (800dd38 <gmtime+0x38>)
 800dd1c:	213d      	movs	r1, #61	@ 0x3d
 800dd1e:	f000 f997 	bl	800e050 <__assert_func>
 800dd22:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800dd24:	4620      	mov	r0, r4
 800dd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd2a:	f000 b807 	b.w	800dd3c <gmtime_r>
 800dd2e:	bf00      	nop
 800dd30:	20000064 	.word	0x20000064
 800dd34:	08010b5d 	.word	0x08010b5d
 800dd38:	08010b74 	.word	0x08010b74

0800dd3c <gmtime_r>:
 800dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd40:	4a4d      	ldr	r2, [pc, #308]	@ (800de78 <gmtime_r+0x13c>)
 800dd42:	460c      	mov	r4, r1
 800dd44:	2300      	movs	r3, #0
 800dd46:	e9d0 0100 	ldrd	r0, r1, [r0]
 800dd4a:	f7f2 ff4d 	bl	8000be8 <__aeabi_ldivmod>
 800dd4e:	2a00      	cmp	r2, #0
 800dd50:	bfbc      	itt	lt
 800dd52:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800dd56:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800dd5a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800dd5e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800dd62:	fbb2 f3f1 	udiv	r3, r2, r1
 800dd66:	fb01 2213 	mls	r2, r1, r3, r2
 800dd6a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800dd6e:	bfac      	ite	ge
 800dd70:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800dd74:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800dd78:	60a3      	str	r3, [r4, #8]
 800dd7a:	fbb2 f3f1 	udiv	r3, r2, r1
 800dd7e:	fb01 2213 	mls	r2, r1, r3, r2
 800dd82:	6063      	str	r3, [r4, #4]
 800dd84:	6022      	str	r2, [r4, #0]
 800dd86:	1cc3      	adds	r3, r0, #3
 800dd88:	2207      	movs	r2, #7
 800dd8a:	fb93 f2f2 	sdiv	r2, r3, r2
 800dd8e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800dd92:	1a9b      	subs	r3, r3, r2
 800dd94:	bf48      	it	mi
 800dd96:	3307      	addmi	r3, #7
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	61a3      	str	r3, [r4, #24]
 800dd9c:	bfb8      	it	lt
 800dd9e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 800dda2:	4936      	ldr	r1, [pc, #216]	@ (800de7c <gmtime_r+0x140>)
 800dda4:	bfae      	itee	ge
 800dda6:	fb90 f1f1 	sdivge	r1, r0, r1
 800ddaa:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 800ddae:	fb93 f1f1 	sdivlt	r1, r3, r1
 800ddb2:	4b33      	ldr	r3, [pc, #204]	@ (800de80 <gmtime_r+0x144>)
 800ddb4:	fb03 0001 	mla	r0, r3, r1, r0
 800ddb8:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800ddbc:	fbb0 f3f3 	udiv	r3, r0, r3
 800ddc0:	4403      	add	r3, r0
 800ddc2:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800ddc6:	fbb0 f2fc 	udiv	r2, r0, ip
 800ddca:	1a9b      	subs	r3, r3, r2
 800ddcc:	f240 176d 	movw	r7, #365	@ 0x16d
 800ddd0:	4a2c      	ldr	r2, [pc, #176]	@ (800de84 <gmtime_r+0x148>)
 800ddd2:	fbb0 f2f2 	udiv	r2, r0, r2
 800ddd6:	2664      	movs	r6, #100	@ 0x64
 800ddd8:	1a9b      	subs	r3, r3, r2
 800ddda:	fbb3 f2f7 	udiv	r2, r3, r7
 800ddde:	fbb3 f3fc 	udiv	r3, r3, ip
 800dde2:	fbb2 f5f6 	udiv	r5, r2, r6
 800dde6:	1aeb      	subs	r3, r5, r3
 800dde8:	4403      	add	r3, r0
 800ddea:	fb07 3312 	mls	r3, r7, r2, r3
 800ddee:	2099      	movs	r0, #153	@ 0x99
 800ddf0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800ddf4:	3702      	adds	r7, #2
 800ddf6:	f103 0e01 	add.w	lr, r3, #1
 800ddfa:	fbb7 fcf0 	udiv	ip, r7, r0
 800ddfe:	fb00 f00c 	mul.w	r0, r0, ip
 800de02:	3002      	adds	r0, #2
 800de04:	f04f 0805 	mov.w	r8, #5
 800de08:	fbb0 f0f8 	udiv	r0, r0, r8
 800de0c:	ebae 0000 	sub.w	r0, lr, r0
 800de10:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800de14:	4577      	cmp	r7, lr
 800de16:	bf8c      	ite	hi
 800de18:	f06f 0709 	mvnhi.w	r7, #9
 800de1c:	2702      	movls	r7, #2
 800de1e:	4467      	add	r7, ip
 800de20:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800de24:	fb0c 2101 	mla	r1, ip, r1, r2
 800de28:	2f01      	cmp	r7, #1
 800de2a:	bf98      	it	ls
 800de2c:	3101      	addls	r1, #1
 800de2e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800de32:	d30c      	bcc.n	800de4e <gmtime_r+0x112>
 800de34:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800de38:	61e3      	str	r3, [r4, #28]
 800de3a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800de3e:	2300      	movs	r3, #0
 800de40:	60e0      	str	r0, [r4, #12]
 800de42:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800de46:	6223      	str	r3, [r4, #32]
 800de48:	4620      	mov	r0, r4
 800de4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de4e:	f012 0f03 	tst.w	r2, #3
 800de52:	d102      	bne.n	800de5a <gmtime_r+0x11e>
 800de54:	fb06 2515 	mls	r5, r6, r5, r2
 800de58:	b95d      	cbnz	r5, 800de72 <gmtime_r+0x136>
 800de5a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800de5e:	fbb2 f6f5 	udiv	r6, r2, r5
 800de62:	fb05 2216 	mls	r2, r5, r6, r2
 800de66:	fab2 f282 	clz	r2, r2
 800de6a:	0952      	lsrs	r2, r2, #5
 800de6c:	333b      	adds	r3, #59	@ 0x3b
 800de6e:	4413      	add	r3, r2
 800de70:	e7e2      	b.n	800de38 <gmtime_r+0xfc>
 800de72:	2201      	movs	r2, #1
 800de74:	e7fa      	b.n	800de6c <gmtime_r+0x130>
 800de76:	bf00      	nop
 800de78:	00015180 	.word	0x00015180
 800de7c:	00023ab1 	.word	0x00023ab1
 800de80:	fffdc54f 	.word	0xfffdc54f
 800de84:	00023ab0 	.word	0x00023ab0

0800de88 <_localeconv_r>:
 800de88:	4800      	ldr	r0, [pc, #0]	@ (800de8c <_localeconv_r+0x4>)
 800de8a:	4770      	bx	lr
 800de8c:	200001a4 	.word	0x200001a4

0800de90 <_close_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4d06      	ldr	r5, [pc, #24]	@ (800deac <_close_r+0x1c>)
 800de94:	2300      	movs	r3, #0
 800de96:	4604      	mov	r4, r0
 800de98:	4608      	mov	r0, r1
 800de9a:	602b      	str	r3, [r5, #0]
 800de9c:	f7f8 f82e 	bl	8005efc <_close>
 800dea0:	1c43      	adds	r3, r0, #1
 800dea2:	d102      	bne.n	800deaa <_close_r+0x1a>
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	b103      	cbz	r3, 800deaa <_close_r+0x1a>
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	bd38      	pop	{r3, r4, r5, pc}
 800deac:	2000ca54 	.word	0x2000ca54

0800deb0 <_reclaim_reent>:
 800deb0:	4b29      	ldr	r3, [pc, #164]	@ (800df58 <_reclaim_reent+0xa8>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4283      	cmp	r3, r0
 800deb6:	b570      	push	{r4, r5, r6, lr}
 800deb8:	4604      	mov	r4, r0
 800deba:	d04b      	beq.n	800df54 <_reclaim_reent+0xa4>
 800debc:	69c3      	ldr	r3, [r0, #28]
 800debe:	b1ab      	cbz	r3, 800deec <_reclaim_reent+0x3c>
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	b16b      	cbz	r3, 800dee0 <_reclaim_reent+0x30>
 800dec4:	2500      	movs	r5, #0
 800dec6:	69e3      	ldr	r3, [r4, #28]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	5959      	ldr	r1, [r3, r5]
 800decc:	2900      	cmp	r1, #0
 800dece:	d13b      	bne.n	800df48 <_reclaim_reent+0x98>
 800ded0:	3504      	adds	r5, #4
 800ded2:	2d80      	cmp	r5, #128	@ 0x80
 800ded4:	d1f7      	bne.n	800dec6 <_reclaim_reent+0x16>
 800ded6:	69e3      	ldr	r3, [r4, #28]
 800ded8:	4620      	mov	r0, r4
 800deda:	68d9      	ldr	r1, [r3, #12]
 800dedc:	f000 ff24 	bl	800ed28 <_free_r>
 800dee0:	69e3      	ldr	r3, [r4, #28]
 800dee2:	6819      	ldr	r1, [r3, #0]
 800dee4:	b111      	cbz	r1, 800deec <_reclaim_reent+0x3c>
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 ff1e 	bl	800ed28 <_free_r>
 800deec:	6961      	ldr	r1, [r4, #20]
 800deee:	b111      	cbz	r1, 800def6 <_reclaim_reent+0x46>
 800def0:	4620      	mov	r0, r4
 800def2:	f000 ff19 	bl	800ed28 <_free_r>
 800def6:	69e1      	ldr	r1, [r4, #28]
 800def8:	b111      	cbz	r1, 800df00 <_reclaim_reent+0x50>
 800defa:	4620      	mov	r0, r4
 800defc:	f000 ff14 	bl	800ed28 <_free_r>
 800df00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800df02:	b111      	cbz	r1, 800df0a <_reclaim_reent+0x5a>
 800df04:	4620      	mov	r0, r4
 800df06:	f000 ff0f 	bl	800ed28 <_free_r>
 800df0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df0c:	b111      	cbz	r1, 800df14 <_reclaim_reent+0x64>
 800df0e:	4620      	mov	r0, r4
 800df10:	f000 ff0a 	bl	800ed28 <_free_r>
 800df14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800df16:	b111      	cbz	r1, 800df1e <_reclaim_reent+0x6e>
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 ff05 	bl	800ed28 <_free_r>
 800df1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800df20:	b111      	cbz	r1, 800df28 <_reclaim_reent+0x78>
 800df22:	4620      	mov	r0, r4
 800df24:	f000 ff00 	bl	800ed28 <_free_r>
 800df28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800df2a:	b111      	cbz	r1, 800df32 <_reclaim_reent+0x82>
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 fefb 	bl	800ed28 <_free_r>
 800df32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800df34:	b111      	cbz	r1, 800df3c <_reclaim_reent+0x8c>
 800df36:	4620      	mov	r0, r4
 800df38:	f000 fef6 	bl	800ed28 <_free_r>
 800df3c:	6a23      	ldr	r3, [r4, #32]
 800df3e:	b14b      	cbz	r3, 800df54 <_reclaim_reent+0xa4>
 800df40:	4620      	mov	r0, r4
 800df42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df46:	4718      	bx	r3
 800df48:	680e      	ldr	r6, [r1, #0]
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 feec 	bl	800ed28 <_free_r>
 800df50:	4631      	mov	r1, r6
 800df52:	e7bb      	b.n	800decc <_reclaim_reent+0x1c>
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	bf00      	nop
 800df58:	20000064 	.word	0x20000064

0800df5c <_lseek_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4d07      	ldr	r5, [pc, #28]	@ (800df7c <_lseek_r+0x20>)
 800df60:	4604      	mov	r4, r0
 800df62:	4608      	mov	r0, r1
 800df64:	4611      	mov	r1, r2
 800df66:	2200      	movs	r2, #0
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f7 ffed 	bl	8005f4a <_lseek>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_lseek_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_lseek_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	2000ca54 	.word	0x2000ca54

0800df80 <_read_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4d07      	ldr	r5, [pc, #28]	@ (800dfa0 <_read_r+0x20>)
 800df84:	4604      	mov	r4, r0
 800df86:	4608      	mov	r0, r1
 800df88:	4611      	mov	r1, r2
 800df8a:	2200      	movs	r2, #0
 800df8c:	602a      	str	r2, [r5, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f7f7 ff7b 	bl	8005e8a <_read>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_read_r+0x1e>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_read_r+0x1e>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	2000ca54 	.word	0x2000ca54

0800dfa4 <_write_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4d07      	ldr	r5, [pc, #28]	@ (800dfc4 <_write_r+0x20>)
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	4608      	mov	r0, r1
 800dfac:	4611      	mov	r1, r2
 800dfae:	2200      	movs	r2, #0
 800dfb0:	602a      	str	r2, [r5, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	f7f7 ff86 	bl	8005ec4 <_write>
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	d102      	bne.n	800dfc2 <_write_r+0x1e>
 800dfbc:	682b      	ldr	r3, [r5, #0]
 800dfbe:	b103      	cbz	r3, 800dfc2 <_write_r+0x1e>
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	2000ca54 	.word	0x2000ca54

0800dfc8 <__errno>:
 800dfc8:	4b01      	ldr	r3, [pc, #4]	@ (800dfd0 <__errno+0x8>)
 800dfca:	6818      	ldr	r0, [r3, #0]
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	20000064 	.word	0x20000064

0800dfd4 <__libc_init_array>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	4d0d      	ldr	r5, [pc, #52]	@ (800e00c <__libc_init_array+0x38>)
 800dfd8:	4c0d      	ldr	r4, [pc, #52]	@ (800e010 <__libc_init_array+0x3c>)
 800dfda:	1b64      	subs	r4, r4, r5
 800dfdc:	10a4      	asrs	r4, r4, #2
 800dfde:	2600      	movs	r6, #0
 800dfe0:	42a6      	cmp	r6, r4
 800dfe2:	d109      	bne.n	800dff8 <__libc_init_array+0x24>
 800dfe4:	4d0b      	ldr	r5, [pc, #44]	@ (800e014 <__libc_init_array+0x40>)
 800dfe6:	4c0c      	ldr	r4, [pc, #48]	@ (800e018 <__libc_init_array+0x44>)
 800dfe8:	f002 f86e 	bl	80100c8 <_init>
 800dfec:	1b64      	subs	r4, r4, r5
 800dfee:	10a4      	asrs	r4, r4, #2
 800dff0:	2600      	movs	r6, #0
 800dff2:	42a6      	cmp	r6, r4
 800dff4:	d105      	bne.n	800e002 <__libc_init_array+0x2e>
 800dff6:	bd70      	pop	{r4, r5, r6, pc}
 800dff8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dffc:	4798      	blx	r3
 800dffe:	3601      	adds	r6, #1
 800e000:	e7ee      	b.n	800dfe0 <__libc_init_array+0xc>
 800e002:	f855 3b04 	ldr.w	r3, [r5], #4
 800e006:	4798      	blx	r3
 800e008:	3601      	adds	r6, #1
 800e00a:	e7f2      	b.n	800dff2 <__libc_init_array+0x1e>
 800e00c:	08010dfc 	.word	0x08010dfc
 800e010:	08010dfc 	.word	0x08010dfc
 800e014:	08010dfc 	.word	0x08010dfc
 800e018:	08010e10 	.word	0x08010e10

0800e01c <__retarget_lock_init_recursive>:
 800e01c:	4770      	bx	lr

0800e01e <__retarget_lock_acquire_recursive>:
 800e01e:	4770      	bx	lr

0800e020 <__retarget_lock_release_recursive>:
 800e020:	4770      	bx	lr

0800e022 <strcpy>:
 800e022:	4603      	mov	r3, r0
 800e024:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e028:	f803 2b01 	strb.w	r2, [r3], #1
 800e02c:	2a00      	cmp	r2, #0
 800e02e:	d1f9      	bne.n	800e024 <strcpy+0x2>
 800e030:	4770      	bx	lr

0800e032 <memcpy>:
 800e032:	440a      	add	r2, r1
 800e034:	4291      	cmp	r1, r2
 800e036:	f100 33ff 	add.w	r3, r0, #4294967295
 800e03a:	d100      	bne.n	800e03e <memcpy+0xc>
 800e03c:	4770      	bx	lr
 800e03e:	b510      	push	{r4, lr}
 800e040:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e044:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e048:	4291      	cmp	r1, r2
 800e04a:	d1f9      	bne.n	800e040 <memcpy+0xe>
 800e04c:	bd10      	pop	{r4, pc}
	...

0800e050 <__assert_func>:
 800e050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e052:	4614      	mov	r4, r2
 800e054:	461a      	mov	r2, r3
 800e056:	4b09      	ldr	r3, [pc, #36]	@ (800e07c <__assert_func+0x2c>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4605      	mov	r5, r0
 800e05c:	68d8      	ldr	r0, [r3, #12]
 800e05e:	b954      	cbnz	r4, 800e076 <__assert_func+0x26>
 800e060:	4b07      	ldr	r3, [pc, #28]	@ (800e080 <__assert_func+0x30>)
 800e062:	461c      	mov	r4, r3
 800e064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e068:	9100      	str	r1, [sp, #0]
 800e06a:	462b      	mov	r3, r5
 800e06c:	4905      	ldr	r1, [pc, #20]	@ (800e084 <__assert_func+0x34>)
 800e06e:	f001 fce1 	bl	800fa34 <fiprintf>
 800e072:	f001 fd1b 	bl	800faac <abort>
 800e076:	4b04      	ldr	r3, [pc, #16]	@ (800e088 <__assert_func+0x38>)
 800e078:	e7f4      	b.n	800e064 <__assert_func+0x14>
 800e07a:	bf00      	nop
 800e07c:	20000064 	.word	0x20000064
 800e080:	08010c07 	.word	0x08010c07
 800e084:	08010bd9 	.word	0x08010bd9
 800e088:	08010bcc 	.word	0x08010bcc

0800e08c <quorem>:
 800e08c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e090:	6903      	ldr	r3, [r0, #16]
 800e092:	690c      	ldr	r4, [r1, #16]
 800e094:	42a3      	cmp	r3, r4
 800e096:	4607      	mov	r7, r0
 800e098:	db7e      	blt.n	800e198 <quorem+0x10c>
 800e09a:	3c01      	subs	r4, #1
 800e09c:	f101 0814 	add.w	r8, r1, #20
 800e0a0:	00a3      	lsls	r3, r4, #2
 800e0a2:	f100 0514 	add.w	r5, r0, #20
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0be:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0c2:	d32e      	bcc.n	800e122 <quorem+0x96>
 800e0c4:	f04f 0a00 	mov.w	sl, #0
 800e0c8:	46c4      	mov	ip, r8
 800e0ca:	46ae      	mov	lr, r5
 800e0cc:	46d3      	mov	fp, sl
 800e0ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e0d2:	b298      	uxth	r0, r3
 800e0d4:	fb06 a000 	mla	r0, r6, r0, sl
 800e0d8:	0c02      	lsrs	r2, r0, #16
 800e0da:	0c1b      	lsrs	r3, r3, #16
 800e0dc:	fb06 2303 	mla	r3, r6, r3, r2
 800e0e0:	f8de 2000 	ldr.w	r2, [lr]
 800e0e4:	b280      	uxth	r0, r0
 800e0e6:	b292      	uxth	r2, r2
 800e0e8:	1a12      	subs	r2, r2, r0
 800e0ea:	445a      	add	r2, fp
 800e0ec:	f8de 0000 	ldr.w	r0, [lr]
 800e0f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e0fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e0fe:	b292      	uxth	r2, r2
 800e100:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e104:	45e1      	cmp	r9, ip
 800e106:	f84e 2b04 	str.w	r2, [lr], #4
 800e10a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e10e:	d2de      	bcs.n	800e0ce <quorem+0x42>
 800e110:	9b00      	ldr	r3, [sp, #0]
 800e112:	58eb      	ldr	r3, [r5, r3]
 800e114:	b92b      	cbnz	r3, 800e122 <quorem+0x96>
 800e116:	9b01      	ldr	r3, [sp, #4]
 800e118:	3b04      	subs	r3, #4
 800e11a:	429d      	cmp	r5, r3
 800e11c:	461a      	mov	r2, r3
 800e11e:	d32f      	bcc.n	800e180 <quorem+0xf4>
 800e120:	613c      	str	r4, [r7, #16]
 800e122:	4638      	mov	r0, r7
 800e124:	f001 f97a 	bl	800f41c <__mcmp>
 800e128:	2800      	cmp	r0, #0
 800e12a:	db25      	blt.n	800e178 <quorem+0xec>
 800e12c:	4629      	mov	r1, r5
 800e12e:	2000      	movs	r0, #0
 800e130:	f858 2b04 	ldr.w	r2, [r8], #4
 800e134:	f8d1 c000 	ldr.w	ip, [r1]
 800e138:	fa1f fe82 	uxth.w	lr, r2
 800e13c:	fa1f f38c 	uxth.w	r3, ip
 800e140:	eba3 030e 	sub.w	r3, r3, lr
 800e144:	4403      	add	r3, r0
 800e146:	0c12      	lsrs	r2, r2, #16
 800e148:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e14c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e150:	b29b      	uxth	r3, r3
 800e152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e156:	45c1      	cmp	r9, r8
 800e158:	f841 3b04 	str.w	r3, [r1], #4
 800e15c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e160:	d2e6      	bcs.n	800e130 <quorem+0xa4>
 800e162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e16a:	b922      	cbnz	r2, 800e176 <quorem+0xea>
 800e16c:	3b04      	subs	r3, #4
 800e16e:	429d      	cmp	r5, r3
 800e170:	461a      	mov	r2, r3
 800e172:	d30b      	bcc.n	800e18c <quorem+0x100>
 800e174:	613c      	str	r4, [r7, #16]
 800e176:	3601      	adds	r6, #1
 800e178:	4630      	mov	r0, r6
 800e17a:	b003      	add	sp, #12
 800e17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e180:	6812      	ldr	r2, [r2, #0]
 800e182:	3b04      	subs	r3, #4
 800e184:	2a00      	cmp	r2, #0
 800e186:	d1cb      	bne.n	800e120 <quorem+0x94>
 800e188:	3c01      	subs	r4, #1
 800e18a:	e7c6      	b.n	800e11a <quorem+0x8e>
 800e18c:	6812      	ldr	r2, [r2, #0]
 800e18e:	3b04      	subs	r3, #4
 800e190:	2a00      	cmp	r2, #0
 800e192:	d1ef      	bne.n	800e174 <quorem+0xe8>
 800e194:	3c01      	subs	r4, #1
 800e196:	e7ea      	b.n	800e16e <quorem+0xe2>
 800e198:	2000      	movs	r0, #0
 800e19a:	e7ee      	b.n	800e17a <quorem+0xee>
 800e19c:	0000      	movs	r0, r0
	...

0800e1a0 <_dtoa_r>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	69c7      	ldr	r7, [r0, #28]
 800e1a6:	b099      	sub	sp, #100	@ 0x64
 800e1a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1ac:	ec55 4b10 	vmov	r4, r5, d0
 800e1b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1b4:	4683      	mov	fp, r0
 800e1b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1ba:	b97f      	cbnz	r7, 800e1dc <_dtoa_r+0x3c>
 800e1bc:	2010      	movs	r0, #16
 800e1be:	f000 fdfd 	bl	800edbc <malloc>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e1c8:	b920      	cbnz	r0, 800e1d4 <_dtoa_r+0x34>
 800e1ca:	4ba7      	ldr	r3, [pc, #668]	@ (800e468 <_dtoa_r+0x2c8>)
 800e1cc:	21ef      	movs	r1, #239	@ 0xef
 800e1ce:	48a7      	ldr	r0, [pc, #668]	@ (800e46c <_dtoa_r+0x2cc>)
 800e1d0:	f7ff ff3e 	bl	800e050 <__assert_func>
 800e1d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e1d8:	6007      	str	r7, [r0, #0]
 800e1da:	60c7      	str	r7, [r0, #12]
 800e1dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1e0:	6819      	ldr	r1, [r3, #0]
 800e1e2:	b159      	cbz	r1, 800e1fc <_dtoa_r+0x5c>
 800e1e4:	685a      	ldr	r2, [r3, #4]
 800e1e6:	604a      	str	r2, [r1, #4]
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	4093      	lsls	r3, r2
 800e1ec:	608b      	str	r3, [r1, #8]
 800e1ee:	4658      	mov	r0, fp
 800e1f0:	f000 feda 	bl	800efa8 <_Bfree>
 800e1f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	1e2b      	subs	r3, r5, #0
 800e1fe:	bfb9      	ittee	lt
 800e200:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e204:	9303      	strlt	r3, [sp, #12]
 800e206:	2300      	movge	r3, #0
 800e208:	6033      	strge	r3, [r6, #0]
 800e20a:	9f03      	ldr	r7, [sp, #12]
 800e20c:	4b98      	ldr	r3, [pc, #608]	@ (800e470 <_dtoa_r+0x2d0>)
 800e20e:	bfbc      	itt	lt
 800e210:	2201      	movlt	r2, #1
 800e212:	6032      	strlt	r2, [r6, #0]
 800e214:	43bb      	bics	r3, r7
 800e216:	d112      	bne.n	800e23e <_dtoa_r+0x9e>
 800e218:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e21a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e224:	4323      	orrs	r3, r4
 800e226:	f000 854d 	beq.w	800ecc4 <_dtoa_r+0xb24>
 800e22a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e22c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e484 <_dtoa_r+0x2e4>
 800e230:	2b00      	cmp	r3, #0
 800e232:	f000 854f 	beq.w	800ecd4 <_dtoa_r+0xb34>
 800e236:	f10a 0303 	add.w	r3, sl, #3
 800e23a:	f000 bd49 	b.w	800ecd0 <_dtoa_r+0xb30>
 800e23e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e242:	2200      	movs	r2, #0
 800e244:	ec51 0b17 	vmov	r0, r1, d7
 800e248:	2300      	movs	r3, #0
 800e24a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e24e:	f7f2 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e252:	4680      	mov	r8, r0
 800e254:	b158      	cbz	r0, 800e26e <_dtoa_r+0xce>
 800e256:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e258:	2301      	movs	r3, #1
 800e25a:	6013      	str	r3, [r2, #0]
 800e25c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e25e:	b113      	cbz	r3, 800e266 <_dtoa_r+0xc6>
 800e260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e262:	4b84      	ldr	r3, [pc, #528]	@ (800e474 <_dtoa_r+0x2d4>)
 800e264:	6013      	str	r3, [r2, #0]
 800e266:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e488 <_dtoa_r+0x2e8>
 800e26a:	f000 bd33 	b.w	800ecd4 <_dtoa_r+0xb34>
 800e26e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e272:	aa16      	add	r2, sp, #88	@ 0x58
 800e274:	a917      	add	r1, sp, #92	@ 0x5c
 800e276:	4658      	mov	r0, fp
 800e278:	f001 f980 	bl	800f57c <__d2b>
 800e27c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e280:	4681      	mov	r9, r0
 800e282:	2e00      	cmp	r6, #0
 800e284:	d077      	beq.n	800e376 <_dtoa_r+0x1d6>
 800e286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e288:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e294:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e298:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e29c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	4b74      	ldr	r3, [pc, #464]	@ (800e478 <_dtoa_r+0x2d8>)
 800e2a6:	f7f1 ffef 	bl	8000288 <__aeabi_dsub>
 800e2aa:	a369      	add	r3, pc, #420	@ (adr r3, 800e450 <_dtoa_r+0x2b0>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f7f2 f9a2 	bl	80005f8 <__aeabi_dmul>
 800e2b4:	a368      	add	r3, pc, #416	@ (adr r3, 800e458 <_dtoa_r+0x2b8>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f7f1 ffe7 	bl	800028c <__adddf3>
 800e2be:	4604      	mov	r4, r0
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	f7f2 f92e 	bl	8000524 <__aeabi_i2d>
 800e2c8:	a365      	add	r3, pc, #404	@ (adr r3, 800e460 <_dtoa_r+0x2c0>)
 800e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ce:	f7f2 f993 	bl	80005f8 <__aeabi_dmul>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	f7f1 ffd7 	bl	800028c <__adddf3>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	f7f2 fc39 	bl	8000b58 <__aeabi_d2iz>
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	f7f2 fbf4 	bl	8000adc <__aeabi_dcmplt>
 800e2f4:	b140      	cbz	r0, 800e308 <_dtoa_r+0x168>
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	f7f2 f914 	bl	8000524 <__aeabi_i2d>
 800e2fc:	4622      	mov	r2, r4
 800e2fe:	462b      	mov	r3, r5
 800e300:	f7f2 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e304:	b900      	cbnz	r0, 800e308 <_dtoa_r+0x168>
 800e306:	3f01      	subs	r7, #1
 800e308:	2f16      	cmp	r7, #22
 800e30a:	d851      	bhi.n	800e3b0 <_dtoa_r+0x210>
 800e30c:	4b5b      	ldr	r3, [pc, #364]	@ (800e47c <_dtoa_r+0x2dc>)
 800e30e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e31a:	f7f2 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d048      	beq.n	800e3b4 <_dtoa_r+0x214>
 800e322:	3f01      	subs	r7, #1
 800e324:	2300      	movs	r3, #0
 800e326:	9312      	str	r3, [sp, #72]	@ 0x48
 800e328:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e32a:	1b9b      	subs	r3, r3, r6
 800e32c:	1e5a      	subs	r2, r3, #1
 800e32e:	bf44      	itt	mi
 800e330:	f1c3 0801 	rsbmi	r8, r3, #1
 800e334:	2300      	movmi	r3, #0
 800e336:	9208      	str	r2, [sp, #32]
 800e338:	bf54      	ite	pl
 800e33a:	f04f 0800 	movpl.w	r8, #0
 800e33e:	9308      	strmi	r3, [sp, #32]
 800e340:	2f00      	cmp	r7, #0
 800e342:	db39      	blt.n	800e3b8 <_dtoa_r+0x218>
 800e344:	9b08      	ldr	r3, [sp, #32]
 800e346:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e348:	443b      	add	r3, r7
 800e34a:	9308      	str	r3, [sp, #32]
 800e34c:	2300      	movs	r3, #0
 800e34e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e352:	2b09      	cmp	r3, #9
 800e354:	d864      	bhi.n	800e420 <_dtoa_r+0x280>
 800e356:	2b05      	cmp	r3, #5
 800e358:	bfc4      	itt	gt
 800e35a:	3b04      	subgt	r3, #4
 800e35c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e360:	f1a3 0302 	sub.w	r3, r3, #2
 800e364:	bfcc      	ite	gt
 800e366:	2400      	movgt	r4, #0
 800e368:	2401      	movle	r4, #1
 800e36a:	2b03      	cmp	r3, #3
 800e36c:	d863      	bhi.n	800e436 <_dtoa_r+0x296>
 800e36e:	e8df f003 	tbb	[pc, r3]
 800e372:	372a      	.short	0x372a
 800e374:	5535      	.short	0x5535
 800e376:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e37a:	441e      	add	r6, r3
 800e37c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e380:	2b20      	cmp	r3, #32
 800e382:	bfc1      	itttt	gt
 800e384:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e388:	409f      	lslgt	r7, r3
 800e38a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e38e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e392:	bfd6      	itet	le
 800e394:	f1c3 0320 	rsble	r3, r3, #32
 800e398:	ea47 0003 	orrgt.w	r0, r7, r3
 800e39c:	fa04 f003 	lslle.w	r0, r4, r3
 800e3a0:	f7f2 f8b0 	bl	8000504 <__aeabi_ui2d>
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3aa:	3e01      	subs	r6, #1
 800e3ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3ae:	e777      	b.n	800e2a0 <_dtoa_r+0x100>
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e7b8      	b.n	800e326 <_dtoa_r+0x186>
 800e3b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3b6:	e7b7      	b.n	800e328 <_dtoa_r+0x188>
 800e3b8:	427b      	negs	r3, r7
 800e3ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3bc:	2300      	movs	r3, #0
 800e3be:	eba8 0807 	sub.w	r8, r8, r7
 800e3c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3c4:	e7c4      	b.n	800e350 <_dtoa_r+0x1b0>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dc35      	bgt.n	800e43c <_dtoa_r+0x29c>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	9307      	str	r3, [sp, #28]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3da:	e00b      	b.n	800e3f4 <_dtoa_r+0x254>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e7f3      	b.n	800e3c8 <_dtoa_r+0x228>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3e6:	18fb      	adds	r3, r7, r3
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	9307      	str	r3, [sp, #28]
 800e3f0:	bfb8      	it	lt
 800e3f2:	2301      	movlt	r3, #1
 800e3f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	2204      	movs	r2, #4
 800e3fc:	f102 0514 	add.w	r5, r2, #20
 800e400:	429d      	cmp	r5, r3
 800e402:	d91f      	bls.n	800e444 <_dtoa_r+0x2a4>
 800e404:	6041      	str	r1, [r0, #4]
 800e406:	4658      	mov	r0, fp
 800e408:	f000 fd8e 	bl	800ef28 <_Balloc>
 800e40c:	4682      	mov	sl, r0
 800e40e:	2800      	cmp	r0, #0
 800e410:	d13c      	bne.n	800e48c <_dtoa_r+0x2ec>
 800e412:	4b1b      	ldr	r3, [pc, #108]	@ (800e480 <_dtoa_r+0x2e0>)
 800e414:	4602      	mov	r2, r0
 800e416:	f240 11af 	movw	r1, #431	@ 0x1af
 800e41a:	e6d8      	b.n	800e1ce <_dtoa_r+0x2e>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e7e0      	b.n	800e3e2 <_dtoa_r+0x242>
 800e420:	2401      	movs	r4, #1
 800e422:	2300      	movs	r3, #0
 800e424:	9309      	str	r3, [sp, #36]	@ 0x24
 800e426:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e428:	f04f 33ff 	mov.w	r3, #4294967295
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	9307      	str	r3, [sp, #28]
 800e430:	2200      	movs	r2, #0
 800e432:	2312      	movs	r3, #18
 800e434:	e7d0      	b.n	800e3d8 <_dtoa_r+0x238>
 800e436:	2301      	movs	r3, #1
 800e438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e43a:	e7f5      	b.n	800e428 <_dtoa_r+0x288>
 800e43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	9307      	str	r3, [sp, #28]
 800e442:	e7d7      	b.n	800e3f4 <_dtoa_r+0x254>
 800e444:	3101      	adds	r1, #1
 800e446:	0052      	lsls	r2, r2, #1
 800e448:	e7d8      	b.n	800e3fc <_dtoa_r+0x25c>
 800e44a:	bf00      	nop
 800e44c:	f3af 8000 	nop.w
 800e450:	636f4361 	.word	0x636f4361
 800e454:	3fd287a7 	.word	0x3fd287a7
 800e458:	8b60c8b3 	.word	0x8b60c8b3
 800e45c:	3fc68a28 	.word	0x3fc68a28
 800e460:	509f79fb 	.word	0x509f79fb
 800e464:	3fd34413 	.word	0x3fd34413
 800e468:	08010b5d 	.word	0x08010b5d
 800e46c:	08010c15 	.word	0x08010c15
 800e470:	7ff00000 	.word	0x7ff00000
 800e474:	08010b3a 	.word	0x08010b3a
 800e478:	3ff80000 	.word	0x3ff80000
 800e47c:	08010d10 	.word	0x08010d10
 800e480:	08010c6d 	.word	0x08010c6d
 800e484:	08010c11 	.word	0x08010c11
 800e488:	08010b39 	.word	0x08010b39
 800e48c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e490:	6018      	str	r0, [r3, #0]
 800e492:	9b07      	ldr	r3, [sp, #28]
 800e494:	2b0e      	cmp	r3, #14
 800e496:	f200 80a4 	bhi.w	800e5e2 <_dtoa_r+0x442>
 800e49a:	2c00      	cmp	r4, #0
 800e49c:	f000 80a1 	beq.w	800e5e2 <_dtoa_r+0x442>
 800e4a0:	2f00      	cmp	r7, #0
 800e4a2:	dd33      	ble.n	800e50c <_dtoa_r+0x36c>
 800e4a4:	4bad      	ldr	r3, [pc, #692]	@ (800e75c <_dtoa_r+0x5bc>)
 800e4a6:	f007 020f 	and.w	r2, r7, #15
 800e4aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4ae:	ed93 7b00 	vldr	d7, [r3]
 800e4b2:	05f8      	lsls	r0, r7, #23
 800e4b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4bc:	d516      	bpl.n	800e4ec <_dtoa_r+0x34c>
 800e4be:	4ba8      	ldr	r3, [pc, #672]	@ (800e760 <_dtoa_r+0x5c0>)
 800e4c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4c8:	f7f2 f9c0 	bl	800084c <__aeabi_ddiv>
 800e4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4d0:	f004 040f 	and.w	r4, r4, #15
 800e4d4:	2603      	movs	r6, #3
 800e4d6:	4da2      	ldr	r5, [pc, #648]	@ (800e760 <_dtoa_r+0x5c0>)
 800e4d8:	b954      	cbnz	r4, 800e4f0 <_dtoa_r+0x350>
 800e4da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e2:	f7f2 f9b3 	bl	800084c <__aeabi_ddiv>
 800e4e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4ea:	e028      	b.n	800e53e <_dtoa_r+0x39e>
 800e4ec:	2602      	movs	r6, #2
 800e4ee:	e7f2      	b.n	800e4d6 <_dtoa_r+0x336>
 800e4f0:	07e1      	lsls	r1, r4, #31
 800e4f2:	d508      	bpl.n	800e506 <_dtoa_r+0x366>
 800e4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4fc:	f7f2 f87c 	bl	80005f8 <__aeabi_dmul>
 800e500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e504:	3601      	adds	r6, #1
 800e506:	1064      	asrs	r4, r4, #1
 800e508:	3508      	adds	r5, #8
 800e50a:	e7e5      	b.n	800e4d8 <_dtoa_r+0x338>
 800e50c:	f000 80d2 	beq.w	800e6b4 <_dtoa_r+0x514>
 800e510:	427c      	negs	r4, r7
 800e512:	4b92      	ldr	r3, [pc, #584]	@ (800e75c <_dtoa_r+0x5bc>)
 800e514:	4d92      	ldr	r5, [pc, #584]	@ (800e760 <_dtoa_r+0x5c0>)
 800e516:	f004 020f 	and.w	r2, r4, #15
 800e51a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e526:	f7f2 f867 	bl	80005f8 <__aeabi_dmul>
 800e52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e52e:	1124      	asrs	r4, r4, #4
 800e530:	2300      	movs	r3, #0
 800e532:	2602      	movs	r6, #2
 800e534:	2c00      	cmp	r4, #0
 800e536:	f040 80b2 	bne.w	800e69e <_dtoa_r+0x4fe>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1d3      	bne.n	800e4e6 <_dtoa_r+0x346>
 800e53e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e540:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 80b7 	beq.w	800e6b8 <_dtoa_r+0x518>
 800e54a:	4b86      	ldr	r3, [pc, #536]	@ (800e764 <_dtoa_r+0x5c4>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	4620      	mov	r0, r4
 800e550:	4629      	mov	r1, r5
 800e552:	f7f2 fac3 	bl	8000adc <__aeabi_dcmplt>
 800e556:	2800      	cmp	r0, #0
 800e558:	f000 80ae 	beq.w	800e6b8 <_dtoa_r+0x518>
 800e55c:	9b07      	ldr	r3, [sp, #28]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 80aa 	beq.w	800e6b8 <_dtoa_r+0x518>
 800e564:	9b00      	ldr	r3, [sp, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	dd37      	ble.n	800e5da <_dtoa_r+0x43a>
 800e56a:	1e7b      	subs	r3, r7, #1
 800e56c:	9304      	str	r3, [sp, #16]
 800e56e:	4620      	mov	r0, r4
 800e570:	4b7d      	ldr	r3, [pc, #500]	@ (800e768 <_dtoa_r+0x5c8>)
 800e572:	2200      	movs	r2, #0
 800e574:	4629      	mov	r1, r5
 800e576:	f7f2 f83f 	bl	80005f8 <__aeabi_dmul>
 800e57a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e57e:	9c00      	ldr	r4, [sp, #0]
 800e580:	3601      	adds	r6, #1
 800e582:	4630      	mov	r0, r6
 800e584:	f7f1 ffce 	bl	8000524 <__aeabi_i2d>
 800e588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e58c:	f7f2 f834 	bl	80005f8 <__aeabi_dmul>
 800e590:	4b76      	ldr	r3, [pc, #472]	@ (800e76c <_dtoa_r+0x5cc>)
 800e592:	2200      	movs	r2, #0
 800e594:	f7f1 fe7a 	bl	800028c <__adddf3>
 800e598:	4605      	mov	r5, r0
 800e59a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e59e:	2c00      	cmp	r4, #0
 800e5a0:	f040 808d 	bne.w	800e6be <_dtoa_r+0x51e>
 800e5a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5a8:	4b71      	ldr	r3, [pc, #452]	@ (800e770 <_dtoa_r+0x5d0>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f7f1 fe6c 	bl	8000288 <__aeabi_dsub>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4633      	mov	r3, r6
 800e5bc:	f7f2 faac 	bl	8000b18 <__aeabi_dcmpgt>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	f040 828b 	bne.w	800eadc <_dtoa_r+0x93c>
 800e5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ca:	462a      	mov	r2, r5
 800e5cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e5d0:	f7f2 fa84 	bl	8000adc <__aeabi_dcmplt>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	f040 8128 	bne.w	800e82a <_dtoa_r+0x68a>
 800e5da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e5de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e5e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f2c0 815a 	blt.w	800e89e <_dtoa_r+0x6fe>
 800e5ea:	2f0e      	cmp	r7, #14
 800e5ec:	f300 8157 	bgt.w	800e89e <_dtoa_r+0x6fe>
 800e5f0:	4b5a      	ldr	r3, [pc, #360]	@ (800e75c <_dtoa_r+0x5bc>)
 800e5f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e5f6:	ed93 7b00 	vldr	d7, [r3]
 800e5fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	ed8d 7b00 	vstr	d7, [sp]
 800e602:	da03      	bge.n	800e60c <_dtoa_r+0x46c>
 800e604:	9b07      	ldr	r3, [sp, #28]
 800e606:	2b00      	cmp	r3, #0
 800e608:	f340 8101 	ble.w	800e80e <_dtoa_r+0x66e>
 800e60c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e610:	4656      	mov	r6, sl
 800e612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e616:	4620      	mov	r0, r4
 800e618:	4629      	mov	r1, r5
 800e61a:	f7f2 f917 	bl	800084c <__aeabi_ddiv>
 800e61e:	f7f2 fa9b 	bl	8000b58 <__aeabi_d2iz>
 800e622:	4680      	mov	r8, r0
 800e624:	f7f1 ff7e 	bl	8000524 <__aeabi_i2d>
 800e628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e62c:	f7f1 ffe4 	bl	80005f8 <__aeabi_dmul>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	4620      	mov	r0, r4
 800e636:	4629      	mov	r1, r5
 800e638:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e63c:	f7f1 fe24 	bl	8000288 <__aeabi_dsub>
 800e640:	f806 4b01 	strb.w	r4, [r6], #1
 800e644:	9d07      	ldr	r5, [sp, #28]
 800e646:	eba6 040a 	sub.w	r4, r6, sl
 800e64a:	42a5      	cmp	r5, r4
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	f040 8117 	bne.w	800e882 <_dtoa_r+0x6e2>
 800e654:	f7f1 fe1a 	bl	800028c <__adddf3>
 800e658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e65c:	4604      	mov	r4, r0
 800e65e:	460d      	mov	r5, r1
 800e660:	f7f2 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 800e664:	2800      	cmp	r0, #0
 800e666:	f040 80f9 	bne.w	800e85c <_dtoa_r+0x6bc>
 800e66a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e66e:	4620      	mov	r0, r4
 800e670:	4629      	mov	r1, r5
 800e672:	f7f2 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 800e676:	b118      	cbz	r0, 800e680 <_dtoa_r+0x4e0>
 800e678:	f018 0f01 	tst.w	r8, #1
 800e67c:	f040 80ee 	bne.w	800e85c <_dtoa_r+0x6bc>
 800e680:	4649      	mov	r1, r9
 800e682:	4658      	mov	r0, fp
 800e684:	f000 fc90 	bl	800efa8 <_Bfree>
 800e688:	2300      	movs	r3, #0
 800e68a:	7033      	strb	r3, [r6, #0]
 800e68c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e68e:	3701      	adds	r7, #1
 800e690:	601f      	str	r7, [r3, #0]
 800e692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 831d 	beq.w	800ecd4 <_dtoa_r+0xb34>
 800e69a:	601e      	str	r6, [r3, #0]
 800e69c:	e31a      	b.n	800ecd4 <_dtoa_r+0xb34>
 800e69e:	07e2      	lsls	r2, r4, #31
 800e6a0:	d505      	bpl.n	800e6ae <_dtoa_r+0x50e>
 800e6a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6a6:	f7f1 ffa7 	bl	80005f8 <__aeabi_dmul>
 800e6aa:	3601      	adds	r6, #1
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	1064      	asrs	r4, r4, #1
 800e6b0:	3508      	adds	r5, #8
 800e6b2:	e73f      	b.n	800e534 <_dtoa_r+0x394>
 800e6b4:	2602      	movs	r6, #2
 800e6b6:	e742      	b.n	800e53e <_dtoa_r+0x39e>
 800e6b8:	9c07      	ldr	r4, [sp, #28]
 800e6ba:	9704      	str	r7, [sp, #16]
 800e6bc:	e761      	b.n	800e582 <_dtoa_r+0x3e2>
 800e6be:	4b27      	ldr	r3, [pc, #156]	@ (800e75c <_dtoa_r+0x5bc>)
 800e6c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6ca:	4454      	add	r4, sl
 800e6cc:	2900      	cmp	r1, #0
 800e6ce:	d053      	beq.n	800e778 <_dtoa_r+0x5d8>
 800e6d0:	4928      	ldr	r1, [pc, #160]	@ (800e774 <_dtoa_r+0x5d4>)
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	f7f2 f8ba 	bl	800084c <__aeabi_ddiv>
 800e6d8:	4633      	mov	r3, r6
 800e6da:	462a      	mov	r2, r5
 800e6dc:	f7f1 fdd4 	bl	8000288 <__aeabi_dsub>
 800e6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e6e4:	4656      	mov	r6, sl
 800e6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ea:	f7f2 fa35 	bl	8000b58 <__aeabi_d2iz>
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	f7f1 ff18 	bl	8000524 <__aeabi_i2d>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6fc:	f7f1 fdc4 	bl	8000288 <__aeabi_dsub>
 800e700:	3530      	adds	r5, #48	@ 0x30
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e70a:	f806 5b01 	strb.w	r5, [r6], #1
 800e70e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e712:	f7f2 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800e716:	2800      	cmp	r0, #0
 800e718:	d171      	bne.n	800e7fe <_dtoa_r+0x65e>
 800e71a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e71e:	4911      	ldr	r1, [pc, #68]	@ (800e764 <_dtoa_r+0x5c4>)
 800e720:	2000      	movs	r0, #0
 800e722:	f7f1 fdb1 	bl	8000288 <__aeabi_dsub>
 800e726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e72a:	f7f2 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800e72e:	2800      	cmp	r0, #0
 800e730:	f040 8095 	bne.w	800e85e <_dtoa_r+0x6be>
 800e734:	42a6      	cmp	r6, r4
 800e736:	f43f af50 	beq.w	800e5da <_dtoa_r+0x43a>
 800e73a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e73e:	4b0a      	ldr	r3, [pc, #40]	@ (800e768 <_dtoa_r+0x5c8>)
 800e740:	2200      	movs	r2, #0
 800e742:	f7f1 ff59 	bl	80005f8 <__aeabi_dmul>
 800e746:	4b08      	ldr	r3, [pc, #32]	@ (800e768 <_dtoa_r+0x5c8>)
 800e748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e74c:	2200      	movs	r2, #0
 800e74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e752:	f7f1 ff51 	bl	80005f8 <__aeabi_dmul>
 800e756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e75a:	e7c4      	b.n	800e6e6 <_dtoa_r+0x546>
 800e75c:	08010d10 	.word	0x08010d10
 800e760:	08010ce8 	.word	0x08010ce8
 800e764:	3ff00000 	.word	0x3ff00000
 800e768:	40240000 	.word	0x40240000
 800e76c:	401c0000 	.word	0x401c0000
 800e770:	40140000 	.word	0x40140000
 800e774:	3fe00000 	.word	0x3fe00000
 800e778:	4631      	mov	r1, r6
 800e77a:	4628      	mov	r0, r5
 800e77c:	f7f1 ff3c 	bl	80005f8 <__aeabi_dmul>
 800e780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e784:	9415      	str	r4, [sp, #84]	@ 0x54
 800e786:	4656      	mov	r6, sl
 800e788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e78c:	f7f2 f9e4 	bl	8000b58 <__aeabi_d2iz>
 800e790:	4605      	mov	r5, r0
 800e792:	f7f1 fec7 	bl	8000524 <__aeabi_i2d>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e79e:	f7f1 fd73 	bl	8000288 <__aeabi_dsub>
 800e7a2:	3530      	adds	r5, #48	@ 0x30
 800e7a4:	f806 5b01 	strb.w	r5, [r6], #1
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	42a6      	cmp	r6, r4
 800e7ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7b2:	f04f 0200 	mov.w	r2, #0
 800e7b6:	d124      	bne.n	800e802 <_dtoa_r+0x662>
 800e7b8:	4bac      	ldr	r3, [pc, #688]	@ (800ea6c <_dtoa_r+0x8cc>)
 800e7ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7be:	f7f1 fd65 	bl	800028c <__adddf3>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7ca:	f7f2 f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d145      	bne.n	800e85e <_dtoa_r+0x6be>
 800e7d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7d6:	49a5      	ldr	r1, [pc, #660]	@ (800ea6c <_dtoa_r+0x8cc>)
 800e7d8:	2000      	movs	r0, #0
 800e7da:	f7f1 fd55 	bl	8000288 <__aeabi_dsub>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7e6:	f7f2 f979 	bl	8000adc <__aeabi_dcmplt>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	f43f aef5 	beq.w	800e5da <_dtoa_r+0x43a>
 800e7f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e7f2:	1e73      	subs	r3, r6, #1
 800e7f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e7f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e7fa:	2b30      	cmp	r3, #48	@ 0x30
 800e7fc:	d0f8      	beq.n	800e7f0 <_dtoa_r+0x650>
 800e7fe:	9f04      	ldr	r7, [sp, #16]
 800e800:	e73e      	b.n	800e680 <_dtoa_r+0x4e0>
 800e802:	4b9b      	ldr	r3, [pc, #620]	@ (800ea70 <_dtoa_r+0x8d0>)
 800e804:	f7f1 fef8 	bl	80005f8 <__aeabi_dmul>
 800e808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e80c:	e7bc      	b.n	800e788 <_dtoa_r+0x5e8>
 800e80e:	d10c      	bne.n	800e82a <_dtoa_r+0x68a>
 800e810:	4b98      	ldr	r3, [pc, #608]	@ (800ea74 <_dtoa_r+0x8d4>)
 800e812:	2200      	movs	r2, #0
 800e814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e818:	f7f1 feee 	bl	80005f8 <__aeabi_dmul>
 800e81c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e820:	f7f2 f970 	bl	8000b04 <__aeabi_dcmpge>
 800e824:	2800      	cmp	r0, #0
 800e826:	f000 8157 	beq.w	800ead8 <_dtoa_r+0x938>
 800e82a:	2400      	movs	r4, #0
 800e82c:	4625      	mov	r5, r4
 800e82e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e830:	43db      	mvns	r3, r3
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	4656      	mov	r6, sl
 800e836:	2700      	movs	r7, #0
 800e838:	4621      	mov	r1, r4
 800e83a:	4658      	mov	r0, fp
 800e83c:	f000 fbb4 	bl	800efa8 <_Bfree>
 800e840:	2d00      	cmp	r5, #0
 800e842:	d0dc      	beq.n	800e7fe <_dtoa_r+0x65e>
 800e844:	b12f      	cbz	r7, 800e852 <_dtoa_r+0x6b2>
 800e846:	42af      	cmp	r7, r5
 800e848:	d003      	beq.n	800e852 <_dtoa_r+0x6b2>
 800e84a:	4639      	mov	r1, r7
 800e84c:	4658      	mov	r0, fp
 800e84e:	f000 fbab 	bl	800efa8 <_Bfree>
 800e852:	4629      	mov	r1, r5
 800e854:	4658      	mov	r0, fp
 800e856:	f000 fba7 	bl	800efa8 <_Bfree>
 800e85a:	e7d0      	b.n	800e7fe <_dtoa_r+0x65e>
 800e85c:	9704      	str	r7, [sp, #16]
 800e85e:	4633      	mov	r3, r6
 800e860:	461e      	mov	r6, r3
 800e862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e866:	2a39      	cmp	r2, #57	@ 0x39
 800e868:	d107      	bne.n	800e87a <_dtoa_r+0x6da>
 800e86a:	459a      	cmp	sl, r3
 800e86c:	d1f8      	bne.n	800e860 <_dtoa_r+0x6c0>
 800e86e:	9a04      	ldr	r2, [sp, #16]
 800e870:	3201      	adds	r2, #1
 800e872:	9204      	str	r2, [sp, #16]
 800e874:	2230      	movs	r2, #48	@ 0x30
 800e876:	f88a 2000 	strb.w	r2, [sl]
 800e87a:	781a      	ldrb	r2, [r3, #0]
 800e87c:	3201      	adds	r2, #1
 800e87e:	701a      	strb	r2, [r3, #0]
 800e880:	e7bd      	b.n	800e7fe <_dtoa_r+0x65e>
 800e882:	4b7b      	ldr	r3, [pc, #492]	@ (800ea70 <_dtoa_r+0x8d0>)
 800e884:	2200      	movs	r2, #0
 800e886:	f7f1 feb7 	bl	80005f8 <__aeabi_dmul>
 800e88a:	2200      	movs	r2, #0
 800e88c:	2300      	movs	r3, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	460d      	mov	r5, r1
 800e892:	f7f2 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 800e896:	2800      	cmp	r0, #0
 800e898:	f43f aebb 	beq.w	800e612 <_dtoa_r+0x472>
 800e89c:	e6f0      	b.n	800e680 <_dtoa_r+0x4e0>
 800e89e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8a0:	2a00      	cmp	r2, #0
 800e8a2:	f000 80db 	beq.w	800ea5c <_dtoa_r+0x8bc>
 800e8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8a8:	2a01      	cmp	r2, #1
 800e8aa:	f300 80bf 	bgt.w	800ea2c <_dtoa_r+0x88c>
 800e8ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8b0:	2a00      	cmp	r2, #0
 800e8b2:	f000 80b7 	beq.w	800ea24 <_dtoa_r+0x884>
 800e8b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8bc:	4646      	mov	r6, r8
 800e8be:	9a08      	ldr	r2, [sp, #32]
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	441a      	add	r2, r3
 800e8c4:	4658      	mov	r0, fp
 800e8c6:	4498      	add	r8, r3
 800e8c8:	9208      	str	r2, [sp, #32]
 800e8ca:	f000 fc21 	bl	800f110 <__i2b>
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	b15e      	cbz	r6, 800e8ea <_dtoa_r+0x74a>
 800e8d2:	9b08      	ldr	r3, [sp, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	dd08      	ble.n	800e8ea <_dtoa_r+0x74a>
 800e8d8:	42b3      	cmp	r3, r6
 800e8da:	9a08      	ldr	r2, [sp, #32]
 800e8dc:	bfa8      	it	ge
 800e8de:	4633      	movge	r3, r6
 800e8e0:	eba8 0803 	sub.w	r8, r8, r3
 800e8e4:	1af6      	subs	r6, r6, r3
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	9308      	str	r3, [sp, #32]
 800e8ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8ec:	b1f3      	cbz	r3, 800e92c <_dtoa_r+0x78c>
 800e8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f000 80b7 	beq.w	800ea64 <_dtoa_r+0x8c4>
 800e8f6:	b18c      	cbz	r4, 800e91c <_dtoa_r+0x77c>
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	4622      	mov	r2, r4
 800e8fc:	4658      	mov	r0, fp
 800e8fe:	f000 fcc7 	bl	800f290 <__pow5mult>
 800e902:	464a      	mov	r2, r9
 800e904:	4601      	mov	r1, r0
 800e906:	4605      	mov	r5, r0
 800e908:	4658      	mov	r0, fp
 800e90a:	f000 fc17 	bl	800f13c <__multiply>
 800e90e:	4649      	mov	r1, r9
 800e910:	9004      	str	r0, [sp, #16]
 800e912:	4658      	mov	r0, fp
 800e914:	f000 fb48 	bl	800efa8 <_Bfree>
 800e918:	9b04      	ldr	r3, [sp, #16]
 800e91a:	4699      	mov	r9, r3
 800e91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e91e:	1b1a      	subs	r2, r3, r4
 800e920:	d004      	beq.n	800e92c <_dtoa_r+0x78c>
 800e922:	4649      	mov	r1, r9
 800e924:	4658      	mov	r0, fp
 800e926:	f000 fcb3 	bl	800f290 <__pow5mult>
 800e92a:	4681      	mov	r9, r0
 800e92c:	2101      	movs	r1, #1
 800e92e:	4658      	mov	r0, fp
 800e930:	f000 fbee 	bl	800f110 <__i2b>
 800e934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e936:	4604      	mov	r4, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f000 81cf 	beq.w	800ecdc <_dtoa_r+0xb3c>
 800e93e:	461a      	mov	r2, r3
 800e940:	4601      	mov	r1, r0
 800e942:	4658      	mov	r0, fp
 800e944:	f000 fca4 	bl	800f290 <__pow5mult>
 800e948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	4604      	mov	r4, r0
 800e94e:	f300 8095 	bgt.w	800ea7c <_dtoa_r+0x8dc>
 800e952:	9b02      	ldr	r3, [sp, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	f040 8087 	bne.w	800ea68 <_dtoa_r+0x8c8>
 800e95a:	9b03      	ldr	r3, [sp, #12]
 800e95c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e960:	2b00      	cmp	r3, #0
 800e962:	f040 8089 	bne.w	800ea78 <_dtoa_r+0x8d8>
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e96c:	0d1b      	lsrs	r3, r3, #20
 800e96e:	051b      	lsls	r3, r3, #20
 800e970:	b12b      	cbz	r3, 800e97e <_dtoa_r+0x7de>
 800e972:	9b08      	ldr	r3, [sp, #32]
 800e974:	3301      	adds	r3, #1
 800e976:	9308      	str	r3, [sp, #32]
 800e978:	f108 0801 	add.w	r8, r8, #1
 800e97c:	2301      	movs	r3, #1
 800e97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e982:	2b00      	cmp	r3, #0
 800e984:	f000 81b0 	beq.w	800ece8 <_dtoa_r+0xb48>
 800e988:	6923      	ldr	r3, [r4, #16]
 800e98a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e98e:	6918      	ldr	r0, [r3, #16]
 800e990:	f000 fb72 	bl	800f078 <__hi0bits>
 800e994:	f1c0 0020 	rsb	r0, r0, #32
 800e998:	9b08      	ldr	r3, [sp, #32]
 800e99a:	4418      	add	r0, r3
 800e99c:	f010 001f 	ands.w	r0, r0, #31
 800e9a0:	d077      	beq.n	800ea92 <_dtoa_r+0x8f2>
 800e9a2:	f1c0 0320 	rsb	r3, r0, #32
 800e9a6:	2b04      	cmp	r3, #4
 800e9a8:	dd6b      	ble.n	800ea82 <_dtoa_r+0x8e2>
 800e9aa:	9b08      	ldr	r3, [sp, #32]
 800e9ac:	f1c0 001c 	rsb	r0, r0, #28
 800e9b0:	4403      	add	r3, r0
 800e9b2:	4480      	add	r8, r0
 800e9b4:	4406      	add	r6, r0
 800e9b6:	9308      	str	r3, [sp, #32]
 800e9b8:	f1b8 0f00 	cmp.w	r8, #0
 800e9bc:	dd05      	ble.n	800e9ca <_dtoa_r+0x82a>
 800e9be:	4649      	mov	r1, r9
 800e9c0:	4642      	mov	r2, r8
 800e9c2:	4658      	mov	r0, fp
 800e9c4:	f000 fcbe 	bl	800f344 <__lshift>
 800e9c8:	4681      	mov	r9, r0
 800e9ca:	9b08      	ldr	r3, [sp, #32]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	dd05      	ble.n	800e9dc <_dtoa_r+0x83c>
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	f000 fcb5 	bl	800f344 <__lshift>
 800e9da:	4604      	mov	r4, r0
 800e9dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d059      	beq.n	800ea96 <_dtoa_r+0x8f6>
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4648      	mov	r0, r9
 800e9e6:	f000 fd19 	bl	800f41c <__mcmp>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	da53      	bge.n	800ea96 <_dtoa_r+0x8f6>
 800e9ee:	1e7b      	subs	r3, r7, #1
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	4649      	mov	r1, r9
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	220a      	movs	r2, #10
 800e9f8:	4658      	mov	r0, fp
 800e9fa:	f000 faf7 	bl	800efec <__multadd>
 800e9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea00:	4681      	mov	r9, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f000 8172 	beq.w	800ecec <_dtoa_r+0xb4c>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	220a      	movs	r2, #10
 800ea0e:	4658      	mov	r0, fp
 800ea10:	f000 faec 	bl	800efec <__multadd>
 800ea14:	9b00      	ldr	r3, [sp, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	4605      	mov	r5, r0
 800ea1a:	dc67      	bgt.n	800eaec <_dtoa_r+0x94c>
 800ea1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	dc41      	bgt.n	800eaa6 <_dtoa_r+0x906>
 800ea22:	e063      	b.n	800eaec <_dtoa_r+0x94c>
 800ea24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea2a:	e746      	b.n	800e8ba <_dtoa_r+0x71a>
 800ea2c:	9b07      	ldr	r3, [sp, #28]
 800ea2e:	1e5c      	subs	r4, r3, #1
 800ea30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea32:	42a3      	cmp	r3, r4
 800ea34:	bfbf      	itttt	lt
 800ea36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea3c:	1ae3      	sublt	r3, r4, r3
 800ea3e:	bfb4      	ite	lt
 800ea40:	18d2      	addlt	r2, r2, r3
 800ea42:	1b1c      	subge	r4, r3, r4
 800ea44:	9b07      	ldr	r3, [sp, #28]
 800ea46:	bfbc      	itt	lt
 800ea48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea4a:	2400      	movlt	r4, #0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	bfb5      	itete	lt
 800ea50:	eba8 0603 	sublt.w	r6, r8, r3
 800ea54:	9b07      	ldrge	r3, [sp, #28]
 800ea56:	2300      	movlt	r3, #0
 800ea58:	4646      	movge	r6, r8
 800ea5a:	e730      	b.n	800e8be <_dtoa_r+0x71e>
 800ea5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea60:	4646      	mov	r6, r8
 800ea62:	e735      	b.n	800e8d0 <_dtoa_r+0x730>
 800ea64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea66:	e75c      	b.n	800e922 <_dtoa_r+0x782>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	e788      	b.n	800e97e <_dtoa_r+0x7de>
 800ea6c:	3fe00000 	.word	0x3fe00000
 800ea70:	40240000 	.word	0x40240000
 800ea74:	40140000 	.word	0x40140000
 800ea78:	9b02      	ldr	r3, [sp, #8]
 800ea7a:	e780      	b.n	800e97e <_dtoa_r+0x7de>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea80:	e782      	b.n	800e988 <_dtoa_r+0x7e8>
 800ea82:	d099      	beq.n	800e9b8 <_dtoa_r+0x818>
 800ea84:	9a08      	ldr	r2, [sp, #32]
 800ea86:	331c      	adds	r3, #28
 800ea88:	441a      	add	r2, r3
 800ea8a:	4498      	add	r8, r3
 800ea8c:	441e      	add	r6, r3
 800ea8e:	9208      	str	r2, [sp, #32]
 800ea90:	e792      	b.n	800e9b8 <_dtoa_r+0x818>
 800ea92:	4603      	mov	r3, r0
 800ea94:	e7f6      	b.n	800ea84 <_dtoa_r+0x8e4>
 800ea96:	9b07      	ldr	r3, [sp, #28]
 800ea98:	9704      	str	r7, [sp, #16]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	dc20      	bgt.n	800eae0 <_dtoa_r+0x940>
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	dd1e      	ble.n	800eae4 <_dtoa_r+0x944>
 800eaa6:	9b00      	ldr	r3, [sp, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f47f aec0 	bne.w	800e82e <_dtoa_r+0x68e>
 800eaae:	4621      	mov	r1, r4
 800eab0:	2205      	movs	r2, #5
 800eab2:	4658      	mov	r0, fp
 800eab4:	f000 fa9a 	bl	800efec <__multadd>
 800eab8:	4601      	mov	r1, r0
 800eaba:	4604      	mov	r4, r0
 800eabc:	4648      	mov	r0, r9
 800eabe:	f000 fcad 	bl	800f41c <__mcmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	f77f aeb3 	ble.w	800e82e <_dtoa_r+0x68e>
 800eac8:	4656      	mov	r6, sl
 800eaca:	2331      	movs	r3, #49	@ 0x31
 800eacc:	f806 3b01 	strb.w	r3, [r6], #1
 800ead0:	9b04      	ldr	r3, [sp, #16]
 800ead2:	3301      	adds	r3, #1
 800ead4:	9304      	str	r3, [sp, #16]
 800ead6:	e6ae      	b.n	800e836 <_dtoa_r+0x696>
 800ead8:	9c07      	ldr	r4, [sp, #28]
 800eada:	9704      	str	r7, [sp, #16]
 800eadc:	4625      	mov	r5, r4
 800eade:	e7f3      	b.n	800eac8 <_dtoa_r+0x928>
 800eae0:	9b07      	ldr	r3, [sp, #28]
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f000 8104 	beq.w	800ecf4 <_dtoa_r+0xb54>
 800eaec:	2e00      	cmp	r6, #0
 800eaee:	dd05      	ble.n	800eafc <_dtoa_r+0x95c>
 800eaf0:	4629      	mov	r1, r5
 800eaf2:	4632      	mov	r2, r6
 800eaf4:	4658      	mov	r0, fp
 800eaf6:	f000 fc25 	bl	800f344 <__lshift>
 800eafa:	4605      	mov	r5, r0
 800eafc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d05a      	beq.n	800ebb8 <_dtoa_r+0xa18>
 800eb02:	6869      	ldr	r1, [r5, #4]
 800eb04:	4658      	mov	r0, fp
 800eb06:	f000 fa0f 	bl	800ef28 <_Balloc>
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	b928      	cbnz	r0, 800eb1a <_dtoa_r+0x97a>
 800eb0e:	4b84      	ldr	r3, [pc, #528]	@ (800ed20 <_dtoa_r+0xb80>)
 800eb10:	4602      	mov	r2, r0
 800eb12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb16:	f7ff bb5a 	b.w	800e1ce <_dtoa_r+0x2e>
 800eb1a:	692a      	ldr	r2, [r5, #16]
 800eb1c:	3202      	adds	r2, #2
 800eb1e:	0092      	lsls	r2, r2, #2
 800eb20:	f105 010c 	add.w	r1, r5, #12
 800eb24:	300c      	adds	r0, #12
 800eb26:	f7ff fa84 	bl	800e032 <memcpy>
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4658      	mov	r0, fp
 800eb30:	f000 fc08 	bl	800f344 <__lshift>
 800eb34:	f10a 0301 	add.w	r3, sl, #1
 800eb38:	9307      	str	r3, [sp, #28]
 800eb3a:	9b00      	ldr	r3, [sp, #0]
 800eb3c:	4453      	add	r3, sl
 800eb3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb40:	9b02      	ldr	r3, [sp, #8]
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	462f      	mov	r7, r5
 800eb48:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	9b07      	ldr	r3, [sp, #28]
 800eb4e:	4621      	mov	r1, r4
 800eb50:	3b01      	subs	r3, #1
 800eb52:	4648      	mov	r0, r9
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	f7ff fa99 	bl	800e08c <quorem>
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	9002      	str	r0, [sp, #8]
 800eb5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb62:	4648      	mov	r0, r9
 800eb64:	f000 fc5a 	bl	800f41c <__mcmp>
 800eb68:	462a      	mov	r2, r5
 800eb6a:	9008      	str	r0, [sp, #32]
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	4658      	mov	r0, fp
 800eb70:	f000 fc70 	bl	800f454 <__mdiff>
 800eb74:	68c2      	ldr	r2, [r0, #12]
 800eb76:	4606      	mov	r6, r0
 800eb78:	bb02      	cbnz	r2, 800ebbc <_dtoa_r+0xa1c>
 800eb7a:	4601      	mov	r1, r0
 800eb7c:	4648      	mov	r0, r9
 800eb7e:	f000 fc4d 	bl	800f41c <__mcmp>
 800eb82:	4602      	mov	r2, r0
 800eb84:	4631      	mov	r1, r6
 800eb86:	4658      	mov	r0, fp
 800eb88:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb8a:	f000 fa0d 	bl	800efa8 <_Bfree>
 800eb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb92:	9e07      	ldr	r6, [sp, #28]
 800eb94:	ea43 0102 	orr.w	r1, r3, r2
 800eb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb9a:	4319      	orrs	r1, r3
 800eb9c:	d110      	bne.n	800ebc0 <_dtoa_r+0xa20>
 800eb9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eba2:	d029      	beq.n	800ebf8 <_dtoa_r+0xa58>
 800eba4:	9b08      	ldr	r3, [sp, #32]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dd02      	ble.n	800ebb0 <_dtoa_r+0xa10>
 800ebaa:	9b02      	ldr	r3, [sp, #8]
 800ebac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebb0:	9b00      	ldr	r3, [sp, #0]
 800ebb2:	f883 8000 	strb.w	r8, [r3]
 800ebb6:	e63f      	b.n	800e838 <_dtoa_r+0x698>
 800ebb8:	4628      	mov	r0, r5
 800ebba:	e7bb      	b.n	800eb34 <_dtoa_r+0x994>
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	e7e1      	b.n	800eb84 <_dtoa_r+0x9e4>
 800ebc0:	9b08      	ldr	r3, [sp, #32]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	db04      	blt.n	800ebd0 <_dtoa_r+0xa30>
 800ebc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebc8:	430b      	orrs	r3, r1
 800ebca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebcc:	430b      	orrs	r3, r1
 800ebce:	d120      	bne.n	800ec12 <_dtoa_r+0xa72>
 800ebd0:	2a00      	cmp	r2, #0
 800ebd2:	dded      	ble.n	800ebb0 <_dtoa_r+0xa10>
 800ebd4:	4649      	mov	r1, r9
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	4658      	mov	r0, fp
 800ebda:	f000 fbb3 	bl	800f344 <__lshift>
 800ebde:	4621      	mov	r1, r4
 800ebe0:	4681      	mov	r9, r0
 800ebe2:	f000 fc1b 	bl	800f41c <__mcmp>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	dc03      	bgt.n	800ebf2 <_dtoa_r+0xa52>
 800ebea:	d1e1      	bne.n	800ebb0 <_dtoa_r+0xa10>
 800ebec:	f018 0f01 	tst.w	r8, #1
 800ebf0:	d0de      	beq.n	800ebb0 <_dtoa_r+0xa10>
 800ebf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebf6:	d1d8      	bne.n	800ebaa <_dtoa_r+0xa0a>
 800ebf8:	9a00      	ldr	r2, [sp, #0]
 800ebfa:	2339      	movs	r3, #57	@ 0x39
 800ebfc:	7013      	strb	r3, [r2, #0]
 800ebfe:	4633      	mov	r3, r6
 800ec00:	461e      	mov	r6, r3
 800ec02:	3b01      	subs	r3, #1
 800ec04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec08:	2a39      	cmp	r2, #57	@ 0x39
 800ec0a:	d052      	beq.n	800ecb2 <_dtoa_r+0xb12>
 800ec0c:	3201      	adds	r2, #1
 800ec0e:	701a      	strb	r2, [r3, #0]
 800ec10:	e612      	b.n	800e838 <_dtoa_r+0x698>
 800ec12:	2a00      	cmp	r2, #0
 800ec14:	dd07      	ble.n	800ec26 <_dtoa_r+0xa86>
 800ec16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec1a:	d0ed      	beq.n	800ebf8 <_dtoa_r+0xa58>
 800ec1c:	9a00      	ldr	r2, [sp, #0]
 800ec1e:	f108 0301 	add.w	r3, r8, #1
 800ec22:	7013      	strb	r3, [r2, #0]
 800ec24:	e608      	b.n	800e838 <_dtoa_r+0x698>
 800ec26:	9b07      	ldr	r3, [sp, #28]
 800ec28:	9a07      	ldr	r2, [sp, #28]
 800ec2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d028      	beq.n	800ec86 <_dtoa_r+0xae6>
 800ec34:	4649      	mov	r1, r9
 800ec36:	2300      	movs	r3, #0
 800ec38:	220a      	movs	r2, #10
 800ec3a:	4658      	mov	r0, fp
 800ec3c:	f000 f9d6 	bl	800efec <__multadd>
 800ec40:	42af      	cmp	r7, r5
 800ec42:	4681      	mov	r9, r0
 800ec44:	f04f 0300 	mov.w	r3, #0
 800ec48:	f04f 020a 	mov.w	r2, #10
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	4658      	mov	r0, fp
 800ec50:	d107      	bne.n	800ec62 <_dtoa_r+0xac2>
 800ec52:	f000 f9cb 	bl	800efec <__multadd>
 800ec56:	4607      	mov	r7, r0
 800ec58:	4605      	mov	r5, r0
 800ec5a:	9b07      	ldr	r3, [sp, #28]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	e774      	b.n	800eb4c <_dtoa_r+0x9ac>
 800ec62:	f000 f9c3 	bl	800efec <__multadd>
 800ec66:	4629      	mov	r1, r5
 800ec68:	4607      	mov	r7, r0
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	220a      	movs	r2, #10
 800ec6e:	4658      	mov	r0, fp
 800ec70:	f000 f9bc 	bl	800efec <__multadd>
 800ec74:	4605      	mov	r5, r0
 800ec76:	e7f0      	b.n	800ec5a <_dtoa_r+0xaba>
 800ec78:	9b00      	ldr	r3, [sp, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	bfcc      	ite	gt
 800ec7e:	461e      	movgt	r6, r3
 800ec80:	2601      	movle	r6, #1
 800ec82:	4456      	add	r6, sl
 800ec84:	2700      	movs	r7, #0
 800ec86:	4649      	mov	r1, r9
 800ec88:	2201      	movs	r2, #1
 800ec8a:	4658      	mov	r0, fp
 800ec8c:	f000 fb5a 	bl	800f344 <__lshift>
 800ec90:	4621      	mov	r1, r4
 800ec92:	4681      	mov	r9, r0
 800ec94:	f000 fbc2 	bl	800f41c <__mcmp>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	dcb0      	bgt.n	800ebfe <_dtoa_r+0xa5e>
 800ec9c:	d102      	bne.n	800eca4 <_dtoa_r+0xb04>
 800ec9e:	f018 0f01 	tst.w	r8, #1
 800eca2:	d1ac      	bne.n	800ebfe <_dtoa_r+0xa5e>
 800eca4:	4633      	mov	r3, r6
 800eca6:	461e      	mov	r6, r3
 800eca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecac:	2a30      	cmp	r2, #48	@ 0x30
 800ecae:	d0fa      	beq.n	800eca6 <_dtoa_r+0xb06>
 800ecb0:	e5c2      	b.n	800e838 <_dtoa_r+0x698>
 800ecb2:	459a      	cmp	sl, r3
 800ecb4:	d1a4      	bne.n	800ec00 <_dtoa_r+0xa60>
 800ecb6:	9b04      	ldr	r3, [sp, #16]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	9304      	str	r3, [sp, #16]
 800ecbc:	2331      	movs	r3, #49	@ 0x31
 800ecbe:	f88a 3000 	strb.w	r3, [sl]
 800ecc2:	e5b9      	b.n	800e838 <_dtoa_r+0x698>
 800ecc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed24 <_dtoa_r+0xb84>
 800ecca:	b11b      	cbz	r3, 800ecd4 <_dtoa_r+0xb34>
 800eccc:	f10a 0308 	add.w	r3, sl, #8
 800ecd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ecd2:	6013      	str	r3, [r2, #0]
 800ecd4:	4650      	mov	r0, sl
 800ecd6:	b019      	add	sp, #100	@ 0x64
 800ecd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	f77f ae37 	ble.w	800e952 <_dtoa_r+0x7b2>
 800ece4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ece6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ece8:	2001      	movs	r0, #1
 800ecea:	e655      	b.n	800e998 <_dtoa_r+0x7f8>
 800ecec:	9b00      	ldr	r3, [sp, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f77f aed6 	ble.w	800eaa0 <_dtoa_r+0x900>
 800ecf4:	4656      	mov	r6, sl
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4648      	mov	r0, r9
 800ecfa:	f7ff f9c7 	bl	800e08c <quorem>
 800ecfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed02:	f806 8b01 	strb.w	r8, [r6], #1
 800ed06:	9b00      	ldr	r3, [sp, #0]
 800ed08:	eba6 020a 	sub.w	r2, r6, sl
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	ddb3      	ble.n	800ec78 <_dtoa_r+0xad8>
 800ed10:	4649      	mov	r1, r9
 800ed12:	2300      	movs	r3, #0
 800ed14:	220a      	movs	r2, #10
 800ed16:	4658      	mov	r0, fp
 800ed18:	f000 f968 	bl	800efec <__multadd>
 800ed1c:	4681      	mov	r9, r0
 800ed1e:	e7ea      	b.n	800ecf6 <_dtoa_r+0xb56>
 800ed20:	08010c6d 	.word	0x08010c6d
 800ed24:	08010c08 	.word	0x08010c08

0800ed28 <_free_r>:
 800ed28:	b538      	push	{r3, r4, r5, lr}
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	2900      	cmp	r1, #0
 800ed2e:	d041      	beq.n	800edb4 <_free_r+0x8c>
 800ed30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed34:	1f0c      	subs	r4, r1, #4
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	bfb8      	it	lt
 800ed3a:	18e4      	addlt	r4, r4, r3
 800ed3c:	f000 f8e8 	bl	800ef10 <__malloc_lock>
 800ed40:	4a1d      	ldr	r2, [pc, #116]	@ (800edb8 <_free_r+0x90>)
 800ed42:	6813      	ldr	r3, [r2, #0]
 800ed44:	b933      	cbnz	r3, 800ed54 <_free_r+0x2c>
 800ed46:	6063      	str	r3, [r4, #4]
 800ed48:	6014      	str	r4, [r2, #0]
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed50:	f000 b8e4 	b.w	800ef1c <__malloc_unlock>
 800ed54:	42a3      	cmp	r3, r4
 800ed56:	d908      	bls.n	800ed6a <_free_r+0x42>
 800ed58:	6820      	ldr	r0, [r4, #0]
 800ed5a:	1821      	adds	r1, r4, r0
 800ed5c:	428b      	cmp	r3, r1
 800ed5e:	bf01      	itttt	eq
 800ed60:	6819      	ldreq	r1, [r3, #0]
 800ed62:	685b      	ldreq	r3, [r3, #4]
 800ed64:	1809      	addeq	r1, r1, r0
 800ed66:	6021      	streq	r1, [r4, #0]
 800ed68:	e7ed      	b.n	800ed46 <_free_r+0x1e>
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	b10b      	cbz	r3, 800ed74 <_free_r+0x4c>
 800ed70:	42a3      	cmp	r3, r4
 800ed72:	d9fa      	bls.n	800ed6a <_free_r+0x42>
 800ed74:	6811      	ldr	r1, [r2, #0]
 800ed76:	1850      	adds	r0, r2, r1
 800ed78:	42a0      	cmp	r0, r4
 800ed7a:	d10b      	bne.n	800ed94 <_free_r+0x6c>
 800ed7c:	6820      	ldr	r0, [r4, #0]
 800ed7e:	4401      	add	r1, r0
 800ed80:	1850      	adds	r0, r2, r1
 800ed82:	4283      	cmp	r3, r0
 800ed84:	6011      	str	r1, [r2, #0]
 800ed86:	d1e0      	bne.n	800ed4a <_free_r+0x22>
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	6053      	str	r3, [r2, #4]
 800ed8e:	4408      	add	r0, r1
 800ed90:	6010      	str	r0, [r2, #0]
 800ed92:	e7da      	b.n	800ed4a <_free_r+0x22>
 800ed94:	d902      	bls.n	800ed9c <_free_r+0x74>
 800ed96:	230c      	movs	r3, #12
 800ed98:	602b      	str	r3, [r5, #0]
 800ed9a:	e7d6      	b.n	800ed4a <_free_r+0x22>
 800ed9c:	6820      	ldr	r0, [r4, #0]
 800ed9e:	1821      	adds	r1, r4, r0
 800eda0:	428b      	cmp	r3, r1
 800eda2:	bf04      	itt	eq
 800eda4:	6819      	ldreq	r1, [r3, #0]
 800eda6:	685b      	ldreq	r3, [r3, #4]
 800eda8:	6063      	str	r3, [r4, #4]
 800edaa:	bf04      	itt	eq
 800edac:	1809      	addeq	r1, r1, r0
 800edae:	6021      	streq	r1, [r4, #0]
 800edb0:	6054      	str	r4, [r2, #4]
 800edb2:	e7ca      	b.n	800ed4a <_free_r+0x22>
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	bf00      	nop
 800edb8:	2000ca60 	.word	0x2000ca60

0800edbc <malloc>:
 800edbc:	4b02      	ldr	r3, [pc, #8]	@ (800edc8 <malloc+0xc>)
 800edbe:	4601      	mov	r1, r0
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	f000 b825 	b.w	800ee10 <_malloc_r>
 800edc6:	bf00      	nop
 800edc8:	20000064 	.word	0x20000064

0800edcc <sbrk_aligned>:
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	4e0f      	ldr	r6, [pc, #60]	@ (800ee0c <sbrk_aligned+0x40>)
 800edd0:	460c      	mov	r4, r1
 800edd2:	6831      	ldr	r1, [r6, #0]
 800edd4:	4605      	mov	r5, r0
 800edd6:	b911      	cbnz	r1, 800edde <sbrk_aligned+0x12>
 800edd8:	f000 fe58 	bl	800fa8c <_sbrk_r>
 800eddc:	6030      	str	r0, [r6, #0]
 800edde:	4621      	mov	r1, r4
 800ede0:	4628      	mov	r0, r5
 800ede2:	f000 fe53 	bl	800fa8c <_sbrk_r>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	d103      	bne.n	800edf2 <sbrk_aligned+0x26>
 800edea:	f04f 34ff 	mov.w	r4, #4294967295
 800edee:	4620      	mov	r0, r4
 800edf0:	bd70      	pop	{r4, r5, r6, pc}
 800edf2:	1cc4      	adds	r4, r0, #3
 800edf4:	f024 0403 	bic.w	r4, r4, #3
 800edf8:	42a0      	cmp	r0, r4
 800edfa:	d0f8      	beq.n	800edee <sbrk_aligned+0x22>
 800edfc:	1a21      	subs	r1, r4, r0
 800edfe:	4628      	mov	r0, r5
 800ee00:	f000 fe44 	bl	800fa8c <_sbrk_r>
 800ee04:	3001      	adds	r0, #1
 800ee06:	d1f2      	bne.n	800edee <sbrk_aligned+0x22>
 800ee08:	e7ef      	b.n	800edea <sbrk_aligned+0x1e>
 800ee0a:	bf00      	nop
 800ee0c:	2000ca5c 	.word	0x2000ca5c

0800ee10 <_malloc_r>:
 800ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee14:	1ccd      	adds	r5, r1, #3
 800ee16:	f025 0503 	bic.w	r5, r5, #3
 800ee1a:	3508      	adds	r5, #8
 800ee1c:	2d0c      	cmp	r5, #12
 800ee1e:	bf38      	it	cc
 800ee20:	250c      	movcc	r5, #12
 800ee22:	2d00      	cmp	r5, #0
 800ee24:	4606      	mov	r6, r0
 800ee26:	db01      	blt.n	800ee2c <_malloc_r+0x1c>
 800ee28:	42a9      	cmp	r1, r5
 800ee2a:	d904      	bls.n	800ee36 <_malloc_r+0x26>
 800ee2c:	230c      	movs	r3, #12
 800ee2e:	6033      	str	r3, [r6, #0]
 800ee30:	2000      	movs	r0, #0
 800ee32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef0c <_malloc_r+0xfc>
 800ee3a:	f000 f869 	bl	800ef10 <__malloc_lock>
 800ee3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ee42:	461c      	mov	r4, r3
 800ee44:	bb44      	cbnz	r4, 800ee98 <_malloc_r+0x88>
 800ee46:	4629      	mov	r1, r5
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f7ff ffbf 	bl	800edcc <sbrk_aligned>
 800ee4e:	1c43      	adds	r3, r0, #1
 800ee50:	4604      	mov	r4, r0
 800ee52:	d158      	bne.n	800ef06 <_malloc_r+0xf6>
 800ee54:	f8d8 4000 	ldr.w	r4, [r8]
 800ee58:	4627      	mov	r7, r4
 800ee5a:	2f00      	cmp	r7, #0
 800ee5c:	d143      	bne.n	800eee6 <_malloc_r+0xd6>
 800ee5e:	2c00      	cmp	r4, #0
 800ee60:	d04b      	beq.n	800eefa <_malloc_r+0xea>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	4639      	mov	r1, r7
 800ee66:	4630      	mov	r0, r6
 800ee68:	eb04 0903 	add.w	r9, r4, r3
 800ee6c:	f000 fe0e 	bl	800fa8c <_sbrk_r>
 800ee70:	4581      	cmp	r9, r0
 800ee72:	d142      	bne.n	800eefa <_malloc_r+0xea>
 800ee74:	6821      	ldr	r1, [r4, #0]
 800ee76:	1a6d      	subs	r5, r5, r1
 800ee78:	4629      	mov	r1, r5
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f7ff ffa6 	bl	800edcc <sbrk_aligned>
 800ee80:	3001      	adds	r0, #1
 800ee82:	d03a      	beq.n	800eefa <_malloc_r+0xea>
 800ee84:	6823      	ldr	r3, [r4, #0]
 800ee86:	442b      	add	r3, r5
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee8e:	685a      	ldr	r2, [r3, #4]
 800ee90:	bb62      	cbnz	r2, 800eeec <_malloc_r+0xdc>
 800ee92:	f8c8 7000 	str.w	r7, [r8]
 800ee96:	e00f      	b.n	800eeb8 <_malloc_r+0xa8>
 800ee98:	6822      	ldr	r2, [r4, #0]
 800ee9a:	1b52      	subs	r2, r2, r5
 800ee9c:	d420      	bmi.n	800eee0 <_malloc_r+0xd0>
 800ee9e:	2a0b      	cmp	r2, #11
 800eea0:	d917      	bls.n	800eed2 <_malloc_r+0xc2>
 800eea2:	1961      	adds	r1, r4, r5
 800eea4:	42a3      	cmp	r3, r4
 800eea6:	6025      	str	r5, [r4, #0]
 800eea8:	bf18      	it	ne
 800eeaa:	6059      	strne	r1, [r3, #4]
 800eeac:	6863      	ldr	r3, [r4, #4]
 800eeae:	bf08      	it	eq
 800eeb0:	f8c8 1000 	streq.w	r1, [r8]
 800eeb4:	5162      	str	r2, [r4, r5]
 800eeb6:	604b      	str	r3, [r1, #4]
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f000 f82f 	bl	800ef1c <__malloc_unlock>
 800eebe:	f104 000b 	add.w	r0, r4, #11
 800eec2:	1d23      	adds	r3, r4, #4
 800eec4:	f020 0007 	bic.w	r0, r0, #7
 800eec8:	1ac2      	subs	r2, r0, r3
 800eeca:	bf1c      	itt	ne
 800eecc:	1a1b      	subne	r3, r3, r0
 800eece:	50a3      	strne	r3, [r4, r2]
 800eed0:	e7af      	b.n	800ee32 <_malloc_r+0x22>
 800eed2:	6862      	ldr	r2, [r4, #4]
 800eed4:	42a3      	cmp	r3, r4
 800eed6:	bf0c      	ite	eq
 800eed8:	f8c8 2000 	streq.w	r2, [r8]
 800eedc:	605a      	strne	r2, [r3, #4]
 800eede:	e7eb      	b.n	800eeb8 <_malloc_r+0xa8>
 800eee0:	4623      	mov	r3, r4
 800eee2:	6864      	ldr	r4, [r4, #4]
 800eee4:	e7ae      	b.n	800ee44 <_malloc_r+0x34>
 800eee6:	463c      	mov	r4, r7
 800eee8:	687f      	ldr	r7, [r7, #4]
 800eeea:	e7b6      	b.n	800ee5a <_malloc_r+0x4a>
 800eeec:	461a      	mov	r2, r3
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	42a3      	cmp	r3, r4
 800eef2:	d1fb      	bne.n	800eeec <_malloc_r+0xdc>
 800eef4:	2300      	movs	r3, #0
 800eef6:	6053      	str	r3, [r2, #4]
 800eef8:	e7de      	b.n	800eeb8 <_malloc_r+0xa8>
 800eefa:	230c      	movs	r3, #12
 800eefc:	6033      	str	r3, [r6, #0]
 800eefe:	4630      	mov	r0, r6
 800ef00:	f000 f80c 	bl	800ef1c <__malloc_unlock>
 800ef04:	e794      	b.n	800ee30 <_malloc_r+0x20>
 800ef06:	6005      	str	r5, [r0, #0]
 800ef08:	e7d6      	b.n	800eeb8 <_malloc_r+0xa8>
 800ef0a:	bf00      	nop
 800ef0c:	2000ca60 	.word	0x2000ca60

0800ef10 <__malloc_lock>:
 800ef10:	4801      	ldr	r0, [pc, #4]	@ (800ef18 <__malloc_lock+0x8>)
 800ef12:	f7ff b884 	b.w	800e01e <__retarget_lock_acquire_recursive>
 800ef16:	bf00      	nop
 800ef18:	2000ca58 	.word	0x2000ca58

0800ef1c <__malloc_unlock>:
 800ef1c:	4801      	ldr	r0, [pc, #4]	@ (800ef24 <__malloc_unlock+0x8>)
 800ef1e:	f7ff b87f 	b.w	800e020 <__retarget_lock_release_recursive>
 800ef22:	bf00      	nop
 800ef24:	2000ca58 	.word	0x2000ca58

0800ef28 <_Balloc>:
 800ef28:	b570      	push	{r4, r5, r6, lr}
 800ef2a:	69c6      	ldr	r6, [r0, #28]
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	460d      	mov	r5, r1
 800ef30:	b976      	cbnz	r6, 800ef50 <_Balloc+0x28>
 800ef32:	2010      	movs	r0, #16
 800ef34:	f7ff ff42 	bl	800edbc <malloc>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	61e0      	str	r0, [r4, #28]
 800ef3c:	b920      	cbnz	r0, 800ef48 <_Balloc+0x20>
 800ef3e:	4b18      	ldr	r3, [pc, #96]	@ (800efa0 <_Balloc+0x78>)
 800ef40:	4818      	ldr	r0, [pc, #96]	@ (800efa4 <_Balloc+0x7c>)
 800ef42:	216b      	movs	r1, #107	@ 0x6b
 800ef44:	f7ff f884 	bl	800e050 <__assert_func>
 800ef48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef4c:	6006      	str	r6, [r0, #0]
 800ef4e:	60c6      	str	r6, [r0, #12]
 800ef50:	69e6      	ldr	r6, [r4, #28]
 800ef52:	68f3      	ldr	r3, [r6, #12]
 800ef54:	b183      	cbz	r3, 800ef78 <_Balloc+0x50>
 800ef56:	69e3      	ldr	r3, [r4, #28]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef5e:	b9b8      	cbnz	r0, 800ef90 <_Balloc+0x68>
 800ef60:	2101      	movs	r1, #1
 800ef62:	fa01 f605 	lsl.w	r6, r1, r5
 800ef66:	1d72      	adds	r2, r6, #5
 800ef68:	0092      	lsls	r2, r2, #2
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 fda5 	bl	800faba <_calloc_r>
 800ef70:	b160      	cbz	r0, 800ef8c <_Balloc+0x64>
 800ef72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef76:	e00e      	b.n	800ef96 <_Balloc+0x6e>
 800ef78:	2221      	movs	r2, #33	@ 0x21
 800ef7a:	2104      	movs	r1, #4
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f000 fd9c 	bl	800faba <_calloc_r>
 800ef82:	69e3      	ldr	r3, [r4, #28]
 800ef84:	60f0      	str	r0, [r6, #12]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1e4      	bne.n	800ef56 <_Balloc+0x2e>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}
 800ef90:	6802      	ldr	r2, [r0, #0]
 800ef92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef96:	2300      	movs	r3, #0
 800ef98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef9c:	e7f7      	b.n	800ef8e <_Balloc+0x66>
 800ef9e:	bf00      	nop
 800efa0:	08010b5d 	.word	0x08010b5d
 800efa4:	08010c7e 	.word	0x08010c7e

0800efa8 <_Bfree>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	69c6      	ldr	r6, [r0, #28]
 800efac:	4605      	mov	r5, r0
 800efae:	460c      	mov	r4, r1
 800efb0:	b976      	cbnz	r6, 800efd0 <_Bfree+0x28>
 800efb2:	2010      	movs	r0, #16
 800efb4:	f7ff ff02 	bl	800edbc <malloc>
 800efb8:	4602      	mov	r2, r0
 800efba:	61e8      	str	r0, [r5, #28]
 800efbc:	b920      	cbnz	r0, 800efc8 <_Bfree+0x20>
 800efbe:	4b09      	ldr	r3, [pc, #36]	@ (800efe4 <_Bfree+0x3c>)
 800efc0:	4809      	ldr	r0, [pc, #36]	@ (800efe8 <_Bfree+0x40>)
 800efc2:	218f      	movs	r1, #143	@ 0x8f
 800efc4:	f7ff f844 	bl	800e050 <__assert_func>
 800efc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efcc:	6006      	str	r6, [r0, #0]
 800efce:	60c6      	str	r6, [r0, #12]
 800efd0:	b13c      	cbz	r4, 800efe2 <_Bfree+0x3a>
 800efd2:	69eb      	ldr	r3, [r5, #28]
 800efd4:	6862      	ldr	r2, [r4, #4]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efdc:	6021      	str	r1, [r4, #0]
 800efde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800efe2:	bd70      	pop	{r4, r5, r6, pc}
 800efe4:	08010b5d 	.word	0x08010b5d
 800efe8:	08010c7e 	.word	0x08010c7e

0800efec <__multadd>:
 800efec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff0:	690d      	ldr	r5, [r1, #16]
 800eff2:	4607      	mov	r7, r0
 800eff4:	460c      	mov	r4, r1
 800eff6:	461e      	mov	r6, r3
 800eff8:	f101 0c14 	add.w	ip, r1, #20
 800effc:	2000      	movs	r0, #0
 800effe:	f8dc 3000 	ldr.w	r3, [ip]
 800f002:	b299      	uxth	r1, r3
 800f004:	fb02 6101 	mla	r1, r2, r1, r6
 800f008:	0c1e      	lsrs	r6, r3, #16
 800f00a:	0c0b      	lsrs	r3, r1, #16
 800f00c:	fb02 3306 	mla	r3, r2, r6, r3
 800f010:	b289      	uxth	r1, r1
 800f012:	3001      	adds	r0, #1
 800f014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f018:	4285      	cmp	r5, r0
 800f01a:	f84c 1b04 	str.w	r1, [ip], #4
 800f01e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f022:	dcec      	bgt.n	800effe <__multadd+0x12>
 800f024:	b30e      	cbz	r6, 800f06a <__multadd+0x7e>
 800f026:	68a3      	ldr	r3, [r4, #8]
 800f028:	42ab      	cmp	r3, r5
 800f02a:	dc19      	bgt.n	800f060 <__multadd+0x74>
 800f02c:	6861      	ldr	r1, [r4, #4]
 800f02e:	4638      	mov	r0, r7
 800f030:	3101      	adds	r1, #1
 800f032:	f7ff ff79 	bl	800ef28 <_Balloc>
 800f036:	4680      	mov	r8, r0
 800f038:	b928      	cbnz	r0, 800f046 <__multadd+0x5a>
 800f03a:	4602      	mov	r2, r0
 800f03c:	4b0c      	ldr	r3, [pc, #48]	@ (800f070 <__multadd+0x84>)
 800f03e:	480d      	ldr	r0, [pc, #52]	@ (800f074 <__multadd+0x88>)
 800f040:	21ba      	movs	r1, #186	@ 0xba
 800f042:	f7ff f805 	bl	800e050 <__assert_func>
 800f046:	6922      	ldr	r2, [r4, #16]
 800f048:	3202      	adds	r2, #2
 800f04a:	f104 010c 	add.w	r1, r4, #12
 800f04e:	0092      	lsls	r2, r2, #2
 800f050:	300c      	adds	r0, #12
 800f052:	f7fe ffee 	bl	800e032 <memcpy>
 800f056:	4621      	mov	r1, r4
 800f058:	4638      	mov	r0, r7
 800f05a:	f7ff ffa5 	bl	800efa8 <_Bfree>
 800f05e:	4644      	mov	r4, r8
 800f060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f064:	3501      	adds	r5, #1
 800f066:	615e      	str	r6, [r3, #20]
 800f068:	6125      	str	r5, [r4, #16]
 800f06a:	4620      	mov	r0, r4
 800f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f070:	08010c6d 	.word	0x08010c6d
 800f074:	08010c7e 	.word	0x08010c7e

0800f078 <__hi0bits>:
 800f078:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f07c:	4603      	mov	r3, r0
 800f07e:	bf36      	itet	cc
 800f080:	0403      	lslcc	r3, r0, #16
 800f082:	2000      	movcs	r0, #0
 800f084:	2010      	movcc	r0, #16
 800f086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f08a:	bf3c      	itt	cc
 800f08c:	021b      	lslcc	r3, r3, #8
 800f08e:	3008      	addcc	r0, #8
 800f090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f094:	bf3c      	itt	cc
 800f096:	011b      	lslcc	r3, r3, #4
 800f098:	3004      	addcc	r0, #4
 800f09a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f09e:	bf3c      	itt	cc
 800f0a0:	009b      	lslcc	r3, r3, #2
 800f0a2:	3002      	addcc	r0, #2
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	db05      	blt.n	800f0b4 <__hi0bits+0x3c>
 800f0a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f0ac:	f100 0001 	add.w	r0, r0, #1
 800f0b0:	bf08      	it	eq
 800f0b2:	2020      	moveq	r0, #32
 800f0b4:	4770      	bx	lr

0800f0b6 <__lo0bits>:
 800f0b6:	6803      	ldr	r3, [r0, #0]
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	f013 0007 	ands.w	r0, r3, #7
 800f0be:	d00b      	beq.n	800f0d8 <__lo0bits+0x22>
 800f0c0:	07d9      	lsls	r1, r3, #31
 800f0c2:	d421      	bmi.n	800f108 <__lo0bits+0x52>
 800f0c4:	0798      	lsls	r0, r3, #30
 800f0c6:	bf49      	itett	mi
 800f0c8:	085b      	lsrmi	r3, r3, #1
 800f0ca:	089b      	lsrpl	r3, r3, #2
 800f0cc:	2001      	movmi	r0, #1
 800f0ce:	6013      	strmi	r3, [r2, #0]
 800f0d0:	bf5c      	itt	pl
 800f0d2:	6013      	strpl	r3, [r2, #0]
 800f0d4:	2002      	movpl	r0, #2
 800f0d6:	4770      	bx	lr
 800f0d8:	b299      	uxth	r1, r3
 800f0da:	b909      	cbnz	r1, 800f0e0 <__lo0bits+0x2a>
 800f0dc:	0c1b      	lsrs	r3, r3, #16
 800f0de:	2010      	movs	r0, #16
 800f0e0:	b2d9      	uxtb	r1, r3
 800f0e2:	b909      	cbnz	r1, 800f0e8 <__lo0bits+0x32>
 800f0e4:	3008      	adds	r0, #8
 800f0e6:	0a1b      	lsrs	r3, r3, #8
 800f0e8:	0719      	lsls	r1, r3, #28
 800f0ea:	bf04      	itt	eq
 800f0ec:	091b      	lsreq	r3, r3, #4
 800f0ee:	3004      	addeq	r0, #4
 800f0f0:	0799      	lsls	r1, r3, #30
 800f0f2:	bf04      	itt	eq
 800f0f4:	089b      	lsreq	r3, r3, #2
 800f0f6:	3002      	addeq	r0, #2
 800f0f8:	07d9      	lsls	r1, r3, #31
 800f0fa:	d403      	bmi.n	800f104 <__lo0bits+0x4e>
 800f0fc:	085b      	lsrs	r3, r3, #1
 800f0fe:	f100 0001 	add.w	r0, r0, #1
 800f102:	d003      	beq.n	800f10c <__lo0bits+0x56>
 800f104:	6013      	str	r3, [r2, #0]
 800f106:	4770      	bx	lr
 800f108:	2000      	movs	r0, #0
 800f10a:	4770      	bx	lr
 800f10c:	2020      	movs	r0, #32
 800f10e:	4770      	bx	lr

0800f110 <__i2b>:
 800f110:	b510      	push	{r4, lr}
 800f112:	460c      	mov	r4, r1
 800f114:	2101      	movs	r1, #1
 800f116:	f7ff ff07 	bl	800ef28 <_Balloc>
 800f11a:	4602      	mov	r2, r0
 800f11c:	b928      	cbnz	r0, 800f12a <__i2b+0x1a>
 800f11e:	4b05      	ldr	r3, [pc, #20]	@ (800f134 <__i2b+0x24>)
 800f120:	4805      	ldr	r0, [pc, #20]	@ (800f138 <__i2b+0x28>)
 800f122:	f240 1145 	movw	r1, #325	@ 0x145
 800f126:	f7fe ff93 	bl	800e050 <__assert_func>
 800f12a:	2301      	movs	r3, #1
 800f12c:	6144      	str	r4, [r0, #20]
 800f12e:	6103      	str	r3, [r0, #16]
 800f130:	bd10      	pop	{r4, pc}
 800f132:	bf00      	nop
 800f134:	08010c6d 	.word	0x08010c6d
 800f138:	08010c7e 	.word	0x08010c7e

0800f13c <__multiply>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	4614      	mov	r4, r2
 800f142:	690a      	ldr	r2, [r1, #16]
 800f144:	6923      	ldr	r3, [r4, #16]
 800f146:	429a      	cmp	r2, r3
 800f148:	bfa8      	it	ge
 800f14a:	4623      	movge	r3, r4
 800f14c:	460f      	mov	r7, r1
 800f14e:	bfa4      	itt	ge
 800f150:	460c      	movge	r4, r1
 800f152:	461f      	movge	r7, r3
 800f154:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f158:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f15c:	68a3      	ldr	r3, [r4, #8]
 800f15e:	6861      	ldr	r1, [r4, #4]
 800f160:	eb0a 0609 	add.w	r6, sl, r9
 800f164:	42b3      	cmp	r3, r6
 800f166:	b085      	sub	sp, #20
 800f168:	bfb8      	it	lt
 800f16a:	3101      	addlt	r1, #1
 800f16c:	f7ff fedc 	bl	800ef28 <_Balloc>
 800f170:	b930      	cbnz	r0, 800f180 <__multiply+0x44>
 800f172:	4602      	mov	r2, r0
 800f174:	4b44      	ldr	r3, [pc, #272]	@ (800f288 <__multiply+0x14c>)
 800f176:	4845      	ldr	r0, [pc, #276]	@ (800f28c <__multiply+0x150>)
 800f178:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f17c:	f7fe ff68 	bl	800e050 <__assert_func>
 800f180:	f100 0514 	add.w	r5, r0, #20
 800f184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f188:	462b      	mov	r3, r5
 800f18a:	2200      	movs	r2, #0
 800f18c:	4543      	cmp	r3, r8
 800f18e:	d321      	bcc.n	800f1d4 <__multiply+0x98>
 800f190:	f107 0114 	add.w	r1, r7, #20
 800f194:	f104 0214 	add.w	r2, r4, #20
 800f198:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f19c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f1a0:	9302      	str	r3, [sp, #8]
 800f1a2:	1b13      	subs	r3, r2, r4
 800f1a4:	3b15      	subs	r3, #21
 800f1a6:	f023 0303 	bic.w	r3, r3, #3
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	f104 0715 	add.w	r7, r4, #21
 800f1b0:	42ba      	cmp	r2, r7
 800f1b2:	bf38      	it	cc
 800f1b4:	2304      	movcc	r3, #4
 800f1b6:	9301      	str	r3, [sp, #4]
 800f1b8:	9b02      	ldr	r3, [sp, #8]
 800f1ba:	9103      	str	r1, [sp, #12]
 800f1bc:	428b      	cmp	r3, r1
 800f1be:	d80c      	bhi.n	800f1da <__multiply+0x9e>
 800f1c0:	2e00      	cmp	r6, #0
 800f1c2:	dd03      	ble.n	800f1cc <__multiply+0x90>
 800f1c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d05b      	beq.n	800f284 <__multiply+0x148>
 800f1cc:	6106      	str	r6, [r0, #16]
 800f1ce:	b005      	add	sp, #20
 800f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d4:	f843 2b04 	str.w	r2, [r3], #4
 800f1d8:	e7d8      	b.n	800f18c <__multiply+0x50>
 800f1da:	f8b1 a000 	ldrh.w	sl, [r1]
 800f1de:	f1ba 0f00 	cmp.w	sl, #0
 800f1e2:	d024      	beq.n	800f22e <__multiply+0xf2>
 800f1e4:	f104 0e14 	add.w	lr, r4, #20
 800f1e8:	46a9      	mov	r9, r5
 800f1ea:	f04f 0c00 	mov.w	ip, #0
 800f1ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f1f2:	f8d9 3000 	ldr.w	r3, [r9]
 800f1f6:	fa1f fb87 	uxth.w	fp, r7
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800f200:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f204:	f8d9 7000 	ldr.w	r7, [r9]
 800f208:	4463      	add	r3, ip
 800f20a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f20e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f212:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f216:	b29b      	uxth	r3, r3
 800f218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f21c:	4572      	cmp	r2, lr
 800f21e:	f849 3b04 	str.w	r3, [r9], #4
 800f222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f226:	d8e2      	bhi.n	800f1ee <__multiply+0xb2>
 800f228:	9b01      	ldr	r3, [sp, #4]
 800f22a:	f845 c003 	str.w	ip, [r5, r3]
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f234:	3104      	adds	r1, #4
 800f236:	f1b9 0f00 	cmp.w	r9, #0
 800f23a:	d021      	beq.n	800f280 <__multiply+0x144>
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	f104 0c14 	add.w	ip, r4, #20
 800f242:	46ae      	mov	lr, r5
 800f244:	f04f 0a00 	mov.w	sl, #0
 800f248:	f8bc b000 	ldrh.w	fp, [ip]
 800f24c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f250:	fb09 770b 	mla	r7, r9, fp, r7
 800f254:	4457      	add	r7, sl
 800f256:	b29b      	uxth	r3, r3
 800f258:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f25c:	f84e 3b04 	str.w	r3, [lr], #4
 800f260:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f268:	f8be 3000 	ldrh.w	r3, [lr]
 800f26c:	fb09 330a 	mla	r3, r9, sl, r3
 800f270:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f274:	4562      	cmp	r2, ip
 800f276:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f27a:	d8e5      	bhi.n	800f248 <__multiply+0x10c>
 800f27c:	9f01      	ldr	r7, [sp, #4]
 800f27e:	51eb      	str	r3, [r5, r7]
 800f280:	3504      	adds	r5, #4
 800f282:	e799      	b.n	800f1b8 <__multiply+0x7c>
 800f284:	3e01      	subs	r6, #1
 800f286:	e79b      	b.n	800f1c0 <__multiply+0x84>
 800f288:	08010c6d 	.word	0x08010c6d
 800f28c:	08010c7e 	.word	0x08010c7e

0800f290 <__pow5mult>:
 800f290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f294:	4615      	mov	r5, r2
 800f296:	f012 0203 	ands.w	r2, r2, #3
 800f29a:	4607      	mov	r7, r0
 800f29c:	460e      	mov	r6, r1
 800f29e:	d007      	beq.n	800f2b0 <__pow5mult+0x20>
 800f2a0:	4c25      	ldr	r4, [pc, #148]	@ (800f338 <__pow5mult+0xa8>)
 800f2a2:	3a01      	subs	r2, #1
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f2aa:	f7ff fe9f 	bl	800efec <__multadd>
 800f2ae:	4606      	mov	r6, r0
 800f2b0:	10ad      	asrs	r5, r5, #2
 800f2b2:	d03d      	beq.n	800f330 <__pow5mult+0xa0>
 800f2b4:	69fc      	ldr	r4, [r7, #28]
 800f2b6:	b97c      	cbnz	r4, 800f2d8 <__pow5mult+0x48>
 800f2b8:	2010      	movs	r0, #16
 800f2ba:	f7ff fd7f 	bl	800edbc <malloc>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	61f8      	str	r0, [r7, #28]
 800f2c2:	b928      	cbnz	r0, 800f2d0 <__pow5mult+0x40>
 800f2c4:	4b1d      	ldr	r3, [pc, #116]	@ (800f33c <__pow5mult+0xac>)
 800f2c6:	481e      	ldr	r0, [pc, #120]	@ (800f340 <__pow5mult+0xb0>)
 800f2c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f2cc:	f7fe fec0 	bl	800e050 <__assert_func>
 800f2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2d4:	6004      	str	r4, [r0, #0]
 800f2d6:	60c4      	str	r4, [r0, #12]
 800f2d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2e0:	b94c      	cbnz	r4, 800f2f6 <__pow5mult+0x66>
 800f2e2:	f240 2171 	movw	r1, #625	@ 0x271
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	f7ff ff12 	bl	800f110 <__i2b>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	6003      	str	r3, [r0, #0]
 800f2f6:	f04f 0900 	mov.w	r9, #0
 800f2fa:	07eb      	lsls	r3, r5, #31
 800f2fc:	d50a      	bpl.n	800f314 <__pow5mult+0x84>
 800f2fe:	4631      	mov	r1, r6
 800f300:	4622      	mov	r2, r4
 800f302:	4638      	mov	r0, r7
 800f304:	f7ff ff1a 	bl	800f13c <__multiply>
 800f308:	4631      	mov	r1, r6
 800f30a:	4680      	mov	r8, r0
 800f30c:	4638      	mov	r0, r7
 800f30e:	f7ff fe4b 	bl	800efa8 <_Bfree>
 800f312:	4646      	mov	r6, r8
 800f314:	106d      	asrs	r5, r5, #1
 800f316:	d00b      	beq.n	800f330 <__pow5mult+0xa0>
 800f318:	6820      	ldr	r0, [r4, #0]
 800f31a:	b938      	cbnz	r0, 800f32c <__pow5mult+0x9c>
 800f31c:	4622      	mov	r2, r4
 800f31e:	4621      	mov	r1, r4
 800f320:	4638      	mov	r0, r7
 800f322:	f7ff ff0b 	bl	800f13c <__multiply>
 800f326:	6020      	str	r0, [r4, #0]
 800f328:	f8c0 9000 	str.w	r9, [r0]
 800f32c:	4604      	mov	r4, r0
 800f32e:	e7e4      	b.n	800f2fa <__pow5mult+0x6a>
 800f330:	4630      	mov	r0, r6
 800f332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f336:	bf00      	nop
 800f338:	08010cd8 	.word	0x08010cd8
 800f33c:	08010b5d 	.word	0x08010b5d
 800f340:	08010c7e 	.word	0x08010c7e

0800f344 <__lshift>:
 800f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f348:	460c      	mov	r4, r1
 800f34a:	6849      	ldr	r1, [r1, #4]
 800f34c:	6923      	ldr	r3, [r4, #16]
 800f34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f352:	68a3      	ldr	r3, [r4, #8]
 800f354:	4607      	mov	r7, r0
 800f356:	4691      	mov	r9, r2
 800f358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f35c:	f108 0601 	add.w	r6, r8, #1
 800f360:	42b3      	cmp	r3, r6
 800f362:	db0b      	blt.n	800f37c <__lshift+0x38>
 800f364:	4638      	mov	r0, r7
 800f366:	f7ff fddf 	bl	800ef28 <_Balloc>
 800f36a:	4605      	mov	r5, r0
 800f36c:	b948      	cbnz	r0, 800f382 <__lshift+0x3e>
 800f36e:	4602      	mov	r2, r0
 800f370:	4b28      	ldr	r3, [pc, #160]	@ (800f414 <__lshift+0xd0>)
 800f372:	4829      	ldr	r0, [pc, #164]	@ (800f418 <__lshift+0xd4>)
 800f374:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f378:	f7fe fe6a 	bl	800e050 <__assert_func>
 800f37c:	3101      	adds	r1, #1
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	e7ee      	b.n	800f360 <__lshift+0x1c>
 800f382:	2300      	movs	r3, #0
 800f384:	f100 0114 	add.w	r1, r0, #20
 800f388:	f100 0210 	add.w	r2, r0, #16
 800f38c:	4618      	mov	r0, r3
 800f38e:	4553      	cmp	r3, sl
 800f390:	db33      	blt.n	800f3fa <__lshift+0xb6>
 800f392:	6920      	ldr	r0, [r4, #16]
 800f394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f398:	f104 0314 	add.w	r3, r4, #20
 800f39c:	f019 091f 	ands.w	r9, r9, #31
 800f3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f3a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f3a8:	d02b      	beq.n	800f402 <__lshift+0xbe>
 800f3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800f3ae:	468a      	mov	sl, r1
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	fa00 f009 	lsl.w	r0, r0, r9
 800f3b8:	4310      	orrs	r0, r2
 800f3ba:	f84a 0b04 	str.w	r0, [sl], #4
 800f3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c2:	459c      	cmp	ip, r3
 800f3c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f3c8:	d8f3      	bhi.n	800f3b2 <__lshift+0x6e>
 800f3ca:	ebac 0304 	sub.w	r3, ip, r4
 800f3ce:	3b15      	subs	r3, #21
 800f3d0:	f023 0303 	bic.w	r3, r3, #3
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	f104 0015 	add.w	r0, r4, #21
 800f3da:	4584      	cmp	ip, r0
 800f3dc:	bf38      	it	cc
 800f3de:	2304      	movcc	r3, #4
 800f3e0:	50ca      	str	r2, [r1, r3]
 800f3e2:	b10a      	cbz	r2, 800f3e8 <__lshift+0xa4>
 800f3e4:	f108 0602 	add.w	r6, r8, #2
 800f3e8:	3e01      	subs	r6, #1
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	612e      	str	r6, [r5, #16]
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	f7ff fdda 	bl	800efa8 <_Bfree>
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3fe:	3301      	adds	r3, #1
 800f400:	e7c5      	b.n	800f38e <__lshift+0x4a>
 800f402:	3904      	subs	r1, #4
 800f404:	f853 2b04 	ldr.w	r2, [r3], #4
 800f408:	f841 2f04 	str.w	r2, [r1, #4]!
 800f40c:	459c      	cmp	ip, r3
 800f40e:	d8f9      	bhi.n	800f404 <__lshift+0xc0>
 800f410:	e7ea      	b.n	800f3e8 <__lshift+0xa4>
 800f412:	bf00      	nop
 800f414:	08010c6d 	.word	0x08010c6d
 800f418:	08010c7e 	.word	0x08010c7e

0800f41c <__mcmp>:
 800f41c:	690a      	ldr	r2, [r1, #16]
 800f41e:	4603      	mov	r3, r0
 800f420:	6900      	ldr	r0, [r0, #16]
 800f422:	1a80      	subs	r0, r0, r2
 800f424:	b530      	push	{r4, r5, lr}
 800f426:	d10e      	bne.n	800f446 <__mcmp+0x2a>
 800f428:	3314      	adds	r3, #20
 800f42a:	3114      	adds	r1, #20
 800f42c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f43c:	4295      	cmp	r5, r2
 800f43e:	d003      	beq.n	800f448 <__mcmp+0x2c>
 800f440:	d205      	bcs.n	800f44e <__mcmp+0x32>
 800f442:	f04f 30ff 	mov.w	r0, #4294967295
 800f446:	bd30      	pop	{r4, r5, pc}
 800f448:	42a3      	cmp	r3, r4
 800f44a:	d3f3      	bcc.n	800f434 <__mcmp+0x18>
 800f44c:	e7fb      	b.n	800f446 <__mcmp+0x2a>
 800f44e:	2001      	movs	r0, #1
 800f450:	e7f9      	b.n	800f446 <__mcmp+0x2a>
	...

0800f454 <__mdiff>:
 800f454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	4689      	mov	r9, r1
 800f45a:	4606      	mov	r6, r0
 800f45c:	4611      	mov	r1, r2
 800f45e:	4648      	mov	r0, r9
 800f460:	4614      	mov	r4, r2
 800f462:	f7ff ffdb 	bl	800f41c <__mcmp>
 800f466:	1e05      	subs	r5, r0, #0
 800f468:	d112      	bne.n	800f490 <__mdiff+0x3c>
 800f46a:	4629      	mov	r1, r5
 800f46c:	4630      	mov	r0, r6
 800f46e:	f7ff fd5b 	bl	800ef28 <_Balloc>
 800f472:	4602      	mov	r2, r0
 800f474:	b928      	cbnz	r0, 800f482 <__mdiff+0x2e>
 800f476:	4b3f      	ldr	r3, [pc, #252]	@ (800f574 <__mdiff+0x120>)
 800f478:	f240 2137 	movw	r1, #567	@ 0x237
 800f47c:	483e      	ldr	r0, [pc, #248]	@ (800f578 <__mdiff+0x124>)
 800f47e:	f7fe fde7 	bl	800e050 <__assert_func>
 800f482:	2301      	movs	r3, #1
 800f484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f488:	4610      	mov	r0, r2
 800f48a:	b003      	add	sp, #12
 800f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f490:	bfbc      	itt	lt
 800f492:	464b      	movlt	r3, r9
 800f494:	46a1      	movlt	r9, r4
 800f496:	4630      	mov	r0, r6
 800f498:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f49c:	bfba      	itte	lt
 800f49e:	461c      	movlt	r4, r3
 800f4a0:	2501      	movlt	r5, #1
 800f4a2:	2500      	movge	r5, #0
 800f4a4:	f7ff fd40 	bl	800ef28 <_Balloc>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	b918      	cbnz	r0, 800f4b4 <__mdiff+0x60>
 800f4ac:	4b31      	ldr	r3, [pc, #196]	@ (800f574 <__mdiff+0x120>)
 800f4ae:	f240 2145 	movw	r1, #581	@ 0x245
 800f4b2:	e7e3      	b.n	800f47c <__mdiff+0x28>
 800f4b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f4b8:	6926      	ldr	r6, [r4, #16]
 800f4ba:	60c5      	str	r5, [r0, #12]
 800f4bc:	f109 0310 	add.w	r3, r9, #16
 800f4c0:	f109 0514 	add.w	r5, r9, #20
 800f4c4:	f104 0e14 	add.w	lr, r4, #20
 800f4c8:	f100 0b14 	add.w	fp, r0, #20
 800f4cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f4d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	46d9      	mov	r9, fp
 800f4d8:	f04f 0c00 	mov.w	ip, #0
 800f4dc:	9b01      	ldr	r3, [sp, #4]
 800f4de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f4e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f4e6:	9301      	str	r3, [sp, #4]
 800f4e8:	fa1f f38a 	uxth.w	r3, sl
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	b283      	uxth	r3, r0
 800f4f0:	1acb      	subs	r3, r1, r3
 800f4f2:	0c00      	lsrs	r0, r0, #16
 800f4f4:	4463      	add	r3, ip
 800f4f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f4fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f504:	4576      	cmp	r6, lr
 800f506:	f849 3b04 	str.w	r3, [r9], #4
 800f50a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f50e:	d8e5      	bhi.n	800f4dc <__mdiff+0x88>
 800f510:	1b33      	subs	r3, r6, r4
 800f512:	3b15      	subs	r3, #21
 800f514:	f023 0303 	bic.w	r3, r3, #3
 800f518:	3415      	adds	r4, #21
 800f51a:	3304      	adds	r3, #4
 800f51c:	42a6      	cmp	r6, r4
 800f51e:	bf38      	it	cc
 800f520:	2304      	movcc	r3, #4
 800f522:	441d      	add	r5, r3
 800f524:	445b      	add	r3, fp
 800f526:	461e      	mov	r6, r3
 800f528:	462c      	mov	r4, r5
 800f52a:	4544      	cmp	r4, r8
 800f52c:	d30e      	bcc.n	800f54c <__mdiff+0xf8>
 800f52e:	f108 0103 	add.w	r1, r8, #3
 800f532:	1b49      	subs	r1, r1, r5
 800f534:	f021 0103 	bic.w	r1, r1, #3
 800f538:	3d03      	subs	r5, #3
 800f53a:	45a8      	cmp	r8, r5
 800f53c:	bf38      	it	cc
 800f53e:	2100      	movcc	r1, #0
 800f540:	440b      	add	r3, r1
 800f542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f546:	b191      	cbz	r1, 800f56e <__mdiff+0x11a>
 800f548:	6117      	str	r7, [r2, #16]
 800f54a:	e79d      	b.n	800f488 <__mdiff+0x34>
 800f54c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f550:	46e6      	mov	lr, ip
 800f552:	0c08      	lsrs	r0, r1, #16
 800f554:	fa1c fc81 	uxtah	ip, ip, r1
 800f558:	4471      	add	r1, lr
 800f55a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f55e:	b289      	uxth	r1, r1
 800f560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f564:	f846 1b04 	str.w	r1, [r6], #4
 800f568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f56c:	e7dd      	b.n	800f52a <__mdiff+0xd6>
 800f56e:	3f01      	subs	r7, #1
 800f570:	e7e7      	b.n	800f542 <__mdiff+0xee>
 800f572:	bf00      	nop
 800f574:	08010c6d 	.word	0x08010c6d
 800f578:	08010c7e 	.word	0x08010c7e

0800f57c <__d2b>:
 800f57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f580:	460f      	mov	r7, r1
 800f582:	2101      	movs	r1, #1
 800f584:	ec59 8b10 	vmov	r8, r9, d0
 800f588:	4616      	mov	r6, r2
 800f58a:	f7ff fccd 	bl	800ef28 <_Balloc>
 800f58e:	4604      	mov	r4, r0
 800f590:	b930      	cbnz	r0, 800f5a0 <__d2b+0x24>
 800f592:	4602      	mov	r2, r0
 800f594:	4b23      	ldr	r3, [pc, #140]	@ (800f624 <__d2b+0xa8>)
 800f596:	4824      	ldr	r0, [pc, #144]	@ (800f628 <__d2b+0xac>)
 800f598:	f240 310f 	movw	r1, #783	@ 0x30f
 800f59c:	f7fe fd58 	bl	800e050 <__assert_func>
 800f5a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5a8:	b10d      	cbz	r5, 800f5ae <__d2b+0x32>
 800f5aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5ae:	9301      	str	r3, [sp, #4]
 800f5b0:	f1b8 0300 	subs.w	r3, r8, #0
 800f5b4:	d023      	beq.n	800f5fe <__d2b+0x82>
 800f5b6:	4668      	mov	r0, sp
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	f7ff fd7c 	bl	800f0b6 <__lo0bits>
 800f5be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f5c2:	b1d0      	cbz	r0, 800f5fa <__d2b+0x7e>
 800f5c4:	f1c0 0320 	rsb	r3, r0, #32
 800f5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800f5cc:	430b      	orrs	r3, r1
 800f5ce:	40c2      	lsrs	r2, r0
 800f5d0:	6163      	str	r3, [r4, #20]
 800f5d2:	9201      	str	r2, [sp, #4]
 800f5d4:	9b01      	ldr	r3, [sp, #4]
 800f5d6:	61a3      	str	r3, [r4, #24]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	bf0c      	ite	eq
 800f5dc:	2201      	moveq	r2, #1
 800f5de:	2202      	movne	r2, #2
 800f5e0:	6122      	str	r2, [r4, #16]
 800f5e2:	b1a5      	cbz	r5, 800f60e <__d2b+0x92>
 800f5e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f5e8:	4405      	add	r5, r0
 800f5ea:	603d      	str	r5, [r7, #0]
 800f5ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f5f0:	6030      	str	r0, [r6, #0]
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	b003      	add	sp, #12
 800f5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5fa:	6161      	str	r1, [r4, #20]
 800f5fc:	e7ea      	b.n	800f5d4 <__d2b+0x58>
 800f5fe:	a801      	add	r0, sp, #4
 800f600:	f7ff fd59 	bl	800f0b6 <__lo0bits>
 800f604:	9b01      	ldr	r3, [sp, #4]
 800f606:	6163      	str	r3, [r4, #20]
 800f608:	3020      	adds	r0, #32
 800f60a:	2201      	movs	r2, #1
 800f60c:	e7e8      	b.n	800f5e0 <__d2b+0x64>
 800f60e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f616:	6038      	str	r0, [r7, #0]
 800f618:	6918      	ldr	r0, [r3, #16]
 800f61a:	f7ff fd2d 	bl	800f078 <__hi0bits>
 800f61e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f622:	e7e5      	b.n	800f5f0 <__d2b+0x74>
 800f624:	08010c6d 	.word	0x08010c6d
 800f628:	08010c7e 	.word	0x08010c7e

0800f62c <__ssputs_r>:
 800f62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f630:	688e      	ldr	r6, [r1, #8]
 800f632:	461f      	mov	r7, r3
 800f634:	42be      	cmp	r6, r7
 800f636:	680b      	ldr	r3, [r1, #0]
 800f638:	4682      	mov	sl, r0
 800f63a:	460c      	mov	r4, r1
 800f63c:	4690      	mov	r8, r2
 800f63e:	d82d      	bhi.n	800f69c <__ssputs_r+0x70>
 800f640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f648:	d026      	beq.n	800f698 <__ssputs_r+0x6c>
 800f64a:	6965      	ldr	r5, [r4, #20]
 800f64c:	6909      	ldr	r1, [r1, #16]
 800f64e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f652:	eba3 0901 	sub.w	r9, r3, r1
 800f656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f65a:	1c7b      	adds	r3, r7, #1
 800f65c:	444b      	add	r3, r9
 800f65e:	106d      	asrs	r5, r5, #1
 800f660:	429d      	cmp	r5, r3
 800f662:	bf38      	it	cc
 800f664:	461d      	movcc	r5, r3
 800f666:	0553      	lsls	r3, r2, #21
 800f668:	d527      	bpl.n	800f6ba <__ssputs_r+0x8e>
 800f66a:	4629      	mov	r1, r5
 800f66c:	f7ff fbd0 	bl	800ee10 <_malloc_r>
 800f670:	4606      	mov	r6, r0
 800f672:	b360      	cbz	r0, 800f6ce <__ssputs_r+0xa2>
 800f674:	6921      	ldr	r1, [r4, #16]
 800f676:	464a      	mov	r2, r9
 800f678:	f7fe fcdb 	bl	800e032 <memcpy>
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f686:	81a3      	strh	r3, [r4, #12]
 800f688:	6126      	str	r6, [r4, #16]
 800f68a:	6165      	str	r5, [r4, #20]
 800f68c:	444e      	add	r6, r9
 800f68e:	eba5 0509 	sub.w	r5, r5, r9
 800f692:	6026      	str	r6, [r4, #0]
 800f694:	60a5      	str	r5, [r4, #8]
 800f696:	463e      	mov	r6, r7
 800f698:	42be      	cmp	r6, r7
 800f69a:	d900      	bls.n	800f69e <__ssputs_r+0x72>
 800f69c:	463e      	mov	r6, r7
 800f69e:	6820      	ldr	r0, [r4, #0]
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	4641      	mov	r1, r8
 800f6a4:	f000 f9d8 	bl	800fa58 <memmove>
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	1b9b      	subs	r3, r3, r6
 800f6ac:	60a3      	str	r3, [r4, #8]
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	4433      	add	r3, r6
 800f6b2:	6023      	str	r3, [r4, #0]
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ba:	462a      	mov	r2, r5
 800f6bc:	f000 fa23 	bl	800fb06 <_realloc_r>
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d1e0      	bne.n	800f688 <__ssputs_r+0x5c>
 800f6c6:	6921      	ldr	r1, [r4, #16]
 800f6c8:	4650      	mov	r0, sl
 800f6ca:	f7ff fb2d 	bl	800ed28 <_free_r>
 800f6ce:	230c      	movs	r3, #12
 800f6d0:	f8ca 3000 	str.w	r3, [sl]
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e0:	e7e9      	b.n	800f6b6 <__ssputs_r+0x8a>
	...

0800f6e4 <_svfiprintf_r>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	4698      	mov	r8, r3
 800f6ea:	898b      	ldrh	r3, [r1, #12]
 800f6ec:	061b      	lsls	r3, r3, #24
 800f6ee:	b09d      	sub	sp, #116	@ 0x74
 800f6f0:	4607      	mov	r7, r0
 800f6f2:	460d      	mov	r5, r1
 800f6f4:	4614      	mov	r4, r2
 800f6f6:	d510      	bpl.n	800f71a <_svfiprintf_r+0x36>
 800f6f8:	690b      	ldr	r3, [r1, #16]
 800f6fa:	b973      	cbnz	r3, 800f71a <_svfiprintf_r+0x36>
 800f6fc:	2140      	movs	r1, #64	@ 0x40
 800f6fe:	f7ff fb87 	bl	800ee10 <_malloc_r>
 800f702:	6028      	str	r0, [r5, #0]
 800f704:	6128      	str	r0, [r5, #16]
 800f706:	b930      	cbnz	r0, 800f716 <_svfiprintf_r+0x32>
 800f708:	230c      	movs	r3, #12
 800f70a:	603b      	str	r3, [r7, #0]
 800f70c:	f04f 30ff 	mov.w	r0, #4294967295
 800f710:	b01d      	add	sp, #116	@ 0x74
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	2340      	movs	r3, #64	@ 0x40
 800f718:	616b      	str	r3, [r5, #20]
 800f71a:	2300      	movs	r3, #0
 800f71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f71e:	2320      	movs	r3, #32
 800f720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f724:	f8cd 800c 	str.w	r8, [sp, #12]
 800f728:	2330      	movs	r3, #48	@ 0x30
 800f72a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f8c8 <_svfiprintf_r+0x1e4>
 800f72e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f732:	f04f 0901 	mov.w	r9, #1
 800f736:	4623      	mov	r3, r4
 800f738:	469a      	mov	sl, r3
 800f73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f73e:	b10a      	cbz	r2, 800f744 <_svfiprintf_r+0x60>
 800f740:	2a25      	cmp	r2, #37	@ 0x25
 800f742:	d1f9      	bne.n	800f738 <_svfiprintf_r+0x54>
 800f744:	ebba 0b04 	subs.w	fp, sl, r4
 800f748:	d00b      	beq.n	800f762 <_svfiprintf_r+0x7e>
 800f74a:	465b      	mov	r3, fp
 800f74c:	4622      	mov	r2, r4
 800f74e:	4629      	mov	r1, r5
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff ff6b 	bl	800f62c <__ssputs_r>
 800f756:	3001      	adds	r0, #1
 800f758:	f000 80a7 	beq.w	800f8aa <_svfiprintf_r+0x1c6>
 800f75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f75e:	445a      	add	r2, fp
 800f760:	9209      	str	r2, [sp, #36]	@ 0x24
 800f762:	f89a 3000 	ldrb.w	r3, [sl]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f000 809f 	beq.w	800f8aa <_svfiprintf_r+0x1c6>
 800f76c:	2300      	movs	r3, #0
 800f76e:	f04f 32ff 	mov.w	r2, #4294967295
 800f772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f776:	f10a 0a01 	add.w	sl, sl, #1
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	9307      	str	r3, [sp, #28]
 800f77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f782:	931a      	str	r3, [sp, #104]	@ 0x68
 800f784:	4654      	mov	r4, sl
 800f786:	2205      	movs	r2, #5
 800f788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f78c:	484e      	ldr	r0, [pc, #312]	@ (800f8c8 <_svfiprintf_r+0x1e4>)
 800f78e:	f7f0 fd1f 	bl	80001d0 <memchr>
 800f792:	9a04      	ldr	r2, [sp, #16]
 800f794:	b9d8      	cbnz	r0, 800f7ce <_svfiprintf_r+0xea>
 800f796:	06d0      	lsls	r0, r2, #27
 800f798:	bf44      	itt	mi
 800f79a:	2320      	movmi	r3, #32
 800f79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7a0:	0711      	lsls	r1, r2, #28
 800f7a2:	bf44      	itt	mi
 800f7a4:	232b      	movmi	r3, #43	@ 0x2b
 800f7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7b0:	d015      	beq.n	800f7de <_svfiprintf_r+0xfa>
 800f7b2:	9a07      	ldr	r2, [sp, #28]
 800f7b4:	4654      	mov	r4, sl
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	f04f 0c0a 	mov.w	ip, #10
 800f7bc:	4621      	mov	r1, r4
 800f7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c2:	3b30      	subs	r3, #48	@ 0x30
 800f7c4:	2b09      	cmp	r3, #9
 800f7c6:	d94b      	bls.n	800f860 <_svfiprintf_r+0x17c>
 800f7c8:	b1b0      	cbz	r0, 800f7f8 <_svfiprintf_r+0x114>
 800f7ca:	9207      	str	r2, [sp, #28]
 800f7cc:	e014      	b.n	800f7f8 <_svfiprintf_r+0x114>
 800f7ce:	eba0 0308 	sub.w	r3, r0, r8
 800f7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	9304      	str	r3, [sp, #16]
 800f7da:	46a2      	mov	sl, r4
 800f7dc:	e7d2      	b.n	800f784 <_svfiprintf_r+0xa0>
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	1d19      	adds	r1, r3, #4
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	9103      	str	r1, [sp, #12]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	bfbb      	ittet	lt
 800f7ea:	425b      	neglt	r3, r3
 800f7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800f7f0:	9307      	strge	r3, [sp, #28]
 800f7f2:	9307      	strlt	r3, [sp, #28]
 800f7f4:	bfb8      	it	lt
 800f7f6:	9204      	strlt	r2, [sp, #16]
 800f7f8:	7823      	ldrb	r3, [r4, #0]
 800f7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7fc:	d10a      	bne.n	800f814 <_svfiprintf_r+0x130>
 800f7fe:	7863      	ldrb	r3, [r4, #1]
 800f800:	2b2a      	cmp	r3, #42	@ 0x2a
 800f802:	d132      	bne.n	800f86a <_svfiprintf_r+0x186>
 800f804:	9b03      	ldr	r3, [sp, #12]
 800f806:	1d1a      	adds	r2, r3, #4
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	9203      	str	r2, [sp, #12]
 800f80c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f810:	3402      	adds	r4, #2
 800f812:	9305      	str	r3, [sp, #20]
 800f814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f8d8 <_svfiprintf_r+0x1f4>
 800f818:	7821      	ldrb	r1, [r4, #0]
 800f81a:	2203      	movs	r2, #3
 800f81c:	4650      	mov	r0, sl
 800f81e:	f7f0 fcd7 	bl	80001d0 <memchr>
 800f822:	b138      	cbz	r0, 800f834 <_svfiprintf_r+0x150>
 800f824:	9b04      	ldr	r3, [sp, #16]
 800f826:	eba0 000a 	sub.w	r0, r0, sl
 800f82a:	2240      	movs	r2, #64	@ 0x40
 800f82c:	4082      	lsls	r2, r0
 800f82e:	4313      	orrs	r3, r2
 800f830:	3401      	adds	r4, #1
 800f832:	9304      	str	r3, [sp, #16]
 800f834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f838:	4824      	ldr	r0, [pc, #144]	@ (800f8cc <_svfiprintf_r+0x1e8>)
 800f83a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f83e:	2206      	movs	r2, #6
 800f840:	f7f0 fcc6 	bl	80001d0 <memchr>
 800f844:	2800      	cmp	r0, #0
 800f846:	d036      	beq.n	800f8b6 <_svfiprintf_r+0x1d2>
 800f848:	4b21      	ldr	r3, [pc, #132]	@ (800f8d0 <_svfiprintf_r+0x1ec>)
 800f84a:	bb1b      	cbnz	r3, 800f894 <_svfiprintf_r+0x1b0>
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	3307      	adds	r3, #7
 800f850:	f023 0307 	bic.w	r3, r3, #7
 800f854:	3308      	adds	r3, #8
 800f856:	9303      	str	r3, [sp, #12]
 800f858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f85a:	4433      	add	r3, r6
 800f85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f85e:	e76a      	b.n	800f736 <_svfiprintf_r+0x52>
 800f860:	fb0c 3202 	mla	r2, ip, r2, r3
 800f864:	460c      	mov	r4, r1
 800f866:	2001      	movs	r0, #1
 800f868:	e7a8      	b.n	800f7bc <_svfiprintf_r+0xd8>
 800f86a:	2300      	movs	r3, #0
 800f86c:	3401      	adds	r4, #1
 800f86e:	9305      	str	r3, [sp, #20]
 800f870:	4619      	mov	r1, r3
 800f872:	f04f 0c0a 	mov.w	ip, #10
 800f876:	4620      	mov	r0, r4
 800f878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f87c:	3a30      	subs	r2, #48	@ 0x30
 800f87e:	2a09      	cmp	r2, #9
 800f880:	d903      	bls.n	800f88a <_svfiprintf_r+0x1a6>
 800f882:	2b00      	cmp	r3, #0
 800f884:	d0c6      	beq.n	800f814 <_svfiprintf_r+0x130>
 800f886:	9105      	str	r1, [sp, #20]
 800f888:	e7c4      	b.n	800f814 <_svfiprintf_r+0x130>
 800f88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f88e:	4604      	mov	r4, r0
 800f890:	2301      	movs	r3, #1
 800f892:	e7f0      	b.n	800f876 <_svfiprintf_r+0x192>
 800f894:	ab03      	add	r3, sp, #12
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	462a      	mov	r2, r5
 800f89a:	4b0e      	ldr	r3, [pc, #56]	@ (800f8d4 <_svfiprintf_r+0x1f0>)
 800f89c:	a904      	add	r1, sp, #16
 800f89e:	4638      	mov	r0, r7
 800f8a0:	f7fd fd12 	bl	800d2c8 <_printf_float>
 800f8a4:	1c42      	adds	r2, r0, #1
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	d1d6      	bne.n	800f858 <_svfiprintf_r+0x174>
 800f8aa:	89ab      	ldrh	r3, [r5, #12]
 800f8ac:	065b      	lsls	r3, r3, #25
 800f8ae:	f53f af2d 	bmi.w	800f70c <_svfiprintf_r+0x28>
 800f8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8b4:	e72c      	b.n	800f710 <_svfiprintf_r+0x2c>
 800f8b6:	ab03      	add	r3, sp, #12
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	462a      	mov	r2, r5
 800f8bc:	4b05      	ldr	r3, [pc, #20]	@ (800f8d4 <_svfiprintf_r+0x1f0>)
 800f8be:	a904      	add	r1, sp, #16
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	f7fd ff99 	bl	800d7f8 <_printf_i>
 800f8c6:	e7ed      	b.n	800f8a4 <_svfiprintf_r+0x1c0>
 800f8c8:	08010dd8 	.word	0x08010dd8
 800f8cc:	08010de2 	.word	0x08010de2
 800f8d0:	0800d2c9 	.word	0x0800d2c9
 800f8d4:	0800f62d 	.word	0x0800f62d
 800f8d8:	08010dde 	.word	0x08010dde

0800f8dc <__sflush_r>:
 800f8dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e4:	0716      	lsls	r6, r2, #28
 800f8e6:	4605      	mov	r5, r0
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	d454      	bmi.n	800f996 <__sflush_r+0xba>
 800f8ec:	684b      	ldr	r3, [r1, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	dc02      	bgt.n	800f8f8 <__sflush_r+0x1c>
 800f8f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd48      	ble.n	800f98a <__sflush_r+0xae>
 800f8f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8fa:	2e00      	cmp	r6, #0
 800f8fc:	d045      	beq.n	800f98a <__sflush_r+0xae>
 800f8fe:	2300      	movs	r3, #0
 800f900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f904:	682f      	ldr	r7, [r5, #0]
 800f906:	6a21      	ldr	r1, [r4, #32]
 800f908:	602b      	str	r3, [r5, #0]
 800f90a:	d030      	beq.n	800f96e <__sflush_r+0x92>
 800f90c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	0759      	lsls	r1, r3, #29
 800f912:	d505      	bpl.n	800f920 <__sflush_r+0x44>
 800f914:	6863      	ldr	r3, [r4, #4]
 800f916:	1ad2      	subs	r2, r2, r3
 800f918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f91a:	b10b      	cbz	r3, 800f920 <__sflush_r+0x44>
 800f91c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f91e:	1ad2      	subs	r2, r2, r3
 800f920:	2300      	movs	r3, #0
 800f922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f924:	6a21      	ldr	r1, [r4, #32]
 800f926:	4628      	mov	r0, r5
 800f928:	47b0      	blx	r6
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	d106      	bne.n	800f93e <__sflush_r+0x62>
 800f930:	6829      	ldr	r1, [r5, #0]
 800f932:	291d      	cmp	r1, #29
 800f934:	d82b      	bhi.n	800f98e <__sflush_r+0xb2>
 800f936:	4a2a      	ldr	r2, [pc, #168]	@ (800f9e0 <__sflush_r+0x104>)
 800f938:	410a      	asrs	r2, r1
 800f93a:	07d6      	lsls	r6, r2, #31
 800f93c:	d427      	bmi.n	800f98e <__sflush_r+0xb2>
 800f93e:	2200      	movs	r2, #0
 800f940:	6062      	str	r2, [r4, #4]
 800f942:	04d9      	lsls	r1, r3, #19
 800f944:	6922      	ldr	r2, [r4, #16]
 800f946:	6022      	str	r2, [r4, #0]
 800f948:	d504      	bpl.n	800f954 <__sflush_r+0x78>
 800f94a:	1c42      	adds	r2, r0, #1
 800f94c:	d101      	bne.n	800f952 <__sflush_r+0x76>
 800f94e:	682b      	ldr	r3, [r5, #0]
 800f950:	b903      	cbnz	r3, 800f954 <__sflush_r+0x78>
 800f952:	6560      	str	r0, [r4, #84]	@ 0x54
 800f954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f956:	602f      	str	r7, [r5, #0]
 800f958:	b1b9      	cbz	r1, 800f98a <__sflush_r+0xae>
 800f95a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f95e:	4299      	cmp	r1, r3
 800f960:	d002      	beq.n	800f968 <__sflush_r+0x8c>
 800f962:	4628      	mov	r0, r5
 800f964:	f7ff f9e0 	bl	800ed28 <_free_r>
 800f968:	2300      	movs	r3, #0
 800f96a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f96c:	e00d      	b.n	800f98a <__sflush_r+0xae>
 800f96e:	2301      	movs	r3, #1
 800f970:	4628      	mov	r0, r5
 800f972:	47b0      	blx	r6
 800f974:	4602      	mov	r2, r0
 800f976:	1c50      	adds	r0, r2, #1
 800f978:	d1c9      	bne.n	800f90e <__sflush_r+0x32>
 800f97a:	682b      	ldr	r3, [r5, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d0c6      	beq.n	800f90e <__sflush_r+0x32>
 800f980:	2b1d      	cmp	r3, #29
 800f982:	d001      	beq.n	800f988 <__sflush_r+0xac>
 800f984:	2b16      	cmp	r3, #22
 800f986:	d11e      	bne.n	800f9c6 <__sflush_r+0xea>
 800f988:	602f      	str	r7, [r5, #0]
 800f98a:	2000      	movs	r0, #0
 800f98c:	e022      	b.n	800f9d4 <__sflush_r+0xf8>
 800f98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f992:	b21b      	sxth	r3, r3
 800f994:	e01b      	b.n	800f9ce <__sflush_r+0xf2>
 800f996:	690f      	ldr	r7, [r1, #16]
 800f998:	2f00      	cmp	r7, #0
 800f99a:	d0f6      	beq.n	800f98a <__sflush_r+0xae>
 800f99c:	0793      	lsls	r3, r2, #30
 800f99e:	680e      	ldr	r6, [r1, #0]
 800f9a0:	bf08      	it	eq
 800f9a2:	694b      	ldreq	r3, [r1, #20]
 800f9a4:	600f      	str	r7, [r1, #0]
 800f9a6:	bf18      	it	ne
 800f9a8:	2300      	movne	r3, #0
 800f9aa:	eba6 0807 	sub.w	r8, r6, r7
 800f9ae:	608b      	str	r3, [r1, #8]
 800f9b0:	f1b8 0f00 	cmp.w	r8, #0
 800f9b4:	dde9      	ble.n	800f98a <__sflush_r+0xae>
 800f9b6:	6a21      	ldr	r1, [r4, #32]
 800f9b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9ba:	4643      	mov	r3, r8
 800f9bc:	463a      	mov	r2, r7
 800f9be:	4628      	mov	r0, r5
 800f9c0:	47b0      	blx	r6
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	dc08      	bgt.n	800f9d8 <__sflush_r+0xfc>
 800f9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ce:	81a3      	strh	r3, [r4, #12]
 800f9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	4407      	add	r7, r0
 800f9da:	eba8 0800 	sub.w	r8, r8, r0
 800f9de:	e7e7      	b.n	800f9b0 <__sflush_r+0xd4>
 800f9e0:	dfbffffe 	.word	0xdfbffffe

0800f9e4 <_fflush_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	690b      	ldr	r3, [r1, #16]
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	b913      	cbnz	r3, 800f9f4 <_fflush_r+0x10>
 800f9ee:	2500      	movs	r5, #0
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	bd38      	pop	{r3, r4, r5, pc}
 800f9f4:	b118      	cbz	r0, 800f9fe <_fflush_r+0x1a>
 800f9f6:	6a03      	ldr	r3, [r0, #32]
 800f9f8:	b90b      	cbnz	r3, 800f9fe <_fflush_r+0x1a>
 800f9fa:	f7fe f8a9 	bl	800db50 <__sinit>
 800f9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0f3      	beq.n	800f9ee <_fflush_r+0xa>
 800fa06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa08:	07d0      	lsls	r0, r2, #31
 800fa0a:	d404      	bmi.n	800fa16 <_fflush_r+0x32>
 800fa0c:	0599      	lsls	r1, r3, #22
 800fa0e:	d402      	bmi.n	800fa16 <_fflush_r+0x32>
 800fa10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa12:	f7fe fb04 	bl	800e01e <__retarget_lock_acquire_recursive>
 800fa16:	4628      	mov	r0, r5
 800fa18:	4621      	mov	r1, r4
 800fa1a:	f7ff ff5f 	bl	800f8dc <__sflush_r>
 800fa1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa20:	07da      	lsls	r2, r3, #31
 800fa22:	4605      	mov	r5, r0
 800fa24:	d4e4      	bmi.n	800f9f0 <_fflush_r+0xc>
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	059b      	lsls	r3, r3, #22
 800fa2a:	d4e1      	bmi.n	800f9f0 <_fflush_r+0xc>
 800fa2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa2e:	f7fe faf7 	bl	800e020 <__retarget_lock_release_recursive>
 800fa32:	e7dd      	b.n	800f9f0 <_fflush_r+0xc>

0800fa34 <fiprintf>:
 800fa34:	b40e      	push	{r1, r2, r3}
 800fa36:	b503      	push	{r0, r1, lr}
 800fa38:	4601      	mov	r1, r0
 800fa3a:	ab03      	add	r3, sp, #12
 800fa3c:	4805      	ldr	r0, [pc, #20]	@ (800fa54 <fiprintf+0x20>)
 800fa3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa42:	6800      	ldr	r0, [r0, #0]
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	f000 f8c3 	bl	800fbd0 <_vfiprintf_r>
 800fa4a:	b002      	add	sp, #8
 800fa4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa50:	b003      	add	sp, #12
 800fa52:	4770      	bx	lr
 800fa54:	20000064 	.word	0x20000064

0800fa58 <memmove>:
 800fa58:	4288      	cmp	r0, r1
 800fa5a:	b510      	push	{r4, lr}
 800fa5c:	eb01 0402 	add.w	r4, r1, r2
 800fa60:	d902      	bls.n	800fa68 <memmove+0x10>
 800fa62:	4284      	cmp	r4, r0
 800fa64:	4623      	mov	r3, r4
 800fa66:	d807      	bhi.n	800fa78 <memmove+0x20>
 800fa68:	1e43      	subs	r3, r0, #1
 800fa6a:	42a1      	cmp	r1, r4
 800fa6c:	d008      	beq.n	800fa80 <memmove+0x28>
 800fa6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa76:	e7f8      	b.n	800fa6a <memmove+0x12>
 800fa78:	4402      	add	r2, r0
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	428a      	cmp	r2, r1
 800fa7e:	d100      	bne.n	800fa82 <memmove+0x2a>
 800fa80:	bd10      	pop	{r4, pc}
 800fa82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa8a:	e7f7      	b.n	800fa7c <memmove+0x24>

0800fa8c <_sbrk_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d06      	ldr	r5, [pc, #24]	@ (800faa8 <_sbrk_r+0x1c>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4604      	mov	r4, r0
 800fa94:	4608      	mov	r0, r1
 800fa96:	602b      	str	r3, [r5, #0]
 800fa98:	f7f6 fa64 	bl	8005f64 <_sbrk>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d102      	bne.n	800faa6 <_sbrk_r+0x1a>
 800faa0:	682b      	ldr	r3, [r5, #0]
 800faa2:	b103      	cbz	r3, 800faa6 <_sbrk_r+0x1a>
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	2000ca54 	.word	0x2000ca54

0800faac <abort>:
 800faac:	b508      	push	{r3, lr}
 800faae:	2006      	movs	r0, #6
 800fab0:	f000 fa62 	bl	800ff78 <raise>
 800fab4:	2001      	movs	r0, #1
 800fab6:	f7f6 f9dd 	bl	8005e74 <_exit>

0800faba <_calloc_r>:
 800faba:	b570      	push	{r4, r5, r6, lr}
 800fabc:	fba1 5402 	umull	r5, r4, r1, r2
 800fac0:	b93c      	cbnz	r4, 800fad2 <_calloc_r+0x18>
 800fac2:	4629      	mov	r1, r5
 800fac4:	f7ff f9a4 	bl	800ee10 <_malloc_r>
 800fac8:	4606      	mov	r6, r0
 800faca:	b928      	cbnz	r0, 800fad8 <_calloc_r+0x1e>
 800facc:	2600      	movs	r6, #0
 800face:	4630      	mov	r0, r6
 800fad0:	bd70      	pop	{r4, r5, r6, pc}
 800fad2:	220c      	movs	r2, #12
 800fad4:	6002      	str	r2, [r0, #0]
 800fad6:	e7f9      	b.n	800facc <_calloc_r+0x12>
 800fad8:	462a      	mov	r2, r5
 800fada:	4621      	mov	r1, r4
 800fadc:	f7fe f8d1 	bl	800dc82 <memset>
 800fae0:	e7f5      	b.n	800face <_calloc_r+0x14>

0800fae2 <__ascii_mbtowc>:
 800fae2:	b082      	sub	sp, #8
 800fae4:	b901      	cbnz	r1, 800fae8 <__ascii_mbtowc+0x6>
 800fae6:	a901      	add	r1, sp, #4
 800fae8:	b142      	cbz	r2, 800fafc <__ascii_mbtowc+0x1a>
 800faea:	b14b      	cbz	r3, 800fb00 <__ascii_mbtowc+0x1e>
 800faec:	7813      	ldrb	r3, [r2, #0]
 800faee:	600b      	str	r3, [r1, #0]
 800faf0:	7812      	ldrb	r2, [r2, #0]
 800faf2:	1e10      	subs	r0, r2, #0
 800faf4:	bf18      	it	ne
 800faf6:	2001      	movne	r0, #1
 800faf8:	b002      	add	sp, #8
 800fafa:	4770      	bx	lr
 800fafc:	4610      	mov	r0, r2
 800fafe:	e7fb      	b.n	800faf8 <__ascii_mbtowc+0x16>
 800fb00:	f06f 0001 	mvn.w	r0, #1
 800fb04:	e7f8      	b.n	800faf8 <__ascii_mbtowc+0x16>

0800fb06 <_realloc_r>:
 800fb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0a:	4680      	mov	r8, r0
 800fb0c:	4615      	mov	r5, r2
 800fb0e:	460c      	mov	r4, r1
 800fb10:	b921      	cbnz	r1, 800fb1c <_realloc_r+0x16>
 800fb12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb16:	4611      	mov	r1, r2
 800fb18:	f7ff b97a 	b.w	800ee10 <_malloc_r>
 800fb1c:	b92a      	cbnz	r2, 800fb2a <_realloc_r+0x24>
 800fb1e:	f7ff f903 	bl	800ed28 <_free_r>
 800fb22:	2400      	movs	r4, #0
 800fb24:	4620      	mov	r0, r4
 800fb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb2a:	f000 fa41 	bl	800ffb0 <_malloc_usable_size_r>
 800fb2e:	4285      	cmp	r5, r0
 800fb30:	4606      	mov	r6, r0
 800fb32:	d802      	bhi.n	800fb3a <_realloc_r+0x34>
 800fb34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fb38:	d8f4      	bhi.n	800fb24 <_realloc_r+0x1e>
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	4640      	mov	r0, r8
 800fb3e:	f7ff f967 	bl	800ee10 <_malloc_r>
 800fb42:	4607      	mov	r7, r0
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d0ec      	beq.n	800fb22 <_realloc_r+0x1c>
 800fb48:	42b5      	cmp	r5, r6
 800fb4a:	462a      	mov	r2, r5
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	bf28      	it	cs
 800fb50:	4632      	movcs	r2, r6
 800fb52:	f7fe fa6e 	bl	800e032 <memcpy>
 800fb56:	4621      	mov	r1, r4
 800fb58:	4640      	mov	r0, r8
 800fb5a:	f7ff f8e5 	bl	800ed28 <_free_r>
 800fb5e:	463c      	mov	r4, r7
 800fb60:	e7e0      	b.n	800fb24 <_realloc_r+0x1e>

0800fb62 <__ascii_wctomb>:
 800fb62:	4603      	mov	r3, r0
 800fb64:	4608      	mov	r0, r1
 800fb66:	b141      	cbz	r1, 800fb7a <__ascii_wctomb+0x18>
 800fb68:	2aff      	cmp	r2, #255	@ 0xff
 800fb6a:	d904      	bls.n	800fb76 <__ascii_wctomb+0x14>
 800fb6c:	228a      	movs	r2, #138	@ 0x8a
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	f04f 30ff 	mov.w	r0, #4294967295
 800fb74:	4770      	bx	lr
 800fb76:	700a      	strb	r2, [r1, #0]
 800fb78:	2001      	movs	r0, #1
 800fb7a:	4770      	bx	lr

0800fb7c <__sfputc_r>:
 800fb7c:	6893      	ldr	r3, [r2, #8]
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	b410      	push	{r4}
 800fb84:	6093      	str	r3, [r2, #8]
 800fb86:	da08      	bge.n	800fb9a <__sfputc_r+0x1e>
 800fb88:	6994      	ldr	r4, [r2, #24]
 800fb8a:	42a3      	cmp	r3, r4
 800fb8c:	db01      	blt.n	800fb92 <__sfputc_r+0x16>
 800fb8e:	290a      	cmp	r1, #10
 800fb90:	d103      	bne.n	800fb9a <__sfputc_r+0x1e>
 800fb92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb96:	f000 b933 	b.w	800fe00 <__swbuf_r>
 800fb9a:	6813      	ldr	r3, [r2, #0]
 800fb9c:	1c58      	adds	r0, r3, #1
 800fb9e:	6010      	str	r0, [r2, #0]
 800fba0:	7019      	strb	r1, [r3, #0]
 800fba2:	4608      	mov	r0, r1
 800fba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <__sfputs_r>:
 800fbaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbac:	4606      	mov	r6, r0
 800fbae:	460f      	mov	r7, r1
 800fbb0:	4614      	mov	r4, r2
 800fbb2:	18d5      	adds	r5, r2, r3
 800fbb4:	42ac      	cmp	r4, r5
 800fbb6:	d101      	bne.n	800fbbc <__sfputs_r+0x12>
 800fbb8:	2000      	movs	r0, #0
 800fbba:	e007      	b.n	800fbcc <__sfputs_r+0x22>
 800fbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc0:	463a      	mov	r2, r7
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7ff ffda 	bl	800fb7c <__sfputc_r>
 800fbc8:	1c43      	adds	r3, r0, #1
 800fbca:	d1f3      	bne.n	800fbb4 <__sfputs_r+0xa>
 800fbcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbd0 <_vfiprintf_r>:
 800fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	460d      	mov	r5, r1
 800fbd6:	b09d      	sub	sp, #116	@ 0x74
 800fbd8:	4614      	mov	r4, r2
 800fbda:	4698      	mov	r8, r3
 800fbdc:	4606      	mov	r6, r0
 800fbde:	b118      	cbz	r0, 800fbe8 <_vfiprintf_r+0x18>
 800fbe0:	6a03      	ldr	r3, [r0, #32]
 800fbe2:	b90b      	cbnz	r3, 800fbe8 <_vfiprintf_r+0x18>
 800fbe4:	f7fd ffb4 	bl	800db50 <__sinit>
 800fbe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbea:	07d9      	lsls	r1, r3, #31
 800fbec:	d405      	bmi.n	800fbfa <_vfiprintf_r+0x2a>
 800fbee:	89ab      	ldrh	r3, [r5, #12]
 800fbf0:	059a      	lsls	r2, r3, #22
 800fbf2:	d402      	bmi.n	800fbfa <_vfiprintf_r+0x2a>
 800fbf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbf6:	f7fe fa12 	bl	800e01e <__retarget_lock_acquire_recursive>
 800fbfa:	89ab      	ldrh	r3, [r5, #12]
 800fbfc:	071b      	lsls	r3, r3, #28
 800fbfe:	d501      	bpl.n	800fc04 <_vfiprintf_r+0x34>
 800fc00:	692b      	ldr	r3, [r5, #16]
 800fc02:	b99b      	cbnz	r3, 800fc2c <_vfiprintf_r+0x5c>
 800fc04:	4629      	mov	r1, r5
 800fc06:	4630      	mov	r0, r6
 800fc08:	f000 f938 	bl	800fe7c <__swsetup_r>
 800fc0c:	b170      	cbz	r0, 800fc2c <_vfiprintf_r+0x5c>
 800fc0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc10:	07dc      	lsls	r4, r3, #31
 800fc12:	d504      	bpl.n	800fc1e <_vfiprintf_r+0x4e>
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
 800fc18:	b01d      	add	sp, #116	@ 0x74
 800fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1e:	89ab      	ldrh	r3, [r5, #12]
 800fc20:	0598      	lsls	r0, r3, #22
 800fc22:	d4f7      	bmi.n	800fc14 <_vfiprintf_r+0x44>
 800fc24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc26:	f7fe f9fb 	bl	800e020 <__retarget_lock_release_recursive>
 800fc2a:	e7f3      	b.n	800fc14 <_vfiprintf_r+0x44>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc30:	2320      	movs	r3, #32
 800fc32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc36:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc3a:	2330      	movs	r3, #48	@ 0x30
 800fc3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fdec <_vfiprintf_r+0x21c>
 800fc40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc44:	f04f 0901 	mov.w	r9, #1
 800fc48:	4623      	mov	r3, r4
 800fc4a:	469a      	mov	sl, r3
 800fc4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc50:	b10a      	cbz	r2, 800fc56 <_vfiprintf_r+0x86>
 800fc52:	2a25      	cmp	r2, #37	@ 0x25
 800fc54:	d1f9      	bne.n	800fc4a <_vfiprintf_r+0x7a>
 800fc56:	ebba 0b04 	subs.w	fp, sl, r4
 800fc5a:	d00b      	beq.n	800fc74 <_vfiprintf_r+0xa4>
 800fc5c:	465b      	mov	r3, fp
 800fc5e:	4622      	mov	r2, r4
 800fc60:	4629      	mov	r1, r5
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7ff ffa1 	bl	800fbaa <__sfputs_r>
 800fc68:	3001      	adds	r0, #1
 800fc6a:	f000 80a7 	beq.w	800fdbc <_vfiprintf_r+0x1ec>
 800fc6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc70:	445a      	add	r2, fp
 800fc72:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc74:	f89a 3000 	ldrb.w	r3, [sl]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 809f 	beq.w	800fdbc <_vfiprintf_r+0x1ec>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f04f 32ff 	mov.w	r2, #4294967295
 800fc84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc88:	f10a 0a01 	add.w	sl, sl, #1
 800fc8c:	9304      	str	r3, [sp, #16]
 800fc8e:	9307      	str	r3, [sp, #28]
 800fc90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc94:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc96:	4654      	mov	r4, sl
 800fc98:	2205      	movs	r2, #5
 800fc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc9e:	4853      	ldr	r0, [pc, #332]	@ (800fdec <_vfiprintf_r+0x21c>)
 800fca0:	f7f0 fa96 	bl	80001d0 <memchr>
 800fca4:	9a04      	ldr	r2, [sp, #16]
 800fca6:	b9d8      	cbnz	r0, 800fce0 <_vfiprintf_r+0x110>
 800fca8:	06d1      	lsls	r1, r2, #27
 800fcaa:	bf44      	itt	mi
 800fcac:	2320      	movmi	r3, #32
 800fcae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcb2:	0713      	lsls	r3, r2, #28
 800fcb4:	bf44      	itt	mi
 800fcb6:	232b      	movmi	r3, #43	@ 0x2b
 800fcb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcbc:	f89a 3000 	ldrb.w	r3, [sl]
 800fcc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcc2:	d015      	beq.n	800fcf0 <_vfiprintf_r+0x120>
 800fcc4:	9a07      	ldr	r2, [sp, #28]
 800fcc6:	4654      	mov	r4, sl
 800fcc8:	2000      	movs	r0, #0
 800fcca:	f04f 0c0a 	mov.w	ip, #10
 800fcce:	4621      	mov	r1, r4
 800fcd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcd4:	3b30      	subs	r3, #48	@ 0x30
 800fcd6:	2b09      	cmp	r3, #9
 800fcd8:	d94b      	bls.n	800fd72 <_vfiprintf_r+0x1a2>
 800fcda:	b1b0      	cbz	r0, 800fd0a <_vfiprintf_r+0x13a>
 800fcdc:	9207      	str	r2, [sp, #28]
 800fcde:	e014      	b.n	800fd0a <_vfiprintf_r+0x13a>
 800fce0:	eba0 0308 	sub.w	r3, r0, r8
 800fce4:	fa09 f303 	lsl.w	r3, r9, r3
 800fce8:	4313      	orrs	r3, r2
 800fcea:	9304      	str	r3, [sp, #16]
 800fcec:	46a2      	mov	sl, r4
 800fcee:	e7d2      	b.n	800fc96 <_vfiprintf_r+0xc6>
 800fcf0:	9b03      	ldr	r3, [sp, #12]
 800fcf2:	1d19      	adds	r1, r3, #4
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	9103      	str	r1, [sp, #12]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	bfbb      	ittet	lt
 800fcfc:	425b      	neglt	r3, r3
 800fcfe:	f042 0202 	orrlt.w	r2, r2, #2
 800fd02:	9307      	strge	r3, [sp, #28]
 800fd04:	9307      	strlt	r3, [sp, #28]
 800fd06:	bfb8      	it	lt
 800fd08:	9204      	strlt	r2, [sp, #16]
 800fd0a:	7823      	ldrb	r3, [r4, #0]
 800fd0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd0e:	d10a      	bne.n	800fd26 <_vfiprintf_r+0x156>
 800fd10:	7863      	ldrb	r3, [r4, #1]
 800fd12:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd14:	d132      	bne.n	800fd7c <_vfiprintf_r+0x1ac>
 800fd16:	9b03      	ldr	r3, [sp, #12]
 800fd18:	1d1a      	adds	r2, r3, #4
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	9203      	str	r2, [sp, #12]
 800fd1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd22:	3402      	adds	r4, #2
 800fd24:	9305      	str	r3, [sp, #20]
 800fd26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fdfc <_vfiprintf_r+0x22c>
 800fd2a:	7821      	ldrb	r1, [r4, #0]
 800fd2c:	2203      	movs	r2, #3
 800fd2e:	4650      	mov	r0, sl
 800fd30:	f7f0 fa4e 	bl	80001d0 <memchr>
 800fd34:	b138      	cbz	r0, 800fd46 <_vfiprintf_r+0x176>
 800fd36:	9b04      	ldr	r3, [sp, #16]
 800fd38:	eba0 000a 	sub.w	r0, r0, sl
 800fd3c:	2240      	movs	r2, #64	@ 0x40
 800fd3e:	4082      	lsls	r2, r0
 800fd40:	4313      	orrs	r3, r2
 800fd42:	3401      	adds	r4, #1
 800fd44:	9304      	str	r3, [sp, #16]
 800fd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4a:	4829      	ldr	r0, [pc, #164]	@ (800fdf0 <_vfiprintf_r+0x220>)
 800fd4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd50:	2206      	movs	r2, #6
 800fd52:	f7f0 fa3d 	bl	80001d0 <memchr>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d03f      	beq.n	800fdda <_vfiprintf_r+0x20a>
 800fd5a:	4b26      	ldr	r3, [pc, #152]	@ (800fdf4 <_vfiprintf_r+0x224>)
 800fd5c:	bb1b      	cbnz	r3, 800fda6 <_vfiprintf_r+0x1d6>
 800fd5e:	9b03      	ldr	r3, [sp, #12]
 800fd60:	3307      	adds	r3, #7
 800fd62:	f023 0307 	bic.w	r3, r3, #7
 800fd66:	3308      	adds	r3, #8
 800fd68:	9303      	str	r3, [sp, #12]
 800fd6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd6c:	443b      	add	r3, r7
 800fd6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd70:	e76a      	b.n	800fc48 <_vfiprintf_r+0x78>
 800fd72:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd76:	460c      	mov	r4, r1
 800fd78:	2001      	movs	r0, #1
 800fd7a:	e7a8      	b.n	800fcce <_vfiprintf_r+0xfe>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	3401      	adds	r4, #1
 800fd80:	9305      	str	r3, [sp, #20]
 800fd82:	4619      	mov	r1, r3
 800fd84:	f04f 0c0a 	mov.w	ip, #10
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd8e:	3a30      	subs	r2, #48	@ 0x30
 800fd90:	2a09      	cmp	r2, #9
 800fd92:	d903      	bls.n	800fd9c <_vfiprintf_r+0x1cc>
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d0c6      	beq.n	800fd26 <_vfiprintf_r+0x156>
 800fd98:	9105      	str	r1, [sp, #20]
 800fd9a:	e7c4      	b.n	800fd26 <_vfiprintf_r+0x156>
 800fd9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fda0:	4604      	mov	r4, r0
 800fda2:	2301      	movs	r3, #1
 800fda4:	e7f0      	b.n	800fd88 <_vfiprintf_r+0x1b8>
 800fda6:	ab03      	add	r3, sp, #12
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	462a      	mov	r2, r5
 800fdac:	4b12      	ldr	r3, [pc, #72]	@ (800fdf8 <_vfiprintf_r+0x228>)
 800fdae:	a904      	add	r1, sp, #16
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7fd fa89 	bl	800d2c8 <_printf_float>
 800fdb6:	4607      	mov	r7, r0
 800fdb8:	1c78      	adds	r0, r7, #1
 800fdba:	d1d6      	bne.n	800fd6a <_vfiprintf_r+0x19a>
 800fdbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdbe:	07d9      	lsls	r1, r3, #31
 800fdc0:	d405      	bmi.n	800fdce <_vfiprintf_r+0x1fe>
 800fdc2:	89ab      	ldrh	r3, [r5, #12]
 800fdc4:	059a      	lsls	r2, r3, #22
 800fdc6:	d402      	bmi.n	800fdce <_vfiprintf_r+0x1fe>
 800fdc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdca:	f7fe f929 	bl	800e020 <__retarget_lock_release_recursive>
 800fdce:	89ab      	ldrh	r3, [r5, #12]
 800fdd0:	065b      	lsls	r3, r3, #25
 800fdd2:	f53f af1f 	bmi.w	800fc14 <_vfiprintf_r+0x44>
 800fdd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdd8:	e71e      	b.n	800fc18 <_vfiprintf_r+0x48>
 800fdda:	ab03      	add	r3, sp, #12
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	462a      	mov	r2, r5
 800fde0:	4b05      	ldr	r3, [pc, #20]	@ (800fdf8 <_vfiprintf_r+0x228>)
 800fde2:	a904      	add	r1, sp, #16
 800fde4:	4630      	mov	r0, r6
 800fde6:	f7fd fd07 	bl	800d7f8 <_printf_i>
 800fdea:	e7e4      	b.n	800fdb6 <_vfiprintf_r+0x1e6>
 800fdec:	08010dd8 	.word	0x08010dd8
 800fdf0:	08010de2 	.word	0x08010de2
 800fdf4:	0800d2c9 	.word	0x0800d2c9
 800fdf8:	0800fbab 	.word	0x0800fbab
 800fdfc:	08010dde 	.word	0x08010dde

0800fe00 <__swbuf_r>:
 800fe00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe02:	460e      	mov	r6, r1
 800fe04:	4614      	mov	r4, r2
 800fe06:	4605      	mov	r5, r0
 800fe08:	b118      	cbz	r0, 800fe12 <__swbuf_r+0x12>
 800fe0a:	6a03      	ldr	r3, [r0, #32]
 800fe0c:	b90b      	cbnz	r3, 800fe12 <__swbuf_r+0x12>
 800fe0e:	f7fd fe9f 	bl	800db50 <__sinit>
 800fe12:	69a3      	ldr	r3, [r4, #24]
 800fe14:	60a3      	str	r3, [r4, #8]
 800fe16:	89a3      	ldrh	r3, [r4, #12]
 800fe18:	071a      	lsls	r2, r3, #28
 800fe1a:	d501      	bpl.n	800fe20 <__swbuf_r+0x20>
 800fe1c:	6923      	ldr	r3, [r4, #16]
 800fe1e:	b943      	cbnz	r3, 800fe32 <__swbuf_r+0x32>
 800fe20:	4621      	mov	r1, r4
 800fe22:	4628      	mov	r0, r5
 800fe24:	f000 f82a 	bl	800fe7c <__swsetup_r>
 800fe28:	b118      	cbz	r0, 800fe32 <__swbuf_r+0x32>
 800fe2a:	f04f 37ff 	mov.w	r7, #4294967295
 800fe2e:	4638      	mov	r0, r7
 800fe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe32:	6823      	ldr	r3, [r4, #0]
 800fe34:	6922      	ldr	r2, [r4, #16]
 800fe36:	1a98      	subs	r0, r3, r2
 800fe38:	6963      	ldr	r3, [r4, #20]
 800fe3a:	b2f6      	uxtb	r6, r6
 800fe3c:	4283      	cmp	r3, r0
 800fe3e:	4637      	mov	r7, r6
 800fe40:	dc05      	bgt.n	800fe4e <__swbuf_r+0x4e>
 800fe42:	4621      	mov	r1, r4
 800fe44:	4628      	mov	r0, r5
 800fe46:	f7ff fdcd 	bl	800f9e4 <_fflush_r>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d1ed      	bne.n	800fe2a <__swbuf_r+0x2a>
 800fe4e:	68a3      	ldr	r3, [r4, #8]
 800fe50:	3b01      	subs	r3, #1
 800fe52:	60a3      	str	r3, [r4, #8]
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	6022      	str	r2, [r4, #0]
 800fe5a:	701e      	strb	r6, [r3, #0]
 800fe5c:	6962      	ldr	r2, [r4, #20]
 800fe5e:	1c43      	adds	r3, r0, #1
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d004      	beq.n	800fe6e <__swbuf_r+0x6e>
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	07db      	lsls	r3, r3, #31
 800fe68:	d5e1      	bpl.n	800fe2e <__swbuf_r+0x2e>
 800fe6a:	2e0a      	cmp	r6, #10
 800fe6c:	d1df      	bne.n	800fe2e <__swbuf_r+0x2e>
 800fe6e:	4621      	mov	r1, r4
 800fe70:	4628      	mov	r0, r5
 800fe72:	f7ff fdb7 	bl	800f9e4 <_fflush_r>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d0d9      	beq.n	800fe2e <__swbuf_r+0x2e>
 800fe7a:	e7d6      	b.n	800fe2a <__swbuf_r+0x2a>

0800fe7c <__swsetup_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4b29      	ldr	r3, [pc, #164]	@ (800ff24 <__swsetup_r+0xa8>)
 800fe80:	4605      	mov	r5, r0
 800fe82:	6818      	ldr	r0, [r3, #0]
 800fe84:	460c      	mov	r4, r1
 800fe86:	b118      	cbz	r0, 800fe90 <__swsetup_r+0x14>
 800fe88:	6a03      	ldr	r3, [r0, #32]
 800fe8a:	b90b      	cbnz	r3, 800fe90 <__swsetup_r+0x14>
 800fe8c:	f7fd fe60 	bl	800db50 <__sinit>
 800fe90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe94:	0719      	lsls	r1, r3, #28
 800fe96:	d422      	bmi.n	800fede <__swsetup_r+0x62>
 800fe98:	06da      	lsls	r2, r3, #27
 800fe9a:	d407      	bmi.n	800feac <__swsetup_r+0x30>
 800fe9c:	2209      	movs	r2, #9
 800fe9e:	602a      	str	r2, [r5, #0]
 800fea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fea4:	81a3      	strh	r3, [r4, #12]
 800fea6:	f04f 30ff 	mov.w	r0, #4294967295
 800feaa:	e033      	b.n	800ff14 <__swsetup_r+0x98>
 800feac:	0758      	lsls	r0, r3, #29
 800feae:	d512      	bpl.n	800fed6 <__swsetup_r+0x5a>
 800feb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800feb2:	b141      	cbz	r1, 800fec6 <__swsetup_r+0x4a>
 800feb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800feb8:	4299      	cmp	r1, r3
 800feba:	d002      	beq.n	800fec2 <__swsetup_r+0x46>
 800febc:	4628      	mov	r0, r5
 800febe:	f7fe ff33 	bl	800ed28 <_free_r>
 800fec2:	2300      	movs	r3, #0
 800fec4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fec6:	89a3      	ldrh	r3, [r4, #12]
 800fec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fecc:	81a3      	strh	r3, [r4, #12]
 800fece:	2300      	movs	r3, #0
 800fed0:	6063      	str	r3, [r4, #4]
 800fed2:	6923      	ldr	r3, [r4, #16]
 800fed4:	6023      	str	r3, [r4, #0]
 800fed6:	89a3      	ldrh	r3, [r4, #12]
 800fed8:	f043 0308 	orr.w	r3, r3, #8
 800fedc:	81a3      	strh	r3, [r4, #12]
 800fede:	6923      	ldr	r3, [r4, #16]
 800fee0:	b94b      	cbnz	r3, 800fef6 <__swsetup_r+0x7a>
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800feec:	d003      	beq.n	800fef6 <__swsetup_r+0x7a>
 800feee:	4621      	mov	r1, r4
 800fef0:	4628      	mov	r0, r5
 800fef2:	f000 f88b 	bl	801000c <__smakebuf_r>
 800fef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fefa:	f013 0201 	ands.w	r2, r3, #1
 800fefe:	d00a      	beq.n	800ff16 <__swsetup_r+0x9a>
 800ff00:	2200      	movs	r2, #0
 800ff02:	60a2      	str	r2, [r4, #8]
 800ff04:	6962      	ldr	r2, [r4, #20]
 800ff06:	4252      	negs	r2, r2
 800ff08:	61a2      	str	r2, [r4, #24]
 800ff0a:	6922      	ldr	r2, [r4, #16]
 800ff0c:	b942      	cbnz	r2, 800ff20 <__swsetup_r+0xa4>
 800ff0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff12:	d1c5      	bne.n	800fea0 <__swsetup_r+0x24>
 800ff14:	bd38      	pop	{r3, r4, r5, pc}
 800ff16:	0799      	lsls	r1, r3, #30
 800ff18:	bf58      	it	pl
 800ff1a:	6962      	ldrpl	r2, [r4, #20]
 800ff1c:	60a2      	str	r2, [r4, #8]
 800ff1e:	e7f4      	b.n	800ff0a <__swsetup_r+0x8e>
 800ff20:	2000      	movs	r0, #0
 800ff22:	e7f7      	b.n	800ff14 <__swsetup_r+0x98>
 800ff24:	20000064 	.word	0x20000064

0800ff28 <_raise_r>:
 800ff28:	291f      	cmp	r1, #31
 800ff2a:	b538      	push	{r3, r4, r5, lr}
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	460c      	mov	r4, r1
 800ff30:	d904      	bls.n	800ff3c <_raise_r+0x14>
 800ff32:	2316      	movs	r3, #22
 800ff34:	6003      	str	r3, [r0, #0]
 800ff36:	f04f 30ff 	mov.w	r0, #4294967295
 800ff3a:	bd38      	pop	{r3, r4, r5, pc}
 800ff3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff3e:	b112      	cbz	r2, 800ff46 <_raise_r+0x1e>
 800ff40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff44:	b94b      	cbnz	r3, 800ff5a <_raise_r+0x32>
 800ff46:	4628      	mov	r0, r5
 800ff48:	f000 f830 	bl	800ffac <_getpid_r>
 800ff4c:	4622      	mov	r2, r4
 800ff4e:	4601      	mov	r1, r0
 800ff50:	4628      	mov	r0, r5
 800ff52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff56:	f000 b817 	b.w	800ff88 <_kill_r>
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d00a      	beq.n	800ff74 <_raise_r+0x4c>
 800ff5e:	1c59      	adds	r1, r3, #1
 800ff60:	d103      	bne.n	800ff6a <_raise_r+0x42>
 800ff62:	2316      	movs	r3, #22
 800ff64:	6003      	str	r3, [r0, #0]
 800ff66:	2001      	movs	r0, #1
 800ff68:	e7e7      	b.n	800ff3a <_raise_r+0x12>
 800ff6a:	2100      	movs	r1, #0
 800ff6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff70:	4620      	mov	r0, r4
 800ff72:	4798      	blx	r3
 800ff74:	2000      	movs	r0, #0
 800ff76:	e7e0      	b.n	800ff3a <_raise_r+0x12>

0800ff78 <raise>:
 800ff78:	4b02      	ldr	r3, [pc, #8]	@ (800ff84 <raise+0xc>)
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	6818      	ldr	r0, [r3, #0]
 800ff7e:	f7ff bfd3 	b.w	800ff28 <_raise_r>
 800ff82:	bf00      	nop
 800ff84:	20000064 	.word	0x20000064

0800ff88 <_kill_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4d07      	ldr	r5, [pc, #28]	@ (800ffa8 <_kill_r+0x20>)
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4604      	mov	r4, r0
 800ff90:	4608      	mov	r0, r1
 800ff92:	4611      	mov	r1, r2
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	f7f5 ff5d 	bl	8005e54 <_kill>
 800ff9a:	1c43      	adds	r3, r0, #1
 800ff9c:	d102      	bne.n	800ffa4 <_kill_r+0x1c>
 800ff9e:	682b      	ldr	r3, [r5, #0]
 800ffa0:	b103      	cbz	r3, 800ffa4 <_kill_r+0x1c>
 800ffa2:	6023      	str	r3, [r4, #0]
 800ffa4:	bd38      	pop	{r3, r4, r5, pc}
 800ffa6:	bf00      	nop
 800ffa8:	2000ca54 	.word	0x2000ca54

0800ffac <_getpid_r>:
 800ffac:	f7f5 bf4a 	b.w	8005e44 <_getpid>

0800ffb0 <_malloc_usable_size_r>:
 800ffb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffb4:	1f18      	subs	r0, r3, #4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	bfbc      	itt	lt
 800ffba:	580b      	ldrlt	r3, [r1, r0]
 800ffbc:	18c0      	addlt	r0, r0, r3
 800ffbe:	4770      	bx	lr

0800ffc0 <__swhatbuf_r>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	460c      	mov	r4, r1
 800ffc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc8:	2900      	cmp	r1, #0
 800ffca:	b096      	sub	sp, #88	@ 0x58
 800ffcc:	4615      	mov	r5, r2
 800ffce:	461e      	mov	r6, r3
 800ffd0:	da0d      	bge.n	800ffee <__swhatbuf_r+0x2e>
 800ffd2:	89a3      	ldrh	r3, [r4, #12]
 800ffd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ffd8:	f04f 0100 	mov.w	r1, #0
 800ffdc:	bf14      	ite	ne
 800ffde:	2340      	movne	r3, #64	@ 0x40
 800ffe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	6031      	str	r1, [r6, #0]
 800ffe8:	602b      	str	r3, [r5, #0]
 800ffea:	b016      	add	sp, #88	@ 0x58
 800ffec:	bd70      	pop	{r4, r5, r6, pc}
 800ffee:	466a      	mov	r2, sp
 800fff0:	f000 f848 	bl	8010084 <_fstat_r>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	dbec      	blt.n	800ffd2 <__swhatbuf_r+0x12>
 800fff8:	9901      	ldr	r1, [sp, #4]
 800fffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010002:	4259      	negs	r1, r3
 8010004:	4159      	adcs	r1, r3
 8010006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801000a:	e7eb      	b.n	800ffe4 <__swhatbuf_r+0x24>

0801000c <__smakebuf_r>:
 801000c:	898b      	ldrh	r3, [r1, #12]
 801000e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010010:	079d      	lsls	r5, r3, #30
 8010012:	4606      	mov	r6, r0
 8010014:	460c      	mov	r4, r1
 8010016:	d507      	bpl.n	8010028 <__smakebuf_r+0x1c>
 8010018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801001c:	6023      	str	r3, [r4, #0]
 801001e:	6123      	str	r3, [r4, #16]
 8010020:	2301      	movs	r3, #1
 8010022:	6163      	str	r3, [r4, #20]
 8010024:	b003      	add	sp, #12
 8010026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010028:	ab01      	add	r3, sp, #4
 801002a:	466a      	mov	r2, sp
 801002c:	f7ff ffc8 	bl	800ffc0 <__swhatbuf_r>
 8010030:	9f00      	ldr	r7, [sp, #0]
 8010032:	4605      	mov	r5, r0
 8010034:	4639      	mov	r1, r7
 8010036:	4630      	mov	r0, r6
 8010038:	f7fe feea 	bl	800ee10 <_malloc_r>
 801003c:	b948      	cbnz	r0, 8010052 <__smakebuf_r+0x46>
 801003e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010042:	059a      	lsls	r2, r3, #22
 8010044:	d4ee      	bmi.n	8010024 <__smakebuf_r+0x18>
 8010046:	f023 0303 	bic.w	r3, r3, #3
 801004a:	f043 0302 	orr.w	r3, r3, #2
 801004e:	81a3      	strh	r3, [r4, #12]
 8010050:	e7e2      	b.n	8010018 <__smakebuf_r+0xc>
 8010052:	89a3      	ldrh	r3, [r4, #12]
 8010054:	6020      	str	r0, [r4, #0]
 8010056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801005a:	81a3      	strh	r3, [r4, #12]
 801005c:	9b01      	ldr	r3, [sp, #4]
 801005e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010062:	b15b      	cbz	r3, 801007c <__smakebuf_r+0x70>
 8010064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010068:	4630      	mov	r0, r6
 801006a:	f000 f81d 	bl	80100a8 <_isatty_r>
 801006e:	b128      	cbz	r0, 801007c <__smakebuf_r+0x70>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	f023 0303 	bic.w	r3, r3, #3
 8010076:	f043 0301 	orr.w	r3, r3, #1
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	89a3      	ldrh	r3, [r4, #12]
 801007e:	431d      	orrs	r5, r3
 8010080:	81a5      	strh	r5, [r4, #12]
 8010082:	e7cf      	b.n	8010024 <__smakebuf_r+0x18>

08010084 <_fstat_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4d07      	ldr	r5, [pc, #28]	@ (80100a4 <_fstat_r+0x20>)
 8010088:	2300      	movs	r3, #0
 801008a:	4604      	mov	r4, r0
 801008c:	4608      	mov	r0, r1
 801008e:	4611      	mov	r1, r2
 8010090:	602b      	str	r3, [r5, #0]
 8010092:	f7f5 ff3f 	bl	8005f14 <_fstat>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	d102      	bne.n	80100a0 <_fstat_r+0x1c>
 801009a:	682b      	ldr	r3, [r5, #0]
 801009c:	b103      	cbz	r3, 80100a0 <_fstat_r+0x1c>
 801009e:	6023      	str	r3, [r4, #0]
 80100a0:	bd38      	pop	{r3, r4, r5, pc}
 80100a2:	bf00      	nop
 80100a4:	2000ca54 	.word	0x2000ca54

080100a8 <_isatty_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d06      	ldr	r5, [pc, #24]	@ (80100c4 <_isatty_r+0x1c>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	602b      	str	r3, [r5, #0]
 80100b4:	f7f5 ff3e 	bl	8005f34 <_isatty>
 80100b8:	1c43      	adds	r3, r0, #1
 80100ba:	d102      	bne.n	80100c2 <_isatty_r+0x1a>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	b103      	cbz	r3, 80100c2 <_isatty_r+0x1a>
 80100c0:	6023      	str	r3, [r4, #0]
 80100c2:	bd38      	pop	{r3, r4, r5, pc}
 80100c4:	2000ca54 	.word	0x2000ca54

080100c8 <_init>:
 80100c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ca:	bf00      	nop
 80100cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ce:	bc08      	pop	{r3}
 80100d0:	469e      	mov	lr, r3
 80100d2:	4770      	bx	lr

080100d4 <_fini>:
 80100d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d6:	bf00      	nop
 80100d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100da:	bc08      	pop	{r3}
 80100dc:	469e      	mov	lr, r3
 80100de:	4770      	bx	lr
