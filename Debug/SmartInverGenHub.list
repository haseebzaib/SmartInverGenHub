
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015578  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014ec  08015708  08015708  00016708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_5x8_mf 000007db  08016bf4  08016bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  080173cf  080173cf  000183cf  2**0
                  ALLOC
  5 .ARM          00000008  080173d0  080173d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080173d8  080173d8  000194c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  080173d8  080173d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080173ec  080173ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000004c8  20000000  080173f0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  000194c8  2**0
                  CONTENTS
 11 .bss          000140ac  200004c8  200004c8  000194c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20014574  20014574  000194c8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000194c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006d748  00000000  00000000  000194f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c6f3  00000000  00000000  00086c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037b8  00000000  00000000  00093338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a72  00000000  00000000  00096af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036f12  00000000  00000000  00099562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e4f7  00000000  00000000  000d0474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a8f8  00000000  00000000  0011e96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00229263  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f810  00000000  00000000  002292a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  00238ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c8 	.word	0x200004c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080156f0 	.word	0x080156f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004cc 	.word	0x200004cc
 80001cc:	080156f0 	.word	0x080156f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_ZL16TurnOffGeneratorv>:
char DischargingTime[20] = "Null";

uint8_t flag = 0;

static void TurnOffGenerator()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(RelayCont_GPIO_Port, RelayCont_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <_ZL16TurnOffGeneratorv+0x14>)
 8000f82:	f00a fb89 	bl	800b698 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020800 	.word	0x40020800

08000f90 <_ZL15TurnOnGeneratorv>:

static void TurnOnGenerator()
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(RelayCont_GPIO_Port, RelayCont_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <_ZL15TurnOnGeneratorv+0x14>)
 8000f9a:	f00a fb7d 	bl	800b698 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <_ZL18SwitchingLoadLogicP17ControlData_Queue>:

static void SwitchingLoadLogic(struct ControlData_Queue *ControlData)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

//also track charging time here then



	if(ControlData->SoC <= SOC_LOW && (ControlData->SelectedSource ==  static_cast<uint8_t>(sources::Battery)))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000fb6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d81d      	bhi.n	8001000 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x58>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x58>
	{
		TurnOnGenerator();
 8000fce:	f7ff ffdf 	bl	8000f90 <_ZL15TurnOnGeneratorv>
		ControlData->SelectedSource = static_cast<uint8_t>(sources::Generator);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		ControlData->batteryChargeDischargeStartTime[0] = ControlData->timestamp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		DisplayChargeStartTime = ControlData->batteryChargeDischargeStartTime[0];
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fea:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xb0>)
 8000fec:	6013      	str	r3, [r2, #0]
		std::memcpy((RTC_TimeTypeDef *)&DTimeCharging_,(RTC_TimeTypeDef *)&DTime,sizeof(RTC_TimeTypeDef));
 8000fee:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xb4>)
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xb8>)
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	6023      	str	r3, [r4, #0]





}
 8000ffe:	e027      	b.n	8001050 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xa8>
	else if(ControlData->SoC >= SOC_HIGH && (ControlData->SelectedSource == static_cast<uint8_t>(sources::Generator)))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001006:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001064 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xbc>
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	da00      	bge.n	8001016 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x6e>
}
 8001014:	e01c      	b.n	8001050 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xa8>
	else if(ControlData->SoC >= SOC_HIGH && (ControlData->SelectedSource == static_cast<uint8_t>(sources::Generator)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800101c:	2b01      	cmp	r3, #1
 800101e:	d117      	bne.n	8001050 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xa8>
		TurnOffGenerator();
 8001020:	f7ff ffaa 	bl	8000f78 <_ZL16TurnOffGeneratorv>
		ControlData->SelectedSource = static_cast<uint8_t>(sources::Battery);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		ControlData->batteryChargeDischargeEndTime[0] = ControlData->timestamp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
		DisplayChargeEndTime = ControlData->batteryChargeDischargeEndTime[0];
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800103c:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xc0>)
 800103e:	6013      	str	r3, [r2, #0]
		std::memcpy((RTC_TimeTypeDef *)&DTimeDischarging_,(RTC_TimeTypeDef *)&DTime,sizeof(RTC_TimeTypeDef));
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xc4>)
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0xb8>)
 8001044:	4614      	mov	r4, r2
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	6023      	str	r3, [r4, #0]
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bdb0      	pop	{r4, r5, r7, pc}
 8001058:	200004f0 	.word	0x200004f0
 800105c:	20000564 	.word	0x20000564
 8001060:	20000550 	.word	0x20000550
 8001064:	42be0000 	.word	0x42be0000
 8001068:	200004f4 	.word	0x200004f4
 800106c:	20000578 	.word	0x20000578

08001070 <_Z14getSourceStatev>:

uint8_t getSourceState()
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	return sourceStatus;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <_Z14getSourceStatev+0x14>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200004ed 	.word	0x200004ed

08001088 <_Z18getChargeTimestampP15RTC_TimeTypeDef>:

void getChargeTimestamp(RTC_TimeTypeDef *DTimeCharging)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	std::memcpy((RTC_TimeTypeDef *)DTimeCharging,(RTC_TimeTypeDef *)&DTimeCharging_,sizeof(RTC_TimeTypeDef));
 8001090:	2214      	movs	r2, #20
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <_Z18getChargeTimestampP15RTC_TimeTypeDef+0x1c>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f012 fae2 	bl	801365e <memcpy>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000564 	.word	0x20000564

080010a8 <_Z21getDischargeTimestampP15RTC_TimeTypeDef>:
void getDischargeTimestamp(RTC_TimeTypeDef *DTimeDischarging)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	std::memcpy((RTC_TimeTypeDef *)DTimeDischarging,(RTC_TimeTypeDef *)&DTimeDischarging_,sizeof(RTC_TimeTypeDef));
 80010b0:	2214      	movs	r2, #20
 80010b2:	4904      	ldr	r1, [pc, #16]	@ (80010c4 <_Z21getDischargeTimestampP15RTC_TimeTypeDef+0x1c>)
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f012 fad2 	bl	801365e <memcpy>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000578 	.word	0x20000578

080010c8 <_Z10getACData1v>:

sensor_pzem::PZEM_004T::PZEM getACData1()
{
 80010c8:	b4b0      	push	{r4, r5, r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	return PZEM1_Data;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <_Z10getACData1v+0x28>)
 80010d4:	461c      	mov	r4, r3
 80010d6:	4615      	mov	r5, r2
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bcb0      	pop	{r4, r5, r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200004f8 	.word	0x200004f8

080010f4 <_Z10getACData2v>:
sensor_pzem::PZEM_004T::PZEM getACData2()
{
 80010f4:	b4b0      	push	{r4, r5, r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	return PZEM1_Data;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a07      	ldr	r2, [pc, #28]	@ (800111c <_Z10getACData2v+0x28>)
 8001100:	461c      	mov	r4, r3
 8001102:	4615      	mov	r5, r2
 8001104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800110c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bcb0      	pop	{r4, r5, r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200004f8 	.word	0x200004f8

08001120 <_Z10getACData3v>:
sensor_pzem::PZEM_004T::PZEM getACData3()
{
 8001120:	b4b0      	push	{r4, r5, r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	return PZEM1_Data;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <_Z10getACData3v+0x28>)
 800112c:	461c      	mov	r4, r3
 800112e:	4615      	mov	r5, r2
 8001130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001134:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bcb0      	pop	{r4, r5, r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200004f8 	.word	0x200004f8

0800114c <_Z11ControlTaskPv>:


void ControlTask(void *pvParameters) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ae      	sub	sp, #184	@ 0xb8
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]



	struct ControlData_Queue ControlData = { 0 };
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	22a4      	movs	r2, #164	@ 0xa4
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f012 f96a 	bl	8013436 <memset>

	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 8001162:	f000 fd63 	bl	8001c2c <_ZN8UniqueID6GetUidEv>
 8001166:	4602      	mov	r2, r0
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f012 fa6d 	bl	801364e <strcpy>

	ControlData.SelectedSource = static_cast<uint8_t>(sources::Battery);
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

	sourceStatus = ControlData.SelectedSource;
 800117a:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800117e:	4b61      	ldr	r3, [pc, #388]	@ (8001304 <_Z11ControlTaskPv+0x1b8>)
 8001180:	701a      	strb	r2, [r3, #0]



	TurnOffGenerator();
 8001182:	f7ff fef9 	bl	8000f78 <_ZL16TurnOffGeneratorv>

	getSaveData();
 8001186:	f000 fe1b 	bl	8001dc0 <_Z11getSaveDatav>

	SOC::CC_Init(flash_data_.SOC, 1);
 800118a:	4b5f      	ldr	r3, [pc, #380]	@ (8001308 <_Z11ControlTaskPv+0x1bc>)
 800118c:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8001190:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001194:	ee00 3a10 	vmov	s0, r3
 8001198:	f003 f814 	bl	80041c4 <_ZN3SOC7CC_InitEff>

	liquidSensor.setParameters(flash_data_.zeroSpan, flash_data_.fullSpan);
 800119c:	4b5a      	ldr	r3, [pc, #360]	@ (8001308 <_Z11ControlTaskPv+0x1bc>)
 800119e:	f8d3 2003 	ldr.w	r2, [r3, #3]
 80011a2:	4613      	mov	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b58      	ldr	r3, [pc, #352]	@ (8001308 <_Z11ControlTaskPv+0x1bc>)
 80011a8:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80011ac:	ee00 3a90 	vmov	s1, r3
 80011b0:	ee00 2a10 	vmov	s0, r2
 80011b4:	4855      	ldr	r0, [pc, #340]	@ (800130c <_Z11ControlTaskPv+0x1c0>)
 80011b6:	f003 fd00 	bl	8004bba <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>
	stmRTC.setTimezone(flash_data_.zone);
 80011ba:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <_Z11ControlTaskPv+0x1bc>)
 80011bc:	f993 3000 	ldrsb.w	r3, [r3]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4853      	ldr	r0, [pc, #332]	@ (8001310 <_Z11ControlTaskPv+0x1c4>)
 80011c4:	f004 f93c 	bl	8005440 <_ZN10System_rtc6stmRTC11setTimezoneEa>

	prev_SOC = flash_data_.SOC;
 80011c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001308 <_Z11ControlTaskPv+0x1bc>)
 80011ca:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80011ce:	4a51      	ldr	r2, [pc, #324]	@ (8001314 <_Z11ControlTaskPv+0x1c8>)
 80011d0:	6013      	str	r3, [r2, #0]

	while (1) {

		stmRTC.getTime(&DDate, &DTime, &ControlData.timestamp);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	3310      	adds	r3, #16
 80011d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001318 <_Z11ControlTaskPv+0x1cc>)
 80011da:	4950      	ldr	r1, [pc, #320]	@ (800131c <_Z11ControlTaskPv+0x1d0>)
 80011dc:	484c      	ldr	r0, [pc, #304]	@ (8001310 <_Z11ControlTaskPv+0x1c4>)
 80011de:	f003 fff8 	bl	80051d2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>

		liquidSensor.Measurement_loop(&ControlData.fuelPer,
 80011e2:	69f8      	ldr	r0, [r7, #28]
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	3378      	adds	r3, #120	@ 0x78
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	3374      	adds	r3, #116	@ 0x74
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4603      	mov	r3, r0
 8001206:	4841      	ldr	r0, [pc, #260]	@ (800130c <_Z11ControlTaskPv+0x1c0>)
 8001208:	f003 faf6 	bl	80047f8 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopEPhPfmPmS3_>
				&ControlData.fuelConsp, ControlData.timestamp,
				&ControlData.refuelingStartTime, &ControlData.refuelingEndTime);

		PZEM1.read(&PZEM1_Data);
 800120c:	4944      	ldr	r1, [pc, #272]	@ (8001320 <_Z11ControlTaskPv+0x1d4>)
 800120e:	4845      	ldr	r0, [pc, #276]	@ (8001324 <_Z11ControlTaskPv+0x1d8>)
 8001210:	f003 fd3c 	bl	8004c8c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
		PZEM2.read(&PZEM2_Data);
 8001214:	4944      	ldr	r1, [pc, #272]	@ (8001328 <_Z11ControlTaskPv+0x1dc>)
 8001216:	4845      	ldr	r0, [pc, #276]	@ (800132c <_Z11ControlTaskPv+0x1e0>)
 8001218:	f003 fd38 	bl	8004c8c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
		PZEM3.read(&PZEM3_Data);
 800121c:	4944      	ldr	r1, [pc, #272]	@ (8001330 <_Z11ControlTaskPv+0x1e4>)
 800121e:	4845      	ldr	r0, [pc, #276]	@ (8001334 <_Z11ControlTaskPv+0x1e8>)
 8001220:	f003 fd34 	bl	8004c8c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>

		ControlData.V_1 = PZEM1_Data.voltage;
 8001224:	4b3e      	ldr	r3, [pc, #248]	@ (8001320 <_Z11ControlTaskPv+0x1d4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	623b      	str	r3, [r7, #32]
		ControlData.I_1 = PZEM1_Data.current;
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <_Z11ControlTaskPv+0x1d4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		ControlData.P_1 = PZEM1_Data.power;
 8001230:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <_Z11ControlTaskPv+0x1d4>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	63bb      	str	r3, [r7, #56]	@ 0x38
		ControlData.V_2 = PZEM2_Data.voltage;
 8001236:	4b3c      	ldr	r3, [pc, #240]	@ (8001328 <_Z11ControlTaskPv+0x1dc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
		ControlData.I_2 = PZEM2_Data.current;
 800123c:	4b3a      	ldr	r3, [pc, #232]	@ (8001328 <_Z11ControlTaskPv+0x1dc>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
		ControlData.P_2 = PZEM2_Data.power;
 8001242:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <_Z11ControlTaskPv+0x1dc>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ControlData.V_3 = PZEM3_Data.voltage;
 8001248:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <_Z11ControlTaskPv+0x1e4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
		ControlData.I_3 = PZEM3_Data.current;
 800124e:	4b38      	ldr	r3, [pc, #224]	@ (8001330 <_Z11ControlTaskPv+0x1e4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
		ControlData.P_3 = PZEM3_Data.power;
 8001254:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <_Z11ControlTaskPv+0x1e4>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	643b      	str	r3, [r7, #64]	@ 0x40
		ControlData.Freq = PZEM1_Data.frequency;
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <_Z11ControlTaskPv+0x1d4>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48



		DCCurrentSensor.getCurrent(&ControlData.DcCurrent);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	3340      	adds	r3, #64	@ 0x40
 8001266:	4619      	mov	r1, r3
 8001268:	4833      	ldr	r0, [pc, #204]	@ (8001338 <_Z11ControlTaskPv+0x1ec>)
 800126a:	f002 fff3 	bl	8004254 <_ZN13sensor_DcHall6DcHall10getCurrentEPf>
		DCVoltageMeasurement.getVoltage(&ControlData.DcVolt);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	3344      	adds	r3, #68	@ 0x44
 8001274:	4619      	mov	r1, r3
 8001276:	4831      	ldr	r0, [pc, #196]	@ (800133c <_Z11ControlTaskPv+0x1f0>)
 8001278:	f003 f8a8 	bl	80043cc <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf>

		SOC::CC_Loop(&ControlData.SoC,ControlData.DcCurrent,ControlData.DcVolt);
 800127c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001280:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	3348      	adds	r3, #72	@ 0x48
 800128a:	eef0 0a47 	vmov.f32	s1, s14
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	4618      	mov	r0, r3
 8001294:	f002 ff24 	bl	80040e0 <_ZN3SOC7CC_LoopEPfff>


		Left_SOC = fabsf(ControlData.SoC - prev_SOC);
 8001298:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <_Z11ControlTaskPv+0x1c8>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	eef0 7ae7 	vabs.f32	s15, s15
 80012aa:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <_Z11ControlTaskPv+0x1f4>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]

		if(Left_SOC > 5) //if SOC greater than this percent, we basically saving eey 5per reduction or increment of SOC
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <_Z11ControlTaskPv+0x1f4>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80012ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd08      	ble.n	80012d6 <_Z11ControlTaskPv+0x18a>
		{
			prev_SOC = ControlData.SoC;
 80012c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <_Z11ControlTaskPv+0x1c8>)
 80012c8:	6013      	str	r3, [r2, #0]
			flash_data_.SOC =  ControlData.SoC;
 80012ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <_Z11ControlTaskPv+0x1bc>)
 80012ce:	330b      	adds	r3, #11
 80012d0:	601a      	str	r2, [r3, #0]
			SaveData();
 80012d2:	f000 fcf9 	bl	8001cc8 <_Z8SaveDatav>
		}


		SwitchingLoadLogic(&ControlData);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe64 	bl	8000fa8 <_ZL18SwitchingLoadLogicP17ControlData_Queue>
		sourceStatus = ControlData.SelectedSource;
 80012e0:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_Z11ControlTaskPv+0x1b8>)
 80012e6:	701a      	strb	r2, [r3, #0]

		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4815      	ldr	r0, [pc, #84]	@ (8001344 <_Z11ControlTaskPv+0x1f8>)
 80012f0:	f003 fe40 	bl	8004f74 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 80012f4:	2102      	movs	r1, #2
 80012f6:	4814      	ldr	r0, [pc, #80]	@ (8001348 <_Z11ControlTaskPv+0x1fc>)
 80012f8:	f00a f9e7 	bl	800b6ca <HAL_GPIO_TogglePin>
		System_Rtos::delay(100);
 80012fc:	2064      	movs	r0, #100	@ 0x64
 80012fe:	f003 fdb1 	bl	8004e64 <_ZN11System_Rtos5delayEm>
		stmRTC.getTime(&DDate, &DTime, &ControlData.timestamp);
 8001302:	e766      	b.n	80011d2 <_Z11ControlTaskPv+0x86>
 8001304:	200004ed 	.word	0x200004ed
 8001308:	20001818 	.word	0x20001818
 800130c:	20001ae0 	.word	0x20001ae0
 8001310:	20001ad0 	.word	0x20001ad0
 8001314:	200004e4 	.word	0x200004e4
 8001318:	20000550 	.word	0x20000550
 800131c:	2000054c 	.word	0x2000054c
 8001320:	200004f8 	.word	0x200004f8
 8001324:	20001b34 	.word	0x20001b34
 8001328:	20000514 	.word	0x20000514
 800132c:	20001b5c 	.word	0x20001b5c
 8001330:	20000530 	.word	0x20000530
 8001334:	20001b84 	.word	0x20001b84
 8001338:	20001bac 	.word	0x20001bac
 800133c:	20001bc0 	.word	0x20001bc0
 8001340:	200004e8 	.word	0x200004e8
 8001344:	20001a70 	.word	0x20001a70
 8001348:	40020000 	.word	0x40020000

0800134c <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001362:	4293      	cmp	r3, r2
 8001364:	d102      	bne.n	800136c <_Z41__static_initialization_and_destruction_0ii+0x20>
System_sys::Parsing_Checking parsing;
 8001366:	4803      	ldr	r0, [pc, #12]	@ (8001374 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001368:	f004 fa11 	bl	800578e <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200004ec 	.word	0x200004ec

08001378 <_GLOBAL__sub_I_prev_SOC>:
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
 800137c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff ffe3 	bl	800134c <_Z41__static_initialization_and_destruction_0ii>
 8001386:	bd80      	pop	{r7, pc}

08001388 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv>:

u8g2_t u8g2_M;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	72fb      	strb	r3, [r7, #11]
 8001396:	4613      	mov	r3, r2
 8001398:	72bb      	strb	r3, [r7, #10]
      /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
      switch(msg)
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	3b28      	subs	r3, #40	@ 0x28
 800139e:	2b23      	cmp	r3, #35	@ 0x23
 80013a0:	d866      	bhi.n	8001470 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
 80013a2:	a201      	add	r2, pc, #4	@ (adr r2, 80013a8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x20>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	08001471 	.word	0x08001471
 80013ac:	08001439 	.word	0x08001439
 80013b0:	08001471 	.word	0x08001471
 80013b4:	08001471 	.word	0x08001471
 80013b8:	08001471 	.word	0x08001471
 80013bc:	08001471 	.word	0x08001471
 80013c0:	08001471 	.word	0x08001471
 80013c4:	08001471 	.word	0x08001471
 80013c8:	08001471 	.word	0x08001471
 80013cc:	08001471 	.word	0x08001471
 80013d0:	08001471 	.word	0x08001471
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001471 	.word	0x08001471
 80013dc:	08001471 	.word	0x08001471
 80013e0:	08001471 	.word	0x08001471
 80013e4:	08001471 	.word	0x08001471
 80013e8:	08001471 	.word	0x08001471
 80013ec:	08001471 	.word	0x08001471
 80013f0:	08001471 	.word	0x08001471
 80013f4:	08001471 	.word	0x08001471
 80013f8:	08001471 	.word	0x08001471
 80013fc:	08001471 	.word	0x08001471
 8001400:	08001471 	.word	0x08001471
 8001404:	08001471 	.word	0x08001471
 8001408:	08001471 	.word	0x08001471
 800140c:	08001471 	.word	0x08001471
 8001410:	08001471 	.word	0x08001471
 8001414:	08001471 	.word	0x08001471
 8001418:	08001471 	.word	0x08001471
 800141c:	08001471 	.word	0x08001471
 8001420:	08001471 	.word	0x08001471
 8001424:	08001471 	.word	0x08001471
 8001428:	08001471 	.word	0x08001471
 800142c:	08001443 	.word	0x08001443
 8001430:	08001451 	.word	0x08001451
 8001434:	08001461 	.word	0x08001461
      case U8X8_MSG_GPIO_AND_DELAY_INIT:
          /* Insert codes for initialization */
          break;
      case U8X8_MSG_DELAY_MILLI:
          /* ms Delay */
       	System_Rtos::delay(arg_int);
 8001438:	7abb      	ldrb	r3, [r7, #10]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fd12 	bl	8004e64 <_ZN11System_Rtos5delayEm>
          break;
 8001440:	e016      	b.n	8001470 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
      case U8X8_MSG_GPIO_CS:
          /* Insert codes for SS pin control */
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, (GPIO_PinState)arg_int);
 8001442:	7abb      	ldrb	r3, [r7, #10]
 8001444:	461a      	mov	r2, r3
 8001446:	2120      	movs	r1, #32
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 800144a:	f00a f925 	bl	800b698 <HAL_GPIO_WritePin>

          break;
 800144e:	e00f      	b.n	8001470 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
      case U8X8_MSG_GPIO_DC:
          /* Insert codes for DC pin control */
            HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, (GPIO_PinState)arg_int);
 8001450:	7abb      	ldrb	r3, [r7, #10]
 8001452:	461a      	mov	r2, r3
 8001454:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001458:	4808      	ldr	r0, [pc, #32]	@ (800147c <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 800145a:	f00a f91d 	bl	800b698 <HAL_GPIO_WritePin>

          break;
 800145e:	e007      	b.n	8001470 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
      case U8X8_MSG_GPIO_RESET:
          /* Insert codes for RST pin control */
           HAL_GPIO_WritePin(DISPLAY_RES_GPIO_Port, DISPLAY_RES_Pin,  (GPIO_PinState)arg_int);
 8001460:	7abb      	ldrb	r3, [r7, #10]
 8001462:	461a      	mov	r2, r3
 8001464:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 800146a:	f00a f915 	bl	800b698 <HAL_GPIO_WritePin>

          break;
 800146e:	bf00      	nop
      }
      return 1;
 8001470:	2301      	movs	r3, #1
  }
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020400 	.word	0x40020400

08001480 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	4613      	mov	r3, r2
 8001490:	72bb      	strb	r3, [r7, #10]
      switch(msg) {
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	3b14      	subs	r3, #20
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d844      	bhi.n	8001524 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa4>
 800149a:	a201      	add	r2, pc, #4	@ (adr r2, 80014a0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	08001529 	.word	0x08001529
 80014a4:	08001525 	.word	0x08001525
 80014a8:	08001525 	.word	0x08001525
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	080014f5 	.word	0x080014f5
 80014b4:	0800150d 	.word	0x0800150d
 80014b8:	08001525 	.word	0x08001525
 80014bc:	08001525 	.word	0x08001525
 80014c0:	08001525 	.word	0x08001525
 80014c4:	08001525 	.word	0x08001525
 80014c8:	08001525 	.word	0x08001525
 80014cc:	08001525 	.word	0x08001525
 80014d0:	080014e7 	.word	0x080014e7
      case U8X8_MSG_BYTE_SEND:
          /* Insert codes to transmit data */
          HAL_SPI_Transmit(&OLEDSpi,(uint8_t *)arg_ptr, arg_int, 5000);
 80014d4:	7abb      	ldrb	r3, [r7, #10]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4815      	ldr	r0, [pc, #84]	@ (8001534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb4>)
 80014e0:	f00c fb37 	bl	800db52 <HAL_SPI_Transmit>
           break;
 80014e4:	e021      	b.n	800152a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
          /* Insert codes to begin SPI transmission */

          break;
      case U8X8_MSG_BYTE_SET_DC:
          /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
          u8x8_gpio_SetDC(u8x8, arg_int);
 80014e6:	7abb      	ldrb	r3, [r7, #10]
 80014e8:	461a      	mov	r2, r3
 80014ea:	214a      	movs	r1, #74	@ 0x4a
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f007 fe15 	bl	800911c <u8x8_gpio_call>
          break;
 80014f2:	e01a      	b.n	800152a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_START_TRANSFER:
          /* Select slave, U8X8_MSG_GPIO_CS will be called */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2149      	movs	r1, #73	@ 0x49
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f007 fe0c 	bl	800911c <u8x8_gpio_call>
        	System_Rtos::delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f003 fcad 	bl	8004e64 <_ZN11System_Rtos5delayEm>

          break;
 800150a:	e00e      	b.n	800152a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_END_TRANSFER:
    	  	System_Rtos::delay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f003 fca9 	bl	8004e64 <_ZN11System_Rtos5delayEm>
          /* Insert codes to end SPI transmission */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	461a      	mov	r2, r3
 800151a:	2149      	movs	r1, #73	@ 0x49
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f007 fdfd 	bl	800911c <u8x8_gpio_call>
          break;
 8001522:	e002      	b.n	800152a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      default:
          return 0;
 8001524:	2300      	movs	r3, #0
 8001526:	e001      	b.n	800152c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
          break;
 8001528:	bf00      	nop
      }
      return 1;
 800152a:	2301      	movs	r3, #1
  }
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200022a4 	.word	0x200022a4

08001538 <_Z11DisplayTaskPv>:


void DisplayTask(void *pvParameters)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]

  u8g2_Setup_ssd1309_128x64_noname0_f(&u8g2_M, U8G2_R0, u8x8_byte_stm32_hw_spi,u8x8_stm32_gpio_and_delay);
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <_Z11DisplayTaskPv+0x64>)
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <_Z11DisplayTaskPv+0x68>)
 8001544:	4917      	ldr	r1, [pc, #92]	@ (80015a4 <_Z11DisplayTaskPv+0x6c>)
 8001546:	4818      	ldr	r0, [pc, #96]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 8001548:	f006 fa62 	bl	8007a10 <u8g2_Setup_ssd1309_128x64_noname0_f>
  u8g2_InitDisplay(&u8g2_M);
 800154c:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 800154e:	f007 fdb6 	bl	80090be <u8x8_InitDisplay>
  u8g2_ClearBuffer(&u8g2_M);
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 8001554:	f006 f9cb 	bl	80078ee <u8g2_ClearBuffer>
  u8g2_SetPowerSave(&u8g2_M, 0);
 8001558:	2100      	movs	r1, #0
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 800155c:	f007 fdbe 	bl	80090dc <u8x8_SetPowerSave>
  u8g2_DrawXBM(&u8g2_M,32,0,imgcont::smartgrid.w,imgcont::smartgrid.h,imgcont::smartgrid.img);
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <_Z11DisplayTaskPv+0x74>)
 8001562:	7919      	ldrb	r1, [r3, #4]
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <_Z11DisplayTaskPv+0x74>)
 8001566:	795b      	ldrb	r3, [r3, #5]
 8001568:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <_Z11DisplayTaskPv+0x74>)
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	9201      	str	r2, [sp, #4]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	460b      	mov	r3, r1
 8001572:	2200      	movs	r2, #0
 8001574:	2120      	movs	r1, #32
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 8001578:	f006 f940 	bl	80077fc <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2_M);
 800157c:	480a      	ldr	r0, [pc, #40]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 800157e:	f006 fa29 	bl	80079d4 <u8g2_SendBuffer>
  System_Rtos::delay(4000);
 8001582:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001586:	f003 fc6d 	bl	8004e64 <_ZN11System_Rtos5delayEm>


	while(1)
	{

		UI::loop(&u8g2_M);
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <_Z11DisplayTaskPv+0x70>)
 800158c:	f005 f944 	bl	8006818 <_ZN2UI4loopEP11u8g2_struct>
		System_Rtos::delay(500);
 8001590:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001594:	f003 fc66 	bl	8004e64 <_ZN11System_Rtos5delayEm>
		UI::loop(&u8g2_M);
 8001598:	bf00      	nop
 800159a:	e7f6      	b.n	800158a <_Z11DisplayTaskPv+0x52>
 800159c:	08001389 	.word	0x08001389
 80015a0:	08001481 	.word	0x08001481
 80015a4:	08016800 	.word	0x08016800
 80015a8:	2000058c 	.word	0x2000058c
 80015ac:	080167a8 	.word	0x080167a8

080015b0 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f011 ff62 	bl	8013486 <strstr>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_Z15getModemNetworkv>:


char command_buffer[255] = {0};

char *getModemNetwork()
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ModemData.networkStat;
 80015d0:	4b02      	ldr	r3, [pc, #8]	@ (80015dc <_Z15getModemNetworkv+0x10>)
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	2000164b 	.word	0x2000164b

080015e0 <_Z16getSignalQualityv>:
char *getSignalQuality()
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ModemData.quality;
 80015e4:	4b02      	ldr	r3, [pc, #8]	@ (80015f0 <_Z16getSignalQualityv+0x10>)
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	20001669 	.word	0x20001669

080015f4 <_Z12getModemDatav>:
char *getModemData()
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
	char data[20];

	if(ModemData.internet == 1)
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <_Z12getModemDatav+0x44>)
 80015fc:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <_Z12getModemDatav+0x20>
	{
       std::strcpy(data, "Conn");
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <_Z12getModemDatav+0x48>)
 8001608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160c:	6018      	str	r0, [r3, #0]
 800160e:	3304      	adds	r3, #4
 8001610:	7019      	strb	r1, [r3, #0]
 8001612:	e009      	b.n	8001628 <_Z12getModemDatav+0x34>
	}
	else
	{
		 std::strcpy(data, "DisCon");
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <_Z12getModemDatav+0x4c>)
 8001618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161c:	6018      	str	r0, [r3, #0]
 800161e:	3304      	adds	r3, #4
 8001620:	8019      	strh	r1, [r3, #0]
 8001622:	3302      	adds	r3, #2
 8001624:	0c0a      	lsrs	r2, r1, #16
 8001626:	701a      	strb	r2, [r3, #0]
	}

	return data;
 8001628:	2300      	movs	r3, #0

}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000163c 	.word	0x2000163c
 800163c:	08015708 	.word	0x08015708
 8001640:	08015710 	.word	0x08015710

08001644 <_Z9ModemTaskPv>:

void ModemTask(void *pvParameters) {
 8001644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001648:	b0e7      	sub	sp, #412	@ 0x19c
 800164a:	af22      	add	r7, sp, #136	@ 0x88
 800164c:	65f8      	str	r0, [r7, #92]	@ 0x5c

	simA7672.init();
 800164e:	48be      	ldr	r0, [pc, #760]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001650:	f000 fd3a 	bl	80020c8 <_ZN5Modem8simA76724initEv>



	struct ControlData_Queue ControlData = {0};
 8001654:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001658:	22a4      	movs	r2, #164	@ 0xa4
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f011 feea 	bl	8013436 <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	enum routine mqtt_routine = net_enable;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 8001674:	4bb5      	ldr	r3, [pc, #724]	@ (800194c <_Z9ModemTaskPv+0x308>)
 8001676:	4ab6      	ldr	r2, [pc, #728]	@ (8001950 <_Z9ModemTaskPv+0x30c>)
 8001678:	4614      	mov	r4, r2
 800167a:	469c      	mov	ip, r3
 800167c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001680:	4665      	mov	r5, ip
 8001682:	4626      	mov	r6, r4
 8001684:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001686:	6028      	str	r0, [r5, #0]
 8001688:	6069      	str	r1, [r5, #4]
 800168a:	60aa      	str	r2, [r5, #8]
 800168c:	60eb      	str	r3, [r5, #12]
 800168e:	3410      	adds	r4, #16
 8001690:	f10c 0c10 	add.w	ip, ip, #16
 8001694:	4574      	cmp	r4, lr
 8001696:	d1f3      	bne.n	8001680 <_Z9ModemTaskPv+0x3c>
 8001698:	4662      	mov	r2, ip
 800169a:	4623      	mov	r3, r4
 800169c:	cb03      	ldmia	r3!, {r0, r1}
 800169e:	6010      	str	r0, [r2, #0]
 80016a0:	6051      	str	r1, [r2, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 80016a6:	4aab      	ldr	r2, [pc, #684]	@ (8001954 <_Z9ModemTaskPv+0x310>)
 80016a8:	4bab      	ldr	r3, [pc, #684]	@ (8001958 <_Z9ModemTaskPv+0x314>)
 80016aa:	4614      	mov	r4, r2
 80016ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80016ae:	6020      	str	r0, [r4, #0]
 80016b0:	6061      	str	r1, [r4, #4]
 80016b2:	60a2      	str	r2, [r4, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 80016b8:	4ba8      	ldr	r3, [pc, #672]	@ (800195c <_Z9ModemTaskPv+0x318>)
 80016ba:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <_Z9ModemTaskPv+0x31c>)
 80016bc:	6810      	ldr	r0, [r2, #0]
 80016be:	6018      	str	r0, [r3, #0]
 80016c0:	8892      	ldrh	r2, [r2, #4]
 80016c2:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 80016c4:	4aa7      	ldr	r2, [pc, #668]	@ (8001964 <_Z9ModemTaskPv+0x320>)
 80016c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001968 <_Z9ModemTaskPv+0x324>)
 80016c8:	cb03      	ldmia	r3!, {r0, r1}
 80016ca:	6010      	str	r0, [r2, #0]
 80016cc:	6051      	str	r1, [r2, #4]
 80016ce:	8819      	ldrh	r1, [r3, #0]
 80016d0:	789b      	ldrb	r3, [r3, #2]
 80016d2:	8111      	strh	r1, [r2, #8]
 80016d4:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 80016dc:	49a3      	ldr	r1, [pc, #652]	@ (800196c <_Z9ModemTaskPv+0x328>)
 80016de:	489a      	ldr	r0, [pc, #616]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80016e0:	f000 fede 	bl	80024a0 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 80016e4:	49a2      	ldr	r1, [pc, #648]	@ (8001970 <_Z9ModemTaskPv+0x32c>)
 80016e6:	4898      	ldr	r0, [pc, #608]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80016e8:	f000 ff44 	bl	8002574 <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 80016ec:	49a1      	ldr	r1, [pc, #644]	@ (8001974 <_Z9ModemTaskPv+0x330>)
 80016ee:	4896      	ldr	r0, [pc, #600]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80016f0:	f001 f826 	bl	8002740 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 80016f4:	49a0      	ldr	r1, [pc, #640]	@ (8001978 <_Z9ModemTaskPv+0x334>)
 80016f6:	4894      	ldr	r0, [pc, #592]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80016f8:	f001 fa16 	bl	8002b28 <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 80016fc:	f107 0363 	add.w	r3, r7, #99	@ 0x63
 8001700:	4619      	mov	r1, r3
 8001702:	4891      	ldr	r0, [pc, #580]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001704:	f001 f960 	bl	80029c8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 8001708:	f107 0362 	add.w	r3, r7, #98	@ 0x62
 800170c:	4619      	mov	r1, r3
 800170e:	488e      	ldr	r0, [pc, #568]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001710:	f001 f8ee 	bl	80028f0 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 8001714:	4995      	ldr	r1, [pc, #596]	@ (800196c <_Z9ModemTaskPv+0x328>)
 8001716:	4899      	ldr	r0, [pc, #612]	@ (800197c <_Z9ModemTaskPv+0x338>)
 8001718:	f003 fc2c 	bl	8004f74 <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 800171c:	2032      	movs	r0, #50	@ 0x32
 800171e:	f003 fba1 	bl	8004e64 <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001722:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001726:	4619      	mov	r1, r3
 8001728:	4895      	ldr	r0, [pc, #596]	@ (8001980 <_Z9ModemTaskPv+0x33c>)
 800172a:	f003 fc40 	bl	8004fae <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001732:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001736:	2b03      	cmp	r3, #3
 8001738:	f200 8219 	bhi.w	8001b6e <_Z9ModemTaskPv+0x52a>
 800173c:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <_Z9ModemTaskPv+0x100>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	0800181d 	.word	0x0800181d
 800174c:	080018f7 	.word	0x080018f7
 8001750:	08001995 	.word	0x08001995

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001754:	498b      	ldr	r1, [pc, #556]	@ (8001984 <_Z9ModemTaskPv+0x340>)
 8001756:	4886      	ldr	r0, [pc, #536]	@ (8001970 <_Z9ModemTaskPv+0x32c>)
 8001758:	f7ff ff2a 	bl	80015b0 <_ZSt6strstrPcPKc>
 800175c:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <_Z9ModemTaskPv+0x12c>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001762:	4989      	ldr	r1, [pc, #548]	@ (8001988 <_Z9ModemTaskPv+0x344>)
 8001764:	4882      	ldr	r0, [pc, #520]	@ (8001970 <_Z9ModemTaskPv+0x32c>)
 8001766:	f7ff ff23 	bl	80015b0 <_ZSt6strstrPcPKc>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <_Z9ModemTaskPv+0x154>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001770:	4984      	ldr	r1, [pc, #528]	@ (8001984 <_Z9ModemTaskPv+0x340>)
 8001772:	4880      	ldr	r0, [pc, #512]	@ (8001974 <_Z9ModemTaskPv+0x330>)
 8001774:	f7ff ff1c 	bl	80015b0 <_ZSt6strstrPcPKc>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <_Z9ModemTaskPv+0x148>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 800177e:	4982      	ldr	r1, [pc, #520]	@ (8001988 <_Z9ModemTaskPv+0x344>)
 8001780:	487c      	ldr	r0, [pc, #496]	@ (8001974 <_Z9ModemTaskPv+0x330>)
 8001782:	f7ff ff15 	bl	80015b0 <_ZSt6strstrPcPKc>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <_Z9ModemTaskPv+0x154>
					&& cpsiInfo != Modem::simA7672::no_service) {
 800178c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <_Z9ModemTaskPv+0x154>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <_Z9ModemTaskPv+0x156>
 8001798:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 81e9 	beq.w	8001b72 <_Z9ModemTaskPv+0x52e>


				modeminfo = simA7672.setAPN(ModemData.apn);
 80017a0:	496c      	ldr	r1, [pc, #432]	@ (8001954 <_Z9ModemTaskPv+0x310>)
 80017a2:	4869      	ldr	r0, [pc, #420]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017a4:	f000 fdd0 	bl	8002348 <_ZN5Modem8simA76726setAPNEPc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

				simA7672.sslversionset();
 80017ae:	4866      	ldr	r0, [pc, #408]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017b0:	f001 ff22 	bl	80035f8 <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 80017b4:	4864      	ldr	r0, [pc, #400]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017b6:	f001 ff5b 	bl	8003670 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 80017ba:	4863      	ldr	r0, [pc, #396]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017bc:	f001 ff94 	bl	80036e8 <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 80017c0:	4861      	ldr	r0, [pc, #388]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017c2:	f001 ffcd 	bl	8003760 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 80017c6:	4860      	ldr	r0, [pc, #384]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017c8:	f002 f806 	bl	80037d8 <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 80017cc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 81ce 	bne.w	8001b72 <_Z9ModemTaskPv+0x52e>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 80017d6:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d109      	bne.n	80017f2 <_Z9ModemTaskPv+0x1ae>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80017de:	4b63      	ldr	r3, [pc, #396]	@ (800196c <_Z9ModemTaskPv+0x328>)
 80017e0:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 80017e4:	4619      	mov	r1, r3
 80017e6:	4858      	ldr	r0, [pc, #352]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80017e8:	f001 fcb8 	bl	800315c <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 80017f2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <_Z9ModemTaskPv+0x1d0>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 80017fa:	4b5c      	ldr	r3, [pc, #368]	@ (800196c <_Z9ModemTaskPv+0x328>)
 80017fc:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001800:	4619      	mov	r1, r3
 8001802:	4851      	ldr	r0, [pc, #324]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001804:	f001 fbd0 	bl	8002fa8 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001808:	484f      	ldr	r0, [pc, #316]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 800180a:	f001 fb05 	bl	8002e18 <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
					}

					mqtt_routine = mqtt_enable;
 8001814:	2301      	movs	r3, #1
 8001816:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d

				}

			}

			break;
 800181a:	e1aa      	b.n	8001b72 <_Z9ModemTaskPv+0x52e>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 800181c:	4959      	ldr	r1, [pc, #356]	@ (8001984 <_Z9ModemTaskPv+0x340>)
 800181e:	4854      	ldr	r0, [pc, #336]	@ (8001970 <_Z9ModemTaskPv+0x32c>)
 8001820:	f7ff fec6 	bl	80015b0 <_ZSt6strstrPcPKc>
 8001824:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <_Z9ModemTaskPv+0x1f4>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 800182a:	4957      	ldr	r1, [pc, #348]	@ (8001988 <_Z9ModemTaskPv+0x344>)
 800182c:	4850      	ldr	r0, [pc, #320]	@ (8001970 <_Z9ModemTaskPv+0x32c>)
 800182e:	f7ff febf 	bl	80015b0 <_ZSt6strstrPcPKc>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d017      	beq.n	8001868 <_Z9ModemTaskPv+0x224>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001838:	4952      	ldr	r1, [pc, #328]	@ (8001984 <_Z9ModemTaskPv+0x340>)
 800183a:	484e      	ldr	r0, [pc, #312]	@ (8001974 <_Z9ModemTaskPv+0x330>)
 800183c:	f7ff feb8 	bl	80015b0 <_ZSt6strstrPcPKc>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <_Z9ModemTaskPv+0x210>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001846:	4950      	ldr	r1, [pc, #320]	@ (8001988 <_Z9ModemTaskPv+0x344>)
 8001848:	484a      	ldr	r0, [pc, #296]	@ (8001974 <_Z9ModemTaskPv+0x330>)
 800184a:	f7ff feb1 	bl	80015b0 <_ZSt6strstrPcPKc>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <_Z9ModemTaskPv+0x224>
					&& cpsiInfo != Modem::simA7672::no_service
 8001854:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <_Z9ModemTaskPv+0x224>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 800185c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <_Z9ModemTaskPv+0x224>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <_Z9ModemTaskPv+0x226>
 8001868:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8183 	beq.w	8001b76 <_Z9ModemTaskPv+0x532>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 8001870:	2100      	movs	r1, #0
 8001872:	4835      	ldr	r0, [pc, #212]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001874:	f000 fdc0 	bl	80023f8 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 8001878:	2101      	movs	r1, #1
 800187a:	4833      	ldr	r0, [pc, #204]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 800187c:	f000 fdbc 	bl	80023f8 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 8001880:	4942      	ldr	r1, [pc, #264]	@ (800198c <_Z9ModemTaskPv+0x348>)
 8001882:	4831      	ldr	r0, [pc, #196]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001884:	f001 fa58 	bl	8002d38 <_ZN5Modem8simA76729mqttStartEPh>
 8001888:	4603      	mov	r3, r0
 800188a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 800188e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001892:	2b00      	cmp	r3, #0
 8001894:	d124      	bne.n	80018e0 <_Z9ModemTaskPv+0x29c>

					mqttstartinfo = simA7672.mqttSetClient(
 8001896:	4b35      	ldr	r3, [pc, #212]	@ (800196c <_Z9ModemTaskPv+0x328>)
 8001898:	f893 10d8 	ldrb.w	r1, [r3, #216]	@ 0xd8
 800189c:	2301      	movs	r3, #1
 800189e:	4a3c      	ldr	r2, [pc, #240]	@ (8001990 <_Z9ModemTaskPv+0x34c>)
 80018a0:	4829      	ldr	r0, [pc, #164]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80018a2:	f001 fb1f 	bl	8002ee4 <_ZN5Modem8simA767213mqttSetClientEhPch>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 80018ac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <_Z9ModemTaskPv+0x286>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <_Z9ModemTaskPv+0x328>)
 80018b6:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 80018ba:	4619      	mov	r1, r3
 80018bc:	4822      	ldr	r0, [pc, #136]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80018be:	f001 fe3f 	bl	8003540 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 80018c2:	2302      	movs	r3, #2
 80018c4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
					simA7672.mqttStop();
				}

			}

			break;
 80018c8:	e155      	b.n	8001b76 <_Z9ModemTaskPv+0x532>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 80018ca:	4b28      	ldr	r3, [pc, #160]	@ (800196c <_Z9ModemTaskPv+0x328>)
 80018cc:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 80018d0:	4619      	mov	r1, r3
 80018d2:	481d      	ldr	r0, [pc, #116]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80018d4:	f001 fb68 	bl	8002fa8 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 80018d8:	481b      	ldr	r0, [pc, #108]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80018da:	f001 fa9d 	bl	8002e18 <_ZN5Modem8simA76728mqttStopEv>
			break;
 80018de:	e14a      	b.n	8001b76 <_Z9ModemTaskPv+0x532>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 80018e0:	4b22      	ldr	r3, [pc, #136]	@ (800196c <_Z9ModemTaskPv+0x328>)
 80018e2:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4817      	ldr	r0, [pc, #92]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80018ea:	f001 fb5d 	bl	8002fa8 <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 80018ee:	4816      	ldr	r0, [pc, #88]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 80018f0:	f001 fa92 	bl	8002e18 <_ZN5Modem8simA76728mqttStopEv>
			break;
 80018f4:	e13f      	b.n	8001b76 <_Z9ModemTaskPv+0x532>
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 80018f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 813d 	bne.w	8001b7a <_Z9ModemTaskPv+0x536>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 8001900:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001904:	2b02      	cmp	r3, #2
 8001906:	f000 8138 	beq.w	8001b7a <_Z9ModemTaskPv+0x536>

				mqttserverinfo = simA7672.mqttConnectServer(
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <_Z9ModemTaskPv+0x328>)
 800190c:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001910:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <_Z9ModemTaskPv+0x308>)
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 8001916:	f001 fba3 	bl	8003060 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001920:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001924:	2b02      	cmp	r3, #2
 8001926:	d103      	bne.n	8001930 <_Z9ModemTaskPv+0x2ec>

					mqtt_routine = mqtt_loop;
 8001928:	2303      	movs	r3, #3
 800192a:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
					mqtt_routine = net_enable;
				}

			}

			break;
 800192e:	e124      	b.n	8001b7a <_Z9ModemTaskPv+0x536>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <_Z9ModemTaskPv+0x328>)
 8001932:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001936:	4619      	mov	r1, r3
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <_Z9ModemTaskPv+0x304>)
 800193a:	f001 fc0f 	bl	800315c <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
			break;
 8001944:	e119      	b.n	8001b7a <_Z9ModemTaskPv+0x536>
 8001946:	bf00      	nop
 8001948:	2000060c 	.word	0x2000060c
 800194c:	20001687 	.word	0x20001687
 8001950:	08015718 	.word	0x08015718
 8001954:	20001673 	.word	0x20001673
 8001958:	08015754 	.word	0x08015754
 800195c:	200016ff 	.word	0x200016ff
 8001960:	08015764 	.word	0x08015764
 8001964:	200016eb 	.word	0x200016eb
 8001968:	0801576c 	.word	0x0801576c
 800196c:	2000163c 	.word	0x2000163c
 8001970:	2000164b 	.word	0x2000164b
 8001974:	2000165a 	.word	0x2000165a
 8001978:	20001669 	.word	0x20001669
 800197c:	20001970 	.word	0x20001970
 8001980:	20001a70 	.word	0x20001a70
 8001984:	08015ff0 	.word	0x08015ff0
 8001988:	08015ffc 	.word	0x08015ffc
 800198c:	20001714 	.word	0x20001714
 8001990:	08015778 	.word	0x08015778
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 8001994:	497d      	ldr	r1, [pc, #500]	@ (8001b8c <_Z9ModemTaskPv+0x548>)
 8001996:	487e      	ldr	r0, [pc, #504]	@ (8001b90 <_Z9ModemTaskPv+0x54c>)
 8001998:	f001 f956 	bl	8002c48 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
			mqtt_counter++;
 80019a2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80019a6:	3301      	adds	r3, #1
 80019a8:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 80019ac:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d012      	beq.n	80019da <_Z9ModemTaskPv+0x396>
 80019b4:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d90e      	bls.n	80019da <_Z9ModemTaskPv+0x396>
				ModemData.internet = 0;
 80019bc:	4b75      	ldr	r3, [pc, #468]	@ (8001b94 <_Z9ModemTaskPv+0x550>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80019c4:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <_Z9ModemTaskPv+0x550>)
 80019c6:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 80019ca:	4619      	mov	r1, r3
 80019cc:	4870      	ldr	r0, [pc, #448]	@ (8001b90 <_Z9ModemTaskPv+0x54c>)
 80019ce:	f001 fbc5 	bl	800315c <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 80019d8:	e0d1      	b.n	8001b7e <_Z9ModemTaskPv+0x53a>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 80019da:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80019de:	2b02      	cmp	r3, #2
 80019e0:	f040 80cd 	bne.w	8001b7e <_Z9ModemTaskPv+0x53a>
				ModemData.internet = 1;
 80019e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b94 <_Z9ModemTaskPv+0x550>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
				mqtt_counter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019f4:	65bb      	str	r3, [r7, #88]	@ 0x58
						 ,ControlData.V_1
 80019f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fda5 	bl	8000548 <__aeabi_f2d>
 80019fe:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						 ,ControlData.V_2
 8001a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd9f 	bl	8000548 <__aeabi_f2d>
 8001a0a:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						 ,ControlData.V_3
 8001a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd98 	bl	8000548 <__aeabi_f2d>
 8001a18:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						 ,ControlData.I_1
 8001a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd91 	bl	8000548 <__aeabi_f2d>
 8001a26:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						 ,ControlData.I_2
 8001a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd8a 	bl	8000548 <__aeabi_f2d>
 8001a34:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						 ,ControlData.I_3
 8001a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd83 	bl	8000548 <__aeabi_f2d>
 8001a42:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						 ,ControlData.P_1
 8001a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	e9c7 0108 	strd	r0, r1, [r7, #32]
						 ,ControlData.P_2
 8001a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd75 	bl	8000548 <__aeabi_f2d>
 8001a5e:	e9c7 0106 	strd	r0, r1, [r7, #24]
						 ,ControlData.P_3
 8001a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd6e 	bl	8000548 <__aeabi_f2d>
 8001a6c:	e9c7 0104 	strd	r0, r1, [r7, #16]
						 ,ControlData.Energy
 8001a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd67 	bl	8000548 <__aeabi_f2d>
 8001a7a:	4682      	mov	sl, r0
 8001a7c:	468b      	mov	fp, r1
						 ,ControlData.Freq
 8001a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd60 	bl	8000548 <__aeabi_f2d>
 8001a88:	4680      	mov	r8, r0
 8001a8a:	4689      	mov	r9, r1
						 ,ControlData.SelectedSource
 8001a8c:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a90:	60fb      	str	r3, [r7, #12]
						 ,ControlData.fuelPer
 8001a92:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a96:	60bb      	str	r3, [r7, #8]
						 ,ControlData.fuelConsp
 8001a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd53 	bl	8000548 <__aeabi_f2d>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	f8d7 60e0 	ldr.w	r6, [r7, #224]	@ 0xe0
 8001ab6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001aba:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8001abe:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ac6:	f107 0c64 	add.w	ip, r7, #100	@ 0x64
 8001aca:	9320      	str	r3, [sp, #128]	@ 0x80
 8001acc:	921f      	str	r2, [sp, #124]	@ 0x7c
 8001ace:	911e      	str	r1, [sp, #120]	@ 0x78
 8001ad0:	901d      	str	r0, [sp, #116]	@ 0x74
 8001ad2:	961c      	str	r6, [sp, #112]	@ 0x70
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	911b      	str	r1, [sp, #108]	@ 0x6c
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	921a      	str	r2, [sp, #104]	@ 0x68
 8001adc:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	9217      	str	r2, [sp, #92]	@ 0x5c
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	9216      	str	r2, [sp, #88]	@ 0x58
 8001ae8:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 8001aec:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 8001af0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001af4:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8001af8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001afc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001b00:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b04:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001b08:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001b0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001b10:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001b14:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001b18:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001b1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b20:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001b24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b28:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001b2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b30:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001b34:	ed8d 7b00 	vstr	d7, [sp]
 8001b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b3a:	4662      	mov	r2, ip
 8001b3c:	4916      	ldr	r1, [pc, #88]	@ (8001b98 <_Z9ModemTaskPv+0x554>)
 8001b3e:	4817      	ldr	r0, [pc, #92]	@ (8001b9c <_Z9ModemTaskPv+0x558>)
 8001b40:	f011 fc16 	bl	8013370 <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_Z9ModemTaskPv+0x550>)
 8001b46:	f893 10d8 	ldrb.w	r1, [r3, #216]	@ 0xd8
 8001b4a:	23ff      	movs	r3, #255	@ 0xff
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <_Z9ModemTaskPv+0x55c>)
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_Z9ModemTaskPv+0x560>)
 8001b52:	480f      	ldr	r0, [pc, #60]	@ (8001b90 <_Z9ModemTaskPv+0x54c>)
 8001b54:	f001 fb7e 	bl	8003254 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <_Z9ModemTaskPv+0x550>)
 8001b5e:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001b62:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <_Z9ModemTaskPv+0x560>)
 8001b64:	4619      	mov	r1, r3
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <_Z9ModemTaskPv+0x54c>)
 8001b68:	f001 fc30 	bl	80033cc <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 8001b6c:	e007      	b.n	8001b7e <_Z9ModemTaskPv+0x53a>
		}

		default:
			break;
 8001b6e:	bf00      	nop
 8001b70:	e006      	b.n	8001b80 <_Z9ModemTaskPv+0x53c>
			break;
 8001b72:	bf00      	nop
 8001b74:	e004      	b.n	8001b80 <_Z9ModemTaskPv+0x53c>
			break;
 8001b76:	bf00      	nop
 8001b78:	e002      	b.n	8001b80 <_Z9ModemTaskPv+0x53c>
			break;
 8001b7a:	bf00      	nop
 8001b7c:	e000      	b.n	8001b80 <_Z9ModemTaskPv+0x53c>
			break;
 8001b7e:	bf00      	nop

		}



		System_Rtos::delay(1000);
 8001b80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b84:	f003 f96e 	bl	8004e64 <_ZN11System_Rtos5delayEm>
		simA7672.getSim(ModemData.pin);
 8001b88:	e5a8      	b.n	80016dc <_Z9ModemTaskPv+0x98>
 8001b8a:	bf00      	nop
 8001b8c:	20001687 	.word	0x20001687
 8001b90:	2000060c 	.word	0x2000060c
 8001b94:	2000163c 	.word	0x2000163c
 8001b98:	08015780 	.word	0x08015780
 8001b9c:	20000e0c 	.word	0x20000e0c
 8001ba0:	20001718 	.word	0x20001718
 8001ba4:	200016ff 	.word	0x200016ff

08001ba8 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d103      	bne.n	8001bca <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_U);
 8001bc2:	4904      	ldr	r1, [pc, #16]	@ (8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001bc4:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001bc6:	f000 fa1b 	bl	8002000 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20002420 	.word	0x20002420
 8001bd8:	2000060c 	.word	0x2000060c

08001bdc <_GLOBAL__sub_I_simA7672>:
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff ffdf 	bl	8001ba8 <_Z41__static_initialization_and_destruction_0ii>
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZN8UniqueID12CharToHexascEPhh>:
const char kaHexAsc[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
		'A', 'B', 'C', 'D', 'E', 'F' };

#define Address_Mem 0x080E0000

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert) {
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
	*pPos++ = kaHexAsc[Wert >> 4];
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 8001c02:	5c99      	ldrb	r1, [r3, r2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	*pPos = kaHexAsc[Wert & 0x0f];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 8001c16:	5cd2      	ldrb	r2, [r2, r3]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	701a      	strb	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	08016008 	.word	0x08016008

08001c2c <_ZN8UniqueID6GetUidEv>:

char* UniqueID::GetUid() {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001c32:	f008 fb89 	bl	800a348 <HAL_GetUIDw1>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001c3c:	f008 fb84 	bl	800a348 <HAL_GetUIDw1>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001c48:	4c1c      	ldr	r4, [pc, #112]	@ (8001cbc <_ZN8UniqueID6GetUidEv+0x90>)
 8001c4a:	f008 fb89 	bl	800a360 <HAL_GetUIDw2>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b23      	cmp	r3, #35	@ 0x23
 8001c56:	d909      	bls.n	8001c6c <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b3d      	cmp	r3, #61	@ 0x3d
 8001c5c:	bf28      	it	cs
 8001c5e:	233d      	movcs	r3, #61	@ 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	333d      	adds	r3, #61	@ 0x3d
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001c68:	71da      	strb	r2, [r3, #7]
 8001c6a:	e00b      	b.n	8001c84 <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	d901      	bls.n	8001c76 <_ZN8UniqueID6GetUidEv+0x4a>
 8001c72:	2241      	movs	r2, #65	@ 0x41
 8001c74:	e000      	b.n	8001c78 <_ZN8UniqueID6GetUidEv+0x4c>
 8001c76:	2230      	movs	r2, #48	@ 0x30
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001c82:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001c84:	f008 fb54 	bl	800a330 <HAL_GetUIDw0>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <_ZN8UniqueID6GetUidEv+0x94>)
 8001c92:	f7ff ffab 	bl	8001bec <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001c96:	f008 fb4b 	bl	800a330 <HAL_GetUIDw0>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4808      	ldr	r0, [pc, #32]	@ (8001cc4 <_ZN8UniqueID6GetUidEv+0x98>)
 8001ca2:	f7ff ffa3 	bl	8001bec <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001cac:	4b02      	ldr	r3, [pc, #8]	@ (8001cb8 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20001bc8 	.word	0x20001bc8
 8001cbc:	20001bcb 	.word	0x20001bcb
 8001cc0:	20001bd0 	.word	0x20001bd0
 8001cc4:	20001bd2 	.word	0x20001bd2

08001cc8 <_Z8SaveDatav>:

void SaveData() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0

	if (FlashSemaphore.semaphoreTake(10000)
 8001cce:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001cd2:	4835      	ldr	r0, [pc, #212]	@ (8001da8 <_Z8SaveDatav+0xe0>)
 8001cd4:	f003 f9a2 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8001cd8:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
	if (FlashSemaphore.semaphoreTake(10000)
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d05b      	beq.n	8001da0 <_Z8SaveDatav+0xd8>

		taskENTER_CRITICAL();
 8001ce8:	f010 fa8e 	bl	8012208 <vPortEnterCritical>

		uint32_t ZielAdr;
		uint32_t WrAdr;
		uint32_t QuellAdr = (uint32_t) &flash_data_;
 8001cec:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <_Z8SaveDatav+0xe4>)
 8001cee:	60bb      	str	r3, [r7, #8]
		static FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SECTORError;

		HAL_FLASH_Unlock();
 8001cf0:	f009 f89a 	bl	800ae28 <HAL_FLASH_Unlock>
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8001db0 <_Z8SaveDatav+0xe8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	60da      	str	r2, [r3, #12]
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <_Z8SaveDatav+0xe8>)
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	60da      	str	r2, [r3, #12]
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001d00:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <_Z8SaveDatav+0xe8>)
 8001d02:	2210      	movs	r2, #16
 8001d04:	60da      	str	r2, [r3, #12]
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001d06:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <_Z8SaveDatav+0xe8>)
 8001d08:	2220      	movs	r2, #32
 8001d0a:	60da      	str	r2, [r3, #12]
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d0c:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <_Z8SaveDatav+0xe8>)
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	60da      	str	r2, [r3, #12]
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d12:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <_Z8SaveDatav+0xe8>)
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	60da      	str	r2, [r3, #12]

		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <_Z8SaveDatav+0xec>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <_Z8SaveDatav+0xec>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	611a      	str	r2, [r3, #16]
		EraseInitStruct.Sector = FLASH_SECTOR_11;
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <_Z8SaveDatav+0xec>)
 8001d26:	220b      	movs	r2, #11
 8001d28:	609a      	str	r2, [r3, #8]
		EraseInitStruct.NbSectors = 1;
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <_Z8SaveDatav+0xec>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8001d30:	463b      	mov	r3, r7
 8001d32:	4619      	mov	r1, r3
 8001d34:	481f      	ldr	r0, [pc, #124]	@ (8001db4 <_Z8SaveDatav+0xec>)
 8001d36:	f009 f9d9 	bl	800b0ec <HAL_FLASHEx_Erase>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d129      	bne.n	8001d9e <_Z8SaveDatav+0xd6>
			return;
		}

//  Par-Flash schreiben

		ZielAdr = Address_Mem + sizeof(struct flash_data);
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <_Z8SaveDatav+0xf0>)
 8001d4c:	607b      	str	r3, [r7, #4]
		WrAdr = Address_Mem; // Pointer on 1st entry
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <_Z8SaveDatav+0xf4>)
 8001d50:	60fb      	str	r3, [r7, #12]

		while (WrAdr < ZielAdr) {
 8001d52:	e018      	b.n	8001d86 <_Z8SaveDatav+0xbe>

			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	68f9      	ldr	r1, [r7, #12]
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f009 f80f 	bl	800ad80 <HAL_FLASH_Program>
 8001d62:	4603      	mov	r3, r0
					*(uint64_t*) QuellAdr) == HAL_OK)
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <_Z8SaveDatav+0xb8>

			{
				WrAdr += 4;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3304      	adds	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
				QuellAdr += 4;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	e002      	b.n	8001d86 <_Z8SaveDatav+0xbe>

			} else {

				HAL_FLASH_Lock();
 8001d80:	f009 f874 	bl	800ae6c <HAL_FLASH_Lock>
				return;
 8001d84:	e00c      	b.n	8001da0 <_Z8SaveDatav+0xd8>
		while (WrAdr < ZielAdr) {
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3e2      	bcc.n	8001d54 <_Z8SaveDatav+0x8c>

			}

		}
		HAL_FLASH_Lock();
 8001d8e:	f009 f86d 	bl	800ae6c <HAL_FLASH_Lock>

		taskEXIT_CRITICAL();
 8001d92:	f010 fa6b 	bl	801226c <vPortExitCritical>

		FlashSemaphore.semaphoreGive();
 8001d96:	4804      	ldr	r0, [pc, #16]	@ (8001da8 <_Z8SaveDatav+0xe0>)
 8001d98:	f003 f968 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8001d9c:	e000      	b.n	8001da0 <_Z8SaveDatav+0xd8>
			return;
 8001d9e:	bf00      	nop

	}

}
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20001acc 	.word	0x20001acc
 8001dac:	20001818 	.word	0x20001818
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	20001bd8 	.word	0x20001bd8
 8001db8:	080e000f 	.word	0x080e000f
 8001dbc:	080e0000 	.word	0x080e0000

08001dc0 <_Z11getSaveDatav>:

void getSaveData() {
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

	uint8_t save = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]

	struct flash_data *pFlashData;

	pFlashData = (struct flash_data *) Address_Mem;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <_Z11getSaveDatav+0x74>)
 8001dcc:	603b      	str	r3, [r7, #0]



	if(pFlashData->validPattern != 0xFEED)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f64f 62ed 	movw	r2, #65261	@ 0xfeed
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <_Z11getSaveDatav+0x52>
	{
		flash_data_.validPattern =  0xFEED;
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <_Z11getSaveDatav+0x78>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	f062 0212 	orn	r2, r2, #18
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f062 0201 	orn	r2, r2, #1
 8001dee:	709a      	strb	r2, [r3, #2]
		flash_data_.zeroSpan     =  0;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <_Z11getSaveDatav+0x78>)
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f8c3 2003 	str.w	r2, [r3, #3]
		flash_data_.fullSpan     =  5;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <_Z11getSaveDatav+0x78>)
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <_Z11getSaveDatav+0x7c>)
 8001dfe:	f8c3 2007 	str.w	r2, [r3, #7]
		flash_data_.SOC          =  100;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <_Z11getSaveDatav+0x78>)
 8001e04:	4a0e      	ldr	r2, [pc, #56]	@ (8001e40 <_Z11getSaveDatav+0x80>)
 8001e06:	f8c3 200b 	str.w	r2, [r3, #11]
		flash_data_.zone         =  +5;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <_Z11getSaveDatav+0x78>)
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	701a      	strb	r2, [r3, #0]





}
 8001e10:	e00b      	b.n	8001e2a <_Z11getSaveDatav+0x6a>
		std::memcpy(&flash_data_,pFlashData, sizeof(struct flash_data));
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <_Z11getSaveDatav+0x78>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4614      	mov	r4, r2
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	6861      	ldr	r1, [r4, #4]
 8001e1c:	68a2      	ldr	r2, [r4, #8]
 8001e1e:	c307      	stmia	r3!, {r0, r1, r2}
 8001e20:	89a2      	ldrh	r2, [r4, #12]
 8001e22:	7ba1      	ldrb	r1, [r4, #14]
 8001e24:	801a      	strh	r2, [r3, #0]
 8001e26:	460a      	mov	r2, r1
 8001e28:	709a      	strb	r2, [r3, #2]
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc90      	pop	{r4, r7}
 8001e32:	4770      	bx	lr
 8001e34:	080e0000 	.word	0x080e0000
 8001e38:	20001818 	.word	0x20001818
 8001e3c:	40a00000 	.word	0x40a00000
 8001e40:	42c80000 	.word	0x42c80000

08001e44 <_Z11app_mainCppv>:

void app_mainCpp() {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8001e48:	480a      	ldr	r0, [pc, #40]	@ (8001e74 <_Z11app_mainCppv+0x30>)
 8001e4a:	f003 f842 	bl	8004ed2 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
	ControlTaskHandler.createTask();
 8001e4e:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <_Z11app_mainCppv+0x34>)
 8001e50:	f003 f83f 	bl	8004ed2 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
	DisplayTaskHandler.createTask();
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <_Z11app_mainCppv+0x38>)
 8001e56:	f003 f83c 	bl	8004ed2 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
	//SoCTaskHandler.createTask();

	ModemDataQueue.queueCreate();
 8001e5a:	4809      	ldr	r0, [pc, #36]	@ (8001e80 <_Z11app_mainCppv+0x3c>)
 8001e5c:	f003 f86e 	bl	8004f3c <_ZN11System_Rtos15freertos_queues11queueCreateEv>
	ControlDataQueue.queueCreate();
 8001e60:	4808      	ldr	r0, [pc, #32]	@ (8001e84 <_Z11app_mainCppv+0x40>)
 8001e62:	f003 f86b 	bl	8004f3c <_ZN11System_Rtos15freertos_queues11queueCreateEv>
	//SoCDataQueue.queueCreate();
	FlashSemaphore.semaphoreCreate();
 8001e66:	4808      	ldr	r0, [pc, #32]	@ (8001e88 <_Z11app_mainCppv+0x44>)
 8001e68:	f003 f8c9 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>

	button::btn_init();
 8001e6c:	f005 fa92 	bl	8007394 <_ZN6button8btn_initEv>

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20001828 	.word	0x20001828
 8001e78:	2000184c 	.word	0x2000184c
 8001e7c:	20001870 	.word	0x20001870
 8001e80:	20001970 	.word	0x20001970
 8001e84:	20001a70 	.word	0x20001a70
 8001e88:	20001acc 	.word	0x20001acc

08001e8c <app_mainC>:

// All the functions that need to be used in C files transport from here
extern "C" {

void app_mainC() {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	app_mainCpp();
 8001e90:	f7ff ffd8 	bl	8001e44 <_Z11app_mainCppv>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_Z41__static_initialization_and_destruction_0ii>:

}
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d15e      	bne.n	8001f66 <_Z41__static_initialization_and_destruction_0ii+0xce>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d159      	bne.n	8001f66 <_Z41__static_initialization_and_destruction_0ii+0xce>
		_StackSize_Modem, (void*) 1, 24);
 8001eb2:	2318      	movs	r3, #24
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8001f70 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001ec0:	492c      	ldr	r1, [pc, #176]	@ (8001f74 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001ec2:	482d      	ldr	r0, [pc, #180]	@ (8001f78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001ec4:	f002 ffe4 	bl	8004e90 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
		_StackSize_Control, (void*) 1, 24);
 8001ec8:	2318      	movs	r3, #24
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed4:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001ed6:	492a      	ldr	r1, [pc, #168]	@ (8001f80 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001ed8:	482a      	ldr	r0, [pc, #168]	@ (8001f84 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001eda:	f002 ffd9 	bl	8004e90 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
		_StackSize_Display, (void*) 1, 24);
 8001ede:	2318      	movs	r3, #24
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eea:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001eec:	4927      	ldr	r1, [pc, #156]	@ (8001f8c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001eee:	4828      	ldr	r0, [pc, #160]	@ (8001f90 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001ef0:	f002 ffce 	bl	8004e90 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
		queuebuffer);
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001ef6:	22d9      	movs	r2, #217	@ 0xd9
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4827      	ldr	r0, [pc, #156]	@ (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001efc:	f003 f803 	bl	8004f06 <_ZN11System_Rtos15freertos_queuesC1EttPh>
		sizeof(struct ControlData_Queue), queuebuffer_1);
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001f02:	22a4      	movs	r2, #164	@ 0xa4
 8001f04:	2101      	movs	r1, #1
 8001f06:	4826      	ldr	r0, [pc, #152]	@ (8001fa0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001f08:	f002 fffd 	bl	8004f06 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_semaphore FlashSemaphore;
 8001f0c:	4825      	ldr	r0, [pc, #148]	@ (8001fa4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001f0e:	f003 f86b 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
System_rtc::stmRTC stmRTC(&hrtc, 5);
 8001f12:	2205      	movs	r2, #5
 8001f14:	4924      	ldr	r1, [pc, #144]	@ (8001fa8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001f16:	4825      	ldr	r0, [pc, #148]	@ (8001fac <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001f18:	f003 f93a 	bl	8005190 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1, 0.0, 10.0, 3.3);
 8001f1c:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001fb0 <_Z41__static_initialization_and_destruction_0ii+0x118>
 8001f20:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001f24:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001fb4 <_Z41__static_initialization_and_destruction_0ii+0x11c>
 8001f28:	4923      	ldr	r1, [pc, #140]	@ (8001fb8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001f2a:	4824      	ldr	r0, [pc, #144]	@ (8001fbc <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001f2c:	f002 fc22 	bl	8004774 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 8001f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f34:	2238      	movs	r2, #56	@ 0x38
 8001f36:	4922      	ldr	r1, [pc, #136]	@ (8001fc0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001f38:	4822      	ldr	r0, [pc, #136]	@ (8001fc4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001f3a:	f002 facf 	bl	80044dc <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
sensor_pzem::PZEM_004T PZEM1(&PZEM1_U);
 8001f3e:	4922      	ldr	r1, [pc, #136]	@ (8001fc8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001f40:	4822      	ldr	r0, [pc, #136]	@ (8001fcc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001f42:	f002 fe86 	bl	8004c52 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM2(&PZEM2_U);
 8001f46:	4922      	ldr	r1, [pc, #136]	@ (8001fd0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001f48:	4822      	ldr	r0, [pc, #136]	@ (8001fd4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8001f4a:	f002 fe82 	bl	8004c52 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM3(&PZEM3_U);
 8001f4e:	4922      	ldr	r1, [pc, #136]	@ (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001f50:	4822      	ldr	r0, [pc, #136]	@ (8001fdc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001f52:	f002 fe7e 	bl	8004c52 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_DcHall::DcHall DCCurrentSensor(&hadc2);
 8001f56:	4922      	ldr	r1, [pc, #136]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001f58:	4822      	ldr	r0, [pc, #136]	@ (8001fe4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001f5a:	f002 f959 	bl	8004210 <_ZN13sensor_DcHall6DcHallC1EP17ADC_HandleTypeDef>
sensor_DcVolt::DcVolt DCVoltageMeasurement(&hadc3);
 8001f5e:	4922      	ldr	r1, [pc, #136]	@ (8001fe8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001f60:	4822      	ldr	r0, [pc, #136]	@ (8001fec <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001f62:	f002 fa1b 	bl	800439c <_ZN13sensor_DcVolt6DcVoltC1EP17ADC_HandleTypeDef>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	08015a5c 	.word	0x08015a5c
 8001f74:	08001645 	.word	0x08001645
 8001f78:	20001828 	.word	0x20001828
 8001f7c:	08015a64 	.word	0x08015a64
 8001f80:	0800114d 	.word	0x0800114d
 8001f84:	2000184c 	.word	0x2000184c
 8001f88:	08015a6c 	.word	0x08015a6c
 8001f8c:	08001539 	.word	0x08001539
 8001f90:	20001870 	.word	0x20001870
 8001f94:	20001894 	.word	0x20001894
 8001f98:	20001970 	.word	0x20001970
 8001f9c:	200019cc 	.word	0x200019cc
 8001fa0:	20001a70 	.word	0x20001a70
 8001fa4:	20001acc 	.word	0x20001acc
 8001fa8:	20002284 	.word	0x20002284
 8001fac:	20001ad0 	.word	0x20001ad0
 8001fb0:	40533333 	.word	0x40533333
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	20002158 	.word	0x20002158
 8001fbc:	20001ae0 	.word	0x20001ae0
 8001fc0:	20002230 	.word	0x20002230
 8001fc4:	20001b1c 	.word	0x20001b1c
 8001fc8:	200023d8 	.word	0x200023d8
 8001fcc:	20001b34 	.word	0x20001b34
 8001fd0:	20002468 	.word	0x20002468
 8001fd4:	20001b5c 	.word	0x20001b5c
 8001fd8:	20002390 	.word	0x20002390
 8001fdc:	20001b84 	.word	0x20001b84
 8001fe0:	200021a0 	.word	0x200021a0
 8001fe4:	20001bac 	.word	0x20001bac
 8001fe8:	200021e8 	.word	0x200021e8
 8001fec:	20001bc0 	.word	0x20001bc0

08001ff0 <_GLOBAL__sub_I_flash_data_>:
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff ff4d 	bl	8001e98 <_Z41__static_initialization_and_destruction_0ii>
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002012:	461a      	mov	r2, r3
 8002014:	2100      	movs	r1, #0
 8002016:	f011 fa0e 	bl	8013436 <memset>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f011 fa05 	bl	8013436 <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002042:	6053      	str	r3, [r2, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800204a:	3304      	adds	r3, #4
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fb3b 	bl	80056ca <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800205a:	3308      	adds	r3, #8
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fb96 	bl	800578e <_ZN10System_sys16Parsing_CheckingC1Ev>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	2300      	movs	r3, #0
 800206c:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002094:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d902      	bls.n	80020a4 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 80020a4:	4906      	ldr	r1, [pc, #24]	@ (80020c0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 80020a6:	4807      	ldr	r0, [pc, #28]	@ (80020c4 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 80020a8:	f003 f9da 	bl	8005460 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20001c04 	.word	0x20001c04
 80020bc:	20001bec 	.word	0x20001bec
 80020c0:	08003ea1 	.word	0x08003ea1
 80020c4:	08003e3d 	.word	0x08003e3d

080020c8 <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80020d4:	2301      	movs	r3, #1
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	230a      	movs	r3, #10
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e0:	2204      	movs	r2, #4
 80020e2:	498f      	ldr	r1, [pc, #572]	@ (8002320 <_ZN5Modem8simA76724initEv+0x258>)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 fbb3 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f001 fcda 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80020fa:	2301      	movs	r3, #1
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	230a      	movs	r3, #10
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002106:	2204      	movs	r2, #4
 8002108:	4985      	ldr	r1, [pc, #532]	@ (8002320 <_ZN5Modem8simA76724initEv+0x258>)
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f001 fba0 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	2100      	movs	r1, #0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f001 fcc7 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800211c:	4603      	mov	r3, r0
 800211e:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002120:	2301      	movs	r3, #1
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	230a      	movs	r3, #10
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212c:	2204      	movs	r2, #4
 800212e:	497c      	ldr	r1, [pc, #496]	@ (8002320 <_ZN5Modem8simA76724initEv+0x258>)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f001 fb8d 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	2100      	movs	r1, #0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f001 fcb4 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	230a      	movs	r3, #10
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	220b      	movs	r2, #11
 8002154:	4973      	ldr	r1, [pc, #460]	@ (8002324 <_ZN5Modem8simA76724initEv+0x25c>)
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 fb7a 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	2100      	movs	r1, #0
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f001 fca1 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002168:	4603      	mov	r3, r0
 800216a:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 800216c:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002170:	f002 fe78 	bl	8004e64 <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002174:	2301      	movs	r3, #1
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	230a      	movs	r3, #10
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002180:	2204      	movs	r2, #4
 8002182:	4967      	ldr	r1, [pc, #412]	@ (8002320 <_ZN5Modem8simA76724initEv+0x258>)
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f001 fb63 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	2100      	movs	r1, #0
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f001 fc8a 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002196:	4603      	mov	r3, r0
 8002198:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 800219a:	2301      	movs	r3, #1
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	230a      	movs	r3, #10
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	2204      	movs	r2, #4
 80021a8:	495d      	ldr	r1, [pc, #372]	@ (8002320 <_ZN5Modem8simA76724initEv+0x258>)
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 fb50 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80021b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b4:	2100      	movs	r1, #0
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f001 fc77 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	230a      	movs	r3, #10
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021cc:	2204      	movs	r2, #4
 80021ce:	4954      	ldr	r1, [pc, #336]	@ (8002320 <_ZN5Modem8simA76724initEv+0x258>)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f001 fb3d 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	2100      	movs	r1, #0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 fc64 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 80021e6:	2301      	movs	r3, #1
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	230a      	movs	r3, #10
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f2:	2207      	movs	r2, #7
 80021f4:	494c      	ldr	r1, [pc, #304]	@ (8002328 <_ZN5Modem8simA76724initEv+0x260>)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f001 fb2a 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	2100      	movs	r1, #0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f001 fc51 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 800220c:	2301      	movs	r3, #1
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	230a      	movs	r3, #10
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002218:	2206      	movs	r2, #6
 800221a:	4944      	ldr	r1, [pc, #272]	@ (800232c <_ZN5Modem8simA76724initEv+0x264>)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f001 fb17 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	2100      	movs	r1, #0
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 fc3e 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 8002232:	2301      	movs	r3, #1
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	230a      	movs	r3, #10
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223e:	220b      	movs	r2, #11
 8002240:	493b      	ldr	r1, [pc, #236]	@ (8002330 <_ZN5Modem8simA76724initEv+0x268>)
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f001 fb04 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	2100      	movs	r1, #0
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f001 fc2b 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	230a      	movs	r3, #10
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002264:	220c      	movs	r2, #12
 8002266:	4933      	ldr	r1, [pc, #204]	@ (8002334 <_ZN5Modem8simA76724initEv+0x26c>)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f001 faf1 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	2100      	movs	r1, #0
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f001 fc18 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800227a:	4603      	mov	r3, r0
 800227c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 800227e:	2301      	movs	r3, #1
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	230a      	movs	r3, #10
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228a:	2218      	movs	r2, #24
 800228c:	492a      	ldr	r1, [pc, #168]	@ (8002338 <_ZN5Modem8simA76724initEv+0x270>)
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 fade 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f001 fc05 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	230a      	movs	r3, #10
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b0:	220b      	movs	r2, #11
 80022b2:	4922      	ldr	r1, [pc, #136]	@ (800233c <_ZN5Modem8simA76724initEv+0x274>)
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 facb 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f001 fbf2 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 80022ca:	2301      	movs	r3, #1
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	230a      	movs	r3, #10
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d6:	220b      	movs	r2, #11
 80022d8:	4919      	ldr	r1, [pc, #100]	@ (8002340 <_ZN5Modem8simA76724initEv+0x278>)
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f001 fab8 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80022e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e4:	2100      	movs	r1, #0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f001 fbdf 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	230a      	movs	r3, #10
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fc:	220c      	movs	r2, #12
 80022fe:	4911      	ldr	r1, [pc, #68]	@ (8002344 <_ZN5Modem8simA76724initEv+0x27c>)
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f001 faa5 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230a:	2100      	movs	r1, #0
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 fbcc 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]

	return stat;
 8002316:	7bfb      	ldrb	r3, [r7, #15]

}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	08016018 	.word	0x08016018
 8002324:	08016020 	.word	0x08016020
 8002328:	080160d4 	.word	0x080160d4
 800232c:	080160dc 	.word	0x080160dc
 8002330:	0801602c 	.word	0x0801602c
 8002334:	08016038 	.word	0x08016038
 8002338:	08016048 	.word	0x08016048
 800233c:	08016064 	.word	0x08016064
 8002340:	08016070 	.word	0x08016070
 8002344:	0801607c 	.word	0x0801607c

08002348 <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b092      	sub	sp, #72	@ 0x48
 800234c:	af02      	add	r7, sp, #8
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	222e      	movs	r2, #46	@ 0x2e
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f011 f866 	bl	8013436 <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4920      	ldr	r1, [pc, #128]	@ (80023f4 <_ZN5Modem8simA76726setAPNEPc+0xac>)
 8002372:	4618      	mov	r0, r3
 8002374:	f010 fffc 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd ff77 	bl	8000270 <strlen>
 8002382:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002384:	b29a      	uxth	r2, r3
 8002386:	f107 010c 	add.w	r1, r7, #12
 800238a:	2301      	movs	r3, #1
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	230a      	movs	r3, #10
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f001 fa5a 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800239c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80023a0:	2100      	movs	r1, #0
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 fb81 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80023ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <_ZN5Modem8simA76726setAPNEPc+0x8e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80023bc:	3308      	adds	r3, #8
 80023be:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c6:	8a92      	ldrh	r2, [r2, #20]
 80023c8:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 f9ea 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <_ZN5Modem8simA76726setAPNEPc+0x92>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <_ZN5Modem8simA76726setAPNEPc+0x94>
 80023da:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 80023e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3740      	adds	r7, #64	@ 0x40
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08015a84 	.word	0x08015a84

080023f8 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	491e      	ldr	r1, [pc, #120]	@ (800249c <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 8002422:	4618      	mov	r0, r3
 8002424:	f010 ffa4 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	4618      	mov	r0, r3
 800242e:	f7fd ff1f 	bl	8000270 <strlen>
 8002432:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002434:	b29a      	uxth	r2, r3
 8002436:	f107 0108 	add.w	r1, r7, #8
 800243a:	2301      	movs	r3, #1
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	230a      	movs	r3, #10
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f001 fa02 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800244c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002450:	2100      	movs	r1, #0
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f001 fb29 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002458:	4603      	mov	r3, r0
 800245a:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800245c:	7ffb      	ldrb	r3, [r7, #31]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002468:	3308      	adds	r3, #8
 800246a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002472:	8a92      	ldrh	r2, [r2, #20]
 8002474:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002476:	4618      	mov	r0, r3
 8002478:	f003 f994 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 8002486:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 800248c:	2301      	movs	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8002490:	7ffb      	ldrb	r3, [r7, #31]

}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	08015aa0 	.word	0x08015aa0

080024a0 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 80024aa:	2301      	movs	r3, #1
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	230a      	movs	r3, #10
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b6:	220a      	movs	r2, #10
 80024b8:	492b      	ldr	r1, [pc, #172]	@ (8002568 <_ZN5Modem8simA76726getSimEPc+0xc8>)
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 f9c8 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80024c0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80024c4:	2100      	movs	r1, #0
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f001 faef 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d111      	bne.n	80024fa <_ZN5Modem8simA76726getSimEPc+0x5a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80024dc:	3308      	adds	r3, #8
 80024de:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024e6:	8a92      	ldrh	r2, [r2, #20]
 80024e8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f95a 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <_ZN5Modem8simA76726getSimEPc+0x5a>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <_ZN5Modem8simA76726getSimEPc+0x5c>
 80024fa:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d024      	beq.n	800254a <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002506:	3008      	adds	r0, #8
 8002508:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002510:	8a9b      	ldrh	r3, [r3, #20]
 8002512:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	230d      	movs	r3, #13
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	233a      	movs	r3, #58	@ 0x3a
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <_ZN5Modem8simA76726getSimEPc+0xcc>)
 8002522:	f003 f965 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002526:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002532:	2b00      	cmp	r3, #0
 8002534:	d113      	bne.n	800255e <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	490d      	ldr	r1, [pc, #52]	@ (8002570 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 800253a:	461a      	mov	r2, r3
 800253c:	460b      	mov	r3, r1
 800253e:	cb03      	ldmia	r3!, {r0, r1}
 8002540:	6010      	str	r0, [r2, #0]
 8002542:	6051      	str	r1, [r2, #4]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	7213      	strb	r3, [r2, #8]
 8002548:	e00a      	b.n	8002560 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	4908      	ldr	r1, [pc, #32]	@ (8002570 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 800254e:	461a      	mov	r2, r3
 8002550:	460b      	mov	r3, r1
 8002552:	cb03      	ldmia	r3!, {r0, r1}
 8002554:	6010      	str	r0, [r2, #0]
 8002556:	6051      	str	r1, [r2, #4]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	7213      	strb	r3, [r2, #8]
 800255c:	e000      	b.n	8002560 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 800255e:	bf00      	nop
	}

}
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	0801608c 	.word	0x0801608c
 800256c:	08015ab0 	.word	0x08015ab0
 8002570:	08015ab8 	.word	0x08015ab8

08002574 <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af04      	add	r7, sp, #16
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 800257e:	2301      	movs	r3, #1
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	230a      	movs	r3, #10
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	220a      	movs	r2, #10
 800258c:	4961      	ldr	r1, [pc, #388]	@ (8002714 <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 f95e 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002594:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002598:	2100      	movs	r1, #0
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f001 fa85 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d111      	bne.n	80025ce <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80025b0:	3308      	adds	r3, #8
 80025b2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ba:	8a92      	ldrh	r2, [r2, #20]
 80025bc:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f8f0 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 80025ce:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8093 	beq.w	80026fc <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80025dc:	3008      	adds	r0, #8
 80025de:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e6:	8a9b      	ldrh	r3, [r3, #20]
 80025e8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9302      	str	r3, [sp, #8]
 80025ee:	230d      	movs	r3, #13
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	232c      	movs	r3, #44	@ 0x2c
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4b48      	ldr	r3, [pc, #288]	@ (8002718 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 80025f8:	f003 f8fa 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80025fc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002608:	2b00      	cmp	r3, #0
 800260a:	d06d      	beq.n	80026e8 <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	3b30      	subs	r3, #48	@ 0x30
 8002612:	2b07      	cmp	r3, #7
 8002614:	d85d      	bhi.n	80026d2 <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 8002616:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800263d 	.word	0x0800263d
 8002620:	0800264d 	.word	0x0800264d
 8002624:	08002661 	.word	0x08002661
 8002628:	08002675 	.word	0x08002675
 800262c:	0800268d 	.word	0x0800268d
 8002630:	0800269d 	.word	0x0800269d
 8002634:	080026af 	.word	0x080026af
 8002638:	080026bf 	.word	0x080026bf
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4937      	ldr	r1, [pc, #220]	@ (800271c <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 8002640:	461a      	mov	r2, r3
 8002642:	460b      	mov	r3, r1
 8002644:	cb03      	ldmia	r3!, {r0, r1}
 8002646:	6010      	str	r0, [r2, #0]
 8002648:	6051      	str	r1, [r2, #4]

				break;
 800264a:	e04c      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4934      	ldr	r1, [pc, #208]	@ (8002720 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 8002650:	461a      	mov	r2, r3
 8002652:	460b      	mov	r3, r1
 8002654:	cb03      	ldmia	r3!, {r0, r1}
 8002656:	6010      	str	r0, [r2, #0]
 8002658:	6051      	str	r1, [r2, #4]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	7213      	strb	r3, [r2, #8]

				break;
 800265e:	e042      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4930      	ldr	r1, [pc, #192]	@ (8002724 <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 8002664:	461a      	mov	r2, r3
 8002666:	460b      	mov	r3, r1
 8002668:	cb03      	ldmia	r3!, {r0, r1}
 800266a:	6010      	str	r0, [r2, #0]
 800266c:	6051      	str	r1, [r2, #4]
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	8113      	strh	r3, [r2, #8]

				break;
 8002672:	e038      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	492c      	ldr	r1, [pc, #176]	@ (8002728 <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 8002678:	461a      	mov	r2, r3
 800267a:	460b      	mov	r3, r1
 800267c:	cb03      	ldmia	r3!, {r0, r1}
 800267e:	6010      	str	r0, [r2, #0]
 8002680:	6051      	str	r1, [r2, #4]
 8002682:	8819      	ldrh	r1, [r3, #0]
 8002684:	789b      	ldrb	r3, [r3, #2]
 8002686:	8111      	strh	r1, [r2, #8]
 8002688:	7293      	strb	r3, [r2, #10]

				break;
 800268a:	e02c      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4927      	ldr	r1, [pc, #156]	@ (800272c <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8002690:	461a      	mov	r2, r3
 8002692:	460b      	mov	r3, r1
 8002694:	cb03      	ldmia	r3!, {r0, r1}
 8002696:	6010      	str	r0, [r2, #0]
 8002698:	6051      	str	r1, [r2, #4]

				break;
 800269a:	e024      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 80026a0:	461c      	mov	r4, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026a6:	6020      	str	r0, [r4, #0]
 80026a8:	6061      	str	r1, [r4, #4]
 80026aa:	60a2      	str	r2, [r4, #8]

				break;
 80026ac:	e01b      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4920      	ldr	r1, [pc, #128]	@ (8002734 <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 80026b2:	461a      	mov	r2, r3
 80026b4:	460b      	mov	r3, r1
 80026b6:	cb03      	ldmia	r3!, {r0, r1}
 80026b8:	6010      	str	r0, [r2, #0]
 80026ba:	6051      	str	r1, [r2, #4]

				break;
 80026bc:	e013      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	491d      	ldr	r1, [pc, #116]	@ (8002738 <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 80026c2:	461a      	mov	r2, r3
 80026c4:	460b      	mov	r3, r1
 80026c6:	cb03      	ldmia	r3!, {r0, r1}
 80026c8:	6010      	str	r0, [r2, #0]
 80026ca:	6051      	str	r1, [r2, #4]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	7213      	strb	r3, [r2, #8]

				break;
 80026d0:	e009      	b.n	80026e6 <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	4919      	ldr	r1, [pc, #100]	@ (800273c <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80026d6:	461a      	mov	r2, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	cb03      	ldmia	r3!, {r0, r1}
 80026dc:	6010      	str	r0, [r2, #0]
 80026de:	6051      	str	r1, [r2, #4]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	7213      	strb	r3, [r2, #8]

				break;
 80026e4:	bf00      	nop
			}
			}
			return;
 80026e6:	e012      	b.n	800270e <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4914      	ldr	r1, [pc, #80]	@ (800273c <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80026ec:	461a      	mov	r2, r3
 80026ee:	460b      	mov	r3, r1
 80026f0:	cb03      	ldmia	r3!, {r0, r1}
 80026f2:	6010      	str	r0, [r2, #0]
 80026f4:	6051      	str	r1, [r2, #4]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	7213      	strb	r3, [r2, #8]
 80026fa:	e008      	b.n	800270e <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	490f      	ldr	r1, [pc, #60]	@ (800273c <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8002700:	461a      	mov	r2, r3
 8002702:	460b      	mov	r3, r1
 8002704:	cb03      	ldmia	r3!, {r0, r1}
 8002706:	6010      	str	r0, [r2, #0]
 8002708:	6051      	str	r1, [r2, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	7213      	strb	r3, [r2, #8]
	}

}
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bd90      	pop	{r4, r7, pc}
 8002714:	08016098 	.word	0x08016098
 8002718:	08015ac4 	.word	0x08015ac4
 800271c:	08015acc 	.word	0x08015acc
 8002720:	08015ad4 	.word	0x08015ad4
 8002724:	08015ae0 	.word	0x08015ae0
 8002728:	08015aec 	.word	0x08015aec
 800272c:	08015af8 	.word	0x08015af8
 8002730:	08015b00 	.word	0x08015b00
 8002734:	08015b0c 	.word	0x08015b0c
 8002738:	08015b14 	.word	0x08015b14
 800273c:	08015ab8 	.word	0x08015ab8

08002740 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af04      	add	r7, sp, #16
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 800274a:	2301      	movs	r3, #1
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	230a      	movs	r3, #10
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002756:	220b      	movs	r2, #11
 8002758:	495b      	ldr	r1, [pc, #364]	@ (80028c8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f001 f878 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002760:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002764:	2100      	movs	r1, #0
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f001 f99f 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d111      	bne.n	800279a <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800277c:	3308      	adds	r3, #8
 800277e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002786:	8a92      	ldrh	r2, [r2, #20]
 8002788:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800278a:	4618      	mov	r0, r3
 800278c:	f003 f80a 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 800279a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8087 	beq.w	80028b0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80027a8:	3008      	adds	r0, #8
 80027aa:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b2:	8a9b      	ldrh	r3, [r3, #20]
 80027b4:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	230d      	movs	r3, #13
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	232c      	movs	r3, #44	@ 0x2c
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4b42      	ldr	r3, [pc, #264]	@ (80028cc <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 80027c4:	f003 f814 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80027c8:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d061      	beq.n	800289c <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3b30      	subs	r3, #48	@ 0x30
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d851      	bhi.n	8002886 <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 80027e2:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	08002805 	.word	0x08002805
 80027ec:	08002815 	.word	0x08002815
 80027f0:	08002829 	.word	0x08002829
 80027f4:	0800283d 	.word	0x0800283d
 80027f8:	08002855 	.word	0x08002855
 80027fc:	08002865 	.word	0x08002865
 8002800:	08002877 	.word	0x08002877
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4932      	ldr	r1, [pc, #200]	@ (80028d0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 8002808:	461a      	mov	r2, r3
 800280a:	460b      	mov	r3, r1
 800280c:	cb03      	ldmia	r3!, {r0, r1}
 800280e:	6010      	str	r0, [r2, #0]
 8002810:	6051      	str	r1, [r2, #4]

				break;
 8002812:	e042      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	492f      	ldr	r1, [pc, #188]	@ (80028d4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 8002818:	461a      	mov	r2, r3
 800281a:	460b      	mov	r3, r1
 800281c:	cb03      	ldmia	r3!, {r0, r1}
 800281e:	6010      	str	r0, [r2, #0]
 8002820:	6051      	str	r1, [r2, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	7213      	strb	r3, [r2, #8]

				break;
 8002826:	e038      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	492b      	ldr	r1, [pc, #172]	@ (80028d8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 800282c:	461a      	mov	r2, r3
 800282e:	460b      	mov	r3, r1
 8002830:	cb03      	ldmia	r3!, {r0, r1}
 8002832:	6010      	str	r0, [r2, #0]
 8002834:	6051      	str	r1, [r2, #4]
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	8113      	strh	r3, [r2, #8]

				break;
 800283a:	e02e      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4927      	ldr	r1, [pc, #156]	@ (80028dc <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 8002840:	461a      	mov	r2, r3
 8002842:	460b      	mov	r3, r1
 8002844:	cb03      	ldmia	r3!, {r0, r1}
 8002846:	6010      	str	r0, [r2, #0]
 8002848:	6051      	str	r1, [r2, #4]
 800284a:	8819      	ldrh	r1, [r3, #0]
 800284c:	789b      	ldrb	r3, [r3, #2]
 800284e:	8111      	strh	r1, [r2, #8]
 8002850:	7293      	strb	r3, [r2, #10]

				break;
 8002852:	e022      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4922      	ldr	r1, [pc, #136]	@ (80028e0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 8002858:	461a      	mov	r2, r3
 800285a:	460b      	mov	r3, r1
 800285c:	cb03      	ldmia	r3!, {r0, r1}
 800285e:	6010      	str	r0, [r2, #0]
 8002860:	6051      	str	r1, [r2, #4]

				break;
 8002862:	e01a      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 8002868:	461c      	mov	r4, r3
 800286a:	4613      	mov	r3, r2
 800286c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800286e:	6020      	str	r0, [r4, #0]
 8002870:	6061      	str	r1, [r4, #4]
 8002872:	60a2      	str	r2, [r4, #8]

				break;
 8002874:	e011      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	491b      	ldr	r1, [pc, #108]	@ (80028e8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	cb03      	ldmia	r3!, {r0, r1}
 8002880:	6010      	str	r0, [r2, #0]
 8002882:	6051      	str	r1, [r2, #4]

				break;
 8002884:	e009      	b.n	800289a <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4918      	ldr	r1, [pc, #96]	@ (80028ec <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 800288a:	461a      	mov	r2, r3
 800288c:	460b      	mov	r3, r1
 800288e:	cb03      	ldmia	r3!, {r0, r1}
 8002890:	6010      	str	r0, [r2, #0]
 8002892:	6051      	str	r1, [r2, #4]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	7213      	strb	r3, [r2, #8]

				break;
 8002898:	bf00      	nop
			}
			}
			return;
 800289a:	e012      	b.n	80028c2 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4913      	ldr	r1, [pc, #76]	@ (80028ec <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 80028a0:	461a      	mov	r2, r3
 80028a2:	460b      	mov	r3, r1
 80028a4:	cb03      	ldmia	r3!, {r0, r1}
 80028a6:	6010      	str	r0, [r2, #0]
 80028a8:	6051      	str	r1, [r2, #4]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	7213      	strb	r3, [r2, #8]
 80028ae:	e008      	b.n	80028c2 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	490e      	ldr	r1, [pc, #56]	@ (80028ec <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 80028b4:	461a      	mov	r2, r3
 80028b6:	460b      	mov	r3, r1
 80028b8:	cb03      	ldmia	r3!, {r0, r1}
 80028ba:	6010      	str	r0, [r2, #0]
 80028bc:	6051      	str	r1, [r2, #4]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	7213      	strb	r3, [r2, #8]
	}

}
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}
 80028c8:	080160a4 	.word	0x080160a4
 80028cc:	08015b20 	.word	0x08015b20
 80028d0:	08015acc 	.word	0x08015acc
 80028d4:	08015ad4 	.word	0x08015ad4
 80028d8:	08015ae0 	.word	0x08015ae0
 80028dc:	08015aec 	.word	0x08015aec
 80028e0:	08015af8 	.word	0x08015af8
 80028e4:	08015b00 	.word	0x08015b00
 80028e8:	08015b0c 	.word	0x08015b0c
 80028ec:	08015ab8 	.word	0x08015ab8

080028f0 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	@ 0x28
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 800290e:	2301      	movs	r3, #1
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	230a      	movs	r3, #10
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800291a:	220b      	movs	r2, #11
 800291c:	4928      	ldr	r1, [pc, #160]	@ (80029c0 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ff96 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002924:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002928:	2100      	movs	r1, #0
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 f8bd 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002930:	4603      	mov	r3, r0
 8002932:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d111      	bne.n	800295e <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002940:	3308      	adds	r3, #8
 8002942:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800294a:	8a92      	ldrh	r2, [r2, #20]
 800294c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800294e:	4618      	mov	r0, r3
 8002950:	f002 ff28 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 800295e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002960:	2b00      	cmp	r3, #0
 8002962:	d029      	beq.n	80029b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800296a:	3008      	adds	r0, #8
 800296c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002974:	8a9b      	ldrh	r3, [r3, #20]
 8002976:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	232c      	movs	r3, #44	@ 0x2c
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	233a      	movs	r3, #58	@ 0x3a
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 8002988:	f002 ff32 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800298c:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 800299c:	7b3b      	ldrb	r3, [r7, #12]
 800299e:	2b30      	cmp	r3, #48	@ 0x30
 80029a0:	d002      	beq.n	80029a8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 80029a2:	2b31      	cmp	r3, #49	@ 0x31
 80029a4:	d004      	beq.n	80029b0 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 80029a6:	e007      	b.n	80029b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
				break;
 80029ae:	e003      	b.n	80029b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
				break;
 80029b6:	bf00      	nop
}
 80029b8:	bf00      	nop
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	080160b0 	.word	0x080160b0
 80029c4:	08015b28 	.word	0x08015b28

080029c8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af04      	add	r7, sp, #16
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 80029ea:	2301      	movs	r3, #1
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	230a      	movs	r3, #10
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f6:	220a      	movs	r2, #10
 80029f8:	4945      	ldr	r1, [pc, #276]	@ (8002b10 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 ff28 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	2100      	movs	r1, #0
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 f84f 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d111      	bne.n	8002a3a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a26:	8a92      	ldrh	r2, [r2, #20]
 8002a28:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 feba 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 8002a3a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d062      	beq.n	8002b06 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002a46:	3008      	adds	r0, #8
 8002a48:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a50:	8a9b      	ldrh	r3, [r3, #20]
 8002a52:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	232c      	movs	r3, #44	@ 0x2c
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	233a      	movs	r3, #58	@ 0x3a
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 8002a64:	f002 fec4 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002a68:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d046      	beq.n	8002b06 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 8002a78:	f107 0308 	add.w	r3, r7, #8
 8002a7c:	4926      	ldr	r1, [pc, #152]	@ (8002b18 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fd96 	bl	80015b0 <_ZSt6strstrPcPKc>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8002a9a:	e034      	b.n	8002b06 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 8002a9c:	f107 0308 	add.w	r3, r7, #8
 8002aa0:	491e      	ldr	r1, [pc, #120]	@ (8002b1c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fd84 	bl	80015b0 <_ZSt6strstrPcPKc>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
}
 8002abe:	e022      	b.n	8002b06 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 8002ac0:	f107 0308 	add.w	r3, r7, #8
 8002ac4:	4916      	ldr	r1, [pc, #88]	@ (8002b20 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fd72 	bl	80015b0 <_ZSt6strstrPcPKc>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
}
 8002ae2:	e010      	b.n	8002b06 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	490e      	ldr	r1, [pc, #56]	@ (8002b24 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fd60 	bl	80015b0 <_ZSt6strstrPcPKc>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2203      	movs	r2, #3
 8002b04:	701a      	strb	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	080160bc 	.word	0x080160bc
 8002b14:	08015b30 	.word	0x08015b30
 8002b18:	08015b38 	.word	0x08015b38
 8002b1c:	08015b44 	.word	0x08015b44
 8002b20:	08015b48 	.word	0x08015b48
 8002b24:	08015b50 	.word	0x08015b50

08002b28 <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af04      	add	r7, sp, #16
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 8002b44:	2301      	movs	r3, #1
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	230a      	movs	r3, #10
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b50:	2208      	movs	r2, #8
 8002b52:	4939      	ldr	r1, [pc, #228]	@ (8002c38 <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fe7b 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002b5a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 ffa2 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b6a:	7dbb      	ldrb	r3, [r7, #22]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d111      	bne.n	8002b94 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002b76:	3308      	adds	r3, #8
 8002b78:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b80:	8a92      	ldrh	r2, [r2, #20]
 8002b82:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fe0d 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 8002b94:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d041      	beq.n	8002c1e <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002ba0:	3008      	adds	r0, #8
 8002ba2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002baa:	8a9b      	ldrh	r3, [r3, #20]
 8002bac:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	232c      	movs	r3, #44	@ 0x2c
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	233a      	movs	r3, #58	@ 0x3a
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 8002bbe:	f002 fe17 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002bc2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01b      	beq.n	8002c0a <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00f fe28 	bl	801282c <atoi>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 8002be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002be4:	2b62      	cmp	r3, #98	@ 0x62
 8002be6:	dd02      	ble.n	8002bee <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]
 8002bec:	e005      	b.n	8002bfa <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3b71      	subs	r3, #113	@ 0x71
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 8002bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	490f      	ldr	r1, [pc, #60]	@ (8002c40 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f010 fbb4 	bl	8013370 <siprintf>
 8002c08:	e012      	b.n	8002c30 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	490d      	ldr	r1, [pc, #52]	@ (8002c44 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8002c0e:	461a      	mov	r2, r3
 8002c10:	460b      	mov	r3, r1
 8002c12:	cb03      	ldmia	r3!, {r0, r1}
 8002c14:	6010      	str	r0, [r2, #0]
 8002c16:	6051      	str	r1, [r2, #4]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	7213      	strb	r3, [r2, #8]
 8002c1c:	e008      	b.n	8002c30 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4908      	ldr	r1, [pc, #32]	@ (8002c44 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8002c22:	461a      	mov	r2, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	cb03      	ldmia	r3!, {r0, r1}
 8002c28:	6010      	str	r0, [r2, #0]
 8002c2a:	6051      	str	r1, [r2, #4]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	7213      	strb	r3, [r2, #8]
	}

}
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	080160c8 	.word	0x080160c8
 8002c3c:	08015b54 	.word	0x08015b54
 8002c40:	08015b5c 	.word	0x08015b5c
 8002c44:	08015ab8 	.word	0x08015ab8

08002c48 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0a0      	sub	sp, #128	@ 0x80
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	2260      	movs	r2, #96	@ 0x60
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f010 fbe3 	bl	8013436 <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8002c70:	2301      	movs	r3, #1
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	230a      	movs	r3, #10
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7c:	2212      	movs	r2, #18
 8002c7e:	492c      	ldr	r1, [pc, #176]	@ (8002d30 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fde5 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 8002c86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 ff0c 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002c98:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d111      	bne.n	8002cc4 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cb0:	8a92      	ldrh	r2, [r2, #20]
 8002cb2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 fd75 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 8002cc4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02c      	beq.n	8002d24 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002cd0:	3008      	adds	r0, #8
 8002cd2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cda:	8a9b      	ldrh	r3, [r3, #20]
 8002cdc:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cde:	f107 0308 	add.w	r3, r7, #8
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	2322      	movs	r3, #34	@ 0x22
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2322      	movs	r3, #34	@ 0x22
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 8002cee:	f002 fd7f 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002cf2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	4619      	mov	r1, r3
 8002d08:	6838      	ldr	r0, [r7, #0]
 8002d0a:	f7fe fc51 	bl	80015b0 <_ZSt6strstrPcPKc>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 8002d24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3770      	adds	r7, #112	@ 0x70
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	08016104 	.word	0x08016104
 8002d34:	08015b84 	.word	0x08015b84

08002d38 <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af04      	add	r7, sp, #16
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 8002d58:	2303      	movs	r3, #3
 8002d5a:	9303      	str	r3, [sp, #12]
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2302      	movs	r3, #2
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	232b      	movs	r3, #43	@ 0x2b
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	4928      	ldr	r1, [pc, #160]	@ (8002e10 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fdcf 	bl	8003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002d76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fe94 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002d82:	4603      	mov	r3, r0
 8002d84:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002d86:	7dbb      	ldrb	r3, [r7, #22]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d111      	bne.n	8002db0 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d92:	3308      	adds	r3, #8
 8002d94:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d9c:	8a92      	ldrh	r2, [r2, #20]
 8002d9e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fcff 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 8002db0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d026      	beq.n	8002e04 <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002dbc:	3008      	adds	r0, #8
 8002dbe:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc6:	8a9b      	ldrh	r3, [r3, #20]
 8002dc8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	230a      	movs	r3, #10
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	233a      	movs	r3, #58	@ 0x3a
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 8002dda:	f002 fd09 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002dde:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	4618      	mov	r0, r3
 8002df8:	f00f fd18 	bl	801282c <atoi>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]

}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	080160e4 	.word	0x080160e4
 8002e14:	08015b94 	.word	0x08015b94

08002e18 <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af04      	add	r7, sp, #16
 8002e1e:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 8002e36:	2303      	movs	r3, #3
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2302      	movs	r3, #2
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	232b      	movs	r3, #43	@ 0x2b
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4a:	220e      	movs	r2, #14
 8002e4c:	4923      	ldr	r1, [pc, #140]	@ (8002edc <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fd60 	bl	8003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002e54:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002e58:	2100      	movs	r1, #0
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fe25 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e64:	7dbb      	ldrb	r3, [r7, #22]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d111      	bne.n	8002e8e <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e70:	3308      	adds	r3, #8
 8002e72:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e7a:	8a92      	ldrh	r2, [r2, #20]
 8002e7c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fc90 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8002e8e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01d      	beq.n	8002ed0 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002e9a:	3008      	adds	r0, #8
 8002e9c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	8a9b      	ldrh	r3, [r3, #20]
 8002ea6:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	230a      	movs	r3, #10
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	233a      	movs	r3, #58	@ 0x3a
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 8002eb8:	f002 fc9a 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002ebc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	080160f4 	.word	0x080160f4
 8002ee0:	08015ba4 	.word	0x08015ba4

08002ee4 <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b09c      	sub	sp, #112	@ 0x70
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	72fb      	strb	r3, [r7, #11]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f107 0318 	add.w	r3, r7, #24
 8002f0c:	224c      	movs	r2, #76	@ 0x4c
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f010 fa90 	bl	8013436 <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 8002f16:	7afa      	ldrb	r2, [r7, #11]
 8002f18:	7abb      	ldrb	r3, [r7, #10]
 8002f1a:	f107 0014 	add.w	r0, r7, #20
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4920      	ldr	r1, [pc, #128]	@ (8002fa4 <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 8002f24:	f010 fa24 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd f99f 	bl	8000270 <strlen>
 8002f32:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	f107 0114 	add.w	r1, r7, #20
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	230a      	movs	r3, #10
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fc82 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002f4c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002f50:	2100      	movs	r1, #0
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fda9 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f5e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d111      	bne.n	8002f8a <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f76:	8a92      	ldrh	r2, [r2, #20]
 8002f78:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fc12 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 8002f8a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 8002f96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3768      	adds	r7, #104	@ 0x68
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08015bb0 	.word	0x08015bb0

08002fa8 <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b09a      	sub	sp, #104	@ 0x68
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	224c      	movs	r2, #76	@ 0x4c
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f010 fa32 	bl	8013436 <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4920      	ldr	r1, [pc, #128]	@ (800305c <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f010 f9c8 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd f943 	bl	8000270 <strlen>
 8002fea:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f107 010c 	add.w	r1, r7, #12
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fc26 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003004:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003008:	2100      	movs	r1, #0
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fd4d 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003016:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800301a:	2b00      	cmp	r3, #0
 800301c:	d111      	bne.n	8003042 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003024:	3308      	adds	r3, #8
 8003026:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800302e:	8a92      	ldrh	r2, [r2, #20]
 8003030:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fbb6 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 8003042:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 800304e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8003052:	4618      	mov	r0, r3
 8003054:	3760      	adds	r7, #96	@ 0x60
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	08015bcc 	.word	0x08015bcc

08003060 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b0b0      	sub	sp, #192	@ 0xc0
 8003064:	af04      	add	r7, sp, #16
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	460b      	mov	r3, r1
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	f107 031c 	add.w	r3, r7, #28
 8003082:	2292      	movs	r2, #146	@ 0x92
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f010 f9d5 	bl	8013436 <memset>
	char recv_buf[5] = { 0 };
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	2300      	movs	r3, #0
 8003092:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8003094:	7afa      	ldrb	r2, [r7, #11]
 8003096:	f107 0018 	add.w	r0, r7, #24
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	492c      	ldr	r1, [pc, #176]	@ (8003150 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 800309e:	f010 f967 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 80030a2:	f107 0318 	add.w	r3, r7, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd f8e2 	bl	8000270 <strlen>
 80030ac:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	f107 0118 	add.w	r1, r7, #24
 80030b4:	2303      	movs	r3, #3
 80030b6:	9303      	str	r3, [sp, #12]
 80030b8:	230a      	movs	r3, #10
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	2302      	movs	r3, #2
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	232b      	movs	r3, #43	@ 0x2b
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fc23 	bl	8003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 80030ce:	f247 5230 	movw	r2, #30000	@ 0x7530
 80030d2:	2100      	movs	r1, #0
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fce8 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 80030e0:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d12c      	bne.n	8003142 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80030ee:	3008      	adds	r0, #8
 80030f0:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f8:	8a9b      	ldrh	r3, [r3, #20]
 80030fa:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030fc:	f107 0310 	add.w	r3, r7, #16
 8003100:	9302      	str	r3, [sp, #8]
 8003102:	230a      	movs	r3, #10
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	232c      	movs	r3, #44	@ 0x2c
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 800310c:	f002 fb70 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003110:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	490c      	ldr	r1, [pc, #48]	@ (8003158 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fa42 	bl	80015b0 <_ZSt6strstrPcPKc>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 800313c:	2302      	movs	r3, #2
 800313e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8003142:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003146:	4618      	mov	r0, r3
 8003148:	37b0      	adds	r7, #176	@ 0xb0
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	08015be0 	.word	0x08015be0
 8003154:	08015b84 	.word	0x08015b84
 8003158:	08015c00 	.word	0x08015c00

0800315c <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b0ae      	sub	sp, #184	@ 0xb8
 8003160:	af04      	add	r7, sp, #16
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2292      	movs	r2, #146	@ 0x92
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f010 f958 	bl	8013436 <memset>
	char recv_buf[5] = { 0 };
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	2300      	movs	r3, #0
 800318c:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	f107 0310 	add.w	r3, r7, #16
 8003194:	492c      	ldr	r1, [pc, #176]	@ (8003248 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 8003196:	4618      	mov	r0, r3
 8003198:	f010 f8ea 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f865 	bl	8000270 <strlen>
 80031a6:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	f107 0110 	add.w	r1, r7, #16
 80031ae:	2303      	movs	r3, #3
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	230a      	movs	r3, #10
 80031b4:	9302      	str	r3, [sp, #8]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	232b      	movs	r3, #43	@ 0x2b
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fba6 	bl	8003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 80031c8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80031cc:	2100      	movs	r1, #0
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fc6b 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 80031da:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d12c      	bne.n	800323c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80031e8:	3008      	adds	r0, #8
 80031ea:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f2:	8a9b      	ldrh	r3, [r3, #20]
 80031f4:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	230a      	movs	r3, #10
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	232c      	movs	r3, #44	@ 0x2c
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 8003206:	f002 faf3 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800320a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	490c      	ldr	r1, [pc, #48]	@ (8003250 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe f9c5 	bl	80015b0 <_ZSt6strstrPcPKc>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 8003236:	2303      	movs	r3, #3
 8003238:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 800323c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 8003240:	4618      	mov	r0, r3
 8003242:	37a8      	adds	r7, #168	@ 0xa8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08015c04 	.word	0x08015c04
 800324c:	08015c1c 	.word	0x08015c1c
 8003250:	08015c00 	.word	0x08015c00

08003254 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b0af      	sub	sp, #188	@ 0xbc
 8003258:	af04      	add	r7, sp, #16
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2292      	movs	r2, #146	@ 0x92
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f010 f8da 	bl	8013436 <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 8003282:	7afc      	ldrb	r4, [r7, #11]
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fc fff3 	bl	8000270 <strlen>
 800328a:	4603      	mov	r3, r0
 800328c:	f107 0010 	add.w	r0, r7, #16
 8003290:	4622      	mov	r2, r4
 8003292:	494b      	ldr	r1, [pc, #300]	@ (80033c0 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 8003294:	f010 f86c 	bl	8013370 <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f7fc ffe7 	bl	8000270 <strlen>
 80032a2:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	f107 0110 	add.w	r1, r7, #16
 80032aa:	2302      	movs	r3, #2
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	233e      	movs	r3, #62	@ 0x3e
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 faca 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 80032bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032c0:	2100      	movs	r1, #0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fbf1 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 80032ce:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d16e      	bne.n	80033b4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80032dc:	3008      	adds	r0, #8
 80032de:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	8a9b      	ldrh	r3, [r3, #20]
 80032e8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80032ea:	2300      	movs	r3, #0
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	230a      	movs	r3, #10
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	232c      	movs	r3, #44	@ 0x2c
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4b33      	ldr	r3, [pc, #204]	@ (80033c4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 80032f8:	f002 fa7a 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80032fc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003308:	2b00      	cmp	r3, #0
 800330a:	d053      	beq.n	80033b4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fc ffaf 	bl	8000270 <strlen>
 8003312:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003314:	b29a      	uxth	r2, r3
 8003316:	2303      	movs	r3, #3
 8003318:	9303      	str	r3, [sp, #12]
 800331a:	230a      	movs	r3, #10
 800331c:	9302      	str	r3, [sp, #8]
 800331e:	2305      	movs	r3, #5
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	232b      	movs	r3, #43	@ 0x2b
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 faf1 	bl	8003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 8003332:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003336:	2100      	movs	r1, #0
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fbb6 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003344:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003352:	3308      	adds	r3, #8
 8003354:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800335c:	8a92      	ldrh	r2, [r2, #20]
 800335e:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fa1f 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 8003370:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01e      	beq.n	80033b4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800337c:	3008      	adds	r0, #8
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	230d      	movs	r3, #13
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	230a      	movs	r3, #10
 8003390:	4a0d      	ldr	r2, [pc, #52]	@ (80033c8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 8003392:	f002 faf5 	bl	8005980 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 80033a6:	2305      	movs	r3, #5
 80033a8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80033ac:	e002      	b.n	80033b4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 80033b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	37ac      	adds	r7, #172	@ 0xac
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}
 80033c0:	08015c28 	.word	0x08015c28
 80033c4:	08015c40 	.word	0x08015c40
 80033c8:	08015c44 	.word	0x08015c44

080033cc <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b0b1      	sub	sp, #196	@ 0xc4
 80033d0:	af04      	add	r7, sp, #16
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	460b      	mov	r3, r1
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	f107 031c 	add.w	r3, r7, #28
 80033ee:	2292      	movs	r2, #146	@ 0x92
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f010 f81f 	bl	8013436 <memset>
	char recv_buf[5] = { 0 };
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	2300      	movs	r3, #0
 80033fe:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 8003400:	7afc      	ldrb	r4, [r7, #11]
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fc ff34 	bl	8000270 <strlen>
 8003408:	4603      	mov	r3, r0
 800340a:	f107 0018 	add.w	r0, r7, #24
 800340e:	4622      	mov	r2, r4
 8003410:	4947      	ldr	r1, [pc, #284]	@ (8003530 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 8003412:	f00f ffad 	bl	8013370 <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8003416:	f107 0318 	add.w	r3, r7, #24
 800341a:	4618      	mov	r0, r3
 800341c:	f7fc ff28 	bl	8000270 <strlen>
 8003420:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003422:	b29a      	uxth	r2, r3
 8003424:	f107 0118 	add.w	r1, r7, #24
 8003428:	2302      	movs	r3, #2
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	233e      	movs	r3, #62	@ 0x3e
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa0b 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 800343a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800343e:	2100      	movs	r1, #0
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fb32 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 800344c:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003450:	2b00      	cmp	r3, #0
 8003452:	d167      	bne.n	8003524 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800345a:	3008      	adds	r0, #8
 800345c:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003464:	8a9b      	ldrh	r3, [r3, #20]
 8003466:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003468:	2300      	movs	r3, #0
 800346a:	9302      	str	r3, [sp, #8]
 800346c:	230a      	movs	r3, #10
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	232c      	movs	r3, #44	@ 0x2c
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 8003476:	f002 f9bb 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800347a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04c      	beq.n	8003524 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fc fef0 	bl	8000270 <strlen>
 8003490:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003492:	b29a      	uxth	r2, r3
 8003494:	2303      	movs	r3, #3
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	230a      	movs	r3, #10
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	2301      	movs	r3, #1
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	232b      	movs	r3, #43	@ 0x2b
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa32 	bl	8003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 80034b0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80034b4:	2100      	movs	r1, #0
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 faf7 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 80034c2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d12c      	bne.n	8003524 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80034d0:	3008      	adds	r0, #8
 80034d2:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034da:	8a9b      	ldrh	r3, [r3, #20]
 80034dc:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	9302      	str	r3, [sp, #8]
 80034e4:	230a      	movs	r3, #10
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	232c      	movs	r3, #44	@ 0x2c
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 80034ee:	f002 f97f 	bl	80057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80034f2:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 8003502:	f107 0310 	add.w	r3, r7, #16
 8003506:	490d      	ldr	r1, [pc, #52]	@ (800353c <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe f851 	bl	80015b0 <_ZSt6strstrPcPKc>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 8003524:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003528:	4618      	mov	r0, r3
 800352a:	37b4      	adds	r7, #180	@ 0xb4
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	08015c58 	.word	0x08015c58
 8003534:	08015c40 	.word	0x08015c40
 8003538:	08015c70 	.word	0x08015c70
 800353c:	08015c00 	.word	0x08015c00

08003540 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09a      	sub	sp, #104	@ 0x68
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	224c      	movs	r2, #76	@ 0x4c
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f00f ff66 	bl	8013436 <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	4920      	ldr	r1, [pc, #128]	@ (80035f4 <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 8003572:	4618      	mov	r0, r3
 8003574:	f00f fefc 	bl	8013370 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc fe77 	bl	8000270 <strlen>
 8003582:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003584:	b29a      	uxth	r2, r3
 8003586:	f107 010c 	add.w	r1, r7, #12
 800358a:	2301      	movs	r3, #1
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	230a      	movs	r3, #10
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f95a 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 800359c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80035a0:	2100      	movs	r1, #0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa81 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80035ae:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d111      	bne.n	80035da <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80035bc:	3308      	adds	r3, #8
 80035be:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035c6:	8a92      	ldrh	r2, [r2, #20]
 80035c8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 f8ea 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 80035da:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 80035e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3760      	adds	r7, #96	@ 0x60
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08015c80 	.word	0x08015c80

080035f8 <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003600:	2301      	movs	r3, #1
 8003602:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 8003608:	2301      	movs	r3, #1
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	230a      	movs	r3, #10
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003614:	221d      	movs	r2, #29
 8003616:	4915      	ldr	r1, [pc, #84]	@ (800366c <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f919 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800361e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa40 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800362a:	4603      	mov	r3, r0
 800362c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d111      	bne.n	8003658 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800363a:	3308      	adds	r3, #8
 800363c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003644:	8a92      	ldrh	r2, [r2, #20]
 8003646:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003648:	4618      	mov	r0, r3
 800364a:	f002 f8ab 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <_ZN5Modem8simA767213sslversionsetEv+0x62>
 8003658:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08016118 	.word	0x08016118

08003670 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af02      	add	r7, sp, #8
 8003676:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003678:	2301      	movs	r3, #1
 800367a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8003680:	2301      	movs	r3, #1
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	230a      	movs	r3, #10
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800368c:	221b      	movs	r2, #27
 800368e:	4915      	ldr	r1, [pc, #84]	@ (80036e4 <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8dd 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003696:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800369a:	2100      	movs	r1, #0
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa04 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80036a6:	7bbb      	ldrb	r3, [r7, #14]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d111      	bne.n	80036d0 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80036b2:	3308      	adds	r3, #8
 80036b4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036bc:	8a92      	ldrh	r2, [r2, #20]
 80036be:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80036c0:	4618      	mov	r0, r3
 80036c2:	f002 f86f 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <_ZN5Modem8simA767210sslauthsetEv+0x62>
 80036d0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	08016138 	.word	0x08016138

080036e8 <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 80036f8:	2301      	movs	r3, #1
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	230a      	movs	r3, #10
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003704:	2220      	movs	r2, #32
 8003706:	4915      	ldr	r1, [pc, #84]	@ (800375c <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8a1 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800370e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003712:	2100      	movs	r1, #0
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9c8 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800371a:	4603      	mov	r3, r0
 800371c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d111      	bne.n	8003748 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800372a:	3308      	adds	r3, #8
 800372c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003734:	8a92      	ldrh	r2, [r2, #20]
 8003736:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003738:	4618      	mov	r0, r3
 800373a:	f002 f833 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 8003748:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	08016154 	.word	0x08016154

08003760 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003768:	2301      	movs	r3, #1
 800376a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 8003770:	2301      	movs	r3, #1
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	230a      	movs	r3, #10
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800377c:	222c      	movs	r2, #44	@ 0x2c
 800377e:	4915      	ldr	r1, [pc, #84]	@ (80037d4 <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f865 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003786:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800378a:	2100      	movs	r1, #0
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f98c 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003792:	4603      	mov	r3, r0
 8003794:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003796:	7bbb      	ldrb	r3, [r7, #14]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80037a2:	3308      	adds	r3, #8
 80037a4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037ac:	8a92      	ldrh	r2, [r2, #20]
 80037ae:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fff7 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 80037c0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	08016178 	.word	0x08016178

080037d8 <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 80037e8:	2301      	movs	r3, #1
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	230a      	movs	r3, #10
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f4:	222a      	movs	r2, #42	@ 0x2a
 80037f6:	4915      	ldr	r1, [pc, #84]	@ (800384c <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f829 	bl	8003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80037fe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003802:	2100      	movs	r1, #0
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f950 	bl	8003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800380a:	4603      	mov	r3, r0
 800380c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800380e:	7bbb      	ldrb	r3, [r7, #14]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800381a:	3308      	adds	r3, #8
 800381c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003824:	8a92      	ldrh	r2, [r2, #20]
 8003826:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003828:	4618      	mov	r0, r3
 800382a:	f001 ffbb 	bl	80057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 8003838:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003842:	7bfb      	ldrb	r3, [r7, #15]

}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	080161a8 	.word	0x080161a8

08003850 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	460b      	mov	r3, r1
 8003860:	80fb      	strh	r3, [r7, #6]
 8003862:	4613      	mov	r3, r2
 8003864:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f00f fde1 	bl	8013436 <memset>
	memset(Txbuffer, 0, BufferLen);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800387a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f00f fdd8 	bl	8013436 <memset>
	rst_event(rx_evt);
 8003886:	2100      	movs	r1, #0
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f8c8 	bl	8003a1e <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 800388e:	2101      	movs	r1, #1
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f8c4 	bl	8003a1e <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800389c:	461a      	mov	r2, r3
 800389e:	7e3b      	ldrb	r3, [r7, #24]
 80038a0:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038a8:	461a      	mov	r2, r3
 80038aa:	7f3b      	ldrb	r3, [r7, #28]
 80038ac:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b4:	2200      	movs	r2, #0
 80038b6:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038be:	2200      	movs	r2, #0
 80038c0:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038c8:	22ff      	movs	r2, #255	@ 0xff
 80038ca:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038d4:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038dc:	2200      	movs	r2, #0
 80038de:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80038e6:	3304      	adds	r3, #4
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038ee:	6911      	ldr	r1, [r2, #16]
 80038f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 ff1d 	bl	8005734 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003900:	3004      	adds	r0, #4
 8003902:	88bb      	ldrh	r3, [r7, #4]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	f001 ff01 	bl	800570e <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	460b      	mov	r3, r1
 8003924:	80fb      	strh	r3, [r7, #6]
 8003926:	4613      	mov	r3, r2
 8003928:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f00f fd7f 	bl	8013436 <memset>
	memset(Txbuffer, 0, BufferLen);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800393e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f00f fd76 	bl	8013436 <memset>
	rst_event(rx_evt);
 800394a:	2100      	movs	r1, #0
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f866 	bl	8003a1e <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8003952:	2101      	movs	r1, #1
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f862 	bl	8003a1e <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003960:	461a      	mov	r2, r3
 8003962:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003966:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396e:	461a      	mov	r2, r3
 8003970:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003974:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397c:	2200      	movs	r2, #0
 800397e:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003986:	2200      	movs	r2, #0
 8003988:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003990:	22ff      	movs	r2, #255	@ 0xff
 8003992:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800399c:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a4:	2200      	movs	r2, #0
 80039a6:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ae:	461a      	mov	r2, r3
 80039b0:	7e3b      	ldrb	r3, [r7, #24]
 80039b2:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 80039b4:	7f3b      	ldrb	r3, [r7, #28]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c0:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80039c8:	3304      	adds	r3, #4
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039d0:	6911      	ldr	r1, [r2, #16]
 80039d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 feac 	bl	8005734 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80039e2:	3004      	adds	r0, #4
 80039e4:	88bb      	ldrh	r3, [r7, #4]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	f001 fe90 	bl	800570e <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003a0c:	3309      	adds	r3, #9
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003a34:	3309      	adds	r3, #9
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003a60:	3309      	adds	r3, #9
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e010      	b.n	8003a9c <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003a84:	3309      	adds	r3, #9
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]

}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 8003aca:	f006 fc25 	bl	800a318 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 8003ad8:	e002      	b.n	8003ae0 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 8003ada:	200a      	movs	r0, #10
 8003adc:	f001 f9c2 	bl	8004e64 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffae 	bl	8003a46 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8003aea:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 8003af0:	f006 fc12 	bl	800a318 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	883b      	ldrh	r3, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d201      	bcs.n	8003b0a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e4      	bne.n	8003ada <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff96 	bl	8003a46 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]

}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b4a:	7adb      	ldrb	r3, [r3, #11]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 808a 	beq.w	8003c72 <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 8003b5e:	78f8      	ldrb	r0, [r7, #3]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003b70:	610a      	str	r2, [r1, #16]
 8003b72:	4602      	mov	r2, r0
 8003b74:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b7c:	8a9b      	ldrh	r3, [r3, #20]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8a:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b92:	7b1b      	ldrb	r3, [r3, #12]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00c      	beq.n	8003bbe <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003baa:	7b9b      	ldrb	r3, [r3, #14]
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	b25a      	sxtb	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bbc:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc4:	7a9b      	ldrb	r3, [r3, #10]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <_ZN5Modem8simA76724RxCBEh+0xa4>
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	2b4f      	cmp	r3, #79	@ 0x4f
 8003bd0:	d002      	beq.n	8003bd8 <_ZN5Modem8simA76724RxCBEh+0xa0>
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b45      	cmp	r3, #69	@ 0x45
 8003bd6:	d101      	bne.n	8003bdc <_ZN5Modem8simA76724RxCBEh+0xa4>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <_ZN5Modem8simA76724RxCBEh+0xa6>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01b      	beq.n	8003c1a <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be8:	2200      	movs	r2, #0
 8003bea:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	2b4f      	cmp	r3, #79	@ 0x4f
 8003bfa:	d105      	bne.n	8003c08 <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c02:	2202      	movs	r2, #2
 8003c04:	735a      	strb	r2, [r3, #13]
 8003c06:	e00d      	b.n	8003c24 <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b45      	cmp	r3, #69	@ 0x45
 8003c0c:	d10a      	bne.n	8003c24 <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c14:	2205      	movs	r2, #5
 8003c16:	735a      	strb	r2, [r3, #13]
 8003c18:	e004      	b.n	8003c24 <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c20:	2200      	movs	r2, #0
 8003c22:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	2b0a      	cmp	r3, #10
 8003c28:	d104      	bne.n	8003c34 <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c30:	2201      	movs	r2, #1
 8003c32:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	7b9b      	ldrb	r3, [r3, #14]
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c46:	7b5b      	ldrb	r3, [r3, #13]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	bfac      	ite	ge
 8003c4e:	2301      	movge	r3, #1
 8003c50:	2300      	movlt	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80ed 	beq.w	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff feca 	bl	80039f6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 fd74 	bl	8005758 <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8003c70:	e0e0      	b.n	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c78:	7adb      	ldrb	r3, [r3, #11]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d072      	beq.n	8003d70 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 8003c8a:	78f8      	ldrb	r0, [r7, #3]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003c9c:	610a      	str	r2, [r1, #16]
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca8:	8a9b      	ldrh	r3, [r3, #20]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb6:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cbe:	7a1b      	ldrb	r3, [r3, #8]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b0a      	cmp	r3, #10
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00f      	beq.n	8003cf0 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cd4:	f040 80ae 	bne.w	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003cd8:	2100      	movs	r1, #0
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fe8b 	bl	80039f6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fd35 	bl	8005758 <_ZN13System_serial6serial8RxintDisEv>
}
 8003cee:	e0a1      	b.n	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf6:	7b1b      	ldrb	r3, [r3, #12]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d104      	bne.n	8003d08 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	2b45      	cmp	r3, #69	@ 0x45
 8003d02:	d101      	bne.n	8003d08 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <_ZN5Modem8simA76724RxCBEh+0x1d2>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d14:	2202      	movs	r2, #2
 8003d16:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d10a      	bne.n	8003d34 <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d24:	7b1b      	ldrb	r3, [r3, #12]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d32:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3a:	7b1b      	ldrb	r3, [r3, #12]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d46:	7b9b      	ldrb	r3, [r3, #14]
 8003d48:	b25b      	sxtb	r3, r3
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d06d      	beq.n	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003d58:	2100      	movs	r1, #0
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fe4b 	bl	80039f6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fcf5 	bl	8005758 <_ZN13System_serial6serial8RxintDisEv>
}
 8003d6e:	e061      	b.n	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d76:	7adb      	ldrb	r3, [r3, #11]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d055      	beq.n	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 8003d88:	78f8      	ldrb	r0, [r7, #3]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003d9a:	610a      	str	r2, [r1, #16]
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da6:	8a9b      	ldrh	r3, [r3, #20]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db4:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dbc:	7f9b      	ldrb	r3, [r3, #30]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd6:	7b9b      	ldrb	r3, [r3, #14]
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	b25a      	sxtb	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de8:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df0:	7a1b      	ldrb	r3, [r3, #8]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10e      	bne.n	8003e18 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e00:	7b9b      	ldrb	r3, [r3, #14]
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0c:	7fdb      	ldrb	r3, [r3, #31]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	db01      	blt.n	8003e18 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <_ZN5Modem8simA76724RxCBEh+0x2e2>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fde8 	bl	80039f6 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fc92 	bl	8005758 <_ZN13System_serial6serial8RxintDisEv>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e009      	b.n	8003e66 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003e56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d006      	beq.n	8003e6e <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	3301      	adds	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d9f2      	bls.n	8003e52 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8003e6c:	e000      	b.n	8003e70 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8003e6e:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	4a06      	ldr	r2, [pc, #24]	@ (8003e9c <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fe53 	bl	8003b38 <_ZN5Modem8simA76724RxCBEh>
	}

}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20001bec 	.word	0x20001bec

08003ea0 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN3SOC9getSoCValEv>:




uint8_t getSoCVal()
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	return g_SoC;
 8003eba:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <_ZN3SOC9getSoCValEv+0x24>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec4:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ec8:	793b      	ldrb	r3, [r7, #4]
 8003eca:	b2db      	uxtb	r3, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	20001c08 	.word	0x20001c08

08003edc <_ZN3SOCL18SoCFromVoltage_48VEf>:



static float SoCFromVoltage_48V(float measuredVoltage)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b08b      	sub	sp, #44	@ 0x2c
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    // 1) Clamp voltage to [min, max]
    if (measuredVoltage <= voltagePoints[0]) {
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <_ZN3SOCL18SoCFromVoltage_48VEf+0x100>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d802      	bhi.n	8003f00 <_ZN3SOCL18SoCFromVoltage_48VEf+0x24>
        return 0.0f;
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e064      	b.n	8003fca <_ZN3SOCL18SoCFromVoltage_48VEf+0xee>
    }
    if (measuredVoltage >= voltagePoints[NUM_POINTS - 1]) {
 8003f00:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <_ZN3SOCL18SoCFromVoltage_48VEf+0x100>)
 8003f02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003f06:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	db01      	blt.n	8003f18 <_ZN3SOCL18SoCFromVoltage_48VEf+0x3c>
        return 100.0f;
 8003f14:	4b32      	ldr	r3, [pc, #200]	@ (8003fe0 <_ZN3SOCL18SoCFromVoltage_48VEf+0x104>)
 8003f16:	e058      	b.n	8003fca <_ZN3SOCL18SoCFromVoltage_48VEf+0xee>
    }

    // 2) Find segment and do linear interpolation
    for (int i = 0; i < NUM_POINTS - 1; i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1c:	e050      	b.n	8003fc0 <_ZN3SOCL18SoCFromVoltage_48VEf+0xe4>
    {
        float vLow  = voltagePoints[i];
 8003f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003fdc <_ZN3SOCL18SoCFromVoltage_48VEf+0x100>)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	623b      	str	r3, [r7, #32]
        float vHigh = voltagePoints[i + 1];
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fdc <_ZN3SOCL18SoCFromVoltage_48VEf+0x100>)
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	61fb      	str	r3, [r7, #28]

        if (measuredVoltage >= vLow && measuredVoltage < vHigh)
 8003f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f48:	db37      	blt.n	8003fba <_ZN3SOCL18SoCFromVoltage_48VEf+0xde>
 8003f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	d52e      	bpl.n	8003fba <_ZN3SOCL18SoCFromVoltage_48VEf+0xde>
        {
            float socLow  = socPoints[i];
 8003f5c:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <_ZN3SOCL18SoCFromVoltage_48VEf+0x108>)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61bb      	str	r3, [r7, #24]
            float socHigh = socPoints[i + 1];
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe4 <_ZN3SOCL18SoCFromVoltage_48VEf+0x108>)
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]

            float frac = (measuredVoltage - vLow) / (vHigh - vLow);
 8003f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f82:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f86:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f92:	edc7 7a04 	vstr	s15, [r7, #16]
            float soc  = socLow + frac * (socHigh - socLow);
 8003f96:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb2:	edc7 7a03 	vstr	s15, [r7, #12]
            return soc;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	e007      	b.n	8003fca <_ZN3SOCL18SoCFromVoltage_48VEf+0xee>
    for (int i = 0; i < NUM_POINTS - 1; i++)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	d9ab      	bls.n	8003f1e <_ZN3SOCL18SoCFromVoltage_48VEf+0x42>
        }
    }

    // Should not reach here if the table is consistent
    return 0.0f;
 8003fc6:	f04f 0300 	mov.w	r3, #0
}
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd2:	372c      	adds	r7, #44	@ 0x2c
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	42c80000 	.word	0x42c80000
 8003fe4:	2000002c 	.word	0x2000002c

08003fe8 <_ZN3SOC21CheckCurrentStabilityEfm>:

void CheckCurrentStability(float currentA, uint32_t nowMs)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ff2:	6038      	str	r0, [r7, #0]
	float SoCBattVoltage;
    // Compare current to last iteration
    float deltaI = fabsf(currentA - g_lastCurrentA);
 8003ff4:	4b34      	ldr	r3, [pc, #208]	@ (80040c8 <_ZN3SOC21CheckCurrentStabilityEfm+0xe0>)
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004002:	eef0 7ae7 	vabs.f32	s15, s15
 8004006:	edc7 7a07 	vstr	s15, [r7, #28]

    if (deltaI >= REST_CURRENT_THRESHOLD_A && deltaI < REST_CURRENT_THRESHOLD_B )
 800400a:	edd7 7a07 	vldr	s15, [r7, #28]
 800400e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	db49      	blt.n	80040b0 <_ZN3SOC21CheckCurrentStabilityEfm+0xc8>
 800401c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004020:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	d540      	bpl.n	80040b0 <_ZN3SOC21CheckCurrentStabilityEfm+0xc8>
    {
        // If we just entered "stable" zone, record the time
        if (!g_isStable)
 800402e:	4b27      	ldr	r3, [pc, #156]	@ (80040cc <_ZN3SOC21CheckCurrentStabilityEfm+0xe4>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	f083 0301 	eor.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <_ZN3SOC21CheckCurrentStabilityEfm+0x62>
        {
            g_isStable     = true;
 800403c:	4b23      	ldr	r3, [pc, #140]	@ (80040cc <_ZN3SOC21CheckCurrentStabilityEfm+0xe4>)
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]
            g_stableStartMs = nowMs;
 8004042:	4a23      	ldr	r2, [pc, #140]	@ (80040d0 <_ZN3SOC21CheckCurrentStabilityEfm+0xe8>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6013      	str	r3, [r2, #0]

	                 // Apply correction
	                 g_SoC = correctedSoC;
            }
        }
    }
 8004048:	e036      	b.n	80040b8 <_ZN3SOC21CheckCurrentStabilityEfm+0xd0>
            uint32_t stableDuration = nowMs - g_stableStartMs;
 800404a:	4b21      	ldr	r3, [pc, #132]	@ (80040d0 <_ZN3SOC21CheckCurrentStabilityEfm+0xe8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	61bb      	str	r3, [r7, #24]
            if (stableDuration > REST_TIME_REQUIRED_MS)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800405a:	4293      	cmp	r3, r2
 800405c:	d92c      	bls.n	80040b8 <_ZN3SOC21CheckCurrentStabilityEfm+0xd0>
	                 DCVoltageMeasurement.getVoltage(&SoCBattVoltage);
 800405e:	f107 0308 	add.w	r3, r7, #8
 8004062:	4619      	mov	r1, r3
 8004064:	481b      	ldr	r0, [pc, #108]	@ (80040d4 <_ZN3SOC21CheckCurrentStabilityEfm+0xec>)
 8004066:	f000 f9b1 	bl	80043cc <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf>
	                 float socFromVolt = SoCFromVoltage_48V(SoCBattVoltage);
 800406a:	edd7 7a02 	vldr	s15, [r7, #8]
 800406e:	eeb0 0a67 	vmov.f32	s0, s15
 8004072:	f7ff ff33 	bl	8003edc <_ZN3SOCL18SoCFromVoltage_48VEf>
 8004076:	ed87 0a05 	vstr	s0, [r7, #20]
	                 float alpha = 0.95f; // 95% coulomb counting, 5% voltage correction
 800407a:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <_ZN3SOC21CheckCurrentStabilityEfm+0xf0>)
 800407c:	613b      	str	r3, [r7, #16]
	                 float correctedSoC = alpha * g_SoC + (1.0f - alpha) * socFromVolt;
 800407e:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <_ZN3SOC21CheckCurrentStabilityEfm+0xf4>)
 8004080:	ed93 7a00 	vldr	s14, [r3]
 8004084:	edd7 7a04 	vldr	s15, [r7, #16]
 8004088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004090:	edd7 7a04 	vldr	s15, [r7, #16]
 8004094:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004098:	edd7 7a05 	vldr	s15, [r7, #20]
 800409c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a4:	edc7 7a03 	vstr	s15, [r7, #12]
	                 g_SoC = correctedSoC;
 80040a8:	4a0c      	ldr	r2, [pc, #48]	@ (80040dc <_ZN3SOC21CheckCurrentStabilityEfm+0xf4>)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6013      	str	r3, [r2, #0]
    }
 80040ae:	e003      	b.n	80040b8 <_ZN3SOC21CheckCurrentStabilityEfm+0xd0>
    else
    {
        // Current changed significantly => not stable
        g_isStable = false;
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <_ZN3SOC21CheckCurrentStabilityEfm+0xe4>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e000      	b.n	80040ba <_ZN3SOC21CheckCurrentStabilityEfm+0xd2>
    }
 80040b8:	bf00      	nop
    }

    g_lastCurrentA = currentA;
 80040ba:	4a03      	ldr	r2, [pc, #12]	@ (80040c8 <_ZN3SOC21CheckCurrentStabilityEfm+0xe0>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20001c1c 	.word	0x20001c1c
 80040cc:	20001c18 	.word	0x20001c18
 80040d0:	20001c20 	.word	0x20001c20
 80040d4:	20001bc0 	.word	0x20001bc0
 80040d8:	3f733333 	.word	0x3f733333
 80040dc:	20001c08 	.word	0x20001c08

080040e0 <_ZN3SOC7CC_LoopEPfff>:

void CC_Loop(float *SoC,float BattCurrent, float BattVoltage)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80040ec:	edc7 0a01 	vstr	s1, [r7, #4]


    uint32_t currentTime = HAL_GetTick();
 80040f0:	f006 f912 	bl	800a318 <HAL_GetTick>
 80040f4:	61f8      	str	r0, [r7, #28]
    uint32_t elapsedMs   = currentTime - previousTime;
 80040f6:	4b2e      	ldr	r3, [pc, #184]	@ (80041b0 <_ZN3SOC7CC_LoopEPfff+0xd0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	61bb      	str	r3, [r7, #24]
    previousTime         = currentTime;
 8004100:	4a2b      	ldr	r2, [pc, #172]	@ (80041b0 <_ZN3SOC7CC_LoopEPfff+0xd0>)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	6013      	str	r3, [r2, #0]

    float deltaT_hours = (float)elapsedMs / 3600000.0f; // 1000 ms/s, 3600 s/hr
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004110:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80041b4 <_ZN3SOC7CC_LoopEPfff+0xd4>
 8004114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004118:	edc7 7a05 	vstr	s15, [r7, #20]

	 // Calculate deltaSoC in %
	    float deltaSoC = (BattCurrent * deltaT_hours / BATTERYCAPACITY) * 100.0f;
 800411c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004120:	edd7 7a05 	vldr	s15, [r7, #20]
 8004124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004128:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80041b8 <_ZN3SOC7CC_LoopEPfff+0xd8>
 800412c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004130:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80041b8 <_ZN3SOC7CC_LoopEPfff+0xd8>
 8004134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004138:	edc7 7a04 	vstr	s15, [r7, #16]


	    // Update SoC
	    // Positive I => discharge => SoC goes DOWN => subtract deltaSoC
	     g_SoC = g_SoC - deltaSoC;
 800413c:	4b1f      	ldr	r3, [pc, #124]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 800413e:	ed93 7a00 	vldr	s14, [r3]
 8004142:	edd7 7a04 	vldr	s15, [r7, #16]
 8004146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414a:	4b1c      	ldr	r3, [pc, #112]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 800414c:	edc3 7a00 	vstr	s15, [r3]



	     // Clamp SoC
	     if (g_SoC > 100.0f) {
 8004150:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80041b8 <_ZN3SOC7CC_LoopEPfff+0xd8>
 800415a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004162:	dd02      	ble.n	800416a <_ZN3SOC7CC_LoopEPfff+0x8a>
	    	 g_SoC = 100.0f;
 8004164:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 8004166:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <_ZN3SOC7CC_LoopEPfff+0xe0>)
 8004168:	601a      	str	r2, [r3, #0]
	     }
	     if (g_SoC < 0.0f)  {
 800416a:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004178:	d503      	bpl.n	8004182 <_ZN3SOC7CC_LoopEPfff+0xa2>
	    	 g_SoC = 0.0f;
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
	     }

	     if(BattCurrent > -2.0f)
 8004182:	edd7 7a02 	vldr	s15, [r7, #8]
 8004186:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800418a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	dd04      	ble.n	800419e <_ZN3SOC7CC_LoopEPfff+0xbe>
	     {
	     CheckCurrentStability(BattCurrent,currentTime);
 8004194:	69f8      	ldr	r0, [r7, #28]
 8004196:	ed97 0a02 	vldr	s0, [r7, #8]
 800419a:	f7ff ff25 	bl	8003fe8 <_ZN3SOC21CheckCurrentStabilityEfm>
	     }




	     *SoC = g_SoC;
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <_ZN3SOC7CC_LoopEPfff+0xdc>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

}
 80041a6:	bf00      	nop
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20001c14 	.word	0x20001c14
 80041b4:	4a5bba00 	.word	0x4a5bba00
 80041b8:	42c80000 	.word	0x42c80000
 80041bc:	20001c08 	.word	0x20001c08
 80041c0:	42c80000 	.word	0x42c80000

080041c4 <_ZN3SOC7CC_InitEff>:

void CC_Init(float BattSoC,float IntervalSec)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80041ce:	edc7 0a00 	vstr	s1, [r7]
	g_SoC = BattSoC;
 80041d2:	4a0b      	ldr	r2, [pc, #44]	@ (8004200 <_ZN3SOC7CC_InitEff+0x3c>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6013      	str	r3, [r2, #0]
	sampleIntervalSec = IntervalSec;
 80041d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <_ZN3SOC7CC_InitEff+0x40>)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6013      	str	r3, [r2, #0]

	sampleIntervalHr  = sampleIntervalSec / 3600.0f;
 80041de:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <_ZN3SOC7CC_InitEff+0x40>)
 80041e0:	ed93 7a00 	vldr	s14, [r3]
 80041e4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004208 <_ZN3SOC7CC_InitEff+0x44>
 80041e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <_ZN3SOC7CC_InitEff+0x48>)
 80041ee:	edc3 7a00 	vstr	s15, [r3]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20001c08 	.word	0x20001c08
 8004204:	20001c0c 	.word	0x20001c0c
 8004208:	45610000 	.word	0x45610000
 800420c:	20001c10 	.word	0x20001c10

08004210 <_ZN13sensor_DcHall6DcHallC1EP17ADC_HandleTypeDef>:





DcHall::DcHall(ADC_HandleTypeDef *hadc) : DcHallSemaphore()
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3310      	adds	r3, #16
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fede 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{

	hadc_sensor = hadc;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	60da      	str	r2, [r3, #12]
	DcHallSemaphore.semaphoreCreate();
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3310      	adds	r3, #16
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fee1 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
	  float RawCurrent = 0.0;
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
		   float emaCurrent= 0.0;
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]

}
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <_ZN13sensor_DcHall6DcHall10getCurrentEPf>:


DcHall::status DcHall::getCurrent(float *DcCurrent)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]

	enum status stat = DcHall_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
	//uint32_t adcaverage[samples] = {0};
	uint32_t adcValue = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]

	if (DcHallSemaphore.semaphoreTake(4000)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3310      	adds	r3, #16
 800426a:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fed4 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004274:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
	if (DcHallSemaphore.semaphoreTake(4000)
 8004280:	2b00      	cmp	r3, #0
 8004282:	d07b      	beq.n	800437c <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x128>
		if(hadc_sensor == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x3c>
		{
			return DcHall_ERR;
 800428c:	2301      	movs	r3, #1
 800428e:	e076      	b.n	800437e <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12a>
		}
	    for(uint32_t i = 0; i< samples; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e035      	b.n	8004302 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0xae>
	    {
	        CheckError(HAL_ADC_Start(hadc_sensor),DcHall_ERR,HAL_OK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4618      	mov	r0, r3
 800429c:	f006 f8b0 	bl	800a400 <HAL_ADC_Start>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x6a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3310      	adds	r3, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fed9 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e05f      	b.n	800437e <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12a>
	        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 15000),DcHall_ERR,HAL_OK); //take the value
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f643 2198 	movw	r1, #15000	@ 0x3a98
 80042c6:	4618      	mov	r0, r3
 80042c8:	f006 f99f 	bl	800a60a <HAL_ADC_PollForConversion>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf14      	ite	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	2300      	moveq	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d006      	beq.n	80042ea <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x96>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3310      	adds	r3, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fec3 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e049      	b.n	800437e <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12a>
	        adcValue += HAL_ADC_GetValue(hadc_sensor);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f006 fa16 	bl	800a720 <HAL_ADC_GetValue>
 80042f4:	4602      	mov	r2, r0
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
	    for(uint32_t i = 0; i< samples; i++)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	3301      	adds	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	429a      	cmp	r2, r3
 800430a:	d3c4      	bcc.n	8004296 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x42>
	    }
	    HAL_ADC_Stop(hadc_sensor);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4618      	mov	r0, r3
 8004312:	f006 f947 	bl	800a5a4 <HAL_ADC_Stop>


	    adcValue = adcValue/samples;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	61fb      	str	r3, [r7, #28]

	    float voltage = ((adcValue / Resolution) * Vref)- offset_system ;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800432c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8004388 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x134>
 8004330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004334:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800438c <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x138>
 8004338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800433c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004390 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x13c>
 8004340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004344:	edc7 7a04 	vstr	s15, [r7, #16]


	    float voltageOffset = voltage - midpoint;   // relative to midpoint
 8004348:	edd7 7a04 	vldr	s15, [r7, #16]
 800434c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004394 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x140>
 8004350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004354:	edc7 7a03 	vstr	s15, [r7, #12]
	    RawCurrent = voltageOffset / sensitivity;  // I = dV / sensitivity
 8004358:	ed97 7a03 	vldr	s14, [r7, #12]
 800435c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004398 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x144>
 8004360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	edc3 7a01 	vstr	s15, [r3, #4]

//	    /emaCurrent = alpha * RawCurrent + (1.0f - alpha) * emaCurrent;
	    *DcCurrent = RawCurrent;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	601a      	str	r2, [r3, #0]

		DcHallSemaphore.semaphoreGive();
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3310      	adds	r3, #16
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fe78 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

	}


	  return stat;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	45800000 	.word	0x45800000
 800438c:	40533333 	.word	0x40533333
 8004390:	3b03126f 	.word	0x3b03126f
 8004394:	3fd33333 	.word	0x3fd33333
 8004398:	3b9d4952 	.word	0x3b9d4952

0800439c <_ZN13sensor_DcVolt6DcVoltC1EP17ADC_HandleTypeDef>:

namespace sensor_DcVolt
{


DcVolt::DcVolt(ADC_HandleTypeDef *hadc) : DcVoltSemaphore()
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fe1c 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{

	hadc_sensor = hadc;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	601a      	str	r2, [r3, #0]
	DcVoltSemaphore.semaphoreCreate();
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fe1f 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>

}
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf>:


DcVolt::status DcVolt::getVoltage(float *DcVolt)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	const uint32_t samples = 50;
 80043d6:	2332      	movs	r3, #50	@ 0x32
 80043d8:	60fb      	str	r3, [r7, #12]
	enum status stat = DcVolt_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	72fb      	strb	r3, [r7, #11]
	uint32_t adcValue = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]

	if (DcVoltSemaphore.semaphoreTake(4000)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fe16 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80043f0:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
	if (DcVoltSemaphore.semaphoreTake(4000)
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d060      	beq.n	80044c2 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf6>

		if(hadc_sensor == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x40>
		{
			return DcVolt_ERR;
 8004408:	2301      	movs	r3, #1
 800440a:	e05b      	b.n	80044c4 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf8>
		}
	    for(uint32_t i = 0; i< samples; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e035      	b.n	800447e <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xb2>
	    {
	        CheckError(HAL_ADC_Start(hadc_sensor),DcVolt_ERR,HAL_OK);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f005 fff2 	bl	800a400 <HAL_ADC_Start>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x6e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fe1b 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8004436:	2301      	movs	r3, #1
 8004438:	e044      	b.n	80044c4 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf8>
	        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 15000),DcVolt_ERR,HAL_OK); //take the value
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8004442:	4618      	mov	r0, r3
 8004444:	f006 f8e1 	bl	800a60a <HAL_ADC_PollForConversion>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x9a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fe05 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8004462:	2301      	movs	r3, #1
 8004464:	e02e      	b.n	80044c4 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf8>
	        adcValue += HAL_ADC_GetValue(hadc_sensor);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f006 f958 	bl	800a720 <HAL_ADC_GetValue>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
	    for(uint32_t i = 0; i< samples; i++)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3301      	adds	r3, #1
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b31      	cmp	r3, #49	@ 0x31
 8004482:	d9c6      	bls.n	8004412 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x46>
	    }

	    adcValue = adcValue/samples;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4a11      	ldr	r2, [pc, #68]	@ (80044cc <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x100>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	617b      	str	r3, [r7, #20]


	    *DcVolt = (float)(( adcValue * (Vref / Resolution))*ratio) - offset_system ;	// 12 bit
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80044d0 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x104>
 800449e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044a2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80044d4 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x108>
 80044a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80044d8 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x10c>
 80044ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	edc3 7a00 	vstr	s15, [r3]

		DcVoltSemaphore.semaphoreGive();
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fdd5 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>





	return stat;
 80044c2:	7afb      	ldrb	r3, [r7, #11]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	51eb851f 	.word	0x51eb851f
 80044d0:	3a533333 	.word	0x3a533333
 80044d4:	4176b852 	.word	0x4176b852
 80044d8:	3e051eb8 	.word	0x3e051eb8

080044dc <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout) : AHT20Semaphore()
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	71fb      	strb	r3, [r7, #7]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3314      	adds	r3, #20
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fd79 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{
	_aht20_ui2c=ui2c;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	79fa      	ldrb	r2, [r7, #7]
 8004500:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	601a      	str	r2, [r3, #0]
	AHT20Semaphore.semaphoreCreate();
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3314      	adds	r3, #20
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fd76 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	}
	AHT20Semaphore.semaphoreGive();
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	if (AHT20Semaphore.semaphoreTake(1000)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3314      	adds	r3, #20
 800452c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd73 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004536:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
	if (AHT20Semaphore.semaphoreTake(1000)
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8084 	beq.w	8004650 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x134>
	uint16_t counter = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 800454c:	2032      	movs	r0, #50	@ 0x32
 800454e:	f000 fc89 	bl	8004e64 <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8004552:	23ac      	movs	r3, #172	@ 0xac
 8004554:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 8004556:	2333      	movs	r3, #51	@ 0x33
 8004558:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 800455a:	2300      	movs	r3, #0
 800455c:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f87a 	bl	8004658 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d068      	beq.n	8004646 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x12a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6858      	ldr	r0, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	7a1b      	ldrb	r3, [r3, #8]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	b299      	uxth	r1, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f107 0218 	add.w	r2, r7, #24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	2303      	movs	r3, #3
 800458c:	f007 f9fc 	bl	800b988 <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 8004590:	2064      	movs	r0, #100	@ 0x64
 8004592:	f000 fc67 	bl	8004e64 <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6858      	ldr	r0, [r3, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	7a1b      	ldrb	r3, [r3, #8]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	b299      	uxth	r1, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f107 0210 	add.w	r2, r7, #16
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2307      	movs	r3, #7
 80045ae:	f007 fae9 	bl	800bb84 <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 80045b2:	7c3a      	ldrb	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	7a5b      	ldrb	r3, [r3, #9]
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db36      	blt.n	8004630 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x114>
    		{
    	    DATA_Humi=ahtRData[1];
 80045c2:	7c7b      	ldrb	r3, [r7, #17]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	7cba      	ldrb	r2, [r7, #18]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	7cfa      	ldrb	r2, [r7, #19]
 80045e0:	0912      	lsrs	r2, r2, #4
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	7d3a      	ldrb	r2, [r7, #20]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	7d7a      	ldrb	r2, [r7, #21]
 800460a:	431a      	orrs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 8004610:	7dba      	ldrb	r2, [r7, #22]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f83e 	bl	8004698 <_ZN15sensor_TempHumd5AHT204tempEv>
 800461c:	4602      	mov	r2, r0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f874 	bl	8004710 <_ZN15sensor_TempHumd5AHT205humidEv>
 8004628:	4602      	mov	r2, r0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]
    		break;
 800462e:	e00a      	b.n	8004646 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x12a>
    		}
    	else {
    		counter++;
 8004630:	8bfb      	ldrh	r3, [r7, #30]
 8004632:	3301      	adds	r3, #1
 8004634:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 8004636:	200a      	movs	r0, #10
 8004638:	f000 fc14 	bl	8004e64 <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 800463c:	8bfb      	ldrh	r3, [r7, #30]
 800463e:	2b32      	cmp	r3, #50	@ 0x32
 8004640:	d800      	bhi.n	8004644 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x128>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004642:	e7a8      	b.n	8004596 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x7a>
    		{
    			break;
 8004644:	bf00      	nop
    		}
    	}
    }
	}

	AHT20Semaphore.semaphoreGive();
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3314      	adds	r3, #20
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fd0e 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 8004650:	bf00      	nop
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6858      	ldr	r0, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7a1b      	ldrb	r3, [r3, #8]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b299      	uxth	r1, r3
 8004670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004674:	2203      	movs	r2, #3
 8004676:	f007 fcb7 	bl	800bfe8 <HAL_I2C_IsDeviceReady>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 800468e:	7bfb      	ldrb	r3, [r7, #15]

}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb ff2d 	bl	8000504 <__aeabi_ui2d>
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 80046b0:	f7fc f8cc 	bl	800084c <__aeabi_ddiv>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 80046c2:	f7fc f8c3 	bl	800084c <__aeabi_ddiv>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 80046d4:	f7fb ff90 	bl	80005f8 <__aeabi_dmul>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	4b09      	ldr	r3, [pc, #36]	@ (800470c <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 80046e6:	f7fb fdcf 	bl	8000288 <__aeabi_dsub>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	f7fc fa59 	bl	8000ba8 <__aeabi_d2uiz>
 80046f6:	4603      	mov	r3, r0
 80046f8:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40900000 	.word	0x40900000
 8004708:	40690000 	.word	0x40690000
 800470c:	40490000 	.word	0x40490000

08004710 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fb fef1 	bl	8000504 <__aeabi_ui2d>
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b11      	ldr	r3, [pc, #68]	@ (800476c <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8004728:	f7fc f890 	bl	800084c <__aeabi_ddiv>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 800473a:	f7fc f887 	bl	800084c <__aeabi_ddiv>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 800474c:	f7fb ff54 	bl	80005f8 <__aeabi_dmul>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	f7fc fa26 	bl	8000ba8 <__aeabi_d2uiz>
 800475c:	4603      	mov	r3, r0
 800475e:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40900000 	.word	0x40900000
 8004770:	40590000 	.word	0x40590000

08004774 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc,float LowSpan,float FullSpan,float VoltOut) : LiquidMeasSemaphore()
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6178      	str	r0, [r7, #20]
 800477c:	6139      	str	r1, [r7, #16]
 800477e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004782:	edc7 0a02 	vstr	s1, [r7, #8]
 8004786:	ed87 1a01 	vstr	s2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff+0x80>)
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4a14      	ldr	r2, [pc, #80]	@ (80047f4 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff+0x80>)
 80047a2:	615a      	str	r2, [r3, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	761a      	strb	r2, [r3, #24]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	61da      	str	r2, [r3, #28]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	621a      	str	r2, [r3, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3338      	adds	r3, #56	@ 0x38
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fc11 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{
	hadc_sensor = hadc;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	635a      	str	r2, [r3, #52]	@ 0x34
	LiquidMeasSemaphore.semaphoreCreate();
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3338      	adds	r3, #56	@ 0x38
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fc14 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>

    InternalLowSpan = LowSpan;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28
    InternalFullSpan = FullSpan;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    InternalVoltOut = VoltOut;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	bf800000 	.word	0xbf800000

080047f8 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopEPhPfmPmS3_>:

void liquidSensor::Measurement_loop(uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
	getLevel(getlevel);
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f80f 	bl	800482c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>
	consumptionliters(consumption);
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f907 	bl	8004a24 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f953 	bl	8004ac8 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>:

liquidSensor::status liquidSensor::getLevel(uint8_t *getlevel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b096      	sub	sp, #88	@ 0x58
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]


	enum status stat = liquidSensor_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3338      	adds	r3, #56	@ 0x38
 8004840:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fbe9 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 800484a:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80d1 	beq.w	80049fe <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1d2>
	float totalSpan = InternalFullSpan - InternalLowSpan;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800486c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	2228      	movs	r2, #40	@ 0x28
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f00e fddc 	bl	8013436 <memset>
	  uint32_t adcValue = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	653b      	str	r3, [r7, #80]	@ 0x50




	if(hadc_sensor == NULL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x62>
	{
		return liquidSensor_ERR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0bc      	b.n	8004a08 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
	}
    for(int i = 0; i< 10; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004892:	e03a      	b.n	800490a <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xde>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004898:	4618      	mov	r0, r3
 800489a:	f005 fdb1 	bl	800a400 <HAL_ADC_Start>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x90>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3338      	adds	r3, #56	@ 0x38
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fbda 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0a5      	b.n	8004a08 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80048c4:	4618      	mov	r0, r3
 80048c6:	f005 fea0 	bl	800a60a <HAL_ADC_PollForConversion>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xbc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3338      	adds	r3, #56	@ 0x38
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fbc4 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e08f      	b.n	8004a08 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	4618      	mov	r0, r3
 80048ee:	f005 ff17 	bl	800a720 <HAL_ADC_GetValue>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	3350      	adds	r3, #80	@ 0x50
 80048fa:	f107 0108 	add.w	r1, r7, #8
 80048fe:	440b      	add	r3, r1
 8004900:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 8004904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004906:	3301      	adds	r3, #1
 8004908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800490a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490c:	2b09      	cmp	r3, #9
 800490e:	ddc1      	ble.n	8004894 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x68>
    }
    HAL_ADC_Stop(hadc_sensor);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004914:	4618      	mov	r0, r3
 8004916:	f005 fe45 	bl	800a5a4 <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 800491a:	2300      	movs	r3, #0
 800491c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800491e:	e00d      	b.n	800493c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x110>
    {
    	adcValue = adcValue +  adcaverage[i];
 8004920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	3350      	adds	r3, #80	@ 0x50
 8004926:	f107 0208 	add.w	r2, r7, #8
 800492a:	4413      	add	r3, r2
 800492c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004930:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004932:	4413      	add	r3, r2
 8004934:	653b      	str	r3, [r7, #80]	@ 0x50
    for(int i = 0; i< 10; i++)
 8004936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004938:	3301      	adds	r3, #1
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800493c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800493e:	2b09      	cmp	r3, #9
 8004940:	ddee      	ble.n	8004920 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xf4>
    }
    adcValue = adcValue/10;
 8004942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004944:	4a32      	ldr	r2, [pc, #200]	@ (8004a10 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1e4>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	08db      	lsrs	r3, r3, #3
 800494c:	653b      	str	r3, [r7, #80]	@ 0x50
    float voltage = (adcValue / Resolution) * Vref;
 800494e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004958:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8004a14 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1e8>
 800495c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004960:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004a18 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1ec>
 8004964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004968:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    current_mA = ((voltage/InternalVoltOut) *  (max_cur - min_cur)) + min_cur;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8004972:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8004976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800497e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004982:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800498a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 800498e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004992:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800499a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800499e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80049b6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80049ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049be:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004a1c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f0>
 80049c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	ed93 7a00 	vldr	s14, [r3]
 80049d2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8004a1c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f0>
 80049d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049da:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004a20 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f4>
 80049de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80049ea:	793b      	ldrb	r3, [r7, #4]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	701a      	strb	r2, [r3, #0]

	LiquidMeasSemaphore.semaphoreGive();
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3338      	adds	r3, #56	@ 0x38
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fb38 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80049fc:	e002      	b.n	8004a04 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1d8>
	}
	else
	{
		stat = liquidSensor_ERR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}

	  return stat;
 8004a04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3758      	adds	r7, #88	@ 0x58
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	cccccccd 	.word	0xcccccccd
 8004a14:	45800000 	.word	0x45800000
 8004a18:	40533333 	.word	0x40533333
 8004a1c:	43fa0000 	.word	0x43fa0000
 8004a20:	42c80000 	.word	0x42c80000

08004a24 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3338      	adds	r3, #56	@ 0x38
 8004a32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 faf0 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004a3c:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf0c      	ite	eq
 8004a42:	2301      	moveq	r3, #1
 8004a44:	2300      	movne	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d038      	beq.n	8004abe <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x9a>
    uint32_t current_time = HAL_GetTick();
 8004a4c:	f005 fc64 	bl	800a318 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	edd3 7a00 	vldr	s15, [r3]
 8004a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a66:	d50c      	bpl.n	8004a82 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x5e>
    {
        prev_volumeLiters = tank_volumeLiters;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	61da      	str	r2, [r3, #28]
    	LiquidMeasSemaphore.semaphoreGive();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3338      	adds	r3, #56	@ 0x38
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 faf6 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
        return;
 8004a80:	e01d      	b.n	8004abe <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x9a>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0xa0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d311      	bcc.n	8004ab4 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x90>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	edd3 7a00 	vldr	s15, [r3]
 8004a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	61da      	str	r2, [r3, #28]
    }

	LiquidMeasSemaphore.semaphoreGive();
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3338      	adds	r3, #56	@ 0x38
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fad7 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

	}

}
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	0036ee80 	.word	0x0036ee80

08004ac8 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3338      	adds	r3, #56	@ 0x38
 8004ada:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fa9c 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004ae4:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d05f      	beq.n	8004bb4 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xec>
	current_volume_change = tank_volumeLiters;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0a:	d509      	bpl.n	8004b20 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x58>
    {
    	prev_volume_change = current_volume_change;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	615a      	str	r2, [r3, #20]
    	LiquidMeasSemaphore.semaphoreGive();
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3338      	adds	r3, #56	@ 0x38
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 faa7 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
        return;
 8004b1e:	e049      	b.n	8004bb4 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xec>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b34:	ee17 2a90 	vmov	r2, s15
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 8004b3c:	f005 fbec 	bl	800a318 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	7e1b      	ldrb	r3, [r3, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d111      	bne.n	8004b72 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	dd25      	ble.n	8004ba2 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>
    	  refueling_active = 1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	601a      	str	r2, [r3, #0]
    	  *endEpochtime = 0; //make it zero so we know we are refueling now to erase previous end time so user dont get confused
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e017      	b.n	8004ba2 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	dc0f      	bgt.n	8004b9a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xd2>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d90a      	bls.n	8004ba2 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>

			  refueling_active = 0;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e003      	b.n	8004ba2 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>

		  }
	  }
	  else
	  {
    	  refueling_prev_time = refueling_start_time;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1a      	ldr	r2, [r3, #32]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	615a      	str	r2, [r3, #20]

	LiquidMeasSemaphore.semaphoreGive();
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3338      	adds	r3, #56	@ 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fa5c 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}

}
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>:


void liquidSensor::setParameters(float LowSpan,float FullSpan)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bc6:	edc7 0a01 	vstr	s1, [r7, #4]
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3338      	adds	r3, #56	@ 0x38
 8004bce:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa22 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004bd8:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff+0x44>
    InternalLowSpan = LowSpan;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28
    InternalFullSpan = FullSpan;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	LiquidMeasSemaphore.semaphoreGive();
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3338      	adds	r3, #56	@ 0x38
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fa37 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_>:

void liquidSensor::getParameters(float *LowSpan,float *FullSpan)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3338      	adds	r3, #56	@ 0x38
 8004c16:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f9fe 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004c20:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_+0x44>
	 *LowSpan   =  InternalLowSpan  ;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	601a      	str	r2, [r3, #0]
     *FullSpan  =  InternalFullSpan ;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
 	LiquidMeasSemaphore.semaphoreGive();
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3338      	adds	r3, #56	@ 0x38
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fa11 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>:
#include "cstdio"
#include "cstring"
#include "cstdlib"
namespace sensor_pzem {

PZEM_004T::PZEM_004T(UART_HandleTypeDef *huart) :
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
		serial_(huart), PzemSemaphore() {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd31 	bl	80056ca <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3324      	adds	r3, #36	@ 0x24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f9bb 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	huart_ = huart;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	601a      	str	r2, [r3, #0]
	PzemSemaphore.semaphoreCreate();
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3324      	adds	r3, #36	@ 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f9be 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>:
	serial_.TransmitData(rst_buf, 4, 1000);
	serial_.ReceiveData(res_buf, 25, 500);
	PzemSemaphore.semaphoreGive();
	}
}
void PZEM_004T::read(PZEM *pzemhandle) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]

	if (PzemSemaphore.semaphoreTake(1000)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3324      	adds	r3, #36	@ 0x24
 8004c9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f9bc 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004ca4:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
	if (PzemSemaphore.semaphoreTake(1000)
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80c6 	beq.w	8004e42 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1b6>
	serial_.TransmitData(rst_buf, 4, 1000);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	1d18      	adds	r0, r3, #4
 8004cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	4964      	ldr	r1, [pc, #400]	@ (8004e54 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1c8>)
 8004cc2:	f000 fd24 	bl	800570e <_ZN13System_serial6serial12TransmitDataEPKhtm>
	serial_.ReceiveData(res_buf, 25, 500);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1d18      	adds	r0, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f103 0108 	add.w	r1, r3, #8
 8004cd0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004cd4:	2219      	movs	r2, #25
 8004cd6:	f000 fd07 	bl	80056e8 <_ZN13System_serial6serial11ReceiveDataEPhtm>


	System_Rtos::delay(1000);
 8004cda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cde:	f000 f8c1 	bl	8004e64 <_ZN11System_Rtos5delayEm>

	serial_.TransmitData(buf, 8, 1000);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	1d18      	adds	r0, r3, #4
 8004ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cea:	2208      	movs	r2, #8
 8004cec:	495a      	ldr	r1, [pc, #360]	@ (8004e58 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1cc>)
 8004cee:	f000 fd0e 	bl	800570e <_ZN13System_serial6serial12TransmitDataEPKhtm>
	serial_.ReceiveData(res_buf, 25, 1000);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1d18      	adds	r0, r3, #4
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f103 0108 	add.w	r1, r3, #8
 8004cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d00:	2219      	movs	r2, #25
 8004d02:	f000 fcf1 	bl	80056e8 <_ZN13System_serial6serial11ReceiveDataEPhtm>


	pzemhandle->voltage = ((uint32_t)res_buf[3] << 8 | (uint32_t)res_buf[4]) / 10.0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7adb      	ldrb	r3, [r3, #11]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	7b12      	ldrb	r2, [r2, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fbf6 	bl	8000504 <__aeabi_ui2d>
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8004e5c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d0>)
 8004d1e:	f7fb fd95 	bl	800084c <__aeabi_ddiv>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f7fb ff5d 	bl	8000be8 <__aeabi_d2f>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	601a      	str	r2, [r3, #0]
	pzemhandle->current = ((uint32_t)res_buf[5] << 8 | (uint32_t)res_buf[6]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7b5b      	ldrb	r3, [r3, #13]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	7b92      	ldrb	r2, [r2, #14]
 8004d3e:	431a      	orrs	r2, r3
			| (uint32_t)res_buf[7] << 24 | (uint32_t)res_buf[8] << 16) / 100.0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7bdb      	ldrb	r3, [r3, #15]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7c1b      	ldrb	r3, [r3, #16]
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fb fbd7 	bl	8000504 <__aeabi_ui2d>
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	4b41      	ldr	r3, [pc, #260]	@ (8004e60 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d4>)
 8004d5c:	f7fb fd76 	bl	800084c <__aeabi_ddiv>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	f7fb ff3e 	bl	8000be8 <__aeabi_d2f>
 8004d6c:	4602      	mov	r2, r0
	pzemhandle->current = ((uint32_t)res_buf[5] << 8 | (uint32_t)res_buf[6]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	605a      	str	r2, [r3, #4]
	pzemhandle->power = ((uint32_t)res_buf[9] << 8 | (uint32_t)res_buf[10]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7c5b      	ldrb	r3, [r3, #17]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	7c92      	ldrb	r2, [r2, #18]
 8004d7c:	431a      	orrs	r2, r3
			| (uint32_t)res_buf[11] << 24 | (uint32_t)res_buf[12] << 16);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7cdb      	ldrb	r3, [r3, #19]
 8004d82:	061b      	lsls	r3, r3, #24
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7d1b      	ldrb	r3, [r3, #20]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	4313      	orrs	r3, r2
	pzemhandle->power = ((uint32_t)res_buf[9] << 8 | (uint32_t)res_buf[10]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	edc3 7a02 	vstr	s15, [r3, #8]
	pzemhandle->energy = ((uint32_t)res_buf[13] << 8 | (uint32_t)res_buf[14]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7d5b      	ldrb	r3, [r3, #21]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	7d92      	ldrb	r2, [r2, #22]
 8004da6:	431a      	orrs	r2, r3
			| (uint32_t)res_buf[15] << 24 | (uint32_t)res_buf[16] << 16);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7ddb      	ldrb	r3, [r3, #23]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	4313      	orrs	r3, r2
	pzemhandle->energy = ((uint32_t)res_buf[13] << 8 | (uint32_t)res_buf[14]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	edc3 7a03 	vstr	s15, [r3, #12]
	pzemhandle->frequency = ((uint32_t)res_buf[17] << 8 | (uint32_t)res_buf[18]) / 10.0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7e5b      	ldrb	r3, [r3, #25]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	7e92      	ldrb	r2, [r2, #26]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb fb96 	bl	8000504 <__aeabi_ui2d>
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e5c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d0>)
 8004dde:	f7fb fd35 	bl	800084c <__aeabi_ddiv>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	f7fb fefd 	bl	8000be8 <__aeabi_d2f>
 8004dee:	4602      	mov	r2, r0
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	611a      	str	r2, [r3, #16]
	pzemhandle->pf = ((uint32_t)res_buf[19] << 8 | (uint32_t)res_buf[20]) / 100.0;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7edb      	ldrb	r3, [r3, #27]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	7f12      	ldrb	r2, [r2, #28]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb fb7f 	bl	8000504 <__aeabi_ui2d>
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	4b15      	ldr	r3, [pc, #84]	@ (8004e60 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d4>)
 8004e0c:	f7fb fd1e 	bl	800084c <__aeabi_ddiv>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	f7fb fee6 	bl	8000be8 <__aeabi_d2f>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	615a      	str	r2, [r3, #20]
	pzemhandle->alarms = ((uint32_t)res_buf[21] << 8 | (uint32_t)res_buf[22]);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7f5b      	ldrb	r3, [r3, #29]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	7f92      	ldrb	r2, [r2, #30]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	831a      	strh	r2, [r3, #24]

	PzemSemaphore.semaphoreGive();
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3324      	adds	r3, #36	@ 0x24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f916 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	else
	{
		memset(pzemhandle,0,sizeof(PZEM));
	}

}
 8004e40:	e004      	b.n	8004e4c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1c0>
		memset(pzemhandle,0,sizeof(PZEM));
 8004e42:	221c      	movs	r2, #28
 8004e44:	2100      	movs	r1, #0
 8004e46:	6838      	ldr	r0, [r7, #0]
 8004e48:	f00e faf5 	bl	8013436 <memset>
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	080161dc 	.word	0x080161dc
 8004e58:	080161d4 	.word	0x080161d4
 8004e5c:	40240000 	.word	0x40240000
 8004e60:	40590000 	.word	0x40590000

08004e64 <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	4a05      	ldr	r2, [pc, #20]	@ (8004e8c <_ZN11System_Rtos5delayEm+0x28>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f00b fde0 	bl	8010a44 <vTaskDelay>
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	10624dd3 	.word	0x10624dd3

08004e90 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3304      	adds	r3, #4
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f00e fbcc 	bl	801364e <strcpy>
	usStackDepth = usStackDepth_;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	887a      	ldrh	r2, [r7, #2]
 8004eba:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	61da      	str	r2, [r3, #28]


}
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 8004ed2:	b5b0      	push	{r4, r5, r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af02      	add	r7, sp, #8
 8004ed8:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	1d19      	adds	r1, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8a9c      	ldrh	r4, [r3, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699d      	ldr	r5, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	3220      	adds	r2, #32
 8004ef2:	9201      	str	r2, [sp, #4]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	4622      	mov	r2, r4
 8004efa:	f00b fc45 	bl	8010788 <xTaskCreate>
			&taskHandle);


}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bdb0      	pop	{r4, r5, r7, pc}

08004f06 <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	817b      	strh	r3, [r7, #10]
 8004f14:	4613      	mov	r3, r2
 8004f16:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	897a      	ldrh	r2, [r7, #10]
 8004f1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	893a      	ldrh	r2, [r7, #8]
 8004f24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	659a      	str	r2, [r3, #88]	@ 0x58

}
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f52:	461c      	mov	r4, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	9100      	str	r1, [sp, #0]
 8004f60:	4621      	mov	r1, r4
 8004f62:	f00a fd8b 	bl	800fa7c <xQueueGenericCreateStatic>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}

08004f74 <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	2300      	movs	r3, #0
 8004f88:	22c8      	movs	r2, #200	@ 0xc8
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	f00a fe84 	bl	800fc98 <xQueueGenericSend>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e000      	b.n	8004fa6 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]

}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2232      	movs	r2, #50	@ 0x32
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f00b f807 	bl	800ffd8 <xQueueReceive>
 8004fca:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>:


freertos_semaphore::freertos_semaphore()
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
{

}
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>:

void freertos_semaphore::semaphoreCreate()
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
	xSemaphor = xSemaphoreCreateMutex();
 8005006:	2001      	movs	r0, #1
 8005008:	f00a fe2d 	bl	800fc66 <xQueueCreateMutex>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>:

	return stat;
}

enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreTake(uint32_t timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	enum semaphore_stat stat = senaphore_nothing;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]

    if( xSemaphoreTake(xSemaphor,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	490b      	ldr	r1, [pc, #44]	@ (8005068 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x4c>)
 800503a:	fba1 1303 	umull	r1, r3, r1, r3
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f00b f8aa 	bl	801019c <xQueueSemaphoreTake>
 8005048:	4603      	mov	r3, r0
					   pdMS_TO_TICKS(timeout)) == pdPASS )
 800504a:	2b01      	cmp	r3, #1
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
    if( xSemaphoreTake(xSemaphor,
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x40>
      {
    	 return semaphore_recived;
 8005058:	2300      	movs	r3, #0
 800505a:	e000      	b.n	800505e <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x42>
      }


	return stat;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	10624dd3 	.word	0x10624dd3

0800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>:



enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreGive()
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(xSemaphor);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	2200      	movs	r2, #0
 8005080:	2100      	movs	r1, #0
 8005082:	f00a fe09 	bl	800fc98 <xQueueGenericSend>

	return stat;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <_ZN11System_Rtos15freertos_eventsC1Ev>:




freertos_events::freertos_events() {
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

}
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <_ZN11System_Rtos15freertos_events11eventCreateEv>:

void freertos_events::eventCreate()
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
	xeventgroup = xEventGroupCreate();
 80050ae:	f00a fa0b 	bl	800f4c8 <xEventGroupCreate>
 80050b2:	4602      	mov	r2, r0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_ZN11System_Rtos15freertos_events9eventGiveEv>:

void freertos_events::eventGive()
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c8:	f3ef 8305 	mrs	r3, IPSR
 80050cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ce:	68fb      	ldr	r3, [r7, #12]
	if( (__get_IPSR() != 0U))
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01e      	beq.n	800511c <_ZN11System_Rtos15freertos_events9eventGiveEv+0x5c>
     {
		 xHigherPriorityTaskWoken = pdFALSE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	605a      	str	r2, [r3, #4]
		 xResult = xEventGroupSetBitsFromISR(xeventgroup,  1, &xHigherPriorityTaskWoken );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	461a      	mov	r2, r3
 80050ee:	2101      	movs	r1, #1
 80050f0:	f00a fb92 	bl	800f818 <xEventGroupSetBitsFromISR>
 80050f4:	4602      	mov	r2, r0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]
		 if( xResult != pdFAIL )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
          {
			 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
 800510a:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x70>)
 800510c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	f3bf 8f6f 	isb	sy
     else
     {
    	 xEventGroupSetBits( xeventgroup, 1);
     }

}
 800511a:	e005      	b.n	8005128 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
    	 xEventGroupSetBits( xeventgroup, 1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2101      	movs	r1, #1
 8005122:	4618      	mov	r0, r3
 8005124:	f00a fabc 	bl	800f6a0 <xEventGroupSetBits>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <_ZN11System_Rtos15freertos_events9eventTakeEv>:
void freertos_events::eventTake()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af02      	add	r7, sp, #8
 800513a:	6078      	str	r0, [r7, #4]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, portMAX_DELAY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	f04f 33ff 	mov.w	r3, #4294967295
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	2201      	movs	r2, #1
 800514a:	2101      	movs	r1, #1
 800514c:	f00a f9d6 	bl	800f4fc <xEventGroupWaitBits>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>:
void freertos_events::eventTakeTimed(uint32_t time)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af02      	add	r7, sp, #8
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, pdMS_TO_TICKS(time));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800516c:	fb02 f303 	mul.w	r3, r2, r3
 8005170:	4a06      	ldr	r2, [pc, #24]	@ (800518c <_ZN11System_Rtos15freertos_events14eventTakeTimedEm+0x34>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	2201      	movs	r2, #1
 800517e:	2101      	movs	r1, #1
 8005180:	f00a f9bc 	bl	800f4fc <xEventGroupWaitBits>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	10624dd3 	.word	0x10624dd3

08005190 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>:
#include "cstring"
#include "cstdlib"

namespace System_rtc {

stmRTC::stmRTC(RTC_HandleTypeDef *hrtc, int8_t timezone) :
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	71fb      	strb	r3, [r7, #7]
		checking(), rtcSemaphore() {
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3308      	adds	r3, #8
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 faf3 	bl	800578e <_ZN10System_sys16Parsing_CheckingC1Ev>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	330c      	adds	r3, #12
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff ff1b 	bl	8004fe8 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	Internal_handler = hrtc;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	605a      	str	r2, [r3, #4]
	zone = timezone;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	79fa      	ldrb	r2, [r7, #7]
 80051bc:	701a      	strb	r2, [r3, #0]
	rtcSemaphore.semaphoreCreate();
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	330c      	adds	r3, #12
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff ff1b 	bl	8004ffe <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>:

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp) {
 80051d2:	b5b0      	push	{r4, r5, r7, lr}
 80051d4:	b090      	sub	sp, #64	@ 0x40
 80051d6:	af04      	add	r7, sp, #16
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
	int err = 1;
 80051e0:	2301      	movs	r3, #1
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(4000)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	330c      	adds	r3, #12
 80051e8:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ff15 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80051f2:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(4000)
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d042      	beq.n	8005288 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xb6>
		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f107 0114 	add.w	r1, r7, #20
 800520a:	2200      	movs	r2, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f008 fa28 	bl	800d662 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800521a:	2200      	movs	r2, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f008 fb02 	bl	800d826 <HAL_RTC_GetDate>

		if (timestamp != nullptr) {
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d017      	beq.n	8005258 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x86>
			*timestamp = checking.convertToEpoch(Date, Time, zone);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f103 0508 	add.w	r5, r3, #8
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f993 3000 	ldrsb.w	r3, [r3]
 8005234:	9303      	str	r3, [sp, #12]
 8005236:	466c      	mov	r4, sp
 8005238:	f107 031c 	add.w	r3, r7, #28
 800523c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	cb0c      	ldmia	r3, {r2, r3}
 800524a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800524c:	4628      	mov	r0, r5
 800524e:	f000 fbeb 	bl	8005a28 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8005252:	4602      	mov	r2, r0
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x92>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 800525e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d006      	beq.n	8005278 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xa6>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	2214      	movs	r2, #20
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f00e f9f3 	bl	801365e <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	330c      	adds	r3, #12
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fef5 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005286:	e014      	b.n	80052b2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xe0>
	} else {
		if (timestamp != nullptr) {
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xc2>
			*timestamp = 0;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xd0>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 800529a:	2300      	movs	r3, #0
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xe0>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 80052a8:	2214      	movs	r2, #20
 80052aa:	2100      	movs	r1, #0
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f00e f9d6 	bl	801365e <memcpy>
		}

	}

	return err;
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	b2db      	uxtb	r3, r3

}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3730      	adds	r7, #48	@ 0x30
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bdb0      	pop	{r4, r5, r7, pc}

080052be <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>:

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp, int8_t *timezone) {
 80052be:	b5b0      	push	{r4, r5, r7, lr}
 80052c0:	b090      	sub	sp, #64	@ 0x40
 80052c2:	af04      	add	r7, sp, #16
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
	int err = 1;
 80052cc:	2301      	movs	r3, #1
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	330c      	adds	r3, #12
 80052d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fe9f 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80052de:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d047      	beq.n	800537e <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xc0>

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f107 0114 	add.w	r1, r7, #20
 80052f6:	2200      	movs	r2, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f008 f9b2 	bl	800d662 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005306:	2200      	movs	r2, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f008 fa8c 	bl	800d826 <HAL_RTC_GetDate>

		*timezone = zone;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f993 2000 	ldrsb.w	r2, [r3]
 8005314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005316:	701a      	strb	r2, [r3, #0]

		if (timestamp != nullptr) {
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d017      	beq.n	800534e <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x90>
			*timestamp = checking.convertToEpoch(Date, Time, zone);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f103 0508 	add.w	r5, r3, #8
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f993 3000 	ldrsb.w	r3, [r3]
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	466c      	mov	r4, sp
 800532e:	f107 031c 	add.w	r3, r7, #28
 8005332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	cb0c      	ldmia	r3, {r2, r3}
 8005340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005342:	4628      	mov	r0, r5
 8005344:	f000 fb70 	bl	8005a28 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8005348:	4602      	mov	r2, r0
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x9c>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 8005354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d006      	beq.n	800536e <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xb0>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	2214      	movs	r2, #20
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f00e f978 	bl	801365e <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	330c      	adds	r3, #12
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fe7a 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800537c:	e014      	b.n	80053a8 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xea>
	} else {
		if (timestamp != nullptr) {
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xcc>
			*timestamp = 0;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xda>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 8005390:	2300      	movs	r3, #0
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xea>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 800539e:	2214      	movs	r2, #20
 80053a0:	2100      	movs	r1, #0
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f00e f95b 	bl	801365e <memcpy>
		}

	}

	return err;
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	b2db      	uxtb	r3, r3

}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3730      	adds	r7, #48	@ 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdb0      	pop	{r4, r5, r7, pc}

080053b4 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>:
	return err;

}

uint8_t stmRTC::setTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		int8_t timezone) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	@ 0x30
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	70fb      	strb	r3, [r7, #3]
	int err = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	330c      	adds	r3, #12
 80053ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fe24 	bl	800501c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80053d4:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d027      	beq.n	8005434 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa+0x80>
		HAL_RTC_SetTime(Internal_handler, DTime, RTC_FORMAT_BIN);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f008 f89e 	bl	800d52e <HAL_RTC_SetTime>
		HAL_RTC_SetDate(Internal_handler, DDate, RTC_FORMAT_BIN);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f008 f98f 	bl	800d71e <HAL_RTC_SetDate>
		zone = timezone;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	701a      	strb	r2, [r3, #0]

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f107 0114 	add.w	r1, r7, #20
 800540e:	2200      	movs	r2, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f008 f926 	bl	800d662 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800541e:	2200      	movs	r2, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f008 fa00 	bl	800d826 <HAL_RTC_GetDate>

		rtcSemaphore.semaphoreGive();
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	330c      	adds	r3, #12
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fe1e 	bl	800506c <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
		err = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	return err;
 8005434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005436:	b2db      	uxtb	r3, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	3730      	adds	r7, #48	@ 0x30
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <_ZN10System_rtc6stmRTC11setTimezoneEa>:

	return err;
}

void stmRTC::setTimezone(int8_t timezone)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
	zone = timezone;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	701a      	strb	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

 ModemTxCB LocalModemTxCB = nullptr ;
 InverterTxCB LocalInverterTxCB = nullptr ;


void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 800546a:	4a06      	ldr	r2, [pc, #24]	@ (8005484 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 8005470:	4a05      	ldr	r2, [pc, #20]	@ (8005488 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6013      	str	r3, [r2, #0]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20001c24 	.word	0x20001c24
 8005488:	20001c28 	.word	0x20001c28

0800548c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
	LocalInverterRxCB = Rxcb;
	LocalInverterTxCB = TxCB;
}

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b22      	cmp	r3, #34	@ 0x22
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d021      	beq.n	80054f4 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x68>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 80054bc:	89bb      	ldrh	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 80054c2:	89bb      	ldrh	r3, [r7, #12]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	b21a      	sxth	r2, r3
 80054c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	81fb      	strh	r3, [r7, #14]




		if (huart == &GSM_U) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005504 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x78>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10a      	bne.n	80054f0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			if(LocalModemRxCB)
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	89fa      	ldrh	r2, [r7, #14]
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	4611      	mov	r1, r2
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3
			}

		}


		return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e003      	b.n	80054fc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x70>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
	}
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20002420 	.word	0x20002420
 8005508:	20001c24 	.word	0x20001c24

0800550c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 800552c:	2300      	movs	r3, #0
 800552e:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ff9a 	bl	800548c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 8005558:	e0a4      	b.n	80056a4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8083 	beq.w	8005670 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800557a:	2b00      	cmp	r3, #0
 800557c:	d078      	beq.n	8005670 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00f      	beq.n	80055a8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f06f 0201 	mvn.w	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a0:	f043 0201 	orr.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0202 	mvn.w	r2, #2
 80055c4:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00f      	beq.n	80055fc <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f06f 0204 	mvn.w	r2, #4
 80055ee:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f4:	f043 0202 	orr.w	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d014      	beq.n	8005630 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0208 	mvn.w	r2, #8
 8005622:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005628:	f043 0208 	orr.w	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02d      	beq.n	800569e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f009 fb56 	bl	800ed14 <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 800566e:	e016      	b.n	800569e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d014      	beq.n	80056a4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00f      	beq.n	80056a4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	  {


			if (huart == &GSM_U) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a09      	ldr	r2, [pc, #36]	@ (80056ac <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10a      	bne.n	80056a2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				if(LocalModemTxCB)
 800568c:	4b08      	ldr	r3, [pc, #32]	@ (80056b0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				{
					LocalModemTxCB(huart);
 8005694:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4798      	blx	r3
				}

			}


	    return;
 800569c:	e001      	b.n	80056a2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
	    return;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    return;
 80056a2:	bf00      	nop
	  }



}
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20002420 	.word	0x20002420
 80056b0:	20001c28 	.word	0x20001c28

080056b4 <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff25 	bl	800550c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	601a      	str	r2, [r3, #0]
}
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <_ZN13System_serial6serial11ReceiveDataEPhtm>:

void serial::ReceiveData(uint8_t *data,uint16_t size,uint32_t timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive(Internal_UartHandler, data, size, timeout);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	f009 f998 	bl	800ea36 <HAL_UART_Receive>

}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZN13System_serial6serial12TransmitDataEPKhtm>:

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	f009 f8fa 	bl	800e920 <HAL_UART_Transmit>


}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f009 fa0a 	bl	800eb64 <HAL_UART_Receive_IT>
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f009 fa23 	bl	800ebb0 <HAL_UART_AbortReceive_IT>
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f00d fe61 	bl	8013446 <strchr>
 8005784:	4603      	mov	r3, r0
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
{

}
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 80057b2:	2302      	movs	r3, #2
 80057b4:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 80057b6:	490c      	ldr	r1, [pc, #48]	@ (80057e8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 80057b8:	68b8      	ldr	r0, [r7, #8]
 80057ba:	f00d fe64 	bl	8013486 <strstr>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75fb      	strb	r3, [r7, #23]
 80057c8:	e008      	b.n	80057dc <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 80057ca:	4908      	ldr	r1, [pc, #32]	@ (80057ec <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 80057cc:	68b8      	ldr	r0, [r7, #8]
 80057ce:	f00d fe5a 	bl	8013486 <strstr>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 80057d8:	2301      	movs	r3, #1
 80057da:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]


}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	08015cec 	.word	0x08015cec
 80057ec:	08015cf0 	.word	0x08015cf0

080057f0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 80057fc:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8005800:	6020      	str	r0, [r4, #0]
 8005802:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 8005806:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 800580a:	6001      	str	r1, [r0, #0]
 800580c:	4611      	mov	r1, r2
 800580e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005812:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800581c:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005820:	460a      	mov	r2, r1
 8005822:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 8005824:	2302      	movs	r3, #2
 8005826:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 8005830:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005834:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005838:	881a      	ldrh	r2, [r3, #0]
 800583a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800583e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8005842:	f107 0014 	add.w	r0, r7, #20
 8005846:	6819      	ldr	r1, [r3, #0]
 8005848:	f00d fe0a 	bl	8013460 <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 800584c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005850:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005854:	f107 0214 	add.w	r2, r7, #20
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	4610      	mov	r0, r2
 800585c:	f00d fe13 	bl	8013486 <strstr>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 8005866:	2302      	movs	r3, #2
 8005868:	e085      	b.n	8005976 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 800586a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 8005872:	2300      	movs	r3, #0
 8005874:	e07f      	b.n	8005976 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 8005876:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 800587a:	f107 0314 	add.w	r3, r7, #20
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff76 	bl	8005772 <_ZSt6strchrPci>
 8005886:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 800588a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800588e:	2b00      	cmp	r3, #0
 8005890:	d016      	beq.n	80058c0 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 8005892:	f107 0314 	add.w	r3, r7, #20
 8005896:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 80058a0:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 80058a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80058a6:	d105      	bne.n	80058b4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 80058a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80058ac:	3302      	adds	r3, #2
 80058ae:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80058b2:	e007      	b.n	80058c4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 80058b4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80058be:	e001      	b.n	80058c4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 80058c0:	2302      	movs	r3, #2
 80058c2:	e058      	b.n	8005976 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 80058c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80058c8:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 80058cc:	e03c      	b.n	8005948 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 80058ce:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80058d2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80058d6:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d00f      	beq.n	8005908 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 80058e8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80058ec:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80058f0:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	441a      	add	r2, r3
 80058f8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80058fc:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8005900:	440b      	add	r3, r1
 8005902:	7812      	ldrb	r2, [r2, #0]
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e015      	b.n	8005934 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 8005908:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800590c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005910:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	4413      	add	r3, r2
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 800591e:	429a      	cmp	r2, r3
 8005920:	d108      	bne.n	8005934 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8005922:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005926:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 800592a:	4413      	add	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8005930:	2300      	movs	r3, #0
 8005932:	e020      	b.n	8005976 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8005934:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005938:	3301      	adds	r3, #1
 800593a:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 800593e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005942:	3301      	adds	r3, #1
 8005944:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8005948:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 800594c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005950:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005954:	8819      	ldrh	r1, [r3, #0]
 8005956:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800595a:	1acb      	subs	r3, r1, r3
 800595c:	429a      	cmp	r2, r3
 800595e:	da08      	bge.n	8005972 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 8005960:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005964:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005968:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3ad      	bcc.n	80058ce <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 8005972:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 8005976:	4618      	mov	r0, r3
 8005978:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800597c:	46bd      	mov	sp, r7
 800597e:	bd90      	pop	{r4, r7, pc}

08005980 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 800598e:	2300      	movs	r3, #0
 8005990:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 8005998:	2301      	movs	r3, #1
 800599a:	e040      	b.n	8005a1e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	68b8      	ldr	r0, [r7, #8]
 80059a0:	f00d fd71 	bl	8013486 <strstr>
 80059a4:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 80059ac:	2302      	movs	r3, #2
 80059ae:	e036      	b.n	8005a1e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fa fc5d 	bl	8000270 <strlen>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	4619      	mov	r1, r3
 80059c8:	69f8      	ldr	r0, [r7, #28]
 80059ca:	f7ff fed2 	bl	8005772 <_ZSt6strchrPci>
 80059ce:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 80059d6:	2302      	movs	r3, #2
 80059d8:	e021      	b.n	8005a1e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	3301      	adds	r3, #1
 80059de:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 80059e4:	e00a      	b.n	80059fc <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	61fa      	str	r2, [r7, #28]
 80059ec:	7819      	ldrb	r1, [r3, #0]
 80059ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f0:	8b7b      	ldrh	r3, [r7, #26]
 80059f2:	1c58      	adds	r0, r3, #1
 80059f4:	8378      	strh	r0, [r7, #26]
 80059f6:	4413      	add	r3, r2
 80059f8:	460a      	mov	r2, r1
 80059fa:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d004      	beq.n	8005a12 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 8005a08:	8b7a      	ldrh	r2, [r7, #26]
 8005a0a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	dbe9      	blt.n	80059e6 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8005a12:	8b7b      	ldrh	r3, [r7, #26]
 8005a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a16:	4413      	add	r3, r2
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]


    return stat;
 8005a1c:	7e7b      	ldrb	r3, [r7, #25]

}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

uint32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 8005a28:	b082      	sub	sp, #8
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08c      	sub	sp, #48	@ 0x30
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
 8005a34:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005a38:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 8005a3c:	78bb      	ldrb	r3, [r7, #2]
 8005a3e:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 8005a40:	787b      	ldrb	r3, [r7, #1]
 8005a42:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b45      	cmp	r3, #69	@ 0x45
 8005a4c:	dc02      	bgt.n	8005a54 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 8005a4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005a52:	e001      	b.n	8005a58 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 8005a54:	f240 736c 	movw	r3, #1900	@ 0x76c
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 8005a5e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005a62:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 8005a64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005a68:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 8005a6a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005a6e:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 8005a70:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 8005a74:	4613      	mov	r3, r2
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    uint32_t epoch = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 8005a82:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a88:	e012      	b.n	8005ab0 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x88>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 8005a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f861 	bl	8005b54 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 8005a98:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8005a9c:	e001      	b.n	8005aa2 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 8005a9e:	f240 136d 	movw	r3, #365	@ 0x16d
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	4413      	add	r3, r2
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	3301      	adds	r3, #1
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	dbe8      	blt.n	8005a8a <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	4a25      	ldr	r2, [pc, #148]	@ (8005b50 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac6:	e00f      	b.n	8005ae8 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xc0>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 8005ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aca:	69b9      	ldr	r1, [r7, #24]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f871 	bl	8005bb4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b50 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	4413      	add	r3, r2
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	dbeb      	blt.n	8005ac8 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xa0>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8005af6:	fb02 f303 	mul.w	r3, r2, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afe:	4413      	add	r3, r2
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005b08:	fb02 f303 	mul.w	r3, r2, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	4413      	add	r3, r2
 8005b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4613      	mov	r3, r2
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b22:	4413      	add	r3, r2
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b2a:	4413      	add	r3, r2
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4613      	mov	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3730      	adds	r7, #48	@ 0x30
 8005b46:	46bd      	mov	sp, r7
 8005b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b4c:	b002      	add	sp, #8
 8005b4e:	4770      	bx	lr
 8005b50:	00015180 	.word	0x00015180

08005b54 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:


}

bool Parsing_Checking::isLeapYear(int year)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10c      	bne.n	8005b82 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8005b6c:	fb83 1302 	smull	r1, r3, r3, r2
 8005b70:	1159      	asrs	r1, r3, #5
 8005b72:	17d3      	asrs	r3, r2, #31
 8005b74:	1acb      	subs	r3, r1, r3
 8005b76:	2164      	movs	r1, #100	@ 0x64
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8005b86:	fb83 1302 	smull	r1, r3, r3, r2
 8005b8a:	11d9      	asrs	r1, r3, #7
 8005b8c:	17d3      	asrs	r3, r2, #31
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	51eb851f 	.word	0x51eb851f

08005bb4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d108      	bne.n	8005bd8 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff ffc3 	bl	8005b54 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 8005bde:	231d      	movs	r3, #29
 8005be0:	e004      	b.n	8005bec <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	4a03      	ldr	r2, [pc, #12]	@ (8005bf4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8005be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	080161e0 	.word	0x080161e0

08005bf8 <_ZN2UI8SettingsEP11u8g2_struct>:

};


void Settings(u8g2_t *u8g2)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	int8_t sel_sub = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
do {

	button::resetCode(button::btncodes::cNONE);
 8005c04:	2000      	movs	r0, #0
 8005c06:	f001 fc1b 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fe6f 	bl	80078ee <u8g2_ClearBuffer>

		u8g2_DrawXBM(u8g2, 104, 0, imgcont::Settings.w, imgcont::Settings.h,imgcont::Settings.img);
 8005c10:	4b4b      	ldr	r3, [pc, #300]	@ (8005d40 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8005c12:	7919      	ldrb	r1, [r3, #4]
 8005c14:	4b4a      	ldr	r3, [pc, #296]	@ (8005d40 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8005c16:	795b      	ldrb	r3, [r3, #5]
 8005c18:	4a49      	ldr	r2, [pc, #292]	@ (8005d40 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	9201      	str	r2, [sp, #4]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	460b      	mov	r3, r1
 8005c22:	2200      	movs	r2, #0
 8005c24:	2168      	movs	r1, #104	@ 0x68
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 fde8 	bl	80077fc <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f002 fb1d 	bl	800826e <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005c34:	2102      	movs	r1, #2
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f002 fda7 	bl	800878a <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005c3c:	4941      	ldr	r1, [pc, #260]	@ (8005d44 <_ZN2UI8SettingsEP11u8g2_struct+0x14c>)
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f002 fc76 	bl	8008530 <u8g2_SetFont>

		uint8_t strSize = std::strlen( UI_txts::Settings[sel_sub]);
 8005c44:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a3d      	ldr	r2, [pc, #244]	@ (8005d48 <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8005c52:	4413      	add	r3, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fa fb0b 	bl	8000270 <strlen>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	73fb      	strb	r3, [r7, #15]


		u8g2_DrawBox(u8g2, 2, 3 + (8*sel_sub) , (strSize * 5) + 1 , 9);
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	3303      	adds	r3, #3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	0089      	lsls	r1, r1, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	3301      	adds	r3, #1
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2109      	movs	r1, #9
 8005c78:	9100      	str	r1, [sp, #0]
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fe00 	bl	8007882 <u8g2_DrawBox>




		for(int i=0; i < TotalSettingsSub;i++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	e014      	b.n	8005cb2 <_ZN2UI8SettingsEP11u8g2_struct+0xba>
		{
			u8g2_DrawStr(u8g2, 3, 10 + (8*i), UI_txts::Settings[i]);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	330a      	adds	r3, #10
 8005c92:	b2d9      	uxtb	r1, r3
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d48 <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	2103      	movs	r1, #3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f002 fba0 	bl	80083ec <u8g2_DrawStr>
		for(int i=0; i < TotalSettingsSub;i++)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	dde7      	ble.n	8005c88 <_ZN2UI8SettingsEP11u8g2_struct+0x90>





		u8g2_SendBuffer(u8g2);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fe8b 	bl	80079d4 <u8g2_SendBuffer>

		btncodes = button::get_event();
 8005cbe:	f001 fb93 	bl	80073e8 <_ZN6button9get_eventEv>
 8005cc2:	60b8      	str	r0, [r7, #8]
	}while (btncodes == button::btncodes::cNONE);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d09f      	beq.n	8005c0a <_ZN2UI8SettingsEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cDWN_BT)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b28      	cmp	r3, #40	@ 0x28
 8005cce:	d106      	bne.n	8005cde <_ZN2UI8SettingsEP11u8g2_struct+0xe6>
	{
		sel_sub++;
 8005cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	75fb      	strb	r3, [r7, #23]
 8005cdc:	e01a      	b.n	8005d14 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	}
	else if(btncodes == button::btncodes::cUP_BT)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b1e      	cmp	r3, #30
 8005ce2:	d10c      	bne.n	8005cfe <_ZN2UI8SettingsEP11u8g2_struct+0x106>
	{
		sel_sub--;
 8005ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	75fb      	strb	r3, [r7, #23]
        if(sel_sub < 0)
 8005cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da0d      	bge.n	8005d14 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        {
        	sel_sub = TotalSettingsSub - 1;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
 8005cfc:	e00a      	b.n	8005d14 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        }
	}
	else if(btncodes == button::btncodes::cEnter_BT)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b0a      	cmp	r3, #10
 8005d02:	d107      	bne.n	8005d14 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	{
		UI::UI_helper::set_UIcode(SettingsMenuCodes[sel_sub].code);
 8005d04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d08:	4a10      	ldr	r2, [pc, #64]	@ (8005d4c <_ZN2UI8SettingsEP11u8g2_struct+0x154>)
 8005d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fa68 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}


	sel_sub = sel_sub % TotalSettingsSub;
 8005d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	bfb8      	it	lt
 8005d20:	425b      	neglt	r3, r3
 8005d22:	75fb      	strb	r3, [r7, #23]

}while (btncodes != button::btncodes::cRGHT_BT && btncodes != button::btncodes::cLFT_BT &&  btncodes != button::btncodes::cEnter_BT);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b32      	cmp	r3, #50	@ 0x32
 8005d28:	d006      	beq.n	8005d38 <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b3c      	cmp	r3, #60	@ 0x3c
 8005d2e:	d003      	beq.n	8005d38 <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b0a      	cmp	r3, #10
 8005d34:	f47f af66 	bne.w	8005c04 <_ZN2UI8SettingsEP11u8g2_struct+0xc>

}
 8005d38:	bf00      	nop
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	080167f0 	.word	0x080167f0
 8005d44:	08016bf4 	.word	0x08016bf4
 8005d48:	08016210 	.word	0x08016210
 8005d4c:	20000058 	.word	0x20000058

08005d50 <_ZN2UI14fuel_temp_humdEP11u8g2_struct>:

void fuel_temp_humd(u8g2_t *u8g2) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08e      	sub	sp, #56	@ 0x38
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f001 fb71 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	char buffer[3][10];
	do {
		u8g2_ClearBuffer(u8g2);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 fdc2 	bl	80078ee <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 fa56 	bl	800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 8005d70:	4b55      	ldr	r3, [pc, #340]	@ (8005ec8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x178>)
 8005d72:	7919      	ldrb	r1, [r3, #4]
 8005d74:	4b54      	ldr	r3, [pc, #336]	@ (8005ec8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x178>)
 8005d76:	795b      	ldrb	r3, [r3, #5]
				imgcont::SensorInfo.img);
 8005d78:	4a53      	ldr	r2, [pc, #332]	@ (8005ec8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x178>)
 8005d7a:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 8005d7c:	9201      	str	r2, [sp, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	460b      	mov	r3, r1
 8005d82:	2202      	movs	r2, #2
 8005d84:	2130      	movs	r1, #48	@ 0x30
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fd38 	bl	80077fc <u8g2_DrawXBM>

		liquidSensor.getLevel(&FuelPercent);
 8005d8c:	494f      	ldr	r1, [pc, #316]	@ (8005ecc <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x17c>)
 8005d8e:	4850      	ldr	r0, [pc, #320]	@ (8005ed0 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x180>)
 8005d90:	f7fe fd4c 	bl	800482c <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>
		AHT20.measure(&temp, &humid);
 8005d94:	4a4f      	ldr	r2, [pc, #316]	@ (8005ed4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x184>)
 8005d96:	4950      	ldr	r1, [pc, #320]	@ (8005ed8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x188>)
 8005d98:	4850      	ldr	r0, [pc, #320]	@ (8005edc <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x18c>)
 8005d9a:	f7fe fbbf 	bl	800451c <_ZN15sensor_TempHumd5AHT207measureEPmS1_>

		u8g2_SetFontMode(u8g2, 1);
 8005d9e:	2101      	movs	r1, #1
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f002 fa64 	bl	800826e <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005da6:	2102      	movs	r1, #2
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f002 fcee 	bl	800878a <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005dae:	494c      	ldr	r1, [pc, #304]	@ (8005ee0 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x190>)
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f002 fbbd 	bl	8008530 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 26, 9);
 8005db6:	2309      	movs	r3, #9
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	231a      	movs	r3, #26
 8005dbc:	2211      	movs	r2, #17
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 fd5e 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Fuel:");
 8005dc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ee4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x194>)
 8005dc8:	2219      	movs	r2, #25
 8005dca:	2103      	movs	r1, #3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f002 fb0d 	bl	80083ec <u8g2_DrawStr>
		std::sprintf(buffer[0],"%d%%",FuelPercent);
 8005dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ecc <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x17c>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f107 0308 	add.w	r3, r7, #8
 8005ddc:	4942      	ldr	r1, [pc, #264]	@ (8005ee8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x198>)
 8005dde:	4618      	mov	r0, r3
 8005de0:	f00d fac6 	bl	8013370 <siprintf>
		u8g2_DrawStr(u8g2, 5, 35, buffer[0]);
 8005de4:	f107 0308 	add.w	r3, r7, #8
 8005de8:	2223      	movs	r2, #35	@ 0x23
 8005dea:	2105      	movs	r1, #5
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f002 fafd 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 26, 9);
 8005df2:	2309      	movs	r3, #9
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	231a      	movs	r3, #26
 8005df8:	2228      	movs	r2, #40	@ 0x28
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 fd40 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Temp:");
 8005e02:	4b3a      	ldr	r3, [pc, #232]	@ (8005eec <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x19c>)
 8005e04:	2230      	movs	r2, #48	@ 0x30
 8005e06:	2103      	movs	r1, #3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f002 faef 	bl	80083ec <u8g2_DrawStr>
		std::sprintf(buffer[1],"%ldC",temp);
 8005e0e:	4b32      	ldr	r3, [pc, #200]	@ (8005ed8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x188>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	330a      	adds	r3, #10
 8005e18:	4935      	ldr	r1, [pc, #212]	@ (8005ef0 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x1a0>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f00d faa8 	bl	8013370 <siprintf>
		u8g2_DrawStr(u8g2, 5, 58, buffer[1]);
 8005e20:	f107 0308 	add.w	r3, r7, #8
 8005e24:	330a      	adds	r3, #10
 8005e26:	223a      	movs	r2, #58	@ 0x3a
 8005e28:	2105      	movs	r1, #5
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f002 fade 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 86, 17, 31, 9);
 8005e30:	2309      	movs	r3, #9
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	231f      	movs	r3, #31
 8005e36:	2211      	movs	r2, #17
 8005e38:	2156      	movs	r1, #86	@ 0x56
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 fd21 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 88, 25, "Humid:");
 8005e40:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x1a4>)
 8005e42:	2219      	movs	r2, #25
 8005e44:	2158      	movs	r1, #88	@ 0x58
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f002 fad0 	bl	80083ec <u8g2_DrawStr>
		std::sprintf(buffer[2],"%ld%%",humid);
 8005e4c:	4b21      	ldr	r3, [pc, #132]	@ (8005ed4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x184>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f107 0308 	add.w	r3, r7, #8
 8005e54:	3314      	adds	r3, #20
 8005e56:	4928      	ldr	r1, [pc, #160]	@ (8005ef8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x1a8>)
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f00d fa89 	bl	8013370 <siprintf>
		u8g2_DrawStr(u8g2, 88, 35, buffer[2]);
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	3314      	adds	r3, #20
 8005e64:	2223      	movs	r2, #35	@ 0x23
 8005e66:	2158      	movs	r1, #88	@ 0x58
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f002 fabf 	bl	80083ec <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fdb0 	bl	80079d4 <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 8005e74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e78:	f001 fac4 	bl	8007404 <_ZN6button14get_eventTimedEm>
 8005e7c:	62b8      	str	r0, [r7, #40]	@ 0x28
		if(btncodes == button::btncodes::cNONE )
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x140>
		  {
			scroll++;
 8005e84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e88:	3301      	adds	r3, #1
 8005e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005e8e:	e002      	b.n	8005e96 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x146>
		  }
		else
		{
			scroll = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x156>
 8005e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	f67f af5f 	bls.w	8005d64 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT)
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	2b0a      	cmp	r3, #10
 8005eaa:	d102      	bne.n	8005eb2 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x162>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005eac:	2006      	movs	r0, #6
 8005eae:	f001 f999 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8005eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d902      	bls.n	8005ec0 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x170>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 8005eba:	2032      	movs	r0, #50	@ 0x32
 8005ebc:	f001 fac0 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	}


}
 8005ec0:	bf00      	nop
 8005ec2:	3730      	adds	r7, #48	@ 0x30
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	080167e8 	.word	0x080167e8
 8005ecc:	20001c2c 	.word	0x20001c2c
 8005ed0:	20001ae0 	.word	0x20001ae0
 8005ed4:	20001c34 	.word	0x20001c34
 8005ed8:	20001c30 	.word	0x20001c30
 8005edc:	20001b1c 	.word	0x20001b1c
 8005ee0:	08016bf4 	.word	0x08016bf4
 8005ee4:	08015dc0 	.word	0x08015dc0
 8005ee8:	08015dc8 	.word	0x08015dc8
 8005eec:	08015dd0 	.word	0x08015dd0
 8005ef0:	08015dd8 	.word	0x08015dd8
 8005ef4:	08015de0 	.word	0x08015de0
 8005ef8:	08015de8 	.word	0x08015de8

08005efc <_ZN2UI6AlarmsEP11u8g2_struct>:
void Alarms(u8g2_t *u8g2) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005f04:	2000      	movs	r0, #0
 8005f06:	f001 fa9b 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
	do {

		u8g2_ClearBuffer(u8g2);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fced 	bl	80078ee <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f981 	bl	800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 8005f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006014 <_ZN2UI6AlarmsEP11u8g2_struct+0x118>)
 8005f1c:	7919      	ldrb	r1, [r3, #4]
 8005f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <_ZN2UI6AlarmsEP11u8g2_struct+0x118>)
 8005f20:	795b      	ldrb	r3, [r3, #5]
				imgcont::Alarms.img);
 8005f22:	4a3c      	ldr	r2, [pc, #240]	@ (8006014 <_ZN2UI6AlarmsEP11u8g2_struct+0x118>)
 8005f24:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	2130      	movs	r1, #48	@ 0x30
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 fc63 	bl	80077fc <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005f36:	2101      	movs	r1, #1
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 f998 	bl	800826e <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005f3e:	2102      	movs	r1, #2
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 fc22 	bl	800878a <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005f46:	4934      	ldr	r1, [pc, #208]	@ (8006018 <_ZN2UI6AlarmsEP11u8g2_struct+0x11c>)
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 faf1 	bl	8008530 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 51, 9);
 8005f4e:	2309      	movs	r3, #9
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2333      	movs	r3, #51	@ 0x33
 8005f54:	2211      	movs	r2, #17
 8005f56:	2102      	movs	r1, #2
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fc92 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Frequency:");
 8005f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800601c <_ZN2UI6AlarmsEP11u8g2_struct+0x120>)
 8005f60:	2219      	movs	r2, #25
 8005f62:	2103      	movs	r1, #3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f002 fa41 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 35, "Normal"); //Over // under
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006020 <_ZN2UI6AlarmsEP11u8g2_struct+0x124>)
 8005f6c:	2223      	movs	r2, #35	@ 0x23
 8005f6e:	2105      	movs	r1, #5
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f002 fa3b 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8005f76:	2309      	movs	r3, #9
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	232e      	movs	r3, #46	@ 0x2e
 8005f7c:	2228      	movs	r2, #40	@ 0x28
 8005f7e:	2102      	movs	r1, #2
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fc7e 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Overload:");
 8005f86:	4b27      	ldr	r3, [pc, #156]	@ (8006024 <_ZN2UI6AlarmsEP11u8g2_struct+0x128>)
 8005f88:	2230      	movs	r2, #48	@ 0x30
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 fa2d 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Normal"); //Over under
 8005f92:	4b23      	ldr	r3, [pc, #140]	@ (8006020 <_ZN2UI6AlarmsEP11u8g2_struct+0x124>)
 8005f94:	223a      	movs	r2, #58	@ 0x3a
 8005f96:	2105      	movs	r1, #5
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f002 fa27 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 8005f9e:	2309      	movs	r3, #9
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2333      	movs	r3, #51	@ 0x33
 8005fa4:	2211      	movs	r2, #17
 8005fa6:	2151      	movs	r1, #81	@ 0x51
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 fc6a 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "Phaseload:");
 8005fae:	4b1e      	ldr	r3, [pc, #120]	@ (8006028 <_ZN2UI6AlarmsEP11u8g2_struct+0x12c>)
 8005fb0:	2219      	movs	r2, #25
 8005fb2:	2152      	movs	r1, #82	@ 0x52
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f002 fa19 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Normal"); //Over under
 8005fba:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <_ZN2UI6AlarmsEP11u8g2_struct+0x124>)
 8005fbc:	2223      	movs	r2, #35	@ 0x23
 8005fbe:	2152      	movs	r1, #82	@ 0x52
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f002 fa13 	bl	80083ec <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fd04 	bl	80079d4 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005fd0:	f001 fa18 	bl	8007404 <_ZN6button14get_eventTimedEm>
 8005fd4:	60b8      	str	r0, [r7, #8]
		if(btncodes == button::btncodes::cNONE )
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <_ZN2UI6AlarmsEP11u8g2_struct+0xe8>
		  {
			scroll++;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
 8005fe2:	e001      	b.n	8005fe8 <_ZN2UI6AlarmsEP11u8g2_struct+0xec>
		  }
		else
		{
			scroll = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <_ZN2UI6AlarmsEP11u8g2_struct+0xf8>
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d98c      	bls.n	8005f0e <_ZN2UI6AlarmsEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cEnter_BT)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b0a      	cmp	r3, #10
 8005ff8:	d102      	bne.n	8006000 <_ZN2UI6AlarmsEP11u8g2_struct+0x104>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005ffa:	2006      	movs	r0, #6
 8005ffc:	f001 f8f2 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d902      	bls.n	800600c <_ZN2UI6AlarmsEP11u8g2_struct+0x110>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 8006006:	2032      	movs	r0, #50	@ 0x32
 8006008:	f001 fa1a 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	}

}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	080167e0 	.word	0x080167e0
 8006018:	08016bf4 	.word	0x08016bf4
 800601c:	08015df0 	.word	0x08015df0
 8006020:	08015dfc 	.word	0x08015dfc
 8006024:	08015e04 	.word	0x08015e04
 8006028:	08015e10 	.word	0x08015e10

0800602c <_ZN2UI7BatteryEP11u8g2_struct>:
void Battery(u8g2_t *u8g2) {
 800602c:	b5b0      	push	{r4, r5, r7, lr}
 800602e:	b0a0      	sub	sp, #128	@ 0x80
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8006034:	2000      	movs	r0, #0
 8006036:	f001 fa03 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		char StringEndTime[20];

		RTC_TimeTypeDef DTimeCharging_;
		RTC_TimeTypeDef DTimeDischarging_;

		getChargeTimestamp(&DTimeCharging_);
 8006040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006044:	4618      	mov	r0, r3
 8006046:	f7fb f81f 	bl	8001088 <_Z18getChargeTimestampP15RTC_TimeTypeDef>
		getDischargeTimestamp(&DTimeDischarging_);
 800604a:	f107 0318 	add.w	r3, r7, #24
 800604e:	4618      	mov	r0, r3
 8006050:	f7fb f82a 	bl	80010a8 <_Z21getDischargeTimestampP15RTC_TimeTypeDef>

		std::sprintf(StringStartTime, "%02d:%02d:%02d", DTimeCharging_.Hours, DTimeCharging_.Minutes,DTimeCharging_.Seconds);
 8006054:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006058:	461a      	mov	r2, r3
 800605a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800605e:	4619      	mov	r1, r3
 8006060:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006064:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	460b      	mov	r3, r1
 800606c:	495e      	ldr	r1, [pc, #376]	@ (80061e8 <_ZN2UI7BatteryEP11u8g2_struct+0x1bc>)
 800606e:	f00d f97f 	bl	8013370 <siprintf>

		std::sprintf(StringEndTime, "%02d:%02d:%02d", DTimeDischarging_.Hours, DTimeDischarging_.Minutes,DTimeDischarging_.Seconds);
 8006072:	7e3b      	ldrb	r3, [r7, #24]
 8006074:	461a      	mov	r2, r3
 8006076:	7e7b      	ldrb	r3, [r7, #25]
 8006078:	4619      	mov	r1, r3
 800607a:	7ebb      	ldrb	r3, [r7, #26]
 800607c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	460b      	mov	r3, r1
 8006084:	4958      	ldr	r1, [pc, #352]	@ (80061e8 <_ZN2UI7BatteryEP11u8g2_struct+0x1bc>)
 8006086:	f00d f973 	bl	8013370 <siprintf>

		DCCurrentSensor.getCurrent(&curr);
 800608a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800608e:	4619      	mov	r1, r3
 8006090:	4856      	ldr	r0, [pc, #344]	@ (80061ec <_ZN2UI7BatteryEP11u8g2_struct+0x1c0>)
 8006092:	f7fe f8df 	bl	8004254 <_ZN13sensor_DcHall6DcHall10getCurrentEPf>


		u8g2_ClearBuffer(u8g2);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fc29 	bl	80078ee <u8g2_ClearBuffer>

		soc = SOC::getSoCVal();
 800609c:	f7fd ff0a 	bl	8003eb4 <_ZN3SOC9getSoCValEv>
 80060a0:	4603      	mov	r3, r0
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

		char currentA[10];

		std::sprintf(currentA,"%.01f%%/%.02f",soc,curr);
 80060ae:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80060b0:	f7fa fa4a 	bl	8000548 <__aeabi_f2d>
 80060b4:	4604      	mov	r4, r0
 80060b6:	460d      	mov	r5, r1
 80060b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fa fa44 	bl	8000548 <__aeabi_f2d>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	f107 000c 	add.w	r0, r7, #12
 80060c8:	e9cd 2300 	strd	r2, r3, [sp]
 80060cc:	4622      	mov	r2, r4
 80060ce:	462b      	mov	r3, r5
 80060d0:	4947      	ldr	r1, [pc, #284]	@ (80061f0 <_ZN2UI7BatteryEP11u8g2_struct+0x1c4>)
 80060d2:	f00d f94d 	bl	8013370 <siprintf>


		UI::UI_helper::common_iconsMain(u8g2);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 f8a0 	bl	800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 80060dc:	4b45      	ldr	r3, [pc, #276]	@ (80061f4 <_ZN2UI7BatteryEP11u8g2_struct+0x1c8>)
 80060de:	7919      	ldrb	r1, [r3, #4]
 80060e0:	4b44      	ldr	r3, [pc, #272]	@ (80061f4 <_ZN2UI7BatteryEP11u8g2_struct+0x1c8>)
 80060e2:	795b      	ldrb	r3, [r3, #5]
				imgcont::Battery.img);
 80060e4:	4a43      	ldr	r2, [pc, #268]	@ (80061f4 <_ZN2UI7BatteryEP11u8g2_struct+0x1c8>)
 80060e6:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 80060e8:	9201      	str	r2, [sp, #4]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	460b      	mov	r3, r1
 80060ee:	2202      	movs	r2, #2
 80060f0:	2130      	movs	r1, #48	@ 0x30
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fb82 	bl	80077fc <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 80060f8:	2101      	movs	r1, #1
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 f8b7 	bl	800826e <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8006100:	2102      	movs	r1, #2
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f002 fb41 	bl	800878a <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006108:	493b      	ldr	r1, [pc, #236]	@ (80061f8 <_ZN2UI7BatteryEP11u8g2_struct+0x1cc>)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f002 fa10 	bl	8008530 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 8006110:	2309      	movs	r3, #9
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2329      	movs	r3, #41	@ 0x29
 8006116:	2211      	movs	r2, #17
 8006118:	2102      	movs	r1, #2
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fbb1 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Percent:");
 8006120:	4b36      	ldr	r3, [pc, #216]	@ (80061fc <_ZN2UI7BatteryEP11u8g2_struct+0x1d0>)
 8006122:	2219      	movs	r2, #25
 8006124:	2103      	movs	r1, #3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f002 f960 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 1, 35, currentA);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	2223      	movs	r2, #35	@ 0x23
 8006132:	2101      	movs	r1, #1
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f002 f959 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 800613a:	2309      	movs	r3, #9
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	232e      	movs	r3, #46	@ 0x2e
 8006140:	2228      	movs	r2, #40	@ 0x28
 8006142:	2102      	movs	r1, #2
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fb9c 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "ChrgTime:");
 800614a:	4b2d      	ldr	r3, [pc, #180]	@ (8006200 <_ZN2UI7BatteryEP11u8g2_struct+0x1d4>)
 800614c:	2230      	movs	r2, #48	@ 0x30
 800614e:	2103      	movs	r1, #3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f002 f94b 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, StringStartTime);
 8006156:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800615a:	223a      	movs	r2, #58	@ 0x3a
 800615c:	2105      	movs	r1, #5
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f002 f944 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 8006164:	2309      	movs	r3, #9
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2333      	movs	r3, #51	@ 0x33
 800616a:	2211      	movs	r2, #17
 800616c:	2151      	movs	r1, #81	@ 0x51
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fb87 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "DchrgTime:");
 8006174:	4b23      	ldr	r3, [pc, #140]	@ (8006204 <_ZN2UI7BatteryEP11u8g2_struct+0x1d8>)
 8006176:	2219      	movs	r2, #25
 8006178:	2152      	movs	r1, #82	@ 0x52
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f002 f936 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, StringEndTime);
 8006180:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006184:	2223      	movs	r2, #35	@ 0x23
 8006186:	2152      	movs	r1, #82	@ 0x52
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f002 f92f 	bl	80083ec <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fc20 	bl	80079d4 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8006194:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006198:	f001 f934 	bl	8007404 <_ZN6button14get_eventTimedEm>
 800619c:	66f8      	str	r0, [r7, #108]	@ 0x6c

		if(btncodes == button::btncodes::cNONE )
 800619e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <_ZN2UI7BatteryEP11u8g2_struct+0x184>
		  {
			scroll++;
 80061a4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80061a8:	3301      	adds	r3, #1
 80061aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80061ae:	e002      	b.n	80061b6 <_ZN2UI7BatteryEP11u8g2_struct+0x18a>
		  }
		else
		{
			scroll = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 80061b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <_ZN2UI7BatteryEP11u8g2_struct+0x19a>
 80061bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	f67f af3d 	bls.w	8006040 <_ZN2UI7BatteryEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT)
 80061c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061c8:	2b0a      	cmp	r3, #10
 80061ca:	d102      	bne.n	80061d2 <_ZN2UI7BatteryEP11u8g2_struct+0x1a6>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80061cc:	2006      	movs	r0, #6
 80061ce:	f001 f809 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 80061d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d902      	bls.n	80061e0 <_ZN2UI7BatteryEP11u8g2_struct+0x1b4>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 80061da:	2032      	movs	r0, #50	@ 0x32
 80061dc:	f001 f930 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	}

}
 80061e0:	bf00      	nop
 80061e2:	3778      	adds	r7, #120	@ 0x78
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bdb0      	pop	{r4, r5, r7, pc}
 80061e8:	08015e1c 	.word	0x08015e1c
 80061ec:	20001bac 	.word	0x20001bac
 80061f0:	08015e2c 	.word	0x08015e2c
 80061f4:	080167d8 	.word	0x080167d8
 80061f8:	08016bf4 	.word	0x08016bf4
 80061fc:	08015e3c 	.word	0x08015e3c
 8006200:	08015e48 	.word	0x08015e48
 8006204:	08015e54 	.word	0x08015e54

08006208 <_ZN2UI6sourceEP11u8g2_struct>:
void source(u8g2_t *u8g2) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b096      	sub	sp, #88	@ 0x58
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8006210:	2000      	movs	r0, #0
 8006212:	f001 f915 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	do {

		uint8_t source;
		u8g2_ClearBuffer(u8g2);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fb66 	bl	80078ee <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fffa 	bl	800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 8006228:	4b75      	ldr	r3, [pc, #468]	@ (8006400 <_ZN2UI6sourceEP11u8g2_struct+0x1f8>)
 800622a:	7919      	ldrb	r1, [r3, #4]
 800622c:	4b74      	ldr	r3, [pc, #464]	@ (8006400 <_ZN2UI6sourceEP11u8g2_struct+0x1f8>)
 800622e:	795b      	ldrb	r3, [r3, #5]
				imgcont::Source.img);
 8006230:	4a73      	ldr	r2, [pc, #460]	@ (8006400 <_ZN2UI6sourceEP11u8g2_struct+0x1f8>)
 8006232:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 8006234:	9201      	str	r2, [sp, #4]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	460b      	mov	r3, r1
 800623a:	2202      	movs	r2, #2
 800623c:	2130      	movs	r1, #48	@ 0x30
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fadc 	bl	80077fc <u8g2_DrawXBM>

		source = getSourceState();
 8006244:	f7fa ff14 	bl	8001070 <_Z14getSourceStatev>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		char selec_Source[3][20];
		if(source == 0)
 800624e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11c      	bne.n	8006290 <_ZN2UI6sourceEP11u8g2_struct+0x88>
		{
		    std::strcpy(selec_Source[0], "Active");
 8006256:	f107 030c 	add.w	r3, r7, #12
 800625a:	4a6a      	ldr	r2, [pc, #424]	@ (8006404 <_ZN2UI6sourceEP11u8g2_struct+0x1fc>)
 800625c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006260:	6018      	str	r0, [r3, #0]
 8006262:	3304      	adds	r3, #4
 8006264:	8019      	strh	r1, [r3, #0]
 8006266:	3302      	adds	r3, #2
 8006268:	0c0a      	lsrs	r2, r1, #16
 800626a:	701a      	strb	r2, [r3, #0]
		    std::strcpy(selec_Source[1], "Idle");
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	3314      	adds	r3, #20
 8006272:	4a65      	ldr	r2, [pc, #404]	@ (8006408 <_ZN2UI6sourceEP11u8g2_struct+0x200>)
 8006274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006278:	6018      	str	r0, [r3, #0]
 800627a:	3304      	adds	r3, #4
 800627c:	7019      	strb	r1, [r3, #0]
		    std::strcpy(selec_Source[2], "Standby");
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	3328      	adds	r3, #40	@ 0x28
 8006284:	4a61      	ldr	r2, [pc, #388]	@ (800640c <_ZN2UI6sourceEP11u8g2_struct+0x204>)
 8006286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800628a:	e883 0003 	stmia.w	r3, {r0, r1}
 800628e:	e03d      	b.n	800630c <_ZN2UI6sourceEP11u8g2_struct+0x104>
		}
		else if(source == 1)
 8006290:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8006294:	2b01      	cmp	r3, #1
 8006296:	d11a      	bne.n	80062ce <_ZN2UI6sourceEP11u8g2_struct+0xc6>
		{
		    std::strcpy(selec_Source[0], "Charging");
 8006298:	f107 030c 	add.w	r3, r7, #12
 800629c:	4a5c      	ldr	r2, [pc, #368]	@ (8006410 <_ZN2UI6sourceEP11u8g2_struct+0x208>)
 800629e:	ca07      	ldmia	r2, {r0, r1, r2}
 80062a0:	c303      	stmia	r3!, {r0, r1}
 80062a2:	701a      	strb	r2, [r3, #0]
		    std::strcpy(selec_Source[1], "Active");
 80062a4:	f107 030c 	add.w	r3, r7, #12
 80062a8:	3314      	adds	r3, #20
 80062aa:	4a56      	ldr	r2, [pc, #344]	@ (8006404 <_ZN2UI6sourceEP11u8g2_struct+0x1fc>)
 80062ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062b0:	6018      	str	r0, [r3, #0]
 80062b2:	3304      	adds	r3, #4
 80062b4:	8019      	strh	r1, [r3, #0]
 80062b6:	3302      	adds	r3, #2
 80062b8:	0c0a      	lsrs	r2, r1, #16
 80062ba:	701a      	strb	r2, [r3, #0]
		    std::strcpy(selec_Source[2], "Standby");
 80062bc:	f107 030c 	add.w	r3, r7, #12
 80062c0:	3328      	adds	r3, #40	@ 0x28
 80062c2:	4a52      	ldr	r2, [pc, #328]	@ (800640c <_ZN2UI6sourceEP11u8g2_struct+0x204>)
 80062c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80062cc:	e01e      	b.n	800630c <_ZN2UI6sourceEP11u8g2_struct+0x104>
		}
		else if(source == 2)
 80062ce:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11a      	bne.n	800630c <_ZN2UI6sourceEP11u8g2_struct+0x104>
		{
		    std::strcpy(selec_Source[0], "Charging");
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	4a4d      	ldr	r2, [pc, #308]	@ (8006410 <_ZN2UI6sourceEP11u8g2_struct+0x208>)
 80062dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80062de:	c303      	stmia	r3!, {r0, r1}
 80062e0:	701a      	strb	r2, [r3, #0]
		    std::strcpy(selec_Source[1], "Idle");
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	3314      	adds	r3, #20
 80062e8:	4a47      	ldr	r2, [pc, #284]	@ (8006408 <_ZN2UI6sourceEP11u8g2_struct+0x200>)
 80062ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062ee:	6018      	str	r0, [r3, #0]
 80062f0:	3304      	adds	r3, #4
 80062f2:	7019      	strb	r1, [r3, #0]
		    std::strcpy(selec_Source[2], "Active");
 80062f4:	f107 030c 	add.w	r3, r7, #12
 80062f8:	3328      	adds	r3, #40	@ 0x28
 80062fa:	4a42      	ldr	r2, [pc, #264]	@ (8006404 <_ZN2UI6sourceEP11u8g2_struct+0x1fc>)
 80062fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006300:	6018      	str	r0, [r3, #0]
 8006302:	3304      	adds	r3, #4
 8006304:	8019      	strh	r1, [r3, #0]
 8006306:	3302      	adds	r3, #2
 8006308:	0c0a      	lsrs	r2, r1, #16
 800630a:	701a      	strb	r2, [r3, #0]
		}

		u8g2_SetFontMode(u8g2, 1);
 800630c:	2101      	movs	r1, #1
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 ffad 	bl	800826e <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8006314:	2102      	movs	r1, #2
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f002 fa37 	bl	800878a <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 800631c:	493d      	ldr	r1, [pc, #244]	@ (8006414 <_ZN2UI6sourceEP11u8g2_struct+0x20c>)
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f002 f906 	bl	8008530 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 8006324:	2309      	movs	r3, #9
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	2329      	movs	r3, #41	@ 0x29
 800632a:	2211      	movs	r2, #17
 800632c:	2102      	movs	r1, #2
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 faa7 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Battery:");
 8006334:	4b38      	ldr	r3, [pc, #224]	@ (8006418 <_ZN2UI6sourceEP11u8g2_struct+0x210>)
 8006336:	2219      	movs	r2, #25
 8006338:	2103      	movs	r1, #3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 f856 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, selec_Source[0]);  //Off
 8006340:	f107 030c 	add.w	r3, r7, #12
 8006344:	2223      	movs	r2, #35	@ 0x23
 8006346:	2102      	movs	r1, #2
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 f84f 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 51, 9);
 800634e:	2309      	movs	r3, #9
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2333      	movs	r3, #51	@ 0x33
 8006354:	2228      	movs	r2, #40	@ 0x28
 8006356:	2102      	movs	r1, #2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fa92 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Generator:");
 800635e:	4b2f      	ldr	r3, [pc, #188]	@ (800641c <_ZN2UI6sourceEP11u8g2_struct+0x214>)
 8006360:	2230      	movs	r2, #48	@ 0x30
 8006362:	2103      	movs	r1, #3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f002 f841 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, selec_Source[1]); //running
 800636a:	f107 030c 	add.w	r3, r7, #12
 800636e:	3314      	adds	r3, #20
 8006370:	223a      	movs	r2, #58	@ 0x3a
 8006372:	2105      	movs	r1, #5
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 f839 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 31, 9);
 800637a:	2309      	movs	r3, #9
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	231f      	movs	r3, #31
 8006380:	2211      	movs	r2, #17
 8006382:	2154      	movs	r1, #84	@ 0x54
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fa7c 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Solar:");
 800638a:	4b25      	ldr	r3, [pc, #148]	@ (8006420 <_ZN2UI6sourceEP11u8g2_struct+0x218>)
 800638c:	2219      	movs	r2, #25
 800638e:	2155      	movs	r1, #85	@ 0x55
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 f82b 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35,selec_Source[2]); //Online
 8006396:	f107 030c 	add.w	r3, r7, #12
 800639a:	3328      	adds	r3, #40	@ 0x28
 800639c:	2223      	movs	r2, #35	@ 0x23
 800639e:	2152      	movs	r1, #82	@ 0x52
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f002 f823 	bl	80083ec <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fb14 	bl	80079d4 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 80063ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80063b0:	f001 f828 	bl	8007404 <_ZN6button14get_eventTimedEm>
 80063b4:	64b8      	str	r0, [r7, #72]	@ 0x48
		if(btncodes == button::btncodes::cNONE )
 80063b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <_ZN2UI6sourceEP11u8g2_struct+0x1c0>
		  {
			scroll++;
 80063bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80063c0:	3301      	adds	r3, #1
 80063c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80063c6:	e002      	b.n	80063ce <_ZN2UI6sourceEP11u8g2_struct+0x1c6>
		  }
		else
		{
			scroll = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 80063ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <_ZN2UI6sourceEP11u8g2_struct+0x1d6>
 80063d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f67f af1f 	bls.w	800621c <_ZN2UI6sourceEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT)
 80063de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063e0:	2b0a      	cmp	r3, #10
 80063e2:	d102      	bne.n	80063ea <_ZN2UI6sourceEP11u8g2_struct+0x1e2>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80063e4:	2006      	movs	r0, #6
 80063e6:	f000 fefd 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 80063ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d902      	bls.n	80063f8 <_ZN2UI6sourceEP11u8g2_struct+0x1f0>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 80063f2:	2032      	movs	r0, #50	@ 0x32
 80063f4:	f001 f824 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	}

}
 80063f8:	bf00      	nop
 80063fa:	3750      	adds	r7, #80	@ 0x50
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	080167d0 	.word	0x080167d0
 8006404:	08015e60 	.word	0x08015e60
 8006408:	08015e68 	.word	0x08015e68
 800640c:	08015e70 	.word	0x08015e70
 8006410:	08015e78 	.word	0x08015e78
 8006414:	08016bf4 	.word	0x08016bf4
 8006418:	08015e84 	.word	0x08015e84
 800641c:	08015e90 	.word	0x08015e90
 8006420:	08015e9c 	.word	0x08015e9c

08006424 <_ZN2UI7networkEP11u8g2_struct>:
void network(u8g2_t *u8g2) {
 8006424:	b5b0      	push	{r4, r5, r7, lr}
 8006426:	b096      	sub	sp, #88	@ 0x58
 8006428:	af02      	add	r7, sp, #8
 800642a:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 800642c:	2000      	movs	r0, #0
 800642e:	f001 f807 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	do {

		u8g2_ClearBuffer(u8g2);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fa58 	bl	80078ee <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 feec 	bl	800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 8006444:	4b59      	ldr	r3, [pc, #356]	@ (80065ac <_ZN2UI7networkEP11u8g2_struct+0x188>)
 8006446:	7919      	ldrb	r1, [r3, #4]
 8006448:	4b58      	ldr	r3, [pc, #352]	@ (80065ac <_ZN2UI7networkEP11u8g2_struct+0x188>)
 800644a:	795b      	ldrb	r3, [r3, #5]
				imgcont::Network.img);
 800644c:	4a57      	ldr	r2, [pc, #348]	@ (80065ac <_ZN2UI7networkEP11u8g2_struct+0x188>)
 800644e:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 8006450:	9201      	str	r2, [sp, #4]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	460b      	mov	r3, r1
 8006456:	2202      	movs	r2, #2
 8006458:	2130      	movs	r1, #48	@ 0x30
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f9ce 	bl	80077fc <u8g2_DrawXBM>

		char buf[3][20] = {
 8006460:	4b53      	ldr	r3, [pc, #332]	@ (80065b0 <_ZN2UI7networkEP11u8g2_struct+0x18c>)
 8006462:	f107 040c 	add.w	r4, r7, #12
 8006466:	461d      	mov	r5, r3
 8006468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800646a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800646e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				" ",
				" ",
				" "
		};
	    std::strcpy(buf[0], getModemNetwork());
 800647c:	f7fb f8a6 	bl	80015cc <_Z15getModemNetworkv>
 8006480:	4602      	mov	r2, r0
 8006482:	f107 030c 	add.w	r3, r7, #12
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f00d f8e0 	bl	801364e <strcpy>
		std::strcpy(buf[1], getSignalQuality());
 800648e:	f7fb f8a7 	bl	80015e0 <_Z16getSignalQualityv>
 8006492:	4602      	mov	r2, r0
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	3314      	adds	r3, #20
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f00d f8d6 	bl	801364e <strcpy>
	    std::strcpy(buf[2], getModemData());
 80064a2:	f7fb f8a7 	bl	80015f4 <_Z12getModemDatav>
 80064a6:	4602      	mov	r2, r0
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	3328      	adds	r3, #40	@ 0x28
 80064ae:	4611      	mov	r1, r2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f00d f8cc 	bl	801364e <strcpy>

	    u8g2_SetFontMode(u8g2, 1);
 80064b6:	2101      	movs	r1, #1
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fed8 	bl	800826e <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 80064be:	2102      	movs	r1, #2
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f002 f962 	bl	800878a <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80064c6:	493b      	ldr	r1, [pc, #236]	@ (80065b4 <_ZN2UI7networkEP11u8g2_struct+0x190>)
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 f831 	bl	8008530 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 80064ce:	2309      	movs	r3, #9
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2329      	movs	r3, #41	@ 0x29
 80064d4:	2211      	movs	r2, #17
 80064d6:	2102      	movs	r1, #2
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 f9d2 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Network:");
 80064de:	4b36      	ldr	r3, [pc, #216]	@ (80065b8 <_ZN2UI7networkEP11u8g2_struct+0x194>)
 80064e0:	2219      	movs	r2, #25
 80064e2:	2103      	movs	r1, #3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 ff81 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, buf[0]);
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	2223      	movs	r2, #35	@ 0x23
 80064f0:	2102      	movs	r1, #2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 ff7a 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 80064f8:	2309      	movs	r3, #9
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	232e      	movs	r3, #46	@ 0x2e
 80064fe:	2228      	movs	r2, #40	@ 0x28
 8006500:	2102      	movs	r1, #2
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f9bd 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Signal-Q:");
 8006508:	4b2c      	ldr	r3, [pc, #176]	@ (80065bc <_ZN2UI7networkEP11u8g2_struct+0x198>)
 800650a:	2230      	movs	r2, #48	@ 0x30
 800650c:	2103      	movs	r1, #3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 ff6c 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, buf[1]);
 8006514:	f107 030c 	add.w	r3, r7, #12
 8006518:	3314      	adds	r3, #20
 800651a:	223a      	movs	r2, #58	@ 0x3a
 800651c:	2105      	movs	r1, #5
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 ff64 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 26, 9);
 8006524:	2309      	movs	r3, #9
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	231a      	movs	r3, #26
 800652a:	2211      	movs	r2, #17
 800652c:	2154      	movs	r1, #84	@ 0x54
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 f9a7 	bl	8007882 <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Data:");
 8006534:	4b22      	ldr	r3, [pc, #136]	@ (80065c0 <_ZN2UI7networkEP11u8g2_struct+0x19c>)
 8006536:	2219      	movs	r2, #25
 8006538:	2155      	movs	r1, #85	@ 0x55
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 ff56 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 83, 35, buf[2]);
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	3328      	adds	r3, #40	@ 0x28
 8006546:	2223      	movs	r2, #35	@ 0x23
 8006548:	2153      	movs	r1, #83	@ 0x53
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 ff4e 	bl	80083ec <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fa3f 	bl	80079d4 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8006556:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800655a:	f000 ff53 	bl	8007404 <_ZN6button14get_eventTimedEm>
 800655e:	64b8      	str	r0, [r7, #72]	@ 0x48
		if(btncodes == button::btncodes::cNONE )
 8006560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006562:	2b00      	cmp	r3, #0
 8006564:	d105      	bne.n	8006572 <_ZN2UI7networkEP11u8g2_struct+0x14e>
		  {
			scroll++;
 8006566:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800656a:	3301      	adds	r3, #1
 800656c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006570:	e002      	b.n	8006578 <_ZN2UI7networkEP11u8g2_struct+0x154>
		  }
		else
		{
			scroll = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		}

	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 8006578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <_ZN2UI7networkEP11u8g2_struct+0x164>
 800657e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006582:	2b01      	cmp	r3, #1
 8006584:	f67f af58 	bls.w	8006438 <_ZN2UI7networkEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT)
 8006588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800658a:	2b0a      	cmp	r3, #10
 800658c:	d102      	bne.n	8006594 <_ZN2UI7networkEP11u8g2_struct+0x170>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 800658e:	2006      	movs	r0, #6
 8006590:	f000 fe28 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8006594:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006598:	2b01      	cmp	r3, #1
 800659a:	d902      	bls.n	80065a2 <_ZN2UI7networkEP11u8g2_struct+0x17e>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 800659c:	2032      	movs	r0, #50	@ 0x32
 800659e:	f000 ff4f 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	}
}
 80065a2:	bf00      	nop
 80065a4:	3750      	adds	r7, #80	@ 0x50
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bdb0      	pop	{r4, r5, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	080167c8 	.word	0x080167c8
 80065b0:	08015ec4 	.word	0x08015ec4
 80065b4:	08016bf4 	.word	0x08016bf4
 80065b8:	08015ea4 	.word	0x08015ea4
 80065bc:	08015eb0 	.word	0x08015eb0
 80065c0:	08015ebc 	.word	0x08015ebc

080065c4 <_ZN2UI5powerEP11u8g2_struct>:

void power(u8g2_t *u8g2) {
 80065c4:	b5b0      	push	{r4, r5, r7, lr}
 80065c6:	b0b6      	sub	sp, #216	@ 0xd8
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	6278      	str	r0, [r7, #36]	@ 0x24

	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80065cc:	2000      	movs	r0, #0
 80065ce:	f000 ff37 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	sensor_pzem::PZEM_004T::PZEM PZEM1_Data = {0};
 80065d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	611a      	str	r2, [r3, #16]
 80065e8:	615a      	str	r2, [r3, #20]
 80065ea:	619a      	str	r2, [r3, #24]
	sensor_pzem::PZEM_004T::PZEM PZEM2_Data=  {0};
 80065ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	611a      	str	r2, [r3, #16]
 80065fc:	615a      	str	r2, [r3, #20]
 80065fe:	619a      	str	r2, [r3, #24]
	sensor_pzem::PZEM_004T::PZEM PZEM3_Data=  {0};
 8006600:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	611a      	str	r2, [r3, #16]
 8006610:	615a      	str	r2, [r3, #20]
 8006612:	619a      	str	r2, [r3, #24]

	do {

		u8g2_ClearBuffer(u8g2);
 8006614:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006616:	f001 f96a 	bl	80078ee <u8g2_ClearBuffer>


		PZEM1_Data = getACData1();
 800661a:	463b      	mov	r3, r7
 800661c:	4618      	mov	r0, r3
 800661e:	f7fa fd53 	bl	80010c8 <_Z10getACData1v>
 8006622:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8006626:	463d      	mov	r5, r7
 8006628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800662a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PZEM2_Data = getACData2();
 8006634:	463b      	mov	r3, r7
 8006636:	4618      	mov	r0, r3
 8006638:	f7fa fd5c 	bl	80010f4 <_Z10getACData2v>
 800663c:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8006640:	463d      	mov	r5, r7
 8006642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800664a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PZEM3_Data = getACData3();
 800664e:	463b      	mov	r3, r7
 8006650:	4618      	mov	r0, r3
 8006652:	f7fa fd65 	bl	8001120 <_Z10getACData3v>
 8006656:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800665a:	463d      	mov	r5, r7
 800665c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        char V_2[10];
        char I_2[10];
        char V_3[10];
        char I_3[10];

        std::sprintf(V_1,"%.1f",PZEM1_Data.voltage);
 8006668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800666c:	4618      	mov	r0, r3
 800666e:	f7f9 ff6b 	bl	8000548 <__aeabi_f2d>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800667a:	4964      	ldr	r1, [pc, #400]	@ (800680c <_ZN2UI5powerEP11u8g2_struct+0x248>)
 800667c:	f00c fe78 	bl	8013370 <siprintf>
        std::sprintf(I_1,"%.1f",PZEM1_Data.current);
 8006680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006684:	4618      	mov	r0, r3
 8006686:	f7f9 ff5f 	bl	8000548 <__aeabi_f2d>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8006692:	495e      	ldr	r1, [pc, #376]	@ (800680c <_ZN2UI5powerEP11u8g2_struct+0x248>)
 8006694:	f00c fe6c 	bl	8013370 <siprintf>
        std::sprintf(V_2,"%.1f",PZEM2_Data.power);
 8006698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800669c:	4618      	mov	r0, r3
 800669e:	f7f9 ff53 	bl	8000548 <__aeabi_f2d>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80066aa:	4958      	ldr	r1, [pc, #352]	@ (800680c <_ZN2UI5powerEP11u8g2_struct+0x248>)
 80066ac:	f00c fe60 	bl	8013370 <siprintf>
        std::sprintf(I_2,"%.1f",PZEM2_Data.current);
 80066b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7f9 ff47 	bl	8000548 <__aeabi_f2d>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80066c2:	4952      	ldr	r1, [pc, #328]	@ (800680c <_ZN2UI5powerEP11u8g2_struct+0x248>)
 80066c4:	f00c fe54 	bl	8013370 <siprintf>
        std::sprintf(V_3,"%.1f",PZEM3_Data.voltage);
 80066c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7f9 ff3c 	bl	8000548 <__aeabi_f2d>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80066d8:	494c      	ldr	r1, [pc, #304]	@ (800680c <_ZN2UI5powerEP11u8g2_struct+0x248>)
 80066da:	f00c fe49 	bl	8013370 <siprintf>
        std::sprintf(I_3,"%.1f",PZEM3_Data.current);
 80066de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7f9 ff31 	bl	8000548 <__aeabi_f2d>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80066ee:	4947      	ldr	r1, [pc, #284]	@ (800680c <_ZN2UI5powerEP11u8g2_struct+0x248>)
 80066f0:	f00c fe3e 	bl	8013370 <siprintf>


		UI::UI_helper::common_iconsMain(u8g2);
 80066f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066f6:	f000 fd91 	bl	800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80066fa:	4945      	ldr	r1, [pc, #276]	@ (8006810 <_ZN2UI5powerEP11u8g2_struct+0x24c>)
 80066fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066fe:	f001 ff17 	bl	8008530 <u8g2_SetFont>

		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 8006702:	4b44      	ldr	r3, [pc, #272]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 8006704:	7919      	ldrb	r1, [r3, #4]
 8006706:	4b43      	ldr	r3, [pc, #268]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 8006708:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 800670a:	4a42      	ldr	r2, [pc, #264]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 800670c:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 800670e:	9201      	str	r2, [sp, #4]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	460b      	mov	r3, r1
 8006714:	2210      	movs	r2, #16
 8006716:	210a      	movs	r1, #10
 8006718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800671a:	f001 f86f 	bl	80077fc <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 5, 38, V_1);
 800671e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006722:	2226      	movs	r2, #38	@ 0x26
 8006724:	2105      	movs	r1, #5
 8006726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006728:	f001 fe60 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 46, I_1);
 800672c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006730:	222e      	movs	r2, #46	@ 0x2e
 8006732:	2105      	movs	r1, #5
 8006734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006736:	f001 fe59 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 800673a:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 800673c:	7919      	ldrb	r1, [r3, #4]
 800673e:	4b35      	ldr	r3, [pc, #212]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 8006740:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 8006742:	4a34      	ldr	r2, [pc, #208]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 8006744:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 8006746:	9201      	str	r2, [sp, #4]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	460b      	mov	r3, r1
 800674c:	220a      	movs	r2, #10
 800674e:	2136      	movs	r1, #54	@ 0x36
 8006750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006752:	f001 f853 	bl	80077fc <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 50, 32, V_2);
 8006756:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800675a:	2220      	movs	r2, #32
 800675c:	2132      	movs	r1, #50	@ 0x32
 800675e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006760:	f001 fe44 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 50, 40, I_2);
 8006764:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006768:	2228      	movs	r2, #40	@ 0x28
 800676a:	2132      	movs	r1, #50	@ 0x32
 800676c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800676e:	f001 fe3d 	bl	80083ec <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 8006772:	4b28      	ldr	r3, [pc, #160]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 8006774:	7919      	ldrb	r1, [r3, #4]
 8006776:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 8006778:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 800677a:	4a26      	ldr	r2, [pc, #152]	@ (8006814 <_ZN2UI5powerEP11u8g2_struct+0x250>)
 800677c:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	460b      	mov	r3, r1
 8006784:	2210      	movs	r2, #16
 8006786:	2164      	movs	r1, #100	@ 0x64
 8006788:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800678a:	f001 f837 	bl	80077fc <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 96, 38, V_3);
 800678e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006792:	2226      	movs	r2, #38	@ 0x26
 8006794:	2160      	movs	r1, #96	@ 0x60
 8006796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006798:	f001 fe28 	bl	80083ec <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 96, 46, I_3);
 800679c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067a0:	222e      	movs	r2, #46	@ 0x2e
 80067a2:	2160      	movs	r1, #96	@ 0x60
 80067a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067a6:	f001 fe21 	bl	80083ec <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80067aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067ac:	f001 f912 	bl	80079d4 <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 80067b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80067b4:	f000 fe26 	bl	8007404 <_ZN6button14get_eventTimedEm>
 80067b8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
		if(btncodes == button::btncodes::cNONE )
 80067bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <_ZN2UI5powerEP11u8g2_struct+0x20c>
		  {
			scroll++;
 80067c4:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80067c8:	3301      	adds	r3, #1
 80067ca:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 80067ce:	e002      	b.n	80067d6 <_ZN2UI5powerEP11u8g2_struct+0x212>
		  }
		else
		{
			scroll = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		}

	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 80067d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <_ZN2UI5powerEP11u8g2_struct+0x224>
 80067de:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	f67f af16 	bls.w	8006614 <_ZN2UI5powerEP11u8g2_struct+0x50>

	if(btncodes == button::btncodes::cEnter_BT )
 80067e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067ec:	2b0a      	cmp	r3, #10
 80067ee:	d102      	bne.n	80067f6 <_ZN2UI5powerEP11u8g2_struct+0x232>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80067f0:	2006      	movs	r0, #6
 80067f2:	f000 fcf7 	bl	80071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 80067f6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d902      	bls.n	8006804 <_ZN2UI5powerEP11u8g2_struct+0x240>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 80067fe:	2032      	movs	r0, #50	@ 0x32
 8006800:	f000 fe1e 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
	}


}
 8006804:	bf00      	nop
 8006806:	37d0      	adds	r7, #208	@ 0xd0
 8006808:	46bd      	mov	sp, r7
 800680a:	bdb0      	pop	{r4, r5, r7, pc}
 800680c:	08015f00 	.word	0x08015f00
 8006810:	08016bf4 	.word	0x08016bf4
 8006814:	080167c0 	.word	0x080167c0

08006818 <_ZN2UI4loopEP11u8g2_struct>:

void loop(u8g2_t *u8g2) {
 8006818:	b590      	push	{r4, r7, lr}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	uint16_t index;
	if (CurrMenu == MenuNo::None) {
 8006820:	4b81      	ldr	r3, [pc, #516]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b09      	cmp	r3, #9
 8006826:	d102      	bne.n	800682e <_ZN2UI4loopEP11u8g2_struct+0x16>
		CurrMenu =   MenuNo::Power;//MenuNo::Battery;
 8006828:	4b7f      	ldr	r3, [pc, #508]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
	}

	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 800682e:	2300      	movs	r3, #0
 8006830:	81fb      	strh	r3, [r7, #14]
 8006832:	e00e      	b.n	8006852 <_ZN2UI4loopEP11u8g2_struct+0x3a>
			index++) {
		if (CurrMenu == MenuArray[index].MenuNo) // check if this menu is found ?
 8006834:	89fa      	ldrh	r2, [r7, #14]
 8006836:	497d      	ldr	r1, [pc, #500]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006838:	4613      	mov	r3, r2
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b78      	ldr	r3, [pc, #480]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d006      	beq.n	800685a <_ZN2UI4loopEP11u8g2_struct+0x42>
	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	3301      	adds	r3, #1
 8006850:	81fb      	strh	r3, [r7, #14]
 8006852:	89fb      	ldrh	r3, [r7, #14]
 8006854:	2b08      	cmp	r3, #8
 8006856:	d9ed      	bls.n	8006834 <_ZN2UI4loopEP11u8g2_struct+0x1c>
 8006858:	e000      	b.n	800685c <_ZN2UI4loopEP11u8g2_struct+0x44>
				{
			break;
 800685a:	bf00      	nop
		}
	}

	if (index < (sizeof(MenuArray) / sizeof(MenuArray[0]))) {
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	2b08      	cmp	r3, #8
 8006860:	f200 80d9 	bhi.w	8006a16 <_ZN2UI4loopEP11u8g2_struct+0x1fe>
		std::memset(UI::display_buffer, 0, sizeof(UI::display_buffer));
 8006864:	22ff      	movs	r2, #255	@ 0xff
 8006866:	2100      	movs	r1, #0
 8006868:	4871      	ldr	r0, [pc, #452]	@ (8006a30 <_ZN2UI4loopEP11u8g2_struct+0x218>)
 800686a:	f00c fde4 	bl	8013436 <memset>
		MenuArray[index].function(u8g2);
 800686e:	89fa      	ldrh	r2, [r7, #14]
 8006870:	496e      	ldr	r1, [pc, #440]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006872:	4613      	mov	r3, r2
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3304      	adds	r3, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3

		/*Add buttons related logic*/

		switch (button::get_code()) {
 8006884:	f000 fdd0 	bl	8007428 <_ZN6button8get_codeEv>
 8006888:	4603      	mov	r3, r0
 800688a:	2b0a      	cmp	r3, #10
 800688c:	d04e      	beq.n	800692c <_ZN2UI4loopEP11u8g2_struct+0x114>
 800688e:	2b0a      	cmp	r3, #10
 8006890:	f2c0 80c5 	blt.w	8006a1e <_ZN2UI4loopEP11u8g2_struct+0x206>
 8006894:	2b3c      	cmp	r3, #60	@ 0x3c
 8006896:	f300 80c2 	bgt.w	8006a1e <_ZN2UI4loopEP11u8g2_struct+0x206>
 800689a:	2b1e      	cmp	r3, #30
 800689c:	f2c0 80bf 	blt.w	8006a1e <_ZN2UI4loopEP11u8g2_struct+0x206>
 80068a0:	3b1e      	subs	r3, #30
 80068a2:	2b1e      	cmp	r3, #30
 80068a4:	f200 80bb 	bhi.w	8006a1e <_ZN2UI4loopEP11u8g2_struct+0x206>
 80068a8:	a201      	add	r2, pc, #4	@ (adr r2, 80068b0 <_ZN2UI4loopEP11u8g2_struct+0x98>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080069b7 	.word	0x080069b7
 80068b4:	08006a1f 	.word	0x08006a1f
 80068b8:	08006a1f 	.word	0x08006a1f
 80068bc:	08006a1f 	.word	0x08006a1f
 80068c0:	08006a1f 	.word	0x08006a1f
 80068c4:	08006a1f 	.word	0x08006a1f
 80068c8:	08006a1f 	.word	0x08006a1f
 80068cc:	08006a1f 	.word	0x08006a1f
 80068d0:	08006a1f 	.word	0x08006a1f
 80068d4:	08006a1f 	.word	0x08006a1f
 80068d8:	080069cf 	.word	0x080069cf
 80068dc:	08006a1f 	.word	0x08006a1f
 80068e0:	08006a1f 	.word	0x08006a1f
 80068e4:	08006a1f 	.word	0x08006a1f
 80068e8:	08006a1f 	.word	0x08006a1f
 80068ec:	08006a1f 	.word	0x08006a1f
 80068f0:	08006a1f 	.word	0x08006a1f
 80068f4:	08006a1f 	.word	0x08006a1f
 80068f8:	08006a1f 	.word	0x08006a1f
 80068fc:	08006a1f 	.word	0x08006a1f
 8006900:	080069e7 	.word	0x080069e7
 8006904:	08006a1f 	.word	0x08006a1f
 8006908:	08006a1f 	.word	0x08006a1f
 800690c:	08006a1f 	.word	0x08006a1f
 8006910:	08006a1f 	.word	0x08006a1f
 8006914:	08006a1f 	.word	0x08006a1f
 8006918:	08006a1f 	.word	0x08006a1f
 800691c:	08006a1f 	.word	0x08006a1f
 8006920:	08006a1f 	.word	0x08006a1f
 8006924:	08006a1f 	.word	0x08006a1f
 8006928:	080069ff 	.word	0x080069ff
		case button::btncodes::cEnter_BT: {
			int i = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
			for (i = 0; i < TotalEnterIndexes; i++) {
 8006930:	2300      	movs	r3, #0
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	e03a      	b.n	80069ac <_ZN2UI4loopEP11u8g2_struct+0x194>

				if (MenuArray[index].Enter[i] == MenuNo::None) {
 8006936:	89fa      	ldrh	r2, [r7, #14]
 8006938:	493c      	ldr	r1, [pc, #240]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800693a:	4613      	mov	r3, r2
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	4413      	add	r3, r2
 8006944:	3302      	adds	r3, #2
 8006946:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800694a:	2b09      	cmp	r3, #9
 800694c:	d10a      	bne.n	8006964 <_ZN2UI4loopEP11u8g2_struct+0x14c>
					CurrMenu = MenuArray[index].MenuNo; //stay in our own menu
 800694e:	89fa      	ldrh	r2, [r7, #14]
 8006950:	4936      	ldr	r1, [pc, #216]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006952:	4613      	mov	r3, r2
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a32      	ldr	r2, [pc, #200]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006960:	6013      	str	r3, [r2, #0]
					break;
 8006962:	e027      	b.n	80069b4 <_ZN2UI4loopEP11u8g2_struct+0x19c>
				}

				if (MenuArray[index].Enter[i] == UI::UI_helper::get_UIcode())
 8006964:	89fa      	ldrh	r2, [r7, #14]
 8006966:	4931      	ldr	r1, [pc, #196]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006968:	4613      	mov	r3, r2
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	3302      	adds	r3, #2
 8006974:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8006978:	f000 fc44 	bl	8007204 <_ZN2UI9UI_helper10get_UIcodeEv>
 800697c:	4603      	mov	r3, r0
 800697e:	429c      	cmp	r4, r3
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <_ZN2UI4loopEP11u8g2_struct+0x18e>
				{
					CurrMenu = MenuArray[index].Enter[i];
 800698c:	89fa      	ldrh	r2, [r7, #14]
 800698e:	4927      	ldr	r1, [pc, #156]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006990:	4613      	mov	r3, r2
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	4413      	add	r3, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4413      	add	r3, r2
 800699a:	3302      	adds	r3, #2
 800699c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069a0:	4a21      	ldr	r2, [pc, #132]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80069a2:	6013      	str	r3, [r2, #0]
					break;
 80069a4:	e006      	b.n	80069b4 <_ZN2UI4loopEP11u8g2_struct+0x19c>
			for (i = 0; i < TotalEnterIndexes; i++) {
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b09      	cmp	r3, #9
 80069b0:	ddc1      	ble.n	8006936 <_ZN2UI4loopEP11u8g2_struct+0x11e>
				}

			}

			break;
 80069b2:	e035      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
 80069b4:	e034      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cUP_BT: {
			CurrMenu = MenuArray[index].UP;
 80069b6:	89fa      	ldrh	r2, [r7, #14]
 80069b8:	491c      	ldr	r1, [pc, #112]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3338      	adds	r3, #56	@ 0x38
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80069ca:	6013      	str	r3, [r2, #0]
			break;
 80069cc:	e028      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cDWN_BT: {
			CurrMenu = MenuArray[index].DN;
 80069ce:	89fa      	ldrh	r2, [r7, #14]
 80069d0:	4916      	ldr	r1, [pc, #88]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80069d2:	4613      	mov	r3, r2
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3334      	adds	r3, #52	@ 0x34
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a11      	ldr	r2, [pc, #68]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80069e2:	6013      	str	r3, [r2, #0]
			break;
 80069e4:	e01c      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cRGHT_BT: {
			CurrMenu = MenuArray[index].RGT;
 80069e6:	89fa      	ldrh	r2, [r7, #14]
 80069e8:	4910      	ldr	r1, [pc, #64]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80069ea:	4613      	mov	r3, r2
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3340      	adds	r3, #64	@ 0x40
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80069fa:	6013      	str	r3, [r2, #0]
			break;
 80069fc:	e010      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cLFT_BT: {
			CurrMenu = MenuArray[index].LFT;
 80069fe:	89fa      	ldrh	r2, [r7, #14]
 8006a00:	490a      	ldr	r1, [pc, #40]	@ (8006a2c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006a02:	4613      	mov	r3, r2
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	333c      	adds	r3, #60	@ 0x3c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a05      	ldr	r2, [pc, #20]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006a12:	6013      	str	r3, [r2, #0]
			break;
 8006a14:	e004      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;

		}

	} else {
		CurrMenu = MenuNo::None;
 8006a16:	4b04      	ldr	r3, [pc, #16]	@ (8006a28 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006a18:	2209      	movs	r2, #9
 8006a1a:	601a      	str	r2, [r3, #0]
	}

}
 8006a1c:	e000      	b.n	8006a20 <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;
 8006a1e:	bf00      	nop
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd90      	pop	{r4, r7, pc}
 8006a28:	20000060 	.word	0x20000060
 8006a2c:	20000064 	.word	0x20000064
 8006a30:	20001c38 	.word	0x20001c38

08006a34 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct>:
		10.0,
		01.0,
		0.1,
};

void UI::UI_Subs::SetTimeDate(u8g2_t *u8g2) {
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a36:	b0a1      	sub	sp, #132	@ 0x84
 8006a38:	af06      	add	r7, sp, #24
 8006a3a:	6078      	str	r0, [r7, #4]
	uint32_t epochTime;
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;

	int8_t timezone;
	stmRTC.getTime(&DDate, &DTime, &epochTime, &timezone);
 8006a3c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006a40:	f107 0210 	add.w	r2, r7, #16
 8006a44:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006a48:	f107 030f 	add.w	r3, r7, #15
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	4603      	mov	r3, r0
 8006a50:	48ba      	ldr	r0, [pc, #744]	@ (8006d3c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x308>)
 8006a52:	f7fe fc34 	bl	80052be <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>

	int8_t selEpochPos = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	int8_t prevselPos = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	do {
		button::resetCode(button::btncodes::cNONE);
 8006a62:	2000      	movs	r0, #0
 8006a64:	f000 fcec 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>

		do {
			u8g2_ClearBuffer(u8g2);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 ff40 	bl	80078ee <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 8006a6e:	2101      	movs	r1, #1
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fbfc 	bl	800826e <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8006a76:	2102      	movs	r1, #2
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fe86 	bl	800878a <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006a7e:	49b0      	ldr	r1, [pc, #704]	@ (8006d40 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x30c>)
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fd55 	bl	8008530 <u8g2_SetFont>

			u8g2_DrawStr(u8g2, 3, 10, "Set Time 24hr Format");
 8006a86:	4baf      	ldr	r3, [pc, #700]	@ (8006d44 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x310>)
 8006a88:	220a      	movs	r2, #10
 8006a8a:	2103      	movs	r1, #3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 fcad 	bl	80083ec <u8g2_DrawStr>

			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8006a92:	7c3b      	ldrb	r3, [r7, #16]
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8006a94:	461e      	mov	r6, r3
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8006a96:	7c7b      	ldrb	r3, [r7, #17]
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8006a98:	469c      	mov	ip, r3
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8006a9a:	7cbb      	ldrb	r3, [r7, #18]
 8006a9c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
					DDate.Month, DDate.Year, timezone);
 8006aa0:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8006aa4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8006aae:	4605      	mov	r5, r0
 8006ab0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006ab4:	9504      	str	r5, [sp, #16]
 8006ab6:	9403      	str	r4, [sp, #12]
 8006ab8:	9102      	str	r1, [sp, #8]
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4663      	mov	r3, ip
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	49a1      	ldr	r1, [pc, #644]	@ (8006d48 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x314>)
 8006ac4:	f00c fc54 	bl	8013370 <siprintf>

			u8g2_DrawStr(u8g2, 5, 20, epochtimeStr);
 8006ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006acc:	2214      	movs	r2, #20
 8006ace:	2105      	movs	r1, #5
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fc8b 	bl	80083ec <u8g2_DrawStr>

			if (timezone < -9 && selEpochPos >= 12) {
 8006ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ada:	f113 0f09 	cmn.w	r3, #9
 8006ade:	da13      	bge.n	8006b08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xd4>
 8006ae0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006ae4:	2b0b      	cmp	r3, #11
 8006ae6:	dd0f      	ble.n	8006b08 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xd4>
				u8g2_DrawBox(u8g2, 5 + (5 * (prevselPos + 1)), 12, 5, 9);
 8006ae8:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8006aec:	3302      	adds	r3, #2
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	b2d9      	uxtb	r1, r3
 8006af8:	2309      	movs	r3, #9
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2305      	movs	r3, #5
 8006afe:	220c      	movs	r2, #12
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 febe 	bl	8007882 <u8g2_DrawBox>
 8006b06:	e00e      	b.n	8006b26 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xf2>
			} else {
				u8g2_DrawBox(u8g2, 5 + (5 * prevselPos), 12, 5, 9);
 8006b08:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	0092      	lsls	r2, r2, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	b2d9      	uxtb	r1, r3
 8006b18:	2309      	movs	r3, #9
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	2305      	movs	r3, #5
 8006b1e:	220c      	movs	r2, #12
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 feae 	bl	8007882 <u8g2_DrawBox>
			}

			UI::UI_helper::SubMenuControlInfo(u8g2);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fbda 	bl	80072e0 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>

			u8g2_SendBuffer(u8g2);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 ff51 	bl	80079d4 <u8g2_SendBuffer>
			btncodes = button::get_event();
 8006b32:	f000 fc59 	bl	80073e8 <_ZN6button9get_eventEv>
 8006b36:	6638      	str	r0, [r7, #96]	@ 0x60
		} while (btncodes == button::btncodes::cNONE);
 8006b38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d094      	beq.n	8006a68 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x34>

		switch (btncodes) {
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b40:	2b32      	cmp	r3, #50	@ 0x32
 8006b42:	d013      	beq.n	8006b6c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x138>
 8006b44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b46:	2b32      	cmp	r3, #50	@ 0x32
 8006b48:	f300 8165 	bgt.w	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
 8006b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b4e:	2b28      	cmp	r3, #40	@ 0x28
 8006b50:	d05b      	beq.n	8006c0a <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1d6>
 8006b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b54:	2b28      	cmp	r3, #40	@ 0x28
 8006b56:	f300 815e 	bgt.w	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
 8006b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b5c:	2b0a      	cmp	r3, #10
 8006b5e:	f000 8147 	beq.w	8006df0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3bc>
 8006b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b64:	2b1e      	cmp	r3, #30
 8006b66:	f000 80c5 	beq.w	8006cf4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2c0>
 8006b6a:	e154      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>

		case button::btncodes::cRGHT_BT: {
			selEpochPos++;
 8006b6c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	3301      	adds	r3, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			if (selEpochPos < 6) {
 8006b7a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	dc25      	bgt.n	8006bce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x19a>
				if (selEpochPos > 2) {
 8006b82:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	dd11      	ble.n	8006bae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x17a>
					if (selEpochPos >= 4) {
 8006b8a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	dd06      	ble.n	8006ba0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x16c>
						prevselPos = selEpochPos + 2;
 8006b92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006b96:	3302      	adds	r3, #2
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
				} else {
					prevselPos = prevselPos + 1;
				}
			}

			break;
 8006b9e:	e13a      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
						prevselPos = selEpochPos + 1;
 8006ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8006bac:	e133      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
					if (selEpochPos == 2) {
 8006bae:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d106      	bne.n	8006bc4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x190>
						prevselPos = prevselPos + 2;
 8006bb6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006bba:	3302      	adds	r3, #2
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8006bc2:	e128      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
						prevselPos = selEpochPos;
 8006bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006bc8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8006bcc:	e123      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
				if (selEpochPos == 6 || selEpochPos == 8 || selEpochPos == 10
 8006bce:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006bd2:	2b06      	cmp	r3, #6
 8006bd4:	d00b      	beq.n	8006bee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
 8006bd6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d007      	beq.n	8006bee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
 8006bde:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006be2:	2b0a      	cmp	r3, #10
 8006be4:	d003      	beq.n	8006bee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
						|| selEpochPos == 12) {
 8006be6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006bea:	2b0c      	cmp	r3, #12
 8006bec:	d106      	bne.n	8006bfc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1c8>
					prevselPos = prevselPos + 2;
 8006bee:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8006bfa:	e10c      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
					prevselPos = prevselPos + 1;
 8006bfc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006c00:	3301      	adds	r3, #1
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 8006c08:	e105      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
		}

		case button::btncodes::cDWN_BT: {

			switch (selEpochPos) {
 8006c0a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006c0e:	2b0d      	cmp	r3, #13
 8006c10:	f200 80fe 	bhi.w	8006e10 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3dc>
 8006c14:	a201      	add	r2, pc, #4	@ (adr r2, 8006c1c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1e8>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c55 	.word	0x08006c55
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c69 	.word	0x08006c69
 8006c28:	08006c69 	.word	0x08006c69
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006cc1 	.word	0x08006cc1
 8006c48:	08006cc1 	.word	0x08006cc1
 8006c4c:	08006cd9 	.word	0x08006cd9
 8006c50:	08006cd9 	.word	0x08006cd9
			case 0:
			case 1: {
				DTime.Hours = DTime.Hours - datetime[selEpochPos];
 8006c54:	7c3a      	ldrb	r2, [r7, #16]
 8006c56:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006c5a:	493c      	ldr	r1, [pc, #240]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006c5c:	56cb      	ldrsb	r3, [r1, r3]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	743b      	strb	r3, [r7, #16]
				break;
 8006c66:	e044      	b.n	8006cf2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 2:
			case 3: {
				DTime.Minutes = DTime.Minutes - datetime[selEpochPos];
 8006c68:	7c7a      	ldrb	r2, [r7, #17]
 8006c6a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006c6e:	4937      	ldr	r1, [pc, #220]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006c70:	56cb      	ldrsb	r3, [r1, r3]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	747b      	strb	r3, [r7, #17]
				break;
 8006c7a:	e03a      	b.n	8006cf2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 4:
			case 5: {
				DTime.Seconds = DTime.Seconds - datetime[selEpochPos];
 8006c7c:	7cba      	ldrb	r2, [r7, #18]
 8006c7e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006c82:	4932      	ldr	r1, [pc, #200]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006c84:	56cb      	ldrsb	r3, [r1, r3]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	74bb      	strb	r3, [r7, #18]
				break;
 8006c8e:	e030      	b.n	8006cf2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 6:
			case 7: {
				DDate.Date = DDate.Date - datetime[selEpochPos];
 8006c90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006c94:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006c98:	492c      	ldr	r1, [pc, #176]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006c9a:	56cb      	ldrsb	r3, [r1, r3]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8006ca6:	e024      	b.n	8006cf2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 8:
			case 9: {
				DDate.Month = DDate.Month - datetime[selEpochPos];
 8006ca8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006cac:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006cb0:	4926      	ldr	r1, [pc, #152]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006cb2:	56cb      	ldrsb	r3, [r1, r3]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 8006cbe:	e018      	b.n	8006cf2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 10:
			case 11: {
				DDate.Year = DDate.Year - datetime[selEpochPos];
 8006cc0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006cc4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006cc8:	4920      	ldr	r1, [pc, #128]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006cca:	56cb      	ldrsb	r3, [r1, r3]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8006cd6:	e00c      	b.n	8006cf2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 12:
			case 13: {
				timezone = timezone - datetime[selEpochPos];
 8006cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006ce2:	491a      	ldr	r1, [pc, #104]	@ (8006d4c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006ce4:	56cb      	ldrsb	r3, [r1, r3]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	73fb      	strb	r3, [r7, #15]
				break;
 8006cf0:	bf00      	nop

			}

			}

			break;
 8006cf2:	e08d      	b.n	8006e10 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3dc>
		}

		case button::btncodes::cUP_BT: {
			switch (selEpochPos) {
 8006cf4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006cf8:	2b0d      	cmp	r3, #13
 8006cfa:	f200 808b 	bhi.w	8006e14 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e0>
 8006cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2d0>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d51 	.word	0x08006d51
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006d79 	.word	0x08006d79
 8006d18:	08006d79 	.word	0x08006d79
 8006d1c:	08006d8d 	.word	0x08006d8d
 8006d20:	08006d8d 	.word	0x08006d8d
 8006d24:	08006da5 	.word	0x08006da5
 8006d28:	08006da5 	.word	0x08006da5
 8006d2c:	08006dbd 	.word	0x08006dbd
 8006d30:	08006dbd 	.word	0x08006dbd
 8006d34:	08006dd5 	.word	0x08006dd5
 8006d38:	08006dd5 	.word	0x08006dd5
 8006d3c:	20001ad0 	.word	0x20001ad0
 8006d40:	08016bf4 	.word	0x08016bf4
 8006d44:	08015f08 	.word	0x08015f08
 8006d48:	08015f20 	.word	0x08015f20
 8006d4c:	200002c8 	.word	0x200002c8
			case 0:
			case 1: {
				DTime.Hours = DTime.Hours + datetime[selEpochPos];
 8006d50:	7c3a      	ldrb	r2, [r7, #16]
 8006d52:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006d56:	495d      	ldr	r1, [pc, #372]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006d58:	56cb      	ldrsb	r3, [r1, r3]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	743b      	strb	r3, [r7, #16]
				break;
 8006d62:	e044      	b.n	8006dee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 2:
			case 3: {
				DTime.Minutes = DTime.Minutes + datetime[selEpochPos];
 8006d64:	7c7a      	ldrb	r2, [r7, #17]
 8006d66:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006d6a:	4958      	ldr	r1, [pc, #352]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006d6c:	56cb      	ldrsb	r3, [r1, r3]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	747b      	strb	r3, [r7, #17]
				break;
 8006d76:	e03a      	b.n	8006dee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 4:
			case 5: {
				DTime.Seconds = DTime.Seconds + datetime[selEpochPos];
 8006d78:	7cba      	ldrb	r2, [r7, #18]
 8006d7a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006d7e:	4953      	ldr	r1, [pc, #332]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006d80:	56cb      	ldrsb	r3, [r1, r3]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	74bb      	strb	r3, [r7, #18]
				break;
 8006d8a:	e030      	b.n	8006dee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 6:
			case 7: {
				DDate.Date = DDate.Date + datetime[selEpochPos];
 8006d8c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006d90:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006d94:	494d      	ldr	r1, [pc, #308]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006d96:	56cb      	ldrsb	r3, [r1, r3]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8006da2:	e024      	b.n	8006dee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 8:
			case 9: {
				DDate.Month = DDate.Month + datetime[selEpochPos];
 8006da4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006da8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006dac:	4947      	ldr	r1, [pc, #284]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006dae:	56cb      	ldrsb	r3, [r1, r3]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 8006dba:	e018      	b.n	8006dee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 10:
			case 11: {
				DDate.Year = DDate.Year + datetime[selEpochPos];
 8006dbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006dc0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006dc4:	4941      	ldr	r1, [pc, #260]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006dc6:	56cb      	ldrsb	r3, [r1, r3]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8006dd2:	e00c      	b.n	8006dee <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 12:
			case 13: {
				timezone = timezone + datetime[selEpochPos];
 8006dd4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8006ecc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006dda:	56d3      	ldrsb	r3, [r2, r3]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	b25b      	sxtb	r3, r3
 8006dea:	73fb      	strb	r3, [r7, #15]
				break;
 8006dec:	bf00      	nop
			}

			}

			break;
 8006dee:	e011      	b.n	8006e14 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e0>
		}

		case button::btncodes::cEnter_BT: {

			stmRTC.setTime(&DDate, &DTime, timezone);
 8006df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df4:	f107 0210 	add.w	r2, r7, #16
 8006df8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006dfc:	4834      	ldr	r0, [pc, #208]	@ (8006ed0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x49c>)
 8006dfe:	f7fe fad9 	bl	80053b4 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>
			flash_data_.zone = timezone;
 8006e02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006e06:	4b33      	ldr	r3, [pc, #204]	@ (8006ed4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x4a0>)
 8006e08:	701a      	strb	r2, [r3, #0]
			SaveData();
 8006e0a:	f7fa ff5d 	bl	8001cc8 <_Z8SaveDatav>

			break;
 8006e0e:	e002      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
			break;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3e2>
			break;
 8006e14:	bf00      	nop
		}

		}

		selEpochPos = selEpochPos % 14;
 8006e16:	f997 2067 	ldrsb.w	r2, [r7, #103]	@ 0x67
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x4a4>)
 8006e1c:	fb83 1302 	smull	r1, r3, r3, r2
 8006e20:	4413      	add	r3, r2
 8006e22:	10d9      	asrs	r1, r3, #3
 8006e24:	17d3      	asrs	r3, r2, #31
 8006e26:	1ac9      	subs	r1, r1, r3
 8006e28:	460b      	mov	r3, r1
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a5b      	subs	r3, r3, r1
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		prevselPos = prevselPos % 20;
 8006e36:	f997 2066 	ldrsb.w	r2, [r7, #102]	@ 0x66
 8006e3a:	4b28      	ldr	r3, [pc, #160]	@ (8006edc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x4a8>)
 8006e3c:	fb83 1302 	smull	r1, r3, r3, r2
 8006e40:	10d9      	asrs	r1, r3, #3
 8006e42:	17d3      	asrs	r3, r2, #31
 8006e44:	1ac9      	subs	r1, r1, r3
 8006e46:	460b      	mov	r3, r1
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

		if (DTime.Hours > 24) {
 8006e54:	7c3b      	ldrb	r3, [r7, #16]
 8006e56:	2b18      	cmp	r3, #24
 8006e58:	d901      	bls.n	8006e5e <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x42a>
			DTime.Hours = 24;
 8006e5a:	2318      	movs	r3, #24
 8006e5c:	743b      	strb	r3, [r7, #16]
		}
		if (DTime.Minutes > 59) {
 8006e5e:	7c7b      	ldrb	r3, [r7, #17]
 8006e60:	2b3b      	cmp	r3, #59	@ 0x3b
 8006e62:	d901      	bls.n	8006e68 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x434>
			DTime.Minutes = 59;
 8006e64:	233b      	movs	r3, #59	@ 0x3b
 8006e66:	747b      	strb	r3, [r7, #17]
		}
		if (DTime.Seconds > 59) {
 8006e68:	7cbb      	ldrb	r3, [r7, #18]
 8006e6a:	2b3b      	cmp	r3, #59	@ 0x3b
 8006e6c:	d901      	bls.n	8006e72 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x43e>
			DTime.Seconds = 59;
 8006e6e:	233b      	movs	r3, #59	@ 0x3b
 8006e70:	74bb      	strb	r3, [r7, #18]
		}

		if (DDate.Date > 31) {
 8006e72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e76:	2b1f      	cmp	r3, #31
 8006e78:	d902      	bls.n	8006e80 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x44c>
			DDate.Date = 31;
 8006e7a:	231f      	movs	r3, #31
 8006e7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (DDate.Month > 12) {
 8006e80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e84:	2b0c      	cmp	r3, #12
 8006e86:	d902      	bls.n	8006e8e <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x45a>
			DDate.Month = 12;
 8006e88:	230c      	movs	r3, #12
 8006e8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		if (DDate.Year > 99) {
 8006e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e92:	2b63      	cmp	r3, #99	@ 0x63
 8006e94:	d902      	bls.n	8006e9c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x468>
			DDate.Year = 99;
 8006e96:	2363      	movs	r3, #99	@ 0x63
 8006e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (timezone > 13) {
 8006e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea0:	2b0d      	cmp	r3, #13
 8006ea2:	dd01      	ble.n	8006ea8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x474>
			timezone = 13;
 8006ea4:	230d      	movs	r3, #13
 8006ea6:	73fb      	strb	r3, [r7, #15]
		}
		if (timezone < -11) {
 8006ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eac:	f113 0f0b 	cmn.w	r3, #11
 8006eb0:	da01      	bge.n	8006eb6 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x482>
			timezone = -11;
 8006eb2:	23f5      	movs	r3, #245	@ 0xf5
 8006eb4:	73fb      	strb	r3, [r7, #15]

		}

	} while (btncodes != button::btncodes::cEnter_BT
			&& btncodes != button::btncodes::cLFT_BT);
 8006eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eb8:	2b0a      	cmp	r3, #10
 8006eba:	d003      	beq.n	8006ec4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x490>
 8006ebc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ebe:	2b3c      	cmp	r3, #60	@ 0x3c
 8006ec0:	f47f adcf 	bne.w	8006a62 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2e>

}
 8006ec4:	bf00      	nop
 8006ec6:	376c      	adds	r7, #108	@ 0x6c
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ecc:	200002c8 	.word	0x200002c8
 8006ed0:	20001ad0 	.word	0x20001ad0
 8006ed4:	20001818 	.word	0x20001818
 8006ed8:	92492493 	.word	0x92492493
 8006edc:	66666667 	.word	0x66666667

08006ee0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct>:

void UI::UI_Subs::SetFuelMeas(u8g2_t *u8g2) {
 8006ee0:	b5b0      	push	{r4, r5, r7, lr}
 8006ee2:	b0a2      	sub	sp, #136	@ 0x88
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	float zeroSpan = 00.0;
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	677b      	str	r3, [r7, #116]	@ 0x74
	float fullSpan = 00.0;
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	673b      	str	r3, [r7, #112]	@ 0x70
	liquidSensor.getParameters(&zeroSpan, &fullSpan);
 8006ef4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8006ef8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006efc:	4619      	mov	r1, r3
 8006efe:	48af      	ldr	r0, [pc, #700]	@ (80071bc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8006f00:	f7fd fe81 	bl	8004c06 <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_>

	char headings[50];
	char buffer[50];

	uint8_t cursor = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t cursorPos = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	do {
		button::resetCode(button::btncodes::cNONE);
 8006f10:	2000      	movs	r0, #0
 8006f12:	f000 fa95 	bl	8007440 <_ZN6button9resetCodeENS_8btncodesE>
		do {
			u8g2_ClearBuffer(u8g2);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fce9 	bl	80078ee <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f9a5 	bl	800826e <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8006f24:	2102      	movs	r1, #2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fc2f 	bl	800878a <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006f2c:	49a4      	ldr	r1, [pc, #656]	@ (80071c0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e0>)
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fafe 	bl	8008530 <u8g2_SetFont>

			u8g2_DrawXBM(u8g2, 104, 0, imgcont::SettingsFuelTank.w,
 8006f34:	4ba3      	ldr	r3, [pc, #652]	@ (80071c4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8006f36:	7919      	ldrb	r1, [r3, #4]
					imgcont::SettingsFuelTank.h, imgcont::SettingsFuelTank.img);
 8006f38:	4ba2      	ldr	r3, [pc, #648]	@ (80071c4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8006f3a:	795b      	ldrb	r3, [r3, #5]
 8006f3c:	4aa1      	ldr	r2, [pc, #644]	@ (80071c4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8006f3e:	6812      	ldr	r2, [r2, #0]
			u8g2_DrawXBM(u8g2, 104, 0, imgcont::SettingsFuelTank.w,
 8006f40:	9201      	str	r2, [sp, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	460b      	mov	r3, r1
 8006f46:	2200      	movs	r2, #0
 8006f48:	2168      	movs	r1, #104	@ 0x68
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc56 	bl	80077fc <u8g2_DrawXBM>

			std::sprintf(headings, "ZeroSpan | FullSpan");
 8006f50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f54:	499c      	ldr	r1, [pc, #624]	@ (80071c8 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e8>)
 8006f56:	4618      	mov	r0, r3
 8006f58:	f00c fa0a 	bl	8013370 <siprintf>
			u8g2_DrawStr(u8g2, 5, 10, headings);
 8006f5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f60:	220a      	movs	r2, #10
 8006f62:	2105      	movs	r1, #5
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fa41 	bl	80083ec <u8g2_DrawStr>
			std::sprintf(buffer, "%04.1f | %04.1f", zeroSpan, fullSpan);
 8006f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7f9 faeb 	bl	8000548 <__aeabi_f2d>
 8006f72:	4604      	mov	r4, r0
 8006f74:	460d      	mov	r5, r1
 8006f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7f9 fae5 	bl	8000548 <__aeabi_f2d>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	f107 0008 	add.w	r0, r7, #8
 8006f86:	e9cd 2300 	strd	r2, r3, [sp]
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	498f      	ldr	r1, [pc, #572]	@ (80071cc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2ec>)
 8006f90:	f00c f9ee 	bl	8013370 <siprintf>
			u8g2_DrawStr(u8g2, 25, 20, buffer);
 8006f94:	f107 0308 	add.w	r3, r7, #8
 8006f98:	2214      	movs	r2, #20
 8006f9a:	2119      	movs	r1, #25
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fa25 	bl	80083ec <u8g2_DrawStr>

			u8g2_DrawBox(u8g2, 25 + (5 * (cursorPos)), 12, 5, 9);
 8006fa2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	0092      	lsls	r2, r2, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	3319      	adds	r3, #25
 8006fb0:	b2d9      	uxtb	r1, r3
 8006fb2:	2309      	movs	r3, #9
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	220c      	movs	r2, #12
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fc61 	bl	8007882 <u8g2_DrawBox>



			UI::UI_helper::SubMenuControlInfo(u8g2);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f98d 	bl	80072e0 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>
			u8g2_SendBuffer(u8g2);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fd04 	bl	80079d4 <u8g2_SendBuffer>
			btncodes = button::get_event();
 8006fcc:	f000 fa0c 	bl	80073e8 <_ZN6button9get_eventEv>
 8006fd0:	67b8      	str	r0, [r7, #120]	@ 0x78
		} while (btncodes == button::btncodes::cNONE);
 8006fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d09e      	beq.n	8006f16 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x36>

		switch (btncodes) {
 8006fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fda:	2b32      	cmp	r3, #50	@ 0x32
 8006fdc:	d012      	beq.n	8007004 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x124>
 8006fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fe0:	2b32      	cmp	r3, #50	@ 0x32
 8006fe2:	f300 80cc 	bgt.w	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
 8006fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fe8:	2b28      	cmp	r3, #40	@ 0x28
 8006fea:	d039      	beq.n	8007060 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x180>
 8006fec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fee:	2b28      	cmp	r3, #40	@ 0x28
 8006ff0:	f300 80c5 	bgt.w	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff6:	2b0a      	cmp	r3, #10
 8006ff8:	f000 80a8 	beq.w	800714c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x26c>
 8006ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ffe:	2b1e      	cmp	r3, #30
 8007000:	d068      	beq.n	80070d4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1f4>
 8007002:	e0bc      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>

		case button::btncodes::cRGHT_BT: {
			cursor++;
 8007004:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007008:	3301      	adds	r3, #1
 800700a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if(cursor == 2)
 800700e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007012:	2b02      	cmp	r3, #2
 8007014:	d103      	bne.n	800701e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x13e>
			{
				cursorPos = 3;
 8007016:	2303      	movs	r3, #3
 8007018:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			else {

				cursorPos = cursor;
			}

			break;
 800701c:	e0af      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
			else if(cursor == 3)
 800701e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007022:	2b03      	cmp	r3, #3
 8007024:	d103      	bne.n	800702e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x14e>
				cursorPos = 7;
 8007026:	2307      	movs	r3, #7
 8007028:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 800702c:	e0a7      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
			else if(cursor > 3)
 800702e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007032:	2b03      	cmp	r3, #3
 8007034:	d90f      	bls.n	8007056 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x176>
				if(cursor > 4)
 8007036:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800703a:	2b04      	cmp	r3, #4
 800703c:	d905      	bls.n	800704a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x16a>
					cursorPos = cursorPos + 2;
 800703e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007042:	3302      	adds	r3, #2
 8007044:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8007048:	e099      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
					cursorPos = cursorPos + 1;
 800704a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800704e:	3301      	adds	r3, #1
 8007050:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8007054:	e093      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
				cursorPos = cursor;
 8007056:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800705a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 800705e:	e08e      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
		}

		case button::btncodes::cDWN_BT: {
			if(cursor < 3)
 8007060:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007064:	2b02      	cmp	r3, #2
 8007066:	d818      	bhi.n	800709a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1ba>
			{
				zeroSpan = zeroSpan - SpanSetting[cursor];
 8007068:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800706c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007070:	4a57      	ldr	r2, [pc, #348]	@ (80071d0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f0>)
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	edd3 7a00 	vldr	s15, [r3]
 800707a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800707e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				if(zeroSpan < 0)
 8007082:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8007086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708e:	d400      	bmi.n	8007092 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1b2>
				{
					fullSpan = 0.0;
				}
			}

			break;
 8007090:	e072      	b.n	8007178 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x298>
					zeroSpan = 0.0;
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	677b      	str	r3, [r7, #116]	@ 0x74
			break;
 8007098:	e06e      	b.n	8007178 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x298>
			else if(cursor >=3 )
 800709a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d96a      	bls.n	8007178 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x298>
				fullSpan = fullSpan - SpanSetting[cursor];
 80070a2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80070a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80070aa:	4a49      	ldr	r2, [pc, #292]	@ (80071d0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f0>)
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	edd3 7a00 	vldr	s15, [r3]
 80070b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070b8:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				if(fullSpan < 0)
 80070bc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80070c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	d400      	bmi.n	80070cc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1ec>
			break;
 80070ca:	e055      	b.n	8007178 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x298>
					fullSpan = 0.0;
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	673b      	str	r3, [r7, #112]	@ 0x70
			break;
 80070d2:	e051      	b.n	8007178 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x298>
		}

		case button::btncodes::cUP_BT: {
			if(cursor < 3)
 80070d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d819      	bhi.n	8007110 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x230>
			{
				zeroSpan = zeroSpan + SpanSetting[cursor];
 80070dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80070e0:	4a3b      	ldr	r2, [pc, #236]	@ (80071d0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f0>)
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	ed93 7a00 	vldr	s14, [r3]
 80070ea:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80070ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070f2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

				if(zeroSpan > 99)
 80070f6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80070fa:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80071d4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f4>
 80070fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007106:	dc00      	bgt.n	800710a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x22a>
				{
					fullSpan = 99.0;
				}
			}

			break;
 8007108:	e038      	b.n	800717c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29c>
					zeroSpan = 99.0;
 800710a:	4b33      	ldr	r3, [pc, #204]	@ (80071d8 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f8>)
 800710c:	677b      	str	r3, [r7, #116]	@ 0x74
			break;
 800710e:	e035      	b.n	800717c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29c>
			else if(cursor >=3 )
 8007110:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007114:	2b02      	cmp	r3, #2
 8007116:	d931      	bls.n	800717c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29c>
				fullSpan = fullSpan + SpanSetting[cursor];
 8007118:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800711c:	4a2c      	ldr	r2, [pc, #176]	@ (80071d0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f0>)
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	ed93 7a00 	vldr	s14, [r3]
 8007126:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800712a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800712e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				if(fullSpan > 99)
 8007132:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007136:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80071d4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f4>
 800713a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	dc00      	bgt.n	8007146 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x266>
			break;
 8007144:	e01a      	b.n	800717c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29c>
					fullSpan = 99.0;
 8007146:	4b24      	ldr	r3, [pc, #144]	@ (80071d8 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2f8>)
 8007148:	673b      	str	r3, [r7, #112]	@ 0x70
			break;
 800714a:	e017      	b.n	800717c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29c>
		}

		case button::btncodes::cEnter_BT: {

			liquidSensor.setParameters(zeroSpan, fullSpan);
 800714c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8007150:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8007154:	eef0 0a47 	vmov.f32	s1, s14
 8007158:	eeb0 0a67 	vmov.f32	s0, s15
 800715c:	4817      	ldr	r0, [pc, #92]	@ (80071bc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 800715e:	f7fd fd2c 	bl	8004bba <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>
			flash_data_.fullSpan = fullSpan;
 8007162:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007164:	4b1d      	ldr	r3, [pc, #116]	@ (80071dc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2fc>)
 8007166:	3307      	adds	r3, #7
 8007168:	601a      	str	r2, [r3, #0]
			flash_data_.zeroSpan = zeroSpan;
 800716a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2fc>)
 800716e:	3303      	adds	r3, #3
 8007170:	601a      	str	r2, [r3, #0]
			SaveData();
 8007172:	f7fa fda9 	bl	8001cc8 <_Z8SaveDatav>
			break;
 8007176:	e002      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
			break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x29e>
			break;
 800717c:	bf00      	nop
		}

		}

		cursor = cursor % 6;
 800717e:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8007182:	4b17      	ldr	r3, [pc, #92]	@ (80071e0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x300>)
 8007184:	fba3 1302 	umull	r1, r3, r3, r2
 8007188:	0899      	lsrs	r1, r3, #2
 800718a:	460b      	mov	r3, r1
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	440b      	add	r3, r1
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if(cursorPos > 10)
 8007198:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800719c:	2b0a      	cmp	r3, #10
 800719e:	d902      	bls.n	80071a6 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c6>
		{
			cursorPos = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		}
	} while (btncodes != button::btncodes::cEnter_BT
			&& btncodes != button::btncodes::cLFT_BT);
 80071a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071a8:	2b0a      	cmp	r3, #10
 80071aa:	d003      	beq.n	80071b4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d4>
 80071ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ae:	2b3c      	cmp	r3, #60	@ 0x3c
 80071b0:	f47f aeae 	bne.w	8006f10 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x30>

}
 80071b4:	bf00      	nop
 80071b6:	3780      	adds	r7, #128	@ 0x80
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bdb0      	pop	{r4, r5, r7, pc}
 80071bc:	20001ae0 	.word	0x20001ae0
 80071c0:	08016bf4 	.word	0x08016bf4
 80071c4:	080167f8 	.word	0x080167f8
 80071c8:	08015f44 	.word	0x08015f44
 80071cc:	08015f58 	.word	0x08015f58
 80071d0:	200002d8 	.word	0x200002d8
 80071d4:	42c60000 	.word	0x42c60000
 80071d8:	42c60000 	.word	0x42c60000
 80071dc:	20001818 	.word	0x20001818
 80071e0:	aaaaaaab 	.word	0xaaaaaaab

080071e4 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>:

enum MenuNo UIcodeStorage;


void UI::UI_helper::set_UIcode(enum MenuNo UIcode)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]

	UIcodeStorage = UIcode;
 80071ec:	4a04      	ldr	r2, [pc, #16]	@ (8007200 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo+0x1c>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6013      	str	r3, [r2, #0]

}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20001d38 	.word	0x20001d38

08007204 <_ZN2UI9UI_helper10get_UIcodeEv>:
enum MenuNo UI::UI_helper::get_UIcode()
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  return UIcodeStorage;
 8007208:	4b03      	ldr	r3, [pc, #12]	@ (8007218 <_ZN2UI9UI_helper10get_UIcodeEv+0x14>)
 800720a:	681b      	ldr	r3, [r3, #0]
}
 800720c:	4618      	mov	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20001d38 	.word	0x20001d38

0800721c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>:


void UI::UI_helper::common_iconsMain(u8g2_t *u8g2)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b0a4      	sub	sp, #144	@ 0x90
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
	char time[50];
	char date[50];
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;
	stmRTC.getTime(&DDate, &DTime, nullptr);
 8007224:	f107 0208 	add.w	r2, r7, #8
 8007228:	f107 011c 	add.w	r1, r7, #28
 800722c:	2300      	movs	r3, #0
 800722e:	4826      	ldr	r0, [pc, #152]	@ (80072c8 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xac>)
 8007230:	f7fd ffcf 	bl	80051d2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
	std::sprintf(time, "%02d:%02d:%02d", DTime.Hours, DTime.Minutes,DTime.Seconds);
 8007234:	7a3b      	ldrb	r3, [r7, #8]
 8007236:	461a      	mov	r2, r3
 8007238:	7a7b      	ldrb	r3, [r7, #9]
 800723a:	4619      	mov	r1, r3
 800723c:	7abb      	ldrb	r3, [r7, #10]
 800723e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	460b      	mov	r3, r1
 8007246:	4921      	ldr	r1, [pc, #132]	@ (80072cc <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb0>)
 8007248:	f00c f892 	bl	8013370 <siprintf>
	std::sprintf(date, "%02d/%02d/%02d", DDate.Date,DDate.Month,DDate.Year);
 800724c:	7fbb      	ldrb	r3, [r7, #30]
 800724e:	461a      	mov	r2, r3
 8007250:	7f7b      	ldrb	r3, [r7, #29]
 8007252:	4619      	mov	r1, r3
 8007254:	7ffb      	ldrb	r3, [r7, #31]
 8007256:	f107 0020 	add.w	r0, r7, #32
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	460b      	mov	r3, r1
 800725e:	491c      	ldr	r1, [pc, #112]	@ (80072d0 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb4>)
 8007260:	f00c f886 	bl	8013370 <siprintf>
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8007264:	491b      	ldr	r1, [pc, #108]	@ (80072d4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb8>)
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 f962 	bl	8008530 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 0, 10, time);
 800726c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007270:	220a      	movs	r2, #10
 8007272:	2100      	movs	r1, #0
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f8b9 	bl	80083ec <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 88, 10, date);
 800727a:	f107 0320 	add.w	r3, r7, #32
 800727e:	220a      	movs	r2, #10
 8007280:	2158      	movs	r1, #88	@ 0x58
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f8b2 	bl	80083ec <u8g2_DrawStr>
	u8g2_DrawXBM(u8g2,55,48,imgcont::setting.w,imgcont::setting.h,imgcont::setting.img);
 8007288:	4b13      	ldr	r3, [pc, #76]	@ (80072d8 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 800728a:	7919      	ldrb	r1, [r3, #4]
 800728c:	4b12      	ldr	r3, [pc, #72]	@ (80072d8 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 800728e:	795b      	ldrb	r3, [r3, #5]
 8007290:	4a11      	ldr	r2, [pc, #68]	@ (80072d8 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	460b      	mov	r3, r1
 800729a:	2230      	movs	r2, #48	@ 0x30
 800729c:	2137      	movs	r1, #55	@ 0x37
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 faac 	bl	80077fc <u8g2_DrawXBM>
	u8g2_DrawXBM(u8g2,112,48,imgcont::leftrightArrow.w,imgcont::leftrightArrow.h,imgcont::leftrightArrow.img);
 80072a4:	4b0d      	ldr	r3, [pc, #52]	@ (80072dc <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 80072a6:	7919      	ldrb	r1, [r3, #4]
 80072a8:	4b0c      	ldr	r3, [pc, #48]	@ (80072dc <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 80072aa:	795b      	ldrb	r3, [r3, #5]
 80072ac:	4a0b      	ldr	r2, [pc, #44]	@ (80072dc <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	9201      	str	r2, [sp, #4]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	460b      	mov	r3, r1
 80072b6:	2230      	movs	r2, #48	@ 0x30
 80072b8:	2170      	movs	r1, #112	@ 0x70
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa9e 	bl	80077fc <u8g2_DrawXBM>

}
 80072c0:	bf00      	nop
 80072c2:	3788      	adds	r7, #136	@ 0x88
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20001ad0 	.word	0x20001ad0
 80072cc:	08015f68 	.word	0x08015f68
 80072d0:	08015f78 	.word	0x08015f78
 80072d4:	08016bf4 	.word	0x08016bf4
 80072d8:	080167b0 	.word	0x080167b0
 80072dc:	080167b8 	.word	0x080167b8

080072e0 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>:


void UI::UI_helper::SubMenuControlInfo(u8g2_t *u8g2)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80072e8:	490f      	ldr	r1, [pc, #60]	@ (8007328 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x48>)
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f920 	bl	8008530 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 5, 40, "Up/Dn btn -> Edit");
 80072f0:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x4c>)
 80072f2:	2228      	movs	r2, #40	@ 0x28
 80072f4:	2105      	movs	r1, #5
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 f878 	bl	80083ec <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 48, "Rgt btn   -> Cursor");
 80072fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007330 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x50>)
 80072fe:	2230      	movs	r2, #48	@ 0x30
 8007300:	2105      	movs	r1, #5
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 f872 	bl	80083ec <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 56, "Lft btn   -> Exit");
 8007308:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x54>)
 800730a:	2238      	movs	r2, #56	@ 0x38
 800730c:	2105      	movs	r1, #5
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f86c 	bl	80083ec <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 64, "Entr btn  -> Save");
 8007314:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x58>)
 8007316:	2240      	movs	r2, #64	@ 0x40
 8007318:	2105      	movs	r1, #5
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f866 	bl	80083ec <u8g2_DrawStr>
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	08016bf4 	.word	0x08016bf4
 800732c:	08015f88 	.word	0x08015f88
 8007330:	08015f9c 	.word	0x08015f9c
 8007334:	08015fb0 	.word	0x08015fb0
 8007338:	08015fc4 	.word	0x08015fc4

0800733c <My_Button_IRQHandlerC>:
#include "System_Rtos.hpp"

extern "C"
{
    void My_Button_IRQHandlerC()
    {
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
    	button::btn_irq();
 8007340:	f000 f88e 	bl	8007460 <_ZN6button7btn_irqEv>
    }
 8007344:	bf00      	nop
 8007346:	bd80      	pop	{r7, pc}

08007348 <_ZN6buttonL8setTimerEPm>:

struct Button_t Button_;


static void setTimer(uint32_t* timer)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 8007350:	f002 ffe2 	bl	800a318 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	601a      	str	r2, [r3, #0]
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <_ZN6buttonL10checkTimerEPmm>:

static uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8007370:	f002 ffd2 	bl	800a318 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d201      	bcs.n	8007386 <_ZN6buttonL10checkTimerEPmm+0x24>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <_ZN6buttonL10checkTimerEPmm+0x26>
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
	return ret;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <_ZN6button8btn_initEv>:


void btn_init()
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
	eventsRTOS.eventCreate();
 8007398:	4808      	ldr	r0, [pc, #32]	@ (80073bc <_ZN6button8btn_initEv+0x28>)
 800739a:	f7fd fe84 	bl	80050a6 <_ZN11System_Rtos15freertos_events11eventCreateEv>

	Button_.btn_code = button::btncodes::cNONE;
 800739e:	4b08      	ldr	r3, [pc, #32]	@ (80073c0 <_ZN6button8btn_initEv+0x2c>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	60da      	str	r2, [r3, #12]
	Button_.buttonFlag = 1;
 80073a4:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <_ZN6button8btn_initEv+0x2c>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	715a      	strb	r2, [r3, #5]
	Button_.buttonTimer = 0;
 80073aa:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <_ZN6button8btn_initEv+0x2c>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
	Button_.Sel_BT =button_identification::iNONE;
 80073b0:	4b03      	ldr	r3, [pc, #12]	@ (80073c0 <_ZN6button8btn_initEv+0x2c>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	609a      	str	r2, [r3, #8]
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20001d3c 	.word	0x20001d3c
 80073c0:	20001d48 	.word	0x20001d48

080073c4 <_ZN6button9gen_eventENS_8btncodesE>:
void gen_event(enum btncodes btnCode)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 80073cc:	4a04      	ldr	r2, [pc, #16]	@ (80073e0 <_ZN6button9gen_eventENS_8btncodesE+0x1c>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60d3      	str	r3, [r2, #12]
	eventsRTOS.eventGive();
 80073d2:	4804      	ldr	r0, [pc, #16]	@ (80073e4 <_ZN6button9gen_eventENS_8btncodesE+0x20>)
 80073d4:	f7fd fe74 	bl	80050c0 <_ZN11System_Rtos15freertos_events9eventGiveEv>
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20001d48 	.word	0x20001d48
 80073e4:	20001d3c 	.word	0x20001d3c

080073e8 <_ZN6button9get_eventEv>:
enum btncodes get_event()
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0

	eventsRTOS.eventTake();
 80073ec:	4803      	ldr	r0, [pc, #12]	@ (80073fc <_ZN6button9get_eventEv+0x14>)
 80073ee:	f7fd fea1 	bl	8005134 <_ZN11System_Rtos15freertos_events9eventTakeEv>
	return Button_.btn_code;
 80073f2:	4b03      	ldr	r3, [pc, #12]	@ (8007400 <_ZN6button9get_eventEv+0x18>)
 80073f4:	68db      	ldr	r3, [r3, #12]

}
 80073f6:	4618      	mov	r0, r3
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20001d3c 	.word	0x20001d3c
 8007400:	20001d48 	.word	0x20001d48

08007404 <_ZN6button14get_eventTimedEm>:
enum btncodes get_eventTimed(uint32_t time)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	eventsRTOS.eventTakeTimed(time);
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4804      	ldr	r0, [pc, #16]	@ (8007420 <_ZN6button14get_eventTimedEm+0x1c>)
 8007410:	f7fd fea2 	bl	8005158 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>
	return Button_.btn_code;
 8007414:	4b03      	ldr	r3, [pc, #12]	@ (8007424 <_ZN6button14get_eventTimedEm+0x20>)
 8007416:	68db      	ldr	r3, [r3, #12]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20001d3c 	.word	0x20001d3c
 8007424:	20001d48 	.word	0x20001d48

08007428 <_ZN6button8get_codeEv>:

enum btncodes get_code()
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
	return Button_.btn_code;
 800742c:	4b03      	ldr	r3, [pc, #12]	@ (800743c <_ZN6button8get_codeEv+0x14>)
 800742e:	68db      	ldr	r3, [r3, #12]
}
 8007430:	4618      	mov	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20001d48 	.word	0x20001d48

08007440 <_ZN6button9resetCodeENS_8btncodesE>:

void resetCode(enum btncodes btnCode)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 8007448:	4a04      	ldr	r2, [pc, #16]	@ (800745c <_ZN6button9resetCodeENS_8btncodesE+0x1c>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60d3      	str	r3, [r2, #12]
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20001d48 	.word	0x20001d48

08007460 <_ZN6button7btn_irqEv>:


void btn_irq()
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
	if (Button_.buttonFlag) {
 8007464:	4b9b      	ldr	r3, [pc, #620]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007466:	795b      	ldrb	r3, [r3, #5]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d070      	beq.n	800754e <_ZN6button7btn_irqEv+0xee>

         if (!pEnter_BT) {
 800746c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007470:	4899      	ldr	r0, [pc, #612]	@ (80076d8 <_ZN6button7btn_irqEv+0x278>)
 8007472:	f004 f8f9 	bl	800b668 <HAL_GPIO_ReadPin>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf0c      	ite	eq
 800747c:	2301      	moveq	r3, #1
 800747e:	2300      	movne	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <_ZN6button7btn_irqEv+0x3a>
				setTimer(&Button_.buttonTimer); //to set debounce
 8007486:	4893      	ldr	r0, [pc, #588]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007488:	f7ff ff5e 	bl	8007348 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 800748c:	4b91      	ldr	r3, [pc, #580]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800748e:	2200      	movs	r2, #0
 8007490:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iEnter_BT;
 8007492:	4b90      	ldr	r3, [pc, #576]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007494:	2201      	movs	r2, #1
 8007496:	609a      	str	r2, [r3, #8]
				Button_.Sel_BT = button_identification::iNONE;
				break;
			}
			}
		}
}
 8007498:	e11a      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
			}  else if (!pUP_BT) {
 800749a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800749e:	488e      	ldr	r0, [pc, #568]	@ (80076d8 <_ZN6button7btn_irqEv+0x278>)
 80074a0:	f004 f8e2 	bl	800b668 <HAL_GPIO_ReadPin>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bf0c      	ite	eq
 80074aa:	2301      	moveq	r3, #1
 80074ac:	2300      	movne	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <_ZN6button7btn_irqEv+0x68>
				setTimer(&Button_.buttonTimer); //to set debounce
 80074b4:	4887      	ldr	r0, [pc, #540]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80074b6:	f7ff ff47 	bl	8007348 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 80074ba:	4b86      	ldr	r3, [pc, #536]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80074bc:	2200      	movs	r2, #0
 80074be:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iUP_BT;
 80074c0:	4b84      	ldr	r3, [pc, #528]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80074c2:	2203      	movs	r2, #3
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	e103      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
			} else if (!pDWN_BT) {
 80074c8:	2180      	movs	r1, #128	@ 0x80
 80074ca:	4883      	ldr	r0, [pc, #524]	@ (80076d8 <_ZN6button7btn_irqEv+0x278>)
 80074cc:	f004 f8cc 	bl	800b668 <HAL_GPIO_ReadPin>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf0c      	ite	eq
 80074d6:	2301      	moveq	r3, #1
 80074d8:	2300      	movne	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <_ZN6button7btn_irqEv+0x94>
				setTimer(&Button_.buttonTimer); //to set debounce
 80074e0:	487c      	ldr	r0, [pc, #496]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80074e2:	f7ff ff31 	bl	8007348 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 80074e6:	4b7b      	ldr	r3, [pc, #492]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iDWN_BT;
 80074ec:	4b79      	ldr	r3, [pc, #484]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80074ee:	2204      	movs	r2, #4
 80074f0:	609a      	str	r2, [r3, #8]
}
 80074f2:	e0ed      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
			} else if (!pRGHT_BT) {
 80074f4:	2101      	movs	r1, #1
 80074f6:	4879      	ldr	r0, [pc, #484]	@ (80076dc <_ZN6button7btn_irqEv+0x27c>)
 80074f8:	f004 f8b6 	bl	800b668 <HAL_GPIO_ReadPin>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d009      	beq.n	8007520 <_ZN6button7btn_irqEv+0xc0>
				setTimer(&Button_.buttonTimer); //to set debounce
 800750c:	4871      	ldr	r0, [pc, #452]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800750e:	f7ff ff1b 	bl	8007348 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8007512:	4b70      	ldr	r3, [pc, #448]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007514:	2200      	movs	r2, #0
 8007516:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iRGHT_BT;
 8007518:	4b6e      	ldr	r3, [pc, #440]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800751a:	2205      	movs	r2, #5
 800751c:	609a      	str	r2, [r3, #8]
}
 800751e:	e0d7      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
			} else if (!pLFT_BT) {
 8007520:	2140      	movs	r1, #64	@ 0x40
 8007522:	486f      	ldr	r0, [pc, #444]	@ (80076e0 <_ZN6button7btn_irqEv+0x280>)
 8007524:	f004 f8a0 	bl	800b668 <HAL_GPIO_ReadPin>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80cb 	beq.w	80076d0 <_ZN6button7btn_irqEv+0x270>
				setTimer(&Button_.buttonTimer); //to set debounce
 800753a:	4866      	ldr	r0, [pc, #408]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800753c:	f7ff ff04 	bl	8007348 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8007540:	4b64      	ldr	r3, [pc, #400]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007542:	2200      	movs	r2, #0
 8007544:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iLFT_BT;
 8007546:	4b63      	ldr	r3, [pc, #396]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007548:	2206      	movs	r2, #6
 800754a:	609a      	str	r2, [r3, #8]
}
 800754c:	e0c0      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
		} else if ((!Button_.buttonFlag)
 800754e:	4b61      	ldr	r3, [pc, #388]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007550:	795b      	ldrb	r3, [r3, #5]
				&& (checkTimer(&Button_.buttonTimer, 120))) //check debounce
 8007552:	2b00      	cmp	r3, #0
 8007554:	d108      	bne.n	8007568 <_ZN6button7btn_irqEv+0x108>
 8007556:	2178      	movs	r1, #120	@ 0x78
 8007558:	485e      	ldr	r0, [pc, #376]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800755a:	f7ff ff02 	bl	8007362 <_ZN6buttonL10checkTimerEPmm>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <_ZN6button7btn_irqEv+0x108>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <_ZN6button7btn_irqEv+0x10a>
 8007568:	2300      	movs	r3, #0
		} else if ((!Button_.buttonFlag)
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80b0 	beq.w	80076d0 <_ZN6button7btn_irqEv+0x270>
			switch (Button_.Sel_BT) {
 8007570:	4b58      	ldr	r3, [pc, #352]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	3b01      	subs	r3, #1
 8007576:	2b05      	cmp	r3, #5
 8007578:	f200 80a3 	bhi.w	80076c2 <_ZN6button7btn_irqEv+0x262>
 800757c:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <_ZN6button7btn_irqEv+0x124>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	0800759d 	.word	0x0800759d
 8007588:	080076c3 	.word	0x080076c3
 800758c:	080075d9 	.word	0x080075d9
 8007590:	08007615 	.word	0x08007615
 8007594:	0800764f 	.word	0x0800764f
 8007598:	08007689 	.word	0x08007689
				if (!pEnter_BT) {
 800759c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80075a0:	484d      	ldr	r0, [pc, #308]	@ (80076d8 <_ZN6button7btn_irqEv+0x278>)
 80075a2:	f004 f861 	bl	800b668 <HAL_GPIO_ReadPin>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <_ZN6button7btn_irqEv+0x16a>
					Button_.buttonFlag = SET;
 80075b6:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80075bc:	4b45      	ldr	r3, [pc, #276]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cEnter_BT);
 80075c2:	200a      	movs	r0, #10
 80075c4:	f7ff fefe 	bl	80073c4 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 80075c8:	e082      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
					Button_.buttonFlag = SET;
 80075ca:	4b42      	ldr	r3, [pc, #264]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80075d0:	4b40      	ldr	r3, [pc, #256]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	609a      	str	r2, [r3, #8]
				break;
 80075d6:	e07b      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
				if (!pUP_BT) {
 80075d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80075dc:	483e      	ldr	r0, [pc, #248]	@ (80076d8 <_ZN6button7btn_irqEv+0x278>)
 80075de:	f004 f843 	bl	800b668 <HAL_GPIO_ReadPin>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <_ZN6button7btn_irqEv+0x1a6>
					Button_.buttonFlag = SET;
 80075f2:	4b38      	ldr	r3, [pc, #224]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80075f8:	4b36      	ldr	r3, [pc, #216]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cUP_BT);
 80075fe:	201e      	movs	r0, #30
 8007600:	f7ff fee0 	bl	80073c4 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8007604:	e064      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
					Button_.buttonFlag = SET;
 8007606:	4b33      	ldr	r3, [pc, #204]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007608:	2201      	movs	r2, #1
 800760a:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800760c:	4b31      	ldr	r3, [pc, #196]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800760e:	2200      	movs	r2, #0
 8007610:	609a      	str	r2, [r3, #8]
				break;
 8007612:	e05d      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
				if (!pDWN_BT) {
 8007614:	2180      	movs	r1, #128	@ 0x80
 8007616:	4830      	ldr	r0, [pc, #192]	@ (80076d8 <_ZN6button7btn_irqEv+0x278>)
 8007618:	f004 f826 	bl	800b668 <HAL_GPIO_ReadPin>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	bf0c      	ite	eq
 8007622:	2301      	moveq	r3, #1
 8007624:	2300      	movne	r3, #0
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d009      	beq.n	8007640 <_ZN6button7btn_irqEv+0x1e0>
					Button_.buttonFlag = SET;
 800762c:	4b29      	ldr	r3, [pc, #164]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800762e:	2201      	movs	r2, #1
 8007630:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8007632:	4b28      	ldr	r3, [pc, #160]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007634:	2200      	movs	r2, #0
 8007636:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cDWN_BT);
 8007638:	2028      	movs	r0, #40	@ 0x28
 800763a:	f7ff fec3 	bl	80073c4 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 800763e:	e047      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
					Button_.buttonFlag = SET;
 8007640:	4b24      	ldr	r3, [pc, #144]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007642:	2201      	movs	r2, #1
 8007644:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8007646:	4b23      	ldr	r3, [pc, #140]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007648:	2200      	movs	r2, #0
 800764a:	609a      	str	r2, [r3, #8]
				break;
 800764c:	e040      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
				if (!pRGHT_BT) {
 800764e:	2101      	movs	r1, #1
 8007650:	4822      	ldr	r0, [pc, #136]	@ (80076dc <_ZN6button7btn_irqEv+0x27c>)
 8007652:	f004 f809 	bl	800b668 <HAL_GPIO_ReadPin>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <_ZN6button7btn_irqEv+0x21a>
					Button_.buttonFlag = SET;
 8007666:	4b1b      	ldr	r3, [pc, #108]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007668:	2201      	movs	r2, #1
 800766a:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800766c:	4b19      	ldr	r3, [pc, #100]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cRGHT_BT);
 8007672:	2032      	movs	r0, #50	@ 0x32
 8007674:	f7ff fea6 	bl	80073c4 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8007678:	e02a      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
					Button_.buttonFlag = SET;
 800767a:	4b16      	ldr	r3, [pc, #88]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 800767c:	2201      	movs	r2, #1
 800767e:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8007680:	4b14      	ldr	r3, [pc, #80]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 8007682:	2200      	movs	r2, #0
 8007684:	609a      	str	r2, [r3, #8]
				break;
 8007686:	e023      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
				if (!pLFT_BT) {
 8007688:	2140      	movs	r1, #64	@ 0x40
 800768a:	4815      	ldr	r0, [pc, #84]	@ (80076e0 <_ZN6button7btn_irqEv+0x280>)
 800768c:	f003 ffec 	bl	800b668 <HAL_GPIO_ReadPin>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <_ZN6button7btn_irqEv+0x254>
					Button_.buttonFlag = SET;
 80076a0:	4b0c      	ldr	r3, [pc, #48]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80076a6:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cLFT_BT);
 80076ac:	203c      	movs	r0, #60	@ 0x3c
 80076ae:	f7ff fe89 	bl	80073c4 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 80076b2:	e00d      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
					Button_.buttonFlag = SET;
 80076b4:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80076ba:	4b06      	ldr	r3, [pc, #24]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80076bc:	2200      	movs	r2, #0
 80076be:	609a      	str	r2, [r3, #8]
				break;
 80076c0:	e006      	b.n	80076d0 <_ZN6button7btn_irqEv+0x270>
				Button_.buttonFlag = SET;
 80076c2:	4b04      	ldr	r3, [pc, #16]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iNONE;
 80076c8:	4b02      	ldr	r3, [pc, #8]	@ (80076d4 <_ZN6button7btn_irqEv+0x274>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
				break;
 80076ce:	bf00      	nop
}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20001d48 	.word	0x20001d48
 80076d8:	40021000 	.word	0x40021000
 80076dc:	40020400 	.word	0x40020400
 80076e0:	40020000 	.word	0x40020000

080076e4 <_Z41__static_initialization_and_destruction_0ii>:

}
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d107      	bne.n	8007704 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d102      	bne.n	8007704 <_Z41__static_initialization_and_destruction_0ii+0x20>
System_Rtos::freertos_events eventsRTOS;
 80076fe:	4803      	ldr	r0, [pc, #12]	@ (800770c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007700:	f7fd fcc6 	bl	8005090 <_ZN11System_Rtos15freertos_eventsC1Ev>
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20001d3c 	.word	0x20001d3c

08007710 <_GLOBAL__sub_I_My_Button_IRQHandlerC>:
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
 8007714:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007718:	2001      	movs	r0, #1
 800771a:	f7ff ffe3 	bl	80076e4 <_Z41__static_initialization_and_destruction_0ii>
 800771e:	bd80      	pop	{r7, pc}

08007720 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af02      	add	r7, sp, #8
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	4603      	mov	r3, r0
 8007730:	70fb      	strb	r3, [r7, #3]
 8007732:	460b      	mov	r3, r1
 8007734:	70bb      	strb	r3, [r7, #2]
 8007736:	4613      	mov	r3, r2
 8007738:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007740:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf0c      	ite	eq
 8007748:	2301      	moveq	r3, #1
 800774a:	2300      	movne	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	787b      	ldrb	r3, [r7, #1]
 8007754:	4413      	add	r3, r2
 8007756:	b2d8      	uxtb	r0, r3
 8007758:	78bb      	ldrb	r3, [r7, #2]
 800775a:	3301      	adds	r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	78ba      	ldrb	r2, [r7, #2]
 8007760:	78f9      	ldrb	r1, [r7, #3]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4603      	mov	r3, r0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f859 	bl	800881e <u8g2_IsIntersection>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d040      	beq.n	80077f4 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8007776:	e035      	b.n	80077e4 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	4013      	ands	r3, r2
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7bba      	ldrb	r2, [r7, #14]
 800778a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800778e:	78ba      	ldrb	r2, [r7, #2]
 8007790:	78f9      	ldrb	r1, [r7, #3]
 8007792:	2300      	movs	r3, #0
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2301      	movs	r3, #1
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ffd7 	bl	800874c <u8g2_DrawHVLine>
 800779e:	e010      	b.n	80077c2 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7b7a      	ldrb	r2, [r7, #13]
 80077ae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80077b2:	78ba      	ldrb	r2, [r7, #2]
 80077b4:	78f9      	ldrb	r1, [r7, #3]
 80077b6:	2300      	movs	r3, #0
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	2301      	movs	r3, #1
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ffc5 	bl	800874c <u8g2_DrawHVLine>
    }
    x++;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	3301      	adds	r3, #1
 80077c6:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
      b++;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	3301      	adds	r3, #1
 80077dc:	61bb      	str	r3, [r7, #24]
    }
    len--;
 80077de:	787b      	ldrb	r3, [r7, #1]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 80077e4:	787b      	ldrb	r3, [r7, #1]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1c6      	bne.n	8007778 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	7bba      	ldrb	r2, [r7, #14]
 80077ee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 80077f2:	e000      	b.n	80077f6 <u8g2_DrawHXBM+0xd6>
    return;
 80077f4:	bf00      	nop
}
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af02      	add	r7, sp, #8
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	4608      	mov	r0, r1
 8007806:	4611      	mov	r1, r2
 8007808:	461a      	mov	r2, r3
 800780a:	4603      	mov	r3, r0
 800780c:	70fb      	strb	r3, [r7, #3]
 800780e:	460b      	mov	r3, r1
 8007810:	70bb      	strb	r3, [r7, #2]
 8007812:	4613      	mov	r3, r2
 8007814:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8007816:	787b      	ldrb	r3, [r7, #1]
 8007818:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	3307      	adds	r3, #7
 800781e:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	08db      	lsrs	r3, r3, #3
 8007824:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	787b      	ldrb	r3, [r7, #1]
 800782a:	4413      	add	r3, r2
 800782c:	b2d8      	uxtb	r0, r3
 800782e:	78ba      	ldrb	r2, [r7, #2]
 8007830:	7e3b      	ldrb	r3, [r7, #24]
 8007832:	4413      	add	r3, r2
 8007834:	b2db      	uxtb	r3, r3
 8007836:	78ba      	ldrb	r2, [r7, #2]
 8007838:	78f9      	ldrb	r1, [r7, #3]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4603      	mov	r3, r0
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 ffed 	bl	800881e <u8g2_IsIntersection>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d017      	beq.n	800787a <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800784a:	e012      	b.n	8007872 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800784c:	7878      	ldrb	r0, [r7, #1]
 800784e:	78ba      	ldrb	r2, [r7, #2]
 8007850:	78f9      	ldrb	r1, [r7, #3]
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ff61 	bl	8007720 <u8g2_DrawHXBM>
    bitmap += blen;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	61fb      	str	r3, [r7, #28]
    y++;
 8007866:	78bb      	ldrb	r3, [r7, #2]
 8007868:	3301      	adds	r3, #1
 800786a:	70bb      	strb	r3, [r7, #2]
    h--;
 800786c:	7e3b      	ldrb	r3, [r7, #24]
 800786e:	3b01      	subs	r3, #1
 8007870:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8007872:	7e3b      	ldrb	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e9      	bne.n	800784c <u8g2_DrawXBM+0x50>
 8007878:	e000      	b.n	800787c <u8g2_DrawXBM+0x80>
    return;
 800787a:	bf00      	nop
  }
}
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af02      	add	r7, sp, #8
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	461a      	mov	r2, r3
 8007890:	4603      	mov	r3, r0
 8007892:	70fb      	strb	r3, [r7, #3]
 8007894:	460b      	mov	r3, r1
 8007896:	70bb      	strb	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	787b      	ldrb	r3, [r7, #1]
 80078a0:	4413      	add	r3, r2
 80078a2:	b2d8      	uxtb	r0, r3
 80078a4:	78ba      	ldrb	r2, [r7, #2]
 80078a6:	7c3b      	ldrb	r3, [r7, #16]
 80078a8:	4413      	add	r3, r2
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	78ba      	ldrb	r2, [r7, #2]
 80078ae:	78f9      	ldrb	r1, [r7, #3]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	4603      	mov	r3, r0
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 ffb2 	bl	800881e <u8g2_IsIntersection>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d012      	beq.n	80078e6 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80078c0:	e00d      	b.n	80078de <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80078c2:	787b      	ldrb	r3, [r7, #1]
 80078c4:	78ba      	ldrb	r2, [r7, #2]
 80078c6:	78f9      	ldrb	r1, [r7, #3]
 80078c8:	2000      	movs	r0, #0
 80078ca:	9000      	str	r0, [sp, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 ff3d 	bl	800874c <u8g2_DrawHVLine>
    y++;    
 80078d2:	78bb      	ldrb	r3, [r7, #2]
 80078d4:	3301      	adds	r3, #1
 80078d6:	70bb      	strb	r3, [r7, #2]
    h--;
 80078d8:	7c3b      	ldrb	r3, [r7, #16]
 80078da:	3b01      	subs	r3, #1
 80078dc:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80078de:	7c3b      	ldrb	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1ee      	bne.n	80078c2 <u8g2_DrawBox+0x40>
 80078e4:	e000      	b.n	80078e8 <u8g2_DrawBox+0x66>
    return;
 80078e6:	bf00      	nop
  }
}
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	7c1b      	ldrb	r3, [r3, #16]
 80078fc:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007904:	461a      	mov	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f00b fd8a 	bl	8013436 <memset>
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af02      	add	r7, sp, #8
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
 8007936:	4613      	mov	r3, r2
 8007938:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	7c1b      	ldrb	r3, [r3, #16]
 8007940:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	b29b      	uxth	r3, r3
 8007950:	89ba      	ldrh	r2, [r7, #12]
 8007952:	fb12 f303 	smulbb	r3, r2, r3
 8007956:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8007958:	89bb      	ldrh	r3, [r7, #12]
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800795e:	89bb      	ldrh	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	4413      	add	r3, r2
 8007964:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8007966:	7bf9      	ldrb	r1, [r7, #15]
 8007968:	78ba      	ldrb	r2, [r7, #2]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	460b      	mov	r3, r1
 8007970:	2100      	movs	r1, #0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fb72 	bl	800905c <u8x8_DrawTile>
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007992:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800799a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	7c5b      	ldrb	r3, [r3, #17]
 80079a2:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80079a4:	7bba      	ldrb	r2, [r7, #14]
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff ffbd 	bl	800792a <u8g2_send_tile_row>
    src_row++;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	3301      	adds	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	3301      	adds	r3, #1
 80079ba:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80079bc:	7bfa      	ldrb	r2, [r7, #15]
 80079be:	7b7b      	ldrb	r3, [r7, #13]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d203      	bcs.n	80079cc <u8g2_send_buffer+0x4c>
 80079c4:	7bba      	ldrb	r2, [r7, #14]
 80079c6:	7b3b      	ldrb	r3, [r7, #12]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d3eb      	bcc.n	80079a4 <u8g2_send_buffer+0x24>
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ffcf 	bl	8007980 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fb8b 	bl	80090fe <u8x8_RefreshDisplay>
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2208      	movs	r2, #8
 80079fc:	701a      	strb	r2, [r3, #0]
  return buf;
 80079fe:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <u8g2_m_16_8_f+0x1c>)
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20001d58 	.word	0x20001d58

08007a10 <u8g2_Setup_ssd1309_128x64_noname0_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a0b      	ldr	r2, [pc, #44]	@ (8007a54 <u8g2_Setup_ssd1309_128x64_noname0_f+0x44>)
 8007a26:	490c      	ldr	r1, [pc, #48]	@ (8007a58 <u8g2_Setup_ssd1309_128x64_noname0_f+0x48>)
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 fbc9 	bl	80091c0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8007a2e:	f107 0313 	add.w	r3, r7, #19
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff ffdc 	bl	80079f0 <u8g2_m_16_8_f>
 8007a38:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8007a3a:	7cfa      	ldrb	r2, [r7, #19]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4b06      	ldr	r3, [pc, #24]	@ (8007a5c <u8g2_Setup_ssd1309_128x64_noname0_f+0x4c>)
 8007a42:	6979      	ldr	r1, [r7, #20]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 ffb6 	bl	80089b6 <u8g2_SetupBuffer>
}
 8007a4a:	bf00      	nop
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	08008d99 	.word	0x08008d99
 8007a58:	08008f19 	.word	0x08008f19
 8007a5c:	08008875 	.word	0x08008875

08007a60 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	781b      	ldrb	r3, [r3, #0]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	81fb      	strh	r3, [r7, #14]
    font++;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8007aa4:	89fb      	ldrh	r3, [r7, #14]
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	81fb      	strh	r3, [r7, #14]
    return pos;
 8007ab6:	89fb      	ldrh	r3, [r7, #14]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6838      	ldr	r0, [r7, #0]
 8007ad2:	f7ff ffc5 	bl	8007a60 <u8g2_font_get_byte>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8007ade:	2101      	movs	r1, #1
 8007ae0:	6838      	ldr	r0, [r7, #0]
 8007ae2:	f7ff ffbd 	bl	8007a60 <u8g2_font_get_byte>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8007aee:	2102      	movs	r1, #2
 8007af0:	6838      	ldr	r0, [r7, #0]
 8007af2:	f7ff ffb5 	bl	8007a60 <u8g2_font_get_byte>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8007afe:	2103      	movs	r1, #3
 8007b00:	6838      	ldr	r0, [r7, #0]
 8007b02:	f7ff ffad 	bl	8007a60 <u8g2_font_get_byte>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8007b0e:	2104      	movs	r1, #4
 8007b10:	6838      	ldr	r0, [r7, #0]
 8007b12:	f7ff ffa5 	bl	8007a60 <u8g2_font_get_byte>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8007b1e:	2105      	movs	r1, #5
 8007b20:	6838      	ldr	r0, [r7, #0]
 8007b22:	f7ff ff9d 	bl	8007a60 <u8g2_font_get_byte>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8007b2e:	2106      	movs	r1, #6
 8007b30:	6838      	ldr	r0, [r7, #0]
 8007b32:	f7ff ff95 	bl	8007a60 <u8g2_font_get_byte>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8007b3e:	2107      	movs	r1, #7
 8007b40:	6838      	ldr	r0, [r7, #0]
 8007b42:	f7ff ff8d 	bl	8007a60 <u8g2_font_get_byte>
 8007b46:	4603      	mov	r3, r0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8007b4e:	2108      	movs	r1, #8
 8007b50:	6838      	ldr	r0, [r7, #0]
 8007b52:	f7ff ff85 	bl	8007a60 <u8g2_font_get_byte>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8007b5e:	2109      	movs	r1, #9
 8007b60:	6838      	ldr	r0, [r7, #0]
 8007b62:	f7ff ff7d 	bl	8007a60 <u8g2_font_get_byte>
 8007b66:	4603      	mov	r3, r0
 8007b68:	b25a      	sxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8007b6e:	210a      	movs	r1, #10
 8007b70:	6838      	ldr	r0, [r7, #0]
 8007b72:	f7ff ff75 	bl	8007a60 <u8g2_font_get_byte>
 8007b76:	4603      	mov	r3, r0
 8007b78:	b25a      	sxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8007b7e:	210b      	movs	r1, #11
 8007b80:	6838      	ldr	r0, [r7, #0]
 8007b82:	f7ff ff6d 	bl	8007a60 <u8g2_font_get_byte>
 8007b86:	4603      	mov	r3, r0
 8007b88:	b25a      	sxtb	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8007b8e:	210c      	movs	r1, #12
 8007b90:	6838      	ldr	r0, [r7, #0]
 8007b92:	f7ff ff65 	bl	8007a60 <u8g2_font_get_byte>
 8007b96:	4603      	mov	r3, r0
 8007b98:	b25a      	sxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8007b9e:	210d      	movs	r1, #13
 8007ba0:	6838      	ldr	r0, [r7, #0]
 8007ba2:	f7ff ff5d 	bl	8007a60 <u8g2_font_get_byte>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	b25a      	sxtb	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8007bae:	210e      	movs	r1, #14
 8007bb0:	6838      	ldr	r0, [r7, #0]
 8007bb2:	f7ff ff55 	bl	8007a60 <u8g2_font_get_byte>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	b25a      	sxtb	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8007bbe:	210f      	movs	r1, #15
 8007bc0:	6838      	ldr	r0, [r7, #0]
 8007bc2:	f7ff ff4d 	bl	8007a60 <u8g2_font_get_byte>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	b25a      	sxtb	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8007bce:	2110      	movs	r1, #16
 8007bd0:	6838      	ldr	r0, [r7, #0]
 8007bd2:	f7ff ff45 	bl	8007a60 <u8g2_font_get_byte>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	b25a      	sxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8007bde:	2111      	movs	r1, #17
 8007be0:	6838      	ldr	r0, [r7, #0]
 8007be2:	f7ff ff4f 	bl	8007a84 <u8g2_font_get_word>
 8007be6:	4603      	mov	r3, r0
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8007bee:	2113      	movs	r1, #19
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f7ff ff47 	bl	8007a84 <u8g2_font_get_word>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8007bfe:	2115      	movs	r1, #21
 8007c00:	6838      	ldr	r0, [r7, #0]
 8007c02:	f7ff ff3f 	bl	8007a84 <u8g2_font_get_word>
 8007c06:	4603      	mov	r3, r0
 8007c08:	461a      	mov	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	82da      	strh	r2, [r3, #22]
#endif
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7a9b      	ldrb	r3, [r3, #10]
 8007c26:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8007c30:	7bfa      	ldrb	r2, [r7, #15]
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	fa42 f303 	asr.w	r3, r2, r3
 8007c38:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8007c3a:	7b7b      	ldrb	r3, [r7, #13]
 8007c3c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8007c3e:	7bba      	ldrb	r2, [r7, #14]
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	4413      	add	r3, r2
 8007c44:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b07      	cmp	r3, #7
 8007c4a:	d91a      	bls.n	8007c82 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8007c50:	7b3a      	ldrb	r2, [r7, #12]
 8007c52:	7b7b      	ldrb	r3, [r7, #13]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	7b3b      	ldrb	r3, [r7, #12]
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	b25a      	sxtb	r2, r3
 8007c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	3b08      	subs	r3, #8
 8007c80:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	f04f 32ff 	mov.w	r2, #4294967295
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	4013      	ands	r3, r2
 8007c96:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7bba      	ldrb	r2, [r7, #14]
 8007c9c:	729a      	strb	r2, [r3, #10]
  return val;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ffaa 	bl	8007c16 <u8g2_font_decode_get_unsigned_bits>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8007cd0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8007cdc:	7bfa      	ldrb	r2, [r7, #15]
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	73fb      	strb	r3, [r7, #15]
  return v;
 8007ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8007cf2:	b490      	push	{r4, r7}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	4608      	mov	r0, r1
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	461a      	mov	r2, r3
 8007d00:	4623      	mov	r3, r4
 8007d02:	71fb      	strb	r3, [r7, #7]
 8007d04:	4603      	mov	r3, r0
 8007d06:	71bb      	strb	r3, [r7, #6]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	717b      	strb	r3, [r7, #5]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8007d10:	793b      	ldrb	r3, [r7, #4]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d010      	beq.n	8007d38 <u8g2_add_vector_y+0x46>
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	dc13      	bgt.n	8007d42 <u8g2_add_vector_y+0x50>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <u8g2_add_vector_y+0x32>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d005      	beq.n	8007d2e <u8g2_add_vector_y+0x3c>
 8007d22:	e00e      	b.n	8007d42 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8007d24:	797a      	ldrb	r2, [r7, #5]
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	4413      	add	r3, r2
 8007d2a:	71fb      	strb	r3, [r7, #7]
      break;
 8007d2c:	e00e      	b.n	8007d4c <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8007d2e:	79ba      	ldrb	r2, [r7, #6]
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	4413      	add	r3, r2
 8007d34:	71fb      	strb	r3, [r7, #7]
      break;
 8007d36:	e009      	b.n	8007d4c <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8007d38:	797b      	ldrb	r3, [r7, #5]
 8007d3a:	79fa      	ldrb	r2, [r7, #7]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	71fb      	strb	r3, [r7, #7]
      break;
 8007d40:	e004      	b.n	8007d4c <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8007d42:	79bb      	ldrb	r3, [r7, #6]
 8007d44:	79fa      	ldrb	r2, [r7, #7]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	71fb      	strb	r3, [r7, #7]
      break;      
 8007d4a:	bf00      	nop
  }
  return dy;
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc90      	pop	{r4, r7}
 8007d56:	4770      	bx	lr

08007d58 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8007d58:	b490      	push	{r4, r7}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	461a      	mov	r2, r3
 8007d66:	4623      	mov	r3, r4
 8007d68:	71fb      	strb	r3, [r7, #7]
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71bb      	strb	r3, [r7, #6]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	717b      	strb	r3, [r7, #5]
 8007d72:	4613      	mov	r3, r2
 8007d74:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8007d76:	793b      	ldrb	r3, [r7, #4]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d010      	beq.n	8007d9e <u8g2_add_vector_x+0x46>
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	dc13      	bgt.n	8007da8 <u8g2_add_vector_x+0x50>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <u8g2_add_vector_x+0x32>
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d005      	beq.n	8007d94 <u8g2_add_vector_x+0x3c>
 8007d88:	e00e      	b.n	8007da8 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8007d8a:	79ba      	ldrb	r2, [r7, #6]
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	4413      	add	r3, r2
 8007d90:	71fb      	strb	r3, [r7, #7]
      break;
 8007d92:	e00e      	b.n	8007db2 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8007d94:	797b      	ldrb	r3, [r7, #5]
 8007d96:	79fa      	ldrb	r2, [r7, #7]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	71fb      	strb	r3, [r7, #7]
      break;
 8007d9c:	e009      	b.n	8007db2 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8007d9e:	79bb      	ldrb	r3, [r7, #6]
 8007da0:	79fa      	ldrb	r2, [r7, #7]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	71fb      	strb	r3, [r7, #7]
      break;
 8007da6:	e004      	b.n	8007db2 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8007da8:	797a      	ldrb	r2, [r7, #5]
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	4413      	add	r3, r2
 8007dae:	71fb      	strb	r3, [r7, #7]
      break;      
 8007db0:	bf00      	nop
  }
  return dx;
 8007db2:	79fb      	ldrb	r3, [r7, #7]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc90      	pop	{r4, r7}
 8007dbc:	4770      	bx	lr

08007dbe <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b088      	sub	sp, #32
 8007dc2:	af02      	add	r7, sp, #8
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3350      	adds	r3, #80	@ 0x50
 8007dd2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007dde:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8007de6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007dee:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8007df0:	7bfa      	ldrb	r2, [r7, #15]
 8007df2:	7d7b      	ldrb	r3, [r7, #21]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8007dfc:	7dfa      	ldrb	r2, [r7, #23]
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d201      	bcs.n	8007e08 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	791b      	ldrb	r3, [r3, #4]
 8007e0c:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	795b      	ldrb	r3, [r3, #5]
 8007e12:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8007e14:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8007e18:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	7b9b      	ldrb	r3, [r3, #14]
 8007e20:	7bb8      	ldrb	r0, [r7, #14]
 8007e22:	f7ff ff99 	bl	8007d58 <u8g2_add_vector_x>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8007e2a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8007e2e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	7b9b      	ldrb	r3, [r3, #14]
 8007e36:	7b78      	ldrb	r0, [r7, #13]
 8007e38:	f7ff ff5b 	bl	8007cf2 <u8g2_add_vector_y>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8007e40:	78bb      	ldrb	r3, [r7, #2]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00f      	beq.n	8007e66 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	7b1a      	ldrb	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	7b9b      	ldrb	r3, [r3, #14]
 8007e54:	7db8      	ldrb	r0, [r7, #22]
 8007e56:	7b7a      	ldrb	r2, [r7, #13]
 8007e58:	7bb9      	ldrb	r1, [r7, #14]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fc74 	bl	800874c <u8g2_DrawHVLine>
 8007e64:	e012      	b.n	8007e8c <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	7adb      	ldrb	r3, [r3, #11]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10e      	bne.n	8007e8c <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	7b5a      	ldrb	r2, [r3, #13]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	7b9b      	ldrb	r3, [r3, #14]
 8007e7c:	7db8      	ldrb	r0, [r7, #22]
 8007e7e:	7b7a      	ldrb	r2, [r7, #13]
 8007e80:	7bb9      	ldrb	r1, [r7, #14]
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	4603      	mov	r3, r0
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fc60 	bl	800874c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8007e8c:	7dfa      	ldrb	r2, [r7, #23]
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d309      	bcc.n	8007ea8 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8007e94:	7dfa      	ldrb	r2, [r7, #23]
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	757b      	strb	r3, [r7, #21]
    ly++;
 8007ea0:	7d3b      	ldrb	r3, [r7, #20]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8007ea6:	e79f      	b.n	8007de8 <u8g2_font_decode_len+0x2a>
      break;
 8007ea8:	bf00      	nop
  }
  lx += cnt;
 8007eaa:	7d7a      	ldrb	r2, [r7, #21]
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	4413      	add	r3, r2
 8007eb0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8007eb2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8007eba:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	71da      	strb	r2, [r3, #7]
  
}
 8007ec2:	bf00      	nop
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3350      	adds	r3, #80	@ 0x50
 8007ed8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007eec:	4619      	mov	r1, r3
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff fe91 	bl	8007c16 <u8g2_font_decode_get_unsigned_bits>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	b25a      	sxtb	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff fe86 	bl	8007c16 <u8g2_font_decode_get_unsigned_bits>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	b25a      	sxtb	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7b1b      	ldrb	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bf0c      	ite	eq
 8007f24:	2301      	moveq	r3, #1
 8007f26:	2300      	movne	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	735a      	strb	r2, [r3, #13]
}
 8007f30:	bf00      	nop
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3350      	adds	r3, #80	@ 0x50
 8007f46:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff ffbd 	bl	8007eca <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f56:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6938      	ldr	r0, [r7, #16]
 8007f62:	f7ff fea3 	bl	8007cac <u8g2_font_decode_get_signed_bits>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 8007f70:	4619      	mov	r1, r3
 8007f72:	6938      	ldr	r0, [r7, #16]
 8007f74:	f7ff fe9a 	bl	8007cac <u8g2_font_decode_get_signed_bits>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8007f82:	4619      	mov	r1, r3
 8007f84:	6938      	ldr	r0, [r7, #16]
 8007f86:	f7ff fe91 	bl	8007cac <u8g2_font_decode_get_signed_bits>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f340 80cf 	ble.w	8008138 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	7918      	ldrb	r0, [r3, #4]
 8007f9e:	7bfa      	ldrb	r2, [r7, #15]
 8007fa0:	7b7b      	ldrb	r3, [r7, #13]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	425b      	negs	r3, r3
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	b25a      	sxtb	r2, r3
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	7b9b      	ldrb	r3, [r3, #14]
 8007fb0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8007fb4:	f7ff fed0 	bl	8007d58 <u8g2_add_vector_x>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	7958      	ldrb	r0, [r3, #5]
 8007fc4:	7bfa      	ldrb	r2, [r7, #15]
 8007fc6:	7b7b      	ldrb	r3, [r7, #13]
 8007fc8:	4413      	add	r3, r2
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	425b      	negs	r3, r3
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	b25a      	sxtb	r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	7b9b      	ldrb	r3, [r3, #14]
 8007fd6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8007fda:	f7ff fe8a 	bl	8007cf2 <u8g2_add_vector_y>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	791b      	ldrb	r3, [r3, #4]
 8007fea:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	795b      	ldrb	r3, [r3, #5]
 8007ff0:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8007ff6:	7d7b      	ldrb	r3, [r7, #21]
 8007ff8:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	7b9b      	ldrb	r3, [r3, #14]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d852      	bhi.n	80080a8 <u8g2_font_decode_glyph+0x170>
 8008002:	a201      	add	r2, pc, #4	@ (adr r2, 8008008 <u8g2_font_decode_glyph+0xd0>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	08008019 	.word	0x08008019
 800800c:	08008031 	.word	0x08008031
 8008010:	08008055 	.word	0x08008055
 8008014:	08008085 	.word	0x08008085
      {
	case 0:
	    x1 += decode->glyph_width;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	7dbb      	ldrb	r3, [r7, #22]
 8008022:	4413      	add	r3, r2
 8008024:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8008026:	7bfa      	ldrb	r2, [r7, #15]
 8008028:	7d3b      	ldrb	r3, [r7, #20]
 800802a:	4413      	add	r3, r2
 800802c:	753b      	strb	r3, [r7, #20]
	    break;
 800802e:	e03b      	b.n	80080a8 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	7dfa      	ldrb	r2, [r7, #23]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	3301      	adds	r3, #1
 800803c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800803e:	7dbb      	ldrb	r3, [r7, #22]
 8008040:	3301      	adds	r3, #1
 8008042:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	7d3b      	ldrb	r3, [r7, #20]
 800804e:	4413      	add	r3, r2
 8008050:	753b      	strb	r3, [r7, #20]
	    break;
 8008052:	e029      	b.n	80080a8 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	7dfa      	ldrb	r2, [r7, #23]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	3301      	adds	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8008068:	7dbb      	ldrb	r3, [r7, #22]
 800806a:	3301      	adds	r3, #1
 800806c:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	7d7a      	ldrb	r2, [r7, #21]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008076:	7d7b      	ldrb	r3, [r7, #21]
 8008078:	3301      	adds	r3, #1
 800807a:	757b      	strb	r3, [r7, #21]
	    y1++;
 800807c:	7d3b      	ldrb	r3, [r7, #20]
 800807e:	3301      	adds	r3, #1
 8008080:	753b      	strb	r3, [r7, #20]
	    break;	  
 8008082:	e011      	b.n	80080a8 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8008084:	7bfa      	ldrb	r2, [r7, #15]
 8008086:	7dbb      	ldrb	r3, [r7, #22]
 8008088:	4413      	add	r3, r2
 800808a:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	7d7a      	ldrb	r2, [r7, #21]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800809a:	7d7b      	ldrb	r3, [r7, #21]
 800809c:	3301      	adds	r3, #1
 800809e:	757b      	strb	r3, [r7, #21]
	    y1++;
 80080a0:	7d3b      	ldrb	r3, [r7, #20]
 80080a2:	3301      	adds	r3, #1
 80080a4:	753b      	strb	r3, [r7, #20]
	    break;	  
 80080a6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80080a8:	7db8      	ldrb	r0, [r7, #22]
 80080aa:	7d7a      	ldrb	r2, [r7, #21]
 80080ac:	7df9      	ldrb	r1, [r7, #23]
 80080ae:	7d3b      	ldrb	r3, [r7, #20]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4603      	mov	r3, r0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fbb2 	bl	800881e <u8g2_IsIntersection>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d102      	bne.n	80080c6 <u8g2_font_decode_glyph+0x18e>
	return d;
 80080c0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80080c4:	e03a      	b.n	800813c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2200      	movs	r2, #0
 80080ca:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2200      	movs	r2, #0
 80080d0:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80080d8:	4619      	mov	r1, r3
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f7ff fd9b 	bl	8007c16 <u8g2_font_decode_get_unsigned_bits>
 80080e0:	4603      	mov	r3, r0
 80080e2:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 80080ea:	4619      	mov	r1, r3
 80080ec:	6938      	ldr	r0, [r7, #16]
 80080ee:	f7ff fd92 	bl	8007c16 <u8g2_font_decode_get_unsigned_bits>
 80080f2:	4603      	mov	r3, r0
 80080f4:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80080f6:	7afb      	ldrb	r3, [r7, #11]
 80080f8:	2200      	movs	r2, #0
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fe5e 	bl	8007dbe <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8008102:	7abb      	ldrb	r3, [r7, #10]
 8008104:	2201      	movs	r2, #1
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff fe58 	bl	8007dbe <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800810e:	2101      	movs	r1, #1
 8008110:	6938      	ldr	r0, [r7, #16]
 8008112:	f7ff fd80 	bl	8007c16 <u8g2_font_decode_get_unsigned_bits>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ec      	bne.n	80080f6 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8008122:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8008126:	429a      	cmp	r2, r3
 8008128:	dd00      	ble.n	800812c <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800812a:	e7d2      	b.n	80080d2 <u8g2_font_decode_glyph+0x19a>
	break;
 800812c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	7b1a      	ldrb	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  return d;
 8008138:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008154:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3317      	adds	r3, #23
 800815a:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 800815c:	887b      	ldrh	r3, [r7, #2]
 800815e:	2bff      	cmp	r3, #255	@ 0xff
 8008160:	d82a      	bhi.n	80081b8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8008162:	887b      	ldrh	r3, [r7, #2]
 8008164:	2b60      	cmp	r3, #96	@ 0x60
 8008166:	d907      	bls.n	8008178 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800816e:	461a      	mov	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e009      	b.n	800818c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8008178:	887b      	ldrh	r3, [r7, #2]
 800817a:	2b40      	cmp	r3, #64	@ 0x40
 800817c:	d906      	bls.n	800818c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008184:	461a      	mov	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d036      	beq.n	8008204 <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	887b      	ldrh	r3, [r7, #2]
 800819e:	4293      	cmp	r3, r2
 80081a0:	d102      	bne.n	80081a8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3302      	adds	r3, #2
 80081a6:	e031      	b.n	800820c <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80081b6:	e7e9      	b.n	800818c <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80081be:	461a      	mov	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 80081cc:	897b      	ldrh	r3, [r7, #10]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	461a      	mov	r2, r3
 80081da:	897b      	ldrh	r3, [r7, #10]
 80081dc:	4313      	orrs	r3, r2
 80081de:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 80081e0:	897b      	ldrh	r3, [r7, #10]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d010      	beq.n	8008208 <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 80081e6:	897a      	ldrh	r2, [r7, #10]
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d102      	bne.n	80081f4 <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3303      	adds	r3, #3
 80081f2:	e00b      	b.n	800820c <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3302      	adds	r3, #2
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 8008202:	e7e0      	b.n	80081c6 <u8g2_font_get_glyph_data+0x82>
	break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <u8g2_font_get_glyph_data+0xc6>
	break;
 8008208:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	461a      	mov	r2, r3
 8008226:	4603      	mov	r3, r0
 8008228:	70fb      	strb	r3, [r7, #3]
 800822a:	460b      	mov	r3, r1
 800822c:	70bb      	strb	r3, [r7, #2]
 800822e:	4613      	mov	r3, r2
 8008230:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  u8g2->font_decode.target_y = y;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	78ba      	ldrb	r2, [r7, #2]
 8008242:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8008246:	883b      	ldrh	r3, [r7, #0]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff ff7a 	bl	8008144 <u8g2_font_get_glyph_data>
 8008250:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff fe6c 	bl	8007f38 <u8g2_font_decode_glyph>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	78fa      	ldrb	r2, [r7, #3]
 800827e:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
	...

08008290 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	461a      	mov	r2, r3
 800829e:	4603      	mov	r3, r0
 80082a0:	70fb      	strb	r3, [r7, #3]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70bb      	strb	r3, [r7, #2]
 80082a6:	4613      	mov	r3, r2
 80082a8:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d833      	bhi.n	800831c <u8g2_DrawGlyph+0x8c>
 80082b4:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <u8g2_DrawGlyph+0x2c>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	080082e1 	.word	0x080082e1
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	08008309 	.word	0x08008309
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	461a      	mov	r2, r3
 80082d8:	78bb      	ldrb	r3, [r7, #2]
 80082da:	4413      	add	r3, r2
 80082dc:	70bb      	strb	r3, [r7, #2]
      break;
 80082de:	e01d      	b.n	800831c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
 80082e8:	4603      	mov	r3, r0
 80082ea:	461a      	mov	r2, r3
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	70fb      	strb	r3, [r7, #3]
      break;
 80082f2:	e013      	b.n	800831c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	78bb      	ldrb	r3, [r7, #2]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	70bb      	strb	r3, [r7, #2]
      break;
 8008306:	e009      	b.n	800831c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	4413      	add	r3, r2
 8008318:	70fb      	strb	r3, [r7, #3]
      break;
 800831a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800831c:	883b      	ldrh	r3, [r7, #0]
 800831e:	78ba      	ldrb	r2, [r7, #2]
 8008320:	78f9      	ldrb	r1, [r7, #3]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff ff78 	bl	8008218 <u8g2_font_draw_glyph>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop

08008334 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	607b      	str	r3, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	72fb      	strb	r3, [r7, #11]
 8008342:	4613      	mov	r3, r2
 8008344:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 fc21 	bl	8008b8e <u8x8_utf8_init>
  sum = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7812      	ldrb	r2, [r2, #0]
 8008358:	4611      	mov	r1, r2
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8008362:	8abb      	ldrh	r3, [r7, #20]
 8008364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008368:	4293      	cmp	r3, r2
 800836a:	d038      	beq.n	80083de <u8g2_draw_string+0xaa>
      break;
    str++;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8008372:	8abb      	ldrh	r3, [r7, #20]
 8008374:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008378:	4293      	cmp	r3, r2
 800837a:	d0e9      	beq.n	8008350 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800837c:	8abb      	ldrh	r3, [r7, #20]
 800837e:	7aba      	ldrb	r2, [r7, #10]
 8008380:	7af9      	ldrb	r1, [r7, #11]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff ff84 	bl	8008290 <u8g2_DrawGlyph>
 8008388:	4603      	mov	r3, r0
 800838a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8008392:	2b03      	cmp	r3, #3
 8008394:	d81e      	bhi.n	80083d4 <u8g2_draw_string+0xa0>
 8008396:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <u8g2_draw_string+0x68>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083b7 	.word	0x080083b7
 80083a4:	080083c1 	.word	0x080083c1
 80083a8:	080083cb 	.word	0x080083cb
      {
	case 0:
	  x += delta;
 80083ac:	7afa      	ldrb	r2, [r7, #11]
 80083ae:	7cfb      	ldrb	r3, [r7, #19]
 80083b0:	4413      	add	r3, r2
 80083b2:	72fb      	strb	r3, [r7, #11]
	  break;
 80083b4:	e00e      	b.n	80083d4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80083b6:	7aba      	ldrb	r2, [r7, #10]
 80083b8:	7cfb      	ldrb	r3, [r7, #19]
 80083ba:	4413      	add	r3, r2
 80083bc:	72bb      	strb	r3, [r7, #10]
	  break;
 80083be:	e009      	b.n	80083d4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80083c0:	7afa      	ldrb	r2, [r7, #11]
 80083c2:	7cfb      	ldrb	r3, [r7, #19]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	72fb      	strb	r3, [r7, #11]
	  break;
 80083c8:	e004      	b.n	80083d4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80083ca:	7aba      	ldrb	r2, [r7, #10]
 80083cc:	7cfb      	ldrb	r3, [r7, #19]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	72bb      	strb	r3, [r7, #10]
	  break;
 80083d2:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 80083d4:	7dfa      	ldrb	r2, [r7, #23]
 80083d6:	7cfb      	ldrb	r3, [r7, #19]
 80083d8:	4413      	add	r3, r2
 80083da:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80083dc:	e7b8      	b.n	8008350 <u8g2_draw_string+0x1c>
      break;
 80083de:	bf00      	nop
    }
  }
  return sum;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop

080083ec <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	607b      	str	r3, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	72fb      	strb	r3, [r7, #11]
 80083fa:	4613      	mov	r3, r2
 80083fc:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4a06      	ldr	r2, [pc, #24]	@ (800841c <u8g2_DrawStr+0x30>)
 8008402:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8008404:	7aba      	ldrb	r2, [r7, #10]
 8008406:	7af9      	ldrb	r1, [r7, #11]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff ff92 	bl	8008334 <u8g2_draw_string>
 8008410:	4603      	mov	r3, r0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	08008bab 	.word	0x08008bab

08008420 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05d      	beq.n	80084ec <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f993 206d 	ldrsb.w	r2, [r3, #109]	@ 0x6d
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f993 206e 	ldrsb.w	r2, [r3, #110]	@ 0x6e
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800844e:	2b00      	cmp	r3, #0
 8008450:	d04d      	beq.n	80084ee <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008458:	2b01      	cmp	r3, #1
 800845a:	d11c      	bne.n	8008496 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f993 2079 	ldrsb.w	r2, [r3, #121]	@ 0x79
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f993 306f 	ldrsb.w	r3, [r3, #111]	@ 0x6f
 8008468:	429a      	cmp	r2, r3
 800846a:	da05      	bge.n	8008478 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f993 206f 	ldrsb.w	r2, [r3, #111]	@ 0x6f
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 8008484:	429a      	cmp	r2, r3
 8008486:	dd32      	ble.n	80084ee <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f993 2070 	ldrsb.w	r2, [r3, #112]	@ 0x70
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8008494:	e02b      	b.n	80084ee <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f993 3079 	ldrsb.w	r3, [r3, #121]	@ 0x79
 800849c:	461a      	mov	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 80084a4:	4619      	mov	r1, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 80084ac:	440b      	add	r3, r1
 80084ae:	429a      	cmp	r2, r3
 80084b0:	da0d      	bge.n	80084ce <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	4413      	add	r3, r2
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	b25a      	sxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 80084da:	429a      	cmp	r2, r3
 80084dc:	dd07      	ble.n	80084ee <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f993 206c 	ldrsb.w	r2, [r3, #108]	@ 0x6c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 80084ea:	e000      	b.n	80084ee <u8g2_UpdateRefHeight+0xce>
    return;
 80084ec:	bf00      	nop
  }  
}
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  return 0;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a04      	ldr	r2, [pc, #16]	@ (800852c <u8g2_SetFontPosBaseline+0x1c>)
 800851c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	080084f9 	.word	0x080084f9

08008530 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d00b      	beq.n	800855c <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	649a      	str	r2, [r3, #72]	@ 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3360      	adds	r3, #96	@ 0x60
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fab7 	bl	8007ac4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff62 	bl	8008420 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800857e:	7dfa      	ldrb	r2, [r7, #23]
 8008580:	7dbb      	ldrb	r3, [r7, #22]
 8008582:	429a      	cmp	r2, r3
 8008584:	d911      	bls.n	80085aa <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8008586:	7dfa      	ldrb	r2, [r7, #23]
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	429a      	cmp	r2, r3
 800858c:	d208      	bcs.n	80085a0 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	75bb      	strb	r3, [r7, #22]
      b--;
 8008592:	7dbb      	ldrb	r3, [r7, #22]
 8008594:	3b01      	subs	r3, #1
 8008596:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	7dba      	ldrb	r2, [r7, #22]
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e004      	b.n	80085aa <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	7dfa      	ldrb	r2, [r7, #23]
 80085a8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80085aa:	7dfa      	ldrb	r2, [r7, #23]
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d301      	bcc.n	80085b6 <u8g2_clip_intersection+0x52>
    return 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e00c      	b.n	80085d0 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 80085b6:	7dbb      	ldrb	r3, [r7, #22]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <u8g2_clip_intersection+0x5c>
    return 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	e007      	b.n	80085d0 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 80085c0:	7dba      	ldrb	r2, [r7, #22]
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d902      	bls.n	80085ce <u8g2_clip_intersection+0x6a>
    *bp = d;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	79fa      	ldrb	r2, [r7, #7]
 80085cc:	701a      	strb	r2, [r3, #0]
    
  return 1;
 80085ce:	2301      	movs	r3, #1
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80085dc:	b5b0      	push	{r4, r5, r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	70fb      	strb	r3, [r7, #3]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70bb      	strb	r3, [r7, #2]
 80085f2:	4613      	mov	r3, r2
 80085f4:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 403b 	ldrb.w	r4, [r3, #59]	@ 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 503a 	ldrb.w	r5, [r3, #58]	@ 0x3a


  if ( dir == 0 )
 8008602:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d11a      	bne.n	8008640 <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 800860a:	78bb      	ldrb	r3, [r7, #2]
 800860c:	429c      	cmp	r4, r3
 800860e:	d93d      	bls.n	800868c <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	73fb      	strb	r3, [r7, #15]
    a += len;
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	787b      	ldrb	r3, [r7, #1]
 8008618:	4413      	add	r3, r2
 800861a:	b2db      	uxtb	r3, r3
 800861c:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 800861e:	f107 010f 	add.w	r1, r7, #15
 8008622:	1cfb      	adds	r3, r7, #3
 8008624:	462a      	mov	r2, r5
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff ff9c 	bl	8008564 <u8g2_clip_intersection>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d02e      	beq.n	8008690 <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	707b      	strb	r3, [r7, #1]
    len -= x;
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	787a      	ldrb	r2, [r7, #1]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	707b      	strb	r3, [r7, #1]
 800863e:	e019      	b.n	8008674 <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	429d      	cmp	r5, r3
 8008644:	d926      	bls.n	8008694 <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 8008646:	78bb      	ldrb	r3, [r7, #2]
 8008648:	73fb      	strb	r3, [r7, #15]
    a += len;
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	787b      	ldrb	r3, [r7, #1]
 800864e:	4413      	add	r3, r2
 8008650:	b2db      	uxtb	r3, r3
 8008652:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 8008654:	f107 010f 	add.w	r1, r7, #15
 8008658:	1cbb      	adds	r3, r7, #2
 800865a:	4622      	mov	r2, r4
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff ff81 	bl	8008564 <u8g2_clip_intersection>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d017      	beq.n	8008698 <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	707b      	strb	r3, [r7, #1]
    len -= y;
 800866c:	78bb      	ldrb	r3, [r7, #2]
 800866e:	787a      	ldrb	r2, [r7, #1]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8008678:	78f9      	ldrb	r1, [r7, #3]
 800867a:	78ba      	ldrb	r2, [r7, #2]
 800867c:	7878      	ldrb	r0, [r7, #1]
 800867e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4603      	mov	r3, r0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	47a0      	blx	r4
 800868a:	e006      	b.n	800869a <u8g2_draw_hv_line_2dir+0xbe>
      return;
 800868c:	bf00      	nop
 800868e:	e004      	b.n	800869a <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8008690:	bf00      	nop
 8008692:	e002      	b.n	800869a <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8008698:	bf00      	nop
}
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bdb0      	pop	{r4, r5, r7, pc}

080086a0 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80086a0:	b590      	push	{r4, r7, lr}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	4608      	mov	r0, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	70fb      	strb	r3, [r7, #3]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70bb      	strb	r3, [r7, #2]
 80086b6:	4613      	mov	r3, r2
 80086b8:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	78ba      	ldrb	r2, [r7, #2]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 80086ca:	787b      	ldrb	r3, [r7, #1]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d116      	bne.n	80086fe <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80086d6:	78fa      	ldrb	r2, [r7, #3]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d233      	bcs.n	8008744 <u8g2_draw_hv_line_4dir+0xa4>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80086e2:	78ba      	ldrb	r2, [r7, #2]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d22d      	bcs.n	8008744 <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80086ec:	7878      	ldrb	r0, [r7, #1]
 80086ee:	78ba      	ldrb	r2, [r7, #2]
 80086f0:	78f9      	ldrb	r1, [r7, #3]
 80086f2:	7e3b      	ldrb	r3, [r7, #24]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4603      	mov	r3, r0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	47a0      	blx	r4
    return;
 80086fc:	e022      	b.n	8008744 <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 80086fe:	7e3b      	ldrb	r3, [r7, #24]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d107      	bne.n	8008714 <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	787b      	ldrb	r3, [r7, #1]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	70fb      	strb	r3, [r7, #3]
    x++;
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	3301      	adds	r3, #1
 8008710:	70fb      	strb	r3, [r7, #3]
 8008712:	e009      	b.n	8008728 <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 8008714:	7e3b      	ldrb	r3, [r7, #24]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d106      	bne.n	8008728 <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 800871a:	78ba      	ldrb	r2, [r7, #2]
 800871c:	787b      	ldrb	r3, [r7, #1]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	70bb      	strb	r3, [r7, #2]
    y++;
 8008722:	78bb      	ldrb	r3, [r7, #2]
 8008724:	3301      	adds	r3, #1
 8008726:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 8008728:	7e3b      	ldrb	r3, [r7, #24]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8008730:	7878      	ldrb	r0, [r7, #1]
 8008732:	78ba      	ldrb	r2, [r7, #2]
 8008734:	78f9      	ldrb	r1, [r7, #3]
 8008736:	7e3b      	ldrb	r3, [r7, #24]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	4603      	mov	r3, r0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff4d 	bl	80085dc <u8g2_draw_hv_line_2dir>
 8008742:	e000      	b.n	8008746 <u8g2_draw_hv_line_4dir+0xa6>
    return;
 8008744:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	bd90      	pop	{r4, r7, pc}

0800874c <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800874c:	b590      	push	{r4, r7, lr}
 800874e:	b085      	sub	sp, #20
 8008750:	af02      	add	r7, sp, #8
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4603      	mov	r3, r0
 800875c:	70fb      	strb	r3, [r7, #3]
 800875e:	460b      	mov	r3, r1
 8008760:	70bb      	strb	r3, [r7, #2]
 8008762:	4613      	mov	r3, r2
 8008764:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8008766:	787b      	ldrb	r3, [r7, #1]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008770:	685c      	ldr	r4, [r3, #4]
 8008772:	7878      	ldrb	r0, [r7, #1]
 8008774:	78ba      	ldrb	r2, [r7, #2]
 8008776:	78f9      	ldrb	r1, [r7, #3]
 8008778:	7e3b      	ldrb	r3, [r7, #24]
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	4603      	mov	r3, r0
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	47a0      	blx	r4
}
 8008782:	bf00      	nop
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	bd90      	pop	{r4, r7, pc}

0800878a <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  if ( color >= 3 )
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d903      	bls.n	80087ac <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80087b8:	b490      	push	{r4, r7}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	4611      	mov	r1, r2
 80087c4:	461a      	mov	r2, r3
 80087c6:	4623      	mov	r3, r4
 80087c8:	71fb      	strb	r3, [r7, #7]
 80087ca:	4603      	mov	r3, r0
 80087cc:	71bb      	strb	r3, [r7, #6]
 80087ce:	460b      	mov	r3, r1
 80087d0:	717b      	strb	r3, [r7, #5]
 80087d2:	4613      	mov	r3, r2
 80087d4:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80087d6:	797a      	ldrb	r2, [r7, #5]
 80087d8:	79bb      	ldrb	r3, [r7, #6]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d20d      	bcs.n	80087fa <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80087de:	793a      	ldrb	r2, [r7, #4]
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d901      	bls.n	80087ea <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e014      	b.n	8008814 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80087ea:	797a      	ldrb	r2, [r7, #5]
 80087ec:	793b      	ldrb	r3, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d901      	bls.n	80087f6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e00e      	b.n	8008814 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e00c      	b.n	8008814 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80087fa:	793a      	ldrb	r2, [r7, #4]
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d907      	bls.n	8008812 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8008802:	797a      	ldrb	r2, [r7, #5]
 8008804:	793b      	ldrb	r3, [r7, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d901      	bls.n	800880e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800880a:	2301      	movs	r3, #1
 800880c:	e002      	b.n	8008814 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800880e:	2300      	movs	r3, #0
 8008810:	e000      	b.n	8008814 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8008812:	2300      	movs	r3, #0
    }
  }
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bc90      	pop	{r4, r7}
 800881c:	4770      	bx	lr

0800881e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	4608      	mov	r0, r1
 8008828:	4611      	mov	r1, r2
 800882a:	461a      	mov	r2, r3
 800882c:	4603      	mov	r3, r0
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	460b      	mov	r3, r1
 8008832:	70bb      	strb	r3, [r7, #2]
 8008834:	4613      	mov	r3, r2
 8008836:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 0043 	ldrb.w	r0, [r3, #67]	@ 0x43
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 8008844:	7c3b      	ldrb	r3, [r7, #16]
 8008846:	78ba      	ldrb	r2, [r7, #2]
 8008848:	f7ff ffb6 	bl	80087b8 <u8g2_is_intersection_decision_tree>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <u8g2_IsIntersection+0x38>
    return 0; 
 8008852:	2300      	movs	r3, #0
 8008854:	e00a      	b.n	800886c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 0041 	ldrb.w	r0, [r3, #65]	@ 0x41
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 1042 	ldrb.w	r1, [r3, #66]	@ 0x42
 8008862:	787b      	ldrb	r3, [r7, #1]
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	f7ff ffa7 	bl	80087b8 <u8g2_is_intersection_decision_tree>
 800886a:	4603      	mov	r3, r0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	461a      	mov	r2, r3
 8008882:	4603      	mov	r3, r0
 8008884:	70fb      	strb	r3, [r7, #3]
 8008886:	460b      	mov	r3, r1
 8008888:	70bb      	strb	r3, [r7, #2]
 800888a:	4613      	mov	r3, r2
 800888c:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800888e:	78bb      	ldrb	r3, [r7, #2]
 8008890:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8008892:	7cfb      	ldrb	r3, [r7, #19]
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800889a:	2301      	movs	r3, #1
 800889c:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800889e:	7c3a      	ldrb	r2, [r7, #16]
 80088a0:	7cfb      	ldrb	r3, [r7, #19]
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d801      	bhi.n	80088be <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80088ba:	7c3b      	ldrb	r3, [r7, #16]
 80088bc:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d001      	beq.n	80088cc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80088c8:	7c3b      	ldrb	r3, [r7, #16]
 80088ca:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80088cc:	78bb      	ldrb	r3, [r7, #2]
 80088ce:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80088d0:	89fb      	ldrh	r3, [r7, #14]
 80088d2:	f023 0307 	bic.w	r3, r3, #7
 80088d6:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	7c1b      	ldrb	r3, [r3, #16]
 80088de:	461a      	mov	r2, r3
 80088e0:	89fb      	ldrh	r3, [r7, #14]
 80088e2:	fb13 f302 	smulbb	r3, r3, r2
 80088e6:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ec:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80088ee:	89fb      	ldrh	r3, [r7, #14]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	4413      	add	r3, r2
 80088f4:	617b      	str	r3, [r7, #20]
  ptr += x;
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80088fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d117      	bne.n	8008936 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
  {
      do
      {
	*ptr |= or_mask;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	7cbb      	ldrb	r3, [r7, #18]
 800890c:	4313      	orrs	r3, r2
 800890e:	b2da      	uxtb	r2, r3
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	781a      	ldrb	r2, [r3, #0]
 8008918:	7c7b      	ldrb	r3, [r7, #17]
 800891a:	4053      	eors	r3, r2
 800891c:	b2da      	uxtb	r2, r3
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	701a      	strb	r2, [r3, #0]
	ptr++;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	3301      	adds	r3, #1
 8008926:	617b      	str	r3, [r7, #20]
	len--;
 8008928:	787b      	ldrb	r3, [r7, #1]
 800892a:	3b01      	subs	r3, #1
 800892c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800892e:	787b      	ldrb	r3, [r7, #1]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e8      	bne.n	8008906 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8008934:	e039      	b.n	80089aa <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	7cbb      	ldrb	r3, [r7, #18]
 800893c:	4313      	orrs	r3, r2
 800893e:	b2da      	uxtb	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	7c7b      	ldrb	r3, [r7, #17]
 800894a:	4053      	eors	r3, r2
 800894c:	b2da      	uxtb	r2, r3
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8008952:	7cfb      	ldrb	r3, [r7, #19]
 8008954:	3301      	adds	r3, #1
 8008956:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	74fb      	strb	r3, [r7, #19]
      len--;
 8008960:	787b      	ldrb	r3, [r7, #1]
 8008962:	3b01      	subs	r3, #1
 8008964:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8008966:	7cfb      	ldrb	r3, [r7, #19]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d115      	bne.n	8008998 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008972:	461a      	mov	r2, r3
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	4413      	add	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008980:	2b01      	cmp	r3, #1
 8008982:	d801      	bhi.n	8008988 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8008984:	2301      	movs	r3, #1
 8008986:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800898e:	2b01      	cmp	r3, #1
 8008990:	d008      	beq.n	80089a4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8008992:	2301      	movs	r3, #1
 8008994:	747b      	strb	r3, [r7, #17]
 8008996:	e005      	b.n	80089a4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8008998:	7cbb      	ldrb	r3, [r7, #18]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800899e:	7c7b      	ldrb	r3, [r7, #17]
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80089a4:	787b      	ldrb	r3, [r7, #1]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1c5      	bne.n	8008936 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80089aa:	bf00      	nop
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	649a      	str	r2, [r3, #72]	@ 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	79fa      	ldrb	r2, [r7, #7]
 80089dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  u8g2->bitmap_transparency = 0;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  u8g2->draw_color = 1;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  u8g2->is_auto_page_clear = 1;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  
  u8g2->cb = u8g2_cb;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update(u8g2);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff fd79 	bl	8008510 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
#endif
}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a3c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7bfa      	ldrb	r2, [r7, #15]
 8008a48:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	7c1b      	ldrb	r3, [r3, #16]
 8008a52:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	2b1f      	cmp	r3, #31
 8008a58:	d901      	bls.n	8008a5e <u8g2_update_dimension_common+0x30>
    t = 31;
 8008a5a:	231f      	movs	r3, #31
 8008a5c:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7bfa      	ldrb	r2, [r7, #15]
 8008a68:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008a72:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7bfa      	ldrb	r2, [r7, #15]
 8008a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  t = u8g2->tile_buf_height;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a88:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8008a92:	4413      	add	r3, r2
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	7c52      	ldrb	r2, [r2, #17]
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	dd07      	ble.n	8008aae <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	7c5a      	ldrb	r2, [r3, #17]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  u8g2->buf_y1 += t;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	22f0      	movs	r2, #240	@ 0xf0
 8008ae2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	8a9b      	ldrh	r3, [r3, #20]
 8008aec:	2bf0      	cmp	r3, #240	@ 0xf0
 8008aee:	d806      	bhi.n	8008afe <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	8a9b      	ldrh	r3, [r3, #20]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	8adb      	ldrh	r3, [r3, #22]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
#endif

}
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff ff84 	bl	8008a2e <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af02      	add	r7, sp, #8
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	461a      	mov	r2, r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	70fb      	strb	r3, [r7, #3]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70bb      	strb	r3, [r7, #2]
 8008b70:	4613      	mov	r3, r2
 8008b72:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 8008b74:	7878      	ldrb	r0, [r7, #1]
 8008b76:	78ba      	ldrb	r2, [r7, #2]
 8008b78:	78f9      	ldrb	r1, [r7, #3]
 8008b7a:	7c3b      	ldrb	r3, [r7, #16]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fd8d 	bl	80086a0 <u8g2_draw_hv_line_4dir>
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <u8x8_ascii_next+0x18>
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	2b0a      	cmp	r3, #10
 8008bc0:	d102      	bne.n	8008bc8 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8008bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bc6:	e001      	b.n	8008bcc <u8x8_ascii_next+0x22>
  return b;
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	b29b      	uxth	r3, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8008bd8:	b590      	push	{r4, r7, lr}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691c      	ldr	r4, [r3, #16]
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	2300      	movs	r3, #0
 8008bec:	2120      	movs	r1, #32
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	47a0      	blx	r4
 8008bf2:	4603      	mov	r3, r0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}

08008bfc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	460b      	mov	r3, r1
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	691c      	ldr	r4, [r3, #16]
 8008c0e:	7afa      	ldrb	r2, [r7, #11]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2117      	movs	r1, #23
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	47a0      	blx	r4
 8008c18:	4603      	mov	r3, r0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}

08008c22 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8008c2e:	1cfb      	adds	r3, r7, #3
 8008c30:	461a      	mov	r2, r3
 8008c32:	2101      	movs	r1, #1
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ffe1 	bl	8008bfc <u8x8_byte_SendBytes>
 8008c3a:	4603      	mov	r3, r0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68dc      	ldr	r4, [r3, #12]
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	2300      	movs	r3, #0
 8008c58:	2115      	movs	r1, #21
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	47a0      	blx	r4
 8008c5e:	4603      	mov	r3, r0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd90      	pop	{r4, r7, pc}

08008c68 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68dc      	ldr	r4, [r3, #12]
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2116      	movs	r1, #22
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	47a0      	blx	r4
 8008c82:	4603      	mov	r3, r0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd90      	pop	{r4, r7, pc}

08008c8c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	460b      	mov	r3, r1
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68dc      	ldr	r4, [r3, #12]
 8008c9e:	7afa      	ldrb	r2, [r7, #11]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2117      	movs	r1, #23
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	47a0      	blx	r4
 8008ca8:	4603      	mov	r3, r0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd90      	pop	{r4, r7, pc}

08008cb2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8008cb2:	b590      	push	{r4, r7, lr}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68dc      	ldr	r4, [r3, #12]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2118      	movs	r1, #24
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	47a0      	blx	r4
 8008cc8:	4603      	mov	r3, r0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd90      	pop	{r4, r7, pc}

08008cd2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8008cd2:	b590      	push	{r4, r7, lr}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68dc      	ldr	r4, [r3, #12]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2119      	movs	r1, #25
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	47a0      	blx	r4
 8008ce8:	4603      	mov	r3, r0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd90      	pop	{r4, r7, pc}

08008cf2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8008cf2:	b590      	push	{r4, r7, lr}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	73fb      	strb	r3, [r7, #15]
    data++;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d0c:	d031      	beq.n	8008d72 <u8x8_cad_SendSequence+0x80>
 8008d0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d10:	dc3d      	bgt.n	8008d8e <u8x8_cad_SendSequence+0x9c>
 8008d12:	2b19      	cmp	r3, #25
 8008d14:	dc3b      	bgt.n	8008d8e <u8x8_cad_SendSequence+0x9c>
 8008d16:	2b18      	cmp	r3, #24
 8008d18:	da23      	bge.n	8008d62 <u8x8_cad_SendSequence+0x70>
 8008d1a:	2b16      	cmp	r3, #22
 8008d1c:	dc02      	bgt.n	8008d24 <u8x8_cad_SendSequence+0x32>
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	da03      	bge.n	8008d2a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8008d22:	e034      	b.n	8008d8e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8008d24:	2b17      	cmp	r3, #23
 8008d26:	d00e      	beq.n	8008d46 <u8x8_cad_SendSequence+0x54>
	return;
 8008d28:	e031      	b.n	8008d8e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68dc      	ldr	r4, [r3, #12]
 8008d34:	7bba      	ldrb	r2, [r7, #14]
 8008d36:	7bf9      	ldrb	r1, [r7, #15]
 8008d38:	2300      	movs	r3, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	47a0      	blx	r4
	  data++;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	603b      	str	r3, [r7, #0]
	  break;
 8008d44:	e022      	b.n	8008d8c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8008d4c:	f107 030e 	add.w	r3, r7, #14
 8008d50:	461a      	mov	r2, r3
 8008d52:	2101      	movs	r1, #1
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ff99 	bl	8008c8c <u8x8_cad_SendData>
	  data++;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	603b      	str	r3, [r7, #0]
	  break;
 8008d60:	e014      	b.n	8008d8c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68dc      	ldr	r4, [r3, #12]
 8008d66:	7bf9      	ldrb	r1, [r7, #15]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	47a0      	blx	r4
	  break;
 8008d70:	e00c      	b.n	8008d8c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2129      	movs	r1, #41	@ 0x29
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9cc 	bl	800911c <u8x8_gpio_call>
	  data++;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	603b      	str	r3, [r7, #0]
	  break;
 8008d8a:	bf00      	nop
    cmd = *data;
 8008d8c:	e7b6      	b.n	8008cfc <u8x8_cad_SendSequence+0xa>
	return;
 8008d8e:	bf00      	nop
    }
  }
}
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd90      	pop	{r4, r7, pc}
	...

08008d98 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	607b      	str	r3, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	72fb      	strb	r3, [r7, #11]
 8008da6:	4613      	mov	r3, r2
 8008da8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8008daa:	7afb      	ldrb	r3, [r7, #11]
 8008dac:	3b14      	subs	r3, #20
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	d82f      	bhi.n	8008e12 <u8x8_cad_001+0x7a>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <u8x8_cad_001+0x20>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008e01 	.word	0x08008e01
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008df9 	.word	0x08008df9
 8008dc8:	08008e01 	.word	0x08008e01
 8008dcc:	08008e01 	.word	0x08008e01
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff ff00 	bl	8008bd8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8008dd8:	7abb      	ldrb	r3, [r7, #10]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7ff ff20 	bl	8008c22 <u8x8_byte_SendByte>
      break;
 8008de2:	e018      	b.n	8008e16 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fef6 	bl	8008bd8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8008dec:	7abb      	ldrb	r3, [r7, #10]
 8008dee:	4619      	mov	r1, r3
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff ff16 	bl	8008c22 <u8x8_byte_SendByte>
      break;
 8008df6:	e00e      	b.n	8008e16 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8008df8:	2101      	movs	r1, #1
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff feec 	bl	8008bd8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	691c      	ldr	r4, [r3, #16]
 8008e04:	7aba      	ldrb	r2, [r7, #10]
 8008e06:	7af9      	ldrb	r1, [r7, #11]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	47a0      	blx	r4
 8008e0e:	4603      	mov	r3, r0
 8008e10:	e002      	b.n	8008e18 <u8x8_cad_001+0x80>
    default:
      return 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e000      	b.n	8008e18 <u8x8_cad_001+0x80>
  }
  return 1;
 8008e16:	2301      	movs	r3, #1
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd90      	pop	{r4, r7, pc}

08008e20 <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	72fb      	strb	r3, [r7, #11]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	2b0f      	cmp	r3, #15
 8008e36:	d006      	beq.n	8008e46 <u8x8_d_ssd1309_generic+0x26>
 8008e38:	2b0f      	cmp	r3, #15
 8008e3a:	dc62      	bgt.n	8008f02 <u8x8_d_ssd1309_generic+0xe2>
 8008e3c:	2b0b      	cmp	r3, #11
 8008e3e:	d043      	beq.n	8008ec8 <u8x8_d_ssd1309_generic+0xa8>
 8008e40:	2b0e      	cmp	r3, #14
 8008e42:	d04e      	beq.n	8008ee2 <u8x8_d_ssd1309_generic+0xc2>
 8008e44:	e05d      	b.n	8008f02 <u8x8_d_ssd1309_generic+0xe2>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7ff ff33 	bl	8008cb2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	795b      	ldrb	r3, [r3, #5]
 8008e50:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	7f9a      	ldrb	r2, [r3, #30]
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	4413      	add	r3, r2
 8008e60:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	091b      	lsrs	r3, r3, #4
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f043 0310 	orr.w	r3, r3, #16
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	4619      	mov	r1, r3
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f7ff fee7 	bl	8008c44 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff fef1 	bl	8008c68 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	799b      	ldrb	r3, [r3, #6]
 8008e8a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fee8 	bl	8008c68 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	791b      	ldrb	r3, [r3, #4]
 8008e9c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8008ea4:	7dbb      	ldrb	r3, [r7, #22]
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4619      	mov	r1, r3
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f7ff feec 	bl	8008c8c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8008eb4:	7abb      	ldrb	r3, [r7, #10]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8008eba:	7abb      	ldrb	r3, [r7, #10]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1eb      	bne.n	8008e98 <u8x8_d_ssd1309_generic+0x78>
      
      u8x8_cad_EndTransfer(u8x8);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff ff06 	bl	8008cd2 <u8x8_cad_EndTransfer>
      break;
 8008ec6:	e01e      	b.n	8008f06 <u8x8_d_ssd1309_generic+0xe6>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8008ec8:	7abb      	ldrb	r3, [r7, #10]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d104      	bne.n	8008ed8 <u8x8_d_ssd1309_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 8008ece:	4910      	ldr	r1, [pc, #64]	@ (8008f10 <u8x8_d_ssd1309_generic+0xf0>)
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff ff0e 	bl	8008cf2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 8008ed6:	e016      	b.n	8008f06 <u8x8_d_ssd1309_generic+0xe6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8008ed8:	490e      	ldr	r1, [pc, #56]	@ (8008f14 <u8x8_d_ssd1309_generic+0xf4>)
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f7ff ff09 	bl	8008cf2 <u8x8_cad_SendSequence>
      break;
 8008ee0:	e011      	b.n	8008f06 <u8x8_d_ssd1309_generic+0xe6>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff fee5 	bl	8008cb2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8008ee8:	2181      	movs	r1, #129	@ 0x81
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff feaa 	bl	8008c44 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8008ef0:	7abb      	ldrb	r3, [r7, #10]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff feb7 	bl	8008c68 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff fee9 	bl	8008cd2 <u8x8_cad_EndTransfer>
      break;
 8008f00:	e001      	b.n	8008f06 <u8x8_d_ssd1309_generic+0xe6>
#endif
    default:
      return 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e000      	b.n	8008f08 <u8x8_d_ssd1309_generic+0xe8>
  }
  return 1;
 8008f06:	2301      	movs	r3, #1
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	08016808 	.word	0x08016808
 8008f14:	08016810 	.word	0x08016810

08008f18 <u8x8_d_ssd1309_128x64_noname0>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	607b      	str	r3, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	72fb      	strb	r3, [r7, #11]
 8008f26:	4613      	mov	r3, r2
 8008f28:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8008f2a:	7aba      	ldrb	r2, [r7, #10]
 8008f2c:	7af9      	ldrb	r1, [r7, #11]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff ff75 	bl	8008e20 <u8x8_d_ssd1309_generic>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <u8x8_d_ssd1309_128x64_noname0+0x28>
    return 1;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e030      	b.n	8008fa2 <u8x8_d_ssd1309_128x64_noname0+0x8a>
  
  switch(msg)
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	2b0d      	cmp	r3, #13
 8008f44:	d006      	beq.n	8008f54 <u8x8_d_ssd1309_128x64_noname0+0x3c>
 8008f46:	2b0d      	cmp	r3, #13
 8008f48:	dc28      	bgt.n	8008f9c <u8x8_d_ssd1309_128x64_noname0+0x84>
 8008f4a:	2b09      	cmp	r3, #9
 8008f4c:	d021      	beq.n	8008f92 <u8x8_d_ssd1309_128x64_noname0+0x7a>
 8008f4e:	2b0a      	cmp	r3, #10
 8008f50:	d017      	beq.n	8008f82 <u8x8_d_ssd1309_128x64_noname0+0x6a>
 8008f52:	e023      	b.n	8008f9c <u8x8_d_ssd1309_128x64_noname0+0x84>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8008f54:	7abb      	ldrb	r3, [r7, #10]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <u8x8_d_ssd1309_128x64_noname0+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8008f5a:	4914      	ldr	r1, [pc, #80]	@ (8008fac <u8x8_d_ssd1309_128x64_noname0+0x94>)
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f7ff fec8 	bl	8008cf2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	7c9a      	ldrb	r2, [r3, #18]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	779a      	strb	r2, [r3, #30]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8008f6c:	e018      	b.n	8008fa0 <u8x8_d_ssd1309_128x64_noname0+0x88>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8008f6e:	4910      	ldr	r1, [pc, #64]	@ (8008fb0 <u8x8_d_ssd1309_128x64_noname0+0x98>)
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff febe 	bl	8008cf2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	7cda      	ldrb	r2, [r3, #19]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	779a      	strb	r2, [r3, #30]
      break;
 8008f80:	e00e      	b.n	8008fa0 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f82d 	bl	8008fe2 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8008f88:	490a      	ldr	r1, [pc, #40]	@ (8008fb4 <u8x8_d_ssd1309_128x64_noname0+0x9c>)
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff feb1 	bl	8008cf2 <u8x8_cad_SendSequence>
      break;
 8008f90:	e006      	b.n	8008fa0 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname0_display_info);
 8008f92:	4909      	ldr	r1, [pc, #36]	@ (8008fb8 <u8x8_d_ssd1309_128x64_noname0+0xa0>)
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f811 	bl	8008fbc <u8x8_d_helper_display_setup_memory>
      break;
 8008f9a:	e001      	b.n	8008fa0 <u8x8_d_ssd1309_128x64_noname0+0x88>
    default:
      return 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e000      	b.n	8008fa2 <u8x8_d_ssd1309_128x64_noname0+0x8a>
  }
  return 1;
 8008fa0:	2301      	movs	r3, #1
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	08016818 	.word	0x08016818
 8008fb0:	08016820 	.word	0x08016820
 8008fb4:	08016828 	.word	0x08016828
 8008fb8:	08016854 	.word	0x08016854

08008fbc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	7c9a      	ldrb	r2, [r3, #18]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	779a      	strb	r2, [r3, #30]
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8008fe2:	b590      	push	{r4, r7, lr}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695c      	ldr	r4, [r3, #20]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2128      	movs	r1, #40	@ 0x28
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68dc      	ldr	r4, [r3, #12]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2200      	movs	r2, #0
 8009000:	2114      	movs	r1, #20
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8009006:	2201      	movs	r2, #1
 8009008:	214b      	movs	r1, #75	@ 0x4b
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f886 	bl	800911c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	461a      	mov	r2, r3
 8009018:	2129      	movs	r1, #41	@ 0x29
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f87e 	bl	800911c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8009020:	2200      	movs	r2, #0
 8009022:	214b      	movs	r1, #75	@ 0x4b
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f879 	bl	800911c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	791b      	ldrb	r3, [r3, #4]
 8009030:	461a      	mov	r2, r3
 8009032:	2129      	movs	r1, #41	@ 0x29
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f871 	bl	800911c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800903a:	2201      	movs	r2, #1
 800903c:	214b      	movs	r1, #75	@ 0x4b
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f86c 	bl	800911c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	795b      	ldrb	r3, [r3, #5]
 800904a:	461a      	mov	r2, r3
 800904c:	2129      	movs	r1, #41	@ 0x29
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f864 	bl	800911c <u8x8_gpio_call>
}    
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	bd90      	pop	{r4, r7, pc}

0800905c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800905c:	b590      	push	{r4, r7, lr}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	4608      	mov	r0, r1
 8009066:	4611      	mov	r1, r2
 8009068:	461a      	mov	r2, r3
 800906a:	4603      	mov	r3, r0
 800906c:	70fb      	strb	r3, [r7, #3]
 800906e:	460b      	mov	r3, r1
 8009070:	70bb      	strb	r3, [r7, #2]
 8009072:	4613      	mov	r3, r2
 8009074:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800907a:	78bb      	ldrb	r3, [r7, #2]
 800907c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800907e:	787b      	ldrb	r3, [r7, #1]
 8009080:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	689c      	ldr	r4, [r3, #8]
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	2201      	movs	r2, #1
 8009090:	210f      	movs	r1, #15
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	47a0      	blx	r4
 8009096:	4603      	mov	r3, r0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	bd90      	pop	{r4, r7, pc}

080090a0 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80090a0:	b590      	push	{r4, r7, lr}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689c      	ldr	r4, [r3, #8]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2200      	movs	r2, #0
 80090b0:	2109      	movs	r1, #9
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	47a0      	blx	r4
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd90      	pop	{r4, r7, pc}

080090be <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80090be:	b590      	push	{r4, r7, lr}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689c      	ldr	r4, [r3, #8]
 80090ca:	2300      	movs	r3, #0
 80090cc:	2200      	movs	r2, #0
 80090ce:	210a      	movs	r1, #10
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	47a0      	blx	r4
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd90      	pop	{r4, r7, pc}

080090dc <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80090dc:	b590      	push	{r4, r7, lr}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689c      	ldr	r4, [r3, #8]
 80090ec:	78fa      	ldrb	r2, [r7, #3]
 80090ee:	2300      	movs	r3, #0
 80090f0:	210b      	movs	r1, #11
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	47a0      	blx	r4
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd90      	pop	{r4, r7, pc}

080090fe <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80090fe:	b590      	push	{r4, r7, lr}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689c      	ldr	r4, [r3, #8]
 800910a:	2300      	movs	r3, #0
 800910c:	2200      	movs	r2, #0
 800910e:	2110      	movs	r1, #16
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	47a0      	blx	r4
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	bd90      	pop	{r4, r7, pc}

0800911c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
 8009128:	4613      	mov	r3, r2
 800912a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	695c      	ldr	r4, [r3, #20]
 8009130:	78ba      	ldrb	r2, [r7, #2]
 8009132:	78f9      	ldrb	r1, [r7, #3]
 8009134:	2300      	movs	r3, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	47a0      	blx	r4
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	bd90      	pop	{r4, r7, pc}

08009142 <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	607b      	str	r3, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	72fb      	strb	r3, [r7, #11]
 8009150:	4613      	mov	r3, r2
 8009152:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
	...

08009164 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a11      	ldr	r2, [pc, #68]	@ (80091bc <u8x8_SetupDefaults+0x58>)
 8009176:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a10      	ldr	r2, [pc, #64]	@ (80091bc <u8x8_SetupDefaults+0x58>)
 800917c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a0e      	ldr	r2, [pc, #56]	@ (80091bc <u8x8_SetupDefaults+0x58>)
 8009182:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a0d      	ldr	r2, [pc, #52]	@ (80091bc <u8x8_SetupDefaults+0x58>)
 8009188:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->i2c_address = 255;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	22ff      	movs	r2, #255	@ 0xff
 80091a4:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	22ff      	movs	r2, #255	@ 0xff
 80091ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	08009143 	.word	0x08009143

080091c0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff ffc8 	bl	8009164 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff ff57 	bl	80090a0 <u8x8_SetupMemory>
}
 80091f2:	bf00      	nop
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009202:	463b      	mov	r3, r7
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	605a      	str	r2, [r3, #4]
 800920a:	609a      	str	r2, [r3, #8]
 800920c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800920e:	4b21      	ldr	r3, [pc, #132]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009210:	4a21      	ldr	r2, [pc, #132]	@ (8009298 <MX_ADC1_Init+0x9c>)
 8009212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009214:	4b1f      	ldr	r3, [pc, #124]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800921a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800921c:	4b1d      	ldr	r3, [pc, #116]	@ (8009294 <MX_ADC1_Init+0x98>)
 800921e:	2200      	movs	r2, #0
 8009220:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009222:	4b1c      	ldr	r3, [pc, #112]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009224:	2200      	movs	r2, #0
 8009226:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009228:	4b1a      	ldr	r3, [pc, #104]	@ (8009294 <MX_ADC1_Init+0x98>)
 800922a:	2200      	movs	r2, #0
 800922c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800922e:	4b19      	ldr	r3, [pc, #100]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009236:	4b17      	ldr	r3, [pc, #92]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009238:	2200      	movs	r2, #0
 800923a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800923c:	4b15      	ldr	r3, [pc, #84]	@ (8009294 <MX_ADC1_Init+0x98>)
 800923e:	4a17      	ldr	r2, [pc, #92]	@ (800929c <MX_ADC1_Init+0xa0>)
 8009240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009242:	4b14      	ldr	r3, [pc, #80]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009244:	2200      	movs	r2, #0
 8009246:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009248:	4b12      	ldr	r3, [pc, #72]	@ (8009294 <MX_ADC1_Init+0x98>)
 800924a:	2201      	movs	r2, #1
 800924c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800924e:	4b11      	ldr	r3, [pc, #68]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009256:	4b0f      	ldr	r3, [pc, #60]	@ (8009294 <MX_ADC1_Init+0x98>)
 8009258:	2201      	movs	r2, #1
 800925a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800925c:	480d      	ldr	r0, [pc, #52]	@ (8009294 <MX_ADC1_Init+0x98>)
 800925e:	f001 f88b 	bl	800a378 <HAL_ADC_Init>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009268:	f000 fb66 	bl	8009938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800926c:	2300      	movs	r3, #0
 800926e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009270:	2301      	movs	r3, #1
 8009272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8009274:	2307      	movs	r3, #7
 8009276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009278:	463b      	mov	r3, r7
 800927a:	4619      	mov	r1, r3
 800927c:	4805      	ldr	r0, [pc, #20]	@ (8009294 <MX_ADC1_Init+0x98>)
 800927e:	f001 fa5d 	bl	800a73c <HAL_ADC_ConfigChannel>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009288:	f000 fb56 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20002158 	.word	0x20002158
 8009298:	40012000 	.word	0x40012000
 800929c:	0f000001 	.word	0x0f000001

080092a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80092a6:	463b      	mov	r3, r7
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	605a      	str	r2, [r3, #4]
 80092ae:	609a      	str	r2, [r3, #8]
 80092b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80092b2:	4b21      	ldr	r3, [pc, #132]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092b4:	4a21      	ldr	r2, [pc, #132]	@ (800933c <MX_ADC2_Init+0x9c>)
 80092b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80092b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80092be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80092c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80092c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80092cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80092d2:	4b19      	ldr	r3, [pc, #100]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80092da:	4b17      	ldr	r3, [pc, #92]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092dc:	2200      	movs	r2, #0
 80092de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80092e0:	4b15      	ldr	r3, [pc, #84]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092e2:	4a17      	ldr	r2, [pc, #92]	@ (8009340 <MX_ADC2_Init+0xa0>)
 80092e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80092e6:	4b14      	ldr	r3, [pc, #80]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80092ec:	4b12      	ldr	r3, [pc, #72]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80092f2:	4b11      	ldr	r3, [pc, #68]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80092fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009338 <MX_ADC2_Init+0x98>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009300:	480d      	ldr	r0, [pc, #52]	@ (8009338 <MX_ADC2_Init+0x98>)
 8009302:	f001 f839 	bl	800a378 <HAL_ADC_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800930c:	f000 fb14 	bl	8009938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009310:	230a      	movs	r3, #10
 8009312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009314:	2301      	movs	r3, #1
 8009316:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8009318:	2307      	movs	r3, #7
 800931a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800931c:	463b      	mov	r3, r7
 800931e:	4619      	mov	r1, r3
 8009320:	4805      	ldr	r0, [pc, #20]	@ (8009338 <MX_ADC2_Init+0x98>)
 8009322:	f001 fa0b 	bl	800a73c <HAL_ADC_ConfigChannel>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800932c:	f000 fb04 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	200021a0 	.word	0x200021a0
 800933c:	40012100 	.word	0x40012100
 8009340:	0f000001 	.word	0x0f000001

08009344 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800934a:	463b      	mov	r3, r7
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	605a      	str	r2, [r3, #4]
 8009352:	609a      	str	r2, [r3, #8]
 8009354:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8009356:	4b21      	ldr	r3, [pc, #132]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009358:	4a21      	ldr	r2, [pc, #132]	@ (80093e0 <MX_ADC3_Init+0x9c>)
 800935a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800935c:	4b1f      	ldr	r3, [pc, #124]	@ (80093dc <MX_ADC3_Init+0x98>)
 800935e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009362:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8009364:	4b1d      	ldr	r3, [pc, #116]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009366:	2200      	movs	r2, #0
 8009368:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800936a:	4b1c      	ldr	r3, [pc, #112]	@ (80093dc <MX_ADC3_Init+0x98>)
 800936c:	2200      	movs	r2, #0
 800936e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8009370:	4b1a      	ldr	r3, [pc, #104]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009372:	2200      	movs	r2, #0
 8009374:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009376:	4b19      	ldr	r3, [pc, #100]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800937e:	4b17      	ldr	r3, [pc, #92]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009380:	2200      	movs	r2, #0
 8009382:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009384:	4b15      	ldr	r3, [pc, #84]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009386:	4a17      	ldr	r2, [pc, #92]	@ (80093e4 <MX_ADC3_Init+0xa0>)
 8009388:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800938a:	4b14      	ldr	r3, [pc, #80]	@ (80093dc <MX_ADC3_Init+0x98>)
 800938c:	2200      	movs	r2, #0
 800938e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009392:	2201      	movs	r2, #1
 8009394:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8009396:	4b11      	ldr	r3, [pc, #68]	@ (80093dc <MX_ADC3_Init+0x98>)
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800939e:	4b0f      	ldr	r3, [pc, #60]	@ (80093dc <MX_ADC3_Init+0x98>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80093a4:	480d      	ldr	r0, [pc, #52]	@ (80093dc <MX_ADC3_Init+0x98>)
 80093a6:	f000 ffe7 	bl	800a378 <HAL_ADC_Init>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80093b0:	f000 fac2 	bl	8009938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80093b4:	230b      	movs	r3, #11
 80093b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80093b8:	2301      	movs	r3, #1
 80093ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80093bc:	2307      	movs	r3, #7
 80093be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80093c0:	463b      	mov	r3, r7
 80093c2:	4619      	mov	r1, r3
 80093c4:	4805      	ldr	r0, [pc, #20]	@ (80093dc <MX_ADC3_Init+0x98>)
 80093c6:	f001 f9b9 	bl	800a73c <HAL_ADC_ConfigChannel>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80093d0:	f000 fab2 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	200021e8 	.word	0x200021e8
 80093e0:	40012200 	.word	0x40012200
 80093e4:	0f000001 	.word	0x0f000001

080093e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	@ 0x38
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	609a      	str	r2, [r3, #8]
 80093fc:	60da      	str	r2, [r3, #12]
 80093fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a45      	ldr	r2, [pc, #276]	@ (800951c <HAL_ADC_MspInit+0x134>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d128      	bne.n	800945c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800940a:	2300      	movs	r3, #0
 800940c:	623b      	str	r3, [r7, #32]
 800940e:	4b44      	ldr	r3, [pc, #272]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009412:	4a43      	ldr	r2, [pc, #268]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009418:	6453      	str	r3, [r2, #68]	@ 0x44
 800941a:	4b41      	ldr	r3, [pc, #260]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 800941c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800941e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009422:	623b      	str	r3, [r7, #32]
 8009424:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009426:	2300      	movs	r3, #0
 8009428:	61fb      	str	r3, [r7, #28]
 800942a:	4b3d      	ldr	r3, [pc, #244]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 800942c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942e:	4a3c      	ldr	r2, [pc, #240]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	6313      	str	r3, [r2, #48]	@ 0x30
 8009436:	4b3a      	ldr	r3, [pc, #232]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009442:	2301      	movs	r3, #1
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009446:	2303      	movs	r3, #3
 8009448:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800944a:	2300      	movs	r3, #0
 800944c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800944e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009452:	4619      	mov	r1, r3
 8009454:	4833      	ldr	r0, [pc, #204]	@ (8009524 <HAL_ADC_MspInit+0x13c>)
 8009456:	f001 ff6b 	bl	800b330 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800945a:	e05a      	b.n	8009512 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a31      	ldr	r2, [pc, #196]	@ (8009528 <HAL_ADC_MspInit+0x140>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d128      	bne.n	80094b8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009466:	2300      	movs	r3, #0
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	4b2d      	ldr	r3, [pc, #180]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 800946c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946e:	4a2c      	ldr	r2, [pc, #176]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009470:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009474:	6453      	str	r3, [r2, #68]	@ 0x44
 8009476:	4b2a      	ldr	r3, [pc, #168]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800947e:	61bb      	str	r3, [r7, #24]
 8009480:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	4b26      	ldr	r3, [pc, #152]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948a:	4a25      	ldr	r2, [pc, #148]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 800948c:	f043 0304 	orr.w	r3, r3, #4
 8009490:	6313      	str	r3, [r2, #48]	@ 0x30
 8009492:	4b23      	ldr	r3, [pc, #140]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 8009494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800949e:	2301      	movs	r3, #1
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80094a2:	2303      	movs	r3, #3
 80094a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ae:	4619      	mov	r1, r3
 80094b0:	481e      	ldr	r0, [pc, #120]	@ (800952c <HAL_ADC_MspInit+0x144>)
 80094b2:	f001 ff3d 	bl	800b330 <HAL_GPIO_Init>
}
 80094b6:	e02c      	b.n	8009512 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009530 <HAL_ADC_MspInit+0x148>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d127      	bne.n	8009512 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80094c2:	2300      	movs	r3, #0
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	4b16      	ldr	r3, [pc, #88]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	4a15      	ldr	r2, [pc, #84]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 80094cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80094d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80094d2:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 80094e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e6:	4a0e      	ldr	r2, [pc, #56]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 80094e8:	f043 0304 	orr.w	r3, r3, #4
 80094ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80094ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009520 <HAL_ADC_MspInit+0x138>)
 80094f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80094fa:	2302      	movs	r3, #2
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80094fe:	2303      	movs	r3, #3
 8009500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009502:	2300      	movs	r3, #0
 8009504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800950a:	4619      	mov	r1, r3
 800950c:	4807      	ldr	r0, [pc, #28]	@ (800952c <HAL_ADC_MspInit+0x144>)
 800950e:	f001 ff0f 	bl	800b330 <HAL_GPIO_Init>
}
 8009512:	bf00      	nop
 8009514:	3738      	adds	r7, #56	@ 0x38
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	40012000 	.word	0x40012000
 8009520:	40023800 	.word	0x40023800
 8009524:	40020000 	.word	0x40020000
 8009528:	40012100 	.word	0x40012100
 800952c:	40020800 	.word	0x40020800
 8009530:	40012200 	.word	0x40012200

08009534 <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0


	app_mainC();
 8009538:	f7f8 fca8 	bl	8001e8c <app_mainC>
    vTaskStartScheduler();
 800953c:	f007 fab8 	bl	8010ab0 <vTaskStartScheduler>
}
 8009540:	bf00      	nop
 8009542:	bd80      	pop	{r7, pc}

08009544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08c      	sub	sp, #48	@ 0x30
 8009548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800954a:	f107 031c 	add.w	r3, r7, #28
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	605a      	str	r2, [r3, #4]
 8009554:	609a      	str	r2, [r3, #8]
 8009556:	60da      	str	r2, [r3, #12]
 8009558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	4b65      	ldr	r3, [pc, #404]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 8009560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009562:	4a64      	ldr	r2, [pc, #400]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 8009564:	f043 0304 	orr.w	r3, r3, #4
 8009568:	6313      	str	r3, [r2, #48]	@ 0x30
 800956a:	4b62      	ldr	r3, [pc, #392]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 800956c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	61bb      	str	r3, [r7, #24]
 8009574:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	4b5e      	ldr	r3, [pc, #376]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 800957c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957e:	4a5d      	ldr	r2, [pc, #372]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 8009580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009584:	6313      	str	r3, [r2, #48]	@ 0x30
 8009586:	4b5b      	ldr	r3, [pc, #364]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800958a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009592:	2300      	movs	r3, #0
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	4b57      	ldr	r3, [pc, #348]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 8009598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959a:	4a56      	ldr	r2, [pc, #344]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 800959c:	f043 0301 	orr.w	r3, r3, #1
 80095a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80095a2:	4b54      	ldr	r3, [pc, #336]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	4b50      	ldr	r3, [pc, #320]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b6:	4a4f      	ldr	r2, [pc, #316]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095b8:	f043 0302 	orr.w	r3, r3, #2
 80095bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80095be:	4b4d      	ldr	r3, [pc, #308]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	60bb      	str	r3, [r7, #8]
 80095ce:	4b49      	ldr	r3, [pc, #292]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d2:	4a48      	ldr	r2, [pc, #288]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095d4:	f043 0310 	orr.w	r3, r3, #16
 80095d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80095da:	4b46      	ldr	r3, [pc, #280]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	60bb      	str	r3, [r7, #8]
 80095e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095e6:	2300      	movs	r3, #0
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	4b42      	ldr	r3, [pc, #264]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ee:	4a41      	ldr	r2, [pc, #260]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095f0:	f043 0308 	orr.w	r3, r3, #8
 80095f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80095f6:	4b3f      	ldr	r3, [pc, #252]	@ (80096f4 <MX_GPIO_Init+0x1b0>)
 80095f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fa:	f003 0308 	and.w	r3, r3, #8
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayCont_GPIO_Port, RelayCont_Pin, GPIO_PIN_RESET);
 8009602:	2200      	movs	r2, #0
 8009604:	2108      	movs	r1, #8
 8009606:	483c      	ldr	r0, [pc, #240]	@ (80096f8 <MX_GPIO_Init+0x1b4>)
 8009608:	f002 f846 	bl	800b698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 800960c:	2200      	movs	r2, #0
 800960e:	2102      	movs	r1, #2
 8009610:	483a      	ldr	r0, [pc, #232]	@ (80096fc <MX_GPIO_Init+0x1b8>)
 8009612:	f002 f841 	bl	800b698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DC_Pin|DISPLAY_RES_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8009616:	2200      	movs	r2, #0
 8009618:	f245 0120 	movw	r1, #20512	@ 0x5020
 800961c:	4838      	ldr	r0, [pc, #224]	@ (8009700 <MX_GPIO_Init+0x1bc>)
 800961e:	f002 f83b 	bl	800b698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cont_GPIO_Port, Relay_cont_Pin, GPIO_PIN_RESET);
 8009622:	2200      	movs	r2, #0
 8009624:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009628:	4836      	ldr	r0, [pc, #216]	@ (8009704 <MX_GPIO_Init+0x1c0>)
 800962a:	f002 f835 	bl	800b698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RelayCont_Pin;
 800962e:	2308      	movs	r3, #8
 8009630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009632:	2301      	movs	r3, #1
 8009634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009636:	2300      	movs	r3, #0
 8009638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800963a:	2300      	movs	r3, #0
 800963c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RelayCont_GPIO_Port, &GPIO_InitStruct);
 800963e:	f107 031c 	add.w	r3, r7, #28
 8009642:	4619      	mov	r1, r3
 8009644:	482c      	ldr	r0, [pc, #176]	@ (80096f8 <MX_GPIO_Init+0x1b4>)
 8009646:	f001 fe73 	bl	800b330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 800964a:	2302      	movs	r3, #2
 800964c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800964e:	2301      	movs	r3, #1
 8009650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009652:	2300      	movs	r3, #0
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009656:	2300      	movs	r3, #0
 8009658:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 800965a:	f107 031c 	add.w	r3, r7, #28
 800965e:	4619      	mov	r1, r3
 8009660:	4826      	ldr	r0, [pc, #152]	@ (80096fc <MX_GPIO_Init+0x1b8>)
 8009662:	f001 fe65 	bl	800b330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LFT_Pin;
 8009666:	2340      	movs	r3, #64	@ 0x40
 8009668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800966a:	2300      	movs	r3, #0
 800966c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800966e:	2301      	movs	r3, #1
 8009670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_LFT_GPIO_Port, &GPIO_InitStruct);
 8009672:	f107 031c 	add.w	r3, r7, #28
 8009676:	4619      	mov	r1, r3
 8009678:	4820      	ldr	r0, [pc, #128]	@ (80096fc <MX_GPIO_Init+0x1b8>)
 800967a:	f001 fe59 	bl	800b330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_RGT_Pin;
 800967e:	2301      	movs	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009682:	2300      	movs	r3, #0
 8009684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009686:	2301      	movs	r3, #1
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_RGT_GPIO_Port, &GPIO_InitStruct);
 800968a:	f107 031c 	add.w	r3, r7, #28
 800968e:	4619      	mov	r1, r3
 8009690:	481b      	ldr	r0, [pc, #108]	@ (8009700 <MX_GPIO_Init+0x1bc>)
 8009692:	f001 fe4d 	bl	800b330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_DWN_Pin|BTN_ENTR_Pin|BTN_UP_Pin;
 8009696:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 800969a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800969c:	2300      	movs	r3, #0
 800969e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80096a0:	2301      	movs	r3, #1
 80096a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80096a4:	f107 031c 	add.w	r3, r7, #28
 80096a8:	4619      	mov	r1, r3
 80096aa:	4817      	ldr	r0, [pc, #92]	@ (8009708 <MX_GPIO_Init+0x1c4>)
 80096ac:	f001 fe40 	bl	800b330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_DC_Pin|DISPLAY_RES_Pin|DISPLAY_CS_Pin;
 80096b0:	f245 0320 	movw	r3, #20512	@ 0x5020
 80096b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096b6:	2301      	movs	r3, #1
 80096b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096be:	2300      	movs	r3, #0
 80096c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096c2:	f107 031c 	add.w	r3, r7, #28
 80096c6:	4619      	mov	r1, r3
 80096c8:	480d      	ldr	r0, [pc, #52]	@ (8009700 <MX_GPIO_Init+0x1bc>)
 80096ca:	f001 fe31 	bl	800b330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cont_Pin;
 80096ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096d4:	2301      	movs	r3, #1
 80096d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096dc:	2300      	movs	r3, #0
 80096de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Relay_cont_GPIO_Port, &GPIO_InitStruct);
 80096e0:	f107 031c 	add.w	r3, r7, #28
 80096e4:	4619      	mov	r1, r3
 80096e6:	4807      	ldr	r0, [pc, #28]	@ (8009704 <MX_GPIO_Init+0x1c0>)
 80096e8:	f001 fe22 	bl	800b330 <HAL_GPIO_Init>

}
 80096ec:	bf00      	nop
 80096ee:	3730      	adds	r7, #48	@ 0x30
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	40023800 	.word	0x40023800
 80096f8:	40020800 	.word	0x40020800
 80096fc:	40020000 	.word	0x40020000
 8009700:	40020400 	.word	0x40020400
 8009704:	40020c00 	.word	0x40020c00
 8009708:	40021000 	.word	0x40021000

0800970c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009710:	4b12      	ldr	r3, [pc, #72]	@ (800975c <MX_I2C1_Init+0x50>)
 8009712:	4a13      	ldr	r2, [pc, #76]	@ (8009760 <MX_I2C1_Init+0x54>)
 8009714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009716:	4b11      	ldr	r3, [pc, #68]	@ (800975c <MX_I2C1_Init+0x50>)
 8009718:	4a12      	ldr	r2, [pc, #72]	@ (8009764 <MX_I2C1_Init+0x58>)
 800971a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800971c:	4b0f      	ldr	r3, [pc, #60]	@ (800975c <MX_I2C1_Init+0x50>)
 800971e:	2200      	movs	r2, #0
 8009720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009722:	4b0e      	ldr	r3, [pc, #56]	@ (800975c <MX_I2C1_Init+0x50>)
 8009724:	2200      	movs	r2, #0
 8009726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009728:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <MX_I2C1_Init+0x50>)
 800972a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800972e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009730:	4b0a      	ldr	r3, [pc, #40]	@ (800975c <MX_I2C1_Init+0x50>)
 8009732:	2200      	movs	r2, #0
 8009734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009736:	4b09      	ldr	r3, [pc, #36]	@ (800975c <MX_I2C1_Init+0x50>)
 8009738:	2200      	movs	r2, #0
 800973a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800973c:	4b07      	ldr	r3, [pc, #28]	@ (800975c <MX_I2C1_Init+0x50>)
 800973e:	2200      	movs	r2, #0
 8009740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009742:	4b06      	ldr	r3, [pc, #24]	@ (800975c <MX_I2C1_Init+0x50>)
 8009744:	2200      	movs	r2, #0
 8009746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009748:	4804      	ldr	r0, [pc, #16]	@ (800975c <MX_I2C1_Init+0x50>)
 800974a:	f001 ffd9 	bl	800b700 <HAL_I2C_Init>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009754:	f000 f8f0 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009758:	bf00      	nop
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20002230 	.word	0x20002230
 8009760:	40005400 	.word	0x40005400
 8009764:	000186a0 	.word	0x000186a0

08009768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	@ 0x28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	605a      	str	r2, [r3, #4]
 800977a:	609a      	str	r2, [r3, #8]
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a19      	ldr	r2, [pc, #100]	@ (80097ec <HAL_I2C_MspInit+0x84>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d12c      	bne.n	80097e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800978a:	2300      	movs	r3, #0
 800978c:	613b      	str	r3, [r7, #16]
 800978e:	4b18      	ldr	r3, [pc, #96]	@ (80097f0 <HAL_I2C_MspInit+0x88>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009792:	4a17      	ldr	r2, [pc, #92]	@ (80097f0 <HAL_I2C_MspInit+0x88>)
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	6313      	str	r3, [r2, #48]	@ 0x30
 800979a:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <HAL_I2C_MspInit+0x88>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80097a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80097aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80097ac:	2312      	movs	r3, #18
 80097ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097b4:	2303      	movs	r3, #3
 80097b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80097b8:	2304      	movs	r3, #4
 80097ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	4619      	mov	r1, r3
 80097c2:	480c      	ldr	r0, [pc, #48]	@ (80097f4 <HAL_I2C_MspInit+0x8c>)
 80097c4:	f001 fdb4 	bl	800b330 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	4b08      	ldr	r3, [pc, #32]	@ (80097f0 <HAL_I2C_MspInit+0x88>)
 80097ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d0:	4a07      	ldr	r2, [pc, #28]	@ (80097f0 <HAL_I2C_MspInit+0x88>)
 80097d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80097d8:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <HAL_I2C_MspInit+0x88>)
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80097e4:	bf00      	nop
 80097e6:	3728      	adds	r7, #40	@ 0x28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	40005400 	.word	0x40005400
 80097f0:	40023800 	.word	0x40023800
 80097f4:	40020400 	.word	0x40020400

080097f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80097fc:	f000 fd56 	bl	800a2ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009800:	f000 f81c 	bl	800983c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009804:	f7ff fe9e 	bl	8009544 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009808:	f7ff fcf8 	bl	80091fc <MX_ADC1_Init>
  MX_I2C1_Init();
 800980c:	f7ff ff7e 	bl	800970c <MX_I2C1_Init>
  MX_RTC_Init();
 8009810:	f000 f898 	bl	8009944 <MX_RTC_Init>
  MX_UART4_Init();
 8009814:	f000 fb88 	bl	8009f28 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8009818:	f000 fbb0 	bl	8009f7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800981c:	f000 fbd8 	bl	8009fd0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8009820:	f000 fc00 	bl	800a024 <MX_USART6_UART_Init>
  MX_TIM8_Init();
 8009824:	f000 fb0e 	bl	8009e44 <MX_TIM8_Init>
  MX_SPI2_Init();
 8009828:	f000 f8dc 	bl	80099e4 <MX_SPI2_Init>
  MX_ADC2_Init();
 800982c:	f7ff fd38 	bl	80092a0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8009830:	f7ff fd88 	bl	8009344 <MX_ADC3_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 8009834:	f7ff fe7e 	bl	8009534 <MX_FREERTOS_Init>
  while (1)
 8009838:	bf00      	nop
 800983a:	e7fd      	b.n	8009838 <main+0x40>

0800983c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b094      	sub	sp, #80	@ 0x50
 8009840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009842:	f107 0320 	add.w	r3, r7, #32
 8009846:	2230      	movs	r2, #48	@ 0x30
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f009 fdf3 	bl	8013436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	605a      	str	r2, [r3, #4]
 800985a:	609a      	str	r2, [r3, #8]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009860:	2300      	movs	r3, #0
 8009862:	60bb      	str	r3, [r7, #8]
 8009864:	4b29      	ldr	r3, [pc, #164]	@ (800990c <SystemClock_Config+0xd0>)
 8009866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009868:	4a28      	ldr	r2, [pc, #160]	@ (800990c <SystemClock_Config+0xd0>)
 800986a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800986e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009870:	4b26      	ldr	r3, [pc, #152]	@ (800990c <SystemClock_Config+0xd0>)
 8009872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009878:	60bb      	str	r3, [r7, #8]
 800987a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800987c:	2300      	movs	r3, #0
 800987e:	607b      	str	r3, [r7, #4]
 8009880:	4b23      	ldr	r3, [pc, #140]	@ (8009910 <SystemClock_Config+0xd4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a22      	ldr	r2, [pc, #136]	@ (8009910 <SystemClock_Config+0xd4>)
 8009886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	4b20      	ldr	r3, [pc, #128]	@ (8009910 <SystemClock_Config+0xd4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8009898:	2306      	movs	r3, #6
 800989a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800989c:	2301      	movs	r3, #1
 800989e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80098a0:	2301      	movs	r3, #1
 80098a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80098a4:	2310      	movs	r3, #16
 80098a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098a8:	2302      	movs	r3, #2
 80098aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80098ac:	2300      	movs	r3, #0
 80098ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80098b0:	2308      	movs	r3, #8
 80098b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80098b4:	23a8      	movs	r3, #168	@ 0xa8
 80098b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80098b8:	2302      	movs	r3, #2
 80098ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80098bc:	2304      	movs	r3, #4
 80098be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80098c0:	f107 0320 	add.w	r3, r7, #32
 80098c4:	4618      	mov	r0, r3
 80098c6:	f003 f843 	bl	800c950 <HAL_RCC_OscConfig>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80098d0:	f000 f832 	bl	8009938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80098d4:	230f      	movs	r3, #15
 80098d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80098d8:	2302      	movs	r3, #2
 80098da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80098dc:	2300      	movs	r3, #0
 80098de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80098e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80098e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80098e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80098ec:	f107 030c 	add.w	r3, r7, #12
 80098f0:	2105      	movs	r1, #5
 80098f2:	4618      	mov	r0, r3
 80098f4:	f003 faa4 	bl	800ce40 <HAL_RCC_ClockConfig>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80098fe:	f000 f81b 	bl	8009938 <Error_Handler>
  }
}
 8009902:	bf00      	nop
 8009904:	3750      	adds	r7, #80	@ 0x50
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	40023800 	.word	0x40023800
 8009910:	40007000 	.word	0x40007000

08009914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a04      	ldr	r2, [pc, #16]	@ (8009934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d101      	bne.n	800992a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009926:	f000 fce3 	bl	800a2f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	40000400 	.word	0x40000400

08009938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800993c:	b672      	cpsid	i
}
 800993e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009940:	bf00      	nop
 8009942:	e7fd      	b.n	8009940 <Error_Handler+0x8>

08009944 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009948:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <MX_RTC_Init+0x44>)
 800994a:	4a10      	ldr	r2, [pc, #64]	@ (800998c <MX_RTC_Init+0x48>)
 800994c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800994e:	4b0e      	ldr	r3, [pc, #56]	@ (8009988 <MX_RTC_Init+0x44>)
 8009950:	2200      	movs	r2, #0
 8009952:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009954:	4b0c      	ldr	r3, [pc, #48]	@ (8009988 <MX_RTC_Init+0x44>)
 8009956:	227f      	movs	r2, #127	@ 0x7f
 8009958:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800995a:	4b0b      	ldr	r3, [pc, #44]	@ (8009988 <MX_RTC_Init+0x44>)
 800995c:	22ff      	movs	r2, #255	@ 0xff
 800995e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009960:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <MX_RTC_Init+0x44>)
 8009962:	2200      	movs	r2, #0
 8009964:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009966:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <MX_RTC_Init+0x44>)
 8009968:	2200      	movs	r2, #0
 800996a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <MX_RTC_Init+0x44>)
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009972:	4805      	ldr	r0, [pc, #20]	@ (8009988 <MX_RTC_Init+0x44>)
 8009974:	f003 fd58 	bl	800d428 <HAL_RTC_Init>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800997e:	f7ff ffdb 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009982:	bf00      	nop
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20002284 	.word	0x20002284
 800998c:	40002800 	.word	0x40002800

08009990 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	609a      	str	r2, [r3, #8]
 80099a4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	@ (80099dc <HAL_RTC_MspInit+0x4c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d111      	bne.n	80099d4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80099b0:	2302      	movs	r3, #2
 80099b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80099b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099b8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	4618      	mov	r0, r3
 80099c0:	f003 fc50 	bl	800d264 <HAL_RCCEx_PeriphCLKConfig>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80099ca:	f7ff ffb5 	bl	8009938 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80099ce:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <HAL_RTC_MspInit+0x50>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80099d4:	bf00      	nop
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	40002800 	.word	0x40002800
 80099e0:	42470e3c 	.word	0x42470e3c

080099e4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80099e8:	4b17      	ldr	r3, [pc, #92]	@ (8009a48 <MX_SPI2_Init+0x64>)
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <MX_SPI2_Init+0x68>)
 80099ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80099ee:	4b16      	ldr	r3, [pc, #88]	@ (8009a48 <MX_SPI2_Init+0x64>)
 80099f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80099f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80099f6:	4b14      	ldr	r3, [pc, #80]	@ (8009a48 <MX_SPI2_Init+0x64>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80099fc:	4b12      	ldr	r3, [pc, #72]	@ (8009a48 <MX_SPI2_Init+0x64>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009a02:	4b11      	ldr	r3, [pc, #68]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a04:	2202      	movs	r2, #2
 8009a06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009a08:	4b0f      	ldr	r3, [pc, #60]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009a16:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a18:	2218      	movs	r2, #24
 8009a1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a22:	4b09      	ldr	r3, [pc, #36]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a28:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009a2e:	4b06      	ldr	r3, [pc, #24]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a30:	220a      	movs	r2, #10
 8009a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009a34:	4804      	ldr	r0, [pc, #16]	@ (8009a48 <MX_SPI2_Init+0x64>)
 8009a36:	f004 f803 	bl	800da40 <HAL_SPI_Init>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8009a40:	f7ff ff7a 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009a44:	bf00      	nop
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	200022a4 	.word	0x200022a4
 8009a4c:	40003800 	.word	0x40003800

08009a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	@ 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a58:	f107 0314 	add.w	r3, r7, #20
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	605a      	str	r2, [r3, #4]
 8009a62:	609a      	str	r2, [r3, #8]
 8009a64:	60da      	str	r2, [r3, #12]
 8009a66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a19      	ldr	r2, [pc, #100]	@ (8009ad4 <HAL_SPI_MspInit+0x84>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d12c      	bne.n	8009acc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009a72:	2300      	movs	r3, #0
 8009a74:	613b      	str	r3, [r7, #16]
 8009a76:	4b18      	ldr	r3, [pc, #96]	@ (8009ad8 <HAL_SPI_MspInit+0x88>)
 8009a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7a:	4a17      	ldr	r2, [pc, #92]	@ (8009ad8 <HAL_SPI_MspInit+0x88>)
 8009a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a82:	4b15      	ldr	r3, [pc, #84]	@ (8009ad8 <HAL_SPI_MspInit+0x88>)
 8009a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	4b11      	ldr	r3, [pc, #68]	@ (8009ad8 <HAL_SPI_MspInit+0x88>)
 8009a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a96:	4a10      	ldr	r2, [pc, #64]	@ (8009ad8 <HAL_SPI_MspInit+0x88>)
 8009a98:	f043 0302 	orr.w	r3, r3, #2
 8009a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <HAL_SPI_MspInit+0x88>)
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8009aaa:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8009aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009abc:	2305      	movs	r3, #5
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ac0:	f107 0314 	add.w	r3, r7, #20
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4805      	ldr	r0, [pc, #20]	@ (8009adc <HAL_SPI_MspInit+0x8c>)
 8009ac8:	f001 fc32 	bl	800b330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009acc:	bf00      	nop
 8009ace:	3728      	adds	r7, #40	@ 0x28
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	40003800 	.word	0x40003800
 8009ad8:	40023800 	.word	0x40023800
 8009adc:	40020400 	.word	0x40020400

08009ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	4b12      	ldr	r3, [pc, #72]	@ (8009b34 <HAL_MspInit+0x54>)
 8009aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aee:	4a11      	ldr	r2, [pc, #68]	@ (8009b34 <HAL_MspInit+0x54>)
 8009af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009af6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <HAL_MspInit+0x54>)
 8009af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009afe:	607b      	str	r3, [r7, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b02:	2300      	movs	r3, #0
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4b0b      	ldr	r3, [pc, #44]	@ (8009b34 <HAL_MspInit+0x54>)
 8009b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b34 <HAL_MspInit+0x54>)
 8009b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b12:	4b08      	ldr	r3, [pc, #32]	@ (8009b34 <HAL_MspInit+0x54>)
 8009b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009b1e:	2200      	movs	r2, #0
 8009b20:	210f      	movs	r1, #15
 8009b22:	f06f 0001 	mvn.w	r0, #1
 8009b26:	f001 f8df 	bl	800ace8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40023800 	.word	0x40023800

08009b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08e      	sub	sp, #56	@ 0x38
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	4b33      	ldr	r3, [pc, #204]	@ (8009c1c <HAL_InitTick+0xe4>)
 8009b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b50:	4a32      	ldr	r2, [pc, #200]	@ (8009c1c <HAL_InitTick+0xe4>)
 8009b52:	f043 0302 	orr.w	r3, r3, #2
 8009b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b58:	4b30      	ldr	r3, [pc, #192]	@ (8009c1c <HAL_InitTick+0xe4>)
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009b64:	f107 0210 	add.w	r2, r7, #16
 8009b68:	f107 0314 	add.w	r3, r7, #20
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f003 fb46 	bl	800d200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d103      	bne.n	8009b86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009b7e:	f003 fb17 	bl	800d1b0 <HAL_RCC_GetPCLK1Freq>
 8009b82:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b84:	e004      	b.n	8009b90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8009b86:	f003 fb13 	bl	800d1b0 <HAL_RCC_GetPCLK1Freq>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b92:	4a23      	ldr	r2, [pc, #140]	@ (8009c20 <HAL_InitTick+0xe8>)
 8009b94:	fba2 2303 	umull	r2, r3, r2, r3
 8009b98:	0c9b      	lsrs	r3, r3, #18
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8009b9e:	4b21      	ldr	r3, [pc, #132]	@ (8009c24 <HAL_InitTick+0xec>)
 8009ba0:	4a21      	ldr	r2, [pc, #132]	@ (8009c28 <HAL_InitTick+0xf0>)
 8009ba2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c24 <HAL_InitTick+0xec>)
 8009ba6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009baa:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8009bac:	4a1d      	ldr	r2, [pc, #116]	@ (8009c24 <HAL_InitTick+0xec>)
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009c24 <HAL_InitTick+0xec>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c24 <HAL_InitTick+0xec>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bbe:	4b19      	ldr	r3, [pc, #100]	@ (8009c24 <HAL_InitTick+0xec>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8009bc4:	4817      	ldr	r0, [pc, #92]	@ (8009c24 <HAL_InitTick+0xec>)
 8009bc6:	f004 f9e5 	bl	800df94 <HAL_TIM_Base_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8009bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11b      	bne.n	8009c10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8009bd8:	4812      	ldr	r0, [pc, #72]	@ (8009c24 <HAL_InitTick+0xec>)
 8009bda:	f004 fa2b 	bl	800e034 <HAL_TIM_Base_Start_IT>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8009be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d111      	bne.n	8009c10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009bec:	201d      	movs	r0, #29
 8009bee:	f001 f897 	bl	800ad20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b0f      	cmp	r3, #15
 8009bf6:	d808      	bhi.n	8009c0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	201d      	movs	r0, #29
 8009bfe:	f001 f873 	bl	800ace8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009c02:	4a0a      	ldr	r2, [pc, #40]	@ (8009c2c <HAL_InitTick+0xf4>)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	e002      	b.n	8009c10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8009c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3738      	adds	r7, #56	@ 0x38
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	431bde83 	.word	0x431bde83
 8009c24:	200022fc 	.word	0x200022fc
 8009c28:	40000400 	.word	0x40000400
 8009c2c:	200002f4 	.word	0x200002f4

08009c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <NMI_Handler+0x4>

08009c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c3c:	bf00      	nop
 8009c3e:	e7fd      	b.n	8009c3c <HardFault_Handler+0x4>

08009c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <MemManage_Handler+0x4>

08009c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <BusFault_Handler+0x4>

08009c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <UsageFault_Handler+0x4>

08009c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c5c:	bf00      	nop
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
	...

08009c68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009c6c:	4803      	ldr	r0, [pc, #12]	@ (8009c7c <TIM3_IRQHandler+0x14>)
 8009c6e:	f004 fa51 	bl	800e114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  My_Button_IRQHandlerC();
 8009c72:	f7fd fb63 	bl	800733c <My_Button_IRQHandlerC>
  /* USER CODE END TIM3_IRQn 1 */
}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200022fc 	.word	0x200022fc

08009c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 8009c84:	4802      	ldr	r0, [pc, #8]	@ (8009c90 <USART2_IRQHandler+0x10>)
 8009c86:	f7fb fd15 	bl	80056b4 <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20002420 	.word	0x20002420

08009c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
  return 1;
 8009c98:	2301      	movs	r3, #1
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <_kill>:

int _kill(int pid, int sig)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009cae:	f009 fca1 	bl	80135f4 <__errno>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2216      	movs	r2, #22
 8009cb6:	601a      	str	r2, [r3, #0]
  return -1;
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <_exit>:

void _exit (int status)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff ffe7 	bl	8009ca4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <_exit+0x12>

08009cda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b086      	sub	sp, #24
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	e00a      	b.n	8009d02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009cec:	f3af 8000 	nop.w
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	60ba      	str	r2, [r7, #8]
 8009cf8:	b2ca      	uxtb	r2, r1
 8009cfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	dbf0      	blt.n	8009cec <_read+0x12>
  }

  return len;
 8009d0a:	687b      	ldr	r3, [r7, #4]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	e009      	b.n	8009d3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	60ba      	str	r2, [r7, #8]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	3301      	adds	r3, #1
 8009d38:	617b      	str	r3, [r7, #20]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	dbf1      	blt.n	8009d26 <_write+0x12>
  }
  return len;
 8009d42:	687b      	ldr	r3, [r7, #4]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_close>:

int _close(int file)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009d74:	605a      	str	r2, [r3, #4]
  return 0;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <_isatty>:

int _isatty(int file)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009d8c:	2301      	movs	r3, #1
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009dbc:	4a14      	ldr	r2, [pc, #80]	@ (8009e10 <_sbrk+0x5c>)
 8009dbe:	4b15      	ldr	r3, [pc, #84]	@ (8009e14 <_sbrk+0x60>)
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009dc8:	4b13      	ldr	r3, [pc, #76]	@ (8009e18 <_sbrk+0x64>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009dd0:	4b11      	ldr	r3, [pc, #68]	@ (8009e18 <_sbrk+0x64>)
 8009dd2:	4a12      	ldr	r2, [pc, #72]	@ (8009e1c <_sbrk+0x68>)
 8009dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009dd6:	4b10      	ldr	r3, [pc, #64]	@ (8009e18 <_sbrk+0x64>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d207      	bcs.n	8009df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009de4:	f009 fc06 	bl	80135f4 <__errno>
 8009de8:	4603      	mov	r3, r0
 8009dea:	220c      	movs	r2, #12
 8009dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009dee:	f04f 33ff 	mov.w	r3, #4294967295
 8009df2:	e009      	b.n	8009e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009df4:	4b08      	ldr	r3, [pc, #32]	@ (8009e18 <_sbrk+0x64>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009dfa:	4b07      	ldr	r3, [pc, #28]	@ (8009e18 <_sbrk+0x64>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4413      	add	r3, r2
 8009e02:	4a05      	ldr	r2, [pc, #20]	@ (8009e18 <_sbrk+0x64>)
 8009e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009e06:	68fb      	ldr	r3, [r7, #12]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20020000 	.word	0x20020000
 8009e14:	00000400 	.word	0x00000400
 8009e18:	20002344 	.word	0x20002344
 8009e1c:	20014578 	.word	0x20014578

08009e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e24:	4b06      	ldr	r3, [pc, #24]	@ (8009e40 <SystemInit+0x20>)
 8009e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2a:	4a05      	ldr	r2, [pc, #20]	@ (8009e40 <SystemInit+0x20>)
 8009e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e34:	bf00      	nop
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	e000ed00 	.word	0xe000ed00

08009e44 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	605a      	str	r2, [r3, #4]
 8009e54:	609a      	str	r2, [r3, #8]
 8009e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e58:	463b      	mov	r3, r7
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009e60:	4b1e      	ldr	r3, [pc, #120]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e62:	4a1f      	ldr	r2, [pc, #124]	@ (8009ee0 <MX_TIM8_Init+0x9c>)
 8009e64:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8009e66:	4b1d      	ldr	r3, [pc, #116]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e68:	22a7      	movs	r2, #167	@ 0xa7
 8009e6a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 8009e72:	4b1a      	ldr	r3, [pc, #104]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e74:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009e78:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e7a:	4b18      	ldr	r3, [pc, #96]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009e80:	4b16      	ldr	r3, [pc, #88]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e86:	4b15      	ldr	r3, [pc, #84]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009e8c:	4813      	ldr	r0, [pc, #76]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009e8e:	f004 f881 	bl	800df94 <HAL_TIM_Base_Init>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8009e98:	f7ff fd4e 	bl	8009938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	480c      	ldr	r0, [pc, #48]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009eaa:	f004 fa23 	bl	800e2f4 <HAL_TIM_ConfigClockSource>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8009eb4:	f7ff fd40 	bl	8009938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009eb8:	2320      	movs	r3, #32
 8009eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009ec0:	463b      	mov	r3, r7
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4805      	ldr	r0, [pc, #20]	@ (8009edc <MX_TIM8_Init+0x98>)
 8009ec6:	f004 fc4b 	bl	800e760 <HAL_TIMEx_MasterConfigSynchronization>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8009ed0:	f7ff fd32 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009ed4:	bf00      	nop
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20002348 	.word	0x20002348
 8009ee0:	40010400 	.word	0x40010400

08009ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8009f20 <HAL_TIM_Base_MspInit+0x3c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d10d      	bne.n	8009f12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	4b0a      	ldr	r3, [pc, #40]	@ (8009f24 <HAL_TIM_Base_MspInit+0x40>)
 8009efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efe:	4a09      	ldr	r2, [pc, #36]	@ (8009f24 <HAL_TIM_Base_MspInit+0x40>)
 8009f00:	f043 0302 	orr.w	r3, r3, #2
 8009f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f06:	4b07      	ldr	r3, [pc, #28]	@ (8009f24 <HAL_TIM_Base_MspInit+0x40>)
 8009f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40010400 	.word	0x40010400
 8009f24:	40023800 	.word	0x40023800

08009f28 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8009f2c:	4b11      	ldr	r3, [pc, #68]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f2e:	4a12      	ldr	r2, [pc, #72]	@ (8009f78 <MX_UART4_Init+0x50>)
 8009f30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8009f32:	4b10      	ldr	r3, [pc, #64]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009f38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009f40:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009f46:	4b0b      	ldr	r3, [pc, #44]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009f4c:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f4e:	220c      	movs	r2, #12
 8009f50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f52:	4b08      	ldr	r3, [pc, #32]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f58:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009f5e:	4805      	ldr	r0, [pc, #20]	@ (8009f74 <MX_UART4_Init+0x4c>)
 8009f60:	f004 fc8e 	bl	800e880 <HAL_UART_Init>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8009f6a:	f7ff fce5 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8009f6e:	bf00      	nop
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20002390 	.word	0x20002390
 8009f78:	40004c00 	.word	0x40004c00

08009f7c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009f80:	4b11      	ldr	r3, [pc, #68]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009f82:	4a12      	ldr	r2, [pc, #72]	@ (8009fcc <MX_USART1_UART_Init+0x50>)
 8009f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8009f86:	4b10      	ldr	r3, [pc, #64]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009f88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009fa0:	4b09      	ldr	r3, [pc, #36]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009fa2:	220c      	movs	r2, #12
 8009fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fa6:	4b08      	ldr	r3, [pc, #32]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fac:	4b06      	ldr	r3, [pc, #24]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009fb2:	4805      	ldr	r0, [pc, #20]	@ (8009fc8 <MX_USART1_UART_Init+0x4c>)
 8009fb4:	f004 fc64 	bl	800e880 <HAL_UART_Init>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009fbe:	f7ff fcbb 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009fc2:	bf00      	nop
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	200023d8 	.word	0x200023d8
 8009fcc:	40011000 	.word	0x40011000

08009fd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009fd4:	4b11      	ldr	r3, [pc, #68]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009fd6:	4a12      	ldr	r2, [pc, #72]	@ (800a020 <MX_USART2_UART_Init+0x50>)
 8009fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009fda:	4b10      	ldr	r3, [pc, #64]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009fee:	4b0b      	ldr	r3, [pc, #44]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009ff4:	4b09      	ldr	r3, [pc, #36]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009ff6:	220c      	movs	r2, #12
 8009ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ffa:	4b08      	ldr	r3, [pc, #32]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 800a002:	2200      	movs	r2, #0
 800a004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a006:	4805      	ldr	r0, [pc, #20]	@ (800a01c <MX_USART2_UART_Init+0x4c>)
 800a008:	f004 fc3a 	bl	800e880 <HAL_UART_Init>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a012:	f7ff fc91 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a016:	bf00      	nop
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20002420 	.word	0x20002420
 800a020:	40004400 	.word	0x40004400

0800a024 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a02a:	4a12      	ldr	r2, [pc, #72]	@ (800a074 <MX_USART6_UART_Init+0x50>)
 800a02c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800a02e:	4b10      	ldr	r3, [pc, #64]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a030:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a034:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a036:	4b0e      	ldr	r3, [pc, #56]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a038:	2200      	movs	r2, #0
 800a03a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a03c:	4b0c      	ldr	r3, [pc, #48]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a03e:	2200      	movs	r2, #0
 800a040:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a042:	4b0b      	ldr	r3, [pc, #44]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a044:	2200      	movs	r2, #0
 800a046:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a048:	4b09      	ldr	r3, [pc, #36]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a04a:	220c      	movs	r2, #12
 800a04c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a04e:	4b08      	ldr	r3, [pc, #32]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a050:	2200      	movs	r2, #0
 800a052:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a054:	4b06      	ldr	r3, [pc, #24]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a056:	2200      	movs	r2, #0
 800a058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a05a:	4805      	ldr	r0, [pc, #20]	@ (800a070 <MX_USART6_UART_Init+0x4c>)
 800a05c:	f004 fc10 	bl	800e880 <HAL_UART_Init>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a066:	f7ff fc67 	bl	8009938 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a06a:	bf00      	nop
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20002468 	.word	0x20002468
 800a074:	40011400 	.word	0x40011400

0800a078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b090      	sub	sp, #64	@ 0x40
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	605a      	str	r2, [r3, #4]
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a69      	ldr	r2, [pc, #420]	@ (800a23c <HAL_UART_MspInit+0x1c4>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d12d      	bne.n	800a0f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a09a:	2300      	movs	r3, #0
 800a09c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a09e:	4b68      	ldr	r3, [pc, #416]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a2:	4a67      	ldr	r2, [pc, #412]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a0a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0a8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a0aa:	4b65      	ldr	r3, [pc, #404]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ba:	4b61      	ldr	r3, [pc, #388]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0be:	4a60      	ldr	r2, [pc, #384]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a0c0:	f043 0304 	orr.w	r3, r3, #4
 800a0c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0c6:	4b5e      	ldr	r3, [pc, #376]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 800a0d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a0e4:	2308      	movs	r3, #8
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4855      	ldr	r0, [pc, #340]	@ (800a244 <HAL_UART_MspInit+0x1cc>)
 800a0f0:	f001 f91e 	bl	800b330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800a0f4:	e09d      	b.n	800a232 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART1)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a53      	ldr	r2, [pc, #332]	@ (800a248 <HAL_UART_MspInit+0x1d0>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d12d      	bne.n	800a15c <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a100:	2300      	movs	r3, #0
 800a102:	623b      	str	r3, [r7, #32]
 800a104:	4b4e      	ldr	r3, [pc, #312]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a108:	4a4d      	ldr	r2, [pc, #308]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a10a:	f043 0310 	orr.w	r3, r3, #16
 800a10e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a110:	4b4b      	ldr	r3, [pc, #300]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	623b      	str	r3, [r7, #32]
 800a11a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a11c:	2300      	movs	r3, #0
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	4b47      	ldr	r3, [pc, #284]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a124:	4a46      	ldr	r2, [pc, #280]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a126:	f043 0301 	orr.w	r3, r3, #1
 800a12a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a12c:	4b44      	ldr	r3, [pc, #272]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 800a138:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a13e:	2302      	movs	r3, #2
 800a140:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a142:	2300      	movs	r3, #0
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a146:	2303      	movs	r3, #3
 800a148:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a14a:	2307      	movs	r3, #7
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a14e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a152:	4619      	mov	r1, r3
 800a154:	483d      	ldr	r0, [pc, #244]	@ (800a24c <HAL_UART_MspInit+0x1d4>)
 800a156:	f001 f8eb 	bl	800b330 <HAL_GPIO_Init>
}
 800a15a:	e06a      	b.n	800a232 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a3b      	ldr	r2, [pc, #236]	@ (800a250 <HAL_UART_MspInit+0x1d8>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d134      	bne.n	800a1d0 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a166:	2300      	movs	r3, #0
 800a168:	61bb      	str	r3, [r7, #24]
 800a16a:	4b35      	ldr	r3, [pc, #212]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16e:	4a34      	ldr	r2, [pc, #208]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a174:	6413      	str	r3, [r2, #64]	@ 0x40
 800a176:	4b32      	ldr	r3, [pc, #200]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a182:	2300      	movs	r3, #0
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	4b2e      	ldr	r3, [pc, #184]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18a:	4a2d      	ldr	r2, [pc, #180]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	6313      	str	r3, [r2, #48]	@ 0x30
 800a192:	4b2b      	ldr	r3, [pc, #172]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 800a19e:	230c      	movs	r3, #12
 800a1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a1ae:	2307      	movs	r3, #7
 800a1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4824      	ldr	r0, [pc, #144]	@ (800a24c <HAL_UART_MspInit+0x1d4>)
 800a1ba:	f001 f8b9 	bl	800b330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2105      	movs	r1, #5
 800a1c2:	2026      	movs	r0, #38	@ 0x26
 800a1c4:	f000 fd90 	bl	800ace8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a1c8:	2026      	movs	r0, #38	@ 0x26
 800a1ca:	f000 fda9 	bl	800ad20 <HAL_NVIC_EnableIRQ>
}
 800a1ce:	e030      	b.n	800a232 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART6)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a254 <HAL_UART_MspInit+0x1dc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d12b      	bne.n	800a232 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	4b18      	ldr	r3, [pc, #96]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1e2:	4a17      	ldr	r2, [pc, #92]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a1e4:	f043 0320 	orr.w	r3, r3, #32
 800a1e8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1ea:	4b15      	ldr	r3, [pc, #84]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	613b      	str	r3, [r7, #16]
 800a1f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	4b11      	ldr	r3, [pc, #68]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1fe:	4a10      	ldr	r2, [pc, #64]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a200:	f043 0304 	orr.w	r3, r3, #4
 800a204:	6313      	str	r3, [r2, #48]	@ 0x30
 800a206:	4b0e      	ldr	r3, [pc, #56]	@ (800a240 <HAL_UART_MspInit+0x1c8>)
 800a208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a20a:	f003 0304 	and.w	r3, r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
 800a210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 800a212:	23c0      	movs	r3, #192	@ 0xc0
 800a214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a216:	2302      	movs	r3, #2
 800a218:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a21e:	2303      	movs	r3, #3
 800a220:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a222:	2308      	movs	r3, #8
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a22a:	4619      	mov	r1, r3
 800a22c:	4805      	ldr	r0, [pc, #20]	@ (800a244 <HAL_UART_MspInit+0x1cc>)
 800a22e:	f001 f87f 	bl	800b330 <HAL_GPIO_Init>
}
 800a232:	bf00      	nop
 800a234:	3740      	adds	r7, #64	@ 0x40
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	40004c00 	.word	0x40004c00
 800a240:	40023800 	.word	0x40023800
 800a244:	40020800 	.word	0x40020800
 800a248:	40011000 	.word	0x40011000
 800a24c:	40020000 	.word	0x40020000
 800a250:	40004400 	.word	0x40004400
 800a254:	40011400 	.word	0x40011400

0800a258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a25c:	f7ff fde0 	bl	8009e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a260:	480c      	ldr	r0, [pc, #48]	@ (800a294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a262:	490d      	ldr	r1, [pc, #52]	@ (800a298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a264:	4a0d      	ldr	r2, [pc, #52]	@ (800a29c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a268:	e002      	b.n	800a270 <LoopCopyDataInit>

0800a26a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a26a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a26c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a26e:	3304      	adds	r3, #4

0800a270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a274:	d3f9      	bcc.n	800a26a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a276:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a278:	4c0a      	ldr	r4, [pc, #40]	@ (800a2a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a27a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a27c:	e001      	b.n	800a282 <LoopFillZerobss>

0800a27e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a27e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a280:	3204      	adds	r2, #4

0800a282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a284:	d3fb      	bcc.n	800a27e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a286:	f009 f9bb 	bl	8013600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a28a:	f7ff fab5 	bl	80097f8 <main>
  bx  lr    
 800a28e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a298:	200004c8 	.word	0x200004c8
  ldr r2, =_sidata
 800a29c:	080173f0 	.word	0x080173f0
  ldr r2, =_sbss
 800a2a0:	200004c8 	.word	0x200004c8
  ldr r4, =_ebss
 800a2a4:	20014574 	.word	0x20014574

0800a2a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a2a8:	e7fe      	b.n	800a2a8 <ADC_IRQHandler>
	...

0800a2ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ec <HAL_Init+0x40>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a0d      	ldr	r2, [pc, #52]	@ (800a2ec <HAL_Init+0x40>)
 800a2b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a2ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ec <HAL_Init+0x40>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a2ec <HAL_Init+0x40>)
 800a2c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a2c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a2c8:	4b08      	ldr	r3, [pc, #32]	@ (800a2ec <HAL_Init+0x40>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a07      	ldr	r2, [pc, #28]	@ (800a2ec <HAL_Init+0x40>)
 800a2ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a2d4:	2003      	movs	r0, #3
 800a2d6:	f000 fcfc 	bl	800acd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a2da:	200f      	movs	r0, #15
 800a2dc:	f7ff fc2c 	bl	8009b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a2e0:	f7ff fbfe 	bl	8009ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	40023c00 	.word	0x40023c00

0800a2f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a2f4:	4b06      	ldr	r3, [pc, #24]	@ (800a310 <HAL_IncTick+0x20>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4b06      	ldr	r3, [pc, #24]	@ (800a314 <HAL_IncTick+0x24>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4413      	add	r3, r2
 800a300:	4a04      	ldr	r2, [pc, #16]	@ (800a314 <HAL_IncTick+0x24>)
 800a302:	6013      	str	r3, [r2, #0]
}
 800a304:	bf00      	nop
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	200002f8 	.word	0x200002f8
 800a314:	200024b0 	.word	0x200024b0

0800a318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  return uwTick;
 800a31c:	4b03      	ldr	r3, [pc, #12]	@ (800a32c <HAL_GetTick+0x14>)
 800a31e:	681b      	ldr	r3, [r3, #0]
}
 800a320:	4618      	mov	r0, r3
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	200024b0 	.word	0x200024b0

0800a330 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800a334:	4b03      	ldr	r3, [pc, #12]	@ (800a344 <HAL_GetUIDw0+0x14>)
 800a336:	681b      	ldr	r3, [r3, #0]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	1fff7a10 	.word	0x1fff7a10

0800a348 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800a34c:	4b03      	ldr	r3, [pc, #12]	@ (800a35c <HAL_GetUIDw1+0x14>)
 800a34e:	681b      	ldr	r3, [r3, #0]
}
 800a350:	4618      	mov	r0, r3
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	1fff7a14 	.word	0x1fff7a14

0800a360 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800a364:	4b03      	ldr	r3, [pc, #12]	@ (800a374 <HAL_GetUIDw2+0x14>)
 800a366:	681b      	ldr	r3, [r3, #0]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	1fff7a18 	.word	0x1fff7a18

0800a378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e033      	b.n	800a3f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff f826 	bl	80093e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ae:	f003 0310 	and.w	r3, r3, #16
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d118      	bne.n	800a3e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a3be:	f023 0302 	bic.w	r3, r3, #2
 800a3c2:	f043 0202 	orr.w	r2, r3, #2
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fad8 	bl	800a980 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	f043 0201 	orr.w	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	641a      	str	r2, [r3, #64]	@ 0x40
 800a3e6:	e001      	b.n	800a3ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_ADC_Start+0x1a>
 800a416:	2302      	movs	r3, #2
 800a418:	e0b2      	b.n	800a580 <HAL_ADC_Start+0x180>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d018      	beq.n	800a462 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0201 	orr.w	r2, r2, #1
 800a43e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a440:	4b52      	ldr	r3, [pc, #328]	@ (800a58c <HAL_ADC_Start+0x18c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a52      	ldr	r2, [pc, #328]	@ (800a590 <HAL_ADC_Start+0x190>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	0c9a      	lsrs	r2, r3, #18
 800a44c:	4613      	mov	r3, r2
 800a44e:	005b      	lsls	r3, r3, #1
 800a450:	4413      	add	r3, r2
 800a452:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a454:	e002      	b.n	800a45c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	3b01      	subs	r3, #1
 800a45a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1f9      	bne.n	800a456 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d17a      	bne.n	800a566 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a474:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a478:	f023 0301 	bic.w	r3, r3, #1
 800a47c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d007      	beq.n	800a4a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a496:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a49a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ae:	d106      	bne.n	800a4be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b4:	f023 0206 	bic.w	r2, r3, #6
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	645a      	str	r2, [r3, #68]	@ 0x44
 800a4bc:	e002      	b.n	800a4c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a4cc:	4b31      	ldr	r3, [pc, #196]	@ (800a594 <HAL_ADC_Start+0x194>)
 800a4ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a4d8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f003 031f 	and.w	r3, r3, #31
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d12a      	bne.n	800a53c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a2b      	ldr	r2, [pc, #172]	@ (800a598 <HAL_ADC_Start+0x198>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d015      	beq.n	800a51c <HAL_ADC_Start+0x11c>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a29      	ldr	r2, [pc, #164]	@ (800a59c <HAL_ADC_Start+0x19c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d105      	bne.n	800a506 <HAL_ADC_Start+0x106>
 800a4fa:	4b26      	ldr	r3, [pc, #152]	@ (800a594 <HAL_ADC_Start+0x194>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f003 031f 	and.w	r3, r3, #31
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a25      	ldr	r2, [pc, #148]	@ (800a5a0 <HAL_ADC_Start+0x1a0>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d136      	bne.n	800a57e <HAL_ADC_Start+0x17e>
 800a510:	4b20      	ldr	r3, [pc, #128]	@ (800a594 <HAL_ADC_Start+0x194>)
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d130      	bne.n	800a57e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d129      	bne.n	800a57e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a538:	609a      	str	r2, [r3, #8]
 800a53a:	e020      	b.n	800a57e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a15      	ldr	r2, [pc, #84]	@ (800a598 <HAL_ADC_Start+0x198>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d11b      	bne.n	800a57e <HAL_ADC_Start+0x17e>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d114      	bne.n	800a57e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a562:	609a      	str	r2, [r3, #8]
 800a564:	e00b      	b.n	800a57e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56a:	f043 0210 	orr.w	r2, r3, #16
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a576:	f043 0201 	orr.w	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	200002f0 	.word	0x200002f0
 800a590:	431bde83 	.word	0x431bde83
 800a594:	40012300 	.word	0x40012300
 800a598:	40012000 	.word	0x40012000
 800a59c:	40012100 	.word	0x40012100
 800a5a0:	40012200 	.word	0x40012200

0800a5a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_ADC_Stop+0x16>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e021      	b.n	800a5fe <HAL_ADC_Stop+0x5a>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	f043 0201 	orr.w	r2, r3, #1
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a626:	d113      	bne.n	800a650 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a636:	d10b      	bne.n	800a650 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63c:	f043 0220 	orr.w	r2, r3, #32
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e063      	b.n	800a718 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800a650:	f7ff fe62 	bl	800a318 <HAL_GetTick>
 800a654:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a656:	e021      	b.n	800a69c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d01d      	beq.n	800a69c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <HAL_ADC_PollForConversion+0x6c>
 800a666:	f7ff fe57 	bl	800a318 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d212      	bcs.n	800a69c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b02      	cmp	r3, #2
 800a682:	d00b      	beq.n	800a69c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a688:	f043 0204 	orr.w	r2, r3, #4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e03d      	b.n	800a718 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d1d6      	bne.n	800a658 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f06f 0212 	mvn.w	r2, #18
 800a6b2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d123      	bne.n	800a716 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d11f      	bne.n	800a716 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6dc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d006      	beq.n	800a6f2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d111      	bne.n	800a716 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d105      	bne.n	800a716 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70e:	f043 0201 	orr.w	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_ADC_ConfigChannel+0x1c>
 800a754:	2302      	movs	r3, #2
 800a756:	e105      	b.n	800a964 <HAL_ADC_ConfigChannel+0x228>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b09      	cmp	r3, #9
 800a766:	d925      	bls.n	800a7b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68d9      	ldr	r1, [r3, #12]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	461a      	mov	r2, r3
 800a776:	4613      	mov	r3, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4413      	add	r3, r2
 800a77c:	3b1e      	subs	r3, #30
 800a77e:	2207      	movs	r2, #7
 800a780:	fa02 f303 	lsl.w	r3, r2, r3
 800a784:	43da      	mvns	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	400a      	ands	r2, r1
 800a78c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68d9      	ldr	r1, [r3, #12]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	4618      	mov	r0, r3
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	4403      	add	r3, r0
 800a7a6:	3b1e      	subs	r3, #30
 800a7a8:	409a      	lsls	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	60da      	str	r2, [r3, #12]
 800a7b2:	e022      	b.n	800a7fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6919      	ldr	r1, [r3, #16]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	4413      	add	r3, r2
 800a7c8:	2207      	movs	r2, #7
 800a7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ce:	43da      	mvns	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	400a      	ands	r2, r1
 800a7d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6919      	ldr	r1, [r3, #16]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	4403      	add	r3, r0
 800a7f0:	409a      	lsls	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	2b06      	cmp	r3, #6
 800a800:	d824      	bhi.n	800a84c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	3b05      	subs	r3, #5
 800a814:	221f      	movs	r2, #31
 800a816:	fa02 f303 	lsl.w	r3, r2, r3
 800a81a:	43da      	mvns	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	400a      	ands	r2, r1
 800a822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4618      	mov	r0, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	3b05      	subs	r3, #5
 800a83e:	fa00 f203 	lsl.w	r2, r0, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	635a      	str	r2, [r3, #52]	@ 0x34
 800a84a:	e04c      	b.n	800a8e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	2b0c      	cmp	r3, #12
 800a852:	d824      	bhi.n	800a89e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	3b23      	subs	r3, #35	@ 0x23
 800a866:	221f      	movs	r2, #31
 800a868:	fa02 f303 	lsl.w	r3, r2, r3
 800a86c:	43da      	mvns	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	400a      	ands	r2, r1
 800a874:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b29b      	uxth	r3, r3
 800a882:	4618      	mov	r0, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	3b23      	subs	r3, #35	@ 0x23
 800a890:	fa00 f203 	lsl.w	r2, r0, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a89c:	e023      	b.n	800a8e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	3b41      	subs	r3, #65	@ 0x41
 800a8b0:	221f      	movs	r2, #31
 800a8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b6:	43da      	mvns	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	400a      	ands	r2, r1
 800a8be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	3b41      	subs	r3, #65	@ 0x41
 800a8da:	fa00 f203 	lsl.w	r2, r0, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a8e6:	4b22      	ldr	r3, [pc, #136]	@ (800a970 <HAL_ADC_ConfigChannel+0x234>)
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a21      	ldr	r2, [pc, #132]	@ (800a974 <HAL_ADC_ConfigChannel+0x238>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d109      	bne.n	800a908 <HAL_ADC_ConfigChannel+0x1cc>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b12      	cmp	r3, #18
 800a8fa:	d105      	bne.n	800a908 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a19      	ldr	r2, [pc, #100]	@ (800a974 <HAL_ADC_ConfigChannel+0x238>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d123      	bne.n	800a95a <HAL_ADC_ConfigChannel+0x21e>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b10      	cmp	r3, #16
 800a918:	d003      	beq.n	800a922 <HAL_ADC_ConfigChannel+0x1e6>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b11      	cmp	r3, #17
 800a920:	d11b      	bne.n	800a95a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b10      	cmp	r3, #16
 800a934:	d111      	bne.n	800a95a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a936:	4b10      	ldr	r3, [pc, #64]	@ (800a978 <HAL_ADC_ConfigChannel+0x23c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a10      	ldr	r2, [pc, #64]	@ (800a97c <HAL_ADC_ConfigChannel+0x240>)
 800a93c:	fba2 2303 	umull	r2, r3, r2, r3
 800a940:	0c9a      	lsrs	r2, r3, #18
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a94c:	e002      	b.n	800a954 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	3b01      	subs	r3, #1
 800a952:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1f9      	bne.n	800a94e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	40012300 	.word	0x40012300
 800a974:	40012000 	.word	0x40012000
 800a978:	200002f0 	.word	0x200002f0
 800a97c:	431bde83 	.word	0x431bde83

0800a980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a988:	4b79      	ldr	r3, [pc, #484]	@ (800ab70 <ADC_Init+0x1f0>)
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a9b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6859      	ldr	r1, [r3, #4]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	021a      	lsls	r2, r3, #8
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800a9d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6859      	ldr	r1, [r3, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689a      	ldr	r2, [r3, #8]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6899      	ldr	r1, [r3, #8]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa12:	4a58      	ldr	r2, [pc, #352]	@ (800ab74 <ADC_Init+0x1f4>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d022      	beq.n	800aa5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800aa26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6899      	ldr	r1, [r3, #8]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800aa48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6899      	ldr	r1, [r3, #8]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	609a      	str	r2, [r3, #8]
 800aa5c:	e00f      	b.n	800aa7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800aa6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800aa7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f022 0202 	bic.w	r2, r2, #2
 800aa8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6899      	ldr	r1, [r3, #8]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7e1b      	ldrb	r3, [r3, #24]
 800aa98:	005a      	lsls	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	430a      	orrs	r2, r1
 800aaa0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01b      	beq.n	800aae4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aaba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800aaca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6859      	ldr	r1, [r3, #4]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad6:	3b01      	subs	r3, #1
 800aad8:	035a      	lsls	r2, r3, #13
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	605a      	str	r2, [r3, #4]
 800aae2:	e007      	b.n	800aaf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aaf2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800ab02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	051a      	lsls	r2, r3, #20
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689a      	ldr	r2, [r3, #8]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ab28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6899      	ldr	r1, [r3, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab36:	025a      	lsls	r2, r3, #9
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689a      	ldr	r2, [r3, #8]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6899      	ldr	r1, [r3, #8]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	029a      	lsls	r2, r3, #10
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	609a      	str	r2, [r3, #8]
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	40012300 	.word	0x40012300
 800ab74:	0f000001 	.word	0x0f000001

0800ab78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab88:	4b0c      	ldr	r3, [pc, #48]	@ (800abbc <__NVIC_SetPriorityGrouping+0x44>)
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ab94:	4013      	ands	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800abaa:	4a04      	ldr	r2, [pc, #16]	@ (800abbc <__NVIC_SetPriorityGrouping+0x44>)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	60d3      	str	r3, [r2, #12]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	e000ed00 	.word	0xe000ed00

0800abc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800abc4:	4b04      	ldr	r3, [pc, #16]	@ (800abd8 <__NVIC_GetPriorityGrouping+0x18>)
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	f003 0307 	and.w	r3, r3, #7
}
 800abce:	4618      	mov	r0, r3
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	e000ed00 	.word	0xe000ed00

0800abdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abea:	2b00      	cmp	r3, #0
 800abec:	db0b      	blt.n	800ac06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	f003 021f 	and.w	r2, r3, #31
 800abf4:	4907      	ldr	r1, [pc, #28]	@ (800ac14 <__NVIC_EnableIRQ+0x38>)
 800abf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abfa:	095b      	lsrs	r3, r3, #5
 800abfc:	2001      	movs	r0, #1
 800abfe:	fa00 f202 	lsl.w	r2, r0, r2
 800ac02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	e000e100 	.word	0xe000e100

0800ac18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	db0a      	blt.n	800ac42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	490c      	ldr	r1, [pc, #48]	@ (800ac64 <__NVIC_SetPriority+0x4c>)
 800ac32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac36:	0112      	lsls	r2, r2, #4
 800ac38:	b2d2      	uxtb	r2, r2
 800ac3a:	440b      	add	r3, r1
 800ac3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ac40:	e00a      	b.n	800ac58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4908      	ldr	r1, [pc, #32]	@ (800ac68 <__NVIC_SetPriority+0x50>)
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	3b04      	subs	r3, #4
 800ac50:	0112      	lsls	r2, r2, #4
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	440b      	add	r3, r1
 800ac56:	761a      	strb	r2, [r3, #24]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	e000e100 	.word	0xe000e100
 800ac68:	e000ed00 	.word	0xe000ed00

0800ac6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b089      	sub	sp, #36	@ 0x24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f1c3 0307 	rsb	r3, r3, #7
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	bf28      	it	cs
 800ac8a:	2304      	movcs	r3, #4
 800ac8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	3304      	adds	r3, #4
 800ac92:	2b06      	cmp	r3, #6
 800ac94:	d902      	bls.n	800ac9c <NVIC_EncodePriority+0x30>
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	3b03      	subs	r3, #3
 800ac9a:	e000      	b.n	800ac9e <NVIC_EncodePriority+0x32>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	fa02 f303 	lsl.w	r3, r2, r3
 800acaa:	43da      	mvns	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	401a      	ands	r2, r3
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800acb4:	f04f 31ff 	mov.w	r1, #4294967295
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	fa01 f303 	lsl.w	r3, r1, r3
 800acbe:	43d9      	mvns	r1, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acc4:	4313      	orrs	r3, r2
         );
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3724      	adds	r7, #36	@ 0x24
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff ff4c 	bl	800ab78 <__NVIC_SetPriorityGrouping>
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800acfa:	f7ff ff61 	bl	800abc0 <__NVIC_GetPriorityGrouping>
 800acfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	6978      	ldr	r0, [r7, #20]
 800ad06:	f7ff ffb1 	bl	800ac6c <NVIC_EncodePriority>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff ff80 	bl	800ac18 <__NVIC_SetPriority>
}
 800ad18:	bf00      	nop
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff ff54 	bl	800abdc <__NVIC_EnableIRQ>
}
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d004      	beq.n	800ad5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2280      	movs	r2, #128	@ 0x80
 800ad54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e00c      	b.n	800ad74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2205      	movs	r2, #5
 800ad5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f022 0201 	bic.w	r2, r2, #1
 800ad70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ad92:	4b23      	ldr	r3, [pc, #140]	@ (800ae20 <HAL_FLASH_Program+0xa0>)
 800ad94:	7e1b      	ldrb	r3, [r3, #24]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d101      	bne.n	800ad9e <HAL_FLASH_Program+0x1e>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e03b      	b.n	800ae16 <HAL_FLASH_Program+0x96>
 800ad9e:	4b20      	ldr	r3, [pc, #128]	@ (800ae20 <HAL_FLASH_Program+0xa0>)
 800ada0:	2201      	movs	r2, #1
 800ada2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ada4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ada8:	f000 f870 	bl	800ae8c <FLASH_WaitForLastOperation>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d12b      	bne.n	800ae0e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d105      	bne.n	800adc8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800adbc:	783b      	ldrb	r3, [r7, #0]
 800adbe:	4619      	mov	r1, r3
 800adc0:	68b8      	ldr	r0, [r7, #8]
 800adc2:	f000 f91b 	bl	800affc <FLASH_Program_Byte>
 800adc6:	e016      	b.n	800adf6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d105      	bne.n	800adda <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800adce:	883b      	ldrh	r3, [r7, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	68b8      	ldr	r0, [r7, #8]
 800add4:	f000 f8ee 	bl	800afb4 <FLASH_Program_HalfWord>
 800add8:	e00d      	b.n	800adf6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b02      	cmp	r3, #2
 800adde:	d105      	bne.n	800adec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	4619      	mov	r1, r3
 800ade4:	68b8      	ldr	r0, [r7, #8]
 800ade6:	f000 f8c3 	bl	800af70 <FLASH_Program_Word>
 800adea:	e004      	b.n	800adf6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800adec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adf0:	68b8      	ldr	r0, [r7, #8]
 800adf2:	f000 f88b 	bl	800af0c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800adf6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800adfa:	f000 f847 	bl	800ae8c <FLASH_WaitForLastOperation>
 800adfe:	4603      	mov	r3, r0
 800ae00:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800ae02:	4b08      	ldr	r3, [pc, #32]	@ (800ae24 <HAL_FLASH_Program+0xa4>)
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	4a07      	ldr	r2, [pc, #28]	@ (800ae24 <HAL_FLASH_Program+0xa4>)
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae0e:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <HAL_FLASH_Program+0xa0>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	761a      	strb	r2, [r3, #24]

  return status;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	200024b4 	.word	0x200024b4
 800ae24:	40023c00 	.word	0x40023c00

0800ae28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ae32:	4b0b      	ldr	r3, [pc, #44]	@ (800ae60 <HAL_FLASH_Unlock+0x38>)
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	da0b      	bge.n	800ae52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae3a:	4b09      	ldr	r3, [pc, #36]	@ (800ae60 <HAL_FLASH_Unlock+0x38>)
 800ae3c:	4a09      	ldr	r2, [pc, #36]	@ (800ae64 <HAL_FLASH_Unlock+0x3c>)
 800ae3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae40:	4b07      	ldr	r3, [pc, #28]	@ (800ae60 <HAL_FLASH_Unlock+0x38>)
 800ae42:	4a09      	ldr	r2, [pc, #36]	@ (800ae68 <HAL_FLASH_Unlock+0x40>)
 800ae44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ae46:	4b06      	ldr	r3, [pc, #24]	@ (800ae60 <HAL_FLASH_Unlock+0x38>)
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da01      	bge.n	800ae52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ae52:	79fb      	ldrb	r3, [r7, #7]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	40023c00 	.word	0x40023c00
 800ae64:	45670123 	.word	0x45670123
 800ae68:	cdef89ab 	.word	0xcdef89ab

0800ae6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800ae70:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <HAL_FLASH_Lock+0x1c>)
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	4a04      	ldr	r2, [pc, #16]	@ (800ae88 <HAL_FLASH_Lock+0x1c>)
 800ae76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae7a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	40023c00 	.word	0x40023c00

0800ae8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ae98:	4b1a      	ldr	r3, [pc, #104]	@ (800af04 <FLASH_WaitForLastOperation+0x78>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ae9e:	f7ff fa3b 	bl	800a318 <HAL_GetTick>
 800aea2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800aea4:	e010      	b.n	800aec8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d00c      	beq.n	800aec8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d007      	beq.n	800aec4 <FLASH_WaitForLastOperation+0x38>
 800aeb4:	f7ff fa30 	bl	800a318 <HAL_GetTick>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d201      	bcs.n	800aec8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e019      	b.n	800aefc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800aec8:	4b0f      	ldr	r3, [pc, #60]	@ (800af08 <FLASH_WaitForLastOperation+0x7c>)
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e8      	bne.n	800aea6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800aed4:	4b0c      	ldr	r3, [pc, #48]	@ (800af08 <FLASH_WaitForLastOperation+0x7c>)
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800aee0:	4b09      	ldr	r3, [pc, #36]	@ (800af08 <FLASH_WaitForLastOperation+0x7c>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800aee6:	4b08      	ldr	r3, [pc, #32]	@ (800af08 <FLASH_WaitForLastOperation+0x7c>)
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800aef2:	f000 f8a5 	bl	800b040 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e000      	b.n	800aefc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800aefa:	2300      	movs	r3, #0

}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	200024b4 	.word	0x200024b4
 800af08:	40023c00 	.word	0x40023c00

0800af0c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af18:	4b14      	ldr	r3, [pc, #80]	@ (800af6c <FLASH_Program_DoubleWord+0x60>)
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	4a13      	ldr	r2, [pc, #76]	@ (800af6c <FLASH_Program_DoubleWord+0x60>)
 800af1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800af24:	4b11      	ldr	r3, [pc, #68]	@ (800af6c <FLASH_Program_DoubleWord+0x60>)
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	4a10      	ldr	r2, [pc, #64]	@ (800af6c <FLASH_Program_DoubleWord+0x60>)
 800af2a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800af2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800af30:	4b0e      	ldr	r3, [pc, #56]	@ (800af6c <FLASH_Program_DoubleWord+0x60>)
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	4a0d      	ldr	r2, [pc, #52]	@ (800af6c <FLASH_Program_DoubleWord+0x60>)
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800af42:	f3bf 8f6f 	isb	sy
}
 800af46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800af48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af4c:	f04f 0200 	mov.w	r2, #0
 800af50:	f04f 0300 	mov.w	r3, #0
 800af54:	000a      	movs	r2, r1
 800af56:	2300      	movs	r3, #0
 800af58:	68f9      	ldr	r1, [r7, #12]
 800af5a:	3104      	adds	r1, #4
 800af5c:	4613      	mov	r3, r2
 800af5e:	600b      	str	r3, [r1, #0]
}
 800af60:	bf00      	nop
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	40023c00 	.word	0x40023c00

0800af70 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af7a:	4b0d      	ldr	r3, [pc, #52]	@ (800afb0 <FLASH_Program_Word+0x40>)
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	4a0c      	ldr	r2, [pc, #48]	@ (800afb0 <FLASH_Program_Word+0x40>)
 800af80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800af86:	4b0a      	ldr	r3, [pc, #40]	@ (800afb0 <FLASH_Program_Word+0x40>)
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	4a09      	ldr	r2, [pc, #36]	@ (800afb0 <FLASH_Program_Word+0x40>)
 800af8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800af90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800af92:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <FLASH_Program_Word+0x40>)
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	4a06      	ldr	r2, [pc, #24]	@ (800afb0 <FLASH_Program_Word+0x40>)
 800af98:	f043 0301 	orr.w	r3, r3, #1
 800af9c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	601a      	str	r2, [r3, #0]
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	40023c00 	.word	0x40023c00

0800afb4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800afc0:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <FLASH_Program_HalfWord+0x44>)
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	4a0c      	ldr	r2, [pc, #48]	@ (800aff8 <FLASH_Program_HalfWord+0x44>)
 800afc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800afcc:	4b0a      	ldr	r3, [pc, #40]	@ (800aff8 <FLASH_Program_HalfWord+0x44>)
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	4a09      	ldr	r2, [pc, #36]	@ (800aff8 <FLASH_Program_HalfWord+0x44>)
 800afd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800afd8:	4b07      	ldr	r3, [pc, #28]	@ (800aff8 <FLASH_Program_HalfWord+0x44>)
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	4a06      	ldr	r2, [pc, #24]	@ (800aff8 <FLASH_Program_HalfWord+0x44>)
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	887a      	ldrh	r2, [r7, #2]
 800afe8:	801a      	strh	r2, [r3, #0]
}
 800afea:	bf00      	nop
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	40023c00 	.word	0x40023c00

0800affc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b008:	4b0c      	ldr	r3, [pc, #48]	@ (800b03c <FLASH_Program_Byte+0x40>)
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	4a0b      	ldr	r2, [pc, #44]	@ (800b03c <FLASH_Program_Byte+0x40>)
 800b00e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800b014:	4b09      	ldr	r3, [pc, #36]	@ (800b03c <FLASH_Program_Byte+0x40>)
 800b016:	4a09      	ldr	r2, [pc, #36]	@ (800b03c <FLASH_Program_Byte+0x40>)
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b01c:	4b07      	ldr	r3, [pc, #28]	@ (800b03c <FLASH_Program_Byte+0x40>)
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	4a06      	ldr	r2, [pc, #24]	@ (800b03c <FLASH_Program_Byte+0x40>)
 800b022:	f043 0301 	orr.w	r3, r3, #1
 800b026:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	78fa      	ldrb	r2, [r7, #3]
 800b02c:	701a      	strb	r2, [r3, #0]
}
 800b02e:	bf00      	nop
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40023c00 	.word	0x40023c00

0800b040 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800b044:	4b27      	ldr	r3, [pc, #156]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	f003 0310 	and.w	r3, r3, #16
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d008      	beq.n	800b062 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b050:	4b25      	ldr	r3, [pc, #148]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	f043 0310 	orr.w	r3, r3, #16
 800b058:	4a23      	ldr	r2, [pc, #140]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b05a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800b05c:	4b21      	ldr	r3, [pc, #132]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b05e:	2210      	movs	r2, #16
 800b060:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800b062:	4b20      	ldr	r3, [pc, #128]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d008      	beq.n	800b080 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b06e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	f043 0308 	orr.w	r3, r3, #8
 800b076:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b078:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800b07a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b07c:	2220      	movs	r2, #32
 800b07e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800b080:	4b18      	ldr	r3, [pc, #96]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b08c:	4b16      	ldr	r3, [pc, #88]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	f043 0304 	orr.w	r3, r3, #4
 800b094:	4a14      	ldr	r2, [pc, #80]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b096:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800b098:	4b12      	ldr	r3, [pc, #72]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b09a:	2240      	movs	r2, #64	@ 0x40
 800b09c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800b09e:	4b11      	ldr	r3, [pc, #68]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d008      	beq.n	800b0bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800b0aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	f043 0302 	orr.w	r3, r3, #2
 800b0b2:	4a0d      	ldr	r2, [pc, #52]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b0b4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b0b8:	2280      	movs	r2, #128	@ 0x80
 800b0ba:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800b0bc:	4b09      	ldr	r3, [pc, #36]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f003 0302 	and.w	r3, r3, #2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800b0c8:	4b07      	ldr	r3, [pc, #28]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b0ca:	69db      	ldr	r3, [r3, #28]
 800b0cc:	f043 0320 	orr.w	r3, r3, #32
 800b0d0:	4a05      	ldr	r2, [pc, #20]	@ (800b0e8 <FLASH_SetErrorCode+0xa8>)
 800b0d2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800b0d4:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <FLASH_SetErrorCode+0xa4>)
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	60da      	str	r2, [r3, #12]
  }
}
 800b0da:	bf00      	nop
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	40023c00 	.word	0x40023c00
 800b0e8:	200024b4 	.word	0x200024b4

0800b0ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b0fe:	4b31      	ldr	r3, [pc, #196]	@ (800b1c4 <HAL_FLASHEx_Erase+0xd8>)
 800b100:	7e1b      	ldrb	r3, [r3, #24]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <HAL_FLASHEx_Erase+0x1e>
 800b106:	2302      	movs	r3, #2
 800b108:	e058      	b.n	800b1bc <HAL_FLASHEx_Erase+0xd0>
 800b10a:	4b2e      	ldr	r3, [pc, #184]	@ (800b1c4 <HAL_FLASHEx_Erase+0xd8>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b110:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b114:	f7ff feba 	bl	800ae8c <FLASH_WaitForLastOperation>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d148      	bne.n	800b1b4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	f04f 32ff 	mov.w	r2, #4294967295
 800b128:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d115      	bne.n	800b15e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	b2da      	uxtb	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	4619      	mov	r1, r3
 800b13e:	4610      	mov	r0, r2
 800b140:	f000 f844 	bl	800b1cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b144:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b148:	f7ff fea0 	bl	800ae8c <FLASH_WaitForLastOperation>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800b150:	4b1d      	ldr	r3, [pc, #116]	@ (800b1c8 <HAL_FLASHEx_Erase+0xdc>)
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	4a1c      	ldr	r2, [pc, #112]	@ (800b1c8 <HAL_FLASHEx_Erase+0xdc>)
 800b156:	f023 0304 	bic.w	r3, r3, #4
 800b15a:	6113      	str	r3, [r2, #16]
 800b15c:	e028      	b.n	800b1b0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	60bb      	str	r3, [r7, #8]
 800b164:	e01c      	b.n	800b1a0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	4619      	mov	r1, r3
 800b16e:	68b8      	ldr	r0, [r7, #8]
 800b170:	f000 f850 	bl	800b214 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b174:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b178:	f7ff fe88 	bl	800ae8c <FLASH_WaitForLastOperation>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800b180:	4b11      	ldr	r3, [pc, #68]	@ (800b1c8 <HAL_FLASHEx_Erase+0xdc>)
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4a10      	ldr	r2, [pc, #64]	@ (800b1c8 <HAL_FLASHEx_Erase+0xdc>)
 800b186:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800b18a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	601a      	str	r2, [r3, #0]
          break;
 800b198:	e00a      	b.n	800b1b0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	3301      	adds	r3, #1
 800b19e:	60bb      	str	r3, [r7, #8]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d3da      	bcc.n	800b166 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b1b0:	f000 f878 	bl	800b2a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b1b4:	4b03      	ldr	r3, [pc, #12]	@ (800b1c4 <HAL_FLASHEx_Erase+0xd8>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	761a      	strb	r2, [r3, #24]

  return status;
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	200024b4 	.word	0x200024b4
 800b1c8:	40023c00 	.word	0x40023c00

0800b1cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <FLASH_MassErase+0x44>)
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b210 <FLASH_MassErase+0x44>)
 800b1de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800b1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b210 <FLASH_MassErase+0x44>)
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	4a09      	ldr	r2, [pc, #36]	@ (800b210 <FLASH_MassErase+0x44>)
 800b1ea:	f043 0304 	orr.w	r3, r3, #4
 800b1ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800b1f0:	4b07      	ldr	r3, [pc, #28]	@ (800b210 <FLASH_MassErase+0x44>)
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	4a05      	ldr	r2, [pc, #20]	@ (800b210 <FLASH_MassErase+0x44>)
 800b1fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b200:	6113      	str	r3, [r2, #16]
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	40023c00 	.word	0x40023c00

0800b214 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800b220:	2300      	movs	r3, #0
 800b222:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b224:	78fb      	ldrb	r3, [r7, #3]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
 800b22e:	e010      	b.n	800b252 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d103      	bne.n	800b23e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e009      	b.n	800b252 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	2b02      	cmp	r3, #2
 800b242:	d103      	bne.n	800b24c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	e002      	b.n	800b252 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b24c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b250:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b252:	4b13      	ldr	r3, [pc, #76]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	4a12      	ldr	r2, [pc, #72]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b25c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800b25e:	4b10      	ldr	r3, [pc, #64]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	490f      	ldr	r1, [pc, #60]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4313      	orrs	r3, r2
 800b268:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b26a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	4a0c      	ldr	r2, [pc, #48]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b270:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b274:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b276:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b278:	691a      	ldr	r2, [r3, #16]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	00db      	lsls	r3, r3, #3
 800b27e:	4313      	orrs	r3, r2
 800b280:	4a07      	ldr	r2, [pc, #28]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b282:	f043 0302 	orr.w	r3, r3, #2
 800b286:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b288:	4b05      	ldr	r3, [pc, #20]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	4a04      	ldr	r2, [pc, #16]	@ (800b2a0 <FLASH_Erase_Sector+0x8c>)
 800b28e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b292:	6113      	str	r3, [r2, #16]
}
 800b294:	bf00      	nop
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	40023c00 	.word	0x40023c00

0800b2a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800b2a8:	4b20      	ldr	r3, [pc, #128]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d017      	beq.n	800b2e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b2be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a19      	ldr	r2, [pc, #100]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	4b17      	ldr	r3, [pc, #92]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a16      	ldr	r2, [pc, #88]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b2d8:	4b14      	ldr	r3, [pc, #80]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a13      	ldr	r2, [pc, #76]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b2e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b2e4:	4b11      	ldr	r3, [pc, #68]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d017      	beq.n	800b320 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b2fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0a      	ldr	r2, [pc, #40]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b302:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4b08      	ldr	r3, [pc, #32]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a07      	ldr	r2, [pc, #28]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b30e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b312:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b314:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a04      	ldr	r2, [pc, #16]	@ (800b32c <FLASH_FlushCaches+0x88>)
 800b31a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b31e:	6013      	str	r3, [r2, #0]
  }
}
 800b320:	bf00      	nop
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	40023c00 	.word	0x40023c00

0800b330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b330:	b480      	push	{r7}
 800b332:	b089      	sub	sp, #36	@ 0x24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b33e:	2300      	movs	r3, #0
 800b340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b342:	2300      	movs	r3, #0
 800b344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b346:	2300      	movs	r3, #0
 800b348:	61fb      	str	r3, [r7, #28]
 800b34a:	e16b      	b.n	800b624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b34c:	2201      	movs	r2, #1
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	fa02 f303 	lsl.w	r3, r2, r3
 800b354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4013      	ands	r3, r2
 800b35e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	429a      	cmp	r2, r3
 800b366:	f040 815a 	bne.w	800b61e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b01      	cmp	r3, #1
 800b374:	d005      	beq.n	800b382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d130      	bne.n	800b3e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	2203      	movs	r2, #3
 800b38e:	fa02 f303 	lsl.w	r3, r2, r3
 800b392:	43db      	mvns	r3, r3
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	4013      	ands	r3, r2
 800b398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	69ba      	ldr	r2, [r7, #24]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	091b      	lsrs	r3, r3, #4
 800b3ce:	f003 0201 	and.w	r2, r3, #1
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f003 0303 	and.w	r3, r3, #3
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d017      	beq.n	800b420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b400:	43db      	mvns	r3, r3
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	4013      	ands	r3, r2
 800b406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	689a      	ldr	r2, [r3, #8]
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	fa02 f303 	lsl.w	r3, r2, r3
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	4313      	orrs	r3, r2
 800b418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f003 0303 	and.w	r3, r3, #3
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d123      	bne.n	800b474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	08da      	lsrs	r2, r3, #3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3208      	adds	r2, #8
 800b434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	f003 0307 	and.w	r3, r3, #7
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	220f      	movs	r2, #15
 800b444:	fa02 f303 	lsl.w	r3, r2, r3
 800b448:	43db      	mvns	r3, r3
 800b44a:	69ba      	ldr	r2, [r7, #24]
 800b44c:	4013      	ands	r3, r2
 800b44e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	691a      	ldr	r2, [r3, #16]
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	fa02 f303 	lsl.w	r3, r2, r3
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	4313      	orrs	r3, r2
 800b464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	08da      	lsrs	r2, r3, #3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3208      	adds	r2, #8
 800b46e:	69b9      	ldr	r1, [r7, #24]
 800b470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	2203      	movs	r2, #3
 800b480:	fa02 f303 	lsl.w	r3, r2, r3
 800b484:	43db      	mvns	r3, r3
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	4013      	ands	r3, r2
 800b48a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	f003 0203 	and.w	r2, r3, #3
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	fa02 f303 	lsl.w	r3, r2, r3
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 80b4 	beq.w	800b61e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	4b60      	ldr	r3, [pc, #384]	@ (800b63c <HAL_GPIO_Init+0x30c>)
 800b4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4be:	4a5f      	ldr	r2, [pc, #380]	@ (800b63c <HAL_GPIO_Init+0x30c>)
 800b4c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b4c4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4c6:	4b5d      	ldr	r3, [pc, #372]	@ (800b63c <HAL_GPIO_Init+0x30c>)
 800b4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b4d2:	4a5b      	ldr	r2, [pc, #364]	@ (800b640 <HAL_GPIO_Init+0x310>)
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	089b      	lsrs	r3, r3, #2
 800b4d8:	3302      	adds	r3, #2
 800b4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	220f      	movs	r2, #15
 800b4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ee:	43db      	mvns	r3, r3
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a52      	ldr	r2, [pc, #328]	@ (800b644 <HAL_GPIO_Init+0x314>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d02b      	beq.n	800b556 <HAL_GPIO_Init+0x226>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a51      	ldr	r2, [pc, #324]	@ (800b648 <HAL_GPIO_Init+0x318>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d025      	beq.n	800b552 <HAL_GPIO_Init+0x222>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a50      	ldr	r2, [pc, #320]	@ (800b64c <HAL_GPIO_Init+0x31c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d01f      	beq.n	800b54e <HAL_GPIO_Init+0x21e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a4f      	ldr	r2, [pc, #316]	@ (800b650 <HAL_GPIO_Init+0x320>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d019      	beq.n	800b54a <HAL_GPIO_Init+0x21a>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a4e      	ldr	r2, [pc, #312]	@ (800b654 <HAL_GPIO_Init+0x324>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d013      	beq.n	800b546 <HAL_GPIO_Init+0x216>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a4d      	ldr	r2, [pc, #308]	@ (800b658 <HAL_GPIO_Init+0x328>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d00d      	beq.n	800b542 <HAL_GPIO_Init+0x212>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a4c      	ldr	r2, [pc, #304]	@ (800b65c <HAL_GPIO_Init+0x32c>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d007      	beq.n	800b53e <HAL_GPIO_Init+0x20e>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a4b      	ldr	r2, [pc, #300]	@ (800b660 <HAL_GPIO_Init+0x330>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d101      	bne.n	800b53a <HAL_GPIO_Init+0x20a>
 800b536:	2307      	movs	r3, #7
 800b538:	e00e      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b53a:	2308      	movs	r3, #8
 800b53c:	e00c      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b53e:	2306      	movs	r3, #6
 800b540:	e00a      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b542:	2305      	movs	r3, #5
 800b544:	e008      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b546:	2304      	movs	r3, #4
 800b548:	e006      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b54a:	2303      	movs	r3, #3
 800b54c:	e004      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b54e:	2302      	movs	r3, #2
 800b550:	e002      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b552:	2301      	movs	r3, #1
 800b554:	e000      	b.n	800b558 <HAL_GPIO_Init+0x228>
 800b556:	2300      	movs	r3, #0
 800b558:	69fa      	ldr	r2, [r7, #28]
 800b55a:	f002 0203 	and.w	r2, r2, #3
 800b55e:	0092      	lsls	r2, r2, #2
 800b560:	4093      	lsls	r3, r2
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	4313      	orrs	r3, r2
 800b566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b568:	4935      	ldr	r1, [pc, #212]	@ (800b640 <HAL_GPIO_Init+0x310>)
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	089b      	lsrs	r3, r3, #2
 800b56e:	3302      	adds	r3, #2
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b576:	4b3b      	ldr	r3, [pc, #236]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	43db      	mvns	r3, r3
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	4013      	ands	r3, r2
 800b584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	4313      	orrs	r3, r2
 800b598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b59a:	4a32      	ldr	r2, [pc, #200]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b5a0:	4b30      	ldr	r3, [pc, #192]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	43db      	mvns	r3, r3
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b5c4:	4a27      	ldr	r2, [pc, #156]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b5ca:	4b26      	ldr	r3, [pc, #152]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	43db      	mvns	r3, r3
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b5ee:	4a1d      	ldr	r2, [pc, #116]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b5f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	4013      	ands	r3, r2
 800b602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b610:	69ba      	ldr	r2, [r7, #24]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b618:	4a12      	ldr	r2, [pc, #72]	@ (800b664 <HAL_GPIO_Init+0x334>)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	3301      	adds	r3, #1
 800b622:	61fb      	str	r3, [r7, #28]
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	2b0f      	cmp	r3, #15
 800b628:	f67f ae90 	bls.w	800b34c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
 800b630:	3724      	adds	r7, #36	@ 0x24
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	40023800 	.word	0x40023800
 800b640:	40013800 	.word	0x40013800
 800b644:	40020000 	.word	0x40020000
 800b648:	40020400 	.word	0x40020400
 800b64c:	40020800 	.word	0x40020800
 800b650:	40020c00 	.word	0x40020c00
 800b654:	40021000 	.word	0x40021000
 800b658:	40021400 	.word	0x40021400
 800b65c:	40021800 	.word	0x40021800
 800b660:	40021c00 	.word	0x40021c00
 800b664:	40013c00 	.word	0x40013c00

0800b668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	691a      	ldr	r2, [r3, #16]
 800b678:	887b      	ldrh	r3, [r7, #2]
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b680:	2301      	movs	r3, #1
 800b682:	73fb      	strb	r3, [r7, #15]
 800b684:	e001      	b.n	800b68a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	807b      	strh	r3, [r7, #2]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b6a8:	787b      	ldrb	r3, [r7, #1]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b6ae:	887a      	ldrh	r2, [r7, #2]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b6b4:	e003      	b.n	800b6be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b6b6:	887b      	ldrh	r3, [r7, #2]
 800b6b8:	041a      	lsls	r2, r3, #16
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	619a      	str	r2, [r3, #24]
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b085      	sub	sp, #20
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b6dc:	887a      	ldrh	r2, [r7, #2]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	041a      	lsls	r2, r3, #16
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	43d9      	mvns	r1, r3
 800b6e8:	887b      	ldrh	r3, [r7, #2]
 800b6ea:	400b      	ands	r3, r1
 800b6ec:	431a      	orrs	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	619a      	str	r2, [r3, #24]
}
 800b6f2:	bf00      	nop
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
	...

0800b700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e12b      	b.n	800b96a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7fe f81e 	bl	8009768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2224      	movs	r2, #36	@ 0x24
 800b730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0201 	bic.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b752:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b762:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b764:	f001 fd24 	bl	800d1b0 <HAL_RCC_GetPCLK1Freq>
 800b768:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	4a81      	ldr	r2, [pc, #516]	@ (800b974 <HAL_I2C_Init+0x274>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d807      	bhi.n	800b784 <HAL_I2C_Init+0x84>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a80      	ldr	r2, [pc, #512]	@ (800b978 <HAL_I2C_Init+0x278>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	bf94      	ite	ls
 800b77c:	2301      	movls	r3, #1
 800b77e:	2300      	movhi	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	e006      	b.n	800b792 <HAL_I2C_Init+0x92>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4a7d      	ldr	r2, [pc, #500]	@ (800b97c <HAL_I2C_Init+0x27c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	bf94      	ite	ls
 800b78c:	2301      	movls	r3, #1
 800b78e:	2300      	movhi	r3, #0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e0e7      	b.n	800b96a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	4a78      	ldr	r2, [pc, #480]	@ (800b980 <HAL_I2C_Init+0x280>)
 800b79e:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a2:	0c9b      	lsrs	r3, r3, #18
 800b7a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	4a6a      	ldr	r2, [pc, #424]	@ (800b974 <HAL_I2C_Init+0x274>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d802      	bhi.n	800b7d4 <HAL_I2C_Init+0xd4>
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	e009      	b.n	800b7e8 <HAL_I2C_Init+0xe8>
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7da:	fb02 f303 	mul.w	r3, r2, r3
 800b7de:	4a69      	ldr	r2, [pc, #420]	@ (800b984 <HAL_I2C_Init+0x284>)
 800b7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e4:	099b      	lsrs	r3, r3, #6
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	6812      	ldr	r2, [r2, #0]
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b7fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	495c      	ldr	r1, [pc, #368]	@ (800b974 <HAL_I2C_Init+0x274>)
 800b804:	428b      	cmp	r3, r1
 800b806:	d819      	bhi.n	800b83c <HAL_I2C_Init+0x13c>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	1e59      	subs	r1, r3, #1
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	fbb1 f3f3 	udiv	r3, r1, r3
 800b816:	1c59      	adds	r1, r3, #1
 800b818:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b81c:	400b      	ands	r3, r1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00a      	beq.n	800b838 <HAL_I2C_Init+0x138>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	1e59      	subs	r1, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b830:	3301      	adds	r3, #1
 800b832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b836:	e051      	b.n	800b8dc <HAL_I2C_Init+0x1dc>
 800b838:	2304      	movs	r3, #4
 800b83a:	e04f      	b.n	800b8dc <HAL_I2C_Init+0x1dc>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d111      	bne.n	800b868 <HAL_I2C_Init+0x168>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	1e58      	subs	r0, r3, #1
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6859      	ldr	r1, [r3, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	440b      	add	r3, r1
 800b852:	fbb0 f3f3 	udiv	r3, r0, r3
 800b856:	3301      	adds	r3, #1
 800b858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	bf0c      	ite	eq
 800b860:	2301      	moveq	r3, #1
 800b862:	2300      	movne	r3, #0
 800b864:	b2db      	uxtb	r3, r3
 800b866:	e012      	b.n	800b88e <HAL_I2C_Init+0x18e>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	1e58      	subs	r0, r3, #1
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6859      	ldr	r1, [r3, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	440b      	add	r3, r1
 800b876:	0099      	lsls	r1, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b87e:	3301      	adds	r3, #1
 800b880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b884:	2b00      	cmp	r3, #0
 800b886:	bf0c      	ite	eq
 800b888:	2301      	moveq	r3, #1
 800b88a:	2300      	movne	r3, #0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <HAL_I2C_Init+0x196>
 800b892:	2301      	movs	r3, #1
 800b894:	e022      	b.n	800b8dc <HAL_I2C_Init+0x1dc>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10e      	bne.n	800b8bc <HAL_I2C_Init+0x1bc>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	1e58      	subs	r0, r3, #1
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6859      	ldr	r1, [r3, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	440b      	add	r3, r1
 800b8ac:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8ba:	e00f      	b.n	800b8dc <HAL_I2C_Init+0x1dc>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	1e58      	subs	r0, r3, #1
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6859      	ldr	r1, [r3, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	440b      	add	r3, r1
 800b8ca:	0099      	lsls	r1, r3, #2
 800b8cc:	440b      	add	r3, r1
 800b8ce:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	6809      	ldr	r1, [r1, #0]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	69da      	ldr	r2, [r3, #28]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	431a      	orrs	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	430a      	orrs	r2, r1
 800b8fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b90a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	6911      	ldr	r1, [r2, #16]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	68d2      	ldr	r2, [r2, #12]
 800b916:	4311      	orrs	r1, r2
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6812      	ldr	r2, [r2, #0]
 800b91c:	430b      	orrs	r3, r1
 800b91e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	695a      	ldr	r2, [r3, #20]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	431a      	orrs	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	430a      	orrs	r2, r1
 800b93a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0201 	orr.w	r2, r2, #1
 800b94a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	000186a0 	.word	0x000186a0
 800b978:	001e847f 	.word	0x001e847f
 800b97c:	003d08ff 	.word	0x003d08ff
 800b980:	431bde83 	.word	0x431bde83
 800b984:	10624dd3 	.word	0x10624dd3

0800b988 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af02      	add	r7, sp, #8
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	607a      	str	r2, [r7, #4]
 800b992:	461a      	mov	r2, r3
 800b994:	460b      	mov	r3, r1
 800b996:	817b      	strh	r3, [r7, #10]
 800b998:	4613      	mov	r3, r2
 800b99a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b99c:	f7fe fcbc 	bl	800a318 <HAL_GetTick>
 800b9a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	f040 80e0 	bne.w	800bb70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	2319      	movs	r3, #25
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4970      	ldr	r1, [pc, #448]	@ (800bb7c <HAL_I2C_Master_Transmit+0x1f4>)
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 fd92 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e0d3      	b.n	800bb72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_I2C_Master_Transmit+0x50>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e0cc      	b.n	800bb72 <HAL_I2C_Master_Transmit+0x1ea>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d007      	beq.n	800b9fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f042 0201 	orr.w	r2, r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2221      	movs	r2, #33	@ 0x21
 800ba12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2210      	movs	r2, #16
 800ba1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	893a      	ldrh	r2, [r7, #8]
 800ba2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4a50      	ldr	r2, [pc, #320]	@ (800bb80 <HAL_I2C_Master_Transmit+0x1f8>)
 800ba3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ba40:	8979      	ldrh	r1, [r7, #10]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	6a3a      	ldr	r2, [r7, #32]
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f000 fbfc 	bl	800c244 <I2C_MasterRequestWrite>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e08d      	b.n	800bb72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba56:	2300      	movs	r3, #0
 800ba58:	613b      	str	r3, [r7, #16]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	613b      	str	r3, [r7, #16]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	613b      	str	r3, [r7, #16]
 800ba6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ba6c:	e066      	b.n	800bb3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	6a39      	ldr	r1, [r7, #32]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f000 fe50 	bl	800c718 <I2C_WaitOnTXEFlagUntilTimeout>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00d      	beq.n	800ba9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d107      	bne.n	800ba96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e06b      	b.n	800bb72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba9e:	781a      	ldrb	r2, [r3, #0]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	3b01      	subs	r3, #1
 800bab8:	b29a      	uxth	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d11b      	bne.n	800bb10 <HAL_I2C_Master_Transmit+0x188>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800badc:	2b00      	cmp	r3, #0
 800bade:	d017      	beq.n	800bb10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae4:	781a      	ldrb	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	6a39      	ldr	r1, [r7, #32]
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 fe47 	bl	800c7a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00d      	beq.n	800bb3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d107      	bne.n	800bb38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e01a      	b.n	800bb72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d194      	bne.n	800ba6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e000      	b.n	800bb72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bb70:	2302      	movs	r3, #2
  }
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	00100002 	.word	0x00100002
 800bb80:	ffff0000 	.word	0xffff0000

0800bb84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08c      	sub	sp, #48	@ 0x30
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	460b      	mov	r3, r1
 800bb92:	817b      	strh	r3, [r7, #10]
 800bb94:	4613      	mov	r3, r2
 800bb96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bb98:	f7fe fbbe 	bl	800a318 <HAL_GetTick>
 800bb9c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b20      	cmp	r3, #32
 800bba8:	f040 8217 	bne.w	800bfda <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	2319      	movs	r3, #25
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	497c      	ldr	r1, [pc, #496]	@ (800bda8 <HAL_I2C_Master_Receive+0x224>)
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fc94 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800bbc2:	2302      	movs	r3, #2
 800bbc4:	e20a      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d101      	bne.n	800bbd4 <HAL_I2C_Master_Receive+0x50>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e203      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d007      	beq.n	800bbfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f042 0201 	orr.w	r2, r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bc08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2222      	movs	r2, #34	@ 0x22
 800bc0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2210      	movs	r2, #16
 800bc16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	893a      	ldrh	r2, [r7, #8]
 800bc2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4a5c      	ldr	r2, [pc, #368]	@ (800bdac <HAL_I2C_Master_Receive+0x228>)
 800bc3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bc3c:	8979      	ldrh	r1, [r7, #10]
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 fb80 	bl	800c348 <I2C_MasterRequestRead>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e1c4      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d113      	bne.n	800bc82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	623b      	str	r3, [r7, #32]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	623b      	str	r3, [r7, #32]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	623b      	str	r3, [r7, #32]
 800bc6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	e198      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d11b      	bne.n	800bcc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	61fb      	str	r3, [r7, #28]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	e178      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d11b      	bne.n	800bd02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bcea:	2300      	movs	r3, #0
 800bcec:	61bb      	str	r3, [r7, #24]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	e158      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	617b      	str	r3, [r7, #20]
 800bd26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bd28:	e144      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	f200 80f1 	bhi.w	800bf16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d123      	bne.n	800bd84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 fd79 	bl	800c838 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e145      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	691a      	ldr	r2, [r3, #16]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bd82:	e117      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d14e      	bne.n	800be2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	2200      	movs	r2, #0
 800bd94:	4906      	ldr	r1, [pc, #24]	@ (800bdb0 <HAL_I2C_Master_Receive+0x22c>)
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 fba4 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d008      	beq.n	800bdb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e11a      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
 800bda6:	bf00      	nop
 800bda8:	00100002 	.word	0x00100002
 800bdac:	ffff0000 	.word	0xffff0000
 800bdb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	691a      	ldr	r2, [r3, #16]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdce:	b2d2      	uxtb	r2, r2
 800bdd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bde0:	3b01      	subs	r3, #1
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	691a      	ldr	r2, [r3, #16]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be12:	3b01      	subs	r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be1e:	b29b      	uxth	r3, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	b29a      	uxth	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800be28:	e0c4      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800be2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	2200      	movs	r2, #0
 800be32:	496c      	ldr	r1, [pc, #432]	@ (800bfe4 <HAL_I2C_Master_Receive+0x460>)
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 fb55 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e0cb      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	691a      	ldr	r2, [r3, #16]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be70:	3b01      	subs	r3, #1
 800be72:	b29a      	uxth	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	b29a      	uxth	r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	2200      	movs	r2, #0
 800be8e:	4955      	ldr	r1, [pc, #340]	@ (800bfe4 <HAL_I2C_Master_Receive+0x460>)
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 fb27 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e09d      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800beae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	691a      	ldr	r2, [r3, #16]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800becc:	3b01      	subs	r3, #1
 800bece:	b29a      	uxth	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bed8:	b29b      	uxth	r3, r3
 800beda:	3b01      	subs	r3, #1
 800bedc:	b29a      	uxth	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	691a      	ldr	r2, [r3, #16]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800befe:	3b01      	subs	r3, #1
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bf14:	e04e      	b.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 fc8c 	bl	800c838 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e058      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	691a      	ldr	r2, [r3, #16]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf34:	b2d2      	uxtb	r2, r2
 800bf36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf46:	3b01      	subs	r3, #1
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	3b01      	subs	r3, #1
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d124      	bne.n	800bfb4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d107      	bne.n	800bf82 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf80:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	691a      	ldr	r2, [r3, #16]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf8c:	b2d2      	uxtb	r2, r2
 800bf8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	3b01      	subs	r3, #1
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f47f aeb6 	bne.w	800bd2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e000      	b.n	800bfdc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800bfda:	2302      	movs	r3, #2
  }
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3728      	adds	r7, #40	@ 0x28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	00010004 	.word	0x00010004

0800bfe8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	@ 0x28
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	607a      	str	r2, [r7, #4]
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	460b      	mov	r3, r1
 800bff6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800bff8:	f7fe f98e 	bl	800a318 <HAL_GetTick>
 800bffc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800bffe:	2300      	movs	r3, #0
 800c000:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b20      	cmp	r3, #32
 800c00c:	f040 8111 	bne.w	800c232 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	2319      	movs	r3, #25
 800c016:	2201      	movs	r2, #1
 800c018:	4988      	ldr	r1, [pc, #544]	@ (800c23c <HAL_I2C_IsDeviceReady+0x254>)
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 fa62 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800c026:	2302      	movs	r3, #2
 800c028:	e104      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c030:	2b01      	cmp	r3, #1
 800c032:	d101      	bne.n	800c038 <HAL_I2C_IsDeviceReady+0x50>
 800c034:	2302      	movs	r3, #2
 800c036:	e0fd      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d007      	beq.n	800c05e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f042 0201 	orr.w	r2, r2, #1
 800c05c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c06c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2224      	movs	r2, #36	@ 0x24
 800c072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4a70      	ldr	r2, [pc, #448]	@ (800c240 <HAL_I2C_IsDeviceReady+0x258>)
 800c080:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c090:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2200      	movs	r2, #0
 800c09a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 fa20 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00d      	beq.n	800c0c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0b8:	d103      	bne.n	800c0c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e0b6      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c0c6:	897b      	ldrh	r3, [r7, #10]
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c0d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800c0d6:	f7fe f91f 	bl	800a318 <HAL_GetTick>
 800c0da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	f003 0302 	and.w	r3, r3, #2
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	bf0c      	ite	eq
 800c0ea:	2301      	moveq	r3, #1
 800c0ec:	2300      	movne	r3, #0
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c100:	bf0c      	ite	eq
 800c102:	2301      	moveq	r3, #1
 800c104:	2300      	movne	r3, #0
 800c106:	b2db      	uxtb	r3, r3
 800c108:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800c10a:	e025      	b.n	800c158 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c10c:	f7fe f904 	bl	800a318 <HAL_GetTick>
 800c110:	4602      	mov	r2, r0
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d302      	bcc.n	800c122 <HAL_I2C_IsDeviceReady+0x13a>
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d103      	bne.n	800c12a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	22a0      	movs	r2, #160	@ 0xa0
 800c126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	f003 0302 	and.w	r3, r3, #2
 800c134:	2b02      	cmp	r3, #2
 800c136:	bf0c      	ite	eq
 800c138:	2301      	moveq	r3, #1
 800c13a:	2300      	movne	r3, #0
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c14a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c14e:	bf0c      	ite	eq
 800c150:	2301      	moveq	r3, #1
 800c152:	2300      	movne	r3, #0
 800c154:	b2db      	uxtb	r3, r3
 800c156:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2ba0      	cmp	r3, #160	@ 0xa0
 800c162:	d005      	beq.n	800c170 <HAL_I2C_IsDeviceReady+0x188>
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <HAL_I2C_IsDeviceReady+0x188>
 800c16a:	7dbb      	ldrb	r3, [r7, #22]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d0cd      	beq.n	800c10c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2220      	movs	r2, #32
 800c174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	2b02      	cmp	r3, #2
 800c184:	d129      	bne.n	800c1da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c194:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c196:	2300      	movs	r3, #0
 800c198:	613b      	str	r3, [r7, #16]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	613b      	str	r3, [r7, #16]
 800c1aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	2319      	movs	r3, #25
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4921      	ldr	r1, [pc, #132]	@ (800c23c <HAL_I2C_IsDeviceReady+0x254>)
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 f994 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e036      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e02c      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	2319      	movs	r3, #25
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	490f      	ldr	r1, [pc, #60]	@ (800c23c <HAL_I2C_IsDeviceReady+0x254>)
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 f970 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e012      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	3301      	adds	r3, #1
 800c212:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	f4ff af32 	bcc.w	800c082 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2220      	movs	r2, #32
 800c222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e000      	b.n	800c234 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800c232:	2302      	movs	r3, #2
  }
}
 800c234:	4618      	mov	r0, r3
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	00100002 	.word	0x00100002
 800c240:	ffff0000 	.word	0xffff0000

0800c244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af02      	add	r7, sp, #8
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	607a      	str	r2, [r7, #4]
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	460b      	mov	r3, r1
 800c252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d006      	beq.n	800c26e <I2C_MasterRequestWrite+0x2a>
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d003      	beq.n	800c26e <I2C_MasterRequestWrite+0x2a>
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c26c:	d108      	bne.n	800c280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	e00b      	b.n	800c298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c284:	2b12      	cmp	r3, #18
 800c286:	d107      	bne.n	800c298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f91d 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00d      	beq.n	800c2cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2be:	d103      	bne.n	800c2c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e035      	b.n	800c338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2d4:	d108      	bne.n	800c2e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c2d6:	897b      	ldrh	r3, [r7, #10]
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c2e4:	611a      	str	r2, [r3, #16]
 800c2e6:	e01b      	b.n	800c320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c2e8:	897b      	ldrh	r3, [r7, #10]
 800c2ea:	11db      	asrs	r3, r3, #7
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 0306 	and.w	r3, r3, #6
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f063 030f 	orn	r3, r3, #15
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	490e      	ldr	r1, [pc, #56]	@ (800c340 <I2C_MasterRequestWrite+0xfc>)
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 f966 	bl	800c5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e010      	b.n	800c338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c316:	897b      	ldrh	r3, [r7, #10]
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	4907      	ldr	r1, [pc, #28]	@ (800c344 <I2C_MasterRequestWrite+0x100>)
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 f956 	bl	800c5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e000      	b.n	800c338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	00010008 	.word	0x00010008
 800c344:	00010002 	.word	0x00010002

0800c348 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	460b      	mov	r3, r1
 800c356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c36c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2b08      	cmp	r3, #8
 800c372:	d006      	beq.n	800c382 <I2C_MasterRequestRead+0x3a>
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d003      	beq.n	800c382 <I2C_MasterRequestRead+0x3a>
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c380:	d108      	bne.n	800c394 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c390:	601a      	str	r2, [r3, #0]
 800c392:	e00b      	b.n	800c3ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c398:	2b11      	cmp	r3, #17
 800c39a:	d107      	bne.n	800c3ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f893 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00d      	beq.n	800c3e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3d2:	d103      	bne.n	800c3dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e079      	b.n	800c4d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3e8:	d108      	bne.n	800c3fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c3ea:	897b      	ldrh	r3, [r7, #10]
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	f043 0301 	orr.w	r3, r3, #1
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	611a      	str	r2, [r3, #16]
 800c3fa:	e05f      	b.n	800c4bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c3fc:	897b      	ldrh	r3, [r7, #10]
 800c3fe:	11db      	asrs	r3, r3, #7
 800c400:	b2db      	uxtb	r3, r3
 800c402:	f003 0306 	and.w	r3, r3, #6
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f063 030f 	orn	r3, r3, #15
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4930      	ldr	r1, [pc, #192]	@ (800c4dc <I2C_MasterRequestRead+0x194>)
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f000 f8dc 	bl	800c5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e054      	b.n	800c4d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c42a:	897b      	ldrh	r3, [r7, #10]
 800c42c:	b2da      	uxtb	r2, r3
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	4929      	ldr	r1, [pc, #164]	@ (800c4e0 <I2C_MasterRequestRead+0x198>)
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f000 f8cc 	bl	800c5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	e044      	b.n	800c4d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c44a:	2300      	movs	r3, #0
 800c44c:	613b      	str	r3, [r7, #16]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	613b      	str	r3, [r7, #16]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	613b      	str	r3, [r7, #16]
 800c45e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c46e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	f000 f831 	bl	800c4e4 <I2C_WaitOnFlagUntilTimeout>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00d      	beq.n	800c4a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c496:	d103      	bne.n	800c4a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c49e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e017      	b.n	800c4d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c4a4:	897b      	ldrh	r3, [r7, #10]
 800c4a6:	11db      	asrs	r3, r3, #7
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	f003 0306 	and.w	r3, r3, #6
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	f063 030e 	orn	r3, r3, #14
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	4907      	ldr	r1, [pc, #28]	@ (800c4e0 <I2C_MasterRequestRead+0x198>)
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f000 f888 	bl	800c5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3718      	adds	r7, #24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	00010008 	.word	0x00010008
 800c4e0:	00010002 	.word	0x00010002

0800c4e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4f4:	e048      	b.n	800c588 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4fc:	d044      	beq.n	800c588 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4fe:	f7fd ff0b 	bl	800a318 <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d302      	bcc.n	800c514 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d139      	bne.n	800c588 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	0c1b      	lsrs	r3, r3, #16
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d10d      	bne.n	800c53a <I2C_WaitOnFlagUntilTimeout+0x56>
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	43da      	mvns	r2, r3
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4013      	ands	r3, r2
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bf0c      	ite	eq
 800c530:	2301      	moveq	r3, #1
 800c532:	2300      	movne	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	461a      	mov	r2, r3
 800c538:	e00c      	b.n	800c554 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	43da      	mvns	r2, r3
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	4013      	ands	r3, r2
 800c546:	b29b      	uxth	r3, r3
 800c548:	2b00      	cmp	r3, #0
 800c54a:	bf0c      	ite	eq
 800c54c:	2301      	moveq	r3, #1
 800c54e:	2300      	movne	r3, #0
 800c550:	b2db      	uxtb	r3, r3
 800c552:	461a      	mov	r2, r3
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	429a      	cmp	r2, r3
 800c558:	d116      	bne.n	800c588 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2220      	movs	r2, #32
 800c564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c574:	f043 0220 	orr.w	r2, r3, #32
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e023      	b.n	800c5d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	0c1b      	lsrs	r3, r3, #16
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d10d      	bne.n	800c5ae <I2C_WaitOnFlagUntilTimeout+0xca>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	43da      	mvns	r2, r3
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	4013      	ands	r3, r2
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	bf0c      	ite	eq
 800c5a4:	2301      	moveq	r3, #1
 800c5a6:	2300      	movne	r3, #0
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	e00c      	b.n	800c5c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	699b      	ldr	r3, [r3, #24]
 800c5b4:	43da      	mvns	r2, r3
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bf0c      	ite	eq
 800c5c0:	2301      	moveq	r3, #1
 800c5c2:	2300      	movne	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d093      	beq.n	800c4f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c5e6:	e071      	b.n	800c6cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5f6:	d123      	bne.n	800c640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c606:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c610:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c62c:	f043 0204 	orr.w	r2, r3, #4
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e067      	b.n	800c710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c646:	d041      	beq.n	800c6cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c648:	f7fd fe66 	bl	800a318 <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d302      	bcc.n	800c65e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d136      	bne.n	800c6cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	0c1b      	lsrs	r3, r3, #16
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b01      	cmp	r3, #1
 800c666:	d10c      	bne.n	800c682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	43da      	mvns	r2, r3
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	4013      	ands	r3, r2
 800c674:	b29b      	uxth	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	bf14      	ite	ne
 800c67a:	2301      	movne	r3, #1
 800c67c:	2300      	moveq	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	e00b      	b.n	800c69a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	43da      	mvns	r2, r3
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	4013      	ands	r3, r2
 800c68e:	b29b      	uxth	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	bf14      	ite	ne
 800c694:	2301      	movne	r3, #1
 800c696:	2300      	moveq	r3, #0
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d016      	beq.n	800c6cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6b8:	f043 0220 	orr.w	r2, r3, #32
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e021      	b.n	800c710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	0c1b      	lsrs	r3, r3, #16
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d10c      	bne.n	800c6f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	695b      	ldr	r3, [r3, #20]
 800c6dc:	43da      	mvns	r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bf14      	ite	ne
 800c6e8:	2301      	movne	r3, #1
 800c6ea:	2300      	moveq	r3, #0
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	e00b      	b.n	800c708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	43da      	mvns	r2, r3
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bf14      	ite	ne
 800c702:	2301      	movne	r3, #1
 800c704:	2300      	moveq	r3, #0
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f47f af6d 	bne.w	800c5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c724:	e034      	b.n	800c790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 f8e3 	bl	800c8f2 <I2C_IsAcknowledgeFailed>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d001      	beq.n	800c736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e034      	b.n	800c7a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73c:	d028      	beq.n	800c790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c73e:	f7fd fdeb 	bl	800a318 <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d302      	bcc.n	800c754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d11d      	bne.n	800c790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c75e:	2b80      	cmp	r3, #128	@ 0x80
 800c760:	d016      	beq.n	800c790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2220      	movs	r2, #32
 800c76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77c:	f043 0220 	orr.w	r2, r3, #32
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e007      	b.n	800c7a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c79a:	2b80      	cmp	r3, #128	@ 0x80
 800c79c:	d1c3      	bne.n	800c726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c7b4:	e034      	b.n	800c820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 f89b 	bl	800c8f2 <I2C_IsAcknowledgeFailed>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e034      	b.n	800c830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7cc:	d028      	beq.n	800c820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7ce:	f7fd fda3 	bl	800a318 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d302      	bcc.n	800c7e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d11d      	bne.n	800c820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	f003 0304 	and.w	r3, r3, #4
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d016      	beq.n	800c820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2220      	movs	r2, #32
 800c7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c80c:	f043 0220 	orr.w	r2, r3, #32
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e007      	b.n	800c830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b04      	cmp	r3, #4
 800c82c:	d1c3      	bne.n	800c7b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c844:	e049      	b.n	800c8da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	f003 0310 	and.w	r3, r3, #16
 800c850:	2b10      	cmp	r3, #16
 800c852:	d119      	bne.n	800c888 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f06f 0210 	mvn.w	r2, #16
 800c85c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2220      	movs	r2, #32
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e030      	b.n	800c8ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c888:	f7fd fd46 	bl	800a318 <HAL_GetTick>
 800c88c:	4602      	mov	r2, r0
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	429a      	cmp	r2, r3
 800c896:	d302      	bcc.n	800c89e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d11d      	bne.n	800c8da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a8:	2b40      	cmp	r3, #64	@ 0x40
 800c8aa:	d016      	beq.n	800c8da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2220      	movs	r2, #32
 800c8b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8c6:	f043 0220 	orr.w	r2, r3, #32
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e007      	b.n	800c8ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e4:	2b40      	cmp	r3, #64	@ 0x40
 800c8e6:	d1ae      	bne.n	800c846 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b083      	sub	sp, #12
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c908:	d11b      	bne.n	800c942 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c912:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2220      	movs	r2, #32
 800c91e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c92e:	f043 0204 	orr.w	r2, r3, #4
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e000      	b.n	800c944 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e267      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d075      	beq.n	800ca5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c96e:	4b88      	ldr	r3, [pc, #544]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	f003 030c 	and.w	r3, r3, #12
 800c976:	2b04      	cmp	r3, #4
 800c978:	d00c      	beq.n	800c994 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c97a:	4b85      	ldr	r3, [pc, #532]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c982:	2b08      	cmp	r3, #8
 800c984:	d112      	bne.n	800c9ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c986:	4b82      	ldr	r3, [pc, #520]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c98e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c992:	d10b      	bne.n	800c9ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c994:	4b7e      	ldr	r3, [pc, #504]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d05b      	beq.n	800ca58 <HAL_RCC_OscConfig+0x108>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d157      	bne.n	800ca58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e242      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b4:	d106      	bne.n	800c9c4 <HAL_RCC_OscConfig+0x74>
 800c9b6:	4b76      	ldr	r3, [pc, #472]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a75      	ldr	r2, [pc, #468]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	e01d      	b.n	800ca00 <HAL_RCC_OscConfig+0xb0>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9cc:	d10c      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x98>
 800c9ce:	4b70      	ldr	r3, [pc, #448]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a6f      	ldr	r2, [pc, #444]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	4b6d      	ldr	r3, [pc, #436]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a6c      	ldr	r2, [pc, #432]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	e00b      	b.n	800ca00 <HAL_RCC_OscConfig+0xb0>
 800c9e8:	4b69      	ldr	r3, [pc, #420]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a68      	ldr	r2, [pc, #416]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9f2:	6013      	str	r3, [r2, #0]
 800c9f4:	4b66      	ldr	r3, [pc, #408]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a65      	ldr	r2, [pc, #404]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800c9fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d013      	beq.n	800ca30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca08:	f7fd fc86 	bl	800a318 <HAL_GetTick>
 800ca0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca0e:	e008      	b.n	800ca22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca10:	f7fd fc82 	bl	800a318 <HAL_GetTick>
 800ca14:	4602      	mov	r2, r0
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	2b64      	cmp	r3, #100	@ 0x64
 800ca1c:	d901      	bls.n	800ca22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e207      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca22:	4b5b      	ldr	r3, [pc, #364]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0f0      	beq.n	800ca10 <HAL_RCC_OscConfig+0xc0>
 800ca2e:	e014      	b.n	800ca5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca30:	f7fd fc72 	bl	800a318 <HAL_GetTick>
 800ca34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca36:	e008      	b.n	800ca4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca38:	f7fd fc6e 	bl	800a318 <HAL_GetTick>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	2b64      	cmp	r3, #100	@ 0x64
 800ca44:	d901      	bls.n	800ca4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e1f3      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca4a:	4b51      	ldr	r3, [pc, #324]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1f0      	bne.n	800ca38 <HAL_RCC_OscConfig+0xe8>
 800ca56:	e000      	b.n	800ca5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 0302 	and.w	r3, r3, #2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d063      	beq.n	800cb2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ca66:	4b4a      	ldr	r3, [pc, #296]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 030c 	and.w	r3, r3, #12
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00b      	beq.n	800ca8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca72:	4b47      	ldr	r3, [pc, #284]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d11c      	bne.n	800cab8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca7e:	4b44      	ldr	r3, [pc, #272]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d116      	bne.n	800cab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca8a:	4b41      	ldr	r3, [pc, #260]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 0302 	and.w	r3, r3, #2
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d005      	beq.n	800caa2 <HAL_RCC_OscConfig+0x152>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d001      	beq.n	800caa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e1c7      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caa2:	4b3b      	ldr	r3, [pc, #236]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4937      	ldr	r1, [pc, #220]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cab6:	e03a      	b.n	800cb2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d020      	beq.n	800cb02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cac0:	4b34      	ldr	r3, [pc, #208]	@ (800cb94 <HAL_RCC_OscConfig+0x244>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac6:	f7fd fc27 	bl	800a318 <HAL_GetTick>
 800caca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cacc:	e008      	b.n	800cae0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cace:	f7fd fc23 	bl	800a318 <HAL_GetTick>
 800cad2:	4602      	mov	r2, r0
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d901      	bls.n	800cae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cadc:	2303      	movs	r3, #3
 800cade:	e1a8      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cae0:	4b2b      	ldr	r3, [pc, #172]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0f0      	beq.n	800cace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caec:	4b28      	ldr	r3, [pc, #160]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	4925      	ldr	r1, [pc, #148]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800cafc:	4313      	orrs	r3, r2
 800cafe:	600b      	str	r3, [r1, #0]
 800cb00:	e015      	b.n	800cb2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb02:	4b24      	ldr	r3, [pc, #144]	@ (800cb94 <HAL_RCC_OscConfig+0x244>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb08:	f7fd fc06 	bl	800a318 <HAL_GetTick>
 800cb0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb0e:	e008      	b.n	800cb22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb10:	f7fd fc02 	bl	800a318 <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d901      	bls.n	800cb22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	e187      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb22:	4b1b      	ldr	r3, [pc, #108]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1f0      	bne.n	800cb10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d036      	beq.n	800cba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	695b      	ldr	r3, [r3, #20]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb42:	4b15      	ldr	r3, [pc, #84]	@ (800cb98 <HAL_RCC_OscConfig+0x248>)
 800cb44:	2201      	movs	r2, #1
 800cb46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb48:	f7fd fbe6 	bl	800a318 <HAL_GetTick>
 800cb4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb4e:	e008      	b.n	800cb62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb50:	f7fd fbe2 	bl	800a318 <HAL_GetTick>
 800cb54:	4602      	mov	r2, r0
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	1ad3      	subs	r3, r2, r3
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d901      	bls.n	800cb62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	e167      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb62:	4b0b      	ldr	r3, [pc, #44]	@ (800cb90 <HAL_RCC_OscConfig+0x240>)
 800cb64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb66:	f003 0302 	and.w	r3, r3, #2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0f0      	beq.n	800cb50 <HAL_RCC_OscConfig+0x200>
 800cb6e:	e01b      	b.n	800cba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb70:	4b09      	ldr	r3, [pc, #36]	@ (800cb98 <HAL_RCC_OscConfig+0x248>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb76:	f7fd fbcf 	bl	800a318 <HAL_GetTick>
 800cb7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb7c:	e00e      	b.n	800cb9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb7e:	f7fd fbcb 	bl	800a318 <HAL_GetTick>
 800cb82:	4602      	mov	r2, r0
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	1ad3      	subs	r3, r2, r3
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d907      	bls.n	800cb9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	e150      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
 800cb90:	40023800 	.word	0x40023800
 800cb94:	42470000 	.word	0x42470000
 800cb98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb9c:	4b88      	ldr	r3, [pc, #544]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cb9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cba0:	f003 0302 	and.w	r3, r3, #2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1ea      	bne.n	800cb7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 8097 	beq.w	800cce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbba:	4b81      	ldr	r3, [pc, #516]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10f      	bne.n	800cbe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60bb      	str	r3, [r7, #8]
 800cbca:	4b7d      	ldr	r3, [pc, #500]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbce:	4a7c      	ldr	r2, [pc, #496]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cbd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cbd4:	6413      	str	r3, [r2, #64]	@ 0x40
 800cbd6:	4b7a      	ldr	r3, [pc, #488]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbde:	60bb      	str	r3, [r7, #8]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbe6:	4b77      	ldr	r3, [pc, #476]	@ (800cdc4 <HAL_RCC_OscConfig+0x474>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d118      	bne.n	800cc24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cbf2:	4b74      	ldr	r3, [pc, #464]	@ (800cdc4 <HAL_RCC_OscConfig+0x474>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a73      	ldr	r2, [pc, #460]	@ (800cdc4 <HAL_RCC_OscConfig+0x474>)
 800cbf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbfe:	f7fd fb8b 	bl	800a318 <HAL_GetTick>
 800cc02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc04:	e008      	b.n	800cc18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc06:	f7fd fb87 	bl	800a318 <HAL_GetTick>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d901      	bls.n	800cc18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e10c      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc18:	4b6a      	ldr	r3, [pc, #424]	@ (800cdc4 <HAL_RCC_OscConfig+0x474>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0f0      	beq.n	800cc06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d106      	bne.n	800cc3a <HAL_RCC_OscConfig+0x2ea>
 800cc2c:	4b64      	ldr	r3, [pc, #400]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc30:	4a63      	ldr	r2, [pc, #396]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc32:	f043 0301 	orr.w	r3, r3, #1
 800cc36:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc38:	e01c      	b.n	800cc74 <HAL_RCC_OscConfig+0x324>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	2b05      	cmp	r3, #5
 800cc40:	d10c      	bne.n	800cc5c <HAL_RCC_OscConfig+0x30c>
 800cc42:	4b5f      	ldr	r3, [pc, #380]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc46:	4a5e      	ldr	r2, [pc, #376]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc48:	f043 0304 	orr.w	r3, r3, #4
 800cc4c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc4e:	4b5c      	ldr	r3, [pc, #368]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc52:	4a5b      	ldr	r2, [pc, #364]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc54:	f043 0301 	orr.w	r3, r3, #1
 800cc58:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc5a:	e00b      	b.n	800cc74 <HAL_RCC_OscConfig+0x324>
 800cc5c:	4b58      	ldr	r3, [pc, #352]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc60:	4a57      	ldr	r2, [pc, #348]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc62:	f023 0301 	bic.w	r3, r3, #1
 800cc66:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc68:	4b55      	ldr	r3, [pc, #340]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc6c:	4a54      	ldr	r2, [pc, #336]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc6e:	f023 0304 	bic.w	r3, r3, #4
 800cc72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d015      	beq.n	800cca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc7c:	f7fd fb4c 	bl	800a318 <HAL_GetTick>
 800cc80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc82:	e00a      	b.n	800cc9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc84:	f7fd fb48 	bl	800a318 <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d901      	bls.n	800cc9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e0cb      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc9a:	4b49      	ldr	r3, [pc, #292]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0ee      	beq.n	800cc84 <HAL_RCC_OscConfig+0x334>
 800cca6:	e014      	b.n	800ccd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cca8:	f7fd fb36 	bl	800a318 <HAL_GetTick>
 800ccac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ccae:	e00a      	b.n	800ccc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccb0:	f7fd fb32 	bl	800a318 <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d901      	bls.n	800ccc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e0b5      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ccc6:	4b3e      	ldr	r3, [pc, #248]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800ccc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccca:	f003 0302 	and.w	r3, r3, #2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1ee      	bne.n	800ccb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d105      	bne.n	800cce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ccd8:	4b39      	ldr	r3, [pc, #228]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800ccda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccdc:	4a38      	ldr	r2, [pc, #224]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800ccde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cce2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	699b      	ldr	r3, [r3, #24]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 80a1 	beq.w	800ce30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ccee:	4b34      	ldr	r3, [pc, #208]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f003 030c 	and.w	r3, r3, #12
 800ccf6:	2b08      	cmp	r3, #8
 800ccf8:	d05c      	beq.n	800cdb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	699b      	ldr	r3, [r3, #24]
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	d141      	bne.n	800cd86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd02:	4b31      	ldr	r3, [pc, #196]	@ (800cdc8 <HAL_RCC_OscConfig+0x478>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd08:	f7fd fb06 	bl	800a318 <HAL_GetTick>
 800cd0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd0e:	e008      	b.n	800cd22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd10:	f7fd fb02 	bl	800a318 <HAL_GetTick>
 800cd14:	4602      	mov	r2, r0
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d901      	bls.n	800cd22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e087      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd22:	4b27      	ldr	r3, [pc, #156]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1f0      	bne.n	800cd10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	69da      	ldr	r2, [r3, #28]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	431a      	orrs	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd3c:	019b      	lsls	r3, r3, #6
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd44:	085b      	lsrs	r3, r3, #1
 800cd46:	3b01      	subs	r3, #1
 800cd48:	041b      	lsls	r3, r3, #16
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd50:	061b      	lsls	r3, r3, #24
 800cd52:	491b      	ldr	r1, [pc, #108]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cd54:	4313      	orrs	r3, r2
 800cd56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cd58:	4b1b      	ldr	r3, [pc, #108]	@ (800cdc8 <HAL_RCC_OscConfig+0x478>)
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd5e:	f7fd fadb 	bl	800a318 <HAL_GetTick>
 800cd62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd64:	e008      	b.n	800cd78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd66:	f7fd fad7 	bl	800a318 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d901      	bls.n	800cd78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e05c      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd78:	4b11      	ldr	r3, [pc, #68]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0f0      	beq.n	800cd66 <HAL_RCC_OscConfig+0x416>
 800cd84:	e054      	b.n	800ce30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd86:	4b10      	ldr	r3, [pc, #64]	@ (800cdc8 <HAL_RCC_OscConfig+0x478>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd8c:	f7fd fac4 	bl	800a318 <HAL_GetTick>
 800cd90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd92:	e008      	b.n	800cda6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd94:	f7fd fac0 	bl	800a318 <HAL_GetTick>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d901      	bls.n	800cda6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e045      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cda6:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <HAL_RCC_OscConfig+0x470>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1f0      	bne.n	800cd94 <HAL_RCC_OscConfig+0x444>
 800cdb2:	e03d      	b.n	800ce30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d107      	bne.n	800cdcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e038      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
 800cdc0:	40023800 	.word	0x40023800
 800cdc4:	40007000 	.word	0x40007000
 800cdc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cdcc:	4b1b      	ldr	r3, [pc, #108]	@ (800ce3c <HAL_RCC_OscConfig+0x4ec>)
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d028      	beq.n	800ce2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d121      	bne.n	800ce2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d11a      	bne.n	800ce2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ce02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d111      	bne.n	800ce2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce12:	085b      	lsrs	r3, r3, #1
 800ce14:	3b01      	subs	r3, #1
 800ce16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d107      	bne.n	800ce2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d001      	beq.n	800ce30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	40023800 	.word	0x40023800

0800ce40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e0cc      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ce54:	4b68      	ldr	r3, [pc, #416]	@ (800cff8 <HAL_RCC_ClockConfig+0x1b8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0307 	and.w	r3, r3, #7
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d90c      	bls.n	800ce7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce62:	4b65      	ldr	r3, [pc, #404]	@ (800cff8 <HAL_RCC_ClockConfig+0x1b8>)
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce6a:	4b63      	ldr	r3, [pc, #396]	@ (800cff8 <HAL_RCC_ClockConfig+0x1b8>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f003 0307 	and.w	r3, r3, #7
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d001      	beq.n	800ce7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e0b8      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d020      	beq.n	800ceca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d005      	beq.n	800cea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ce94:	4b59      	ldr	r3, [pc, #356]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	4a58      	ldr	r2, [pc, #352]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800ce9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ce9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0308 	and.w	r3, r3, #8
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d005      	beq.n	800ceb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ceac:	4b53      	ldr	r3, [pc, #332]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	4a52      	ldr	r2, [pc, #328]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800ceb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ceb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ceb8:	4b50      	ldr	r3, [pc, #320]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	494d      	ldr	r1, [pc, #308]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d044      	beq.n	800cf60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d107      	bne.n	800ceee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cede:	4b47      	ldr	r3, [pc, #284]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d119      	bne.n	800cf1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e07f      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d003      	beq.n	800cefe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d107      	bne.n	800cf0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cefe:	4b3f      	ldr	r3, [pc, #252]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d109      	bne.n	800cf1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e06f      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf0e:	4b3b      	ldr	r3, [pc, #236]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f003 0302 	and.w	r3, r3, #2
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e067      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cf1e:	4b37      	ldr	r3, [pc, #220]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f023 0203 	bic.w	r2, r3, #3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	4934      	ldr	r1, [pc, #208]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cf30:	f7fd f9f2 	bl	800a318 <HAL_GetTick>
 800cf34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf36:	e00a      	b.n	800cf4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf38:	f7fd f9ee 	bl	800a318 <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e04f      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf4e:	4b2b      	ldr	r3, [pc, #172]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 020c 	and.w	r2, r3, #12
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d1eb      	bne.n	800cf38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf60:	4b25      	ldr	r3, [pc, #148]	@ (800cff8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 0307 	and.w	r3, r3, #7
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d20c      	bcs.n	800cf88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf6e:	4b22      	ldr	r3, [pc, #136]	@ (800cff8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf76:	4b20      	ldr	r3, [pc, #128]	@ (800cff8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 0307 	and.w	r3, r3, #7
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d001      	beq.n	800cf88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e032      	b.n	800cfee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0304 	and.w	r3, r3, #4
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf94:	4b19      	ldr	r3, [pc, #100]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	4916      	ldr	r1, [pc, #88]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0308 	and.w	r3, r3, #8
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d009      	beq.n	800cfc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cfb2:	4b12      	ldr	r3, [pc, #72]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	490e      	ldr	r1, [pc, #56]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cfc6:	f000 f821 	bl	800d00c <HAL_RCC_GetSysClockFreq>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	4b0b      	ldr	r3, [pc, #44]	@ (800cffc <HAL_RCC_ClockConfig+0x1bc>)
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	091b      	lsrs	r3, r3, #4
 800cfd2:	f003 030f 	and.w	r3, r3, #15
 800cfd6:	490a      	ldr	r1, [pc, #40]	@ (800d000 <HAL_RCC_ClockConfig+0x1c0>)
 800cfd8:	5ccb      	ldrb	r3, [r1, r3]
 800cfda:	fa22 f303 	lsr.w	r3, r2, r3
 800cfde:	4a09      	ldr	r2, [pc, #36]	@ (800d004 <HAL_RCC_ClockConfig+0x1c4>)
 800cfe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800cfe2:	4b09      	ldr	r3, [pc, #36]	@ (800d008 <HAL_RCC_ClockConfig+0x1c8>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fc fda6 	bl	8009b38 <HAL_InitTick>

  return HAL_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	40023c00 	.word	0x40023c00
 800cffc:	40023800 	.word	0x40023800
 800d000:	0801686c 	.word	0x0801686c
 800d004:	200002f0 	.word	0x200002f0
 800d008:	200002f4 	.word	0x200002f4

0800d00c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d00c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d010:	b090      	sub	sp, #64	@ 0x40
 800d012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d014:	2300      	movs	r3, #0
 800d016:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800d018:	2300      	movs	r3, #0
 800d01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800d01c:	2300      	movs	r3, #0
 800d01e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800d020:	2300      	movs	r3, #0
 800d022:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d024:	4b59      	ldr	r3, [pc, #356]	@ (800d18c <HAL_RCC_GetSysClockFreq+0x180>)
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	f003 030c 	and.w	r3, r3, #12
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d00d      	beq.n	800d04c <HAL_RCC_GetSysClockFreq+0x40>
 800d030:	2b08      	cmp	r3, #8
 800d032:	f200 80a1 	bhi.w	800d178 <HAL_RCC_GetSysClockFreq+0x16c>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d002      	beq.n	800d040 <HAL_RCC_GetSysClockFreq+0x34>
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	d003      	beq.n	800d046 <HAL_RCC_GetSysClockFreq+0x3a>
 800d03e:	e09b      	b.n	800d178 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d040:	4b53      	ldr	r3, [pc, #332]	@ (800d190 <HAL_RCC_GetSysClockFreq+0x184>)
 800d042:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800d044:	e09b      	b.n	800d17e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d046:	4b53      	ldr	r3, [pc, #332]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x188>)
 800d048:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800d04a:	e098      	b.n	800d17e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d04c:	4b4f      	ldr	r3, [pc, #316]	@ (800d18c <HAL_RCC_GetSysClockFreq+0x180>)
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d056:	4b4d      	ldr	r3, [pc, #308]	@ (800d18c <HAL_RCC_GetSysClockFreq+0x180>)
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d028      	beq.n	800d0b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d062:	4b4a      	ldr	r3, [pc, #296]	@ (800d18c <HAL_RCC_GetSysClockFreq+0x180>)
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	099b      	lsrs	r3, r3, #6
 800d068:	2200      	movs	r2, #0
 800d06a:	623b      	str	r3, [r7, #32]
 800d06c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d074:	2100      	movs	r1, #0
 800d076:	4b47      	ldr	r3, [pc, #284]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x188>)
 800d078:	fb03 f201 	mul.w	r2, r3, r1
 800d07c:	2300      	movs	r3, #0
 800d07e:	fb00 f303 	mul.w	r3, r0, r3
 800d082:	4413      	add	r3, r2
 800d084:	4a43      	ldr	r2, [pc, #268]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x188>)
 800d086:	fba0 1202 	umull	r1, r2, r0, r2
 800d08a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d08c:	460a      	mov	r2, r1
 800d08e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d092:	4413      	add	r3, r2
 800d094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d098:	2200      	movs	r2, #0
 800d09a:	61bb      	str	r3, [r7, #24]
 800d09c:	61fa      	str	r2, [r7, #28]
 800d09e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d0a6:	f7f3 fdef 	bl	8000c88 <__aeabi_uldivmod>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0b2:	e053      	b.n	800d15c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0b4:	4b35      	ldr	r3, [pc, #212]	@ (800d18c <HAL_RCC_GetSysClockFreq+0x180>)
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	099b      	lsrs	r3, r3, #6
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	613b      	str	r3, [r7, #16]
 800d0be:	617a      	str	r2, [r7, #20]
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800d0c6:	f04f 0b00 	mov.w	fp, #0
 800d0ca:	4652      	mov	r2, sl
 800d0cc:	465b      	mov	r3, fp
 800d0ce:	f04f 0000 	mov.w	r0, #0
 800d0d2:	f04f 0100 	mov.w	r1, #0
 800d0d6:	0159      	lsls	r1, r3, #5
 800d0d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d0dc:	0150      	lsls	r0, r2, #5
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	ebb2 080a 	subs.w	r8, r2, sl
 800d0e6:	eb63 090b 	sbc.w	r9, r3, fp
 800d0ea:	f04f 0200 	mov.w	r2, #0
 800d0ee:	f04f 0300 	mov.w	r3, #0
 800d0f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800d0f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800d0fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800d0fe:	ebb2 0408 	subs.w	r4, r2, r8
 800d102:	eb63 0509 	sbc.w	r5, r3, r9
 800d106:	f04f 0200 	mov.w	r2, #0
 800d10a:	f04f 0300 	mov.w	r3, #0
 800d10e:	00eb      	lsls	r3, r5, #3
 800d110:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d114:	00e2      	lsls	r2, r4, #3
 800d116:	4614      	mov	r4, r2
 800d118:	461d      	mov	r5, r3
 800d11a:	eb14 030a 	adds.w	r3, r4, sl
 800d11e:	603b      	str	r3, [r7, #0]
 800d120:	eb45 030b 	adc.w	r3, r5, fp
 800d124:	607b      	str	r3, [r7, #4]
 800d126:	f04f 0200 	mov.w	r2, #0
 800d12a:	f04f 0300 	mov.w	r3, #0
 800d12e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d132:	4629      	mov	r1, r5
 800d134:	028b      	lsls	r3, r1, #10
 800d136:	4621      	mov	r1, r4
 800d138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d13c:	4621      	mov	r1, r4
 800d13e:	028a      	lsls	r2, r1, #10
 800d140:	4610      	mov	r0, r2
 800d142:	4619      	mov	r1, r3
 800d144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d146:	2200      	movs	r2, #0
 800d148:	60bb      	str	r3, [r7, #8]
 800d14a:	60fa      	str	r2, [r7, #12]
 800d14c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d150:	f7f3 fd9a 	bl	8000c88 <__aeabi_uldivmod>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4613      	mov	r3, r2
 800d15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d15c:	4b0b      	ldr	r3, [pc, #44]	@ (800d18c <HAL_RCC_GetSysClockFreq+0x180>)
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	0c1b      	lsrs	r3, r3, #16
 800d162:	f003 0303 	and.w	r3, r3, #3
 800d166:	3301      	adds	r3, #1
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800d16c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d170:	fbb2 f3f3 	udiv	r3, r2, r3
 800d174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800d176:	e002      	b.n	800d17e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d178:	4b05      	ldr	r3, [pc, #20]	@ (800d190 <HAL_RCC_GetSysClockFreq+0x184>)
 800d17a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800d17c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800d180:	4618      	mov	r0, r3
 800d182:	3740      	adds	r7, #64	@ 0x40
 800d184:	46bd      	mov	sp, r7
 800d186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d18a:	bf00      	nop
 800d18c:	40023800 	.word	0x40023800
 800d190:	00f42400 	.word	0x00f42400
 800d194:	017d7840 	.word	0x017d7840

0800d198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d19c:	4b03      	ldr	r3, [pc, #12]	@ (800d1ac <HAL_RCC_GetHCLKFreq+0x14>)
 800d19e:	681b      	ldr	r3, [r3, #0]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	200002f0 	.word	0x200002f0

0800d1b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d1b4:	f7ff fff0 	bl	800d198 <HAL_RCC_GetHCLKFreq>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	4b05      	ldr	r3, [pc, #20]	@ (800d1d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	0a9b      	lsrs	r3, r3, #10
 800d1c0:	f003 0307 	and.w	r3, r3, #7
 800d1c4:	4903      	ldr	r1, [pc, #12]	@ (800d1d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d1c6:	5ccb      	ldrb	r3, [r1, r3]
 800d1c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	40023800 	.word	0x40023800
 800d1d4:	0801687c 	.word	0x0801687c

0800d1d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d1dc:	f7ff ffdc 	bl	800d198 <HAL_RCC_GetHCLKFreq>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	4b05      	ldr	r3, [pc, #20]	@ (800d1f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	0b5b      	lsrs	r3, r3, #13
 800d1e8:	f003 0307 	and.w	r3, r3, #7
 800d1ec:	4903      	ldr	r1, [pc, #12]	@ (800d1fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800d1ee:	5ccb      	ldrb	r3, [r1, r3]
 800d1f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	40023800 	.word	0x40023800
 800d1fc:	0801687c 	.word	0x0801687c

0800d200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	220f      	movs	r2, #15
 800d20e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d210:	4b12      	ldr	r3, [pc, #72]	@ (800d25c <HAL_RCC_GetClockConfig+0x5c>)
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	f003 0203 	and.w	r2, r3, #3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d21c:	4b0f      	ldr	r3, [pc, #60]	@ (800d25c <HAL_RCC_GetClockConfig+0x5c>)
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d228:	4b0c      	ldr	r3, [pc, #48]	@ (800d25c <HAL_RCC_GetClockConfig+0x5c>)
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d234:	4b09      	ldr	r3, [pc, #36]	@ (800d25c <HAL_RCC_GetClockConfig+0x5c>)
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	08db      	lsrs	r3, r3, #3
 800d23a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d242:	4b07      	ldr	r3, [pc, #28]	@ (800d260 <HAL_RCC_GetClockConfig+0x60>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 0207 	and.w	r2, r3, #7
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	601a      	str	r2, [r3, #0]
}
 800d24e:	bf00      	nop
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	40023800 	.word	0x40023800
 800d260:	40023c00 	.word	0x40023c00

0800d264 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d26c:	2300      	movs	r3, #0
 800d26e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f003 0301 	and.w	r3, r3, #1
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d105      	bne.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d035      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d28c:	4b62      	ldr	r3, [pc, #392]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800d28e:	2200      	movs	r2, #0
 800d290:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d292:	f7fd f841 	bl	800a318 <HAL_GetTick>
 800d296:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d298:	e008      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d29a:	f7fd f83d 	bl	800a318 <HAL_GetTick>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d901      	bls.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e0b0      	b.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d2ac:	4b5b      	ldr	r3, [pc, #364]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1f0      	bne.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	019a      	lsls	r2, r3, #6
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	071b      	lsls	r3, r3, #28
 800d2c4:	4955      	ldr	r1, [pc, #340]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d2cc:	4b52      	ldr	r3, [pc, #328]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d2d2:	f7fd f821 	bl	800a318 <HAL_GetTick>
 800d2d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d2d8:	e008      	b.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d2da:	f7fd f81d 	bl	800a318 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d901      	bls.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e090      	b.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d2ec:	4b4b      	ldr	r3, [pc, #300]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0f0      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0302 	and.w	r3, r3, #2
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 8083 	beq.w	800d40c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d306:	2300      	movs	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	4b44      	ldr	r3, [pc, #272]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d30e:	4a43      	ldr	r2, [pc, #268]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d314:	6413      	str	r3, [r2, #64]	@ 0x40
 800d316:	4b41      	ldr	r3, [pc, #260]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d31a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800d322:	4b3f      	ldr	r3, [pc, #252]	@ (800d420 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a3e      	ldr	r2, [pc, #248]	@ (800d420 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d32c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d32e:	f7fc fff3 	bl	800a318 <HAL_GetTick>
 800d332:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800d334:	e008      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d336:	f7fc ffef 	bl	800a318 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d901      	bls.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e062      	b.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800d348:	4b35      	ldr	r3, [pc, #212]	@ (800d420 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0f0      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d354:	4b31      	ldr	r3, [pc, #196]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d35c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d02f      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d028      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d372:	4b2a      	ldr	r3, [pc, #168]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d37a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d37c:	4b29      	ldr	r3, [pc, #164]	@ (800d424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d37e:	2201      	movs	r2, #1
 800d380:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d382:	4b28      	ldr	r3, [pc, #160]	@ (800d424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800d388:	4a24      	ldr	r2, [pc, #144]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d38e:	4b23      	ldr	r3, [pc, #140]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	2b01      	cmp	r3, #1
 800d398:	d114      	bne.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800d39a:	f7fc ffbd 	bl	800a318 <HAL_GetTick>
 800d39e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3a0:	e00a      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3a2:	f7fc ffb9 	bl	800a318 <HAL_GetTick>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d901      	bls.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	e02a      	b.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3b8:	4b18      	ldr	r3, [pc, #96]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d3ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3bc:	f003 0302 	and.w	r3, r3, #2
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0ee      	beq.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d3d0:	d10d      	bne.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800d3d2:	4b12      	ldr	r3, [pc, #72]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d3e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d3e6:	490d      	ldr	r1, [pc, #52]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	608b      	str	r3, [r1, #8]
 800d3ec:	e005      	b.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800d3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	4a0a      	ldr	r2, [pc, #40]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d3f4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800d3f8:	6093      	str	r3, [r2, #8]
 800d3fa:	4b08      	ldr	r3, [pc, #32]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d3fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d406:	4905      	ldr	r1, [pc, #20]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d408:	4313      	orrs	r3, r2
 800d40a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	42470068 	.word	0x42470068
 800d41c:	40023800 	.word	0x40023800
 800d420:	40007000 	.word	0x40007000
 800d424:	42470e40 	.word	0x42470e40

0800d428 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e073      	b.n	800d526 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7f5b      	ldrb	r3, [r3, #29]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d105      	bne.n	800d454 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7fc fa9e 	bl	8009990 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2202      	movs	r2, #2
 800d458:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f003 0310 	and.w	r3, r3, #16
 800d464:	2b10      	cmp	r3, #16
 800d466:	d055      	beq.n	800d514 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	22ca      	movs	r2, #202	@ 0xca
 800d46e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2253      	movs	r2, #83	@ 0x53
 800d476:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fa49 	bl	800d910 <RTC_EnterInitMode>
 800d47e:	4603      	mov	r3, r0
 800d480:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d482:	7bfb      	ldrb	r3, [r7, #15]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d12c      	bne.n	800d4e2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	6812      	ldr	r2, [r2, #0]
 800d492:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d49a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6899      	ldr	r1, [r3, #8]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	431a      	orrs	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	430a      	orrs	r2, r1
 800d4b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	68d2      	ldr	r2, [r2, #12]
 800d4c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6919      	ldr	r1, [r3, #16]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	041a      	lsls	r2, r3, #16
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fa50 	bl	800d97e <RTC_ExitInitMode>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d110      	bne.n	800d50a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d4f6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	699a      	ldr	r2, [r3, #24]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	430a      	orrs	r2, r1
 800d508:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	22ff      	movs	r2, #255	@ 0xff
 800d510:	625a      	str	r2, [r3, #36]	@ 0x24
 800d512:	e001      	b.n	800d518 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d102      	bne.n	800d524 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2201      	movs	r2, #1
 800d522:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800d524:	7bfb      	ldrb	r3, [r7, #15]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d52e:	b590      	push	{r4, r7, lr}
 800d530:	b087      	sub	sp, #28
 800d532:	af00      	add	r7, sp, #0
 800d534:	60f8      	str	r0, [r7, #12]
 800d536:	60b9      	str	r1, [r7, #8]
 800d538:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	7f1b      	ldrb	r3, [r3, #28]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d101      	bne.n	800d54a <HAL_RTC_SetTime+0x1c>
 800d546:	2302      	movs	r3, #2
 800d548:	e087      	b.n	800d65a <HAL_RTC_SetTime+0x12c>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2201      	movs	r2, #1
 800d54e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2202      	movs	r2, #2
 800d554:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d126      	bne.n	800d5aa <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d566:	2b00      	cmp	r3, #0
 800d568:	d102      	bne.n	800d570 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	2200      	movs	r2, #0
 800d56e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fa27 	bl	800d9c8 <RTC_ByteToBcd2>
 800d57a:	4603      	mov	r3, r0
 800d57c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	785b      	ldrb	r3, [r3, #1]
 800d582:	4618      	mov	r0, r3
 800d584:	f000 fa20 	bl	800d9c8 <RTC_ByteToBcd2>
 800d588:	4603      	mov	r3, r0
 800d58a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d58c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	789b      	ldrb	r3, [r3, #2]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 fa18 	bl	800d9c8 <RTC_ByteToBcd2>
 800d598:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d59a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	78db      	ldrb	r3, [r3, #3]
 800d5a2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	617b      	str	r3, [r7, #20]
 800d5a8:	e018      	b.n	800d5dc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	785b      	ldrb	r3, [r3, #1]
 800d5c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d5ca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d5d0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	78db      	ldrb	r3, [r3, #3]
 800d5d6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	22ca      	movs	r2, #202	@ 0xca
 800d5e2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2253      	movs	r2, #83	@ 0x53
 800d5ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f98f 	bl	800d910 <RTC_EnterInitMode>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d5f6:	7cfb      	ldrb	r3, [r7, #19]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d120      	bne.n	800d63e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d606:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d60a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	689a      	ldr	r2, [r3, #8]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d61a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6899      	ldr	r1, [r3, #8]
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	68da      	ldr	r2, [r3, #12]
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	430a      	orrs	r2, r1
 800d632:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f000 f9a2 	bl	800d97e <RTC_ExitInitMode>
 800d63a:	4603      	mov	r3, r0
 800d63c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d63e:	7cfb      	ldrb	r3, [r7, #19]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d102      	bne.n	800d64a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2201      	movs	r2, #1
 800d648:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	22ff      	movs	r2, #255	@ 0xff
 800d650:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	771a      	strb	r2, [r3, #28]

  return status;
 800d658:	7cfb      	ldrb	r3, [r7, #19]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	371c      	adds	r7, #28
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd90      	pop	{r4, r7, pc}

0800d662 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b086      	sub	sp, #24
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d66e:	2300      	movs	r3, #0
 800d670:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	691b      	ldr	r3, [r3, #16]
 800d682:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d694:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d698:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	0c1b      	lsrs	r3, r3, #16
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	0a1b      	lsrs	r3, r3, #8
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	0d9b      	lsrs	r3, r3, #22
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d11a      	bne.n	800d714 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 f98e 	bl	800da04 <RTC_Bcd2ToByte>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	785b      	ldrb	r3, [r3, #1]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f000 f985 	bl	800da04 <RTC_Bcd2ToByte>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	789b      	ldrb	r3, [r3, #2]
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f97c 	bl	800da04 <RTC_Bcd2ToByte>
 800d70c:	4603      	mov	r3, r0
 800d70e:	461a      	mov	r2, r3
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d71e:	b590      	push	{r4, r7, lr}
 800d720:	b087      	sub	sp, #28
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	7f1b      	ldrb	r3, [r3, #28]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d101      	bne.n	800d73a <HAL_RTC_SetDate+0x1c>
 800d736:	2302      	movs	r3, #2
 800d738:	e071      	b.n	800d81e <HAL_RTC_SetDate+0x100>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2201      	movs	r2, #1
 800d73e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2202      	movs	r2, #2
 800d744:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10e      	bne.n	800d76a <HAL_RTC_SetDate+0x4c>
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	f003 0310 	and.w	r3, r3, #16
 800d754:	2b00      	cmp	r3, #0
 800d756:	d008      	beq.n	800d76a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	785b      	ldrb	r3, [r3, #1]
 800d75c:	f023 0310 	bic.w	r3, r3, #16
 800d760:	b2db      	uxtb	r3, r3
 800d762:	330a      	adds	r3, #10
 800d764:	b2da      	uxtb	r2, r3
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d11c      	bne.n	800d7aa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	78db      	ldrb	r3, [r3, #3]
 800d774:	4618      	mov	r0, r3
 800d776:	f000 f927 	bl	800d9c8 <RTC_ByteToBcd2>
 800d77a:	4603      	mov	r3, r0
 800d77c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	785b      	ldrb	r3, [r3, #1]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 f920 	bl	800d9c8 <RTC_ByteToBcd2>
 800d788:	4603      	mov	r3, r0
 800d78a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d78c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	789b      	ldrb	r3, [r3, #2]
 800d792:	4618      	mov	r0, r3
 800d794:	f000 f918 	bl	800d9c8 <RTC_ByteToBcd2>
 800d798:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d79a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	e00e      	b.n	800d7c8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	78db      	ldrb	r3, [r3, #3]
 800d7ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	785b      	ldrb	r3, [r3, #1]
 800d7b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7b6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d7bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	22ca      	movs	r2, #202	@ 0xca
 800d7ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2253      	movs	r2, #83	@ 0x53
 800d7d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f899 	bl	800d910 <RTC_EnterInitMode>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d7e2:	7cfb      	ldrb	r3, [r7, #19]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10c      	bne.n	800d802 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d7f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d7f6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f000 f8c0 	bl	800d97e <RTC_ExitInitMode>
 800d7fe:	4603      	mov	r3, r0
 800d800:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d802:	7cfb      	ldrb	r3, [r7, #19]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d102      	bne.n	800d80e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2201      	movs	r2, #1
 800d80c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	22ff      	movs	r2, #255	@ 0xff
 800d814:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	771a      	strb	r2, [r3, #28]

  return status;
 800d81c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	371c      	adds	r7, #28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd90      	pop	{r4, r7, pc}

0800d826 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b086      	sub	sp, #24
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d832:	2300      	movs	r3, #0
 800d834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d840:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d844:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	0c1b      	lsrs	r3, r3, #16
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	b2db      	uxtb	r3, r3
 800d856:	f003 031f 	and.w	r3, r3, #31
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	0b5b      	lsrs	r3, r3, #13
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0307 	and.w	r3, r3, #7
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d11a      	bne.n	800d8ba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	78db      	ldrb	r3, [r3, #3]
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 f8bb 	bl	800da04 <RTC_Bcd2ToByte>
 800d88e:	4603      	mov	r3, r0
 800d890:	461a      	mov	r2, r3
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	785b      	ldrb	r3, [r3, #1]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f8b2 	bl	800da04 <RTC_Bcd2ToByte>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	789b      	ldrb	r3, [r3, #2]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f8a9 	bl	800da04 <RTC_Bcd2ToByte>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3718      	adds	r7, #24
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a0d      	ldr	r2, [pc, #52]	@ (800d90c <HAL_RTC_WaitForSynchro+0x48>)
 800d8d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d8d8:	f7fc fd1e 	bl	800a318 <HAL_GetTick>
 800d8dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d8de:	e009      	b.n	800d8f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d8e0:	f7fc fd1a 	bl	800a318 <HAL_GetTick>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8ee:	d901      	bls.n	800d8f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e007      	b.n	800d904 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0ee      	beq.n	800d8e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	00017f5f 	.word	0x00017f5f

0800d910 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d918:	2300      	movs	r3, #0
 800d91a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d122      	bne.n	800d974 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68da      	ldr	r2, [r3, #12]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d93c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d93e:	f7fc fceb 	bl	800a318 <HAL_GetTick>
 800d942:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d944:	e00c      	b.n	800d960 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d946:	f7fc fce7 	bl	800a318 <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d954:	d904      	bls.n	800d960 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2204      	movs	r2, #4
 800d95a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800d95c:	2301      	movs	r3, #1
 800d95e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d102      	bne.n	800d974 <RTC_EnterInitMode+0x64>
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d1e8      	bne.n	800d946 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	b084      	sub	sp, #16
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d986:	2300      	movs	r3, #0
 800d988:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68da      	ldr	r2, [r3, #12]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d998:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f003 0320 	and.w	r3, r3, #32
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10a      	bne.n	800d9be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff ff8b 	bl	800d8c4 <HAL_RTC_WaitForSynchro>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2204      	movs	r2, #4
 800d9b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800d9d6:	e005      	b.n	800d9e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800d9de:	79fb      	ldrb	r3, [r7, #7]
 800d9e0:	3b0a      	subs	r3, #10
 800d9e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	2b09      	cmp	r3, #9
 800d9e8:	d8f6      	bhi.n	800d9d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	011b      	lsls	r3, r3, #4
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	b2db      	uxtb	r3, r3
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800da04:	b480      	push	{r7}
 800da06:	b085      	sub	sp, #20
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800da0e:	2300      	movs	r3, #0
 800da10:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	091b      	lsrs	r3, r3, #4
 800da16:	b2db      	uxtb	r3, r3
 800da18:	461a      	mov	r2, r3
 800da1a:	4613      	mov	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	b2da      	uxtb	r2, r3
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	f003 030f 	and.w	r3, r3, #15
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	4413      	add	r3, r2
 800da32:	b2db      	uxtb	r3, r3
}
 800da34:	4618      	mov	r0, r3
 800da36:	3714      	adds	r7, #20
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e07b      	b.n	800db4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da56:	2b00      	cmp	r3, #0
 800da58:	d108      	bne.n	800da6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da62:	d009      	beq.n	800da78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	61da      	str	r2, [r3, #28]
 800da6a:	e005      	b.n	800da78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7fb ffdc 	bl	8009a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2202      	movs	r2, #2
 800da9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800daae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dac0:	431a      	orrs	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800daca:	431a      	orrs	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	431a      	orrs	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	431a      	orrs	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dae8:	431a      	orrs	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	69db      	ldr	r3, [r3, #28]
 800daee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800daf2:	431a      	orrs	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dafc:	ea42 0103 	orr.w	r1, r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	430a      	orrs	r2, r1
 800db0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	0c1b      	lsrs	r3, r3, #16
 800db16:	f003 0104 	and.w	r1, r3, #4
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db1e:	f003 0210 	and.w	r2, r3, #16
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	69da      	ldr	r2, [r3, #28]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800db38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b088      	sub	sp, #32
 800db56:	af00      	add	r7, sp, #0
 800db58:	60f8      	str	r0, [r7, #12]
 800db5a:	60b9      	str	r1, [r7, #8]
 800db5c:	603b      	str	r3, [r7, #0]
 800db5e:	4613      	mov	r3, r2
 800db60:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db62:	f7fc fbd9 	bl	800a318 <HAL_GetTick>
 800db66:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800db68:	88fb      	ldrh	r3, [r7, #6]
 800db6a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800db72:	b2db      	uxtb	r3, r3
 800db74:	2b01      	cmp	r3, #1
 800db76:	d001      	beq.n	800db7c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800db78:	2302      	movs	r3, #2
 800db7a:	e12a      	b.n	800ddd2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <HAL_SPI_Transmit+0x36>
 800db82:	88fb      	ldrh	r3, [r7, #6]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d101      	bne.n	800db8c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800db88:	2301      	movs	r3, #1
 800db8a:	e122      	b.n	800ddd2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800db92:	2b01      	cmp	r3, #1
 800db94:	d101      	bne.n	800db9a <HAL_SPI_Transmit+0x48>
 800db96:	2302      	movs	r3, #2
 800db98:	e11b      	b.n	800ddd2 <HAL_SPI_Transmit+0x280>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2203      	movs	r2, #3
 800dba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	88fa      	ldrh	r2, [r7, #6]
 800dbba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	88fa      	ldrh	r2, [r7, #6]
 800dbc0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dbe8:	d10f      	bne.n	800dc0a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dbf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dc08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc14:	2b40      	cmp	r3, #64	@ 0x40
 800dc16:	d007      	beq.n	800dc28 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc30:	d152      	bne.n	800dcd8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d002      	beq.n	800dc40 <HAL_SPI_Transmit+0xee>
 800dc3a:	8b7b      	ldrh	r3, [r7, #26]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d145      	bne.n	800dccc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc44:	881a      	ldrh	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc50:	1c9a      	adds	r2, r3, #2
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dc64:	e032      	b.n	800dccc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	f003 0302 	and.w	r3, r3, #2
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d112      	bne.n	800dc9a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc78:	881a      	ldrh	r2, [r3, #0]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc84:	1c9a      	adds	r2, r3, #2
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	3b01      	subs	r3, #1
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	86da      	strh	r2, [r3, #54]	@ 0x36
 800dc98:	e018      	b.n	800dccc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc9a:	f7fc fb3d 	bl	800a318 <HAL_GetTick>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d803      	bhi.n	800dcb2 <HAL_SPI_Transmit+0x160>
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb0:	d102      	bne.n	800dcb8 <HAL_SPI_Transmit+0x166>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d109      	bne.n	800dccc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e082      	b.n	800ddd2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1c7      	bne.n	800dc66 <HAL_SPI_Transmit+0x114>
 800dcd6:	e053      	b.n	800dd80 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <HAL_SPI_Transmit+0x194>
 800dce0:	8b7b      	ldrh	r3, [r7, #26]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d147      	bne.n	800dd76 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	330c      	adds	r3, #12
 800dcf0:	7812      	ldrb	r2, [r2, #0]
 800dcf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcf8:	1c5a      	adds	r2, r3, #1
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	3b01      	subs	r3, #1
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800dd0c:	e033      	b.n	800dd76 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	f003 0302 	and.w	r3, r3, #2
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d113      	bne.n	800dd44 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	330c      	adds	r3, #12
 800dd26:	7812      	ldrb	r2, [r2, #0]
 800dd28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd2e:	1c5a      	adds	r2, r3, #1
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	86da      	strh	r2, [r3, #54]	@ 0x36
 800dd42:	e018      	b.n	800dd76 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd44:	f7fc fae8 	bl	800a318 <HAL_GetTick>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d803      	bhi.n	800dd5c <HAL_SPI_Transmit+0x20a>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5a:	d102      	bne.n	800dd62 <HAL_SPI_Transmit+0x210>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d109      	bne.n	800dd76 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800dd72:	2303      	movs	r3, #3
 800dd74:	e02d      	b.n	800ddd2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1c6      	bne.n	800dd0e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd80:	69fa      	ldr	r2, [r7, #28]
 800dd82:	6839      	ldr	r1, [r7, #0]
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 f8b1 	bl	800deec <SPI_EndRxTxTransaction>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2220      	movs	r2, #32
 800dd94:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	617b      	str	r3, [r7, #20]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	617b      	str	r3, [r7, #20]
 800ddb2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e000      	b.n	800ddd2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ddd0:	2300      	movs	r3, #0
  }
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3720      	adds	r7, #32
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
	...

0800dddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	603b      	str	r3, [r7, #0]
 800dde8:	4613      	mov	r3, r2
 800ddea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ddec:	f7fc fa94 	bl	800a318 <HAL_GetTick>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ddfc:	f7fc fa8c 	bl	800a318 <HAL_GetTick>
 800de00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800de02:	4b39      	ldr	r3, [pc, #228]	@ (800dee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	015b      	lsls	r3, r3, #5
 800de08:	0d1b      	lsrs	r3, r3, #20
 800de0a:	69fa      	ldr	r2, [r7, #28]
 800de0c:	fb02 f303 	mul.w	r3, r2, r3
 800de10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de12:	e054      	b.n	800debe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1a:	d050      	beq.n	800debe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de1c:	f7fc fa7c 	bl	800a318 <HAL_GetTick>
 800de20:	4602      	mov	r2, r0
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	69fa      	ldr	r2, [r7, #28]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d902      	bls.n	800de32 <SPI_WaitFlagStateUntilTimeout+0x56>
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d13d      	bne.n	800deae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800de40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de4a:	d111      	bne.n	800de70 <SPI_WaitFlagStateUntilTimeout+0x94>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de54:	d004      	beq.n	800de60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de5e:	d107      	bne.n	800de70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de78:	d10f      	bne.n	800de9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800de98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e017      	b.n	800dede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d101      	bne.n	800deb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800deb4:	2300      	movs	r3, #0
 800deb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	3b01      	subs	r3, #1
 800debc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	689a      	ldr	r2, [r3, #8]
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4013      	ands	r3, r2
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	429a      	cmp	r2, r3
 800decc:	bf0c      	ite	eq
 800dece:	2301      	moveq	r3, #1
 800ded0:	2300      	movne	r3, #0
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	461a      	mov	r2, r3
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d19b      	bne.n	800de14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3720      	adds	r7, #32
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	200002f0 	.word	0x200002f0

0800deec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	2201      	movs	r2, #1
 800df00:	2102      	movs	r1, #2
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f7ff ff6a 	bl	800dddc <SPI_WaitFlagStateUntilTimeout>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d007      	beq.n	800df1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df12:	f043 0220 	orr.w	r2, r3, #32
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800df1a:	2303      	movs	r3, #3
 800df1c:	e032      	b.n	800df84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800df1e:	4b1b      	ldr	r3, [pc, #108]	@ (800df8c <SPI_EndRxTxTransaction+0xa0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a1b      	ldr	r2, [pc, #108]	@ (800df90 <SPI_EndRxTxTransaction+0xa4>)
 800df24:	fba2 2303 	umull	r2, r3, r2, r3
 800df28:	0d5b      	lsrs	r3, r3, #21
 800df2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800df2e:	fb02 f303 	mul.w	r3, r2, r3
 800df32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df3c:	d112      	bne.n	800df64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2200      	movs	r2, #0
 800df46:	2180      	movs	r1, #128	@ 0x80
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f7ff ff47 	bl	800dddc <SPI_WaitFlagStateUntilTimeout>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d016      	beq.n	800df82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df58:	f043 0220 	orr.w	r2, r3, #32
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e00f      	b.n	800df84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df7a:	2b80      	cmp	r3, #128	@ 0x80
 800df7c:	d0f2      	beq.n	800df64 <SPI_EndRxTxTransaction+0x78>
 800df7e:	e000      	b.n	800df82 <SPI_EndRxTxTransaction+0x96>
        break;
 800df80:	bf00      	nop
  }

  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	200002f0 	.word	0x200002f0
 800df90:	165e9f81 	.word	0x165e9f81

0800df94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e041      	b.n	800e02a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7fb ff92 	bl	8009ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	f000 fa7e 	bl	800e4d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
	...

0800e034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b01      	cmp	r3, #1
 800e046:	d001      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e048:	2301      	movs	r3, #1
 800e04a:	e04e      	b.n	800e0ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2202      	movs	r2, #2
 800e050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68da      	ldr	r2, [r3, #12]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f042 0201 	orr.w	r2, r2, #1
 800e062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a23      	ldr	r2, [pc, #140]	@ (800e0f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d022      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e076:	d01d      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a1f      	ldr	r2, [pc, #124]	@ (800e0fc <HAL_TIM_Base_Start_IT+0xc8>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d018      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a1e      	ldr	r2, [pc, #120]	@ (800e100 <HAL_TIM_Base_Start_IT+0xcc>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d013      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a1c      	ldr	r2, [pc, #112]	@ (800e104 <HAL_TIM_Base_Start_IT+0xd0>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d00e      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a1b      	ldr	r2, [pc, #108]	@ (800e108 <HAL_TIM_Base_Start_IT+0xd4>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d009      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a19      	ldr	r2, [pc, #100]	@ (800e10c <HAL_TIM_Base_Start_IT+0xd8>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d004      	beq.n	800e0b4 <HAL_TIM_Base_Start_IT+0x80>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a18      	ldr	r2, [pc, #96]	@ (800e110 <HAL_TIM_Base_Start_IT+0xdc>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d111      	bne.n	800e0d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f003 0307 	and.w	r3, r3, #7
 800e0be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2b06      	cmp	r3, #6
 800e0c4:	d010      	beq.n	800e0e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f042 0201 	orr.w	r2, r2, #1
 800e0d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0d6:	e007      	b.n	800e0e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f042 0201 	orr.w	r2, r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	40010000 	.word	0x40010000
 800e0fc:	40000400 	.word	0x40000400
 800e100:	40000800 	.word	0x40000800
 800e104:	40000c00 	.word	0x40000c00
 800e108:	40010400 	.word	0x40010400
 800e10c:	40014000 	.word	0x40014000
 800e110:	40001800 	.word	0x40001800

0800e114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	f003 0302 	and.w	r3, r3, #2
 800e132:	2b00      	cmp	r3, #0
 800e134:	d020      	beq.n	800e178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f003 0302 	and.w	r3, r3, #2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d01b      	beq.n	800e178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f06f 0202 	mvn.w	r2, #2
 800e148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2201      	movs	r2, #1
 800e14e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	699b      	ldr	r3, [r3, #24]
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d003      	beq.n	800e166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f999 	bl	800e496 <HAL_TIM_IC_CaptureCallback>
 800e164:	e005      	b.n	800e172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f98b 	bl	800e482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 f99c 	bl	800e4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	f003 0304 	and.w	r3, r3, #4
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d020      	beq.n	800e1c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f003 0304 	and.w	r3, r3, #4
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d01b      	beq.n	800e1c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f06f 0204 	mvn.w	r2, #4
 800e194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2202      	movs	r2, #2
 800e19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	699b      	ldr	r3, [r3, #24]
 800e1a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f973 	bl	800e496 <HAL_TIM_IC_CaptureCallback>
 800e1b0:	e005      	b.n	800e1be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f965 	bl	800e482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 f976 	bl	800e4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	f003 0308 	and.w	r3, r3, #8
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d020      	beq.n	800e210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f003 0308 	and.w	r3, r3, #8
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d01b      	beq.n	800e210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f06f 0208 	mvn.w	r2, #8
 800e1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2204      	movs	r2, #4
 800e1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	f003 0303 	and.w	r3, r3, #3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f94d 	bl	800e496 <HAL_TIM_IC_CaptureCallback>
 800e1fc:	e005      	b.n	800e20a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f93f 	bl	800e482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 f950 	bl	800e4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	f003 0310 	and.w	r3, r3, #16
 800e216:	2b00      	cmp	r3, #0
 800e218:	d020      	beq.n	800e25c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f003 0310 	and.w	r3, r3, #16
 800e220:	2b00      	cmp	r3, #0
 800e222:	d01b      	beq.n	800e25c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f06f 0210 	mvn.w	r2, #16
 800e22c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2208      	movs	r2, #8
 800e232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d003      	beq.n	800e24a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f927 	bl	800e496 <HAL_TIM_IC_CaptureCallback>
 800e248:	e005      	b.n	800e256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f919 	bl	800e482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 f92a 	bl	800e4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00c      	beq.n	800e280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f003 0301 	and.w	r3, r3, #1
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d007      	beq.n	800e280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f06f 0201 	mvn.w	r2, #1
 800e278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7fb fb4a 	bl	8009914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00c      	beq.n	800e2a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e290:	2b00      	cmp	r3, #0
 800e292:	d007      	beq.n	800e2a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fae4 	bl	800e86c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00c      	beq.n	800e2c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d007      	beq.n	800e2c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f8fb 	bl	800e4be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f003 0320 	and.w	r3, r3, #32
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00c      	beq.n	800e2ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f003 0320 	and.w	r3, r3, #32
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d007      	beq.n	800e2ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f06f 0220 	mvn.w	r2, #32
 800e2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fab6 	bl	800e858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e2ec:	bf00      	nop
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d101      	bne.n	800e310 <HAL_TIM_ConfigClockSource+0x1c>
 800e30c:	2302      	movs	r3, #2
 800e30e:	e0b4      	b.n	800e47a <HAL_TIM_ConfigClockSource+0x186>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e32e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e348:	d03e      	beq.n	800e3c8 <HAL_TIM_ConfigClockSource+0xd4>
 800e34a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e34e:	f200 8087 	bhi.w	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e356:	f000 8086 	beq.w	800e466 <HAL_TIM_ConfigClockSource+0x172>
 800e35a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e35e:	d87f      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e360:	2b70      	cmp	r3, #112	@ 0x70
 800e362:	d01a      	beq.n	800e39a <HAL_TIM_ConfigClockSource+0xa6>
 800e364:	2b70      	cmp	r3, #112	@ 0x70
 800e366:	d87b      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e368:	2b60      	cmp	r3, #96	@ 0x60
 800e36a:	d050      	beq.n	800e40e <HAL_TIM_ConfigClockSource+0x11a>
 800e36c:	2b60      	cmp	r3, #96	@ 0x60
 800e36e:	d877      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e370:	2b50      	cmp	r3, #80	@ 0x50
 800e372:	d03c      	beq.n	800e3ee <HAL_TIM_ConfigClockSource+0xfa>
 800e374:	2b50      	cmp	r3, #80	@ 0x50
 800e376:	d873      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e378:	2b40      	cmp	r3, #64	@ 0x40
 800e37a:	d058      	beq.n	800e42e <HAL_TIM_ConfigClockSource+0x13a>
 800e37c:	2b40      	cmp	r3, #64	@ 0x40
 800e37e:	d86f      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e380:	2b30      	cmp	r3, #48	@ 0x30
 800e382:	d064      	beq.n	800e44e <HAL_TIM_ConfigClockSource+0x15a>
 800e384:	2b30      	cmp	r3, #48	@ 0x30
 800e386:	d86b      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e388:	2b20      	cmp	r3, #32
 800e38a:	d060      	beq.n	800e44e <HAL_TIM_ConfigClockSource+0x15a>
 800e38c:	2b20      	cmp	r3, #32
 800e38e:	d867      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
 800e390:	2b00      	cmp	r3, #0
 800e392:	d05c      	beq.n	800e44e <HAL_TIM_ConfigClockSource+0x15a>
 800e394:	2b10      	cmp	r3, #16
 800e396:	d05a      	beq.n	800e44e <HAL_TIM_ConfigClockSource+0x15a>
 800e398:	e062      	b.n	800e460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e3aa:	f000 f9b9 	bl	800e720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e3bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	68ba      	ldr	r2, [r7, #8]
 800e3c4:	609a      	str	r2, [r3, #8]
      break;
 800e3c6:	e04f      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e3d8:	f000 f9a2 	bl	800e720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	689a      	ldr	r2, [r3, #8]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e3ea:	609a      	str	r2, [r3, #8]
      break;
 800e3ec:	e03c      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f000 f916 	bl	800e62c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2150      	movs	r1, #80	@ 0x50
 800e406:	4618      	mov	r0, r3
 800e408:	f000 f96f 	bl	800e6ea <TIM_ITRx_SetConfig>
      break;
 800e40c:	e02c      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e41a:	461a      	mov	r2, r3
 800e41c:	f000 f935 	bl	800e68a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2160      	movs	r1, #96	@ 0x60
 800e426:	4618      	mov	r0, r3
 800e428:	f000 f95f 	bl	800e6ea <TIM_ITRx_SetConfig>
      break;
 800e42c:	e01c      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e43a:	461a      	mov	r2, r3
 800e43c:	f000 f8f6 	bl	800e62c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2140      	movs	r1, #64	@ 0x40
 800e446:	4618      	mov	r0, r3
 800e448:	f000 f94f 	bl	800e6ea <TIM_ITRx_SetConfig>
      break;
 800e44c:	e00c      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4619      	mov	r1, r3
 800e458:	4610      	mov	r0, r2
 800e45a:	f000 f946 	bl	800e6ea <TIM_ITRx_SetConfig>
      break;
 800e45e:	e003      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	73fb      	strb	r3, [r7, #15]
      break;
 800e464:	e000      	b.n	800e468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e478:	7bfb      	ldrb	r3, [r7, #15]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e496:	b480      	push	{r7}
 800e498:	b083      	sub	sp, #12
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e49e:	bf00      	nop
 800e4a0:	370c      	adds	r7, #12
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b083      	sub	sp, #12
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e4b2:	bf00      	nop
 800e4b4:	370c      	adds	r7, #12
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr

0800e4be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e4be:	b480      	push	{r7}
 800e4c0:	b083      	sub	sp, #12
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e4c6:	bf00      	nop
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
	...

0800e4d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a46      	ldr	r2, [pc, #280]	@ (800e600 <TIM_Base_SetConfig+0x12c>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d013      	beq.n	800e514 <TIM_Base_SetConfig+0x40>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4f2:	d00f      	beq.n	800e514 <TIM_Base_SetConfig+0x40>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4a43      	ldr	r2, [pc, #268]	@ (800e604 <TIM_Base_SetConfig+0x130>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d00b      	beq.n	800e514 <TIM_Base_SetConfig+0x40>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a42      	ldr	r2, [pc, #264]	@ (800e608 <TIM_Base_SetConfig+0x134>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d007      	beq.n	800e514 <TIM_Base_SetConfig+0x40>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4a41      	ldr	r2, [pc, #260]	@ (800e60c <TIM_Base_SetConfig+0x138>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d003      	beq.n	800e514 <TIM_Base_SetConfig+0x40>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a40      	ldr	r2, [pc, #256]	@ (800e610 <TIM_Base_SetConfig+0x13c>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d108      	bne.n	800e526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e51a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	4313      	orrs	r3, r2
 800e524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a35      	ldr	r2, [pc, #212]	@ (800e600 <TIM_Base_SetConfig+0x12c>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d02b      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e534:	d027      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a32      	ldr	r2, [pc, #200]	@ (800e604 <TIM_Base_SetConfig+0x130>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d023      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a31      	ldr	r2, [pc, #196]	@ (800e608 <TIM_Base_SetConfig+0x134>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d01f      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a30      	ldr	r2, [pc, #192]	@ (800e60c <TIM_Base_SetConfig+0x138>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d01b      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a2f      	ldr	r2, [pc, #188]	@ (800e610 <TIM_Base_SetConfig+0x13c>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d017      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a2e      	ldr	r2, [pc, #184]	@ (800e614 <TIM_Base_SetConfig+0x140>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d013      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a2d      	ldr	r2, [pc, #180]	@ (800e618 <TIM_Base_SetConfig+0x144>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d00f      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a2c      	ldr	r2, [pc, #176]	@ (800e61c <TIM_Base_SetConfig+0x148>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d00b      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a2b      	ldr	r2, [pc, #172]	@ (800e620 <TIM_Base_SetConfig+0x14c>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d007      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a2a      	ldr	r2, [pc, #168]	@ (800e624 <TIM_Base_SetConfig+0x150>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d003      	beq.n	800e586 <TIM_Base_SetConfig+0xb2>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a29      	ldr	r2, [pc, #164]	@ (800e628 <TIM_Base_SetConfig+0x154>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d108      	bne.n	800e598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e58c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	4313      	orrs	r3, r2
 800e596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	689a      	ldr	r2, [r3, #8]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a10      	ldr	r2, [pc, #64]	@ (800e600 <TIM_Base_SetConfig+0x12c>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d003      	beq.n	800e5cc <TIM_Base_SetConfig+0xf8>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4a12      	ldr	r2, [pc, #72]	@ (800e610 <TIM_Base_SetConfig+0x13c>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d103      	bne.n	800e5d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	691a      	ldr	r2, [r3, #16]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	f003 0301 	and.w	r3, r3, #1
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d105      	bne.n	800e5f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	f023 0201 	bic.w	r2, r3, #1
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	611a      	str	r2, [r3, #16]
  }
}
 800e5f2:	bf00      	nop
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	40010000 	.word	0x40010000
 800e604:	40000400 	.word	0x40000400
 800e608:	40000800 	.word	0x40000800
 800e60c:	40000c00 	.word	0x40000c00
 800e610:	40010400 	.word	0x40010400
 800e614:	40014000 	.word	0x40014000
 800e618:	40014400 	.word	0x40014400
 800e61c:	40014800 	.word	0x40014800
 800e620:	40001800 	.word	0x40001800
 800e624:	40001c00 	.word	0x40001c00
 800e628:	40002000 	.word	0x40002000

0800e62c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6a1b      	ldr	r3, [r3, #32]
 800e63c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	f023 0201 	bic.w	r2, r3, #1
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	699b      	ldr	r3, [r3, #24]
 800e64e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	011b      	lsls	r3, r3, #4
 800e65c:	693a      	ldr	r2, [r7, #16]
 800e65e:	4313      	orrs	r3, r2
 800e660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f023 030a 	bic.w	r3, r3, #10
 800e668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	4313      	orrs	r3, r2
 800e670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	693a      	ldr	r2, [r7, #16]
 800e676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	697a      	ldr	r2, [r7, #20]
 800e67c:	621a      	str	r2, [r3, #32]
}
 800e67e:	bf00      	nop
 800e680:	371c      	adds	r7, #28
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e68a:	b480      	push	{r7}
 800e68c:	b087      	sub	sp, #28
 800e68e:	af00      	add	r7, sp, #0
 800e690:	60f8      	str	r0, [r7, #12]
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	f023 0210 	bic.w	r2, r3, #16
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e6b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	031b      	lsls	r3, r3, #12
 800e6ba:	693a      	ldr	r2, [r7, #16]
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e6c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	011b      	lsls	r3, r3, #4
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	621a      	str	r2, [r3, #32]
}
 800e6de:	bf00      	nop
 800e6e0:	371c      	adds	r7, #28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	4313      	orrs	r3, r2
 800e708:	f043 0307 	orr.w	r3, r3, #7
 800e70c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	609a      	str	r2, [r3, #8]
}
 800e714:	bf00      	nop
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e720:	b480      	push	{r7}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e73a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	021a      	lsls	r2, r3, #8
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	431a      	orrs	r2, r3
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	4313      	orrs	r3, r2
 800e748:	697a      	ldr	r2, [r7, #20]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	609a      	str	r2, [r3, #8]
}
 800e754:	bf00      	nop
 800e756:	371c      	adds	r7, #28
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e770:	2b01      	cmp	r3, #1
 800e772:	d101      	bne.n	800e778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e774:	2302      	movs	r3, #2
 800e776:	e05a      	b.n	800e82e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2202      	movs	r2, #2
 800e784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e79e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	68fa      	ldr	r2, [r7, #12]
 800e7b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a21      	ldr	r2, [pc, #132]	@ (800e83c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d022      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7c4:	d01d      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a1d      	ldr	r2, [pc, #116]	@ (800e840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d018      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a1b      	ldr	r2, [pc, #108]	@ (800e844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d013      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a1a      	ldr	r2, [pc, #104]	@ (800e848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d00e      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a18      	ldr	r2, [pc, #96]	@ (800e84c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d009      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4a17      	ldr	r2, [pc, #92]	@ (800e850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d004      	beq.n	800e802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a15      	ldr	r2, [pc, #84]	@ (800e854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d10c      	bne.n	800e81c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	4313      	orrs	r3, r2
 800e812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	40010000 	.word	0x40010000
 800e840:	40000400 	.word	0x40000400
 800e844:	40000800 	.word	0x40000800
 800e848:	40000c00 	.word	0x40000c00
 800e84c:	40010400 	.word	0x40010400
 800e850:	40014000 	.word	0x40014000
 800e854:	40001800 	.word	0x40001800

0800e858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e874:	bf00      	nop
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	e042      	b.n	800e918 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d106      	bne.n	800e8ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7fb fbe6 	bl	800a078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2224      	movs	r2, #36	@ 0x24
 800e8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	68da      	ldr	r2, [r3, #12]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e8c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 fb47 	bl	800ef58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	691a      	ldr	r2, [r3, #16]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e8d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	695a      	ldr	r2, [r3, #20]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e8e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	68da      	ldr	r2, [r3, #12]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e8f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2220      	movs	r2, #32
 800e904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2220      	movs	r2, #32
 800e90c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08a      	sub	sp, #40	@ 0x28
 800e924:	af02      	add	r7, sp, #8
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	603b      	str	r3, [r7, #0]
 800e92c:	4613      	mov	r3, r2
 800e92e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e930:	2300      	movs	r3, #0
 800e932:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b20      	cmp	r3, #32
 800e93e:	d175      	bne.n	800ea2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <HAL_UART_Transmit+0x2c>
 800e946:	88fb      	ldrh	r3, [r7, #6]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d101      	bne.n	800e950 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e94c:	2301      	movs	r3, #1
 800e94e:	e06e      	b.n	800ea2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2221      	movs	r2, #33	@ 0x21
 800e95a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e95e:	f7fb fcdb 	bl	800a318 <HAL_GetTick>
 800e962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	88fa      	ldrh	r2, [r7, #6]
 800e968:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	88fa      	ldrh	r2, [r7, #6]
 800e96e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e978:	d108      	bne.n	800e98c <HAL_UART_Transmit+0x6c>
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d104      	bne.n	800e98c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e982:	2300      	movs	r3, #0
 800e984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	e003      	b.n	800e994 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e990:	2300      	movs	r3, #0
 800e992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e994:	e02e      	b.n	800e9f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	2200      	movs	r2, #0
 800e99e:	2180      	movs	r1, #128	@ 0x80
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f000 f9cb 	bl	800ed3c <UART_WaitOnFlagUntilTimeout>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d005      	beq.n	800e9b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2220      	movs	r2, #32
 800e9b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	e03a      	b.n	800ea2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10b      	bne.n	800e9d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	3302      	adds	r3, #2
 800e9d2:	61bb      	str	r3, [r7, #24]
 800e9d4:	e007      	b.n	800e9e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	781a      	ldrb	r2, [r3, #0]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1cb      	bne.n	800e996 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2200      	movs	r2, #0
 800ea06:	2140      	movs	r1, #64	@ 0x40
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f000 f997 	bl	800ed3c <UART_WaitOnFlagUntilTimeout>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d005      	beq.n	800ea20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2220      	movs	r2, #32
 800ea18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ea1c:	2303      	movs	r3, #3
 800ea1e:	e006      	b.n	800ea2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2220      	movs	r2, #32
 800ea24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e000      	b.n	800ea2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ea2c:	2302      	movs	r3, #2
  }
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3720      	adds	r7, #32
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b08a      	sub	sp, #40	@ 0x28
 800ea3a:	af02      	add	r7, sp, #8
 800ea3c:	60f8      	str	r0, [r7, #12]
 800ea3e:	60b9      	str	r1, [r7, #8]
 800ea40:	603b      	str	r3, [r7, #0]
 800ea42:	4613      	mov	r3, r2
 800ea44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ea46:	2300      	movs	r3, #0
 800ea48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b20      	cmp	r3, #32
 800ea54:	f040 8081 	bne.w	800eb5a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <HAL_UART_Receive+0x2e>
 800ea5e:	88fb      	ldrh	r3, [r7, #6]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d101      	bne.n	800ea68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
 800ea66:	e079      	b.n	800eb5c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2222      	movs	r2, #34	@ 0x22
 800ea72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea7c:	f7fb fc4c 	bl	800a318 <HAL_GetTick>
 800ea80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	88fa      	ldrh	r2, [r7, #6]
 800ea86:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	88fa      	ldrh	r2, [r7, #6]
 800ea8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea96:	d108      	bne.n	800eaaa <HAL_UART_Receive+0x74>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d104      	bne.n	800eaaa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	61bb      	str	r3, [r7, #24]
 800eaa8:	e003      	b.n	800eab2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eaae:	2300      	movs	r3, #0
 800eab0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800eab2:	e047      	b.n	800eb44 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2200      	movs	r2, #0
 800eabc:	2120      	movs	r1, #32
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 f93c 	bl	800ed3c <UART_WaitOnFlagUntilTimeout>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d005      	beq.n	800ead6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2220      	movs	r2, #32
 800eace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e042      	b.n	800eb5c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10c      	bne.n	800eaf6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	3302      	adds	r3, #2
 800eaf2:	61bb      	str	r3, [r7, #24]
 800eaf4:	e01f      	b.n	800eb36 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eafe:	d007      	beq.n	800eb10 <HAL_UART_Receive+0xda>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10a      	bne.n	800eb1e <HAL_UART_Receive+0xe8>
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	701a      	strb	r2, [r3, #0]
 800eb1c:	e008      	b.n	800eb30 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	3301      	adds	r3, #1
 800eb34:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1b2      	bne.n	800eab4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2220      	movs	r2, #32
 800eb52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800eb56:	2300      	movs	r3, #0
 800eb58:	e000      	b.n	800eb5c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800eb5a:	2302      	movs	r3, #2
  }
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b20      	cmp	r3, #32
 800eb7c:	d112      	bne.n	800eba4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <HAL_UART_Receive_IT+0x26>
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e00b      	b.n	800eba6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb94:	88fb      	ldrh	r3, [r7, #6]
 800eb96:	461a      	mov	r2, r3
 800eb98:	68b9      	ldr	r1, [r7, #8]
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f000 f927 	bl	800edee <UART_Start_Receive_IT>
 800eba0:	4603      	mov	r3, r0
 800eba2:	e000      	b.n	800eba6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800eba4:	2302      	movs	r3, #2
  }
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
	...

0800ebb0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b09a      	sub	sp, #104	@ 0x68
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	330c      	adds	r3, #12
 800ebbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebc2:	e853 3f00 	ldrex	r3, [r3]
 800ebc6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ebc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebce:	667b      	str	r3, [r7, #100]	@ 0x64
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	330c      	adds	r3, #12
 800ebd6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ebd8:	657a      	str	r2, [r7, #84]	@ 0x54
 800ebda:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ebde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ebe0:	e841 2300 	strex	r3, r2, [r1]
 800ebe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ebe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1e5      	bne.n	800ebb8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3314      	adds	r3, #20
 800ebf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebf6:	e853 3f00 	ldrex	r3, [r3]
 800ebfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfe:	f023 0301 	bic.w	r3, r3, #1
 800ec02:	663b      	str	r3, [r7, #96]	@ 0x60
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3314      	adds	r3, #20
 800ec0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ec0c:	643a      	str	r2, [r7, #64]	@ 0x40
 800ec0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec14:	e841 2300 	strex	r3, r2, [r1]
 800ec18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e5      	bne.n	800ebec <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d119      	bne.n	800ec5c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	330c      	adds	r3, #12
 800ec2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	e853 3f00 	ldrex	r3, [r3]
 800ec36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	f023 0310 	bic.w	r3, r3, #16
 800ec3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	330c      	adds	r3, #12
 800ec46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ec48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec50:	e841 2300 	strex	r3, r2, [r1]
 800ec54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1e5      	bne.n	800ec28 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec66:	2b40      	cmp	r3, #64	@ 0x40
 800ec68:	d13f      	bne.n	800ecea <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3314      	adds	r3, #20
 800ec70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	e853 3f00 	ldrex	r3, [r3]
 800ec78:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec80:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3314      	adds	r3, #20
 800ec88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec8a:	61ba      	str	r2, [r7, #24]
 800ec8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8e:	6979      	ldr	r1, [r7, #20]
 800ec90:	69ba      	ldr	r2, [r7, #24]
 800ec92:	e841 2300 	strex	r3, r2, [r1]
 800ec96:	613b      	str	r3, [r7, #16]
   return(result);
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1e5      	bne.n	800ec6a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d013      	beq.n	800ecce <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecaa:	4a19      	ldr	r2, [pc, #100]	@ (800ed10 <HAL_UART_AbortReceive_IT+0x160>)
 800ecac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fc f842 	bl	800ad3c <HAL_DMA_Abort_IT>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d022      	beq.n	800ed04 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ecc8:	4610      	mov	r0, r2
 800ecca:	4798      	blx	r3
 800eccc:	e01a      	b.n	800ed04 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 f820 	bl	800ed28 <HAL_UART_AbortReceiveCpltCallback>
 800ece8:	e00c      	b.n	800ed04 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2220      	movs	r2, #32
 800ecf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 f812 	bl	800ed28 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3768      	adds	r7, #104	@ 0x68
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	0800ef29 	.word	0x0800ef29

0800ed14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	603b      	str	r3, [r7, #0]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed4c:	e03b      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed4e:	6a3b      	ldr	r3, [r7, #32]
 800ed50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed54:	d037      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed56:	f7fb fadf 	bl	800a318 <HAL_GetTick>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	6a3a      	ldr	r2, [r7, #32]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d302      	bcc.n	800ed6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ed66:	6a3b      	ldr	r3, [r7, #32]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d101      	bne.n	800ed70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e03a      	b.n	800ede6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	f003 0304 	and.w	r3, r3, #4
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d023      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2b80      	cmp	r3, #128	@ 0x80
 800ed82:	d020      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	2b40      	cmp	r3, #64	@ 0x40
 800ed88:	d01d      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f003 0308 	and.w	r3, r3, #8
 800ed94:	2b08      	cmp	r3, #8
 800ed96:	d116      	bne.n	800edc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ed98:	2300      	movs	r3, #0
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	617b      	str	r3, [r7, #20]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f000 f857 	bl	800ee62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2208      	movs	r2, #8
 800edb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e00f      	b.n	800ede6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	4013      	ands	r3, r2
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	bf0c      	ite	eq
 800edd6:	2301      	moveq	r3, #1
 800edd8:	2300      	movne	r3, #0
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	461a      	mov	r2, r3
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d0b4      	beq.n	800ed4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800edee:	b480      	push	{r7}
 800edf0:	b085      	sub	sp, #20
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	4613      	mov	r3, r2
 800edfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	88fa      	ldrh	r2, [r7, #6]
 800ee06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	88fa      	ldrh	r2, [r7, #6]
 800ee0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2222      	movs	r2, #34	@ 0x22
 800ee18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d007      	beq.n	800ee34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68da      	ldr	r2, [r3, #12]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	695a      	ldr	r2, [r3, #20]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f042 0201 	orr.w	r2, r2, #1
 800ee42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68da      	ldr	r2, [r3, #12]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f042 0220 	orr.w	r2, r2, #32
 800ee52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr

0800ee62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee62:	b480      	push	{r7}
 800ee64:	b095      	sub	sp, #84	@ 0x54
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	330c      	adds	r3, #12
 800ee70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee74:	e853 3f00 	ldrex	r3, [r3]
 800ee78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	330c      	adds	r3, #12
 800ee88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ee8a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ee8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee92:	e841 2300 	strex	r3, r2, [r1]
 800ee96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1e5      	bne.n	800ee6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3314      	adds	r3, #20
 800eea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	e853 3f00 	ldrex	r3, [r3]
 800eeac:	61fb      	str	r3, [r7, #28]
   return(result);
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	f023 0301 	bic.w	r3, r3, #1
 800eeb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3314      	adds	r3, #20
 800eebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eec6:	e841 2300 	strex	r3, r2, [r1]
 800eeca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1e5      	bne.n	800ee9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d119      	bne.n	800ef0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	330c      	adds	r3, #12
 800eee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	e853 3f00 	ldrex	r3, [r3]
 800eee8:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f023 0310 	bic.w	r3, r3, #16
 800eef0:	647b      	str	r3, [r7, #68]	@ 0x44
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	330c      	adds	r3, #12
 800eef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eefa:	61ba      	str	r2, [r7, #24]
 800eefc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	69ba      	ldr	r2, [r7, #24]
 800ef02:	e841 2300 	strex	r3, r2, [r1]
 800ef06:	613b      	str	r3, [r7, #16]
   return(result);
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1e5      	bne.n	800eeda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2220      	movs	r2, #32
 800ef12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ef1c:	bf00      	nop
 800ef1e:	3754      	adds	r7, #84	@ 0x54
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef34:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2220      	movs	r2, #32
 800ef40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff feec 	bl	800ed28 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef50:	bf00      	nop
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef5c:	b0c0      	sub	sp, #256	@ 0x100
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ef70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef74:	68d9      	ldr	r1, [r3, #12]
 800ef76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	ea40 0301 	orr.w	r3, r0, r1
 800ef80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ef82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef86:	689a      	ldr	r2, [r3, #8]
 800ef88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef94:	695b      	ldr	r3, [r3, #20]
 800ef96:	431a      	orrs	r2, r3
 800ef98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef9c:	69db      	ldr	r3, [r3, #28]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800efa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800efb0:	f021 010c 	bic.w	r1, r1, #12
 800efb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800efbe:	430b      	orrs	r3, r1
 800efc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800efc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	695b      	ldr	r3, [r3, #20]
 800efca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800efce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efd2:	6999      	ldr	r1, [r3, #24]
 800efd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	ea40 0301 	orr.w	r3, r0, r1
 800efde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800efe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	4b8f      	ldr	r3, [pc, #572]	@ (800f224 <UART_SetConfig+0x2cc>)
 800efe8:	429a      	cmp	r2, r3
 800efea:	d005      	beq.n	800eff8 <UART_SetConfig+0xa0>
 800efec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	4b8d      	ldr	r3, [pc, #564]	@ (800f228 <UART_SetConfig+0x2d0>)
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d104      	bne.n	800f002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eff8:	f7fe f8ee 	bl	800d1d8 <HAL_RCC_GetPCLK2Freq>
 800effc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800f000:	e003      	b.n	800f00a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f002:	f7fe f8d5 	bl	800d1b0 <HAL_RCC_GetPCLK1Freq>
 800f006:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f014:	f040 810c 	bne.w	800f230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f01c:	2200      	movs	r2, #0
 800f01e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f022:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800f026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800f02a:	4622      	mov	r2, r4
 800f02c:	462b      	mov	r3, r5
 800f02e:	1891      	adds	r1, r2, r2
 800f030:	65b9      	str	r1, [r7, #88]	@ 0x58
 800f032:	415b      	adcs	r3, r3
 800f034:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f03a:	4621      	mov	r1, r4
 800f03c:	eb12 0801 	adds.w	r8, r2, r1
 800f040:	4629      	mov	r1, r5
 800f042:	eb43 0901 	adc.w	r9, r3, r1
 800f046:	f04f 0200 	mov.w	r2, #0
 800f04a:	f04f 0300 	mov.w	r3, #0
 800f04e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f05a:	4690      	mov	r8, r2
 800f05c:	4699      	mov	r9, r3
 800f05e:	4623      	mov	r3, r4
 800f060:	eb18 0303 	adds.w	r3, r8, r3
 800f064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f068:	462b      	mov	r3, r5
 800f06a:	eb49 0303 	adc.w	r3, r9, r3
 800f06e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f07e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800f082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800f086:	460b      	mov	r3, r1
 800f088:	18db      	adds	r3, r3, r3
 800f08a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f08c:	4613      	mov	r3, r2
 800f08e:	eb42 0303 	adc.w	r3, r2, r3
 800f092:	657b      	str	r3, [r7, #84]	@ 0x54
 800f094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800f098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800f09c:	f7f1 fdf4 	bl	8000c88 <__aeabi_uldivmod>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	4b61      	ldr	r3, [pc, #388]	@ (800f22c <UART_SetConfig+0x2d4>)
 800f0a6:	fba3 2302 	umull	r2, r3, r3, r2
 800f0aa:	095b      	lsrs	r3, r3, #5
 800f0ac:	011c      	lsls	r4, r3, #4
 800f0ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f0b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800f0bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800f0c0:	4642      	mov	r2, r8
 800f0c2:	464b      	mov	r3, r9
 800f0c4:	1891      	adds	r1, r2, r2
 800f0c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800f0c8:	415b      	adcs	r3, r3
 800f0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f0cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f0d0:	4641      	mov	r1, r8
 800f0d2:	eb12 0a01 	adds.w	sl, r2, r1
 800f0d6:	4649      	mov	r1, r9
 800f0d8:	eb43 0b01 	adc.w	fp, r3, r1
 800f0dc:	f04f 0200 	mov.w	r2, #0
 800f0e0:	f04f 0300 	mov.w	r3, #0
 800f0e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f0e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f0ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0f0:	4692      	mov	sl, r2
 800f0f2:	469b      	mov	fp, r3
 800f0f4:	4643      	mov	r3, r8
 800f0f6:	eb1a 0303 	adds.w	r3, sl, r3
 800f0fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0fe:	464b      	mov	r3, r9
 800f100:	eb4b 0303 	adc.w	r3, fp, r3
 800f104:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f114:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800f118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f11c:	460b      	mov	r3, r1
 800f11e:	18db      	adds	r3, r3, r3
 800f120:	643b      	str	r3, [r7, #64]	@ 0x40
 800f122:	4613      	mov	r3, r2
 800f124:	eb42 0303 	adc.w	r3, r2, r3
 800f128:	647b      	str	r3, [r7, #68]	@ 0x44
 800f12a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f12e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f132:	f7f1 fda9 	bl	8000c88 <__aeabi_uldivmod>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	4611      	mov	r1, r2
 800f13c:	4b3b      	ldr	r3, [pc, #236]	@ (800f22c <UART_SetConfig+0x2d4>)
 800f13e:	fba3 2301 	umull	r2, r3, r3, r1
 800f142:	095b      	lsrs	r3, r3, #5
 800f144:	2264      	movs	r2, #100	@ 0x64
 800f146:	fb02 f303 	mul.w	r3, r2, r3
 800f14a:	1acb      	subs	r3, r1, r3
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800f152:	4b36      	ldr	r3, [pc, #216]	@ (800f22c <UART_SetConfig+0x2d4>)
 800f154:	fba3 2302 	umull	r2, r3, r3, r2
 800f158:	095b      	lsrs	r3, r3, #5
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800f160:	441c      	add	r4, r3
 800f162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f166:	2200      	movs	r2, #0
 800f168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f16c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800f170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800f174:	4642      	mov	r2, r8
 800f176:	464b      	mov	r3, r9
 800f178:	1891      	adds	r1, r2, r2
 800f17a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800f17c:	415b      	adcs	r3, r3
 800f17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f184:	4641      	mov	r1, r8
 800f186:	1851      	adds	r1, r2, r1
 800f188:	6339      	str	r1, [r7, #48]	@ 0x30
 800f18a:	4649      	mov	r1, r9
 800f18c:	414b      	adcs	r3, r1
 800f18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f190:	f04f 0200 	mov.w	r2, #0
 800f194:	f04f 0300 	mov.w	r3, #0
 800f198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800f19c:	4659      	mov	r1, fp
 800f19e:	00cb      	lsls	r3, r1, #3
 800f1a0:	4651      	mov	r1, sl
 800f1a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f1a6:	4651      	mov	r1, sl
 800f1a8:	00ca      	lsls	r2, r1, #3
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	189b      	adds	r3, r3, r2
 800f1b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f1b8:	464b      	mov	r3, r9
 800f1ba:	460a      	mov	r2, r1
 800f1bc:	eb42 0303 	adc.w	r3, r2, r3
 800f1c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f1d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800f1d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f1d8:	460b      	mov	r3, r1
 800f1da:	18db      	adds	r3, r3, r3
 800f1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1de:	4613      	mov	r3, r2
 800f1e0:	eb42 0303 	adc.w	r3, r2, r3
 800f1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f1e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f1ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800f1ee:	f7f1 fd4b 	bl	8000c88 <__aeabi_uldivmod>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f22c <UART_SetConfig+0x2d4>)
 800f1f8:	fba3 1302 	umull	r1, r3, r3, r2
 800f1fc:	095b      	lsrs	r3, r3, #5
 800f1fe:	2164      	movs	r1, #100	@ 0x64
 800f200:	fb01 f303 	mul.w	r3, r1, r3
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	00db      	lsls	r3, r3, #3
 800f208:	3332      	adds	r3, #50	@ 0x32
 800f20a:	4a08      	ldr	r2, [pc, #32]	@ (800f22c <UART_SetConfig+0x2d4>)
 800f20c:	fba2 2303 	umull	r2, r3, r2, r3
 800f210:	095b      	lsrs	r3, r3, #5
 800f212:	f003 0207 	and.w	r2, r3, #7
 800f216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4422      	add	r2, r4
 800f21e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f220:	e106      	b.n	800f430 <UART_SetConfig+0x4d8>
 800f222:	bf00      	nop
 800f224:	40011000 	.word	0x40011000
 800f228:	40011400 	.word	0x40011400
 800f22c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f234:	2200      	movs	r2, #0
 800f236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f23a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800f23e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800f242:	4642      	mov	r2, r8
 800f244:	464b      	mov	r3, r9
 800f246:	1891      	adds	r1, r2, r2
 800f248:	6239      	str	r1, [r7, #32]
 800f24a:	415b      	adcs	r3, r3
 800f24c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f24e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f252:	4641      	mov	r1, r8
 800f254:	1854      	adds	r4, r2, r1
 800f256:	4649      	mov	r1, r9
 800f258:	eb43 0501 	adc.w	r5, r3, r1
 800f25c:	f04f 0200 	mov.w	r2, #0
 800f260:	f04f 0300 	mov.w	r3, #0
 800f264:	00eb      	lsls	r3, r5, #3
 800f266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f26a:	00e2      	lsls	r2, r4, #3
 800f26c:	4614      	mov	r4, r2
 800f26e:	461d      	mov	r5, r3
 800f270:	4643      	mov	r3, r8
 800f272:	18e3      	adds	r3, r4, r3
 800f274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f278:	464b      	mov	r3, r9
 800f27a:	eb45 0303 	adc.w	r3, r5, r3
 800f27e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f28e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f292:	f04f 0200 	mov.w	r2, #0
 800f296:	f04f 0300 	mov.w	r3, #0
 800f29a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800f29e:	4629      	mov	r1, r5
 800f2a0:	008b      	lsls	r3, r1, #2
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	008a      	lsls	r2, r1, #2
 800f2ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f2b0:	f7f1 fcea 	bl	8000c88 <__aeabi_uldivmod>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	4b60      	ldr	r3, [pc, #384]	@ (800f43c <UART_SetConfig+0x4e4>)
 800f2ba:	fba3 2302 	umull	r2, r3, r3, r2
 800f2be:	095b      	lsrs	r3, r3, #5
 800f2c0:	011c      	lsls	r4, r3, #4
 800f2c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f2cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f2d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800f2d4:	4642      	mov	r2, r8
 800f2d6:	464b      	mov	r3, r9
 800f2d8:	1891      	adds	r1, r2, r2
 800f2da:	61b9      	str	r1, [r7, #24]
 800f2dc:	415b      	adcs	r3, r3
 800f2de:	61fb      	str	r3, [r7, #28]
 800f2e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2e4:	4641      	mov	r1, r8
 800f2e6:	1851      	adds	r1, r2, r1
 800f2e8:	6139      	str	r1, [r7, #16]
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	414b      	adcs	r3, r1
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	f04f 0200 	mov.w	r2, #0
 800f2f4:	f04f 0300 	mov.w	r3, #0
 800f2f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f2fc:	4659      	mov	r1, fp
 800f2fe:	00cb      	lsls	r3, r1, #3
 800f300:	4651      	mov	r1, sl
 800f302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f306:	4651      	mov	r1, sl
 800f308:	00ca      	lsls	r2, r1, #3
 800f30a:	4610      	mov	r0, r2
 800f30c:	4619      	mov	r1, r3
 800f30e:	4603      	mov	r3, r0
 800f310:	4642      	mov	r2, r8
 800f312:	189b      	adds	r3, r3, r2
 800f314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f318:	464b      	mov	r3, r9
 800f31a:	460a      	mov	r2, r1
 800f31c:	eb42 0303 	adc.w	r3, r2, r3
 800f320:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f32e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f330:	f04f 0200 	mov.w	r2, #0
 800f334:	f04f 0300 	mov.w	r3, #0
 800f338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800f33c:	4649      	mov	r1, r9
 800f33e:	008b      	lsls	r3, r1, #2
 800f340:	4641      	mov	r1, r8
 800f342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f346:	4641      	mov	r1, r8
 800f348:	008a      	lsls	r2, r1, #2
 800f34a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f34e:	f7f1 fc9b 	bl	8000c88 <__aeabi_uldivmod>
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	4611      	mov	r1, r2
 800f358:	4b38      	ldr	r3, [pc, #224]	@ (800f43c <UART_SetConfig+0x4e4>)
 800f35a:	fba3 2301 	umull	r2, r3, r3, r1
 800f35e:	095b      	lsrs	r3, r3, #5
 800f360:	2264      	movs	r2, #100	@ 0x64
 800f362:	fb02 f303 	mul.w	r3, r2, r3
 800f366:	1acb      	subs	r3, r1, r3
 800f368:	011b      	lsls	r3, r3, #4
 800f36a:	3332      	adds	r3, #50	@ 0x32
 800f36c:	4a33      	ldr	r2, [pc, #204]	@ (800f43c <UART_SetConfig+0x4e4>)
 800f36e:	fba2 2303 	umull	r2, r3, r2, r3
 800f372:	095b      	lsrs	r3, r3, #5
 800f374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f378:	441c      	add	r4, r3
 800f37a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f37e:	2200      	movs	r2, #0
 800f380:	673b      	str	r3, [r7, #112]	@ 0x70
 800f382:	677a      	str	r2, [r7, #116]	@ 0x74
 800f384:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800f388:	4642      	mov	r2, r8
 800f38a:	464b      	mov	r3, r9
 800f38c:	1891      	adds	r1, r2, r2
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	415b      	adcs	r3, r3
 800f392:	60fb      	str	r3, [r7, #12]
 800f394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f398:	4641      	mov	r1, r8
 800f39a:	1851      	adds	r1, r2, r1
 800f39c:	6039      	str	r1, [r7, #0]
 800f39e:	4649      	mov	r1, r9
 800f3a0:	414b      	adcs	r3, r1
 800f3a2:	607b      	str	r3, [r7, #4]
 800f3a4:	f04f 0200 	mov.w	r2, #0
 800f3a8:	f04f 0300 	mov.w	r3, #0
 800f3ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f3b0:	4659      	mov	r1, fp
 800f3b2:	00cb      	lsls	r3, r1, #3
 800f3b4:	4651      	mov	r1, sl
 800f3b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f3ba:	4651      	mov	r1, sl
 800f3bc:	00ca      	lsls	r2, r1, #3
 800f3be:	4610      	mov	r0, r2
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	4642      	mov	r2, r8
 800f3c6:	189b      	adds	r3, r3, r2
 800f3c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f3ca:	464b      	mov	r3, r9
 800f3cc:	460a      	mov	r2, r1
 800f3ce:	eb42 0303 	adc.w	r3, r2, r3
 800f3d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	663b      	str	r3, [r7, #96]	@ 0x60
 800f3de:	667a      	str	r2, [r7, #100]	@ 0x64
 800f3e0:	f04f 0200 	mov.w	r2, #0
 800f3e4:	f04f 0300 	mov.w	r3, #0
 800f3e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800f3ec:	4649      	mov	r1, r9
 800f3ee:	008b      	lsls	r3, r1, #2
 800f3f0:	4641      	mov	r1, r8
 800f3f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f3f6:	4641      	mov	r1, r8
 800f3f8:	008a      	lsls	r2, r1, #2
 800f3fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f3fe:	f7f1 fc43 	bl	8000c88 <__aeabi_uldivmod>
 800f402:	4602      	mov	r2, r0
 800f404:	460b      	mov	r3, r1
 800f406:	4b0d      	ldr	r3, [pc, #52]	@ (800f43c <UART_SetConfig+0x4e4>)
 800f408:	fba3 1302 	umull	r1, r3, r3, r2
 800f40c:	095b      	lsrs	r3, r3, #5
 800f40e:	2164      	movs	r1, #100	@ 0x64
 800f410:	fb01 f303 	mul.w	r3, r1, r3
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	011b      	lsls	r3, r3, #4
 800f418:	3332      	adds	r3, #50	@ 0x32
 800f41a:	4a08      	ldr	r2, [pc, #32]	@ (800f43c <UART_SetConfig+0x4e4>)
 800f41c:	fba2 2303 	umull	r2, r3, r2, r3
 800f420:	095b      	lsrs	r3, r3, #5
 800f422:	f003 020f 	and.w	r2, r3, #15
 800f426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4422      	add	r2, r4
 800f42e:	609a      	str	r2, [r3, #8]
}
 800f430:	bf00      	nop
 800f432:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f436:	46bd      	mov	sp, r7
 800f438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f43c:	51eb851f 	.word	0x51eb851f

0800f440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f440:	b580      	push	{r7, lr}
 800f442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f444:	4b05      	ldr	r3, [pc, #20]	@ (800f45c <SysTick_Handler+0x1c>)
 800f446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f448:	f002 f838 	bl	80114bc <xTaskGetSchedulerState>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d001      	beq.n	800f456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f452:	f002 ff69 	bl	8012328 <xPortSysTickHandler>
  }
}
 800f456:	bf00      	nop
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	e000e010 	.word	0xe000e010

0800f460 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4a07      	ldr	r2, [pc, #28]	@ (800f48c <vApplicationGetIdleTaskMemory+0x2c>)
 800f470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	4a06      	ldr	r2, [pc, #24]	@ (800f490 <vApplicationGetIdleTaskMemory+0x30>)
 800f476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2280      	movs	r2, #128	@ 0x80
 800f47c:	601a      	str	r2, [r3, #0]
}
 800f47e:	bf00      	nop
 800f480:	3714      	adds	r7, #20
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	200024d4 	.word	0x200024d4
 800f490:	2000257c 	.word	0x2000257c

0800f494 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f494:	b480      	push	{r7}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	4a07      	ldr	r2, [pc, #28]	@ (800f4c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800f4a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	4a06      	ldr	r2, [pc, #24]	@ (800f4c4 <vApplicationGetTimerTaskMemory+0x30>)
 800f4aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f4b2:	601a      	str	r2, [r3, #0]
}
 800f4b4:	bf00      	nop
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr
 800f4c0:	2000277c 	.word	0x2000277c
 800f4c4:	20002824 	.word	0x20002824

0800f4c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f4ce:	2020      	movs	r0, #32
 800f4d0:	f002 ffbc 	bl	801244c <pvPortMalloc>
 800f4d4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00a      	beq.n	800f4f2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 f9aa 	bl	800f840 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f4f2:	687b      	ldr	r3, [r7, #4]
	}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b090      	sub	sp, #64	@ 0x40
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800f512:	2300      	movs	r3, #0
 800f514:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10b      	bne.n	800f534 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f520:	f383 8811 	msr	BASEPRI, r3
 800f524:	f3bf 8f6f 	isb	sy
 800f528:	f3bf 8f4f 	dsb	sy
 800f52c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f52e:	bf00      	nop
 800f530:	bf00      	nop
 800f532:	e7fd      	b.n	800f530 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f53a:	d30b      	bcc.n	800f554 <xEventGroupWaitBits+0x58>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	61fb      	str	r3, [r7, #28]
}
 800f54e:	bf00      	nop
 800f550:	bf00      	nop
 800f552:	e7fd      	b.n	800f550 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10b      	bne.n	800f572 <xEventGroupWaitBits+0x76>
	__asm volatile
 800f55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55e:	f383 8811 	msr	BASEPRI, r3
 800f562:	f3bf 8f6f 	isb	sy
 800f566:	f3bf 8f4f 	dsb	sy
 800f56a:	61bb      	str	r3, [r7, #24]
}
 800f56c:	bf00      	nop
 800f56e:	bf00      	nop
 800f570:	e7fd      	b.n	800f56e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f572:	f001 ffa3 	bl	80114bc <xTaskGetSchedulerState>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d102      	bne.n	800f582 <xEventGroupWaitBits+0x86>
 800f57c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <xEventGroupWaitBits+0x8a>
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <xEventGroupWaitBits+0x8c>
 800f586:	2300      	movs	r3, #0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10b      	bne.n	800f5a4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800f58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	617b      	str	r3, [r7, #20]
}
 800f59e:	bf00      	nop
 800f5a0:	bf00      	nop
 800f5a2:	e7fd      	b.n	800f5a0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800f5a4:	f001 faf4 	bl	8010b90 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800f5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5b4:	f000 f90d 	bl	800f7d2 <prvTestWaitCondition>
 800f5b8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800f5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00e      	beq.n	800f5de <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800f5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d028      	beq.n	800f620 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	43db      	mvns	r3, r3
 800f5d6:	401a      	ands	r2, r3
 800f5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5da:	601a      	str	r2, [r3, #0]
 800f5dc:	e020      	b.n	800f620 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800f5de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d104      	bne.n	800f5ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800f5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5ec:	e018      	b.n	800f620 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d003      	beq.n	800f5fc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d003      	beq.n	800f60a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800f602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f608:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800f60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f60c:	1d18      	adds	r0, r3, #4
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f612:	4313      	orrs	r3, r2
 800f614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f616:	4619      	mov	r1, r3
 800f618:	f001 fcbc 	bl	8010f94 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800f61c:	2300      	movs	r3, #0
 800f61e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800f620:	f001 fac4 	bl	8010bac <xTaskResumeAll>
 800f624:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800f626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d031      	beq.n	800f690 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d107      	bne.n	800f642 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800f632:	4b1a      	ldr	r3, [pc, #104]	@ (800f69c <xEventGroupWaitBits+0x1a0>)
 800f634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800f642:	f002 f8b5 	bl	80117b0 <uxTaskResetEventItemValue>
 800f646:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800f648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f64a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d11a      	bne.n	800f688 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800f652:	f002 fdd9 	bl	8012208 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800f656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800f65c:	683a      	ldr	r2, [r7, #0]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f662:	f000 f8b6 	bl	800f7d2 <prvTestWaitCondition>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d009      	beq.n	800f680 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d006      	beq.n	800f680 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	43db      	mvns	r3, r3
 800f67a:	401a      	ands	r2, r3
 800f67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f67e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f680:	2301      	movs	r3, #1
 800f682:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800f684:	f002 fdf2 	bl	801226c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f68a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f692:	4618      	mov	r0, r3
 800f694:	3740      	adds	r7, #64	@ 0x40
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	e000ed04 	.word	0xe000ed04

0800f6a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08e      	sub	sp, #56	@ 0x38
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10b      	bne.n	800f6d4 <xEventGroupSetBits+0x34>
	__asm volatile
 800f6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c0:	f383 8811 	msr	BASEPRI, r3
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	613b      	str	r3, [r7, #16]
}
 800f6ce:	bf00      	nop
 800f6d0:	bf00      	nop
 800f6d2:	e7fd      	b.n	800f6d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f6da:	d30b      	bcc.n	800f6f4 <xEventGroupSetBits+0x54>
	__asm volatile
 800f6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6e0:	f383 8811 	msr	BASEPRI, r3
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	f3bf 8f4f 	dsb	sy
 800f6ec:	60fb      	str	r3, [r7, #12]
}
 800f6ee:	bf00      	nop
 800f6f0:	bf00      	nop
 800f6f2:	e7fd      	b.n	800f6f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800f700:	f001 fa46 	bl	8010b90 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	431a      	orrs	r2, r3
 800f712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f714:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f716:	e03c      	b.n	800f792 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800f724:	2300      	movs	r3, #0
 800f726:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f728:	69bb      	ldr	r3, [r7, #24]
 800f72a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800f72e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f736:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d108      	bne.n	800f754 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	4013      	ands	r3, r2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00b      	beq.n	800f766 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800f74e:	2301      	movs	r3, #1
 800f750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f752:	e008      	b.n	800f766 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	4013      	ands	r3, r2
 800f75c:	69ba      	ldr	r2, [r7, #24]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d101      	bne.n	800f766 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f762:	2301      	movs	r3, #1
 800f764:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d010      	beq.n	800f78e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f772:	2b00      	cmp	r3, #0
 800f774:	d003      	beq.n	800f77e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f786:	4619      	mov	r1, r3
 800f788:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f78a:	f001 fcd1 	bl	8011130 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800f792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	429a      	cmp	r2, r3
 800f798:	d1be      	bne.n	800f718 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a0:	43db      	mvns	r3, r3
 800f7a2:	401a      	ands	r2, r3
 800f7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f7a8:	f001 fa00 	bl	8010bac <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ae:	681b      	ldr	r3, [r3, #0]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3738      	adds	r7, #56	@ 0x38
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7ff ff6b 	bl	800f6a0 <xEventGroupSetBits>
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	b087      	sub	sp, #28
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	60f8      	str	r0, [r7, #12]
 800f7da:	60b9      	str	r1, [r7, #8]
 800f7dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d107      	bne.n	800f7f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00a      	beq.n	800f808 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	617b      	str	r3, [r7, #20]
 800f7f6:	e007      	b.n	800f808 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	429a      	cmp	r2, r3
 800f802:	d101      	bne.n	800f808 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f804:	2301      	movs	r3, #1
 800f806:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f808:	697b      	ldr	r3, [r7, #20]
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	371c      	adds	r7, #28
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
	...

0800f818 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	4804      	ldr	r0, [pc, #16]	@ (800f83c <xEventGroupSetBitsFromISR+0x24>)
 800f82c:	f002 fb9a 	bl	8011f64 <xTimerPendFunctionCallFromISR>
 800f830:	6178      	str	r0, [r7, #20]

		return xReturn;
 800f832:	697b      	ldr	r3, [r7, #20]
	}
 800f834:	4618      	mov	r0, r3
 800f836:	3718      	adds	r7, #24
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	0800f7b9 	.word	0x0800f7b9

0800f840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f103 0208 	add.w	r2, r3, #8
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f04f 32ff 	mov.w	r2, #4294967295
 800f858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f103 0208 	add.w	r2, r3, #8
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f103 0208 	add.w	r2, r3, #8
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f874:	bf00      	nop
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f88e:	bf00      	nop
 800f890:	370c      	adds	r7, #12
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f89a:	b480      	push	{r7}
 800f89c:	b085      	sub	sp, #20
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	689a      	ldr	r2, [r3, #8]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	683a      	ldr	r2, [r7, #0]
 800f8be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	683a      	ldr	r2, [r7, #0]
 800f8c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	601a      	str	r2, [r3, #0]
}
 800f8d6:	bf00      	nop
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f8e2:	b480      	push	{r7}
 800f8e4:	b085      	sub	sp, #20
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f8:	d103      	bne.n	800f902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	691b      	ldr	r3, [r3, #16]
 800f8fe:	60fb      	str	r3, [r7, #12]
 800f900:	e00c      	b.n	800f91c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	3308      	adds	r3, #8
 800f906:	60fb      	str	r3, [r7, #12]
 800f908:	e002      	b.n	800f910 <vListInsert+0x2e>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	60fb      	str	r3, [r7, #12]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d2f6      	bcs.n	800f90a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	685a      	ldr	r2, [r3, #4]
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	683a      	ldr	r2, [r7, #0]
 800f936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	601a      	str	r2, [r3, #0]
}
 800f948:	bf00      	nop
 800f94a:	3714      	adds	r7, #20
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f954:	b480      	push	{r7}
 800f956:	b085      	sub	sp, #20
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	691b      	ldr	r3, [r3, #16]
 800f960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	6892      	ldr	r2, [r2, #8]
 800f96a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	6852      	ldr	r2, [r2, #4]
 800f974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d103      	bne.n	800f988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	689a      	ldr	r2, [r3, #8]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	1e5a      	subs	r2, r3, #1
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3714      	adds	r7, #20
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10b      	bne.n	800f9d4 <xQueueGenericReset+0x2c>
	__asm volatile
 800f9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	60bb      	str	r3, [r7, #8]
}
 800f9ce:	bf00      	nop
 800f9d0:	bf00      	nop
 800f9d2:	e7fd      	b.n	800f9d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f9d4:	f002 fc18 	bl	8012208 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e0:	68f9      	ldr	r1, [r7, #12]
 800f9e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f9e4:	fb01 f303 	mul.w	r3, r1, r3
 800f9e8:	441a      	add	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa04:	3b01      	subs	r3, #1
 800fa06:	68f9      	ldr	r1, [r7, #12]
 800fa08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fa0a:	fb01 f303 	mul.w	r3, r1, r3
 800fa0e:	441a      	add	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	22ff      	movs	r2, #255	@ 0xff
 800fa18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	22ff      	movs	r2, #255	@ 0xff
 800fa20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d114      	bne.n	800fa54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d01a      	beq.n	800fa68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	3310      	adds	r3, #16
 800fa36:	4618      	mov	r0, r3
 800fa38:	f001 fb16 	bl	8011068 <xTaskRemoveFromEventList>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d012      	beq.n	800fa68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fa42:	4b0d      	ldr	r3, [pc, #52]	@ (800fa78 <xQueueGenericReset+0xd0>)
 800fa44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa48:	601a      	str	r2, [r3, #0]
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	f3bf 8f6f 	isb	sy
 800fa52:	e009      	b.n	800fa68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	3310      	adds	r3, #16
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fef1 	bl	800f840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3324      	adds	r3, #36	@ 0x24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7ff feec 	bl	800f840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fa68:	f002 fc00 	bl	801226c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fa6c:	2301      	movs	r3, #1
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	e000ed04 	.word	0xe000ed04

0800fa7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08e      	sub	sp, #56	@ 0x38
 800fa80:	af02      	add	r7, sp, #8
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
 800fa88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10b      	bne.n	800faa8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800faa2:	bf00      	nop
 800faa4:	bf00      	nop
 800faa6:	e7fd      	b.n	800faa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d10b      	bne.n	800fac6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800faae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fac0:	bf00      	nop
 800fac2:	bf00      	nop
 800fac4:	e7fd      	b.n	800fac2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <xQueueGenericCreateStatic+0x56>
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <xQueueGenericCreateStatic+0x5a>
 800fad2:	2301      	movs	r3, #1
 800fad4:	e000      	b.n	800fad8 <xQueueGenericCreateStatic+0x5c>
 800fad6:	2300      	movs	r3, #0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d10b      	bne.n	800faf4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	623b      	str	r3, [r7, #32]
}
 800faee:	bf00      	nop
 800faf0:	bf00      	nop
 800faf2:	e7fd      	b.n	800faf0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d102      	bne.n	800fb00 <xQueueGenericCreateStatic+0x84>
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d101      	bne.n	800fb04 <xQueueGenericCreateStatic+0x88>
 800fb00:	2301      	movs	r3, #1
 800fb02:	e000      	b.n	800fb06 <xQueueGenericCreateStatic+0x8a>
 800fb04:	2300      	movs	r3, #0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10b      	bne.n	800fb22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0e:	f383 8811 	msr	BASEPRI, r3
 800fb12:	f3bf 8f6f 	isb	sy
 800fb16:	f3bf 8f4f 	dsb	sy
 800fb1a:	61fb      	str	r3, [r7, #28]
}
 800fb1c:	bf00      	nop
 800fb1e:	bf00      	nop
 800fb20:	e7fd      	b.n	800fb1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fb22:	2350      	movs	r3, #80	@ 0x50
 800fb24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2b50      	cmp	r3, #80	@ 0x50
 800fb2a:	d00b      	beq.n	800fb44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb30:	f383 8811 	msr	BASEPRI, r3
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	f3bf 8f4f 	dsb	sy
 800fb3c:	61bb      	str	r3, [r7, #24]
}
 800fb3e:	bf00      	nop
 800fb40:	bf00      	nop
 800fb42:	e7fd      	b.n	800fb40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fb44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00d      	beq.n	800fb6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	4613      	mov	r3, r2
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	68b9      	ldr	r1, [r7, #8]
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f000 f840 	bl	800fbec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3730      	adds	r7, #48	@ 0x30
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b08a      	sub	sp, #40	@ 0x28
 800fb7a:	af02      	add	r7, sp, #8
 800fb7c:	60f8      	str	r0, [r7, #12]
 800fb7e:	60b9      	str	r1, [r7, #8]
 800fb80:	4613      	mov	r3, r2
 800fb82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10b      	bne.n	800fba2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	613b      	str	r3, [r7, #16]
}
 800fb9c:	bf00      	nop
 800fb9e:	bf00      	nop
 800fba0:	e7fd      	b.n	800fb9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	fb02 f303 	mul.w	r3, r2, r3
 800fbaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	3350      	adds	r3, #80	@ 0x50
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f002 fc4b 	bl	801244c <pvPortMalloc>
 800fbb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d011      	beq.n	800fbe2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	3350      	adds	r3, #80	@ 0x50
 800fbc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fbd0:	79fa      	ldrb	r2, [r7, #7]
 800fbd2:	69bb      	ldr	r3, [r7, #24]
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	697a      	ldr	r2, [r7, #20]
 800fbda:	68b9      	ldr	r1, [r7, #8]
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f000 f805 	bl	800fbec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fbe2:	69bb      	ldr	r3, [r7, #24]
	}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3720      	adds	r7, #32
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d103      	bne.n	800fc08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	69ba      	ldr	r2, [r7, #24]
 800fc04:	601a      	str	r2, [r3, #0]
 800fc06:	e002      	b.n	800fc0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fc1a:	2101      	movs	r1, #1
 800fc1c:	69b8      	ldr	r0, [r7, #24]
 800fc1e:	f7ff fec3 	bl	800f9a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	78fa      	ldrb	r2, [r7, #3]
 800fc26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fc2a:	bf00      	nop
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b082      	sub	sp, #8
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00e      	beq.n	800fc5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fc52:	2300      	movs	r3, #0
 800fc54:	2200      	movs	r2, #0
 800fc56:	2100      	movs	r1, #0
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 f81d 	bl	800fc98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fc5e:	bf00      	nop
 800fc60:	3708      	adds	r7, #8
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b086      	sub	sp, #24
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fc70:	2301      	movs	r3, #1
 800fc72:	617b      	str	r3, [r7, #20]
 800fc74:	2300      	movs	r3, #0
 800fc76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fc78:	79fb      	ldrb	r3, [r7, #7]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	6939      	ldr	r1, [r7, #16]
 800fc7e:	6978      	ldr	r0, [r7, #20]
 800fc80:	f7ff ff79 	bl	800fb76 <xQueueGenericCreate>
 800fc84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7ff ffd3 	bl	800fc32 <prvInitialiseMutex>

		return xNewQueue;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
	}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3718      	adds	r7, #24
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
	...

0800fc98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b08e      	sub	sp, #56	@ 0x38
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
 800fca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fca6:	2300      	movs	r3, #0
 800fca8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fcae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10b      	bne.n	800fccc <xQueueGenericSend+0x34>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fcc6:	bf00      	nop
 800fcc8:	bf00      	nop
 800fcca:	e7fd      	b.n	800fcc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d103      	bne.n	800fcda <xQueueGenericSend+0x42>
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <xQueueGenericSend+0x46>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e000      	b.n	800fce0 <xQueueGenericSend+0x48>
 800fcde:	2300      	movs	r3, #0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d10b      	bne.n	800fcfc <xQueueGenericSend+0x64>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fcf6:	bf00      	nop
 800fcf8:	bf00      	nop
 800fcfa:	e7fd      	b.n	800fcf8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d103      	bne.n	800fd0a <xQueueGenericSend+0x72>
 800fd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d101      	bne.n	800fd0e <xQueueGenericSend+0x76>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e000      	b.n	800fd10 <xQueueGenericSend+0x78>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10b      	bne.n	800fd2c <xQueueGenericSend+0x94>
	__asm volatile
 800fd14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd18:	f383 8811 	msr	BASEPRI, r3
 800fd1c:	f3bf 8f6f 	isb	sy
 800fd20:	f3bf 8f4f 	dsb	sy
 800fd24:	623b      	str	r3, [r7, #32]
}
 800fd26:	bf00      	nop
 800fd28:	bf00      	nop
 800fd2a:	e7fd      	b.n	800fd28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd2c:	f001 fbc6 	bl	80114bc <xTaskGetSchedulerState>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d102      	bne.n	800fd3c <xQueueGenericSend+0xa4>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d101      	bne.n	800fd40 <xQueueGenericSend+0xa8>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e000      	b.n	800fd42 <xQueueGenericSend+0xaa>
 800fd40:	2300      	movs	r3, #0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d10b      	bne.n	800fd5e <xQueueGenericSend+0xc6>
	__asm volatile
 800fd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd4a:	f383 8811 	msr	BASEPRI, r3
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f3bf 8f4f 	dsb	sy
 800fd56:	61fb      	str	r3, [r7, #28]
}
 800fd58:	bf00      	nop
 800fd5a:	bf00      	nop
 800fd5c:	e7fd      	b.n	800fd5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd5e:	f002 fa53 	bl	8012208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d302      	bcc.n	800fd74 <xQueueGenericSend+0xdc>
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d129      	bne.n	800fdc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd74:	683a      	ldr	r2, [r7, #0]
 800fd76:	68b9      	ldr	r1, [r7, #8]
 800fd78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fd7a:	f000 fb37 	bl	80103ec <prvCopyDataToQueue>
 800fd7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d010      	beq.n	800fdaa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	3324      	adds	r3, #36	@ 0x24
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f001 f96b 	bl	8011068 <xTaskRemoveFromEventList>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d013      	beq.n	800fdc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fd98:	4b3f      	ldr	r3, [pc, #252]	@ (800fe98 <xQueueGenericSend+0x200>)
 800fd9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd9e:	601a      	str	r2, [r3, #0]
 800fda0:	f3bf 8f4f 	dsb	sy
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	e00a      	b.n	800fdc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d007      	beq.n	800fdc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fdb0:	4b39      	ldr	r3, [pc, #228]	@ (800fe98 <xQueueGenericSend+0x200>)
 800fdb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdb6:	601a      	str	r2, [r3, #0]
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fdc0:	f002 fa54 	bl	801226c <vPortExitCritical>
				return pdPASS;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e063      	b.n	800fe90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d103      	bne.n	800fdd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fdce:	f002 fa4d 	bl	801226c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	e05c      	b.n	800fe90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d106      	bne.n	800fdea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fddc:	f107 0314 	add.w	r3, r7, #20
 800fde0:	4618      	mov	r0, r3
 800fde2:	f001 fa09 	bl	80111f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fde6:	2301      	movs	r3, #1
 800fde8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fdea:	f002 fa3f 	bl	801226c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fdee:	f000 fecf 	bl	8010b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdf2:	f002 fa09 	bl	8012208 <vPortEnterCritical>
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fdfc:	b25b      	sxtb	r3, r3
 800fdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe02:	d103      	bne.n	800fe0c <xQueueGenericSend+0x174>
 800fe04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe06:	2200      	movs	r2, #0
 800fe08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fe12:	b25b      	sxtb	r3, r3
 800fe14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe18:	d103      	bne.n	800fe22 <xQueueGenericSend+0x18a>
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fe22:	f002 fa23 	bl	801226c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe26:	1d3a      	adds	r2, r7, #4
 800fe28:	f107 0314 	add.w	r3, r7, #20
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f001 f9f8 	bl	8011224 <xTaskCheckForTimeOut>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d124      	bne.n	800fe84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fe3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe3c:	f000 fbce 	bl	80105dc <prvIsQueueFull>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d018      	beq.n	800fe78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fe46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe48:	3310      	adds	r3, #16
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f001 f87a 	bl	8010f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fe54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe56:	f000 fb59 	bl	801050c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fe5a:	f000 fea7 	bl	8010bac <xTaskResumeAll>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f47f af7c 	bne.w	800fd5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fe66:	4b0c      	ldr	r3, [pc, #48]	@ (800fe98 <xQueueGenericSend+0x200>)
 800fe68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	f3bf 8f4f 	dsb	sy
 800fe72:	f3bf 8f6f 	isb	sy
 800fe76:	e772      	b.n	800fd5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fe78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe7a:	f000 fb47 	bl	801050c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe7e:	f000 fe95 	bl	8010bac <xTaskResumeAll>
 800fe82:	e76c      	b.n	800fd5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fe84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe86:	f000 fb41 	bl	801050c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe8a:	f000 fe8f 	bl	8010bac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fe8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3738      	adds	r7, #56	@ 0x38
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b090      	sub	sp, #64	@ 0x40
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
 800fea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800feae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10b      	bne.n	800fecc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fec6:	bf00      	nop
 800fec8:	bf00      	nop
 800feca:	e7fd      	b.n	800fec8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d103      	bne.n	800feda <xQueueGenericSendFromISR+0x3e>
 800fed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <xQueueGenericSendFromISR+0x42>
 800feda:	2301      	movs	r3, #1
 800fedc:	e000      	b.n	800fee0 <xQueueGenericSendFromISR+0x44>
 800fede:	2300      	movs	r3, #0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10b      	bne.n	800fefc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fef6:	bf00      	nop
 800fef8:	bf00      	nop
 800fefa:	e7fd      	b.n	800fef8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d103      	bne.n	800ff0a <xQueueGenericSendFromISR+0x6e>
 800ff02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d101      	bne.n	800ff0e <xQueueGenericSendFromISR+0x72>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e000      	b.n	800ff10 <xQueueGenericSendFromISR+0x74>
 800ff0e:	2300      	movs	r3, #0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d10b      	bne.n	800ff2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff18:	f383 8811 	msr	BASEPRI, r3
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	f3bf 8f4f 	dsb	sy
 800ff24:	623b      	str	r3, [r7, #32]
}
 800ff26:	bf00      	nop
 800ff28:	bf00      	nop
 800ff2a:	e7fd      	b.n	800ff28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff2c:	f002 fa4c 	bl	80123c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ff30:	f3ef 8211 	mrs	r2, BASEPRI
 800ff34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	61fa      	str	r2, [r7, #28]
 800ff46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ff48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d302      	bcc.n	800ff5e <xQueueGenericSendFromISR+0xc2>
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d12f      	bne.n	800ffbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ff6e:	683a      	ldr	r2, [r7, #0]
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ff74:	f000 fa3a 	bl	80103ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ff78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ff7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff80:	d112      	bne.n	800ffa8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d016      	beq.n	800ffb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff8c:	3324      	adds	r3, #36	@ 0x24
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f001 f86a 	bl	8011068 <xTaskRemoveFromEventList>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00e      	beq.n	800ffb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00b      	beq.n	800ffb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	601a      	str	r2, [r3, #0]
 800ffa6:	e007      	b.n	800ffb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ffa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ffac:	3301      	adds	r3, #1
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	b25a      	sxtb	r2, r3
 800ffb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ffbc:	e001      	b.n	800ffc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ffcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ffce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3740      	adds	r7, #64	@ 0x40
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b08c      	sub	sp, #48	@ 0x30
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ffec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10b      	bne.n	801000a <xQueueReceive+0x32>
	__asm volatile
 800fff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff6:	f383 8811 	msr	BASEPRI, r3
 800fffa:	f3bf 8f6f 	isb	sy
 800fffe:	f3bf 8f4f 	dsb	sy
 8010002:	623b      	str	r3, [r7, #32]
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop
 8010008:	e7fd      	b.n	8010006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d103      	bne.n	8010018 <xQueueReceive+0x40>
 8010010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010014:	2b00      	cmp	r3, #0
 8010016:	d101      	bne.n	801001c <xQueueReceive+0x44>
 8010018:	2301      	movs	r3, #1
 801001a:	e000      	b.n	801001e <xQueueReceive+0x46>
 801001c:	2300      	movs	r3, #0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d10b      	bne.n	801003a <xQueueReceive+0x62>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	61fb      	str	r3, [r7, #28]
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop
 8010038:	e7fd      	b.n	8010036 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801003a:	f001 fa3f 	bl	80114bc <xTaskGetSchedulerState>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d102      	bne.n	801004a <xQueueReceive+0x72>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d101      	bne.n	801004e <xQueueReceive+0x76>
 801004a:	2301      	movs	r3, #1
 801004c:	e000      	b.n	8010050 <xQueueReceive+0x78>
 801004e:	2300      	movs	r3, #0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10b      	bne.n	801006c <xQueueReceive+0x94>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	61bb      	str	r3, [r7, #24]
}
 8010066:	bf00      	nop
 8010068:	bf00      	nop
 801006a:	e7fd      	b.n	8010068 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801006c:	f002 f8cc 	bl	8012208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010074:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010078:	2b00      	cmp	r3, #0
 801007a:	d01f      	beq.n	80100bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801007c:	68b9      	ldr	r1, [r7, #8]
 801007e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010080:	f000 fa1e 	bl	80104c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010086:	1e5a      	subs	r2, r3, #1
 8010088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801008c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00f      	beq.n	80100b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010096:	3310      	adds	r3, #16
 8010098:	4618      	mov	r0, r3
 801009a:	f000 ffe5 	bl	8011068 <xTaskRemoveFromEventList>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d007      	beq.n	80100b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80100a4:	4b3c      	ldr	r3, [pc, #240]	@ (8010198 <xQueueReceive+0x1c0>)
 80100a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80100b4:	f002 f8da 	bl	801226c <vPortExitCritical>
				return pdPASS;
 80100b8:	2301      	movs	r3, #1
 80100ba:	e069      	b.n	8010190 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d103      	bne.n	80100ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100c2:	f002 f8d3 	bl	801226c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80100c6:	2300      	movs	r3, #0
 80100c8:	e062      	b.n	8010190 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d106      	bne.n	80100de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100d0:	f107 0310 	add.w	r3, r7, #16
 80100d4:	4618      	mov	r0, r3
 80100d6:	f001 f88f 	bl	80111f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100da:	2301      	movs	r3, #1
 80100dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100de:	f002 f8c5 	bl	801226c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100e2:	f000 fd55 	bl	8010b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100e6:	f002 f88f 	bl	8012208 <vPortEnterCritical>
 80100ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100f0:	b25b      	sxtb	r3, r3
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f6:	d103      	bne.n	8010100 <xQueueReceive+0x128>
 80100f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100fa:	2200      	movs	r2, #0
 80100fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010106:	b25b      	sxtb	r3, r3
 8010108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010c:	d103      	bne.n	8010116 <xQueueReceive+0x13e>
 801010e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010110:	2200      	movs	r2, #0
 8010112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010116:	f002 f8a9 	bl	801226c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801011a:	1d3a      	adds	r2, r7, #4
 801011c:	f107 0310 	add.w	r3, r7, #16
 8010120:	4611      	mov	r1, r2
 8010122:	4618      	mov	r0, r3
 8010124:	f001 f87e 	bl	8011224 <xTaskCheckForTimeOut>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d123      	bne.n	8010176 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801012e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010130:	f000 fa3e 	bl	80105b0 <prvIsQueueEmpty>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d017      	beq.n	801016a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801013a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013c:	3324      	adds	r3, #36	@ 0x24
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	4611      	mov	r1, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f000 ff00 	bl	8010f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801014a:	f000 f9df 	bl	801050c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801014e:	f000 fd2d 	bl	8010bac <xTaskResumeAll>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d189      	bne.n	801006c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010158:	4b0f      	ldr	r3, [pc, #60]	@ (8010198 <xQueueReceive+0x1c0>)
 801015a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	f3bf 8f4f 	dsb	sy
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	e780      	b.n	801006c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801016a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801016c:	f000 f9ce 	bl	801050c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010170:	f000 fd1c 	bl	8010bac <xTaskResumeAll>
 8010174:	e77a      	b.n	801006c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010178:	f000 f9c8 	bl	801050c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801017c:	f000 fd16 	bl	8010bac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010182:	f000 fa15 	bl	80105b0 <prvIsQueueEmpty>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	f43f af6f 	beq.w	801006c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801018e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010190:	4618      	mov	r0, r3
 8010192:	3730      	adds	r7, #48	@ 0x30
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	e000ed04 	.word	0xe000ed04

0801019c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b08e      	sub	sp, #56	@ 0x38
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80101a6:	2300      	movs	r3, #0
 80101a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80101ae:	2300      	movs	r3, #0
 80101b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10b      	bne.n	80101d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80101b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101bc:	f383 8811 	msr	BASEPRI, r3
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	f3bf 8f4f 	dsb	sy
 80101c8:	623b      	str	r3, [r7, #32]
}
 80101ca:	bf00      	nop
 80101cc:	bf00      	nop
 80101ce:	e7fd      	b.n	80101cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80101d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00b      	beq.n	80101f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80101d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101dc:	f383 8811 	msr	BASEPRI, r3
 80101e0:	f3bf 8f6f 	isb	sy
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	61fb      	str	r3, [r7, #28]
}
 80101ea:	bf00      	nop
 80101ec:	bf00      	nop
 80101ee:	e7fd      	b.n	80101ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101f0:	f001 f964 	bl	80114bc <xTaskGetSchedulerState>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <xQueueSemaphoreTake+0x64>
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d101      	bne.n	8010204 <xQueueSemaphoreTake+0x68>
 8010200:	2301      	movs	r3, #1
 8010202:	e000      	b.n	8010206 <xQueueSemaphoreTake+0x6a>
 8010204:	2300      	movs	r3, #0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10b      	bne.n	8010222 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	61bb      	str	r3, [r7, #24]
}
 801021c:	bf00      	nop
 801021e:	bf00      	nop
 8010220:	e7fd      	b.n	801021e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010222:	f001 fff1 	bl	8012208 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801022a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801022c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801022e:	2b00      	cmp	r3, #0
 8010230:	d024      	beq.n	801027c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010234:	1e5a      	subs	r2, r3, #1
 8010236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010238:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801023a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d104      	bne.n	801024c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010242:	f001 facd 	bl	80117e0 <pvTaskIncrementMutexHeldCount>
 8010246:	4602      	mov	r2, r0
 8010248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801024c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00f      	beq.n	8010274 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010256:	3310      	adds	r3, #16
 8010258:	4618      	mov	r0, r3
 801025a:	f000 ff05 	bl	8011068 <xTaskRemoveFromEventList>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d007      	beq.n	8010274 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010264:	4b54      	ldr	r3, [pc, #336]	@ (80103b8 <xQueueSemaphoreTake+0x21c>)
 8010266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010274:	f001 fffa 	bl	801226c <vPortExitCritical>
				return pdPASS;
 8010278:	2301      	movs	r3, #1
 801027a:	e098      	b.n	80103ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d112      	bne.n	80102a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00b      	beq.n	80102a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	617b      	str	r3, [r7, #20]
}
 801029a:	bf00      	nop
 801029c:	bf00      	nop
 801029e:	e7fd      	b.n	801029c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80102a0:	f001 ffe4 	bl	801226c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102a4:	2300      	movs	r3, #0
 80102a6:	e082      	b.n	80103ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d106      	bne.n	80102bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102ae:	f107 030c 	add.w	r3, r7, #12
 80102b2:	4618      	mov	r0, r3
 80102b4:	f000 ffa0 	bl	80111f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102b8:	2301      	movs	r3, #1
 80102ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102bc:	f001 ffd6 	bl	801226c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102c0:	f000 fc66 	bl	8010b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102c4:	f001 ffa0 	bl	8012208 <vPortEnterCritical>
 80102c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80102ce:	b25b      	sxtb	r3, r3
 80102d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d4:	d103      	bne.n	80102de <xQueueSemaphoreTake+0x142>
 80102d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d8:	2200      	movs	r2, #0
 80102da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80102de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80102e4:	b25b      	sxtb	r3, r3
 80102e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ea:	d103      	bne.n	80102f4 <xQueueSemaphoreTake+0x158>
 80102ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80102f4:	f001 ffba 	bl	801226c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102f8:	463a      	mov	r2, r7
 80102fa:	f107 030c 	add.w	r3, r7, #12
 80102fe:	4611      	mov	r1, r2
 8010300:	4618      	mov	r0, r3
 8010302:	f000 ff8f 	bl	8011224 <xTaskCheckForTimeOut>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d132      	bne.n	8010372 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801030c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801030e:	f000 f94f 	bl	80105b0 <prvIsQueueEmpty>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d026      	beq.n	8010366 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d109      	bne.n	8010334 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010320:	f001 ff72 	bl	8012208 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	4618      	mov	r0, r3
 801032a:	f001 f8e5 	bl	80114f8 <xTaskPriorityInherit>
 801032e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010330:	f001 ff9c 	bl	801226c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010336:	3324      	adds	r3, #36	@ 0x24
 8010338:	683a      	ldr	r2, [r7, #0]
 801033a:	4611      	mov	r1, r2
 801033c:	4618      	mov	r0, r3
 801033e:	f000 fe03 	bl	8010f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010342:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010344:	f000 f8e2 	bl	801050c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010348:	f000 fc30 	bl	8010bac <xTaskResumeAll>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	f47f af67 	bne.w	8010222 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010354:	4b18      	ldr	r3, [pc, #96]	@ (80103b8 <xQueueSemaphoreTake+0x21c>)
 8010356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801035a:	601a      	str	r2, [r3, #0]
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	e75d      	b.n	8010222 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010368:	f000 f8d0 	bl	801050c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801036c:	f000 fc1e 	bl	8010bac <xTaskResumeAll>
 8010370:	e757      	b.n	8010222 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010372:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010374:	f000 f8ca 	bl	801050c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010378:	f000 fc18 	bl	8010bac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801037c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801037e:	f000 f917 	bl	80105b0 <prvIsQueueEmpty>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	f43f af4c 	beq.w	8010222 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801038a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00d      	beq.n	80103ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010390:	f001 ff3a 	bl	8012208 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010396:	f000 f811 	bl	80103bc <prvGetDisinheritPriorityAfterTimeout>
 801039a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103a2:	4618      	mov	r0, r3
 80103a4:	f001 f980 	bl	80116a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80103a8:	f001 ff60 	bl	801226c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3738      	adds	r7, #56	@ 0x38
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	e000ed04 	.word	0xe000ed04

080103bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80103bc:	b480      	push	{r7}
 80103be:	b085      	sub	sp, #20
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d006      	beq.n	80103da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	e001      	b.n	80103de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80103da:	2300      	movs	r3, #0
 80103dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80103de:	68fb      	ldr	r3, [r7, #12]
	}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80103f8:	2300      	movs	r3, #0
 80103fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10d      	bne.n	8010426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d14d      	bne.n	80104ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	4618      	mov	r0, r3
 8010418:	f001 f8d6 	bl	80115c8 <xTaskPriorityDisinherit>
 801041c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	609a      	str	r2, [r3, #8]
 8010424:	e043      	b.n	80104ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d119      	bne.n	8010460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6858      	ldr	r0, [r3, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010434:	461a      	mov	r2, r3
 8010436:	68b9      	ldr	r1, [r7, #8]
 8010438:	f003 f911 	bl	801365e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010444:	441a      	add	r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685a      	ldr	r2, [r3, #4]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	429a      	cmp	r2, r3
 8010454:	d32b      	bcc.n	80104ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	605a      	str	r2, [r3, #4]
 801045e:	e026      	b.n	80104ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	68d8      	ldr	r0, [r3, #12]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010468:	461a      	mov	r2, r3
 801046a:	68b9      	ldr	r1, [r7, #8]
 801046c:	f003 f8f7 	bl	801365e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	68da      	ldr	r2, [r3, #12]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010478:	425b      	negs	r3, r3
 801047a:	441a      	add	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	68da      	ldr	r2, [r3, #12]
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d207      	bcs.n	801049c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	689a      	ldr	r2, [r3, #8]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010494:	425b      	negs	r3, r3
 8010496:	441a      	add	r2, r3
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d105      	bne.n	80104ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80104b6:	697b      	ldr	r3, [r7, #20]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d018      	beq.n	8010504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68da      	ldr	r2, [r3, #12]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104da:	441a      	add	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68da      	ldr	r2, [r3, #12]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d303      	bcc.n	80104f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	68d9      	ldr	r1, [r3, #12]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104fc:	461a      	mov	r2, r3
 80104fe:	6838      	ldr	r0, [r7, #0]
 8010500:	f003 f8ad 	bl	801365e <memcpy>
	}
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010514:	f001 fe78 	bl	8012208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801051e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010520:	e011      	b.n	8010546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010526:	2b00      	cmp	r3, #0
 8010528:	d012      	beq.n	8010550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	3324      	adds	r3, #36	@ 0x24
 801052e:	4618      	mov	r0, r3
 8010530:	f000 fd9a 	bl	8011068 <xTaskRemoveFromEventList>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801053a:	f000 fed7 	bl	80112ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801053e:	7bfb      	ldrb	r3, [r7, #15]
 8010540:	3b01      	subs	r3, #1
 8010542:	b2db      	uxtb	r3, r3
 8010544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801054a:	2b00      	cmp	r3, #0
 801054c:	dce9      	bgt.n	8010522 <prvUnlockQueue+0x16>
 801054e:	e000      	b.n	8010552 <prvUnlockQueue+0x46>
					break;
 8010550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	22ff      	movs	r2, #255	@ 0xff
 8010556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801055a:	f001 fe87 	bl	801226c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801055e:	f001 fe53 	bl	8012208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801056a:	e011      	b.n	8010590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d012      	beq.n	801059a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	3310      	adds	r3, #16
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fd75 	bl	8011068 <xTaskRemoveFromEventList>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d001      	beq.n	8010588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010584:	f000 feb2 	bl	80112ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010588:	7bbb      	ldrb	r3, [r7, #14]
 801058a:	3b01      	subs	r3, #1
 801058c:	b2db      	uxtb	r3, r3
 801058e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010594:	2b00      	cmp	r3, #0
 8010596:	dce9      	bgt.n	801056c <prvUnlockQueue+0x60>
 8010598:	e000      	b.n	801059c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801059a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	22ff      	movs	r2, #255	@ 0xff
 80105a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80105a4:	f001 fe62 	bl	801226c <vPortExitCritical>
}
 80105a8:	bf00      	nop
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105b8:	f001 fe26 	bl	8012208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d102      	bne.n	80105ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80105c4:	2301      	movs	r3, #1
 80105c6:	60fb      	str	r3, [r7, #12]
 80105c8:	e001      	b.n	80105ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80105ca:	2300      	movs	r3, #0
 80105cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105ce:	f001 fe4d 	bl	801226c <vPortExitCritical>

	return xReturn;
 80105d2:	68fb      	ldr	r3, [r7, #12]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105e4:	f001 fe10 	bl	8012208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d102      	bne.n	80105fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80105f4:	2301      	movs	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]
 80105f8:	e001      	b.n	80105fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80105fa:	2300      	movs	r3, #0
 80105fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105fe:	f001 fe35 	bl	801226c <vPortExitCritical>

	return xReturn;
 8010602:	68fb      	ldr	r3, [r7, #12]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801060c:	b480      	push	{r7}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010616:	2300      	movs	r3, #0
 8010618:	60fb      	str	r3, [r7, #12]
 801061a:	e014      	b.n	8010646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801061c:	4a0f      	ldr	r2, [pc, #60]	@ (801065c <vQueueAddToRegistry+0x50>)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d10b      	bne.n	8010640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010628:	490c      	ldr	r1, [pc, #48]	@ (801065c <vQueueAddToRegistry+0x50>)
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010632:	4a0a      	ldr	r2, [pc, #40]	@ (801065c <vQueueAddToRegistry+0x50>)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	00db      	lsls	r3, r3, #3
 8010638:	4413      	add	r3, r2
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801063e:	e006      	b.n	801064e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	3301      	adds	r3, #1
 8010644:	60fb      	str	r3, [r7, #12]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b07      	cmp	r3, #7
 801064a:	d9e7      	bls.n	801061c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801064c:	bf00      	nop
 801064e:	bf00      	nop
 8010650:	3714      	adds	r7, #20
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	20002c24 	.word	0x20002c24

08010660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010670:	f001 fdca 	bl	8012208 <vPortEnterCritical>
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801067a:	b25b      	sxtb	r3, r3
 801067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010680:	d103      	bne.n	801068a <vQueueWaitForMessageRestricted+0x2a>
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	2200      	movs	r2, #0
 8010686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010690:	b25b      	sxtb	r3, r3
 8010692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010696:	d103      	bne.n	80106a0 <vQueueWaitForMessageRestricted+0x40>
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	2200      	movs	r2, #0
 801069c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106a0:	f001 fde4 	bl	801226c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d106      	bne.n	80106ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	3324      	adds	r3, #36	@ 0x24
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	68b9      	ldr	r1, [r7, #8]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f000 fcab 	bl	8011010 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80106ba:	6978      	ldr	r0, [r7, #20]
 80106bc:	f7ff ff26 	bl	801050c <prvUnlockQueue>
	}
 80106c0:	bf00      	nop
 80106c2:	3718      	adds	r7, #24
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b08e      	sub	sp, #56	@ 0x38
 80106cc:	af04      	add	r7, sp, #16
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80106d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10b      	bne.n	80106f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	623b      	str	r3, [r7, #32]
}
 80106ee:	bf00      	nop
 80106f0:	bf00      	nop
 80106f2:	e7fd      	b.n	80106f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80106f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10b      	bne.n	8010712 <xTaskCreateStatic+0x4a>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	61fb      	str	r3, [r7, #28]
}
 801070c:	bf00      	nop
 801070e:	bf00      	nop
 8010710:	e7fd      	b.n	801070e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010712:	23a8      	movs	r3, #168	@ 0xa8
 8010714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	2ba8      	cmp	r3, #168	@ 0xa8
 801071a:	d00b      	beq.n	8010734 <xTaskCreateStatic+0x6c>
	__asm volatile
 801071c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010720:	f383 8811 	msr	BASEPRI, r3
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	61bb      	str	r3, [r7, #24]
}
 801072e:	bf00      	nop
 8010730:	bf00      	nop
 8010732:	e7fd      	b.n	8010730 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010734:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010738:	2b00      	cmp	r3, #0
 801073a:	d01e      	beq.n	801077a <xTaskCreateStatic+0xb2>
 801073c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801073e:	2b00      	cmp	r3, #0
 8010740:	d01b      	beq.n	801077a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010744:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801074a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074e:	2202      	movs	r2, #2
 8010750:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010754:	2300      	movs	r3, #0
 8010756:	9303      	str	r3, [sp, #12]
 8010758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075a:	9302      	str	r3, [sp, #8]
 801075c:	f107 0314 	add.w	r3, r7, #20
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	68b9      	ldr	r1, [r7, #8]
 801076c:	68f8      	ldr	r0, [r7, #12]
 801076e:	f000 f851 	bl	8010814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010774:	f000 f8f6 	bl	8010964 <prvAddNewTaskToReadyList>
 8010778:	e001      	b.n	801077e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801077a:	2300      	movs	r3, #0
 801077c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801077e:	697b      	ldr	r3, [r7, #20]
	}
 8010780:	4618      	mov	r0, r3
 8010782:	3728      	adds	r7, #40	@ 0x28
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010788:	b580      	push	{r7, lr}
 801078a:	b08c      	sub	sp, #48	@ 0x30
 801078c:	af04      	add	r7, sp, #16
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	603b      	str	r3, [r7, #0]
 8010794:	4613      	mov	r3, r2
 8010796:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010798:	88fb      	ldrh	r3, [r7, #6]
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4618      	mov	r0, r3
 801079e:	f001 fe55 	bl	801244c <pvPortMalloc>
 80107a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00e      	beq.n	80107c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80107aa:	20a8      	movs	r0, #168	@ 0xa8
 80107ac:	f001 fe4e 	bl	801244c <pvPortMalloc>
 80107b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d003      	beq.n	80107c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80107be:	e005      	b.n	80107cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80107c0:	6978      	ldr	r0, [r7, #20]
 80107c2:	f001 ff11 	bl	80125e8 <vPortFree>
 80107c6:	e001      	b.n	80107cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80107c8:	2300      	movs	r3, #0
 80107ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d017      	beq.n	8010802 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80107d2:	69fb      	ldr	r3, [r7, #28]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80107da:	88fa      	ldrh	r2, [r7, #6]
 80107dc:	2300      	movs	r3, #0
 80107de:	9303      	str	r3, [sp, #12]
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	9302      	str	r3, [sp, #8]
 80107e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	68b9      	ldr	r1, [r7, #8]
 80107f0:	68f8      	ldr	r0, [r7, #12]
 80107f2:	f000 f80f 	bl	8010814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107f6:	69f8      	ldr	r0, [r7, #28]
 80107f8:	f000 f8b4 	bl	8010964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80107fc:	2301      	movs	r3, #1
 80107fe:	61bb      	str	r3, [r7, #24]
 8010800:	e002      	b.n	8010808 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010802:	f04f 33ff 	mov.w	r3, #4294967295
 8010806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010808:	69bb      	ldr	r3, [r7, #24]
	}
 801080a:	4618      	mov	r0, r3
 801080c:	3720      	adds	r7, #32
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
	...

08010814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b088      	sub	sp, #32
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	607a      	str	r2, [r7, #4]
 8010820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010824:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	461a      	mov	r2, r3
 801082c:	21a5      	movs	r1, #165	@ 0xa5
 801082e:	f002 fe02 	bl	8013436 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801083c:	3b01      	subs	r3, #1
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	4413      	add	r3, r2
 8010842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	f023 0307 	bic.w	r3, r3, #7
 801084a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	f003 0307 	and.w	r3, r3, #7
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00b      	beq.n	801086e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	617b      	str	r3, [r7, #20]
}
 8010868:	bf00      	nop
 801086a:	bf00      	nop
 801086c:	e7fd      	b.n	801086a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d01f      	beq.n	80108b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010874:	2300      	movs	r3, #0
 8010876:	61fb      	str	r3, [r7, #28]
 8010878:	e012      	b.n	80108a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	4413      	add	r3, r2
 8010880:	7819      	ldrb	r1, [r3, #0]
 8010882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	4413      	add	r3, r2
 8010888:	3334      	adds	r3, #52	@ 0x34
 801088a:	460a      	mov	r2, r1
 801088c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801088e:	68ba      	ldr	r2, [r7, #8]
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	4413      	add	r3, r2
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d006      	beq.n	80108a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	3301      	adds	r3, #1
 801089e:	61fb      	str	r3, [r7, #28]
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	2b0f      	cmp	r3, #15
 80108a4:	d9e9      	bls.n	801087a <prvInitialiseNewTask+0x66>
 80108a6:	e000      	b.n	80108aa <prvInitialiseNewTask+0x96>
			{
				break;
 80108a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80108b2:	e003      	b.n	80108bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80108b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108be:	2b37      	cmp	r3, #55	@ 0x37
 80108c0:	d901      	bls.n	80108c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80108c2:	2337      	movs	r3, #55	@ 0x37
 80108c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80108c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80108cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80108d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d4:	2200      	movs	r2, #0
 80108d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80108d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108da:	3304      	adds	r3, #4
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fe ffcf 	bl	800f880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80108e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e4:	3318      	adds	r3, #24
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fe ffca 	bl	800f880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80108ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80108f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80108fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010900:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010904:	2200      	movs	r2, #0
 8010906:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801090a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090c:	2200      	movs	r2, #0
 801090e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010914:	3354      	adds	r3, #84	@ 0x54
 8010916:	224c      	movs	r2, #76	@ 0x4c
 8010918:	2100      	movs	r1, #0
 801091a:	4618      	mov	r0, r3
 801091c:	f002 fd8b 	bl	8013436 <memset>
 8010920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010922:	4a0d      	ldr	r2, [pc, #52]	@ (8010958 <prvInitialiseNewTask+0x144>)
 8010924:	659a      	str	r2, [r3, #88]	@ 0x58
 8010926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010928:	4a0c      	ldr	r2, [pc, #48]	@ (801095c <prvInitialiseNewTask+0x148>)
 801092a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	4a0c      	ldr	r2, [pc, #48]	@ (8010960 <prvInitialiseNewTask+0x14c>)
 8010930:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	68f9      	ldr	r1, [r7, #12]
 8010936:	69b8      	ldr	r0, [r7, #24]
 8010938:	f001 fb34 	bl	8011fa4 <pxPortInitialiseStack>
 801093c:	4602      	mov	r2, r0
 801093e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801094c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801094e:	bf00      	nop
 8010950:	3720      	adds	r7, #32
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	20014428 	.word	0x20014428
 801095c:	20014490 	.word	0x20014490
 8010960:	200144f8 	.word	0x200144f8

08010964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801096c:	f001 fc4c 	bl	8012208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010970:	4b2d      	ldr	r3, [pc, #180]	@ (8010a28 <prvAddNewTaskToReadyList+0xc4>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	3301      	adds	r3, #1
 8010976:	4a2c      	ldr	r2, [pc, #176]	@ (8010a28 <prvAddNewTaskToReadyList+0xc4>)
 8010978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801097a:	4b2c      	ldr	r3, [pc, #176]	@ (8010a2c <prvAddNewTaskToReadyList+0xc8>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d109      	bne.n	8010996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010982:	4a2a      	ldr	r2, [pc, #168]	@ (8010a2c <prvAddNewTaskToReadyList+0xc8>)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010988:	4b27      	ldr	r3, [pc, #156]	@ (8010a28 <prvAddNewTaskToReadyList+0xc4>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d110      	bne.n	80109b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010990:	f000 fcd0 	bl	8011334 <prvInitialiseTaskLists>
 8010994:	e00d      	b.n	80109b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010996:	4b26      	ldr	r3, [pc, #152]	@ (8010a30 <prvAddNewTaskToReadyList+0xcc>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d109      	bne.n	80109b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801099e:	4b23      	ldr	r3, [pc, #140]	@ (8010a2c <prvAddNewTaskToReadyList+0xc8>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d802      	bhi.n	80109b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80109ac:	4a1f      	ldr	r2, [pc, #124]	@ (8010a2c <prvAddNewTaskToReadyList+0xc8>)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80109b2:	4b20      	ldr	r3, [pc, #128]	@ (8010a34 <prvAddNewTaskToReadyList+0xd0>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3301      	adds	r3, #1
 80109b8:	4a1e      	ldr	r2, [pc, #120]	@ (8010a34 <prvAddNewTaskToReadyList+0xd0>)
 80109ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80109bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010a34 <prvAddNewTaskToReadyList+0xd0>)
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010a38 <prvAddNewTaskToReadyList+0xd4>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d903      	bls.n	80109d8 <prvAddNewTaskToReadyList+0x74>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109d4:	4a18      	ldr	r2, [pc, #96]	@ (8010a38 <prvAddNewTaskToReadyList+0xd4>)
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109dc:	4613      	mov	r3, r2
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4413      	add	r3, r2
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	4a15      	ldr	r2, [pc, #84]	@ (8010a3c <prvAddNewTaskToReadyList+0xd8>)
 80109e6:	441a      	add	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	3304      	adds	r3, #4
 80109ec:	4619      	mov	r1, r3
 80109ee:	4610      	mov	r0, r2
 80109f0:	f7fe ff53 	bl	800f89a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109f4:	f001 fc3a 	bl	801226c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80109f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010a30 <prvAddNewTaskToReadyList+0xcc>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00e      	beq.n	8010a1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a00:	4b0a      	ldr	r3, [pc, #40]	@ (8010a2c <prvAddNewTaskToReadyList+0xc8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d207      	bcs.n	8010a1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8010a40 <prvAddNewTaskToReadyList+0xdc>)
 8010a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	f3bf 8f4f 	dsb	sy
 8010a1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a1e:	bf00      	nop
 8010a20:	3708      	adds	r7, #8
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	20003138 	.word	0x20003138
 8010a2c:	20002c64 	.word	0x20002c64
 8010a30:	20003144 	.word	0x20003144
 8010a34:	20003154 	.word	0x20003154
 8010a38:	20003140 	.word	0x20003140
 8010a3c:	20002c68 	.word	0x20002c68
 8010a40:	e000ed04 	.word	0xe000ed04

08010a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d018      	beq.n	8010a88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a56:	4b14      	ldr	r3, [pc, #80]	@ (8010aa8 <vTaskDelay+0x64>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00b      	beq.n	8010a76 <vTaskDelay+0x32>
	__asm volatile
 8010a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	60bb      	str	r3, [r7, #8]
}
 8010a70:	bf00      	nop
 8010a72:	bf00      	nop
 8010a74:	e7fd      	b.n	8010a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010a76:	f000 f88b 	bl	8010b90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fec3 	bl	8011808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a82:	f000 f893 	bl	8010bac <xTaskResumeAll>
 8010a86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d107      	bne.n	8010a9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010a8e:	4b07      	ldr	r3, [pc, #28]	@ (8010aac <vTaskDelay+0x68>)
 8010a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a94:	601a      	str	r2, [r3, #0]
 8010a96:	f3bf 8f4f 	dsb	sy
 8010a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a9e:	bf00      	nop
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20003160 	.word	0x20003160
 8010aac:	e000ed04 	.word	0xe000ed04

08010ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b08a      	sub	sp, #40	@ 0x28
 8010ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010aba:	2300      	movs	r3, #0
 8010abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010abe:	463a      	mov	r2, r7
 8010ac0:	1d39      	adds	r1, r7, #4
 8010ac2:	f107 0308 	add.w	r3, r7, #8
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fe fcca 	bl	800f460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010acc:	6839      	ldr	r1, [r7, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	9202      	str	r2, [sp, #8]
 8010ad4:	9301      	str	r3, [sp, #4]
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	2300      	movs	r3, #0
 8010adc:	460a      	mov	r2, r1
 8010ade:	4924      	ldr	r1, [pc, #144]	@ (8010b70 <vTaskStartScheduler+0xc0>)
 8010ae0:	4824      	ldr	r0, [pc, #144]	@ (8010b74 <vTaskStartScheduler+0xc4>)
 8010ae2:	f7ff fdf1 	bl	80106c8 <xTaskCreateStatic>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	4a23      	ldr	r2, [pc, #140]	@ (8010b78 <vTaskStartScheduler+0xc8>)
 8010aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010aec:	4b22      	ldr	r3, [pc, #136]	@ (8010b78 <vTaskStartScheduler+0xc8>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d002      	beq.n	8010afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010af4:	2301      	movs	r3, #1
 8010af6:	617b      	str	r3, [r7, #20]
 8010af8:	e001      	b.n	8010afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010afa:	2300      	movs	r3, #0
 8010afc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d102      	bne.n	8010b0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010b04:	f000 fed4 	bl	80118b0 <xTimerCreateTimerTask>
 8010b08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d11b      	bne.n	8010b48 <vTaskStartScheduler+0x98>
	__asm volatile
 8010b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	613b      	str	r3, [r7, #16]
}
 8010b22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b24:	4b15      	ldr	r3, [pc, #84]	@ (8010b7c <vTaskStartScheduler+0xcc>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	3354      	adds	r3, #84	@ 0x54
 8010b2a:	4a15      	ldr	r2, [pc, #84]	@ (8010b80 <vTaskStartScheduler+0xd0>)
 8010b2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b2e:	4b15      	ldr	r3, [pc, #84]	@ (8010b84 <vTaskStartScheduler+0xd4>)
 8010b30:	f04f 32ff 	mov.w	r2, #4294967295
 8010b34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010b36:	4b14      	ldr	r3, [pc, #80]	@ (8010b88 <vTaskStartScheduler+0xd8>)
 8010b38:	2201      	movs	r2, #1
 8010b3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b3c:	4b13      	ldr	r3, [pc, #76]	@ (8010b8c <vTaskStartScheduler+0xdc>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b42:	f001 fabd 	bl	80120c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b46:	e00f      	b.n	8010b68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b4e:	d10b      	bne.n	8010b68 <vTaskStartScheduler+0xb8>
	__asm volatile
 8010b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	60fb      	str	r3, [r7, #12]
}
 8010b62:	bf00      	nop
 8010b64:	bf00      	nop
 8010b66:	e7fd      	b.n	8010b64 <vTaskStartScheduler+0xb4>
}
 8010b68:	bf00      	nop
 8010b6a:	3718      	adds	r7, #24
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	08015fd8 	.word	0x08015fd8
 8010b74:	08011305 	.word	0x08011305
 8010b78:	2000315c 	.word	0x2000315c
 8010b7c:	20002c64 	.word	0x20002c64
 8010b80:	2000030c 	.word	0x2000030c
 8010b84:	20003158 	.word	0x20003158
 8010b88:	20003144 	.word	0x20003144
 8010b8c:	2000313c 	.word	0x2000313c

08010b90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010b90:	b480      	push	{r7}
 8010b92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010b94:	4b04      	ldr	r3, [pc, #16]	@ (8010ba8 <vTaskSuspendAll+0x18>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3301      	adds	r3, #1
 8010b9a:	4a03      	ldr	r2, [pc, #12]	@ (8010ba8 <vTaskSuspendAll+0x18>)
 8010b9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010b9e:	bf00      	nop
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr
 8010ba8:	20003160 	.word	0x20003160

08010bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010bba:	4b42      	ldr	r3, [pc, #264]	@ (8010cc4 <xTaskResumeAll+0x118>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10b      	bne.n	8010bda <xTaskResumeAll+0x2e>
	__asm volatile
 8010bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	603b      	str	r3, [r7, #0]
}
 8010bd4:	bf00      	nop
 8010bd6:	bf00      	nop
 8010bd8:	e7fd      	b.n	8010bd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010bda:	f001 fb15 	bl	8012208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010bde:	4b39      	ldr	r3, [pc, #228]	@ (8010cc4 <xTaskResumeAll+0x118>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	4a37      	ldr	r2, [pc, #220]	@ (8010cc4 <xTaskResumeAll+0x118>)
 8010be6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010be8:	4b36      	ldr	r3, [pc, #216]	@ (8010cc4 <xTaskResumeAll+0x118>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d162      	bne.n	8010cb6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010bf0:	4b35      	ldr	r3, [pc, #212]	@ (8010cc8 <xTaskResumeAll+0x11c>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d05e      	beq.n	8010cb6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bf8:	e02f      	b.n	8010c5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bfa:	4b34      	ldr	r3, [pc, #208]	@ (8010ccc <xTaskResumeAll+0x120>)
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3318      	adds	r3, #24
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fe fea4 	bl	800f954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3304      	adds	r3, #4
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe fe9f 	bl	800f954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8010cd0 <xTaskResumeAll+0x124>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d903      	bls.n	8010c2a <xTaskResumeAll+0x7e>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c26:	4a2a      	ldr	r2, [pc, #168]	@ (8010cd0 <xTaskResumeAll+0x124>)
 8010c28:	6013      	str	r3, [r2, #0]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c2e:	4613      	mov	r3, r2
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4413      	add	r3, r2
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	4a27      	ldr	r2, [pc, #156]	@ (8010cd4 <xTaskResumeAll+0x128>)
 8010c38:	441a      	add	r2, r3
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	4619      	mov	r1, r3
 8010c40:	4610      	mov	r0, r2
 8010c42:	f7fe fe2a 	bl	800f89a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c4a:	4b23      	ldr	r3, [pc, #140]	@ (8010cd8 <xTaskResumeAll+0x12c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d302      	bcc.n	8010c5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010c54:	4b21      	ldr	r3, [pc, #132]	@ (8010cdc <xTaskResumeAll+0x130>)
 8010c56:	2201      	movs	r2, #1
 8010c58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8010ccc <xTaskResumeAll+0x120>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1cb      	bne.n	8010bfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d001      	beq.n	8010c6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010c68:	f000 fc08 	bl	801147c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ce0 <xTaskResumeAll+0x134>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d010      	beq.n	8010c9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010c78:	f000 f846 	bl	8010d08 <xTaskIncrementTick>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010c82:	4b16      	ldr	r3, [pc, #88]	@ (8010cdc <xTaskResumeAll+0x130>)
 8010c84:	2201      	movs	r2, #1
 8010c86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d1f1      	bne.n	8010c78 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010c94:	4b12      	ldr	r3, [pc, #72]	@ (8010ce0 <xTaskResumeAll+0x134>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c9a:	4b10      	ldr	r3, [pc, #64]	@ (8010cdc <xTaskResumeAll+0x130>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d009      	beq.n	8010cb6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8010ce4 <xTaskResumeAll+0x138>)
 8010ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	f3bf 8f4f 	dsb	sy
 8010cb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010cb6:	f001 fad9 	bl	801226c <vPortExitCritical>

	return xAlreadyYielded;
 8010cba:	68bb      	ldr	r3, [r7, #8]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	20003160 	.word	0x20003160
 8010cc8:	20003138 	.word	0x20003138
 8010ccc:	200030f8 	.word	0x200030f8
 8010cd0:	20003140 	.word	0x20003140
 8010cd4:	20002c68 	.word	0x20002c68
 8010cd8:	20002c64 	.word	0x20002c64
 8010cdc:	2000314c 	.word	0x2000314c
 8010ce0:	20003148 	.word	0x20003148
 8010ce4:	e000ed04 	.word	0xe000ed04

08010ce8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010cee:	4b05      	ldr	r3, [pc, #20]	@ (8010d04 <xTaskGetTickCount+0x1c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010cf4:	687b      	ldr	r3, [r7, #4]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	370c      	adds	r7, #12
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	2000313c 	.word	0x2000313c

08010d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b086      	sub	sp, #24
 8010d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d12:	4b4f      	ldr	r3, [pc, #316]	@ (8010e50 <xTaskIncrementTick+0x148>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f040 8090 	bne.w	8010e3c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8010e54 <xTaskIncrementTick+0x14c>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	3301      	adds	r3, #1
 8010d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d24:	4a4b      	ldr	r2, [pc, #300]	@ (8010e54 <xTaskIncrementTick+0x14c>)
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d121      	bne.n	8010d74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d30:	4b49      	ldr	r3, [pc, #292]	@ (8010e58 <xTaskIncrementTick+0x150>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00b      	beq.n	8010d52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d3e:	f383 8811 	msr	BASEPRI, r3
 8010d42:	f3bf 8f6f 	isb	sy
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	603b      	str	r3, [r7, #0]
}
 8010d4c:	bf00      	nop
 8010d4e:	bf00      	nop
 8010d50:	e7fd      	b.n	8010d4e <xTaskIncrementTick+0x46>
 8010d52:	4b41      	ldr	r3, [pc, #260]	@ (8010e58 <xTaskIncrementTick+0x150>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	60fb      	str	r3, [r7, #12]
 8010d58:	4b40      	ldr	r3, [pc, #256]	@ (8010e5c <xTaskIncrementTick+0x154>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8010e58 <xTaskIncrementTick+0x150>)
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	4a3e      	ldr	r2, [pc, #248]	@ (8010e5c <xTaskIncrementTick+0x154>)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6013      	str	r3, [r2, #0]
 8010d66:	4b3e      	ldr	r3, [pc, #248]	@ (8010e60 <xTaskIncrementTick+0x158>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8010e60 <xTaskIncrementTick+0x158>)
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	f000 fb84 	bl	801147c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d74:	4b3b      	ldr	r3, [pc, #236]	@ (8010e64 <xTaskIncrementTick+0x15c>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	693a      	ldr	r2, [r7, #16]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d349      	bcc.n	8010e12 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d7e:	4b36      	ldr	r3, [pc, #216]	@ (8010e58 <xTaskIncrementTick+0x150>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d104      	bne.n	8010d92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d88:	4b36      	ldr	r3, [pc, #216]	@ (8010e64 <xTaskIncrementTick+0x15c>)
 8010d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d8e:	601a      	str	r2, [r3, #0]
					break;
 8010d90:	e03f      	b.n	8010e12 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d92:	4b31      	ldr	r3, [pc, #196]	@ (8010e58 <xTaskIncrementTick+0x150>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010da2:	693a      	ldr	r2, [r7, #16]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d203      	bcs.n	8010db2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010daa:	4a2e      	ldr	r2, [pc, #184]	@ (8010e64 <xTaskIncrementTick+0x15c>)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010db0:	e02f      	b.n	8010e12 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	3304      	adds	r3, #4
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7fe fdcc 	bl	800f954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d004      	beq.n	8010dce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	3318      	adds	r3, #24
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7fe fdc3 	bl	800f954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dd2:	4b25      	ldr	r3, [pc, #148]	@ (8010e68 <xTaskIncrementTick+0x160>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d903      	bls.n	8010de2 <xTaskIncrementTick+0xda>
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dde:	4a22      	ldr	r2, [pc, #136]	@ (8010e68 <xTaskIncrementTick+0x160>)
 8010de0:	6013      	str	r3, [r2, #0]
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010de6:	4613      	mov	r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4413      	add	r3, r2
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4a1f      	ldr	r2, [pc, #124]	@ (8010e6c <xTaskIncrementTick+0x164>)
 8010df0:	441a      	add	r2, r3
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	3304      	adds	r3, #4
 8010df6:	4619      	mov	r1, r3
 8010df8:	4610      	mov	r0, r2
 8010dfa:	f7fe fd4e 	bl	800f89a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e02:	4b1b      	ldr	r3, [pc, #108]	@ (8010e70 <xTaskIncrementTick+0x168>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d3b8      	bcc.n	8010d7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e10:	e7b5      	b.n	8010d7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e12:	4b17      	ldr	r3, [pc, #92]	@ (8010e70 <xTaskIncrementTick+0x168>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e18:	4914      	ldr	r1, [pc, #80]	@ (8010e6c <xTaskIncrementTick+0x164>)
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	4413      	add	r3, r2
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	440b      	add	r3, r1
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d901      	bls.n	8010e2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010e2e:	4b11      	ldr	r3, [pc, #68]	@ (8010e74 <xTaskIncrementTick+0x16c>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d007      	beq.n	8010e46 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010e36:	2301      	movs	r3, #1
 8010e38:	617b      	str	r3, [r7, #20]
 8010e3a:	e004      	b.n	8010e46 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8010e78 <xTaskIncrementTick+0x170>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	3301      	adds	r3, #1
 8010e42:	4a0d      	ldr	r2, [pc, #52]	@ (8010e78 <xTaskIncrementTick+0x170>)
 8010e44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010e46:	697b      	ldr	r3, [r7, #20]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3718      	adds	r7, #24
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	20003160 	.word	0x20003160
 8010e54:	2000313c 	.word	0x2000313c
 8010e58:	200030f0 	.word	0x200030f0
 8010e5c:	200030f4 	.word	0x200030f4
 8010e60:	20003150 	.word	0x20003150
 8010e64:	20003158 	.word	0x20003158
 8010e68:	20003140 	.word	0x20003140
 8010e6c:	20002c68 	.word	0x20002c68
 8010e70:	20002c64 	.word	0x20002c64
 8010e74:	2000314c 	.word	0x2000314c
 8010e78:	20003148 	.word	0x20003148

08010e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b085      	sub	sp, #20
 8010e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e82:	4b2b      	ldr	r3, [pc, #172]	@ (8010f30 <vTaskSwitchContext+0xb4>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d003      	beq.n	8010e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8010f34 <vTaskSwitchContext+0xb8>)
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010e90:	e047      	b.n	8010f22 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010e92:	4b28      	ldr	r3, [pc, #160]	@ (8010f34 <vTaskSwitchContext+0xb8>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e98:	4b27      	ldr	r3, [pc, #156]	@ (8010f38 <vTaskSwitchContext+0xbc>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	60fb      	str	r3, [r7, #12]
 8010e9e:	e011      	b.n	8010ec4 <vTaskSwitchContext+0x48>
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10b      	bne.n	8010ebe <vTaskSwitchContext+0x42>
	__asm volatile
 8010ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	607b      	str	r3, [r7, #4]
}
 8010eb8:	bf00      	nop
 8010eba:	bf00      	nop
 8010ebc:	e7fd      	b.n	8010eba <vTaskSwitchContext+0x3e>
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	60fb      	str	r3, [r7, #12]
 8010ec4:	491d      	ldr	r1, [pc, #116]	@ (8010f3c <vTaskSwitchContext+0xc0>)
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	4613      	mov	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	440b      	add	r3, r1
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d0e3      	beq.n	8010ea0 <vTaskSwitchContext+0x24>
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	4613      	mov	r3, r2
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	4413      	add	r3, r2
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	4a16      	ldr	r2, [pc, #88]	@ (8010f3c <vTaskSwitchContext+0xc0>)
 8010ee4:	4413      	add	r3, r2
 8010ee6:	60bb      	str	r3, [r7, #8]
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	685a      	ldr	r2, [r3, #4]
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	605a      	str	r2, [r3, #4]
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	685a      	ldr	r2, [r3, #4]
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	3308      	adds	r3, #8
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d104      	bne.n	8010f08 <vTaskSwitchContext+0x8c>
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	685a      	ldr	r2, [r3, #4]
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	605a      	str	r2, [r3, #4]
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8010f40 <vTaskSwitchContext+0xc4>)
 8010f10:	6013      	str	r3, [r2, #0]
 8010f12:	4a09      	ldr	r2, [pc, #36]	@ (8010f38 <vTaskSwitchContext+0xbc>)
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f18:	4b09      	ldr	r3, [pc, #36]	@ (8010f40 <vTaskSwitchContext+0xc4>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	3354      	adds	r3, #84	@ 0x54
 8010f1e:	4a09      	ldr	r2, [pc, #36]	@ (8010f44 <vTaskSwitchContext+0xc8>)
 8010f20:	6013      	str	r3, [r2, #0]
}
 8010f22:	bf00      	nop
 8010f24:	3714      	adds	r7, #20
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop
 8010f30:	20003160 	.word	0x20003160
 8010f34:	2000314c 	.word	0x2000314c
 8010f38:	20003140 	.word	0x20003140
 8010f3c:	20002c68 	.word	0x20002c68
 8010f40:	20002c64 	.word	0x20002c64
 8010f44:	2000030c 	.word	0x2000030c

08010f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d10b      	bne.n	8010f70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	60fb      	str	r3, [r7, #12]
}
 8010f6a:	bf00      	nop
 8010f6c:	bf00      	nop
 8010f6e:	e7fd      	b.n	8010f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f70:	4b07      	ldr	r3, [pc, #28]	@ (8010f90 <vTaskPlaceOnEventList+0x48>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3318      	adds	r3, #24
 8010f76:	4619      	mov	r1, r3
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7fe fcb2 	bl	800f8e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f7e:	2101      	movs	r1, #1
 8010f80:	6838      	ldr	r0, [r7, #0]
 8010f82:	f000 fc41 	bl	8011808 <prvAddCurrentTaskToDelayedList>
}
 8010f86:	bf00      	nop
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20002c64 	.word	0x20002c64

08010f94 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10b      	bne.n	8010fbe <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	617b      	str	r3, [r7, #20]
}
 8010fb8:	bf00      	nop
 8010fba:	bf00      	nop
 8010fbc:	e7fd      	b.n	8010fba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010fbe:	4b12      	ldr	r3, [pc, #72]	@ (8011008 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10b      	bne.n	8010fde <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8010fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fca:	f383 8811 	msr	BASEPRI, r3
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	f3bf 8f4f 	dsb	sy
 8010fd6:	613b      	str	r3, [r7, #16]
}
 8010fd8:	bf00      	nop
 8010fda:	bf00      	nop
 8010fdc:	e7fd      	b.n	8010fda <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010fde:	4b0b      	ldr	r3, [pc, #44]	@ (801100c <vTaskPlaceOnUnorderedEventList+0x78>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8010fe8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010fea:	4b08      	ldr	r3, [pc, #32]	@ (801100c <vTaskPlaceOnUnorderedEventList+0x78>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3318      	adds	r3, #24
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	68f8      	ldr	r0, [r7, #12]
 8010ff4:	f7fe fc51 	bl	800f89a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 fc04 	bl	8011808 <prvAddCurrentTaskToDelayedList>
}
 8011000:	bf00      	nop
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	20003160 	.word	0x20003160
 801100c:	20002c64 	.word	0x20002c64

08011010 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d10b      	bne.n	801103a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8011022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	617b      	str	r3, [r7, #20]
}
 8011034:	bf00      	nop
 8011036:	bf00      	nop
 8011038:	e7fd      	b.n	8011036 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801103a:	4b0a      	ldr	r3, [pc, #40]	@ (8011064 <vTaskPlaceOnEventListRestricted+0x54>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3318      	adds	r3, #24
 8011040:	4619      	mov	r1, r3
 8011042:	68f8      	ldr	r0, [r7, #12]
 8011044:	f7fe fc29 	bl	800f89a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d002      	beq.n	8011054 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801104e:	f04f 33ff 	mov.w	r3, #4294967295
 8011052:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011054:	6879      	ldr	r1, [r7, #4]
 8011056:	68b8      	ldr	r0, [r7, #8]
 8011058:	f000 fbd6 	bl	8011808 <prvAddCurrentTaskToDelayedList>
	}
 801105c:	bf00      	nop
 801105e:	3718      	adds	r7, #24
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	20002c64 	.word	0x20002c64

08011068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b086      	sub	sp, #24
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d10b      	bne.n	8011096 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	60fb      	str	r3, [r7, #12]
}
 8011090:	bf00      	nop
 8011092:	bf00      	nop
 8011094:	e7fd      	b.n	8011092 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	3318      	adds	r3, #24
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe fc5a 	bl	800f954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011118 <xTaskRemoveFromEventList+0xb0>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d11d      	bne.n	80110e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	3304      	adds	r3, #4
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fe fc51 	bl	800f954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110b6:	4b19      	ldr	r3, [pc, #100]	@ (801111c <xTaskRemoveFromEventList+0xb4>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d903      	bls.n	80110c6 <xTaskRemoveFromEventList+0x5e>
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c2:	4a16      	ldr	r2, [pc, #88]	@ (801111c <xTaskRemoveFromEventList+0xb4>)
 80110c4:	6013      	str	r3, [r2, #0]
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ca:	4613      	mov	r3, r2
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	4413      	add	r3, r2
 80110d0:	009b      	lsls	r3, r3, #2
 80110d2:	4a13      	ldr	r2, [pc, #76]	@ (8011120 <xTaskRemoveFromEventList+0xb8>)
 80110d4:	441a      	add	r2, r3
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	3304      	adds	r3, #4
 80110da:	4619      	mov	r1, r3
 80110dc:	4610      	mov	r0, r2
 80110de:	f7fe fbdc 	bl	800f89a <vListInsertEnd>
 80110e2:	e005      	b.n	80110f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	3318      	adds	r3, #24
 80110e8:	4619      	mov	r1, r3
 80110ea:	480e      	ldr	r0, [pc, #56]	@ (8011124 <xTaskRemoveFromEventList+0xbc>)
 80110ec:	f7fe fbd5 	bl	800f89a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110f4:	4b0c      	ldr	r3, [pc, #48]	@ (8011128 <xTaskRemoveFromEventList+0xc0>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d905      	bls.n	801110a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80110fe:	2301      	movs	r3, #1
 8011100:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011102:	4b0a      	ldr	r3, [pc, #40]	@ (801112c <xTaskRemoveFromEventList+0xc4>)
 8011104:	2201      	movs	r2, #1
 8011106:	601a      	str	r2, [r3, #0]
 8011108:	e001      	b.n	801110e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801110a:	2300      	movs	r3, #0
 801110c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801110e:	697b      	ldr	r3, [r7, #20]
}
 8011110:	4618      	mov	r0, r3
 8011112:	3718      	adds	r7, #24
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	20003160 	.word	0x20003160
 801111c:	20003140 	.word	0x20003140
 8011120:	20002c68 	.word	0x20002c68
 8011124:	200030f8 	.word	0x200030f8
 8011128:	20002c64 	.word	0x20002c64
 801112c:	2000314c 	.word	0x2000314c

08011130 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b086      	sub	sp, #24
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801113a:	4b2a      	ldr	r3, [pc, #168]	@ (80111e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10b      	bne.n	801115a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8011142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011146:	f383 8811 	msr	BASEPRI, r3
 801114a:	f3bf 8f6f 	isb	sy
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	613b      	str	r3, [r7, #16]
}
 8011154:	bf00      	nop
 8011156:	bf00      	nop
 8011158:	e7fd      	b.n	8011156 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d10b      	bne.n	8011188 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8011170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	60fb      	str	r3, [r7, #12]
}
 8011182:	bf00      	nop
 8011184:	bf00      	nop
 8011186:	e7fd      	b.n	8011184 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7fe fbe3 	bl	800f954 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	3304      	adds	r3, #4
 8011192:	4618      	mov	r0, r3
 8011194:	f7fe fbde 	bl	800f954 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801119c:	4b12      	ldr	r3, [pc, #72]	@ (80111e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d903      	bls.n	80111ac <vTaskRemoveFromUnorderedEventList+0x7c>
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a8:	4a0f      	ldr	r2, [pc, #60]	@ (80111e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80111aa:	6013      	str	r3, [r2, #0]
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111b0:	4613      	mov	r3, r2
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4413      	add	r3, r2
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	4a0c      	ldr	r2, [pc, #48]	@ (80111ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 80111ba:	441a      	add	r2, r3
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	3304      	adds	r3, #4
 80111c0:	4619      	mov	r1, r3
 80111c2:	4610      	mov	r0, r2
 80111c4:	f7fe fb69 	bl	800f89a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111cc:	4b08      	ldr	r3, [pc, #32]	@ (80111f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d902      	bls.n	80111dc <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80111d6:	4b07      	ldr	r3, [pc, #28]	@ (80111f4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80111d8:	2201      	movs	r2, #1
 80111da:	601a      	str	r2, [r3, #0]
	}
}
 80111dc:	bf00      	nop
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	20003160 	.word	0x20003160
 80111e8:	20003140 	.word	0x20003140
 80111ec:	20002c68 	.word	0x20002c68
 80111f0:	20002c64 	.word	0x20002c64
 80111f4:	2000314c 	.word	0x2000314c

080111f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011200:	4b06      	ldr	r3, [pc, #24]	@ (801121c <vTaskInternalSetTimeOutState+0x24>)
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011208:	4b05      	ldr	r3, [pc, #20]	@ (8011220 <vTaskInternalSetTimeOutState+0x28>)
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	605a      	str	r2, [r3, #4]
}
 8011210:	bf00      	nop
 8011212:	370c      	adds	r7, #12
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr
 801121c:	20003150 	.word	0x20003150
 8011220:	2000313c 	.word	0x2000313c

08011224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b088      	sub	sp, #32
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d10b      	bne.n	801124c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011238:	f383 8811 	msr	BASEPRI, r3
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	613b      	str	r3, [r7, #16]
}
 8011246:	bf00      	nop
 8011248:	bf00      	nop
 801124a:	e7fd      	b.n	8011248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d10b      	bne.n	801126a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011256:	f383 8811 	msr	BASEPRI, r3
 801125a:	f3bf 8f6f 	isb	sy
 801125e:	f3bf 8f4f 	dsb	sy
 8011262:	60fb      	str	r3, [r7, #12]
}
 8011264:	bf00      	nop
 8011266:	bf00      	nop
 8011268:	e7fd      	b.n	8011266 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801126a:	f000 ffcd 	bl	8012208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801126e:	4b1d      	ldr	r3, [pc, #116]	@ (80112e4 <xTaskCheckForTimeOut+0xc0>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	69ba      	ldr	r2, [r7, #24]
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011286:	d102      	bne.n	801128e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011288:	2300      	movs	r3, #0
 801128a:	61fb      	str	r3, [r7, #28]
 801128c:	e023      	b.n	80112d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	4b15      	ldr	r3, [pc, #84]	@ (80112e8 <xTaskCheckForTimeOut+0xc4>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	429a      	cmp	r2, r3
 8011298:	d007      	beq.n	80112aa <xTaskCheckForTimeOut+0x86>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	69ba      	ldr	r2, [r7, #24]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d302      	bcc.n	80112aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80112a4:	2301      	movs	r3, #1
 80112a6:	61fb      	str	r3, [r7, #28]
 80112a8:	e015      	b.n	80112d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	697a      	ldr	r2, [r7, #20]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d20b      	bcs.n	80112cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	1ad2      	subs	r2, r2, r3
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff ff99 	bl	80111f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112c6:	2300      	movs	r3, #0
 80112c8:	61fb      	str	r3, [r7, #28]
 80112ca:	e004      	b.n	80112d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2200      	movs	r2, #0
 80112d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80112d2:	2301      	movs	r3, #1
 80112d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80112d6:	f000 ffc9 	bl	801226c <vPortExitCritical>

	return xReturn;
 80112da:	69fb      	ldr	r3, [r7, #28]
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3720      	adds	r7, #32
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	2000313c 	.word	0x2000313c
 80112e8:	20003150 	.word	0x20003150

080112ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80112ec:	b480      	push	{r7}
 80112ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80112f0:	4b03      	ldr	r3, [pc, #12]	@ (8011300 <vTaskMissedYield+0x14>)
 80112f2:	2201      	movs	r2, #1
 80112f4:	601a      	str	r2, [r3, #0]
}
 80112f6:	bf00      	nop
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr
 8011300:	2000314c 	.word	0x2000314c

08011304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801130c:	f000 f852 	bl	80113b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011310:	4b06      	ldr	r3, [pc, #24]	@ (801132c <prvIdleTask+0x28>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b01      	cmp	r3, #1
 8011316:	d9f9      	bls.n	801130c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011318:	4b05      	ldr	r3, [pc, #20]	@ (8011330 <prvIdleTask+0x2c>)
 801131a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801131e:	601a      	str	r2, [r3, #0]
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011328:	e7f0      	b.n	801130c <prvIdleTask+0x8>
 801132a:	bf00      	nop
 801132c:	20002c68 	.word	0x20002c68
 8011330:	e000ed04 	.word	0xe000ed04

08011334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801133a:	2300      	movs	r3, #0
 801133c:	607b      	str	r3, [r7, #4]
 801133e:	e00c      	b.n	801135a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	4613      	mov	r3, r2
 8011344:	009b      	lsls	r3, r3, #2
 8011346:	4413      	add	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4a12      	ldr	r2, [pc, #72]	@ (8011394 <prvInitialiseTaskLists+0x60>)
 801134c:	4413      	add	r3, r2
 801134e:	4618      	mov	r0, r3
 8011350:	f7fe fa76 	bl	800f840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3301      	adds	r3, #1
 8011358:	607b      	str	r3, [r7, #4]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2b37      	cmp	r3, #55	@ 0x37
 801135e:	d9ef      	bls.n	8011340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011360:	480d      	ldr	r0, [pc, #52]	@ (8011398 <prvInitialiseTaskLists+0x64>)
 8011362:	f7fe fa6d 	bl	800f840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011366:	480d      	ldr	r0, [pc, #52]	@ (801139c <prvInitialiseTaskLists+0x68>)
 8011368:	f7fe fa6a 	bl	800f840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801136c:	480c      	ldr	r0, [pc, #48]	@ (80113a0 <prvInitialiseTaskLists+0x6c>)
 801136e:	f7fe fa67 	bl	800f840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011372:	480c      	ldr	r0, [pc, #48]	@ (80113a4 <prvInitialiseTaskLists+0x70>)
 8011374:	f7fe fa64 	bl	800f840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011378:	480b      	ldr	r0, [pc, #44]	@ (80113a8 <prvInitialiseTaskLists+0x74>)
 801137a:	f7fe fa61 	bl	800f840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801137e:	4b0b      	ldr	r3, [pc, #44]	@ (80113ac <prvInitialiseTaskLists+0x78>)
 8011380:	4a05      	ldr	r2, [pc, #20]	@ (8011398 <prvInitialiseTaskLists+0x64>)
 8011382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011384:	4b0a      	ldr	r3, [pc, #40]	@ (80113b0 <prvInitialiseTaskLists+0x7c>)
 8011386:	4a05      	ldr	r2, [pc, #20]	@ (801139c <prvInitialiseTaskLists+0x68>)
 8011388:	601a      	str	r2, [r3, #0]
}
 801138a:	bf00      	nop
 801138c:	3708      	adds	r7, #8
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	20002c68 	.word	0x20002c68
 8011398:	200030c8 	.word	0x200030c8
 801139c:	200030dc 	.word	0x200030dc
 80113a0:	200030f8 	.word	0x200030f8
 80113a4:	2000310c 	.word	0x2000310c
 80113a8:	20003124 	.word	0x20003124
 80113ac:	200030f0 	.word	0x200030f0
 80113b0:	200030f4 	.word	0x200030f4

080113b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113ba:	e019      	b.n	80113f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113bc:	f000 ff24 	bl	8012208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113c0:	4b10      	ldr	r3, [pc, #64]	@ (8011404 <prvCheckTasksWaitingTermination+0x50>)
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	3304      	adds	r3, #4
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fe fac1 	bl	800f954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80113d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011408 <prvCheckTasksWaitingTermination+0x54>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	3b01      	subs	r3, #1
 80113d8:	4a0b      	ldr	r2, [pc, #44]	@ (8011408 <prvCheckTasksWaitingTermination+0x54>)
 80113da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80113dc:	4b0b      	ldr	r3, [pc, #44]	@ (801140c <prvCheckTasksWaitingTermination+0x58>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	4a0a      	ldr	r2, [pc, #40]	@ (801140c <prvCheckTasksWaitingTermination+0x58>)
 80113e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80113e6:	f000 ff41 	bl	801226c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f000 f810 	bl	8011410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113f0:	4b06      	ldr	r3, [pc, #24]	@ (801140c <prvCheckTasksWaitingTermination+0x58>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d1e1      	bne.n	80113bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113f8:	bf00      	nop
 80113fa:	bf00      	nop
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	2000310c 	.word	0x2000310c
 8011408:	20003138 	.word	0x20003138
 801140c:	20003120 	.word	0x20003120

08011410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	3354      	adds	r3, #84	@ 0x54
 801141c:	4618      	mov	r0, r3
 801141e:	f002 f85d 	bl	80134dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011428:	2b00      	cmp	r3, #0
 801142a:	d108      	bne.n	801143e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011430:	4618      	mov	r0, r3
 8011432:	f001 f8d9 	bl	80125e8 <vPortFree>
				vPortFree( pxTCB );
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f001 f8d6 	bl	80125e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801143c:	e019      	b.n	8011472 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011444:	2b01      	cmp	r3, #1
 8011446:	d103      	bne.n	8011450 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f001 f8cd 	bl	80125e8 <vPortFree>
	}
 801144e:	e010      	b.n	8011472 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011456:	2b02      	cmp	r3, #2
 8011458:	d00b      	beq.n	8011472 <prvDeleteTCB+0x62>
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	60fb      	str	r3, [r7, #12]
}
 801146c:	bf00      	nop
 801146e:	bf00      	nop
 8011470:	e7fd      	b.n	801146e <prvDeleteTCB+0x5e>
	}
 8011472:	bf00      	nop
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
	...

0801147c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011482:	4b0c      	ldr	r3, [pc, #48]	@ (80114b4 <prvResetNextTaskUnblockTime+0x38>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d104      	bne.n	8011496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801148c:	4b0a      	ldr	r3, [pc, #40]	@ (80114b8 <prvResetNextTaskUnblockTime+0x3c>)
 801148e:	f04f 32ff 	mov.w	r2, #4294967295
 8011492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011494:	e008      	b.n	80114a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011496:	4b07      	ldr	r3, [pc, #28]	@ (80114b4 <prvResetNextTaskUnblockTime+0x38>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	4a04      	ldr	r2, [pc, #16]	@ (80114b8 <prvResetNextTaskUnblockTime+0x3c>)
 80114a6:	6013      	str	r3, [r2, #0]
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr
 80114b4:	200030f0 	.word	0x200030f0
 80114b8:	20003158 	.word	0x20003158

080114bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114bc:	b480      	push	{r7}
 80114be:	b083      	sub	sp, #12
 80114c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114c2:	4b0b      	ldr	r3, [pc, #44]	@ (80114f0 <xTaskGetSchedulerState+0x34>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d102      	bne.n	80114d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114ca:	2301      	movs	r3, #1
 80114cc:	607b      	str	r3, [r7, #4]
 80114ce:	e008      	b.n	80114e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114d0:	4b08      	ldr	r3, [pc, #32]	@ (80114f4 <xTaskGetSchedulerState+0x38>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d102      	bne.n	80114de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114d8:	2302      	movs	r3, #2
 80114da:	607b      	str	r3, [r7, #4]
 80114dc:	e001      	b.n	80114e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114de:	2300      	movs	r3, #0
 80114e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80114e2:	687b      	ldr	r3, [r7, #4]
	}
 80114e4:	4618      	mov	r0, r3
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr
 80114f0:	20003144 	.word	0x20003144
 80114f4:	20003160 	.word	0x20003160

080114f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011504:	2300      	movs	r3, #0
 8011506:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d051      	beq.n	80115b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011512:	4b2a      	ldr	r3, [pc, #168]	@ (80115bc <xTaskPriorityInherit+0xc4>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011518:	429a      	cmp	r2, r3
 801151a:	d241      	bcs.n	80115a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	699b      	ldr	r3, [r3, #24]
 8011520:	2b00      	cmp	r3, #0
 8011522:	db06      	blt.n	8011532 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011524:	4b25      	ldr	r3, [pc, #148]	@ (80115bc <xTaskPriorityInherit+0xc4>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801152a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	6959      	ldr	r1, [r3, #20]
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801153a:	4613      	mov	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4a1f      	ldr	r2, [pc, #124]	@ (80115c0 <xTaskPriorityInherit+0xc8>)
 8011544:	4413      	add	r3, r2
 8011546:	4299      	cmp	r1, r3
 8011548:	d122      	bne.n	8011590 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	3304      	adds	r3, #4
 801154e:	4618      	mov	r0, r3
 8011550:	f7fe fa00 	bl	800f954 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011554:	4b19      	ldr	r3, [pc, #100]	@ (80115bc <xTaskPriorityInherit+0xc4>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011562:	4b18      	ldr	r3, [pc, #96]	@ (80115c4 <xTaskPriorityInherit+0xcc>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d903      	bls.n	8011572 <xTaskPriorityInherit+0x7a>
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801156e:	4a15      	ldr	r2, [pc, #84]	@ (80115c4 <xTaskPriorityInherit+0xcc>)
 8011570:	6013      	str	r3, [r2, #0]
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011576:	4613      	mov	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	4413      	add	r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4a10      	ldr	r2, [pc, #64]	@ (80115c0 <xTaskPriorityInherit+0xc8>)
 8011580:	441a      	add	r2, r3
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	3304      	adds	r3, #4
 8011586:	4619      	mov	r1, r3
 8011588:	4610      	mov	r0, r2
 801158a:	f7fe f986 	bl	800f89a <vListInsertEnd>
 801158e:	e004      	b.n	801159a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011590:	4b0a      	ldr	r3, [pc, #40]	@ (80115bc <xTaskPriorityInherit+0xc4>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801159a:	2301      	movs	r3, #1
 801159c:	60fb      	str	r3, [r7, #12]
 801159e:	e008      	b.n	80115b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115a4:	4b05      	ldr	r3, [pc, #20]	@ (80115bc <xTaskPriorityInherit+0xc4>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d201      	bcs.n	80115b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80115ae:	2301      	movs	r3, #1
 80115b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115b2:	68fb      	ldr	r3, [r7, #12]
	}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	20002c64 	.word	0x20002c64
 80115c0:	20002c68 	.word	0x20002c68
 80115c4:	20003140 	.word	0x20003140

080115c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115d4:	2300      	movs	r3, #0
 80115d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d058      	beq.n	8011690 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80115de:	4b2f      	ldr	r3, [pc, #188]	@ (801169c <xTaskPriorityDisinherit+0xd4>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	693a      	ldr	r2, [r7, #16]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d00b      	beq.n	8011600 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80115e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ec:	f383 8811 	msr	BASEPRI, r3
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	60fb      	str	r3, [r7, #12]
}
 80115fa:	bf00      	nop
 80115fc:	bf00      	nop
 80115fe:	e7fd      	b.n	80115fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10b      	bne.n	8011620 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	60bb      	str	r3, [r7, #8]
}
 801161a:	bf00      	nop
 801161c:	bf00      	nop
 801161e:	e7fd      	b.n	801161c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011624:	1e5a      	subs	r2, r3, #1
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011632:	429a      	cmp	r2, r3
 8011634:	d02c      	beq.n	8011690 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801163a:	2b00      	cmp	r3, #0
 801163c:	d128      	bne.n	8011690 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	3304      	adds	r3, #4
 8011642:	4618      	mov	r0, r3
 8011644:	f7fe f986 	bl	800f954 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011654:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011660:	4b0f      	ldr	r3, [pc, #60]	@ (80116a0 <xTaskPriorityDisinherit+0xd8>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	429a      	cmp	r2, r3
 8011666:	d903      	bls.n	8011670 <xTaskPriorityDisinherit+0xa8>
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801166c:	4a0c      	ldr	r2, [pc, #48]	@ (80116a0 <xTaskPriorityDisinherit+0xd8>)
 801166e:	6013      	str	r3, [r2, #0]
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011674:	4613      	mov	r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	4a09      	ldr	r2, [pc, #36]	@ (80116a4 <xTaskPriorityDisinherit+0xdc>)
 801167e:	441a      	add	r2, r3
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	3304      	adds	r3, #4
 8011684:	4619      	mov	r1, r3
 8011686:	4610      	mov	r0, r2
 8011688:	f7fe f907 	bl	800f89a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801168c:	2301      	movs	r3, #1
 801168e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011690:	697b      	ldr	r3, [r7, #20]
	}
 8011692:	4618      	mov	r0, r3
 8011694:	3718      	adds	r7, #24
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	20002c64 	.word	0x20002c64
 80116a0:	20003140 	.word	0x20003140
 80116a4:	20002c68 	.word	0x20002c68

080116a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b088      	sub	sp, #32
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80116b6:	2301      	movs	r3, #1
 80116b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d06c      	beq.n	801179a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d10b      	bne.n	80116e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80116c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116cc:	f383 8811 	msr	BASEPRI, r3
 80116d0:	f3bf 8f6f 	isb	sy
 80116d4:	f3bf 8f4f 	dsb	sy
 80116d8:	60fb      	str	r3, [r7, #12]
}
 80116da:	bf00      	nop
 80116dc:	bf00      	nop
 80116de:	e7fd      	b.n	80116dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116e4:	683a      	ldr	r2, [r7, #0]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d902      	bls.n	80116f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	61fb      	str	r3, [r7, #28]
 80116ee:	e002      	b.n	80116f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80116f6:	69bb      	ldr	r3, [r7, #24]
 80116f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116fa:	69fa      	ldr	r2, [r7, #28]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d04c      	beq.n	801179a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011704:	697a      	ldr	r2, [r7, #20]
 8011706:	429a      	cmp	r2, r3
 8011708:	d147      	bne.n	801179a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801170a:	4b26      	ldr	r3, [pc, #152]	@ (80117a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	69ba      	ldr	r2, [r7, #24]
 8011710:	429a      	cmp	r2, r3
 8011712:	d10b      	bne.n	801172c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011718:	f383 8811 	msr	BASEPRI, r3
 801171c:	f3bf 8f6f 	isb	sy
 8011720:	f3bf 8f4f 	dsb	sy
 8011724:	60bb      	str	r3, [r7, #8]
}
 8011726:	bf00      	nop
 8011728:	bf00      	nop
 801172a:	e7fd      	b.n	8011728 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011730:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	69fa      	ldr	r2, [r7, #28]
 8011736:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	699b      	ldr	r3, [r3, #24]
 801173c:	2b00      	cmp	r3, #0
 801173e:	db04      	blt.n	801174a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	6959      	ldr	r1, [r3, #20]
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	4613      	mov	r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	4413      	add	r3, r2
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	4a13      	ldr	r2, [pc, #76]	@ (80117a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801175a:	4413      	add	r3, r2
 801175c:	4299      	cmp	r1, r3
 801175e:	d11c      	bne.n	801179a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	3304      	adds	r3, #4
 8011764:	4618      	mov	r0, r3
 8011766:	f7fe f8f5 	bl	800f954 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801176e:	4b0f      	ldr	r3, [pc, #60]	@ (80117ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	429a      	cmp	r2, r3
 8011774:	d903      	bls.n	801177e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801177a:	4a0c      	ldr	r2, [pc, #48]	@ (80117ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011782:	4613      	mov	r3, r2
 8011784:	009b      	lsls	r3, r3, #2
 8011786:	4413      	add	r3, r2
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	4a07      	ldr	r2, [pc, #28]	@ (80117a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801178c:	441a      	add	r2, r3
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	3304      	adds	r3, #4
 8011792:	4619      	mov	r1, r3
 8011794:	4610      	mov	r0, r2
 8011796:	f7fe f880 	bl	800f89a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801179a:	bf00      	nop
 801179c:	3720      	adds	r7, #32
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	20002c64 	.word	0x20002c64
 80117a8:	20002c68 	.word	0x20002c68
 80117ac:	20003140 	.word	0x20003140

080117b0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80117b6:	4b09      	ldr	r3, [pc, #36]	@ (80117dc <uxTaskResetEventItemValue+0x2c>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	699b      	ldr	r3, [r3, #24]
 80117bc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117be:	4b07      	ldr	r3, [pc, #28]	@ (80117dc <uxTaskResetEventItemValue+0x2c>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117c4:	4b05      	ldr	r3, [pc, #20]	@ (80117dc <uxTaskResetEventItemValue+0x2c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80117cc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80117ce:	687b      	ldr	r3, [r7, #4]
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	20002c64 	.word	0x20002c64

080117e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80117e0:	b480      	push	{r7}
 80117e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80117e4:	4b07      	ldr	r3, [pc, #28]	@ (8011804 <pvTaskIncrementMutexHeldCount+0x24>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d004      	beq.n	80117f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80117ec:	4b05      	ldr	r3, [pc, #20]	@ (8011804 <pvTaskIncrementMutexHeldCount+0x24>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80117f2:	3201      	adds	r2, #1
 80117f4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80117f6:	4b03      	ldr	r3, [pc, #12]	@ (8011804 <pvTaskIncrementMutexHeldCount+0x24>)
 80117f8:	681b      	ldr	r3, [r3, #0]
	}
 80117fa:	4618      	mov	r0, r3
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	20002c64 	.word	0x20002c64

08011808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011812:	4b21      	ldr	r3, [pc, #132]	@ (8011898 <prvAddCurrentTaskToDelayedList+0x90>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011818:	4b20      	ldr	r3, [pc, #128]	@ (801189c <prvAddCurrentTaskToDelayedList+0x94>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	3304      	adds	r3, #4
 801181e:	4618      	mov	r0, r3
 8011820:	f7fe f898 	bl	800f954 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182a:	d10a      	bne.n	8011842 <prvAddCurrentTaskToDelayedList+0x3a>
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d007      	beq.n	8011842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011832:	4b1a      	ldr	r3, [pc, #104]	@ (801189c <prvAddCurrentTaskToDelayedList+0x94>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	3304      	adds	r3, #4
 8011838:	4619      	mov	r1, r3
 801183a:	4819      	ldr	r0, [pc, #100]	@ (80118a0 <prvAddCurrentTaskToDelayedList+0x98>)
 801183c:	f7fe f82d 	bl	800f89a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011840:	e026      	b.n	8011890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	4413      	add	r3, r2
 8011848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801184a:	4b14      	ldr	r3, [pc, #80]	@ (801189c <prvAddCurrentTaskToDelayedList+0x94>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	68ba      	ldr	r2, [r7, #8]
 8011850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	429a      	cmp	r2, r3
 8011858:	d209      	bcs.n	801186e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801185a:	4b12      	ldr	r3, [pc, #72]	@ (80118a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	4b0f      	ldr	r3, [pc, #60]	@ (801189c <prvAddCurrentTaskToDelayedList+0x94>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	3304      	adds	r3, #4
 8011864:	4619      	mov	r1, r3
 8011866:	4610      	mov	r0, r2
 8011868:	f7fe f83b 	bl	800f8e2 <vListInsert>
}
 801186c:	e010      	b.n	8011890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801186e:	4b0e      	ldr	r3, [pc, #56]	@ (80118a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	4b0a      	ldr	r3, [pc, #40]	@ (801189c <prvAddCurrentTaskToDelayedList+0x94>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	3304      	adds	r3, #4
 8011878:	4619      	mov	r1, r3
 801187a:	4610      	mov	r0, r2
 801187c:	f7fe f831 	bl	800f8e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011880:	4b0a      	ldr	r3, [pc, #40]	@ (80118ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	429a      	cmp	r2, r3
 8011888:	d202      	bcs.n	8011890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801188a:	4a08      	ldr	r2, [pc, #32]	@ (80118ac <prvAddCurrentTaskToDelayedList+0xa4>)
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	6013      	str	r3, [r2, #0]
}
 8011890:	bf00      	nop
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	2000313c 	.word	0x2000313c
 801189c:	20002c64 	.word	0x20002c64
 80118a0:	20003124 	.word	0x20003124
 80118a4:	200030f4 	.word	0x200030f4
 80118a8:	200030f0 	.word	0x200030f0
 80118ac:	20003158 	.word	0x20003158

080118b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b08a      	sub	sp, #40	@ 0x28
 80118b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80118b6:	2300      	movs	r3, #0
 80118b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80118ba:	f000 fb13 	bl	8011ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80118be:	4b1d      	ldr	r3, [pc, #116]	@ (8011934 <xTimerCreateTimerTask+0x84>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d021      	beq.n	801190a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118c6:	2300      	movs	r3, #0
 80118c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118ca:	2300      	movs	r3, #0
 80118cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118ce:	1d3a      	adds	r2, r7, #4
 80118d0:	f107 0108 	add.w	r1, r7, #8
 80118d4:	f107 030c 	add.w	r3, r7, #12
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fd fddb 	bl	800f494 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118de:	6879      	ldr	r1, [r7, #4]
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	9202      	str	r2, [sp, #8]
 80118e6:	9301      	str	r3, [sp, #4]
 80118e8:	2337      	movs	r3, #55	@ 0x37
 80118ea:	9300      	str	r3, [sp, #0]
 80118ec:	2300      	movs	r3, #0
 80118ee:	460a      	mov	r2, r1
 80118f0:	4911      	ldr	r1, [pc, #68]	@ (8011938 <xTimerCreateTimerTask+0x88>)
 80118f2:	4812      	ldr	r0, [pc, #72]	@ (801193c <xTimerCreateTimerTask+0x8c>)
 80118f4:	f7fe fee8 	bl	80106c8 <xTaskCreateStatic>
 80118f8:	4603      	mov	r3, r0
 80118fa:	4a11      	ldr	r2, [pc, #68]	@ (8011940 <xTimerCreateTimerTask+0x90>)
 80118fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80118fe:	4b10      	ldr	r3, [pc, #64]	@ (8011940 <xTimerCreateTimerTask+0x90>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d001      	beq.n	801190a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011906:	2301      	movs	r3, #1
 8011908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d10b      	bne.n	8011928 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	613b      	str	r3, [r7, #16]
}
 8011922:	bf00      	nop
 8011924:	bf00      	nop
 8011926:	e7fd      	b.n	8011924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011928:	697b      	ldr	r3, [r7, #20]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3718      	adds	r7, #24
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	20003194 	.word	0x20003194
 8011938:	08015fe0 	.word	0x08015fe0
 801193c:	08011a7d 	.word	0x08011a7d
 8011940:	20003198 	.word	0x20003198

08011944 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b08a      	sub	sp, #40	@ 0x28
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
 8011950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011952:	2300      	movs	r3, #0
 8011954:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d10b      	bne.n	8011974 <xTimerGenericCommand+0x30>
	__asm volatile
 801195c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011960:	f383 8811 	msr	BASEPRI, r3
 8011964:	f3bf 8f6f 	isb	sy
 8011968:	f3bf 8f4f 	dsb	sy
 801196c:	623b      	str	r3, [r7, #32]
}
 801196e:	bf00      	nop
 8011970:	bf00      	nop
 8011972:	e7fd      	b.n	8011970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011974:	4b19      	ldr	r3, [pc, #100]	@ (80119dc <xTimerGenericCommand+0x98>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d02a      	beq.n	80119d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	2b05      	cmp	r3, #5
 801198c:	dc18      	bgt.n	80119c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801198e:	f7ff fd95 	bl	80114bc <xTaskGetSchedulerState>
 8011992:	4603      	mov	r3, r0
 8011994:	2b02      	cmp	r3, #2
 8011996:	d109      	bne.n	80119ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011998:	4b10      	ldr	r3, [pc, #64]	@ (80119dc <xTimerGenericCommand+0x98>)
 801199a:	6818      	ldr	r0, [r3, #0]
 801199c:	f107 0110 	add.w	r1, r7, #16
 80119a0:	2300      	movs	r3, #0
 80119a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119a4:	f7fe f978 	bl	800fc98 <xQueueGenericSend>
 80119a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80119aa:	e012      	b.n	80119d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80119ac:	4b0b      	ldr	r3, [pc, #44]	@ (80119dc <xTimerGenericCommand+0x98>)
 80119ae:	6818      	ldr	r0, [r3, #0]
 80119b0:	f107 0110 	add.w	r1, r7, #16
 80119b4:	2300      	movs	r3, #0
 80119b6:	2200      	movs	r2, #0
 80119b8:	f7fe f96e 	bl	800fc98 <xQueueGenericSend>
 80119bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80119be:	e008      	b.n	80119d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80119c0:	4b06      	ldr	r3, [pc, #24]	@ (80119dc <xTimerGenericCommand+0x98>)
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	f107 0110 	add.w	r1, r7, #16
 80119c8:	2300      	movs	r3, #0
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	f7fe fa66 	bl	800fe9c <xQueueGenericSendFromISR>
 80119d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80119d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3728      	adds	r7, #40	@ 0x28
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	20003194 	.word	0x20003194

080119e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b088      	sub	sp, #32
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ea:	4b23      	ldr	r3, [pc, #140]	@ (8011a78 <prvProcessExpiredTimer+0x98>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	3304      	adds	r3, #4
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7fd ffab 	bl	800f954 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a04:	f003 0304 	and.w	r3, r3, #4
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d023      	beq.n	8011a54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	699a      	ldr	r2, [r3, #24]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	18d1      	adds	r1, r2, r3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	683a      	ldr	r2, [r7, #0]
 8011a18:	6978      	ldr	r0, [r7, #20]
 8011a1a:	f000 f8d5 	bl	8011bc8 <prvInsertTimerInActiveList>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d020      	beq.n	8011a66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a24:	2300      	movs	r3, #0
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	2300      	movs	r3, #0
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	6978      	ldr	r0, [r7, #20]
 8011a30:	f7ff ff88 	bl	8011944 <xTimerGenericCommand>
 8011a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d114      	bne.n	8011a66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a40:	f383 8811 	msr	BASEPRI, r3
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	60fb      	str	r3, [r7, #12]
}
 8011a4e:	bf00      	nop
 8011a50:	bf00      	nop
 8011a52:	e7fd      	b.n	8011a50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a5a:	f023 0301 	bic.w	r3, r3, #1
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	6a1b      	ldr	r3, [r3, #32]
 8011a6a:	6978      	ldr	r0, [r7, #20]
 8011a6c:	4798      	blx	r3
}
 8011a6e:	bf00      	nop
 8011a70:	3718      	adds	r7, #24
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	2000318c 	.word	0x2000318c

08011a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a84:	f107 0308 	add.w	r3, r7, #8
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f000 f859 	bl	8011b40 <prvGetNextExpireTime>
 8011a8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	4619      	mov	r1, r3
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f000 f805 	bl	8011aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a9a:	f000 f8d7 	bl	8011c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a9e:	bf00      	nop
 8011aa0:	e7f0      	b.n	8011a84 <prvTimerTask+0x8>
	...

08011aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011aae:	f7ff f86f 	bl	8010b90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ab2:	f107 0308 	add.w	r3, r7, #8
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f000 f866 	bl	8011b88 <prvSampleTimeNow>
 8011abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d130      	bne.n	8011b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10a      	bne.n	8011ae0 <prvProcessTimerOrBlockTask+0x3c>
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d806      	bhi.n	8011ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ad2:	f7ff f86b 	bl	8010bac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ad6:	68f9      	ldr	r1, [r7, #12]
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f7ff ff81 	bl	80119e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011ade:	e024      	b.n	8011b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d008      	beq.n	8011af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011ae6:	4b13      	ldr	r3, [pc, #76]	@ (8011b34 <prvProcessTimerOrBlockTask+0x90>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d101      	bne.n	8011af4 <prvProcessTimerOrBlockTask+0x50>
 8011af0:	2301      	movs	r3, #1
 8011af2:	e000      	b.n	8011af6 <prvProcessTimerOrBlockTask+0x52>
 8011af4:	2300      	movs	r3, #0
 8011af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011af8:	4b0f      	ldr	r3, [pc, #60]	@ (8011b38 <prvProcessTimerOrBlockTask+0x94>)
 8011afa:	6818      	ldr	r0, [r3, #0]
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	1ad3      	subs	r3, r2, r3
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	4619      	mov	r1, r3
 8011b06:	f7fe fdab 	bl	8010660 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011b0a:	f7ff f84f 	bl	8010bac <xTaskResumeAll>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d10a      	bne.n	8011b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011b14:	4b09      	ldr	r3, [pc, #36]	@ (8011b3c <prvProcessTimerOrBlockTask+0x98>)
 8011b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b1a:	601a      	str	r2, [r3, #0]
 8011b1c:	f3bf 8f4f 	dsb	sy
 8011b20:	f3bf 8f6f 	isb	sy
}
 8011b24:	e001      	b.n	8011b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011b26:	f7ff f841 	bl	8010bac <xTaskResumeAll>
}
 8011b2a:	bf00      	nop
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	20003190 	.word	0x20003190
 8011b38:	20003194 	.word	0x20003194
 8011b3c:	e000ed04 	.word	0xe000ed04

08011b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b48:	4b0e      	ldr	r3, [pc, #56]	@ (8011b84 <prvGetNextExpireTime+0x44>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d101      	bne.n	8011b56 <prvGetNextExpireTime+0x16>
 8011b52:	2201      	movs	r2, #1
 8011b54:	e000      	b.n	8011b58 <prvGetNextExpireTime+0x18>
 8011b56:	2200      	movs	r2, #0
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d105      	bne.n	8011b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b64:	4b07      	ldr	r3, [pc, #28]	@ (8011b84 <prvGetNextExpireTime+0x44>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	e001      	b.n	8011b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b70:	2300      	movs	r3, #0
 8011b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011b74:	68fb      	ldr	r3, [r7, #12]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3714      	adds	r7, #20
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	2000318c 	.word	0x2000318c

08011b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011b90:	f7ff f8aa 	bl	8010ce8 <xTaskGetTickCount>
 8011b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011b96:	4b0b      	ldr	r3, [pc, #44]	@ (8011bc4 <prvSampleTimeNow+0x3c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	68fa      	ldr	r2, [r7, #12]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d205      	bcs.n	8011bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011ba0:	f000 f93a 	bl	8011e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	e002      	b.n	8011bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011bb2:	4a04      	ldr	r2, [pc, #16]	@ (8011bc4 <prvSampleTimeNow+0x3c>)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	2000319c 	.word	0x2000319c

08011bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b086      	sub	sp, #24
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
 8011bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	68ba      	ldr	r2, [r7, #8]
 8011bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011be6:	68ba      	ldr	r2, [r7, #8]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d812      	bhi.n	8011c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bee:	687a      	ldr	r2, [r7, #4]
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	1ad2      	subs	r2, r2, r3
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	699b      	ldr	r3, [r3, #24]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d302      	bcc.n	8011c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	617b      	str	r3, [r7, #20]
 8011c00:	e01b      	b.n	8011c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011c02:	4b10      	ldr	r3, [pc, #64]	@ (8011c44 <prvInsertTimerInActiveList+0x7c>)
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	3304      	adds	r3, #4
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	f7fd fe68 	bl	800f8e2 <vListInsert>
 8011c12:	e012      	b.n	8011c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d206      	bcs.n	8011c2a <prvInsertTimerInActiveList+0x62>
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d302      	bcc.n	8011c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011c24:	2301      	movs	r3, #1
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e007      	b.n	8011c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c2a:	4b07      	ldr	r3, [pc, #28]	@ (8011c48 <prvInsertTimerInActiveList+0x80>)
 8011c2c:	681a      	ldr	r2, [r3, #0]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	3304      	adds	r3, #4
 8011c32:	4619      	mov	r1, r3
 8011c34:	4610      	mov	r0, r2
 8011c36:	f7fd fe54 	bl	800f8e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011c3a:	697b      	ldr	r3, [r7, #20]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3718      	adds	r7, #24
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	20003190 	.word	0x20003190
 8011c48:	2000318c 	.word	0x2000318c

08011c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b08e      	sub	sp, #56	@ 0x38
 8011c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c52:	e0ce      	b.n	8011df2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	da19      	bge.n	8011c8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c5a:	1d3b      	adds	r3, r7, #4
 8011c5c:	3304      	adds	r3, #4
 8011c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10b      	bne.n	8011c7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c6a:	f383 8811 	msr	BASEPRI, r3
 8011c6e:	f3bf 8f6f 	isb	sy
 8011c72:	f3bf 8f4f 	dsb	sy
 8011c76:	61fb      	str	r3, [r7, #28]
}
 8011c78:	bf00      	nop
 8011c7a:	bf00      	nop
 8011c7c:	e7fd      	b.n	8011c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c84:	6850      	ldr	r0, [r2, #4]
 8011c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c88:	6892      	ldr	r2, [r2, #8]
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f2c0 80ae 	blt.w	8011df2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c9c:	695b      	ldr	r3, [r3, #20]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d004      	beq.n	8011cac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca4:	3304      	adds	r3, #4
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7fd fe54 	bl	800f954 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011cac:	463b      	mov	r3, r7
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ff ff6a 	bl	8011b88 <prvSampleTimeNow>
 8011cb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b09      	cmp	r3, #9
 8011cba:	f200 8097 	bhi.w	8011dec <prvProcessReceivedCommands+0x1a0>
 8011cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc4 <prvProcessReceivedCommands+0x78>)
 8011cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc4:	08011ced 	.word	0x08011ced
 8011cc8:	08011ced 	.word	0x08011ced
 8011ccc:	08011ced 	.word	0x08011ced
 8011cd0:	08011d63 	.word	0x08011d63
 8011cd4:	08011d77 	.word	0x08011d77
 8011cd8:	08011dc3 	.word	0x08011dc3
 8011cdc:	08011ced 	.word	0x08011ced
 8011ce0:	08011ced 	.word	0x08011ced
 8011ce4:	08011d63 	.word	0x08011d63
 8011ce8:	08011d77 	.word	0x08011d77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011cf2:	f043 0301 	orr.w	r3, r3, #1
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d02:	699b      	ldr	r3, [r3, #24]
 8011d04:	18d1      	adds	r1, r2, r3
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d0c:	f7ff ff5c 	bl	8011bc8 <prvInsertTimerInActiveList>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d06c      	beq.n	8011df0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d18:	6a1b      	ldr	r3, [r3, #32]
 8011d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d24:	f003 0304 	and.w	r3, r3, #4
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d061      	beq.n	8011df0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d30:	699b      	ldr	r3, [r3, #24]
 8011d32:	441a      	add	r2, r3
 8011d34:	2300      	movs	r3, #0
 8011d36:	9300      	str	r3, [sp, #0]
 8011d38:	2300      	movs	r3, #0
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d3e:	f7ff fe01 	bl	8011944 <xTimerGenericCommand>
 8011d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d152      	bne.n	8011df0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d4e:	f383 8811 	msr	BASEPRI, r3
 8011d52:	f3bf 8f6f 	isb	sy
 8011d56:	f3bf 8f4f 	dsb	sy
 8011d5a:	61bb      	str	r3, [r7, #24]
}
 8011d5c:	bf00      	nop
 8011d5e:	bf00      	nop
 8011d60:	e7fd      	b.n	8011d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d68:	f023 0301 	bic.w	r3, r3, #1
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011d74:	e03d      	b.n	8011df2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d7c:	f043 0301 	orr.w	r3, r3, #1
 8011d80:	b2da      	uxtb	r2, r3
 8011d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011d88:	68ba      	ldr	r2, [r7, #8]
 8011d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d90:	699b      	ldr	r3, [r3, #24]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10b      	bne.n	8011dae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	617b      	str	r3, [r7, #20]
}
 8011da8:	bf00      	nop
 8011daa:	bf00      	nop
 8011dac:	e7fd      	b.n	8011daa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db0:	699a      	ldr	r2, [r3, #24]
 8011db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db4:	18d1      	adds	r1, r2, r3
 8011db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dbc:	f7ff ff04 	bl	8011bc8 <prvInsertTimerInActiveList>
					break;
 8011dc0:	e017      	b.n	8011df2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011dc8:	f003 0302 	and.w	r3, r3, #2
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d103      	bne.n	8011dd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dd2:	f000 fc09 	bl	80125e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011dd6:	e00c      	b.n	8011df2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011dde:	f023 0301 	bic.w	r3, r3, #1
 8011de2:	b2da      	uxtb	r2, r3
 8011de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011dea:	e002      	b.n	8011df2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011dec:	bf00      	nop
 8011dee:	e000      	b.n	8011df2 <prvProcessReceivedCommands+0x1a6>
					break;
 8011df0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011df2:	4b08      	ldr	r3, [pc, #32]	@ (8011e14 <prvProcessReceivedCommands+0x1c8>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	1d39      	adds	r1, r7, #4
 8011df8:	2200      	movs	r2, #0
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fe f8ec 	bl	800ffd8 <xQueueReceive>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f47f af26 	bne.w	8011c54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011e08:	bf00      	nop
 8011e0a:	bf00      	nop
 8011e0c:	3730      	adds	r7, #48	@ 0x30
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	20003194 	.word	0x20003194

08011e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e1e:	e049      	b.n	8011eb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011e20:	4b2e      	ldr	r3, [pc, #184]	@ (8011edc <prvSwitchTimerLists+0xc4>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8011edc <prvSwitchTimerLists+0xc4>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	3304      	adds	r3, #4
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fd fd8b 	bl	800f954 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6a1b      	ldr	r3, [r3, #32]
 8011e42:	68f8      	ldr	r0, [r7, #12]
 8011e44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e4c:	f003 0304 	and.w	r3, r3, #4
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d02f      	beq.n	8011eb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	699b      	ldr	r3, [r3, #24]
 8011e58:	693a      	ldr	r2, [r7, #16]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e5e:	68ba      	ldr	r2, [r7, #8]
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d90e      	bls.n	8011e84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e72:	4b1a      	ldr	r3, [pc, #104]	@ (8011edc <prvSwitchTimerLists+0xc4>)
 8011e74:	681a      	ldr	r2, [r3, #0]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	3304      	adds	r3, #4
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7fd fd30 	bl	800f8e2 <vListInsert>
 8011e82:	e017      	b.n	8011eb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e84:	2300      	movs	r3, #0
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	2300      	movs	r3, #0
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7ff fd58 	bl	8011944 <xTimerGenericCommand>
 8011e94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10b      	bne.n	8011eb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	603b      	str	r3, [r7, #0]
}
 8011eae:	bf00      	nop
 8011eb0:	bf00      	nop
 8011eb2:	e7fd      	b.n	8011eb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011eb4:	4b09      	ldr	r3, [pc, #36]	@ (8011edc <prvSwitchTimerLists+0xc4>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1b0      	bne.n	8011e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011ebe:	4b07      	ldr	r3, [pc, #28]	@ (8011edc <prvSwitchTimerLists+0xc4>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011ec4:	4b06      	ldr	r3, [pc, #24]	@ (8011ee0 <prvSwitchTimerLists+0xc8>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4a04      	ldr	r2, [pc, #16]	@ (8011edc <prvSwitchTimerLists+0xc4>)
 8011eca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011ecc:	4a04      	ldr	r2, [pc, #16]	@ (8011ee0 <prvSwitchTimerLists+0xc8>)
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	6013      	str	r3, [r2, #0]
}
 8011ed2:	bf00      	nop
 8011ed4:	3718      	adds	r7, #24
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	2000318c 	.word	0x2000318c
 8011ee0:	20003190 	.word	0x20003190

08011ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011eea:	f000 f98d 	bl	8012208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011eee:	4b15      	ldr	r3, [pc, #84]	@ (8011f44 <prvCheckForValidListAndQueue+0x60>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d120      	bne.n	8011f38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011ef6:	4814      	ldr	r0, [pc, #80]	@ (8011f48 <prvCheckForValidListAndQueue+0x64>)
 8011ef8:	f7fd fca2 	bl	800f840 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011efc:	4813      	ldr	r0, [pc, #76]	@ (8011f4c <prvCheckForValidListAndQueue+0x68>)
 8011efe:	f7fd fc9f 	bl	800f840 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011f02:	4b13      	ldr	r3, [pc, #76]	@ (8011f50 <prvCheckForValidListAndQueue+0x6c>)
 8011f04:	4a10      	ldr	r2, [pc, #64]	@ (8011f48 <prvCheckForValidListAndQueue+0x64>)
 8011f06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011f08:	4b12      	ldr	r3, [pc, #72]	@ (8011f54 <prvCheckForValidListAndQueue+0x70>)
 8011f0a:	4a10      	ldr	r2, [pc, #64]	@ (8011f4c <prvCheckForValidListAndQueue+0x68>)
 8011f0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011f0e:	2300      	movs	r3, #0
 8011f10:	9300      	str	r3, [sp, #0]
 8011f12:	4b11      	ldr	r3, [pc, #68]	@ (8011f58 <prvCheckForValidListAndQueue+0x74>)
 8011f14:	4a11      	ldr	r2, [pc, #68]	@ (8011f5c <prvCheckForValidListAndQueue+0x78>)
 8011f16:	2110      	movs	r1, #16
 8011f18:	200a      	movs	r0, #10
 8011f1a:	f7fd fdaf 	bl	800fa7c <xQueueGenericCreateStatic>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	4a08      	ldr	r2, [pc, #32]	@ (8011f44 <prvCheckForValidListAndQueue+0x60>)
 8011f22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011f24:	4b07      	ldr	r3, [pc, #28]	@ (8011f44 <prvCheckForValidListAndQueue+0x60>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d005      	beq.n	8011f38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011f2c:	4b05      	ldr	r3, [pc, #20]	@ (8011f44 <prvCheckForValidListAndQueue+0x60>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	490b      	ldr	r1, [pc, #44]	@ (8011f60 <prvCheckForValidListAndQueue+0x7c>)
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fe fb6a 	bl	801060c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011f38:	f000 f998 	bl	801226c <vPortExitCritical>
}
 8011f3c:	bf00      	nop
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20003194 	.word	0x20003194
 8011f48:	20003164 	.word	0x20003164
 8011f4c:	20003178 	.word	0x20003178
 8011f50:	2000318c 	.word	0x2000318c
 8011f54:	20003190 	.word	0x20003190
 8011f58:	20003240 	.word	0x20003240
 8011f5c:	200031a0 	.word	0x200031a0
 8011f60:	08015fe8 	.word	0x08015fe8

08011f64 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b08a      	sub	sp, #40	@ 0x28
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8011f72:	f06f 0301 	mvn.w	r3, #1
 8011f76:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f84:	4b06      	ldr	r3, [pc, #24]	@ (8011fa0 <xTimerPendFunctionCallFromISR+0x3c>)
 8011f86:	6818      	ldr	r0, [r3, #0]
 8011f88:	f107 0114 	add.w	r1, r7, #20
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	683a      	ldr	r2, [r7, #0]
 8011f90:	f7fd ff84 	bl	800fe9c <xQueueGenericSendFromISR>
 8011f94:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8011f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3728      	adds	r7, #40	@ 0x28
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	20003194 	.word	0x20003194

08011fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b085      	sub	sp, #20
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	3b04      	subs	r3, #4
 8011fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	3b04      	subs	r3, #4
 8011fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	f023 0201 	bic.w	r2, r3, #1
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	3b04      	subs	r3, #4
 8011fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8012008 <pxPortInitialiseStack+0x64>)
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	3b14      	subs	r3, #20
 8011fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	3b04      	subs	r3, #4
 8011fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f06f 0202 	mvn.w	r2, #2
 8011ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	3b20      	subs	r3, #32
 8011ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr
 8012008:	0801200d 	.word	0x0801200d

0801200c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012012:	2300      	movs	r3, #0
 8012014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012016:	4b13      	ldr	r3, [pc, #76]	@ (8012064 <prvTaskExitError+0x58>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201e:	d00b      	beq.n	8012038 <prvTaskExitError+0x2c>
	__asm volatile
 8012020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	60fb      	str	r3, [r7, #12]
}
 8012032:	bf00      	nop
 8012034:	bf00      	nop
 8012036:	e7fd      	b.n	8012034 <prvTaskExitError+0x28>
	__asm volatile
 8012038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	60bb      	str	r3, [r7, #8]
}
 801204a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801204c:	bf00      	nop
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d0fc      	beq.n	801204e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012054:	bf00      	nop
 8012056:	bf00      	nop
 8012058:	3714      	adds	r7, #20
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	200002fc 	.word	0x200002fc
	...

08012070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012070:	4b07      	ldr	r3, [pc, #28]	@ (8012090 <pxCurrentTCBConst2>)
 8012072:	6819      	ldr	r1, [r3, #0]
 8012074:	6808      	ldr	r0, [r1, #0]
 8012076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207a:	f380 8809 	msr	PSP, r0
 801207e:	f3bf 8f6f 	isb	sy
 8012082:	f04f 0000 	mov.w	r0, #0
 8012086:	f380 8811 	msr	BASEPRI, r0
 801208a:	4770      	bx	lr
 801208c:	f3af 8000 	nop.w

08012090 <pxCurrentTCBConst2>:
 8012090:	20002c64 	.word	0x20002c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012094:	bf00      	nop
 8012096:	bf00      	nop

08012098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012098:	4808      	ldr	r0, [pc, #32]	@ (80120bc <prvPortStartFirstTask+0x24>)
 801209a:	6800      	ldr	r0, [r0, #0]
 801209c:	6800      	ldr	r0, [r0, #0]
 801209e:	f380 8808 	msr	MSP, r0
 80120a2:	f04f 0000 	mov.w	r0, #0
 80120a6:	f380 8814 	msr	CONTROL, r0
 80120aa:	b662      	cpsie	i
 80120ac:	b661      	cpsie	f
 80120ae:	f3bf 8f4f 	dsb	sy
 80120b2:	f3bf 8f6f 	isb	sy
 80120b6:	df00      	svc	0
 80120b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80120ba:	bf00      	nop
 80120bc:	e000ed08 	.word	0xe000ed08

080120c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b086      	sub	sp, #24
 80120c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80120c6:	4b47      	ldr	r3, [pc, #284]	@ (80121e4 <xPortStartScheduler+0x124>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4a47      	ldr	r2, [pc, #284]	@ (80121e8 <xPortStartScheduler+0x128>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d10b      	bne.n	80120e8 <xPortStartScheduler+0x28>
	__asm volatile
 80120d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	613b      	str	r3, [r7, #16]
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	e7fd      	b.n	80120e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80120e8:	4b3e      	ldr	r3, [pc, #248]	@ (80121e4 <xPortStartScheduler+0x124>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4a3f      	ldr	r2, [pc, #252]	@ (80121ec <xPortStartScheduler+0x12c>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d10b      	bne.n	801210a <xPortStartScheduler+0x4a>
	__asm volatile
 80120f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120f6:	f383 8811 	msr	BASEPRI, r3
 80120fa:	f3bf 8f6f 	isb	sy
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	60fb      	str	r3, [r7, #12]
}
 8012104:	bf00      	nop
 8012106:	bf00      	nop
 8012108:	e7fd      	b.n	8012106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801210a:	4b39      	ldr	r3, [pc, #228]	@ (80121f0 <xPortStartScheduler+0x130>)
 801210c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	b2db      	uxtb	r3, r3
 8012114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	22ff      	movs	r2, #255	@ 0xff
 801211a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	b2db      	uxtb	r3, r3
 8012122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012124:	78fb      	ldrb	r3, [r7, #3]
 8012126:	b2db      	uxtb	r3, r3
 8012128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801212c:	b2da      	uxtb	r2, r3
 801212e:	4b31      	ldr	r3, [pc, #196]	@ (80121f4 <xPortStartScheduler+0x134>)
 8012130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012132:	4b31      	ldr	r3, [pc, #196]	@ (80121f8 <xPortStartScheduler+0x138>)
 8012134:	2207      	movs	r2, #7
 8012136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012138:	e009      	b.n	801214e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801213a:	4b2f      	ldr	r3, [pc, #188]	@ (80121f8 <xPortStartScheduler+0x138>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	3b01      	subs	r3, #1
 8012140:	4a2d      	ldr	r2, [pc, #180]	@ (80121f8 <xPortStartScheduler+0x138>)
 8012142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012144:	78fb      	ldrb	r3, [r7, #3]
 8012146:	b2db      	uxtb	r3, r3
 8012148:	005b      	lsls	r3, r3, #1
 801214a:	b2db      	uxtb	r3, r3
 801214c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801214e:	78fb      	ldrb	r3, [r7, #3]
 8012150:	b2db      	uxtb	r3, r3
 8012152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012156:	2b80      	cmp	r3, #128	@ 0x80
 8012158:	d0ef      	beq.n	801213a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801215a:	4b27      	ldr	r3, [pc, #156]	@ (80121f8 <xPortStartScheduler+0x138>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f1c3 0307 	rsb	r3, r3, #7
 8012162:	2b04      	cmp	r3, #4
 8012164:	d00b      	beq.n	801217e <xPortStartScheduler+0xbe>
	__asm volatile
 8012166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801216a:	f383 8811 	msr	BASEPRI, r3
 801216e:	f3bf 8f6f 	isb	sy
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	60bb      	str	r3, [r7, #8]
}
 8012178:	bf00      	nop
 801217a:	bf00      	nop
 801217c:	e7fd      	b.n	801217a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801217e:	4b1e      	ldr	r3, [pc, #120]	@ (80121f8 <xPortStartScheduler+0x138>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	021b      	lsls	r3, r3, #8
 8012184:	4a1c      	ldr	r2, [pc, #112]	@ (80121f8 <xPortStartScheduler+0x138>)
 8012186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012188:	4b1b      	ldr	r3, [pc, #108]	@ (80121f8 <xPortStartScheduler+0x138>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012190:	4a19      	ldr	r2, [pc, #100]	@ (80121f8 <xPortStartScheduler+0x138>)
 8012192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	b2da      	uxtb	r2, r3
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801219c:	4b17      	ldr	r3, [pc, #92]	@ (80121fc <xPortStartScheduler+0x13c>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a16      	ldr	r2, [pc, #88]	@ (80121fc <xPortStartScheduler+0x13c>)
 80121a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80121a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80121a8:	4b14      	ldr	r3, [pc, #80]	@ (80121fc <xPortStartScheduler+0x13c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4a13      	ldr	r2, [pc, #76]	@ (80121fc <xPortStartScheduler+0x13c>)
 80121ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80121b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80121b4:	f000 f8da 	bl	801236c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80121b8:	4b11      	ldr	r3, [pc, #68]	@ (8012200 <xPortStartScheduler+0x140>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80121be:	f000 f8f9 	bl	80123b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80121c2:	4b10      	ldr	r3, [pc, #64]	@ (8012204 <xPortStartScheduler+0x144>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4a0f      	ldr	r2, [pc, #60]	@ (8012204 <xPortStartScheduler+0x144>)
 80121c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80121cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80121ce:	f7ff ff63 	bl	8012098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80121d2:	f7fe fe53 	bl	8010e7c <vTaskSwitchContext>
	prvTaskExitError();
 80121d6:	f7ff ff19 	bl	801200c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80121da:	2300      	movs	r3, #0
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3718      	adds	r7, #24
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	e000ed00 	.word	0xe000ed00
 80121e8:	410fc271 	.word	0x410fc271
 80121ec:	410fc270 	.word	0x410fc270
 80121f0:	e000e400 	.word	0xe000e400
 80121f4:	20003290 	.word	0x20003290
 80121f8:	20003294 	.word	0x20003294
 80121fc:	e000ed20 	.word	0xe000ed20
 8012200:	200002fc 	.word	0x200002fc
 8012204:	e000ef34 	.word	0xe000ef34

08012208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
	__asm volatile
 801220e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012212:	f383 8811 	msr	BASEPRI, r3
 8012216:	f3bf 8f6f 	isb	sy
 801221a:	f3bf 8f4f 	dsb	sy
 801221e:	607b      	str	r3, [r7, #4]
}
 8012220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012222:	4b10      	ldr	r3, [pc, #64]	@ (8012264 <vPortEnterCritical+0x5c>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	3301      	adds	r3, #1
 8012228:	4a0e      	ldr	r2, [pc, #56]	@ (8012264 <vPortEnterCritical+0x5c>)
 801222a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801222c:	4b0d      	ldr	r3, [pc, #52]	@ (8012264 <vPortEnterCritical+0x5c>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d110      	bne.n	8012256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012234:	4b0c      	ldr	r3, [pc, #48]	@ (8012268 <vPortEnterCritical+0x60>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	b2db      	uxtb	r3, r3
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00b      	beq.n	8012256 <vPortEnterCritical+0x4e>
	__asm volatile
 801223e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012242:	f383 8811 	msr	BASEPRI, r3
 8012246:	f3bf 8f6f 	isb	sy
 801224a:	f3bf 8f4f 	dsb	sy
 801224e:	603b      	str	r3, [r7, #0]
}
 8012250:	bf00      	nop
 8012252:	bf00      	nop
 8012254:	e7fd      	b.n	8012252 <vPortEnterCritical+0x4a>
	}
}
 8012256:	bf00      	nop
 8012258:	370c      	adds	r7, #12
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop
 8012264:	200002fc 	.word	0x200002fc
 8012268:	e000ed04 	.word	0xe000ed04

0801226c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012272:	4b12      	ldr	r3, [pc, #72]	@ (80122bc <vPortExitCritical+0x50>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d10b      	bne.n	8012292 <vPortExitCritical+0x26>
	__asm volatile
 801227a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801227e:	f383 8811 	msr	BASEPRI, r3
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	607b      	str	r3, [r7, #4]
}
 801228c:	bf00      	nop
 801228e:	bf00      	nop
 8012290:	e7fd      	b.n	801228e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012292:	4b0a      	ldr	r3, [pc, #40]	@ (80122bc <vPortExitCritical+0x50>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	3b01      	subs	r3, #1
 8012298:	4a08      	ldr	r2, [pc, #32]	@ (80122bc <vPortExitCritical+0x50>)
 801229a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801229c:	4b07      	ldr	r3, [pc, #28]	@ (80122bc <vPortExitCritical+0x50>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d105      	bne.n	80122b0 <vPortExitCritical+0x44>
 80122a4:	2300      	movs	r3, #0
 80122a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	f383 8811 	msr	BASEPRI, r3
}
 80122ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80122b0:	bf00      	nop
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr
 80122bc:	200002fc 	.word	0x200002fc

080122c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80122c0:	f3ef 8009 	mrs	r0, PSP
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	4b15      	ldr	r3, [pc, #84]	@ (8012320 <pxCurrentTCBConst>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	f01e 0f10 	tst.w	lr, #16
 80122d0:	bf08      	it	eq
 80122d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80122d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122da:	6010      	str	r0, [r2, #0]
 80122dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80122e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80122e4:	f380 8811 	msr	BASEPRI, r0
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f7fe fdc4 	bl	8010e7c <vTaskSwitchContext>
 80122f4:	f04f 0000 	mov.w	r0, #0
 80122f8:	f380 8811 	msr	BASEPRI, r0
 80122fc:	bc09      	pop	{r0, r3}
 80122fe:	6819      	ldr	r1, [r3, #0]
 8012300:	6808      	ldr	r0, [r1, #0]
 8012302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012306:	f01e 0f10 	tst.w	lr, #16
 801230a:	bf08      	it	eq
 801230c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012310:	f380 8809 	msr	PSP, r0
 8012314:	f3bf 8f6f 	isb	sy
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	f3af 8000 	nop.w

08012320 <pxCurrentTCBConst>:
 8012320:	20002c64 	.word	0x20002c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012324:	bf00      	nop
 8012326:	bf00      	nop

08012328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
	__asm volatile
 801232e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012332:	f383 8811 	msr	BASEPRI, r3
 8012336:	f3bf 8f6f 	isb	sy
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	607b      	str	r3, [r7, #4]
}
 8012340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012342:	f7fe fce1 	bl	8010d08 <xTaskIncrementTick>
 8012346:	4603      	mov	r3, r0
 8012348:	2b00      	cmp	r3, #0
 801234a:	d003      	beq.n	8012354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801234c:	4b06      	ldr	r3, [pc, #24]	@ (8012368 <xPortSysTickHandler+0x40>)
 801234e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012352:	601a      	str	r2, [r3, #0]
 8012354:	2300      	movs	r3, #0
 8012356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	f383 8811 	msr	BASEPRI, r3
}
 801235e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012360:	bf00      	nop
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	e000ed04 	.word	0xe000ed04

0801236c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801236c:	b480      	push	{r7}
 801236e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012370:	4b0b      	ldr	r3, [pc, #44]	@ (80123a0 <vPortSetupTimerInterrupt+0x34>)
 8012372:	2200      	movs	r2, #0
 8012374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012376:	4b0b      	ldr	r3, [pc, #44]	@ (80123a4 <vPortSetupTimerInterrupt+0x38>)
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801237c:	4b0a      	ldr	r3, [pc, #40]	@ (80123a8 <vPortSetupTimerInterrupt+0x3c>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a0a      	ldr	r2, [pc, #40]	@ (80123ac <vPortSetupTimerInterrupt+0x40>)
 8012382:	fba2 2303 	umull	r2, r3, r2, r3
 8012386:	099b      	lsrs	r3, r3, #6
 8012388:	4a09      	ldr	r2, [pc, #36]	@ (80123b0 <vPortSetupTimerInterrupt+0x44>)
 801238a:	3b01      	subs	r3, #1
 801238c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801238e:	4b04      	ldr	r3, [pc, #16]	@ (80123a0 <vPortSetupTimerInterrupt+0x34>)
 8012390:	2207      	movs	r2, #7
 8012392:	601a      	str	r2, [r3, #0]
}
 8012394:	bf00      	nop
 8012396:	46bd      	mov	sp, r7
 8012398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop
 80123a0:	e000e010 	.word	0xe000e010
 80123a4:	e000e018 	.word	0xe000e018
 80123a8:	200002f0 	.word	0x200002f0
 80123ac:	10624dd3 	.word	0x10624dd3
 80123b0:	e000e014 	.word	0xe000e014

080123b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80123b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80123c4 <vPortEnableVFP+0x10>
 80123b8:	6801      	ldr	r1, [r0, #0]
 80123ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80123be:	6001      	str	r1, [r0, #0]
 80123c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80123c2:	bf00      	nop
 80123c4:	e000ed88 	.word	0xe000ed88

080123c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80123c8:	b480      	push	{r7}
 80123ca:	b085      	sub	sp, #20
 80123cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80123ce:	f3ef 8305 	mrs	r3, IPSR
 80123d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2b0f      	cmp	r3, #15
 80123d8:	d915      	bls.n	8012406 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80123da:	4a18      	ldr	r2, [pc, #96]	@ (801243c <vPortValidateInterruptPriority+0x74>)
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	4413      	add	r3, r2
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80123e4:	4b16      	ldr	r3, [pc, #88]	@ (8012440 <vPortValidateInterruptPriority+0x78>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	7afa      	ldrb	r2, [r7, #11]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d20b      	bcs.n	8012406 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80123ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123f2:	f383 8811 	msr	BASEPRI, r3
 80123f6:	f3bf 8f6f 	isb	sy
 80123fa:	f3bf 8f4f 	dsb	sy
 80123fe:	607b      	str	r3, [r7, #4]
}
 8012400:	bf00      	nop
 8012402:	bf00      	nop
 8012404:	e7fd      	b.n	8012402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012406:	4b0f      	ldr	r3, [pc, #60]	@ (8012444 <vPortValidateInterruptPriority+0x7c>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801240e:	4b0e      	ldr	r3, [pc, #56]	@ (8012448 <vPortValidateInterruptPriority+0x80>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	429a      	cmp	r2, r3
 8012414:	d90b      	bls.n	801242e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801241a:	f383 8811 	msr	BASEPRI, r3
 801241e:	f3bf 8f6f 	isb	sy
 8012422:	f3bf 8f4f 	dsb	sy
 8012426:	603b      	str	r3, [r7, #0]
}
 8012428:	bf00      	nop
 801242a:	bf00      	nop
 801242c:	e7fd      	b.n	801242a <vPortValidateInterruptPriority+0x62>
	}
 801242e:	bf00      	nop
 8012430:	3714      	adds	r7, #20
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	e000e3f0 	.word	0xe000e3f0
 8012440:	20003290 	.word	0x20003290
 8012444:	e000ed0c 	.word	0xe000ed0c
 8012448:	20003294 	.word	0x20003294

0801244c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b08a      	sub	sp, #40	@ 0x28
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012454:	2300      	movs	r3, #0
 8012456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012458:	f7fe fb9a 	bl	8010b90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801245c:	4b5c      	ldr	r3, [pc, #368]	@ (80125d0 <pvPortMalloc+0x184>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d101      	bne.n	8012468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012464:	f000 f924 	bl	80126b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012468:	4b5a      	ldr	r3, [pc, #360]	@ (80125d4 <pvPortMalloc+0x188>)
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	4013      	ands	r3, r2
 8012470:	2b00      	cmp	r3, #0
 8012472:	f040 8095 	bne.w	80125a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d01e      	beq.n	80124ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801247c:	2208      	movs	r2, #8
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	4413      	add	r3, r2
 8012482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f003 0307 	and.w	r3, r3, #7
 801248a:	2b00      	cmp	r3, #0
 801248c:	d015      	beq.n	80124ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f023 0307 	bic.w	r3, r3, #7
 8012494:	3308      	adds	r3, #8
 8012496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f003 0307 	and.w	r3, r3, #7
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00b      	beq.n	80124ba <pvPortMalloc+0x6e>
	__asm volatile
 80124a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124a6:	f383 8811 	msr	BASEPRI, r3
 80124aa:	f3bf 8f6f 	isb	sy
 80124ae:	f3bf 8f4f 	dsb	sy
 80124b2:	617b      	str	r3, [r7, #20]
}
 80124b4:	bf00      	nop
 80124b6:	bf00      	nop
 80124b8:	e7fd      	b.n	80124b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d06f      	beq.n	80125a0 <pvPortMalloc+0x154>
 80124c0:	4b45      	ldr	r3, [pc, #276]	@ (80125d8 <pvPortMalloc+0x18c>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d86a      	bhi.n	80125a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80124ca:	4b44      	ldr	r3, [pc, #272]	@ (80125dc <pvPortMalloc+0x190>)
 80124cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80124ce:	4b43      	ldr	r3, [pc, #268]	@ (80125dc <pvPortMalloc+0x190>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124d4:	e004      	b.n	80124e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80124d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80124da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d903      	bls.n	80124f2 <pvPortMalloc+0xa6>
 80124ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1f1      	bne.n	80124d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80124f2:	4b37      	ldr	r3, [pc, #220]	@ (80125d0 <pvPortMalloc+0x184>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d051      	beq.n	80125a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80124fc:	6a3b      	ldr	r3, [r7, #32]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2208      	movs	r2, #8
 8012502:	4413      	add	r3, r2
 8012504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	6a3b      	ldr	r3, [r7, #32]
 801250c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012510:	685a      	ldr	r2, [r3, #4]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	1ad2      	subs	r2, r2, r3
 8012516:	2308      	movs	r3, #8
 8012518:	005b      	lsls	r3, r3, #1
 801251a:	429a      	cmp	r2, r3
 801251c:	d920      	bls.n	8012560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801251e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4413      	add	r3, r2
 8012524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	f003 0307 	and.w	r3, r3, #7
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00b      	beq.n	8012548 <pvPortMalloc+0xfc>
	__asm volatile
 8012530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	613b      	str	r3, [r7, #16]
}
 8012542:	bf00      	nop
 8012544:	bf00      	nop
 8012546:	e7fd      	b.n	8012544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254a:	685a      	ldr	r2, [r3, #4]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	1ad2      	subs	r2, r2, r3
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801255a:	69b8      	ldr	r0, [r7, #24]
 801255c:	f000 f90c 	bl	8012778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012560:	4b1d      	ldr	r3, [pc, #116]	@ (80125d8 <pvPortMalloc+0x18c>)
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	4a1b      	ldr	r2, [pc, #108]	@ (80125d8 <pvPortMalloc+0x18c>)
 801256c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801256e:	4b1a      	ldr	r3, [pc, #104]	@ (80125d8 <pvPortMalloc+0x18c>)
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	4b1b      	ldr	r3, [pc, #108]	@ (80125e0 <pvPortMalloc+0x194>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	429a      	cmp	r2, r3
 8012578:	d203      	bcs.n	8012582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801257a:	4b17      	ldr	r3, [pc, #92]	@ (80125d8 <pvPortMalloc+0x18c>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4a18      	ldr	r2, [pc, #96]	@ (80125e0 <pvPortMalloc+0x194>)
 8012580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012584:	685a      	ldr	r2, [r3, #4]
 8012586:	4b13      	ldr	r3, [pc, #76]	@ (80125d4 <pvPortMalloc+0x188>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	431a      	orrs	r2, r3
 801258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012592:	2200      	movs	r2, #0
 8012594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012596:	4b13      	ldr	r3, [pc, #76]	@ (80125e4 <pvPortMalloc+0x198>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3301      	adds	r3, #1
 801259c:	4a11      	ldr	r2, [pc, #68]	@ (80125e4 <pvPortMalloc+0x198>)
 801259e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80125a0:	f7fe fb04 	bl	8010bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	f003 0307 	and.w	r3, r3, #7
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d00b      	beq.n	80125c6 <pvPortMalloc+0x17a>
	__asm volatile
 80125ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b2:	f383 8811 	msr	BASEPRI, r3
 80125b6:	f3bf 8f6f 	isb	sy
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	60fb      	str	r3, [r7, #12]
}
 80125c0:	bf00      	nop
 80125c2:	bf00      	nop
 80125c4:	e7fd      	b.n	80125c2 <pvPortMalloc+0x176>
	return pvReturn;
 80125c6:	69fb      	ldr	r3, [r7, #28]
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3728      	adds	r7, #40	@ 0x28
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	20014410 	.word	0x20014410
 80125d4:	20014424 	.word	0x20014424
 80125d8:	20014414 	.word	0x20014414
 80125dc:	20014408 	.word	0x20014408
 80125e0:	20014418 	.word	0x20014418
 80125e4:	2001441c 	.word	0x2001441c

080125e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d04f      	beq.n	801269a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80125fa:	2308      	movs	r3, #8
 80125fc:	425b      	negs	r3, r3
 80125fe:	697a      	ldr	r2, [r7, #20]
 8012600:	4413      	add	r3, r2
 8012602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	685a      	ldr	r2, [r3, #4]
 801260c:	4b25      	ldr	r3, [pc, #148]	@ (80126a4 <vPortFree+0xbc>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4013      	ands	r3, r2
 8012612:	2b00      	cmp	r3, #0
 8012614:	d10b      	bne.n	801262e <vPortFree+0x46>
	__asm volatile
 8012616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801261a:	f383 8811 	msr	BASEPRI, r3
 801261e:	f3bf 8f6f 	isb	sy
 8012622:	f3bf 8f4f 	dsb	sy
 8012626:	60fb      	str	r3, [r7, #12]
}
 8012628:	bf00      	nop
 801262a:	bf00      	nop
 801262c:	e7fd      	b.n	801262a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00b      	beq.n	801264e <vPortFree+0x66>
	__asm volatile
 8012636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801263a:	f383 8811 	msr	BASEPRI, r3
 801263e:	f3bf 8f6f 	isb	sy
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	60bb      	str	r3, [r7, #8]
}
 8012648:	bf00      	nop
 801264a:	bf00      	nop
 801264c:	e7fd      	b.n	801264a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	685a      	ldr	r2, [r3, #4]
 8012652:	4b14      	ldr	r3, [pc, #80]	@ (80126a4 <vPortFree+0xbc>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	4013      	ands	r3, r2
 8012658:	2b00      	cmp	r3, #0
 801265a:	d01e      	beq.n	801269a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d11a      	bne.n	801269a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	685a      	ldr	r2, [r3, #4]
 8012668:	4b0e      	ldr	r3, [pc, #56]	@ (80126a4 <vPortFree+0xbc>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	43db      	mvns	r3, r3
 801266e:	401a      	ands	r2, r3
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012674:	f7fe fa8c 	bl	8010b90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	685a      	ldr	r2, [r3, #4]
 801267c:	4b0a      	ldr	r3, [pc, #40]	@ (80126a8 <vPortFree+0xc0>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4413      	add	r3, r2
 8012682:	4a09      	ldr	r2, [pc, #36]	@ (80126a8 <vPortFree+0xc0>)
 8012684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012686:	6938      	ldr	r0, [r7, #16]
 8012688:	f000 f876 	bl	8012778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801268c:	4b07      	ldr	r3, [pc, #28]	@ (80126ac <vPortFree+0xc4>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	3301      	adds	r3, #1
 8012692:	4a06      	ldr	r2, [pc, #24]	@ (80126ac <vPortFree+0xc4>)
 8012694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012696:	f7fe fa89 	bl	8010bac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801269a:	bf00      	nop
 801269c:	3718      	adds	r7, #24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	20014424 	.word	0x20014424
 80126a8:	20014414 	.word	0x20014414
 80126ac:	20014420 	.word	0x20014420

080126b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80126b0:	b480      	push	{r7}
 80126b2:	b085      	sub	sp, #20
 80126b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80126b6:	4b29      	ldr	r3, [pc, #164]	@ (801275c <prvHeapInit+0xac>)
 80126b8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80126ba:	4b29      	ldr	r3, [pc, #164]	@ (8012760 <prvHeapInit+0xb0>)
 80126bc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f003 0307 	and.w	r3, r3, #7
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00c      	beq.n	80126e2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	3307      	adds	r3, #7
 80126cc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	f023 0307 	bic.w	r3, r3, #7
 80126d4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80126d6:	68ba      	ldr	r2, [r7, #8]
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	4a20      	ldr	r2, [pc, #128]	@ (8012760 <prvHeapInit+0xb0>)
 80126de:	4413      	add	r3, r2
 80126e0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80126e6:	4a1f      	ldr	r2, [pc, #124]	@ (8012764 <prvHeapInit+0xb4>)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80126ec:	4b1d      	ldr	r3, [pc, #116]	@ (8012764 <prvHeapInit+0xb4>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	68ba      	ldr	r2, [r7, #8]
 80126f6:	4413      	add	r3, r2
 80126f8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80126fa:	2208      	movs	r2, #8
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	f023 0307 	bic.w	r3, r3, #7
 8012708:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	4a16      	ldr	r2, [pc, #88]	@ (8012768 <prvHeapInit+0xb8>)
 801270e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012710:	4b15      	ldr	r3, [pc, #84]	@ (8012768 <prvHeapInit+0xb8>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2200      	movs	r2, #0
 8012716:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012718:	4b13      	ldr	r3, [pc, #76]	@ (8012768 <prvHeapInit+0xb8>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2200      	movs	r2, #0
 801271e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	68fa      	ldr	r2, [r7, #12]
 8012728:	1ad2      	subs	r2, r2, r3
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801272e:	4b0e      	ldr	r3, [pc, #56]	@ (8012768 <prvHeapInit+0xb8>)
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	4a0c      	ldr	r2, [pc, #48]	@ (801276c <prvHeapInit+0xbc>)
 801273c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	4a0b      	ldr	r2, [pc, #44]	@ (8012770 <prvHeapInit+0xc0>)
 8012744:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012746:	4b0b      	ldr	r3, [pc, #44]	@ (8012774 <prvHeapInit+0xc4>)
 8012748:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801274c:	601a      	str	r2, [r3, #0]
}
 801274e:	bf00      	nop
 8012750:	3714      	adds	r7, #20
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	00011170 	.word	0x00011170
 8012760:	20003298 	.word	0x20003298
 8012764:	20014408 	.word	0x20014408
 8012768:	20014410 	.word	0x20014410
 801276c:	20014418 	.word	0x20014418
 8012770:	20014414 	.word	0x20014414
 8012774:	20014424 	.word	0x20014424

08012778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012780:	4b28      	ldr	r3, [pc, #160]	@ (8012824 <prvInsertBlockIntoFreeList+0xac>)
 8012782:	60fb      	str	r3, [r7, #12]
 8012784:	e002      	b.n	801278c <prvInsertBlockIntoFreeList+0x14>
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	60fb      	str	r3, [r7, #12]
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	429a      	cmp	r2, r3
 8012794:	d8f7      	bhi.n	8012786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	68ba      	ldr	r2, [r7, #8]
 80127a0:	4413      	add	r3, r2
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d108      	bne.n	80127ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	685a      	ldr	r2, [r3, #4]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	441a      	add	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	68ba      	ldr	r2, [r7, #8]
 80127c4:	441a      	add	r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d118      	bne.n	8012800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	4b15      	ldr	r3, [pc, #84]	@ (8012828 <prvInsertBlockIntoFreeList+0xb0>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d00d      	beq.n	80127f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	441a      	add	r2, r3
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	601a      	str	r2, [r3, #0]
 80127f4:	e008      	b.n	8012808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80127f6:	4b0c      	ldr	r3, [pc, #48]	@ (8012828 <prvInsertBlockIntoFreeList+0xb0>)
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	601a      	str	r2, [r3, #0]
 80127fe:	e003      	b.n	8012808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681a      	ldr	r2, [r3, #0]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	429a      	cmp	r2, r3
 801280e:	d002      	beq.n	8012816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012816:	bf00      	nop
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20014408 	.word	0x20014408
 8012828:	20014410 	.word	0x20014410

0801282c <atoi>:
 801282c:	220a      	movs	r2, #10
 801282e:	2100      	movs	r1, #0
 8012830:	f000 b87a 	b.w	8012928 <strtol>

08012834 <_strtol_l.constprop.0>:
 8012834:	2b24      	cmp	r3, #36	@ 0x24
 8012836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801283a:	4686      	mov	lr, r0
 801283c:	4690      	mov	r8, r2
 801283e:	d801      	bhi.n	8012844 <_strtol_l.constprop.0+0x10>
 8012840:	2b01      	cmp	r3, #1
 8012842:	d106      	bne.n	8012852 <_strtol_l.constprop.0+0x1e>
 8012844:	f000 fed6 	bl	80135f4 <__errno>
 8012848:	2316      	movs	r3, #22
 801284a:	6003      	str	r3, [r0, #0]
 801284c:	2000      	movs	r0, #0
 801284e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012852:	4834      	ldr	r0, [pc, #208]	@ (8012924 <_strtol_l.constprop.0+0xf0>)
 8012854:	460d      	mov	r5, r1
 8012856:	462a      	mov	r2, r5
 8012858:	f815 4b01 	ldrb.w	r4, [r5], #1
 801285c:	5d06      	ldrb	r6, [r0, r4]
 801285e:	f016 0608 	ands.w	r6, r6, #8
 8012862:	d1f8      	bne.n	8012856 <_strtol_l.constprop.0+0x22>
 8012864:	2c2d      	cmp	r4, #45	@ 0x2d
 8012866:	d12d      	bne.n	80128c4 <_strtol_l.constprop.0+0x90>
 8012868:	782c      	ldrb	r4, [r5, #0]
 801286a:	2601      	movs	r6, #1
 801286c:	1c95      	adds	r5, r2, #2
 801286e:	f033 0210 	bics.w	r2, r3, #16
 8012872:	d109      	bne.n	8012888 <_strtol_l.constprop.0+0x54>
 8012874:	2c30      	cmp	r4, #48	@ 0x30
 8012876:	d12a      	bne.n	80128ce <_strtol_l.constprop.0+0x9a>
 8012878:	782a      	ldrb	r2, [r5, #0]
 801287a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801287e:	2a58      	cmp	r2, #88	@ 0x58
 8012880:	d125      	bne.n	80128ce <_strtol_l.constprop.0+0x9a>
 8012882:	786c      	ldrb	r4, [r5, #1]
 8012884:	2310      	movs	r3, #16
 8012886:	3502      	adds	r5, #2
 8012888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801288c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012890:	2200      	movs	r2, #0
 8012892:	fbbc f9f3 	udiv	r9, ip, r3
 8012896:	4610      	mov	r0, r2
 8012898:	fb03 ca19 	mls	sl, r3, r9, ip
 801289c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80128a0:	2f09      	cmp	r7, #9
 80128a2:	d81b      	bhi.n	80128dc <_strtol_l.constprop.0+0xa8>
 80128a4:	463c      	mov	r4, r7
 80128a6:	42a3      	cmp	r3, r4
 80128a8:	dd27      	ble.n	80128fa <_strtol_l.constprop.0+0xc6>
 80128aa:	1c57      	adds	r7, r2, #1
 80128ac:	d007      	beq.n	80128be <_strtol_l.constprop.0+0x8a>
 80128ae:	4581      	cmp	r9, r0
 80128b0:	d320      	bcc.n	80128f4 <_strtol_l.constprop.0+0xc0>
 80128b2:	d101      	bne.n	80128b8 <_strtol_l.constprop.0+0x84>
 80128b4:	45a2      	cmp	sl, r4
 80128b6:	db1d      	blt.n	80128f4 <_strtol_l.constprop.0+0xc0>
 80128b8:	fb00 4003 	mla	r0, r0, r3, r4
 80128bc:	2201      	movs	r2, #1
 80128be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128c2:	e7eb      	b.n	801289c <_strtol_l.constprop.0+0x68>
 80128c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80128c6:	bf04      	itt	eq
 80128c8:	782c      	ldrbeq	r4, [r5, #0]
 80128ca:	1c95      	addeq	r5, r2, #2
 80128cc:	e7cf      	b.n	801286e <_strtol_l.constprop.0+0x3a>
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1da      	bne.n	8012888 <_strtol_l.constprop.0+0x54>
 80128d2:	2c30      	cmp	r4, #48	@ 0x30
 80128d4:	bf0c      	ite	eq
 80128d6:	2308      	moveq	r3, #8
 80128d8:	230a      	movne	r3, #10
 80128da:	e7d5      	b.n	8012888 <_strtol_l.constprop.0+0x54>
 80128dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80128e0:	2f19      	cmp	r7, #25
 80128e2:	d801      	bhi.n	80128e8 <_strtol_l.constprop.0+0xb4>
 80128e4:	3c37      	subs	r4, #55	@ 0x37
 80128e6:	e7de      	b.n	80128a6 <_strtol_l.constprop.0+0x72>
 80128e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80128ec:	2f19      	cmp	r7, #25
 80128ee:	d804      	bhi.n	80128fa <_strtol_l.constprop.0+0xc6>
 80128f0:	3c57      	subs	r4, #87	@ 0x57
 80128f2:	e7d8      	b.n	80128a6 <_strtol_l.constprop.0+0x72>
 80128f4:	f04f 32ff 	mov.w	r2, #4294967295
 80128f8:	e7e1      	b.n	80128be <_strtol_l.constprop.0+0x8a>
 80128fa:	1c53      	adds	r3, r2, #1
 80128fc:	d108      	bne.n	8012910 <_strtol_l.constprop.0+0xdc>
 80128fe:	2322      	movs	r3, #34	@ 0x22
 8012900:	f8ce 3000 	str.w	r3, [lr]
 8012904:	4660      	mov	r0, ip
 8012906:	f1b8 0f00 	cmp.w	r8, #0
 801290a:	d0a0      	beq.n	801284e <_strtol_l.constprop.0+0x1a>
 801290c:	1e69      	subs	r1, r5, #1
 801290e:	e006      	b.n	801291e <_strtol_l.constprop.0+0xea>
 8012910:	b106      	cbz	r6, 8012914 <_strtol_l.constprop.0+0xe0>
 8012912:	4240      	negs	r0, r0
 8012914:	f1b8 0f00 	cmp.w	r8, #0
 8012918:	d099      	beq.n	801284e <_strtol_l.constprop.0+0x1a>
 801291a:	2a00      	cmp	r2, #0
 801291c:	d1f6      	bne.n	801290c <_strtol_l.constprop.0+0xd8>
 801291e:	f8c8 1000 	str.w	r1, [r8]
 8012922:	e794      	b.n	801284e <_strtol_l.constprop.0+0x1a>
 8012924:	08016885 	.word	0x08016885

08012928 <strtol>:
 8012928:	4613      	mov	r3, r2
 801292a:	460a      	mov	r2, r1
 801292c:	4601      	mov	r1, r0
 801292e:	4802      	ldr	r0, [pc, #8]	@ (8012938 <strtol+0x10>)
 8012930:	6800      	ldr	r0, [r0, #0]
 8012932:	f7ff bf7f 	b.w	8012834 <_strtol_l.constprop.0>
 8012936:	bf00      	nop
 8012938:	2000030c 	.word	0x2000030c

0801293c <__cvt>:
 801293c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012940:	ec57 6b10 	vmov	r6, r7, d0
 8012944:	2f00      	cmp	r7, #0
 8012946:	460c      	mov	r4, r1
 8012948:	4619      	mov	r1, r3
 801294a:	463b      	mov	r3, r7
 801294c:	bfbb      	ittet	lt
 801294e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012952:	461f      	movlt	r7, r3
 8012954:	2300      	movge	r3, #0
 8012956:	232d      	movlt	r3, #45	@ 0x2d
 8012958:	700b      	strb	r3, [r1, #0]
 801295a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801295c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012960:	4691      	mov	r9, r2
 8012962:	f023 0820 	bic.w	r8, r3, #32
 8012966:	bfbc      	itt	lt
 8012968:	4632      	movlt	r2, r6
 801296a:	4616      	movlt	r6, r2
 801296c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012970:	d005      	beq.n	801297e <__cvt+0x42>
 8012972:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012976:	d100      	bne.n	801297a <__cvt+0x3e>
 8012978:	3401      	adds	r4, #1
 801297a:	2102      	movs	r1, #2
 801297c:	e000      	b.n	8012980 <__cvt+0x44>
 801297e:	2103      	movs	r1, #3
 8012980:	ab03      	add	r3, sp, #12
 8012982:	9301      	str	r3, [sp, #4]
 8012984:	ab02      	add	r3, sp, #8
 8012986:	9300      	str	r3, [sp, #0]
 8012988:	ec47 6b10 	vmov	d0, r6, r7
 801298c:	4653      	mov	r3, sl
 801298e:	4622      	mov	r2, r4
 8012990:	f000 ff1a 	bl	80137c8 <_dtoa_r>
 8012994:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012998:	4605      	mov	r5, r0
 801299a:	d119      	bne.n	80129d0 <__cvt+0x94>
 801299c:	f019 0f01 	tst.w	r9, #1
 80129a0:	d00e      	beq.n	80129c0 <__cvt+0x84>
 80129a2:	eb00 0904 	add.w	r9, r0, r4
 80129a6:	2200      	movs	r2, #0
 80129a8:	2300      	movs	r3, #0
 80129aa:	4630      	mov	r0, r6
 80129ac:	4639      	mov	r1, r7
 80129ae:	f7ee f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80129b2:	b108      	cbz	r0, 80129b8 <__cvt+0x7c>
 80129b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80129b8:	2230      	movs	r2, #48	@ 0x30
 80129ba:	9b03      	ldr	r3, [sp, #12]
 80129bc:	454b      	cmp	r3, r9
 80129be:	d31e      	bcc.n	80129fe <__cvt+0xc2>
 80129c0:	9b03      	ldr	r3, [sp, #12]
 80129c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129c4:	1b5b      	subs	r3, r3, r5
 80129c6:	4628      	mov	r0, r5
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	b004      	add	sp, #16
 80129cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80129d4:	eb00 0904 	add.w	r9, r0, r4
 80129d8:	d1e5      	bne.n	80129a6 <__cvt+0x6a>
 80129da:	7803      	ldrb	r3, [r0, #0]
 80129dc:	2b30      	cmp	r3, #48	@ 0x30
 80129de:	d10a      	bne.n	80129f6 <__cvt+0xba>
 80129e0:	2200      	movs	r2, #0
 80129e2:	2300      	movs	r3, #0
 80129e4:	4630      	mov	r0, r6
 80129e6:	4639      	mov	r1, r7
 80129e8:	f7ee f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80129ec:	b918      	cbnz	r0, 80129f6 <__cvt+0xba>
 80129ee:	f1c4 0401 	rsb	r4, r4, #1
 80129f2:	f8ca 4000 	str.w	r4, [sl]
 80129f6:	f8da 3000 	ldr.w	r3, [sl]
 80129fa:	4499      	add	r9, r3
 80129fc:	e7d3      	b.n	80129a6 <__cvt+0x6a>
 80129fe:	1c59      	adds	r1, r3, #1
 8012a00:	9103      	str	r1, [sp, #12]
 8012a02:	701a      	strb	r2, [r3, #0]
 8012a04:	e7d9      	b.n	80129ba <__cvt+0x7e>

08012a06 <__exponent>:
 8012a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a08:	2900      	cmp	r1, #0
 8012a0a:	bfba      	itte	lt
 8012a0c:	4249      	neglt	r1, r1
 8012a0e:	232d      	movlt	r3, #45	@ 0x2d
 8012a10:	232b      	movge	r3, #43	@ 0x2b
 8012a12:	2909      	cmp	r1, #9
 8012a14:	7002      	strb	r2, [r0, #0]
 8012a16:	7043      	strb	r3, [r0, #1]
 8012a18:	dd29      	ble.n	8012a6e <__exponent+0x68>
 8012a1a:	f10d 0307 	add.w	r3, sp, #7
 8012a1e:	461d      	mov	r5, r3
 8012a20:	270a      	movs	r7, #10
 8012a22:	461a      	mov	r2, r3
 8012a24:	fbb1 f6f7 	udiv	r6, r1, r7
 8012a28:	fb07 1416 	mls	r4, r7, r6, r1
 8012a2c:	3430      	adds	r4, #48	@ 0x30
 8012a2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012a32:	460c      	mov	r4, r1
 8012a34:	2c63      	cmp	r4, #99	@ 0x63
 8012a36:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a3a:	4631      	mov	r1, r6
 8012a3c:	dcf1      	bgt.n	8012a22 <__exponent+0x1c>
 8012a3e:	3130      	adds	r1, #48	@ 0x30
 8012a40:	1e94      	subs	r4, r2, #2
 8012a42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012a46:	1c41      	adds	r1, r0, #1
 8012a48:	4623      	mov	r3, r4
 8012a4a:	42ab      	cmp	r3, r5
 8012a4c:	d30a      	bcc.n	8012a64 <__exponent+0x5e>
 8012a4e:	f10d 0309 	add.w	r3, sp, #9
 8012a52:	1a9b      	subs	r3, r3, r2
 8012a54:	42ac      	cmp	r4, r5
 8012a56:	bf88      	it	hi
 8012a58:	2300      	movhi	r3, #0
 8012a5a:	3302      	adds	r3, #2
 8012a5c:	4403      	add	r3, r0
 8012a5e:	1a18      	subs	r0, r3, r0
 8012a60:	b003      	add	sp, #12
 8012a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012a68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012a6c:	e7ed      	b.n	8012a4a <__exponent+0x44>
 8012a6e:	2330      	movs	r3, #48	@ 0x30
 8012a70:	3130      	adds	r1, #48	@ 0x30
 8012a72:	7083      	strb	r3, [r0, #2]
 8012a74:	70c1      	strb	r1, [r0, #3]
 8012a76:	1d03      	adds	r3, r0, #4
 8012a78:	e7f1      	b.n	8012a5e <__exponent+0x58>
	...

08012a7c <_printf_float>:
 8012a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a80:	b08d      	sub	sp, #52	@ 0x34
 8012a82:	460c      	mov	r4, r1
 8012a84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012a88:	4616      	mov	r6, r2
 8012a8a:	461f      	mov	r7, r3
 8012a8c:	4605      	mov	r5, r0
 8012a8e:	f000 fd11 	bl	80134b4 <_localeconv_r>
 8012a92:	6803      	ldr	r3, [r0, #0]
 8012a94:	9304      	str	r3, [sp, #16]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ed fbea 	bl	8000270 <strlen>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8012aa4:	9005      	str	r0, [sp, #20]
 8012aa6:	3307      	adds	r3, #7
 8012aa8:	f023 0307 	bic.w	r3, r3, #7
 8012aac:	f103 0208 	add.w	r2, r3, #8
 8012ab0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012ab4:	f8d4 b000 	ldr.w	fp, [r4]
 8012ab8:	f8c8 2000 	str.w	r2, [r8]
 8012abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ac0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012ac4:	9307      	str	r3, [sp, #28]
 8012ac6:	f8cd 8018 	str.w	r8, [sp, #24]
 8012aca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8012d44 <_printf_float+0x2c8>)
 8012ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad8:	f7ee f828 	bl	8000b2c <__aeabi_dcmpun>
 8012adc:	bb70      	cbnz	r0, 8012b3c <_printf_float+0xc0>
 8012ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ae2:	4b98      	ldr	r3, [pc, #608]	@ (8012d44 <_printf_float+0x2c8>)
 8012ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae8:	f7ee f802 	bl	8000af0 <__aeabi_dcmple>
 8012aec:	bb30      	cbnz	r0, 8012b3c <_printf_float+0xc0>
 8012aee:	2200      	movs	r2, #0
 8012af0:	2300      	movs	r3, #0
 8012af2:	4640      	mov	r0, r8
 8012af4:	4649      	mov	r1, r9
 8012af6:	f7ed fff1 	bl	8000adc <__aeabi_dcmplt>
 8012afa:	b110      	cbz	r0, 8012b02 <_printf_float+0x86>
 8012afc:	232d      	movs	r3, #45	@ 0x2d
 8012afe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b02:	4a91      	ldr	r2, [pc, #580]	@ (8012d48 <_printf_float+0x2cc>)
 8012b04:	4b91      	ldr	r3, [pc, #580]	@ (8012d4c <_printf_float+0x2d0>)
 8012b06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012b0a:	bf94      	ite	ls
 8012b0c:	4690      	movls	r8, r2
 8012b0e:	4698      	movhi	r8, r3
 8012b10:	2303      	movs	r3, #3
 8012b12:	6123      	str	r3, [r4, #16]
 8012b14:	f02b 0304 	bic.w	r3, fp, #4
 8012b18:	6023      	str	r3, [r4, #0]
 8012b1a:	f04f 0900 	mov.w	r9, #0
 8012b1e:	9700      	str	r7, [sp, #0]
 8012b20:	4633      	mov	r3, r6
 8012b22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012b24:	4621      	mov	r1, r4
 8012b26:	4628      	mov	r0, r5
 8012b28:	f000 f9d2 	bl	8012ed0 <_printf_common>
 8012b2c:	3001      	adds	r0, #1
 8012b2e:	f040 808d 	bne.w	8012c4c <_printf_float+0x1d0>
 8012b32:	f04f 30ff 	mov.w	r0, #4294967295
 8012b36:	b00d      	add	sp, #52	@ 0x34
 8012b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	4642      	mov	r2, r8
 8012b3e:	464b      	mov	r3, r9
 8012b40:	4640      	mov	r0, r8
 8012b42:	4649      	mov	r1, r9
 8012b44:	f7ed fff2 	bl	8000b2c <__aeabi_dcmpun>
 8012b48:	b140      	cbz	r0, 8012b5c <_printf_float+0xe0>
 8012b4a:	464b      	mov	r3, r9
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	bfbc      	itt	lt
 8012b50:	232d      	movlt	r3, #45	@ 0x2d
 8012b52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012b56:	4a7e      	ldr	r2, [pc, #504]	@ (8012d50 <_printf_float+0x2d4>)
 8012b58:	4b7e      	ldr	r3, [pc, #504]	@ (8012d54 <_printf_float+0x2d8>)
 8012b5a:	e7d4      	b.n	8012b06 <_printf_float+0x8a>
 8012b5c:	6863      	ldr	r3, [r4, #4]
 8012b5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012b62:	9206      	str	r2, [sp, #24]
 8012b64:	1c5a      	adds	r2, r3, #1
 8012b66:	d13b      	bne.n	8012be0 <_printf_float+0x164>
 8012b68:	2306      	movs	r3, #6
 8012b6a:	6063      	str	r3, [r4, #4]
 8012b6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012b70:	2300      	movs	r3, #0
 8012b72:	6022      	str	r2, [r4, #0]
 8012b74:	9303      	str	r3, [sp, #12]
 8012b76:	ab0a      	add	r3, sp, #40	@ 0x28
 8012b78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012b7c:	ab09      	add	r3, sp, #36	@ 0x24
 8012b7e:	9300      	str	r3, [sp, #0]
 8012b80:	6861      	ldr	r1, [r4, #4]
 8012b82:	ec49 8b10 	vmov	d0, r8, r9
 8012b86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	f7ff fed6 	bl	801293c <__cvt>
 8012b90:	9b06      	ldr	r3, [sp, #24]
 8012b92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b94:	2b47      	cmp	r3, #71	@ 0x47
 8012b96:	4680      	mov	r8, r0
 8012b98:	d129      	bne.n	8012bee <_printf_float+0x172>
 8012b9a:	1cc8      	adds	r0, r1, #3
 8012b9c:	db02      	blt.n	8012ba4 <_printf_float+0x128>
 8012b9e:	6863      	ldr	r3, [r4, #4]
 8012ba0:	4299      	cmp	r1, r3
 8012ba2:	dd41      	ble.n	8012c28 <_printf_float+0x1ac>
 8012ba4:	f1aa 0a02 	sub.w	sl, sl, #2
 8012ba8:	fa5f fa8a 	uxtb.w	sl, sl
 8012bac:	3901      	subs	r1, #1
 8012bae:	4652      	mov	r2, sl
 8012bb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012bb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8012bb6:	f7ff ff26 	bl	8012a06 <__exponent>
 8012bba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012bbc:	1813      	adds	r3, r2, r0
 8012bbe:	2a01      	cmp	r2, #1
 8012bc0:	4681      	mov	r9, r0
 8012bc2:	6123      	str	r3, [r4, #16]
 8012bc4:	dc02      	bgt.n	8012bcc <_printf_float+0x150>
 8012bc6:	6822      	ldr	r2, [r4, #0]
 8012bc8:	07d2      	lsls	r2, r2, #31
 8012bca:	d501      	bpl.n	8012bd0 <_printf_float+0x154>
 8012bcc:	3301      	adds	r3, #1
 8012bce:	6123      	str	r3, [r4, #16]
 8012bd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d0a2      	beq.n	8012b1e <_printf_float+0xa2>
 8012bd8:	232d      	movs	r3, #45	@ 0x2d
 8012bda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bde:	e79e      	b.n	8012b1e <_printf_float+0xa2>
 8012be0:	9a06      	ldr	r2, [sp, #24]
 8012be2:	2a47      	cmp	r2, #71	@ 0x47
 8012be4:	d1c2      	bne.n	8012b6c <_printf_float+0xf0>
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d1c0      	bne.n	8012b6c <_printf_float+0xf0>
 8012bea:	2301      	movs	r3, #1
 8012bec:	e7bd      	b.n	8012b6a <_printf_float+0xee>
 8012bee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012bf2:	d9db      	bls.n	8012bac <_printf_float+0x130>
 8012bf4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012bf8:	d118      	bne.n	8012c2c <_printf_float+0x1b0>
 8012bfa:	2900      	cmp	r1, #0
 8012bfc:	6863      	ldr	r3, [r4, #4]
 8012bfe:	dd0b      	ble.n	8012c18 <_printf_float+0x19c>
 8012c00:	6121      	str	r1, [r4, #16]
 8012c02:	b913      	cbnz	r3, 8012c0a <_printf_float+0x18e>
 8012c04:	6822      	ldr	r2, [r4, #0]
 8012c06:	07d0      	lsls	r0, r2, #31
 8012c08:	d502      	bpl.n	8012c10 <_printf_float+0x194>
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	440b      	add	r3, r1
 8012c0e:	6123      	str	r3, [r4, #16]
 8012c10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012c12:	f04f 0900 	mov.w	r9, #0
 8012c16:	e7db      	b.n	8012bd0 <_printf_float+0x154>
 8012c18:	b913      	cbnz	r3, 8012c20 <_printf_float+0x1a4>
 8012c1a:	6822      	ldr	r2, [r4, #0]
 8012c1c:	07d2      	lsls	r2, r2, #31
 8012c1e:	d501      	bpl.n	8012c24 <_printf_float+0x1a8>
 8012c20:	3302      	adds	r3, #2
 8012c22:	e7f4      	b.n	8012c0e <_printf_float+0x192>
 8012c24:	2301      	movs	r3, #1
 8012c26:	e7f2      	b.n	8012c0e <_printf_float+0x192>
 8012c28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c2e:	4299      	cmp	r1, r3
 8012c30:	db05      	blt.n	8012c3e <_printf_float+0x1c2>
 8012c32:	6823      	ldr	r3, [r4, #0]
 8012c34:	6121      	str	r1, [r4, #16]
 8012c36:	07d8      	lsls	r0, r3, #31
 8012c38:	d5ea      	bpl.n	8012c10 <_printf_float+0x194>
 8012c3a:	1c4b      	adds	r3, r1, #1
 8012c3c:	e7e7      	b.n	8012c0e <_printf_float+0x192>
 8012c3e:	2900      	cmp	r1, #0
 8012c40:	bfd4      	ite	le
 8012c42:	f1c1 0202 	rsble	r2, r1, #2
 8012c46:	2201      	movgt	r2, #1
 8012c48:	4413      	add	r3, r2
 8012c4a:	e7e0      	b.n	8012c0e <_printf_float+0x192>
 8012c4c:	6823      	ldr	r3, [r4, #0]
 8012c4e:	055a      	lsls	r2, r3, #21
 8012c50:	d407      	bmi.n	8012c62 <_printf_float+0x1e6>
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	4642      	mov	r2, r8
 8012c56:	4631      	mov	r1, r6
 8012c58:	4628      	mov	r0, r5
 8012c5a:	47b8      	blx	r7
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d12b      	bne.n	8012cb8 <_printf_float+0x23c>
 8012c60:	e767      	b.n	8012b32 <_printf_float+0xb6>
 8012c62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012c66:	f240 80dd 	bls.w	8012e24 <_printf_float+0x3a8>
 8012c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012c6e:	2200      	movs	r2, #0
 8012c70:	2300      	movs	r3, #0
 8012c72:	f7ed ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d033      	beq.n	8012ce2 <_printf_float+0x266>
 8012c7a:	4a37      	ldr	r2, [pc, #220]	@ (8012d58 <_printf_float+0x2dc>)
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	4631      	mov	r1, r6
 8012c80:	4628      	mov	r0, r5
 8012c82:	47b8      	blx	r7
 8012c84:	3001      	adds	r0, #1
 8012c86:	f43f af54 	beq.w	8012b32 <_printf_float+0xb6>
 8012c8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012c8e:	4543      	cmp	r3, r8
 8012c90:	db02      	blt.n	8012c98 <_printf_float+0x21c>
 8012c92:	6823      	ldr	r3, [r4, #0]
 8012c94:	07d8      	lsls	r0, r3, #31
 8012c96:	d50f      	bpl.n	8012cb8 <_printf_float+0x23c>
 8012c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c9c:	4631      	mov	r1, r6
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	47b8      	blx	r7
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	f43f af45 	beq.w	8012b32 <_printf_float+0xb6>
 8012ca8:	f04f 0900 	mov.w	r9, #0
 8012cac:	f108 38ff 	add.w	r8, r8, #4294967295
 8012cb0:	f104 0a1a 	add.w	sl, r4, #26
 8012cb4:	45c8      	cmp	r8, r9
 8012cb6:	dc09      	bgt.n	8012ccc <_printf_float+0x250>
 8012cb8:	6823      	ldr	r3, [r4, #0]
 8012cba:	079b      	lsls	r3, r3, #30
 8012cbc:	f100 8103 	bmi.w	8012ec6 <_printf_float+0x44a>
 8012cc0:	68e0      	ldr	r0, [r4, #12]
 8012cc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012cc4:	4298      	cmp	r0, r3
 8012cc6:	bfb8      	it	lt
 8012cc8:	4618      	movlt	r0, r3
 8012cca:	e734      	b.n	8012b36 <_printf_float+0xba>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	4652      	mov	r2, sl
 8012cd0:	4631      	mov	r1, r6
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	47b8      	blx	r7
 8012cd6:	3001      	adds	r0, #1
 8012cd8:	f43f af2b 	beq.w	8012b32 <_printf_float+0xb6>
 8012cdc:	f109 0901 	add.w	r9, r9, #1
 8012ce0:	e7e8      	b.n	8012cb4 <_printf_float+0x238>
 8012ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	dc39      	bgt.n	8012d5c <_printf_float+0x2e0>
 8012ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8012d58 <_printf_float+0x2dc>)
 8012cea:	2301      	movs	r3, #1
 8012cec:	4631      	mov	r1, r6
 8012cee:	4628      	mov	r0, r5
 8012cf0:	47b8      	blx	r7
 8012cf2:	3001      	adds	r0, #1
 8012cf4:	f43f af1d 	beq.w	8012b32 <_printf_float+0xb6>
 8012cf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012cfc:	ea59 0303 	orrs.w	r3, r9, r3
 8012d00:	d102      	bne.n	8012d08 <_printf_float+0x28c>
 8012d02:	6823      	ldr	r3, [r4, #0]
 8012d04:	07d9      	lsls	r1, r3, #31
 8012d06:	d5d7      	bpl.n	8012cb8 <_printf_float+0x23c>
 8012d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	4628      	mov	r0, r5
 8012d10:	47b8      	blx	r7
 8012d12:	3001      	adds	r0, #1
 8012d14:	f43f af0d 	beq.w	8012b32 <_printf_float+0xb6>
 8012d18:	f04f 0a00 	mov.w	sl, #0
 8012d1c:	f104 0b1a 	add.w	fp, r4, #26
 8012d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d22:	425b      	negs	r3, r3
 8012d24:	4553      	cmp	r3, sl
 8012d26:	dc01      	bgt.n	8012d2c <_printf_float+0x2b0>
 8012d28:	464b      	mov	r3, r9
 8012d2a:	e793      	b.n	8012c54 <_printf_float+0x1d8>
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	465a      	mov	r2, fp
 8012d30:	4631      	mov	r1, r6
 8012d32:	4628      	mov	r0, r5
 8012d34:	47b8      	blx	r7
 8012d36:	3001      	adds	r0, #1
 8012d38:	f43f aefb 	beq.w	8012b32 <_printf_float+0xb6>
 8012d3c:	f10a 0a01 	add.w	sl, sl, #1
 8012d40:	e7ee      	b.n	8012d20 <_printf_float+0x2a4>
 8012d42:	bf00      	nop
 8012d44:	7fefffff 	.word	0x7fefffff
 8012d48:	08016985 	.word	0x08016985
 8012d4c:	08016989 	.word	0x08016989
 8012d50:	0801698d 	.word	0x0801698d
 8012d54:	08016991 	.word	0x08016991
 8012d58:	08016995 	.word	0x08016995
 8012d5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012d62:	4553      	cmp	r3, sl
 8012d64:	bfa8      	it	ge
 8012d66:	4653      	movge	r3, sl
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	4699      	mov	r9, r3
 8012d6c:	dc36      	bgt.n	8012ddc <_printf_float+0x360>
 8012d6e:	f04f 0b00 	mov.w	fp, #0
 8012d72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d76:	f104 021a 	add.w	r2, r4, #26
 8012d7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d7c:	9306      	str	r3, [sp, #24]
 8012d7e:	eba3 0309 	sub.w	r3, r3, r9
 8012d82:	455b      	cmp	r3, fp
 8012d84:	dc31      	bgt.n	8012dea <_printf_float+0x36e>
 8012d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d88:	459a      	cmp	sl, r3
 8012d8a:	dc3a      	bgt.n	8012e02 <_printf_float+0x386>
 8012d8c:	6823      	ldr	r3, [r4, #0]
 8012d8e:	07da      	lsls	r2, r3, #31
 8012d90:	d437      	bmi.n	8012e02 <_printf_float+0x386>
 8012d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d94:	ebaa 0903 	sub.w	r9, sl, r3
 8012d98:	9b06      	ldr	r3, [sp, #24]
 8012d9a:	ebaa 0303 	sub.w	r3, sl, r3
 8012d9e:	4599      	cmp	r9, r3
 8012da0:	bfa8      	it	ge
 8012da2:	4699      	movge	r9, r3
 8012da4:	f1b9 0f00 	cmp.w	r9, #0
 8012da8:	dc33      	bgt.n	8012e12 <_printf_float+0x396>
 8012daa:	f04f 0800 	mov.w	r8, #0
 8012dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012db2:	f104 0b1a 	add.w	fp, r4, #26
 8012db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012db8:	ebaa 0303 	sub.w	r3, sl, r3
 8012dbc:	eba3 0309 	sub.w	r3, r3, r9
 8012dc0:	4543      	cmp	r3, r8
 8012dc2:	f77f af79 	ble.w	8012cb8 <_printf_float+0x23c>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	465a      	mov	r2, fp
 8012dca:	4631      	mov	r1, r6
 8012dcc:	4628      	mov	r0, r5
 8012dce:	47b8      	blx	r7
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	f43f aeae 	beq.w	8012b32 <_printf_float+0xb6>
 8012dd6:	f108 0801 	add.w	r8, r8, #1
 8012dda:	e7ec      	b.n	8012db6 <_printf_float+0x33a>
 8012ddc:	4642      	mov	r2, r8
 8012dde:	4631      	mov	r1, r6
 8012de0:	4628      	mov	r0, r5
 8012de2:	47b8      	blx	r7
 8012de4:	3001      	adds	r0, #1
 8012de6:	d1c2      	bne.n	8012d6e <_printf_float+0x2f2>
 8012de8:	e6a3      	b.n	8012b32 <_printf_float+0xb6>
 8012dea:	2301      	movs	r3, #1
 8012dec:	4631      	mov	r1, r6
 8012dee:	4628      	mov	r0, r5
 8012df0:	9206      	str	r2, [sp, #24]
 8012df2:	47b8      	blx	r7
 8012df4:	3001      	adds	r0, #1
 8012df6:	f43f ae9c 	beq.w	8012b32 <_printf_float+0xb6>
 8012dfa:	9a06      	ldr	r2, [sp, #24]
 8012dfc:	f10b 0b01 	add.w	fp, fp, #1
 8012e00:	e7bb      	b.n	8012d7a <_printf_float+0x2fe>
 8012e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e06:	4631      	mov	r1, r6
 8012e08:	4628      	mov	r0, r5
 8012e0a:	47b8      	blx	r7
 8012e0c:	3001      	adds	r0, #1
 8012e0e:	d1c0      	bne.n	8012d92 <_printf_float+0x316>
 8012e10:	e68f      	b.n	8012b32 <_printf_float+0xb6>
 8012e12:	9a06      	ldr	r2, [sp, #24]
 8012e14:	464b      	mov	r3, r9
 8012e16:	4442      	add	r2, r8
 8012e18:	4631      	mov	r1, r6
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	47b8      	blx	r7
 8012e1e:	3001      	adds	r0, #1
 8012e20:	d1c3      	bne.n	8012daa <_printf_float+0x32e>
 8012e22:	e686      	b.n	8012b32 <_printf_float+0xb6>
 8012e24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e28:	f1ba 0f01 	cmp.w	sl, #1
 8012e2c:	dc01      	bgt.n	8012e32 <_printf_float+0x3b6>
 8012e2e:	07db      	lsls	r3, r3, #31
 8012e30:	d536      	bpl.n	8012ea0 <_printf_float+0x424>
 8012e32:	2301      	movs	r3, #1
 8012e34:	4642      	mov	r2, r8
 8012e36:	4631      	mov	r1, r6
 8012e38:	4628      	mov	r0, r5
 8012e3a:	47b8      	blx	r7
 8012e3c:	3001      	adds	r0, #1
 8012e3e:	f43f ae78 	beq.w	8012b32 <_printf_float+0xb6>
 8012e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e46:	4631      	mov	r1, r6
 8012e48:	4628      	mov	r0, r5
 8012e4a:	47b8      	blx	r7
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	f43f ae70 	beq.w	8012b32 <_printf_float+0xb6>
 8012e52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012e56:	2200      	movs	r2, #0
 8012e58:	2300      	movs	r3, #0
 8012e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e5e:	f7ed fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e62:	b9c0      	cbnz	r0, 8012e96 <_printf_float+0x41a>
 8012e64:	4653      	mov	r3, sl
 8012e66:	f108 0201 	add.w	r2, r8, #1
 8012e6a:	4631      	mov	r1, r6
 8012e6c:	4628      	mov	r0, r5
 8012e6e:	47b8      	blx	r7
 8012e70:	3001      	adds	r0, #1
 8012e72:	d10c      	bne.n	8012e8e <_printf_float+0x412>
 8012e74:	e65d      	b.n	8012b32 <_printf_float+0xb6>
 8012e76:	2301      	movs	r3, #1
 8012e78:	465a      	mov	r2, fp
 8012e7a:	4631      	mov	r1, r6
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	47b8      	blx	r7
 8012e80:	3001      	adds	r0, #1
 8012e82:	f43f ae56 	beq.w	8012b32 <_printf_float+0xb6>
 8012e86:	f108 0801 	add.w	r8, r8, #1
 8012e8a:	45d0      	cmp	r8, sl
 8012e8c:	dbf3      	blt.n	8012e76 <_printf_float+0x3fa>
 8012e8e:	464b      	mov	r3, r9
 8012e90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012e94:	e6df      	b.n	8012c56 <_printf_float+0x1da>
 8012e96:	f04f 0800 	mov.w	r8, #0
 8012e9a:	f104 0b1a 	add.w	fp, r4, #26
 8012e9e:	e7f4      	b.n	8012e8a <_printf_float+0x40e>
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	4642      	mov	r2, r8
 8012ea4:	e7e1      	b.n	8012e6a <_printf_float+0x3ee>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	464a      	mov	r2, r9
 8012eaa:	4631      	mov	r1, r6
 8012eac:	4628      	mov	r0, r5
 8012eae:	47b8      	blx	r7
 8012eb0:	3001      	adds	r0, #1
 8012eb2:	f43f ae3e 	beq.w	8012b32 <_printf_float+0xb6>
 8012eb6:	f108 0801 	add.w	r8, r8, #1
 8012eba:	68e3      	ldr	r3, [r4, #12]
 8012ebc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ebe:	1a5b      	subs	r3, r3, r1
 8012ec0:	4543      	cmp	r3, r8
 8012ec2:	dcf0      	bgt.n	8012ea6 <_printf_float+0x42a>
 8012ec4:	e6fc      	b.n	8012cc0 <_printf_float+0x244>
 8012ec6:	f04f 0800 	mov.w	r8, #0
 8012eca:	f104 0919 	add.w	r9, r4, #25
 8012ece:	e7f4      	b.n	8012eba <_printf_float+0x43e>

08012ed0 <_printf_common>:
 8012ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed4:	4616      	mov	r6, r2
 8012ed6:	4698      	mov	r8, r3
 8012ed8:	688a      	ldr	r2, [r1, #8]
 8012eda:	690b      	ldr	r3, [r1, #16]
 8012edc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	bfb8      	it	lt
 8012ee4:	4613      	movlt	r3, r2
 8012ee6:	6033      	str	r3, [r6, #0]
 8012ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012eec:	4607      	mov	r7, r0
 8012eee:	460c      	mov	r4, r1
 8012ef0:	b10a      	cbz	r2, 8012ef6 <_printf_common+0x26>
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	6033      	str	r3, [r6, #0]
 8012ef6:	6823      	ldr	r3, [r4, #0]
 8012ef8:	0699      	lsls	r1, r3, #26
 8012efa:	bf42      	ittt	mi
 8012efc:	6833      	ldrmi	r3, [r6, #0]
 8012efe:	3302      	addmi	r3, #2
 8012f00:	6033      	strmi	r3, [r6, #0]
 8012f02:	6825      	ldr	r5, [r4, #0]
 8012f04:	f015 0506 	ands.w	r5, r5, #6
 8012f08:	d106      	bne.n	8012f18 <_printf_common+0x48>
 8012f0a:	f104 0a19 	add.w	sl, r4, #25
 8012f0e:	68e3      	ldr	r3, [r4, #12]
 8012f10:	6832      	ldr	r2, [r6, #0]
 8012f12:	1a9b      	subs	r3, r3, r2
 8012f14:	42ab      	cmp	r3, r5
 8012f16:	dc26      	bgt.n	8012f66 <_printf_common+0x96>
 8012f18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012f1c:	6822      	ldr	r2, [r4, #0]
 8012f1e:	3b00      	subs	r3, #0
 8012f20:	bf18      	it	ne
 8012f22:	2301      	movne	r3, #1
 8012f24:	0692      	lsls	r2, r2, #26
 8012f26:	d42b      	bmi.n	8012f80 <_printf_common+0xb0>
 8012f28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f2c:	4641      	mov	r1, r8
 8012f2e:	4638      	mov	r0, r7
 8012f30:	47c8      	blx	r9
 8012f32:	3001      	adds	r0, #1
 8012f34:	d01e      	beq.n	8012f74 <_printf_common+0xa4>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	6922      	ldr	r2, [r4, #16]
 8012f3a:	f003 0306 	and.w	r3, r3, #6
 8012f3e:	2b04      	cmp	r3, #4
 8012f40:	bf02      	ittt	eq
 8012f42:	68e5      	ldreq	r5, [r4, #12]
 8012f44:	6833      	ldreq	r3, [r6, #0]
 8012f46:	1aed      	subeq	r5, r5, r3
 8012f48:	68a3      	ldr	r3, [r4, #8]
 8012f4a:	bf0c      	ite	eq
 8012f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f50:	2500      	movne	r5, #0
 8012f52:	4293      	cmp	r3, r2
 8012f54:	bfc4      	itt	gt
 8012f56:	1a9b      	subgt	r3, r3, r2
 8012f58:	18ed      	addgt	r5, r5, r3
 8012f5a:	2600      	movs	r6, #0
 8012f5c:	341a      	adds	r4, #26
 8012f5e:	42b5      	cmp	r5, r6
 8012f60:	d11a      	bne.n	8012f98 <_printf_common+0xc8>
 8012f62:	2000      	movs	r0, #0
 8012f64:	e008      	b.n	8012f78 <_printf_common+0xa8>
 8012f66:	2301      	movs	r3, #1
 8012f68:	4652      	mov	r2, sl
 8012f6a:	4641      	mov	r1, r8
 8012f6c:	4638      	mov	r0, r7
 8012f6e:	47c8      	blx	r9
 8012f70:	3001      	adds	r0, #1
 8012f72:	d103      	bne.n	8012f7c <_printf_common+0xac>
 8012f74:	f04f 30ff 	mov.w	r0, #4294967295
 8012f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f7c:	3501      	adds	r5, #1
 8012f7e:	e7c6      	b.n	8012f0e <_printf_common+0x3e>
 8012f80:	18e1      	adds	r1, r4, r3
 8012f82:	1c5a      	adds	r2, r3, #1
 8012f84:	2030      	movs	r0, #48	@ 0x30
 8012f86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012f8a:	4422      	add	r2, r4
 8012f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012f90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012f94:	3302      	adds	r3, #2
 8012f96:	e7c7      	b.n	8012f28 <_printf_common+0x58>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	4622      	mov	r2, r4
 8012f9c:	4641      	mov	r1, r8
 8012f9e:	4638      	mov	r0, r7
 8012fa0:	47c8      	blx	r9
 8012fa2:	3001      	adds	r0, #1
 8012fa4:	d0e6      	beq.n	8012f74 <_printf_common+0xa4>
 8012fa6:	3601      	adds	r6, #1
 8012fa8:	e7d9      	b.n	8012f5e <_printf_common+0x8e>
	...

08012fac <_printf_i>:
 8012fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fb0:	7e0f      	ldrb	r7, [r1, #24]
 8012fb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012fb4:	2f78      	cmp	r7, #120	@ 0x78
 8012fb6:	4691      	mov	r9, r2
 8012fb8:	4680      	mov	r8, r0
 8012fba:	460c      	mov	r4, r1
 8012fbc:	469a      	mov	sl, r3
 8012fbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012fc2:	d807      	bhi.n	8012fd4 <_printf_i+0x28>
 8012fc4:	2f62      	cmp	r7, #98	@ 0x62
 8012fc6:	d80a      	bhi.n	8012fde <_printf_i+0x32>
 8012fc8:	2f00      	cmp	r7, #0
 8012fca:	f000 80d2 	beq.w	8013172 <_printf_i+0x1c6>
 8012fce:	2f58      	cmp	r7, #88	@ 0x58
 8012fd0:	f000 80b9 	beq.w	8013146 <_printf_i+0x19a>
 8012fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012fd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012fdc:	e03a      	b.n	8013054 <_printf_i+0xa8>
 8012fde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012fe2:	2b15      	cmp	r3, #21
 8012fe4:	d8f6      	bhi.n	8012fd4 <_printf_i+0x28>
 8012fe6:	a101      	add	r1, pc, #4	@ (adr r1, 8012fec <_printf_i+0x40>)
 8012fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012fec:	08013045 	.word	0x08013045
 8012ff0:	08013059 	.word	0x08013059
 8012ff4:	08012fd5 	.word	0x08012fd5
 8012ff8:	08012fd5 	.word	0x08012fd5
 8012ffc:	08012fd5 	.word	0x08012fd5
 8013000:	08012fd5 	.word	0x08012fd5
 8013004:	08013059 	.word	0x08013059
 8013008:	08012fd5 	.word	0x08012fd5
 801300c:	08012fd5 	.word	0x08012fd5
 8013010:	08012fd5 	.word	0x08012fd5
 8013014:	08012fd5 	.word	0x08012fd5
 8013018:	08013159 	.word	0x08013159
 801301c:	08013083 	.word	0x08013083
 8013020:	08013113 	.word	0x08013113
 8013024:	08012fd5 	.word	0x08012fd5
 8013028:	08012fd5 	.word	0x08012fd5
 801302c:	0801317b 	.word	0x0801317b
 8013030:	08012fd5 	.word	0x08012fd5
 8013034:	08013083 	.word	0x08013083
 8013038:	08012fd5 	.word	0x08012fd5
 801303c:	08012fd5 	.word	0x08012fd5
 8013040:	0801311b 	.word	0x0801311b
 8013044:	6833      	ldr	r3, [r6, #0]
 8013046:	1d1a      	adds	r2, r3, #4
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	6032      	str	r2, [r6, #0]
 801304c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013050:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013054:	2301      	movs	r3, #1
 8013056:	e09d      	b.n	8013194 <_printf_i+0x1e8>
 8013058:	6833      	ldr	r3, [r6, #0]
 801305a:	6820      	ldr	r0, [r4, #0]
 801305c:	1d19      	adds	r1, r3, #4
 801305e:	6031      	str	r1, [r6, #0]
 8013060:	0606      	lsls	r6, r0, #24
 8013062:	d501      	bpl.n	8013068 <_printf_i+0xbc>
 8013064:	681d      	ldr	r5, [r3, #0]
 8013066:	e003      	b.n	8013070 <_printf_i+0xc4>
 8013068:	0645      	lsls	r5, r0, #25
 801306a:	d5fb      	bpl.n	8013064 <_printf_i+0xb8>
 801306c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013070:	2d00      	cmp	r5, #0
 8013072:	da03      	bge.n	801307c <_printf_i+0xd0>
 8013074:	232d      	movs	r3, #45	@ 0x2d
 8013076:	426d      	negs	r5, r5
 8013078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801307c:	4859      	ldr	r0, [pc, #356]	@ (80131e4 <_printf_i+0x238>)
 801307e:	230a      	movs	r3, #10
 8013080:	e011      	b.n	80130a6 <_printf_i+0xfa>
 8013082:	6821      	ldr	r1, [r4, #0]
 8013084:	6833      	ldr	r3, [r6, #0]
 8013086:	0608      	lsls	r0, r1, #24
 8013088:	f853 5b04 	ldr.w	r5, [r3], #4
 801308c:	d402      	bmi.n	8013094 <_printf_i+0xe8>
 801308e:	0649      	lsls	r1, r1, #25
 8013090:	bf48      	it	mi
 8013092:	b2ad      	uxthmi	r5, r5
 8013094:	2f6f      	cmp	r7, #111	@ 0x6f
 8013096:	4853      	ldr	r0, [pc, #332]	@ (80131e4 <_printf_i+0x238>)
 8013098:	6033      	str	r3, [r6, #0]
 801309a:	bf14      	ite	ne
 801309c:	230a      	movne	r3, #10
 801309e:	2308      	moveq	r3, #8
 80130a0:	2100      	movs	r1, #0
 80130a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80130a6:	6866      	ldr	r6, [r4, #4]
 80130a8:	60a6      	str	r6, [r4, #8]
 80130aa:	2e00      	cmp	r6, #0
 80130ac:	bfa2      	ittt	ge
 80130ae:	6821      	ldrge	r1, [r4, #0]
 80130b0:	f021 0104 	bicge.w	r1, r1, #4
 80130b4:	6021      	strge	r1, [r4, #0]
 80130b6:	b90d      	cbnz	r5, 80130bc <_printf_i+0x110>
 80130b8:	2e00      	cmp	r6, #0
 80130ba:	d04b      	beq.n	8013154 <_printf_i+0x1a8>
 80130bc:	4616      	mov	r6, r2
 80130be:	fbb5 f1f3 	udiv	r1, r5, r3
 80130c2:	fb03 5711 	mls	r7, r3, r1, r5
 80130c6:	5dc7      	ldrb	r7, [r0, r7]
 80130c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130cc:	462f      	mov	r7, r5
 80130ce:	42bb      	cmp	r3, r7
 80130d0:	460d      	mov	r5, r1
 80130d2:	d9f4      	bls.n	80130be <_printf_i+0x112>
 80130d4:	2b08      	cmp	r3, #8
 80130d6:	d10b      	bne.n	80130f0 <_printf_i+0x144>
 80130d8:	6823      	ldr	r3, [r4, #0]
 80130da:	07df      	lsls	r7, r3, #31
 80130dc:	d508      	bpl.n	80130f0 <_printf_i+0x144>
 80130de:	6923      	ldr	r3, [r4, #16]
 80130e0:	6861      	ldr	r1, [r4, #4]
 80130e2:	4299      	cmp	r1, r3
 80130e4:	bfde      	ittt	le
 80130e6:	2330      	movle	r3, #48	@ 0x30
 80130e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80130ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80130f0:	1b92      	subs	r2, r2, r6
 80130f2:	6122      	str	r2, [r4, #16]
 80130f4:	f8cd a000 	str.w	sl, [sp]
 80130f8:	464b      	mov	r3, r9
 80130fa:	aa03      	add	r2, sp, #12
 80130fc:	4621      	mov	r1, r4
 80130fe:	4640      	mov	r0, r8
 8013100:	f7ff fee6 	bl	8012ed0 <_printf_common>
 8013104:	3001      	adds	r0, #1
 8013106:	d14a      	bne.n	801319e <_printf_i+0x1f2>
 8013108:	f04f 30ff 	mov.w	r0, #4294967295
 801310c:	b004      	add	sp, #16
 801310e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	f043 0320 	orr.w	r3, r3, #32
 8013118:	6023      	str	r3, [r4, #0]
 801311a:	4833      	ldr	r0, [pc, #204]	@ (80131e8 <_printf_i+0x23c>)
 801311c:	2778      	movs	r7, #120	@ 0x78
 801311e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	6831      	ldr	r1, [r6, #0]
 8013126:	061f      	lsls	r7, r3, #24
 8013128:	f851 5b04 	ldr.w	r5, [r1], #4
 801312c:	d402      	bmi.n	8013134 <_printf_i+0x188>
 801312e:	065f      	lsls	r7, r3, #25
 8013130:	bf48      	it	mi
 8013132:	b2ad      	uxthmi	r5, r5
 8013134:	6031      	str	r1, [r6, #0]
 8013136:	07d9      	lsls	r1, r3, #31
 8013138:	bf44      	itt	mi
 801313a:	f043 0320 	orrmi.w	r3, r3, #32
 801313e:	6023      	strmi	r3, [r4, #0]
 8013140:	b11d      	cbz	r5, 801314a <_printf_i+0x19e>
 8013142:	2310      	movs	r3, #16
 8013144:	e7ac      	b.n	80130a0 <_printf_i+0xf4>
 8013146:	4827      	ldr	r0, [pc, #156]	@ (80131e4 <_printf_i+0x238>)
 8013148:	e7e9      	b.n	801311e <_printf_i+0x172>
 801314a:	6823      	ldr	r3, [r4, #0]
 801314c:	f023 0320 	bic.w	r3, r3, #32
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	e7f6      	b.n	8013142 <_printf_i+0x196>
 8013154:	4616      	mov	r6, r2
 8013156:	e7bd      	b.n	80130d4 <_printf_i+0x128>
 8013158:	6833      	ldr	r3, [r6, #0]
 801315a:	6825      	ldr	r5, [r4, #0]
 801315c:	6961      	ldr	r1, [r4, #20]
 801315e:	1d18      	adds	r0, r3, #4
 8013160:	6030      	str	r0, [r6, #0]
 8013162:	062e      	lsls	r6, r5, #24
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	d501      	bpl.n	801316c <_printf_i+0x1c0>
 8013168:	6019      	str	r1, [r3, #0]
 801316a:	e002      	b.n	8013172 <_printf_i+0x1c6>
 801316c:	0668      	lsls	r0, r5, #25
 801316e:	d5fb      	bpl.n	8013168 <_printf_i+0x1bc>
 8013170:	8019      	strh	r1, [r3, #0]
 8013172:	2300      	movs	r3, #0
 8013174:	6123      	str	r3, [r4, #16]
 8013176:	4616      	mov	r6, r2
 8013178:	e7bc      	b.n	80130f4 <_printf_i+0x148>
 801317a:	6833      	ldr	r3, [r6, #0]
 801317c:	1d1a      	adds	r2, r3, #4
 801317e:	6032      	str	r2, [r6, #0]
 8013180:	681e      	ldr	r6, [r3, #0]
 8013182:	6862      	ldr	r2, [r4, #4]
 8013184:	2100      	movs	r1, #0
 8013186:	4630      	mov	r0, r6
 8013188:	f7ed f822 	bl	80001d0 <memchr>
 801318c:	b108      	cbz	r0, 8013192 <_printf_i+0x1e6>
 801318e:	1b80      	subs	r0, r0, r6
 8013190:	6060      	str	r0, [r4, #4]
 8013192:	6863      	ldr	r3, [r4, #4]
 8013194:	6123      	str	r3, [r4, #16]
 8013196:	2300      	movs	r3, #0
 8013198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801319c:	e7aa      	b.n	80130f4 <_printf_i+0x148>
 801319e:	6923      	ldr	r3, [r4, #16]
 80131a0:	4632      	mov	r2, r6
 80131a2:	4649      	mov	r1, r9
 80131a4:	4640      	mov	r0, r8
 80131a6:	47d0      	blx	sl
 80131a8:	3001      	adds	r0, #1
 80131aa:	d0ad      	beq.n	8013108 <_printf_i+0x15c>
 80131ac:	6823      	ldr	r3, [r4, #0]
 80131ae:	079b      	lsls	r3, r3, #30
 80131b0:	d413      	bmi.n	80131da <_printf_i+0x22e>
 80131b2:	68e0      	ldr	r0, [r4, #12]
 80131b4:	9b03      	ldr	r3, [sp, #12]
 80131b6:	4298      	cmp	r0, r3
 80131b8:	bfb8      	it	lt
 80131ba:	4618      	movlt	r0, r3
 80131bc:	e7a6      	b.n	801310c <_printf_i+0x160>
 80131be:	2301      	movs	r3, #1
 80131c0:	4632      	mov	r2, r6
 80131c2:	4649      	mov	r1, r9
 80131c4:	4640      	mov	r0, r8
 80131c6:	47d0      	blx	sl
 80131c8:	3001      	adds	r0, #1
 80131ca:	d09d      	beq.n	8013108 <_printf_i+0x15c>
 80131cc:	3501      	adds	r5, #1
 80131ce:	68e3      	ldr	r3, [r4, #12]
 80131d0:	9903      	ldr	r1, [sp, #12]
 80131d2:	1a5b      	subs	r3, r3, r1
 80131d4:	42ab      	cmp	r3, r5
 80131d6:	dcf2      	bgt.n	80131be <_printf_i+0x212>
 80131d8:	e7eb      	b.n	80131b2 <_printf_i+0x206>
 80131da:	2500      	movs	r5, #0
 80131dc:	f104 0619 	add.w	r6, r4, #25
 80131e0:	e7f5      	b.n	80131ce <_printf_i+0x222>
 80131e2:	bf00      	nop
 80131e4:	08016997 	.word	0x08016997
 80131e8:	080169a8 	.word	0x080169a8

080131ec <std>:
 80131ec:	2300      	movs	r3, #0
 80131ee:	b510      	push	{r4, lr}
 80131f0:	4604      	mov	r4, r0
 80131f2:	e9c0 3300 	strd	r3, r3, [r0]
 80131f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131fa:	6083      	str	r3, [r0, #8]
 80131fc:	8181      	strh	r1, [r0, #12]
 80131fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8013200:	81c2      	strh	r2, [r0, #14]
 8013202:	6183      	str	r3, [r0, #24]
 8013204:	4619      	mov	r1, r3
 8013206:	2208      	movs	r2, #8
 8013208:	305c      	adds	r0, #92	@ 0x5c
 801320a:	f000 f914 	bl	8013436 <memset>
 801320e:	4b0d      	ldr	r3, [pc, #52]	@ (8013244 <std+0x58>)
 8013210:	6263      	str	r3, [r4, #36]	@ 0x24
 8013212:	4b0d      	ldr	r3, [pc, #52]	@ (8013248 <std+0x5c>)
 8013214:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013216:	4b0d      	ldr	r3, [pc, #52]	@ (801324c <std+0x60>)
 8013218:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801321a:	4b0d      	ldr	r3, [pc, #52]	@ (8013250 <std+0x64>)
 801321c:	6323      	str	r3, [r4, #48]	@ 0x30
 801321e:	4b0d      	ldr	r3, [pc, #52]	@ (8013254 <std+0x68>)
 8013220:	6224      	str	r4, [r4, #32]
 8013222:	429c      	cmp	r4, r3
 8013224:	d006      	beq.n	8013234 <std+0x48>
 8013226:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801322a:	4294      	cmp	r4, r2
 801322c:	d002      	beq.n	8013234 <std+0x48>
 801322e:	33d0      	adds	r3, #208	@ 0xd0
 8013230:	429c      	cmp	r4, r3
 8013232:	d105      	bne.n	8013240 <std+0x54>
 8013234:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801323c:	f000 ba04 	b.w	8013648 <__retarget_lock_init_recursive>
 8013240:	bd10      	pop	{r4, pc}
 8013242:	bf00      	nop
 8013244:	080133b1 	.word	0x080133b1
 8013248:	080133d3 	.word	0x080133d3
 801324c:	0801340b 	.word	0x0801340b
 8013250:	0801342f 	.word	0x0801342f
 8013254:	20014428 	.word	0x20014428

08013258 <stdio_exit_handler>:
 8013258:	4a02      	ldr	r2, [pc, #8]	@ (8013264 <stdio_exit_handler+0xc>)
 801325a:	4903      	ldr	r1, [pc, #12]	@ (8013268 <stdio_exit_handler+0x10>)
 801325c:	4803      	ldr	r0, [pc, #12]	@ (801326c <stdio_exit_handler+0x14>)
 801325e:	f000 b869 	b.w	8013334 <_fwalk_sglue>
 8013262:	bf00      	nop
 8013264:	20000300 	.word	0x20000300
 8013268:	0801500d 	.word	0x0801500d
 801326c:	20000310 	.word	0x20000310

08013270 <cleanup_stdio>:
 8013270:	6841      	ldr	r1, [r0, #4]
 8013272:	4b0c      	ldr	r3, [pc, #48]	@ (80132a4 <cleanup_stdio+0x34>)
 8013274:	4299      	cmp	r1, r3
 8013276:	b510      	push	{r4, lr}
 8013278:	4604      	mov	r4, r0
 801327a:	d001      	beq.n	8013280 <cleanup_stdio+0x10>
 801327c:	f001 fec6 	bl	801500c <_fflush_r>
 8013280:	68a1      	ldr	r1, [r4, #8]
 8013282:	4b09      	ldr	r3, [pc, #36]	@ (80132a8 <cleanup_stdio+0x38>)
 8013284:	4299      	cmp	r1, r3
 8013286:	d002      	beq.n	801328e <cleanup_stdio+0x1e>
 8013288:	4620      	mov	r0, r4
 801328a:	f001 febf 	bl	801500c <_fflush_r>
 801328e:	68e1      	ldr	r1, [r4, #12]
 8013290:	4b06      	ldr	r3, [pc, #24]	@ (80132ac <cleanup_stdio+0x3c>)
 8013292:	4299      	cmp	r1, r3
 8013294:	d004      	beq.n	80132a0 <cleanup_stdio+0x30>
 8013296:	4620      	mov	r0, r4
 8013298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801329c:	f001 beb6 	b.w	801500c <_fflush_r>
 80132a0:	bd10      	pop	{r4, pc}
 80132a2:	bf00      	nop
 80132a4:	20014428 	.word	0x20014428
 80132a8:	20014490 	.word	0x20014490
 80132ac:	200144f8 	.word	0x200144f8

080132b0 <global_stdio_init.part.0>:
 80132b0:	b510      	push	{r4, lr}
 80132b2:	4b0b      	ldr	r3, [pc, #44]	@ (80132e0 <global_stdio_init.part.0+0x30>)
 80132b4:	4c0b      	ldr	r4, [pc, #44]	@ (80132e4 <global_stdio_init.part.0+0x34>)
 80132b6:	4a0c      	ldr	r2, [pc, #48]	@ (80132e8 <global_stdio_init.part.0+0x38>)
 80132b8:	601a      	str	r2, [r3, #0]
 80132ba:	4620      	mov	r0, r4
 80132bc:	2200      	movs	r2, #0
 80132be:	2104      	movs	r1, #4
 80132c0:	f7ff ff94 	bl	80131ec <std>
 80132c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80132c8:	2201      	movs	r2, #1
 80132ca:	2109      	movs	r1, #9
 80132cc:	f7ff ff8e 	bl	80131ec <std>
 80132d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80132d4:	2202      	movs	r2, #2
 80132d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132da:	2112      	movs	r1, #18
 80132dc:	f7ff bf86 	b.w	80131ec <std>
 80132e0:	20014560 	.word	0x20014560
 80132e4:	20014428 	.word	0x20014428
 80132e8:	08013259 	.word	0x08013259

080132ec <__sfp_lock_acquire>:
 80132ec:	4801      	ldr	r0, [pc, #4]	@ (80132f4 <__sfp_lock_acquire+0x8>)
 80132ee:	f000 b9ac 	b.w	801364a <__retarget_lock_acquire_recursive>
 80132f2:	bf00      	nop
 80132f4:	20014569 	.word	0x20014569

080132f8 <__sfp_lock_release>:
 80132f8:	4801      	ldr	r0, [pc, #4]	@ (8013300 <__sfp_lock_release+0x8>)
 80132fa:	f000 b9a7 	b.w	801364c <__retarget_lock_release_recursive>
 80132fe:	bf00      	nop
 8013300:	20014569 	.word	0x20014569

08013304 <__sinit>:
 8013304:	b510      	push	{r4, lr}
 8013306:	4604      	mov	r4, r0
 8013308:	f7ff fff0 	bl	80132ec <__sfp_lock_acquire>
 801330c:	6a23      	ldr	r3, [r4, #32]
 801330e:	b11b      	cbz	r3, 8013318 <__sinit+0x14>
 8013310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013314:	f7ff bff0 	b.w	80132f8 <__sfp_lock_release>
 8013318:	4b04      	ldr	r3, [pc, #16]	@ (801332c <__sinit+0x28>)
 801331a:	6223      	str	r3, [r4, #32]
 801331c:	4b04      	ldr	r3, [pc, #16]	@ (8013330 <__sinit+0x2c>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d1f5      	bne.n	8013310 <__sinit+0xc>
 8013324:	f7ff ffc4 	bl	80132b0 <global_stdio_init.part.0>
 8013328:	e7f2      	b.n	8013310 <__sinit+0xc>
 801332a:	bf00      	nop
 801332c:	08013271 	.word	0x08013271
 8013330:	20014560 	.word	0x20014560

08013334 <_fwalk_sglue>:
 8013334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013338:	4607      	mov	r7, r0
 801333a:	4688      	mov	r8, r1
 801333c:	4614      	mov	r4, r2
 801333e:	2600      	movs	r6, #0
 8013340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013344:	f1b9 0901 	subs.w	r9, r9, #1
 8013348:	d505      	bpl.n	8013356 <_fwalk_sglue+0x22>
 801334a:	6824      	ldr	r4, [r4, #0]
 801334c:	2c00      	cmp	r4, #0
 801334e:	d1f7      	bne.n	8013340 <_fwalk_sglue+0xc>
 8013350:	4630      	mov	r0, r6
 8013352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013356:	89ab      	ldrh	r3, [r5, #12]
 8013358:	2b01      	cmp	r3, #1
 801335a:	d907      	bls.n	801336c <_fwalk_sglue+0x38>
 801335c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013360:	3301      	adds	r3, #1
 8013362:	d003      	beq.n	801336c <_fwalk_sglue+0x38>
 8013364:	4629      	mov	r1, r5
 8013366:	4638      	mov	r0, r7
 8013368:	47c0      	blx	r8
 801336a:	4306      	orrs	r6, r0
 801336c:	3568      	adds	r5, #104	@ 0x68
 801336e:	e7e9      	b.n	8013344 <_fwalk_sglue+0x10>

08013370 <siprintf>:
 8013370:	b40e      	push	{r1, r2, r3}
 8013372:	b500      	push	{lr}
 8013374:	b09c      	sub	sp, #112	@ 0x70
 8013376:	ab1d      	add	r3, sp, #116	@ 0x74
 8013378:	9002      	str	r0, [sp, #8]
 801337a:	9006      	str	r0, [sp, #24]
 801337c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013380:	4809      	ldr	r0, [pc, #36]	@ (80133a8 <siprintf+0x38>)
 8013382:	9107      	str	r1, [sp, #28]
 8013384:	9104      	str	r1, [sp, #16]
 8013386:	4909      	ldr	r1, [pc, #36]	@ (80133ac <siprintf+0x3c>)
 8013388:	f853 2b04 	ldr.w	r2, [r3], #4
 801338c:	9105      	str	r1, [sp, #20]
 801338e:	6800      	ldr	r0, [r0, #0]
 8013390:	9301      	str	r3, [sp, #4]
 8013392:	a902      	add	r1, sp, #8
 8013394:	f001 fcba 	bl	8014d0c <_svfiprintf_r>
 8013398:	9b02      	ldr	r3, [sp, #8]
 801339a:	2200      	movs	r2, #0
 801339c:	701a      	strb	r2, [r3, #0]
 801339e:	b01c      	add	sp, #112	@ 0x70
 80133a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80133a4:	b003      	add	sp, #12
 80133a6:	4770      	bx	lr
 80133a8:	2000030c 	.word	0x2000030c
 80133ac:	ffff0208 	.word	0xffff0208

080133b0 <__sread>:
 80133b0:	b510      	push	{r4, lr}
 80133b2:	460c      	mov	r4, r1
 80133b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133b8:	f000 f8f8 	bl	80135ac <_read_r>
 80133bc:	2800      	cmp	r0, #0
 80133be:	bfab      	itete	ge
 80133c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80133c2:	89a3      	ldrhlt	r3, [r4, #12]
 80133c4:	181b      	addge	r3, r3, r0
 80133c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80133ca:	bfac      	ite	ge
 80133cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80133ce:	81a3      	strhlt	r3, [r4, #12]
 80133d0:	bd10      	pop	{r4, pc}

080133d2 <__swrite>:
 80133d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d6:	461f      	mov	r7, r3
 80133d8:	898b      	ldrh	r3, [r1, #12]
 80133da:	05db      	lsls	r3, r3, #23
 80133dc:	4605      	mov	r5, r0
 80133de:	460c      	mov	r4, r1
 80133e0:	4616      	mov	r6, r2
 80133e2:	d505      	bpl.n	80133f0 <__swrite+0x1e>
 80133e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133e8:	2302      	movs	r3, #2
 80133ea:	2200      	movs	r2, #0
 80133ec:	f000 f8cc 	bl	8013588 <_lseek_r>
 80133f0:	89a3      	ldrh	r3, [r4, #12]
 80133f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80133fa:	81a3      	strh	r3, [r4, #12]
 80133fc:	4632      	mov	r2, r6
 80133fe:	463b      	mov	r3, r7
 8013400:	4628      	mov	r0, r5
 8013402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013406:	f000 b8e3 	b.w	80135d0 <_write_r>

0801340a <__sseek>:
 801340a:	b510      	push	{r4, lr}
 801340c:	460c      	mov	r4, r1
 801340e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013412:	f000 f8b9 	bl	8013588 <_lseek_r>
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	89a3      	ldrh	r3, [r4, #12]
 801341a:	bf15      	itete	ne
 801341c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801341e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013426:	81a3      	strheq	r3, [r4, #12]
 8013428:	bf18      	it	ne
 801342a:	81a3      	strhne	r3, [r4, #12]
 801342c:	bd10      	pop	{r4, pc}

0801342e <__sclose>:
 801342e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013432:	f000 b843 	b.w	80134bc <_close_r>

08013436 <memset>:
 8013436:	4402      	add	r2, r0
 8013438:	4603      	mov	r3, r0
 801343a:	4293      	cmp	r3, r2
 801343c:	d100      	bne.n	8013440 <memset+0xa>
 801343e:	4770      	bx	lr
 8013440:	f803 1b01 	strb.w	r1, [r3], #1
 8013444:	e7f9      	b.n	801343a <memset+0x4>

08013446 <strchr>:
 8013446:	b2c9      	uxtb	r1, r1
 8013448:	4603      	mov	r3, r0
 801344a:	4618      	mov	r0, r3
 801344c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013450:	b112      	cbz	r2, 8013458 <strchr+0x12>
 8013452:	428a      	cmp	r2, r1
 8013454:	d1f9      	bne.n	801344a <strchr+0x4>
 8013456:	4770      	bx	lr
 8013458:	2900      	cmp	r1, #0
 801345a:	bf18      	it	ne
 801345c:	2000      	movne	r0, #0
 801345e:	4770      	bx	lr

08013460 <strncpy>:
 8013460:	b510      	push	{r4, lr}
 8013462:	3901      	subs	r1, #1
 8013464:	4603      	mov	r3, r0
 8013466:	b132      	cbz	r2, 8013476 <strncpy+0x16>
 8013468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801346c:	f803 4b01 	strb.w	r4, [r3], #1
 8013470:	3a01      	subs	r2, #1
 8013472:	2c00      	cmp	r4, #0
 8013474:	d1f7      	bne.n	8013466 <strncpy+0x6>
 8013476:	441a      	add	r2, r3
 8013478:	2100      	movs	r1, #0
 801347a:	4293      	cmp	r3, r2
 801347c:	d100      	bne.n	8013480 <strncpy+0x20>
 801347e:	bd10      	pop	{r4, pc}
 8013480:	f803 1b01 	strb.w	r1, [r3], #1
 8013484:	e7f9      	b.n	801347a <strncpy+0x1a>

08013486 <strstr>:
 8013486:	780a      	ldrb	r2, [r1, #0]
 8013488:	b570      	push	{r4, r5, r6, lr}
 801348a:	b96a      	cbnz	r2, 80134a8 <strstr+0x22>
 801348c:	bd70      	pop	{r4, r5, r6, pc}
 801348e:	429a      	cmp	r2, r3
 8013490:	d109      	bne.n	80134a6 <strstr+0x20>
 8013492:	460c      	mov	r4, r1
 8013494:	4605      	mov	r5, r0
 8013496:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801349a:	2b00      	cmp	r3, #0
 801349c:	d0f6      	beq.n	801348c <strstr+0x6>
 801349e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80134a2:	429e      	cmp	r6, r3
 80134a4:	d0f7      	beq.n	8013496 <strstr+0x10>
 80134a6:	3001      	adds	r0, #1
 80134a8:	7803      	ldrb	r3, [r0, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d1ef      	bne.n	801348e <strstr+0x8>
 80134ae:	4618      	mov	r0, r3
 80134b0:	e7ec      	b.n	801348c <strstr+0x6>
	...

080134b4 <_localeconv_r>:
 80134b4:	4800      	ldr	r0, [pc, #0]	@ (80134b8 <_localeconv_r+0x4>)
 80134b6:	4770      	bx	lr
 80134b8:	2000044c 	.word	0x2000044c

080134bc <_close_r>:
 80134bc:	b538      	push	{r3, r4, r5, lr}
 80134be:	4d06      	ldr	r5, [pc, #24]	@ (80134d8 <_close_r+0x1c>)
 80134c0:	2300      	movs	r3, #0
 80134c2:	4604      	mov	r4, r0
 80134c4:	4608      	mov	r0, r1
 80134c6:	602b      	str	r3, [r5, #0]
 80134c8:	f7f6 fc40 	bl	8009d4c <_close>
 80134cc:	1c43      	adds	r3, r0, #1
 80134ce:	d102      	bne.n	80134d6 <_close_r+0x1a>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	b103      	cbz	r3, 80134d6 <_close_r+0x1a>
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	bd38      	pop	{r3, r4, r5, pc}
 80134d8:	20014564 	.word	0x20014564

080134dc <_reclaim_reent>:
 80134dc:	4b29      	ldr	r3, [pc, #164]	@ (8013584 <_reclaim_reent+0xa8>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4283      	cmp	r3, r0
 80134e2:	b570      	push	{r4, r5, r6, lr}
 80134e4:	4604      	mov	r4, r0
 80134e6:	d04b      	beq.n	8013580 <_reclaim_reent+0xa4>
 80134e8:	69c3      	ldr	r3, [r0, #28]
 80134ea:	b1ab      	cbz	r3, 8013518 <_reclaim_reent+0x3c>
 80134ec:	68db      	ldr	r3, [r3, #12]
 80134ee:	b16b      	cbz	r3, 801350c <_reclaim_reent+0x30>
 80134f0:	2500      	movs	r5, #0
 80134f2:	69e3      	ldr	r3, [r4, #28]
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	5959      	ldr	r1, [r3, r5]
 80134f8:	2900      	cmp	r1, #0
 80134fa:	d13b      	bne.n	8013574 <_reclaim_reent+0x98>
 80134fc:	3504      	adds	r5, #4
 80134fe:	2d80      	cmp	r5, #128	@ 0x80
 8013500:	d1f7      	bne.n	80134f2 <_reclaim_reent+0x16>
 8013502:	69e3      	ldr	r3, [r4, #28]
 8013504:	4620      	mov	r0, r4
 8013506:	68d9      	ldr	r1, [r3, #12]
 8013508:	f000 ff22 	bl	8014350 <_free_r>
 801350c:	69e3      	ldr	r3, [r4, #28]
 801350e:	6819      	ldr	r1, [r3, #0]
 8013510:	b111      	cbz	r1, 8013518 <_reclaim_reent+0x3c>
 8013512:	4620      	mov	r0, r4
 8013514:	f000 ff1c 	bl	8014350 <_free_r>
 8013518:	6961      	ldr	r1, [r4, #20]
 801351a:	b111      	cbz	r1, 8013522 <_reclaim_reent+0x46>
 801351c:	4620      	mov	r0, r4
 801351e:	f000 ff17 	bl	8014350 <_free_r>
 8013522:	69e1      	ldr	r1, [r4, #28]
 8013524:	b111      	cbz	r1, 801352c <_reclaim_reent+0x50>
 8013526:	4620      	mov	r0, r4
 8013528:	f000 ff12 	bl	8014350 <_free_r>
 801352c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801352e:	b111      	cbz	r1, 8013536 <_reclaim_reent+0x5a>
 8013530:	4620      	mov	r0, r4
 8013532:	f000 ff0d 	bl	8014350 <_free_r>
 8013536:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013538:	b111      	cbz	r1, 8013540 <_reclaim_reent+0x64>
 801353a:	4620      	mov	r0, r4
 801353c:	f000 ff08 	bl	8014350 <_free_r>
 8013540:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013542:	b111      	cbz	r1, 801354a <_reclaim_reent+0x6e>
 8013544:	4620      	mov	r0, r4
 8013546:	f000 ff03 	bl	8014350 <_free_r>
 801354a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801354c:	b111      	cbz	r1, 8013554 <_reclaim_reent+0x78>
 801354e:	4620      	mov	r0, r4
 8013550:	f000 fefe 	bl	8014350 <_free_r>
 8013554:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013556:	b111      	cbz	r1, 801355e <_reclaim_reent+0x82>
 8013558:	4620      	mov	r0, r4
 801355a:	f000 fef9 	bl	8014350 <_free_r>
 801355e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013560:	b111      	cbz	r1, 8013568 <_reclaim_reent+0x8c>
 8013562:	4620      	mov	r0, r4
 8013564:	f000 fef4 	bl	8014350 <_free_r>
 8013568:	6a23      	ldr	r3, [r4, #32]
 801356a:	b14b      	cbz	r3, 8013580 <_reclaim_reent+0xa4>
 801356c:	4620      	mov	r0, r4
 801356e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013572:	4718      	bx	r3
 8013574:	680e      	ldr	r6, [r1, #0]
 8013576:	4620      	mov	r0, r4
 8013578:	f000 feea 	bl	8014350 <_free_r>
 801357c:	4631      	mov	r1, r6
 801357e:	e7bb      	b.n	80134f8 <_reclaim_reent+0x1c>
 8013580:	bd70      	pop	{r4, r5, r6, pc}
 8013582:	bf00      	nop
 8013584:	2000030c 	.word	0x2000030c

08013588 <_lseek_r>:
 8013588:	b538      	push	{r3, r4, r5, lr}
 801358a:	4d07      	ldr	r5, [pc, #28]	@ (80135a8 <_lseek_r+0x20>)
 801358c:	4604      	mov	r4, r0
 801358e:	4608      	mov	r0, r1
 8013590:	4611      	mov	r1, r2
 8013592:	2200      	movs	r2, #0
 8013594:	602a      	str	r2, [r5, #0]
 8013596:	461a      	mov	r2, r3
 8013598:	f7f6 fbff 	bl	8009d9a <_lseek>
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	d102      	bne.n	80135a6 <_lseek_r+0x1e>
 80135a0:	682b      	ldr	r3, [r5, #0]
 80135a2:	b103      	cbz	r3, 80135a6 <_lseek_r+0x1e>
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	20014564 	.word	0x20014564

080135ac <_read_r>:
 80135ac:	b538      	push	{r3, r4, r5, lr}
 80135ae:	4d07      	ldr	r5, [pc, #28]	@ (80135cc <_read_r+0x20>)
 80135b0:	4604      	mov	r4, r0
 80135b2:	4608      	mov	r0, r1
 80135b4:	4611      	mov	r1, r2
 80135b6:	2200      	movs	r2, #0
 80135b8:	602a      	str	r2, [r5, #0]
 80135ba:	461a      	mov	r2, r3
 80135bc:	f7f6 fb8d 	bl	8009cda <_read>
 80135c0:	1c43      	adds	r3, r0, #1
 80135c2:	d102      	bne.n	80135ca <_read_r+0x1e>
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	b103      	cbz	r3, 80135ca <_read_r+0x1e>
 80135c8:	6023      	str	r3, [r4, #0]
 80135ca:	bd38      	pop	{r3, r4, r5, pc}
 80135cc:	20014564 	.word	0x20014564

080135d0 <_write_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4d07      	ldr	r5, [pc, #28]	@ (80135f0 <_write_r+0x20>)
 80135d4:	4604      	mov	r4, r0
 80135d6:	4608      	mov	r0, r1
 80135d8:	4611      	mov	r1, r2
 80135da:	2200      	movs	r2, #0
 80135dc:	602a      	str	r2, [r5, #0]
 80135de:	461a      	mov	r2, r3
 80135e0:	f7f6 fb98 	bl	8009d14 <_write>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d102      	bne.n	80135ee <_write_r+0x1e>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b103      	cbz	r3, 80135ee <_write_r+0x1e>
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	20014564 	.word	0x20014564

080135f4 <__errno>:
 80135f4:	4b01      	ldr	r3, [pc, #4]	@ (80135fc <__errno+0x8>)
 80135f6:	6818      	ldr	r0, [r3, #0]
 80135f8:	4770      	bx	lr
 80135fa:	bf00      	nop
 80135fc:	2000030c 	.word	0x2000030c

08013600 <__libc_init_array>:
 8013600:	b570      	push	{r4, r5, r6, lr}
 8013602:	4d0d      	ldr	r5, [pc, #52]	@ (8013638 <__libc_init_array+0x38>)
 8013604:	4c0d      	ldr	r4, [pc, #52]	@ (801363c <__libc_init_array+0x3c>)
 8013606:	1b64      	subs	r4, r4, r5
 8013608:	10a4      	asrs	r4, r4, #2
 801360a:	2600      	movs	r6, #0
 801360c:	42a6      	cmp	r6, r4
 801360e:	d109      	bne.n	8013624 <__libc_init_array+0x24>
 8013610:	4d0b      	ldr	r5, [pc, #44]	@ (8013640 <__libc_init_array+0x40>)
 8013612:	4c0c      	ldr	r4, [pc, #48]	@ (8013644 <__libc_init_array+0x44>)
 8013614:	f002 f86c 	bl	80156f0 <_init>
 8013618:	1b64      	subs	r4, r4, r5
 801361a:	10a4      	asrs	r4, r4, #2
 801361c:	2600      	movs	r6, #0
 801361e:	42a6      	cmp	r6, r4
 8013620:	d105      	bne.n	801362e <__libc_init_array+0x2e>
 8013622:	bd70      	pop	{r4, r5, r6, pc}
 8013624:	f855 3b04 	ldr.w	r3, [r5], #4
 8013628:	4798      	blx	r3
 801362a:	3601      	adds	r6, #1
 801362c:	e7ee      	b.n	801360c <__libc_init_array+0xc>
 801362e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013632:	4798      	blx	r3
 8013634:	3601      	adds	r6, #1
 8013636:	e7f2      	b.n	801361e <__libc_init_array+0x1e>
 8013638:	080173d8 	.word	0x080173d8
 801363c:	080173d8 	.word	0x080173d8
 8013640:	080173d8 	.word	0x080173d8
 8013644:	080173ec 	.word	0x080173ec

08013648 <__retarget_lock_init_recursive>:
 8013648:	4770      	bx	lr

0801364a <__retarget_lock_acquire_recursive>:
 801364a:	4770      	bx	lr

0801364c <__retarget_lock_release_recursive>:
 801364c:	4770      	bx	lr

0801364e <strcpy>:
 801364e:	4603      	mov	r3, r0
 8013650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013654:	f803 2b01 	strb.w	r2, [r3], #1
 8013658:	2a00      	cmp	r2, #0
 801365a:	d1f9      	bne.n	8013650 <strcpy+0x2>
 801365c:	4770      	bx	lr

0801365e <memcpy>:
 801365e:	440a      	add	r2, r1
 8013660:	4291      	cmp	r1, r2
 8013662:	f100 33ff 	add.w	r3, r0, #4294967295
 8013666:	d100      	bne.n	801366a <memcpy+0xc>
 8013668:	4770      	bx	lr
 801366a:	b510      	push	{r4, lr}
 801366c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013674:	4291      	cmp	r1, r2
 8013676:	d1f9      	bne.n	801366c <memcpy+0xe>
 8013678:	bd10      	pop	{r4, pc}
	...

0801367c <__assert_func>:
 801367c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801367e:	4614      	mov	r4, r2
 8013680:	461a      	mov	r2, r3
 8013682:	4b09      	ldr	r3, [pc, #36]	@ (80136a8 <__assert_func+0x2c>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	4605      	mov	r5, r0
 8013688:	68d8      	ldr	r0, [r3, #12]
 801368a:	b954      	cbnz	r4, 80136a2 <__assert_func+0x26>
 801368c:	4b07      	ldr	r3, [pc, #28]	@ (80136ac <__assert_func+0x30>)
 801368e:	461c      	mov	r4, r3
 8013690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013694:	9100      	str	r1, [sp, #0]
 8013696:	462b      	mov	r3, r5
 8013698:	4905      	ldr	r1, [pc, #20]	@ (80136b0 <__assert_func+0x34>)
 801369a:	f001 fcdf 	bl	801505c <fiprintf>
 801369e:	f001 fdad 	bl	80151fc <abort>
 80136a2:	4b04      	ldr	r3, [pc, #16]	@ (80136b4 <__assert_func+0x38>)
 80136a4:	e7f4      	b.n	8013690 <__assert_func+0x14>
 80136a6:	bf00      	nop
 80136a8:	2000030c 	.word	0x2000030c
 80136ac:	080169f4 	.word	0x080169f4
 80136b0:	080169c6 	.word	0x080169c6
 80136b4:	080169b9 	.word	0x080169b9

080136b8 <quorem>:
 80136b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136bc:	6903      	ldr	r3, [r0, #16]
 80136be:	690c      	ldr	r4, [r1, #16]
 80136c0:	42a3      	cmp	r3, r4
 80136c2:	4607      	mov	r7, r0
 80136c4:	db7e      	blt.n	80137c4 <quorem+0x10c>
 80136c6:	3c01      	subs	r4, #1
 80136c8:	f101 0814 	add.w	r8, r1, #20
 80136cc:	00a3      	lsls	r3, r4, #2
 80136ce:	f100 0514 	add.w	r5, r0, #20
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136d8:	9301      	str	r3, [sp, #4]
 80136da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136e2:	3301      	adds	r3, #1
 80136e4:	429a      	cmp	r2, r3
 80136e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80136ee:	d32e      	bcc.n	801374e <quorem+0x96>
 80136f0:	f04f 0a00 	mov.w	sl, #0
 80136f4:	46c4      	mov	ip, r8
 80136f6:	46ae      	mov	lr, r5
 80136f8:	46d3      	mov	fp, sl
 80136fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80136fe:	b298      	uxth	r0, r3
 8013700:	fb06 a000 	mla	r0, r6, r0, sl
 8013704:	0c02      	lsrs	r2, r0, #16
 8013706:	0c1b      	lsrs	r3, r3, #16
 8013708:	fb06 2303 	mla	r3, r6, r3, r2
 801370c:	f8de 2000 	ldr.w	r2, [lr]
 8013710:	b280      	uxth	r0, r0
 8013712:	b292      	uxth	r2, r2
 8013714:	1a12      	subs	r2, r2, r0
 8013716:	445a      	add	r2, fp
 8013718:	f8de 0000 	ldr.w	r0, [lr]
 801371c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013720:	b29b      	uxth	r3, r3
 8013722:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013726:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801372a:	b292      	uxth	r2, r2
 801372c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013730:	45e1      	cmp	r9, ip
 8013732:	f84e 2b04 	str.w	r2, [lr], #4
 8013736:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801373a:	d2de      	bcs.n	80136fa <quorem+0x42>
 801373c:	9b00      	ldr	r3, [sp, #0]
 801373e:	58eb      	ldr	r3, [r5, r3]
 8013740:	b92b      	cbnz	r3, 801374e <quorem+0x96>
 8013742:	9b01      	ldr	r3, [sp, #4]
 8013744:	3b04      	subs	r3, #4
 8013746:	429d      	cmp	r5, r3
 8013748:	461a      	mov	r2, r3
 801374a:	d32f      	bcc.n	80137ac <quorem+0xf4>
 801374c:	613c      	str	r4, [r7, #16]
 801374e:	4638      	mov	r0, r7
 8013750:	f001 f978 	bl	8014a44 <__mcmp>
 8013754:	2800      	cmp	r0, #0
 8013756:	db25      	blt.n	80137a4 <quorem+0xec>
 8013758:	4629      	mov	r1, r5
 801375a:	2000      	movs	r0, #0
 801375c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013760:	f8d1 c000 	ldr.w	ip, [r1]
 8013764:	fa1f fe82 	uxth.w	lr, r2
 8013768:	fa1f f38c 	uxth.w	r3, ip
 801376c:	eba3 030e 	sub.w	r3, r3, lr
 8013770:	4403      	add	r3, r0
 8013772:	0c12      	lsrs	r2, r2, #16
 8013774:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013778:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801377c:	b29b      	uxth	r3, r3
 801377e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013782:	45c1      	cmp	r9, r8
 8013784:	f841 3b04 	str.w	r3, [r1], #4
 8013788:	ea4f 4022 	mov.w	r0, r2, asr #16
 801378c:	d2e6      	bcs.n	801375c <quorem+0xa4>
 801378e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013796:	b922      	cbnz	r2, 80137a2 <quorem+0xea>
 8013798:	3b04      	subs	r3, #4
 801379a:	429d      	cmp	r5, r3
 801379c:	461a      	mov	r2, r3
 801379e:	d30b      	bcc.n	80137b8 <quorem+0x100>
 80137a0:	613c      	str	r4, [r7, #16]
 80137a2:	3601      	adds	r6, #1
 80137a4:	4630      	mov	r0, r6
 80137a6:	b003      	add	sp, #12
 80137a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ac:	6812      	ldr	r2, [r2, #0]
 80137ae:	3b04      	subs	r3, #4
 80137b0:	2a00      	cmp	r2, #0
 80137b2:	d1cb      	bne.n	801374c <quorem+0x94>
 80137b4:	3c01      	subs	r4, #1
 80137b6:	e7c6      	b.n	8013746 <quorem+0x8e>
 80137b8:	6812      	ldr	r2, [r2, #0]
 80137ba:	3b04      	subs	r3, #4
 80137bc:	2a00      	cmp	r2, #0
 80137be:	d1ef      	bne.n	80137a0 <quorem+0xe8>
 80137c0:	3c01      	subs	r4, #1
 80137c2:	e7ea      	b.n	801379a <quorem+0xe2>
 80137c4:	2000      	movs	r0, #0
 80137c6:	e7ee      	b.n	80137a6 <quorem+0xee>

080137c8 <_dtoa_r>:
 80137c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	69c7      	ldr	r7, [r0, #28]
 80137ce:	b099      	sub	sp, #100	@ 0x64
 80137d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80137d4:	ec55 4b10 	vmov	r4, r5, d0
 80137d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80137da:	9109      	str	r1, [sp, #36]	@ 0x24
 80137dc:	4683      	mov	fp, r0
 80137de:	920e      	str	r2, [sp, #56]	@ 0x38
 80137e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137e2:	b97f      	cbnz	r7, 8013804 <_dtoa_r+0x3c>
 80137e4:	2010      	movs	r0, #16
 80137e6:	f000 fdfd 	bl	80143e4 <malloc>
 80137ea:	4602      	mov	r2, r0
 80137ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80137f0:	b920      	cbnz	r0, 80137fc <_dtoa_r+0x34>
 80137f2:	4ba7      	ldr	r3, [pc, #668]	@ (8013a90 <_dtoa_r+0x2c8>)
 80137f4:	21ef      	movs	r1, #239	@ 0xef
 80137f6:	48a7      	ldr	r0, [pc, #668]	@ (8013a94 <_dtoa_r+0x2cc>)
 80137f8:	f7ff ff40 	bl	801367c <__assert_func>
 80137fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013800:	6007      	str	r7, [r0, #0]
 8013802:	60c7      	str	r7, [r0, #12]
 8013804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013808:	6819      	ldr	r1, [r3, #0]
 801380a:	b159      	cbz	r1, 8013824 <_dtoa_r+0x5c>
 801380c:	685a      	ldr	r2, [r3, #4]
 801380e:	604a      	str	r2, [r1, #4]
 8013810:	2301      	movs	r3, #1
 8013812:	4093      	lsls	r3, r2
 8013814:	608b      	str	r3, [r1, #8]
 8013816:	4658      	mov	r0, fp
 8013818:	f000 feda 	bl	80145d0 <_Bfree>
 801381c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013820:	2200      	movs	r2, #0
 8013822:	601a      	str	r2, [r3, #0]
 8013824:	1e2b      	subs	r3, r5, #0
 8013826:	bfb9      	ittee	lt
 8013828:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801382c:	9303      	strlt	r3, [sp, #12]
 801382e:	2300      	movge	r3, #0
 8013830:	6033      	strge	r3, [r6, #0]
 8013832:	9f03      	ldr	r7, [sp, #12]
 8013834:	4b98      	ldr	r3, [pc, #608]	@ (8013a98 <_dtoa_r+0x2d0>)
 8013836:	bfbc      	itt	lt
 8013838:	2201      	movlt	r2, #1
 801383a:	6032      	strlt	r2, [r6, #0]
 801383c:	43bb      	bics	r3, r7
 801383e:	d112      	bne.n	8013866 <_dtoa_r+0x9e>
 8013840:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013842:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013846:	6013      	str	r3, [r2, #0]
 8013848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801384c:	4323      	orrs	r3, r4
 801384e:	f000 854d 	beq.w	80142ec <_dtoa_r+0xb24>
 8013852:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013854:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013aac <_dtoa_r+0x2e4>
 8013858:	2b00      	cmp	r3, #0
 801385a:	f000 854f 	beq.w	80142fc <_dtoa_r+0xb34>
 801385e:	f10a 0303 	add.w	r3, sl, #3
 8013862:	f000 bd49 	b.w	80142f8 <_dtoa_r+0xb30>
 8013866:	ed9d 7b02 	vldr	d7, [sp, #8]
 801386a:	2200      	movs	r2, #0
 801386c:	ec51 0b17 	vmov	r0, r1, d7
 8013870:	2300      	movs	r3, #0
 8013872:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013876:	f7ed f927 	bl	8000ac8 <__aeabi_dcmpeq>
 801387a:	4680      	mov	r8, r0
 801387c:	b158      	cbz	r0, 8013896 <_dtoa_r+0xce>
 801387e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013880:	2301      	movs	r3, #1
 8013882:	6013      	str	r3, [r2, #0]
 8013884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013886:	b113      	cbz	r3, 801388e <_dtoa_r+0xc6>
 8013888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801388a:	4b84      	ldr	r3, [pc, #528]	@ (8013a9c <_dtoa_r+0x2d4>)
 801388c:	6013      	str	r3, [r2, #0]
 801388e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013ab0 <_dtoa_r+0x2e8>
 8013892:	f000 bd33 	b.w	80142fc <_dtoa_r+0xb34>
 8013896:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801389a:	aa16      	add	r2, sp, #88	@ 0x58
 801389c:	a917      	add	r1, sp, #92	@ 0x5c
 801389e:	4658      	mov	r0, fp
 80138a0:	f001 f980 	bl	8014ba4 <__d2b>
 80138a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80138a8:	4681      	mov	r9, r0
 80138aa:	2e00      	cmp	r6, #0
 80138ac:	d077      	beq.n	801399e <_dtoa_r+0x1d6>
 80138ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80138b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80138c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80138c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80138c8:	4619      	mov	r1, r3
 80138ca:	2200      	movs	r2, #0
 80138cc:	4b74      	ldr	r3, [pc, #464]	@ (8013aa0 <_dtoa_r+0x2d8>)
 80138ce:	f7ec fcdb 	bl	8000288 <__aeabi_dsub>
 80138d2:	a369      	add	r3, pc, #420	@ (adr r3, 8013a78 <_dtoa_r+0x2b0>)
 80138d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d8:	f7ec fe8e 	bl	80005f8 <__aeabi_dmul>
 80138dc:	a368      	add	r3, pc, #416	@ (adr r3, 8013a80 <_dtoa_r+0x2b8>)
 80138de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e2:	f7ec fcd3 	bl	800028c <__adddf3>
 80138e6:	4604      	mov	r4, r0
 80138e8:	4630      	mov	r0, r6
 80138ea:	460d      	mov	r5, r1
 80138ec:	f7ec fe1a 	bl	8000524 <__aeabi_i2d>
 80138f0:	a365      	add	r3, pc, #404	@ (adr r3, 8013a88 <_dtoa_r+0x2c0>)
 80138f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f6:	f7ec fe7f 	bl	80005f8 <__aeabi_dmul>
 80138fa:	4602      	mov	r2, r0
 80138fc:	460b      	mov	r3, r1
 80138fe:	4620      	mov	r0, r4
 8013900:	4629      	mov	r1, r5
 8013902:	f7ec fcc3 	bl	800028c <__adddf3>
 8013906:	4604      	mov	r4, r0
 8013908:	460d      	mov	r5, r1
 801390a:	f7ed f925 	bl	8000b58 <__aeabi_d2iz>
 801390e:	2200      	movs	r2, #0
 8013910:	4607      	mov	r7, r0
 8013912:	2300      	movs	r3, #0
 8013914:	4620      	mov	r0, r4
 8013916:	4629      	mov	r1, r5
 8013918:	f7ed f8e0 	bl	8000adc <__aeabi_dcmplt>
 801391c:	b140      	cbz	r0, 8013930 <_dtoa_r+0x168>
 801391e:	4638      	mov	r0, r7
 8013920:	f7ec fe00 	bl	8000524 <__aeabi_i2d>
 8013924:	4622      	mov	r2, r4
 8013926:	462b      	mov	r3, r5
 8013928:	f7ed f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 801392c:	b900      	cbnz	r0, 8013930 <_dtoa_r+0x168>
 801392e:	3f01      	subs	r7, #1
 8013930:	2f16      	cmp	r7, #22
 8013932:	d851      	bhi.n	80139d8 <_dtoa_r+0x210>
 8013934:	4b5b      	ldr	r3, [pc, #364]	@ (8013aa4 <_dtoa_r+0x2dc>)
 8013936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013942:	f7ed f8cb 	bl	8000adc <__aeabi_dcmplt>
 8013946:	2800      	cmp	r0, #0
 8013948:	d048      	beq.n	80139dc <_dtoa_r+0x214>
 801394a:	3f01      	subs	r7, #1
 801394c:	2300      	movs	r3, #0
 801394e:	9312      	str	r3, [sp, #72]	@ 0x48
 8013950:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013952:	1b9b      	subs	r3, r3, r6
 8013954:	1e5a      	subs	r2, r3, #1
 8013956:	bf44      	itt	mi
 8013958:	f1c3 0801 	rsbmi	r8, r3, #1
 801395c:	2300      	movmi	r3, #0
 801395e:	9208      	str	r2, [sp, #32]
 8013960:	bf54      	ite	pl
 8013962:	f04f 0800 	movpl.w	r8, #0
 8013966:	9308      	strmi	r3, [sp, #32]
 8013968:	2f00      	cmp	r7, #0
 801396a:	db39      	blt.n	80139e0 <_dtoa_r+0x218>
 801396c:	9b08      	ldr	r3, [sp, #32]
 801396e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013970:	443b      	add	r3, r7
 8013972:	9308      	str	r3, [sp, #32]
 8013974:	2300      	movs	r3, #0
 8013976:	930a      	str	r3, [sp, #40]	@ 0x28
 8013978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801397a:	2b09      	cmp	r3, #9
 801397c:	d864      	bhi.n	8013a48 <_dtoa_r+0x280>
 801397e:	2b05      	cmp	r3, #5
 8013980:	bfc4      	itt	gt
 8013982:	3b04      	subgt	r3, #4
 8013984:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013988:	f1a3 0302 	sub.w	r3, r3, #2
 801398c:	bfcc      	ite	gt
 801398e:	2400      	movgt	r4, #0
 8013990:	2401      	movle	r4, #1
 8013992:	2b03      	cmp	r3, #3
 8013994:	d863      	bhi.n	8013a5e <_dtoa_r+0x296>
 8013996:	e8df f003 	tbb	[pc, r3]
 801399a:	372a      	.short	0x372a
 801399c:	5535      	.short	0x5535
 801399e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80139a2:	441e      	add	r6, r3
 80139a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80139a8:	2b20      	cmp	r3, #32
 80139aa:	bfc1      	itttt	gt
 80139ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80139b0:	409f      	lslgt	r7, r3
 80139b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80139b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80139ba:	bfd6      	itet	le
 80139bc:	f1c3 0320 	rsble	r3, r3, #32
 80139c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80139c4:	fa04 f003 	lslle.w	r0, r4, r3
 80139c8:	f7ec fd9c 	bl	8000504 <__aeabi_ui2d>
 80139cc:	2201      	movs	r2, #1
 80139ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80139d2:	3e01      	subs	r6, #1
 80139d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80139d6:	e777      	b.n	80138c8 <_dtoa_r+0x100>
 80139d8:	2301      	movs	r3, #1
 80139da:	e7b8      	b.n	801394e <_dtoa_r+0x186>
 80139dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80139de:	e7b7      	b.n	8013950 <_dtoa_r+0x188>
 80139e0:	427b      	negs	r3, r7
 80139e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80139e4:	2300      	movs	r3, #0
 80139e6:	eba8 0807 	sub.w	r8, r8, r7
 80139ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80139ec:	e7c4      	b.n	8013978 <_dtoa_r+0x1b0>
 80139ee:	2300      	movs	r3, #0
 80139f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	dc35      	bgt.n	8013a64 <_dtoa_r+0x29c>
 80139f8:	2301      	movs	r3, #1
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	9307      	str	r3, [sp, #28]
 80139fe:	461a      	mov	r2, r3
 8013a00:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a02:	e00b      	b.n	8013a1c <_dtoa_r+0x254>
 8013a04:	2301      	movs	r3, #1
 8013a06:	e7f3      	b.n	80139f0 <_dtoa_r+0x228>
 8013a08:	2300      	movs	r3, #0
 8013a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a0e:	18fb      	adds	r3, r7, r3
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	3301      	adds	r3, #1
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	9307      	str	r3, [sp, #28]
 8013a18:	bfb8      	it	lt
 8013a1a:	2301      	movlt	r3, #1
 8013a1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013a20:	2100      	movs	r1, #0
 8013a22:	2204      	movs	r2, #4
 8013a24:	f102 0514 	add.w	r5, r2, #20
 8013a28:	429d      	cmp	r5, r3
 8013a2a:	d91f      	bls.n	8013a6c <_dtoa_r+0x2a4>
 8013a2c:	6041      	str	r1, [r0, #4]
 8013a2e:	4658      	mov	r0, fp
 8013a30:	f000 fd8e 	bl	8014550 <_Balloc>
 8013a34:	4682      	mov	sl, r0
 8013a36:	2800      	cmp	r0, #0
 8013a38:	d13c      	bne.n	8013ab4 <_dtoa_r+0x2ec>
 8013a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8013aa8 <_dtoa_r+0x2e0>)
 8013a3c:	4602      	mov	r2, r0
 8013a3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013a42:	e6d8      	b.n	80137f6 <_dtoa_r+0x2e>
 8013a44:	2301      	movs	r3, #1
 8013a46:	e7e0      	b.n	8013a0a <_dtoa_r+0x242>
 8013a48:	2401      	movs	r4, #1
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013a50:	f04f 33ff 	mov.w	r3, #4294967295
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	9307      	str	r3, [sp, #28]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2312      	movs	r3, #18
 8013a5c:	e7d0      	b.n	8013a00 <_dtoa_r+0x238>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a62:	e7f5      	b.n	8013a50 <_dtoa_r+0x288>
 8013a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	9307      	str	r3, [sp, #28]
 8013a6a:	e7d7      	b.n	8013a1c <_dtoa_r+0x254>
 8013a6c:	3101      	adds	r1, #1
 8013a6e:	0052      	lsls	r2, r2, #1
 8013a70:	e7d8      	b.n	8013a24 <_dtoa_r+0x25c>
 8013a72:	bf00      	nop
 8013a74:	f3af 8000 	nop.w
 8013a78:	636f4361 	.word	0x636f4361
 8013a7c:	3fd287a7 	.word	0x3fd287a7
 8013a80:	8b60c8b3 	.word	0x8b60c8b3
 8013a84:	3fc68a28 	.word	0x3fc68a28
 8013a88:	509f79fb 	.word	0x509f79fb
 8013a8c:	3fd34413 	.word	0x3fd34413
 8013a90:	08016a02 	.word	0x08016a02
 8013a94:	08016a19 	.word	0x08016a19
 8013a98:	7ff00000 	.word	0x7ff00000
 8013a9c:	08016996 	.word	0x08016996
 8013aa0:	3ff80000 	.word	0x3ff80000
 8013aa4:	08016b10 	.word	0x08016b10
 8013aa8:	08016a71 	.word	0x08016a71
 8013aac:	080169fe 	.word	0x080169fe
 8013ab0:	08016995 	.word	0x08016995
 8013ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013ab8:	6018      	str	r0, [r3, #0]
 8013aba:	9b07      	ldr	r3, [sp, #28]
 8013abc:	2b0e      	cmp	r3, #14
 8013abe:	f200 80a4 	bhi.w	8013c0a <_dtoa_r+0x442>
 8013ac2:	2c00      	cmp	r4, #0
 8013ac4:	f000 80a1 	beq.w	8013c0a <_dtoa_r+0x442>
 8013ac8:	2f00      	cmp	r7, #0
 8013aca:	dd33      	ble.n	8013b34 <_dtoa_r+0x36c>
 8013acc:	4bad      	ldr	r3, [pc, #692]	@ (8013d84 <_dtoa_r+0x5bc>)
 8013ace:	f007 020f 	and.w	r2, r7, #15
 8013ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ad6:	ed93 7b00 	vldr	d7, [r3]
 8013ada:	05f8      	lsls	r0, r7, #23
 8013adc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013ae4:	d516      	bpl.n	8013b14 <_dtoa_r+0x34c>
 8013ae6:	4ba8      	ldr	r3, [pc, #672]	@ (8013d88 <_dtoa_r+0x5c0>)
 8013ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013af0:	f7ec feac 	bl	800084c <__aeabi_ddiv>
 8013af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013af8:	f004 040f 	and.w	r4, r4, #15
 8013afc:	2603      	movs	r6, #3
 8013afe:	4da2      	ldr	r5, [pc, #648]	@ (8013d88 <_dtoa_r+0x5c0>)
 8013b00:	b954      	cbnz	r4, 8013b18 <_dtoa_r+0x350>
 8013b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b0a:	f7ec fe9f 	bl	800084c <__aeabi_ddiv>
 8013b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b12:	e028      	b.n	8013b66 <_dtoa_r+0x39e>
 8013b14:	2602      	movs	r6, #2
 8013b16:	e7f2      	b.n	8013afe <_dtoa_r+0x336>
 8013b18:	07e1      	lsls	r1, r4, #31
 8013b1a:	d508      	bpl.n	8013b2e <_dtoa_r+0x366>
 8013b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b24:	f7ec fd68 	bl	80005f8 <__aeabi_dmul>
 8013b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b2c:	3601      	adds	r6, #1
 8013b2e:	1064      	asrs	r4, r4, #1
 8013b30:	3508      	adds	r5, #8
 8013b32:	e7e5      	b.n	8013b00 <_dtoa_r+0x338>
 8013b34:	f000 80d2 	beq.w	8013cdc <_dtoa_r+0x514>
 8013b38:	427c      	negs	r4, r7
 8013b3a:	4b92      	ldr	r3, [pc, #584]	@ (8013d84 <_dtoa_r+0x5bc>)
 8013b3c:	4d92      	ldr	r5, [pc, #584]	@ (8013d88 <_dtoa_r+0x5c0>)
 8013b3e:	f004 020f 	and.w	r2, r4, #15
 8013b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b4e:	f7ec fd53 	bl	80005f8 <__aeabi_dmul>
 8013b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b56:	1124      	asrs	r4, r4, #4
 8013b58:	2300      	movs	r3, #0
 8013b5a:	2602      	movs	r6, #2
 8013b5c:	2c00      	cmp	r4, #0
 8013b5e:	f040 80b2 	bne.w	8013cc6 <_dtoa_r+0x4fe>
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1d3      	bne.n	8013b0e <_dtoa_r+0x346>
 8013b66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f000 80b7 	beq.w	8013ce0 <_dtoa_r+0x518>
 8013b72:	4b86      	ldr	r3, [pc, #536]	@ (8013d8c <_dtoa_r+0x5c4>)
 8013b74:	2200      	movs	r2, #0
 8013b76:	4620      	mov	r0, r4
 8013b78:	4629      	mov	r1, r5
 8013b7a:	f7ec ffaf 	bl	8000adc <__aeabi_dcmplt>
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	f000 80ae 	beq.w	8013ce0 <_dtoa_r+0x518>
 8013b84:	9b07      	ldr	r3, [sp, #28]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f000 80aa 	beq.w	8013ce0 <_dtoa_r+0x518>
 8013b8c:	9b00      	ldr	r3, [sp, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	dd37      	ble.n	8013c02 <_dtoa_r+0x43a>
 8013b92:	1e7b      	subs	r3, r7, #1
 8013b94:	9304      	str	r3, [sp, #16]
 8013b96:	4620      	mov	r0, r4
 8013b98:	4b7d      	ldr	r3, [pc, #500]	@ (8013d90 <_dtoa_r+0x5c8>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	4629      	mov	r1, r5
 8013b9e:	f7ec fd2b 	bl	80005f8 <__aeabi_dmul>
 8013ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ba6:	9c00      	ldr	r4, [sp, #0]
 8013ba8:	3601      	adds	r6, #1
 8013baa:	4630      	mov	r0, r6
 8013bac:	f7ec fcba 	bl	8000524 <__aeabi_i2d>
 8013bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bb4:	f7ec fd20 	bl	80005f8 <__aeabi_dmul>
 8013bb8:	4b76      	ldr	r3, [pc, #472]	@ (8013d94 <_dtoa_r+0x5cc>)
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f7ec fb66 	bl	800028c <__adddf3>
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013bc6:	2c00      	cmp	r4, #0
 8013bc8:	f040 808d 	bne.w	8013ce6 <_dtoa_r+0x51e>
 8013bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bd0:	4b71      	ldr	r3, [pc, #452]	@ (8013d98 <_dtoa_r+0x5d0>)
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	f7ec fb58 	bl	8000288 <__aeabi_dsub>
 8013bd8:	4602      	mov	r2, r0
 8013bda:	460b      	mov	r3, r1
 8013bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013be0:	462a      	mov	r2, r5
 8013be2:	4633      	mov	r3, r6
 8013be4:	f7ec ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8013be8:	2800      	cmp	r0, #0
 8013bea:	f040 828b 	bne.w	8014104 <_dtoa_r+0x93c>
 8013bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bf2:	462a      	mov	r2, r5
 8013bf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013bf8:	f7ec ff70 	bl	8000adc <__aeabi_dcmplt>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	f040 8128 	bne.w	8013e52 <_dtoa_r+0x68a>
 8013c02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013c06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013c0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	f2c0 815a 	blt.w	8013ec6 <_dtoa_r+0x6fe>
 8013c12:	2f0e      	cmp	r7, #14
 8013c14:	f300 8157 	bgt.w	8013ec6 <_dtoa_r+0x6fe>
 8013c18:	4b5a      	ldr	r3, [pc, #360]	@ (8013d84 <_dtoa_r+0x5bc>)
 8013c1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c1e:	ed93 7b00 	vldr	d7, [r3]
 8013c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	ed8d 7b00 	vstr	d7, [sp]
 8013c2a:	da03      	bge.n	8013c34 <_dtoa_r+0x46c>
 8013c2c:	9b07      	ldr	r3, [sp, #28]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	f340 8101 	ble.w	8013e36 <_dtoa_r+0x66e>
 8013c34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013c38:	4656      	mov	r6, sl
 8013c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c3e:	4620      	mov	r0, r4
 8013c40:	4629      	mov	r1, r5
 8013c42:	f7ec fe03 	bl	800084c <__aeabi_ddiv>
 8013c46:	f7ec ff87 	bl	8000b58 <__aeabi_d2iz>
 8013c4a:	4680      	mov	r8, r0
 8013c4c:	f7ec fc6a 	bl	8000524 <__aeabi_i2d>
 8013c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c54:	f7ec fcd0 	bl	80005f8 <__aeabi_dmul>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	460b      	mov	r3, r1
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	4629      	mov	r1, r5
 8013c60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013c64:	f7ec fb10 	bl	8000288 <__aeabi_dsub>
 8013c68:	f806 4b01 	strb.w	r4, [r6], #1
 8013c6c:	9d07      	ldr	r5, [sp, #28]
 8013c6e:	eba6 040a 	sub.w	r4, r6, sl
 8013c72:	42a5      	cmp	r5, r4
 8013c74:	4602      	mov	r2, r0
 8013c76:	460b      	mov	r3, r1
 8013c78:	f040 8117 	bne.w	8013eaa <_dtoa_r+0x6e2>
 8013c7c:	f7ec fb06 	bl	800028c <__adddf3>
 8013c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c84:	4604      	mov	r4, r0
 8013c86:	460d      	mov	r5, r1
 8013c88:	f7ec ff46 	bl	8000b18 <__aeabi_dcmpgt>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	f040 80f9 	bne.w	8013e84 <_dtoa_r+0x6bc>
 8013c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c96:	4620      	mov	r0, r4
 8013c98:	4629      	mov	r1, r5
 8013c9a:	f7ec ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c9e:	b118      	cbz	r0, 8013ca8 <_dtoa_r+0x4e0>
 8013ca0:	f018 0f01 	tst.w	r8, #1
 8013ca4:	f040 80ee 	bne.w	8013e84 <_dtoa_r+0x6bc>
 8013ca8:	4649      	mov	r1, r9
 8013caa:	4658      	mov	r0, fp
 8013cac:	f000 fc90 	bl	80145d0 <_Bfree>
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	7033      	strb	r3, [r6, #0]
 8013cb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013cb6:	3701      	adds	r7, #1
 8013cb8:	601f      	str	r7, [r3, #0]
 8013cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f000 831d 	beq.w	80142fc <_dtoa_r+0xb34>
 8013cc2:	601e      	str	r6, [r3, #0]
 8013cc4:	e31a      	b.n	80142fc <_dtoa_r+0xb34>
 8013cc6:	07e2      	lsls	r2, r4, #31
 8013cc8:	d505      	bpl.n	8013cd6 <_dtoa_r+0x50e>
 8013cca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013cce:	f7ec fc93 	bl	80005f8 <__aeabi_dmul>
 8013cd2:	3601      	adds	r6, #1
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	1064      	asrs	r4, r4, #1
 8013cd8:	3508      	adds	r5, #8
 8013cda:	e73f      	b.n	8013b5c <_dtoa_r+0x394>
 8013cdc:	2602      	movs	r6, #2
 8013cde:	e742      	b.n	8013b66 <_dtoa_r+0x39e>
 8013ce0:	9c07      	ldr	r4, [sp, #28]
 8013ce2:	9704      	str	r7, [sp, #16]
 8013ce4:	e761      	b.n	8013baa <_dtoa_r+0x3e2>
 8013ce6:	4b27      	ldr	r3, [pc, #156]	@ (8013d84 <_dtoa_r+0x5bc>)
 8013ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013cea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013cee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cf2:	4454      	add	r4, sl
 8013cf4:	2900      	cmp	r1, #0
 8013cf6:	d053      	beq.n	8013da0 <_dtoa_r+0x5d8>
 8013cf8:	4928      	ldr	r1, [pc, #160]	@ (8013d9c <_dtoa_r+0x5d4>)
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	f7ec fda6 	bl	800084c <__aeabi_ddiv>
 8013d00:	4633      	mov	r3, r6
 8013d02:	462a      	mov	r2, r5
 8013d04:	f7ec fac0 	bl	8000288 <__aeabi_dsub>
 8013d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d0c:	4656      	mov	r6, sl
 8013d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d12:	f7ec ff21 	bl	8000b58 <__aeabi_d2iz>
 8013d16:	4605      	mov	r5, r0
 8013d18:	f7ec fc04 	bl	8000524 <__aeabi_i2d>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	460b      	mov	r3, r1
 8013d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d24:	f7ec fab0 	bl	8000288 <__aeabi_dsub>
 8013d28:	3530      	adds	r5, #48	@ 0x30
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d32:	f806 5b01 	strb.w	r5, [r6], #1
 8013d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d3a:	f7ec fecf 	bl	8000adc <__aeabi_dcmplt>
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d171      	bne.n	8013e26 <_dtoa_r+0x65e>
 8013d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d46:	4911      	ldr	r1, [pc, #68]	@ (8013d8c <_dtoa_r+0x5c4>)
 8013d48:	2000      	movs	r0, #0
 8013d4a:	f7ec fa9d 	bl	8000288 <__aeabi_dsub>
 8013d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d52:	f7ec fec3 	bl	8000adc <__aeabi_dcmplt>
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f040 8095 	bne.w	8013e86 <_dtoa_r+0x6be>
 8013d5c:	42a6      	cmp	r6, r4
 8013d5e:	f43f af50 	beq.w	8013c02 <_dtoa_r+0x43a>
 8013d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013d66:	4b0a      	ldr	r3, [pc, #40]	@ (8013d90 <_dtoa_r+0x5c8>)
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f7ec fc45 	bl	80005f8 <__aeabi_dmul>
 8013d6e:	4b08      	ldr	r3, [pc, #32]	@ (8013d90 <_dtoa_r+0x5c8>)
 8013d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d74:	2200      	movs	r2, #0
 8013d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d7a:	f7ec fc3d 	bl	80005f8 <__aeabi_dmul>
 8013d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d82:	e7c4      	b.n	8013d0e <_dtoa_r+0x546>
 8013d84:	08016b10 	.word	0x08016b10
 8013d88:	08016ae8 	.word	0x08016ae8
 8013d8c:	3ff00000 	.word	0x3ff00000
 8013d90:	40240000 	.word	0x40240000
 8013d94:	401c0000 	.word	0x401c0000
 8013d98:	40140000 	.word	0x40140000
 8013d9c:	3fe00000 	.word	0x3fe00000
 8013da0:	4631      	mov	r1, r6
 8013da2:	4628      	mov	r0, r5
 8013da4:	f7ec fc28 	bl	80005f8 <__aeabi_dmul>
 8013da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013dac:	9415      	str	r4, [sp, #84]	@ 0x54
 8013dae:	4656      	mov	r6, sl
 8013db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013db4:	f7ec fed0 	bl	8000b58 <__aeabi_d2iz>
 8013db8:	4605      	mov	r5, r0
 8013dba:	f7ec fbb3 	bl	8000524 <__aeabi_i2d>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dc6:	f7ec fa5f 	bl	8000288 <__aeabi_dsub>
 8013dca:	3530      	adds	r5, #48	@ 0x30
 8013dcc:	f806 5b01 	strb.w	r5, [r6], #1
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	42a6      	cmp	r6, r4
 8013dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013dda:	f04f 0200 	mov.w	r2, #0
 8013dde:	d124      	bne.n	8013e2a <_dtoa_r+0x662>
 8013de0:	4bac      	ldr	r3, [pc, #688]	@ (8014094 <_dtoa_r+0x8cc>)
 8013de2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013de6:	f7ec fa51 	bl	800028c <__adddf3>
 8013dea:	4602      	mov	r2, r0
 8013dec:	460b      	mov	r3, r1
 8013dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013df2:	f7ec fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d145      	bne.n	8013e86 <_dtoa_r+0x6be>
 8013dfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013dfe:	49a5      	ldr	r1, [pc, #660]	@ (8014094 <_dtoa_r+0x8cc>)
 8013e00:	2000      	movs	r0, #0
 8013e02:	f7ec fa41 	bl	8000288 <__aeabi_dsub>
 8013e06:	4602      	mov	r2, r0
 8013e08:	460b      	mov	r3, r1
 8013e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e0e:	f7ec fe65 	bl	8000adc <__aeabi_dcmplt>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	f43f aef5 	beq.w	8013c02 <_dtoa_r+0x43a>
 8013e18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013e1a:	1e73      	subs	r3, r6, #1
 8013e1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013e1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e22:	2b30      	cmp	r3, #48	@ 0x30
 8013e24:	d0f8      	beq.n	8013e18 <_dtoa_r+0x650>
 8013e26:	9f04      	ldr	r7, [sp, #16]
 8013e28:	e73e      	b.n	8013ca8 <_dtoa_r+0x4e0>
 8013e2a:	4b9b      	ldr	r3, [pc, #620]	@ (8014098 <_dtoa_r+0x8d0>)
 8013e2c:	f7ec fbe4 	bl	80005f8 <__aeabi_dmul>
 8013e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e34:	e7bc      	b.n	8013db0 <_dtoa_r+0x5e8>
 8013e36:	d10c      	bne.n	8013e52 <_dtoa_r+0x68a>
 8013e38:	4b98      	ldr	r3, [pc, #608]	@ (801409c <_dtoa_r+0x8d4>)
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e40:	f7ec fbda 	bl	80005f8 <__aeabi_dmul>
 8013e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e48:	f7ec fe5c 	bl	8000b04 <__aeabi_dcmpge>
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	f000 8157 	beq.w	8014100 <_dtoa_r+0x938>
 8013e52:	2400      	movs	r4, #0
 8013e54:	4625      	mov	r5, r4
 8013e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e58:	43db      	mvns	r3, r3
 8013e5a:	9304      	str	r3, [sp, #16]
 8013e5c:	4656      	mov	r6, sl
 8013e5e:	2700      	movs	r7, #0
 8013e60:	4621      	mov	r1, r4
 8013e62:	4658      	mov	r0, fp
 8013e64:	f000 fbb4 	bl	80145d0 <_Bfree>
 8013e68:	2d00      	cmp	r5, #0
 8013e6a:	d0dc      	beq.n	8013e26 <_dtoa_r+0x65e>
 8013e6c:	b12f      	cbz	r7, 8013e7a <_dtoa_r+0x6b2>
 8013e6e:	42af      	cmp	r7, r5
 8013e70:	d003      	beq.n	8013e7a <_dtoa_r+0x6b2>
 8013e72:	4639      	mov	r1, r7
 8013e74:	4658      	mov	r0, fp
 8013e76:	f000 fbab 	bl	80145d0 <_Bfree>
 8013e7a:	4629      	mov	r1, r5
 8013e7c:	4658      	mov	r0, fp
 8013e7e:	f000 fba7 	bl	80145d0 <_Bfree>
 8013e82:	e7d0      	b.n	8013e26 <_dtoa_r+0x65e>
 8013e84:	9704      	str	r7, [sp, #16]
 8013e86:	4633      	mov	r3, r6
 8013e88:	461e      	mov	r6, r3
 8013e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e8e:	2a39      	cmp	r2, #57	@ 0x39
 8013e90:	d107      	bne.n	8013ea2 <_dtoa_r+0x6da>
 8013e92:	459a      	cmp	sl, r3
 8013e94:	d1f8      	bne.n	8013e88 <_dtoa_r+0x6c0>
 8013e96:	9a04      	ldr	r2, [sp, #16]
 8013e98:	3201      	adds	r2, #1
 8013e9a:	9204      	str	r2, [sp, #16]
 8013e9c:	2230      	movs	r2, #48	@ 0x30
 8013e9e:	f88a 2000 	strb.w	r2, [sl]
 8013ea2:	781a      	ldrb	r2, [r3, #0]
 8013ea4:	3201      	adds	r2, #1
 8013ea6:	701a      	strb	r2, [r3, #0]
 8013ea8:	e7bd      	b.n	8013e26 <_dtoa_r+0x65e>
 8013eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8014098 <_dtoa_r+0x8d0>)
 8013eac:	2200      	movs	r2, #0
 8013eae:	f7ec fba3 	bl	80005f8 <__aeabi_dmul>
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	4604      	mov	r4, r0
 8013eb8:	460d      	mov	r5, r1
 8013eba:	f7ec fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	f43f aebb 	beq.w	8013c3a <_dtoa_r+0x472>
 8013ec4:	e6f0      	b.n	8013ca8 <_dtoa_r+0x4e0>
 8013ec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ec8:	2a00      	cmp	r2, #0
 8013eca:	f000 80db 	beq.w	8014084 <_dtoa_r+0x8bc>
 8013ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ed0:	2a01      	cmp	r2, #1
 8013ed2:	f300 80bf 	bgt.w	8014054 <_dtoa_r+0x88c>
 8013ed6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013ed8:	2a00      	cmp	r2, #0
 8013eda:	f000 80b7 	beq.w	801404c <_dtoa_r+0x884>
 8013ede:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013ee2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013ee4:	4646      	mov	r6, r8
 8013ee6:	9a08      	ldr	r2, [sp, #32]
 8013ee8:	2101      	movs	r1, #1
 8013eea:	441a      	add	r2, r3
 8013eec:	4658      	mov	r0, fp
 8013eee:	4498      	add	r8, r3
 8013ef0:	9208      	str	r2, [sp, #32]
 8013ef2:	f000 fc21 	bl	8014738 <__i2b>
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	b15e      	cbz	r6, 8013f12 <_dtoa_r+0x74a>
 8013efa:	9b08      	ldr	r3, [sp, #32]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	dd08      	ble.n	8013f12 <_dtoa_r+0x74a>
 8013f00:	42b3      	cmp	r3, r6
 8013f02:	9a08      	ldr	r2, [sp, #32]
 8013f04:	bfa8      	it	ge
 8013f06:	4633      	movge	r3, r6
 8013f08:	eba8 0803 	sub.w	r8, r8, r3
 8013f0c:	1af6      	subs	r6, r6, r3
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	9308      	str	r3, [sp, #32]
 8013f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f14:	b1f3      	cbz	r3, 8013f54 <_dtoa_r+0x78c>
 8013f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	f000 80b7 	beq.w	801408c <_dtoa_r+0x8c4>
 8013f1e:	b18c      	cbz	r4, 8013f44 <_dtoa_r+0x77c>
 8013f20:	4629      	mov	r1, r5
 8013f22:	4622      	mov	r2, r4
 8013f24:	4658      	mov	r0, fp
 8013f26:	f000 fcc7 	bl	80148b8 <__pow5mult>
 8013f2a:	464a      	mov	r2, r9
 8013f2c:	4601      	mov	r1, r0
 8013f2e:	4605      	mov	r5, r0
 8013f30:	4658      	mov	r0, fp
 8013f32:	f000 fc17 	bl	8014764 <__multiply>
 8013f36:	4649      	mov	r1, r9
 8013f38:	9004      	str	r0, [sp, #16]
 8013f3a:	4658      	mov	r0, fp
 8013f3c:	f000 fb48 	bl	80145d0 <_Bfree>
 8013f40:	9b04      	ldr	r3, [sp, #16]
 8013f42:	4699      	mov	r9, r3
 8013f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f46:	1b1a      	subs	r2, r3, r4
 8013f48:	d004      	beq.n	8013f54 <_dtoa_r+0x78c>
 8013f4a:	4649      	mov	r1, r9
 8013f4c:	4658      	mov	r0, fp
 8013f4e:	f000 fcb3 	bl	80148b8 <__pow5mult>
 8013f52:	4681      	mov	r9, r0
 8013f54:	2101      	movs	r1, #1
 8013f56:	4658      	mov	r0, fp
 8013f58:	f000 fbee 	bl	8014738 <__i2b>
 8013f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f5e:	4604      	mov	r4, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f000 81cf 	beq.w	8014304 <_dtoa_r+0xb3c>
 8013f66:	461a      	mov	r2, r3
 8013f68:	4601      	mov	r1, r0
 8013f6a:	4658      	mov	r0, fp
 8013f6c:	f000 fca4 	bl	80148b8 <__pow5mult>
 8013f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	4604      	mov	r4, r0
 8013f76:	f300 8095 	bgt.w	80140a4 <_dtoa_r+0x8dc>
 8013f7a:	9b02      	ldr	r3, [sp, #8]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f040 8087 	bne.w	8014090 <_dtoa_r+0x8c8>
 8013f82:	9b03      	ldr	r3, [sp, #12]
 8013f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	f040 8089 	bne.w	80140a0 <_dtoa_r+0x8d8>
 8013f8e:	9b03      	ldr	r3, [sp, #12]
 8013f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f94:	0d1b      	lsrs	r3, r3, #20
 8013f96:	051b      	lsls	r3, r3, #20
 8013f98:	b12b      	cbz	r3, 8013fa6 <_dtoa_r+0x7de>
 8013f9a:	9b08      	ldr	r3, [sp, #32]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	9308      	str	r3, [sp, #32]
 8013fa0:	f108 0801 	add.w	r8, r8, #1
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	f000 81b0 	beq.w	8014310 <_dtoa_r+0xb48>
 8013fb0:	6923      	ldr	r3, [r4, #16]
 8013fb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fb6:	6918      	ldr	r0, [r3, #16]
 8013fb8:	f000 fb72 	bl	80146a0 <__hi0bits>
 8013fbc:	f1c0 0020 	rsb	r0, r0, #32
 8013fc0:	9b08      	ldr	r3, [sp, #32]
 8013fc2:	4418      	add	r0, r3
 8013fc4:	f010 001f 	ands.w	r0, r0, #31
 8013fc8:	d077      	beq.n	80140ba <_dtoa_r+0x8f2>
 8013fca:	f1c0 0320 	rsb	r3, r0, #32
 8013fce:	2b04      	cmp	r3, #4
 8013fd0:	dd6b      	ble.n	80140aa <_dtoa_r+0x8e2>
 8013fd2:	9b08      	ldr	r3, [sp, #32]
 8013fd4:	f1c0 001c 	rsb	r0, r0, #28
 8013fd8:	4403      	add	r3, r0
 8013fda:	4480      	add	r8, r0
 8013fdc:	4406      	add	r6, r0
 8013fde:	9308      	str	r3, [sp, #32]
 8013fe0:	f1b8 0f00 	cmp.w	r8, #0
 8013fe4:	dd05      	ble.n	8013ff2 <_dtoa_r+0x82a>
 8013fe6:	4649      	mov	r1, r9
 8013fe8:	4642      	mov	r2, r8
 8013fea:	4658      	mov	r0, fp
 8013fec:	f000 fcbe 	bl	801496c <__lshift>
 8013ff0:	4681      	mov	r9, r0
 8013ff2:	9b08      	ldr	r3, [sp, #32]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dd05      	ble.n	8014004 <_dtoa_r+0x83c>
 8013ff8:	4621      	mov	r1, r4
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	4658      	mov	r0, fp
 8013ffe:	f000 fcb5 	bl	801496c <__lshift>
 8014002:	4604      	mov	r4, r0
 8014004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014006:	2b00      	cmp	r3, #0
 8014008:	d059      	beq.n	80140be <_dtoa_r+0x8f6>
 801400a:	4621      	mov	r1, r4
 801400c:	4648      	mov	r0, r9
 801400e:	f000 fd19 	bl	8014a44 <__mcmp>
 8014012:	2800      	cmp	r0, #0
 8014014:	da53      	bge.n	80140be <_dtoa_r+0x8f6>
 8014016:	1e7b      	subs	r3, r7, #1
 8014018:	9304      	str	r3, [sp, #16]
 801401a:	4649      	mov	r1, r9
 801401c:	2300      	movs	r3, #0
 801401e:	220a      	movs	r2, #10
 8014020:	4658      	mov	r0, fp
 8014022:	f000 faf7 	bl	8014614 <__multadd>
 8014026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014028:	4681      	mov	r9, r0
 801402a:	2b00      	cmp	r3, #0
 801402c:	f000 8172 	beq.w	8014314 <_dtoa_r+0xb4c>
 8014030:	2300      	movs	r3, #0
 8014032:	4629      	mov	r1, r5
 8014034:	220a      	movs	r2, #10
 8014036:	4658      	mov	r0, fp
 8014038:	f000 faec 	bl	8014614 <__multadd>
 801403c:	9b00      	ldr	r3, [sp, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	4605      	mov	r5, r0
 8014042:	dc67      	bgt.n	8014114 <_dtoa_r+0x94c>
 8014044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014046:	2b02      	cmp	r3, #2
 8014048:	dc41      	bgt.n	80140ce <_dtoa_r+0x906>
 801404a:	e063      	b.n	8014114 <_dtoa_r+0x94c>
 801404c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801404e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014052:	e746      	b.n	8013ee2 <_dtoa_r+0x71a>
 8014054:	9b07      	ldr	r3, [sp, #28]
 8014056:	1e5c      	subs	r4, r3, #1
 8014058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801405a:	42a3      	cmp	r3, r4
 801405c:	bfbf      	itttt	lt
 801405e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014060:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8014062:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8014064:	1ae3      	sublt	r3, r4, r3
 8014066:	bfb4      	ite	lt
 8014068:	18d2      	addlt	r2, r2, r3
 801406a:	1b1c      	subge	r4, r3, r4
 801406c:	9b07      	ldr	r3, [sp, #28]
 801406e:	bfbc      	itt	lt
 8014070:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8014072:	2400      	movlt	r4, #0
 8014074:	2b00      	cmp	r3, #0
 8014076:	bfb5      	itete	lt
 8014078:	eba8 0603 	sublt.w	r6, r8, r3
 801407c:	9b07      	ldrge	r3, [sp, #28]
 801407e:	2300      	movlt	r3, #0
 8014080:	4646      	movge	r6, r8
 8014082:	e730      	b.n	8013ee6 <_dtoa_r+0x71e>
 8014084:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014086:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014088:	4646      	mov	r6, r8
 801408a:	e735      	b.n	8013ef8 <_dtoa_r+0x730>
 801408c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801408e:	e75c      	b.n	8013f4a <_dtoa_r+0x782>
 8014090:	2300      	movs	r3, #0
 8014092:	e788      	b.n	8013fa6 <_dtoa_r+0x7de>
 8014094:	3fe00000 	.word	0x3fe00000
 8014098:	40240000 	.word	0x40240000
 801409c:	40140000 	.word	0x40140000
 80140a0:	9b02      	ldr	r3, [sp, #8]
 80140a2:	e780      	b.n	8013fa6 <_dtoa_r+0x7de>
 80140a4:	2300      	movs	r3, #0
 80140a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80140a8:	e782      	b.n	8013fb0 <_dtoa_r+0x7e8>
 80140aa:	d099      	beq.n	8013fe0 <_dtoa_r+0x818>
 80140ac:	9a08      	ldr	r2, [sp, #32]
 80140ae:	331c      	adds	r3, #28
 80140b0:	441a      	add	r2, r3
 80140b2:	4498      	add	r8, r3
 80140b4:	441e      	add	r6, r3
 80140b6:	9208      	str	r2, [sp, #32]
 80140b8:	e792      	b.n	8013fe0 <_dtoa_r+0x818>
 80140ba:	4603      	mov	r3, r0
 80140bc:	e7f6      	b.n	80140ac <_dtoa_r+0x8e4>
 80140be:	9b07      	ldr	r3, [sp, #28]
 80140c0:	9704      	str	r7, [sp, #16]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	dc20      	bgt.n	8014108 <_dtoa_r+0x940>
 80140c6:	9300      	str	r3, [sp, #0]
 80140c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	dd1e      	ble.n	801410c <_dtoa_r+0x944>
 80140ce:	9b00      	ldr	r3, [sp, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f47f aec0 	bne.w	8013e56 <_dtoa_r+0x68e>
 80140d6:	4621      	mov	r1, r4
 80140d8:	2205      	movs	r2, #5
 80140da:	4658      	mov	r0, fp
 80140dc:	f000 fa9a 	bl	8014614 <__multadd>
 80140e0:	4601      	mov	r1, r0
 80140e2:	4604      	mov	r4, r0
 80140e4:	4648      	mov	r0, r9
 80140e6:	f000 fcad 	bl	8014a44 <__mcmp>
 80140ea:	2800      	cmp	r0, #0
 80140ec:	f77f aeb3 	ble.w	8013e56 <_dtoa_r+0x68e>
 80140f0:	4656      	mov	r6, sl
 80140f2:	2331      	movs	r3, #49	@ 0x31
 80140f4:	f806 3b01 	strb.w	r3, [r6], #1
 80140f8:	9b04      	ldr	r3, [sp, #16]
 80140fa:	3301      	adds	r3, #1
 80140fc:	9304      	str	r3, [sp, #16]
 80140fe:	e6ae      	b.n	8013e5e <_dtoa_r+0x696>
 8014100:	9c07      	ldr	r4, [sp, #28]
 8014102:	9704      	str	r7, [sp, #16]
 8014104:	4625      	mov	r5, r4
 8014106:	e7f3      	b.n	80140f0 <_dtoa_r+0x928>
 8014108:	9b07      	ldr	r3, [sp, #28]
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801410e:	2b00      	cmp	r3, #0
 8014110:	f000 8104 	beq.w	801431c <_dtoa_r+0xb54>
 8014114:	2e00      	cmp	r6, #0
 8014116:	dd05      	ble.n	8014124 <_dtoa_r+0x95c>
 8014118:	4629      	mov	r1, r5
 801411a:	4632      	mov	r2, r6
 801411c:	4658      	mov	r0, fp
 801411e:	f000 fc25 	bl	801496c <__lshift>
 8014122:	4605      	mov	r5, r0
 8014124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014126:	2b00      	cmp	r3, #0
 8014128:	d05a      	beq.n	80141e0 <_dtoa_r+0xa18>
 801412a:	6869      	ldr	r1, [r5, #4]
 801412c:	4658      	mov	r0, fp
 801412e:	f000 fa0f 	bl	8014550 <_Balloc>
 8014132:	4606      	mov	r6, r0
 8014134:	b928      	cbnz	r0, 8014142 <_dtoa_r+0x97a>
 8014136:	4b84      	ldr	r3, [pc, #528]	@ (8014348 <_dtoa_r+0xb80>)
 8014138:	4602      	mov	r2, r0
 801413a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801413e:	f7ff bb5a 	b.w	80137f6 <_dtoa_r+0x2e>
 8014142:	692a      	ldr	r2, [r5, #16]
 8014144:	3202      	adds	r2, #2
 8014146:	0092      	lsls	r2, r2, #2
 8014148:	f105 010c 	add.w	r1, r5, #12
 801414c:	300c      	adds	r0, #12
 801414e:	f7ff fa86 	bl	801365e <memcpy>
 8014152:	2201      	movs	r2, #1
 8014154:	4631      	mov	r1, r6
 8014156:	4658      	mov	r0, fp
 8014158:	f000 fc08 	bl	801496c <__lshift>
 801415c:	f10a 0301 	add.w	r3, sl, #1
 8014160:	9307      	str	r3, [sp, #28]
 8014162:	9b00      	ldr	r3, [sp, #0]
 8014164:	4453      	add	r3, sl
 8014166:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014168:	9b02      	ldr	r3, [sp, #8]
 801416a:	f003 0301 	and.w	r3, r3, #1
 801416e:	462f      	mov	r7, r5
 8014170:	930a      	str	r3, [sp, #40]	@ 0x28
 8014172:	4605      	mov	r5, r0
 8014174:	9b07      	ldr	r3, [sp, #28]
 8014176:	4621      	mov	r1, r4
 8014178:	3b01      	subs	r3, #1
 801417a:	4648      	mov	r0, r9
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	f7ff fa9b 	bl	80136b8 <quorem>
 8014182:	4639      	mov	r1, r7
 8014184:	9002      	str	r0, [sp, #8]
 8014186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801418a:	4648      	mov	r0, r9
 801418c:	f000 fc5a 	bl	8014a44 <__mcmp>
 8014190:	462a      	mov	r2, r5
 8014192:	9008      	str	r0, [sp, #32]
 8014194:	4621      	mov	r1, r4
 8014196:	4658      	mov	r0, fp
 8014198:	f000 fc70 	bl	8014a7c <__mdiff>
 801419c:	68c2      	ldr	r2, [r0, #12]
 801419e:	4606      	mov	r6, r0
 80141a0:	bb02      	cbnz	r2, 80141e4 <_dtoa_r+0xa1c>
 80141a2:	4601      	mov	r1, r0
 80141a4:	4648      	mov	r0, r9
 80141a6:	f000 fc4d 	bl	8014a44 <__mcmp>
 80141aa:	4602      	mov	r2, r0
 80141ac:	4631      	mov	r1, r6
 80141ae:	4658      	mov	r0, fp
 80141b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80141b2:	f000 fa0d 	bl	80145d0 <_Bfree>
 80141b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141ba:	9e07      	ldr	r6, [sp, #28]
 80141bc:	ea43 0102 	orr.w	r1, r3, r2
 80141c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141c2:	4319      	orrs	r1, r3
 80141c4:	d110      	bne.n	80141e8 <_dtoa_r+0xa20>
 80141c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80141ca:	d029      	beq.n	8014220 <_dtoa_r+0xa58>
 80141cc:	9b08      	ldr	r3, [sp, #32]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	dd02      	ble.n	80141d8 <_dtoa_r+0xa10>
 80141d2:	9b02      	ldr	r3, [sp, #8]
 80141d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80141d8:	9b00      	ldr	r3, [sp, #0]
 80141da:	f883 8000 	strb.w	r8, [r3]
 80141de:	e63f      	b.n	8013e60 <_dtoa_r+0x698>
 80141e0:	4628      	mov	r0, r5
 80141e2:	e7bb      	b.n	801415c <_dtoa_r+0x994>
 80141e4:	2201      	movs	r2, #1
 80141e6:	e7e1      	b.n	80141ac <_dtoa_r+0x9e4>
 80141e8:	9b08      	ldr	r3, [sp, #32]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	db04      	blt.n	80141f8 <_dtoa_r+0xa30>
 80141ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80141f0:	430b      	orrs	r3, r1
 80141f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80141f4:	430b      	orrs	r3, r1
 80141f6:	d120      	bne.n	801423a <_dtoa_r+0xa72>
 80141f8:	2a00      	cmp	r2, #0
 80141fa:	dded      	ble.n	80141d8 <_dtoa_r+0xa10>
 80141fc:	4649      	mov	r1, r9
 80141fe:	2201      	movs	r2, #1
 8014200:	4658      	mov	r0, fp
 8014202:	f000 fbb3 	bl	801496c <__lshift>
 8014206:	4621      	mov	r1, r4
 8014208:	4681      	mov	r9, r0
 801420a:	f000 fc1b 	bl	8014a44 <__mcmp>
 801420e:	2800      	cmp	r0, #0
 8014210:	dc03      	bgt.n	801421a <_dtoa_r+0xa52>
 8014212:	d1e1      	bne.n	80141d8 <_dtoa_r+0xa10>
 8014214:	f018 0f01 	tst.w	r8, #1
 8014218:	d0de      	beq.n	80141d8 <_dtoa_r+0xa10>
 801421a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801421e:	d1d8      	bne.n	80141d2 <_dtoa_r+0xa0a>
 8014220:	9a00      	ldr	r2, [sp, #0]
 8014222:	2339      	movs	r3, #57	@ 0x39
 8014224:	7013      	strb	r3, [r2, #0]
 8014226:	4633      	mov	r3, r6
 8014228:	461e      	mov	r6, r3
 801422a:	3b01      	subs	r3, #1
 801422c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014230:	2a39      	cmp	r2, #57	@ 0x39
 8014232:	d052      	beq.n	80142da <_dtoa_r+0xb12>
 8014234:	3201      	adds	r2, #1
 8014236:	701a      	strb	r2, [r3, #0]
 8014238:	e612      	b.n	8013e60 <_dtoa_r+0x698>
 801423a:	2a00      	cmp	r2, #0
 801423c:	dd07      	ble.n	801424e <_dtoa_r+0xa86>
 801423e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014242:	d0ed      	beq.n	8014220 <_dtoa_r+0xa58>
 8014244:	9a00      	ldr	r2, [sp, #0]
 8014246:	f108 0301 	add.w	r3, r8, #1
 801424a:	7013      	strb	r3, [r2, #0]
 801424c:	e608      	b.n	8013e60 <_dtoa_r+0x698>
 801424e:	9b07      	ldr	r3, [sp, #28]
 8014250:	9a07      	ldr	r2, [sp, #28]
 8014252:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014258:	4293      	cmp	r3, r2
 801425a:	d028      	beq.n	80142ae <_dtoa_r+0xae6>
 801425c:	4649      	mov	r1, r9
 801425e:	2300      	movs	r3, #0
 8014260:	220a      	movs	r2, #10
 8014262:	4658      	mov	r0, fp
 8014264:	f000 f9d6 	bl	8014614 <__multadd>
 8014268:	42af      	cmp	r7, r5
 801426a:	4681      	mov	r9, r0
 801426c:	f04f 0300 	mov.w	r3, #0
 8014270:	f04f 020a 	mov.w	r2, #10
 8014274:	4639      	mov	r1, r7
 8014276:	4658      	mov	r0, fp
 8014278:	d107      	bne.n	801428a <_dtoa_r+0xac2>
 801427a:	f000 f9cb 	bl	8014614 <__multadd>
 801427e:	4607      	mov	r7, r0
 8014280:	4605      	mov	r5, r0
 8014282:	9b07      	ldr	r3, [sp, #28]
 8014284:	3301      	adds	r3, #1
 8014286:	9307      	str	r3, [sp, #28]
 8014288:	e774      	b.n	8014174 <_dtoa_r+0x9ac>
 801428a:	f000 f9c3 	bl	8014614 <__multadd>
 801428e:	4629      	mov	r1, r5
 8014290:	4607      	mov	r7, r0
 8014292:	2300      	movs	r3, #0
 8014294:	220a      	movs	r2, #10
 8014296:	4658      	mov	r0, fp
 8014298:	f000 f9bc 	bl	8014614 <__multadd>
 801429c:	4605      	mov	r5, r0
 801429e:	e7f0      	b.n	8014282 <_dtoa_r+0xaba>
 80142a0:	9b00      	ldr	r3, [sp, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	bfcc      	ite	gt
 80142a6:	461e      	movgt	r6, r3
 80142a8:	2601      	movle	r6, #1
 80142aa:	4456      	add	r6, sl
 80142ac:	2700      	movs	r7, #0
 80142ae:	4649      	mov	r1, r9
 80142b0:	2201      	movs	r2, #1
 80142b2:	4658      	mov	r0, fp
 80142b4:	f000 fb5a 	bl	801496c <__lshift>
 80142b8:	4621      	mov	r1, r4
 80142ba:	4681      	mov	r9, r0
 80142bc:	f000 fbc2 	bl	8014a44 <__mcmp>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	dcb0      	bgt.n	8014226 <_dtoa_r+0xa5e>
 80142c4:	d102      	bne.n	80142cc <_dtoa_r+0xb04>
 80142c6:	f018 0f01 	tst.w	r8, #1
 80142ca:	d1ac      	bne.n	8014226 <_dtoa_r+0xa5e>
 80142cc:	4633      	mov	r3, r6
 80142ce:	461e      	mov	r6, r3
 80142d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142d4:	2a30      	cmp	r2, #48	@ 0x30
 80142d6:	d0fa      	beq.n	80142ce <_dtoa_r+0xb06>
 80142d8:	e5c2      	b.n	8013e60 <_dtoa_r+0x698>
 80142da:	459a      	cmp	sl, r3
 80142dc:	d1a4      	bne.n	8014228 <_dtoa_r+0xa60>
 80142de:	9b04      	ldr	r3, [sp, #16]
 80142e0:	3301      	adds	r3, #1
 80142e2:	9304      	str	r3, [sp, #16]
 80142e4:	2331      	movs	r3, #49	@ 0x31
 80142e6:	f88a 3000 	strb.w	r3, [sl]
 80142ea:	e5b9      	b.n	8013e60 <_dtoa_r+0x698>
 80142ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80142ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801434c <_dtoa_r+0xb84>
 80142f2:	b11b      	cbz	r3, 80142fc <_dtoa_r+0xb34>
 80142f4:	f10a 0308 	add.w	r3, sl, #8
 80142f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80142fa:	6013      	str	r3, [r2, #0]
 80142fc:	4650      	mov	r0, sl
 80142fe:	b019      	add	sp, #100	@ 0x64
 8014300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014306:	2b01      	cmp	r3, #1
 8014308:	f77f ae37 	ble.w	8013f7a <_dtoa_r+0x7b2>
 801430c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801430e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014310:	2001      	movs	r0, #1
 8014312:	e655      	b.n	8013fc0 <_dtoa_r+0x7f8>
 8014314:	9b00      	ldr	r3, [sp, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	f77f aed6 	ble.w	80140c8 <_dtoa_r+0x900>
 801431c:	4656      	mov	r6, sl
 801431e:	4621      	mov	r1, r4
 8014320:	4648      	mov	r0, r9
 8014322:	f7ff f9c9 	bl	80136b8 <quorem>
 8014326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801432a:	f806 8b01 	strb.w	r8, [r6], #1
 801432e:	9b00      	ldr	r3, [sp, #0]
 8014330:	eba6 020a 	sub.w	r2, r6, sl
 8014334:	4293      	cmp	r3, r2
 8014336:	ddb3      	ble.n	80142a0 <_dtoa_r+0xad8>
 8014338:	4649      	mov	r1, r9
 801433a:	2300      	movs	r3, #0
 801433c:	220a      	movs	r2, #10
 801433e:	4658      	mov	r0, fp
 8014340:	f000 f968 	bl	8014614 <__multadd>
 8014344:	4681      	mov	r9, r0
 8014346:	e7ea      	b.n	801431e <_dtoa_r+0xb56>
 8014348:	08016a71 	.word	0x08016a71
 801434c:	080169f5 	.word	0x080169f5

08014350 <_free_r>:
 8014350:	b538      	push	{r3, r4, r5, lr}
 8014352:	4605      	mov	r5, r0
 8014354:	2900      	cmp	r1, #0
 8014356:	d041      	beq.n	80143dc <_free_r+0x8c>
 8014358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801435c:	1f0c      	subs	r4, r1, #4
 801435e:	2b00      	cmp	r3, #0
 8014360:	bfb8      	it	lt
 8014362:	18e4      	addlt	r4, r4, r3
 8014364:	f000 f8e8 	bl	8014538 <__malloc_lock>
 8014368:	4a1d      	ldr	r2, [pc, #116]	@ (80143e0 <_free_r+0x90>)
 801436a:	6813      	ldr	r3, [r2, #0]
 801436c:	b933      	cbnz	r3, 801437c <_free_r+0x2c>
 801436e:	6063      	str	r3, [r4, #4]
 8014370:	6014      	str	r4, [r2, #0]
 8014372:	4628      	mov	r0, r5
 8014374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014378:	f000 b8e4 	b.w	8014544 <__malloc_unlock>
 801437c:	42a3      	cmp	r3, r4
 801437e:	d908      	bls.n	8014392 <_free_r+0x42>
 8014380:	6820      	ldr	r0, [r4, #0]
 8014382:	1821      	adds	r1, r4, r0
 8014384:	428b      	cmp	r3, r1
 8014386:	bf01      	itttt	eq
 8014388:	6819      	ldreq	r1, [r3, #0]
 801438a:	685b      	ldreq	r3, [r3, #4]
 801438c:	1809      	addeq	r1, r1, r0
 801438e:	6021      	streq	r1, [r4, #0]
 8014390:	e7ed      	b.n	801436e <_free_r+0x1e>
 8014392:	461a      	mov	r2, r3
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	b10b      	cbz	r3, 801439c <_free_r+0x4c>
 8014398:	42a3      	cmp	r3, r4
 801439a:	d9fa      	bls.n	8014392 <_free_r+0x42>
 801439c:	6811      	ldr	r1, [r2, #0]
 801439e:	1850      	adds	r0, r2, r1
 80143a0:	42a0      	cmp	r0, r4
 80143a2:	d10b      	bne.n	80143bc <_free_r+0x6c>
 80143a4:	6820      	ldr	r0, [r4, #0]
 80143a6:	4401      	add	r1, r0
 80143a8:	1850      	adds	r0, r2, r1
 80143aa:	4283      	cmp	r3, r0
 80143ac:	6011      	str	r1, [r2, #0]
 80143ae:	d1e0      	bne.n	8014372 <_free_r+0x22>
 80143b0:	6818      	ldr	r0, [r3, #0]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	6053      	str	r3, [r2, #4]
 80143b6:	4408      	add	r0, r1
 80143b8:	6010      	str	r0, [r2, #0]
 80143ba:	e7da      	b.n	8014372 <_free_r+0x22>
 80143bc:	d902      	bls.n	80143c4 <_free_r+0x74>
 80143be:	230c      	movs	r3, #12
 80143c0:	602b      	str	r3, [r5, #0]
 80143c2:	e7d6      	b.n	8014372 <_free_r+0x22>
 80143c4:	6820      	ldr	r0, [r4, #0]
 80143c6:	1821      	adds	r1, r4, r0
 80143c8:	428b      	cmp	r3, r1
 80143ca:	bf04      	itt	eq
 80143cc:	6819      	ldreq	r1, [r3, #0]
 80143ce:	685b      	ldreq	r3, [r3, #4]
 80143d0:	6063      	str	r3, [r4, #4]
 80143d2:	bf04      	itt	eq
 80143d4:	1809      	addeq	r1, r1, r0
 80143d6:	6021      	streq	r1, [r4, #0]
 80143d8:	6054      	str	r4, [r2, #4]
 80143da:	e7ca      	b.n	8014372 <_free_r+0x22>
 80143dc:	bd38      	pop	{r3, r4, r5, pc}
 80143de:	bf00      	nop
 80143e0:	20014570 	.word	0x20014570

080143e4 <malloc>:
 80143e4:	4b02      	ldr	r3, [pc, #8]	@ (80143f0 <malloc+0xc>)
 80143e6:	4601      	mov	r1, r0
 80143e8:	6818      	ldr	r0, [r3, #0]
 80143ea:	f000 b825 	b.w	8014438 <_malloc_r>
 80143ee:	bf00      	nop
 80143f0:	2000030c 	.word	0x2000030c

080143f4 <sbrk_aligned>:
 80143f4:	b570      	push	{r4, r5, r6, lr}
 80143f6:	4e0f      	ldr	r6, [pc, #60]	@ (8014434 <sbrk_aligned+0x40>)
 80143f8:	460c      	mov	r4, r1
 80143fa:	6831      	ldr	r1, [r6, #0]
 80143fc:	4605      	mov	r5, r0
 80143fe:	b911      	cbnz	r1, 8014406 <sbrk_aligned+0x12>
 8014400:	f000 feec 	bl	80151dc <_sbrk_r>
 8014404:	6030      	str	r0, [r6, #0]
 8014406:	4621      	mov	r1, r4
 8014408:	4628      	mov	r0, r5
 801440a:	f000 fee7 	bl	80151dc <_sbrk_r>
 801440e:	1c43      	adds	r3, r0, #1
 8014410:	d103      	bne.n	801441a <sbrk_aligned+0x26>
 8014412:	f04f 34ff 	mov.w	r4, #4294967295
 8014416:	4620      	mov	r0, r4
 8014418:	bd70      	pop	{r4, r5, r6, pc}
 801441a:	1cc4      	adds	r4, r0, #3
 801441c:	f024 0403 	bic.w	r4, r4, #3
 8014420:	42a0      	cmp	r0, r4
 8014422:	d0f8      	beq.n	8014416 <sbrk_aligned+0x22>
 8014424:	1a21      	subs	r1, r4, r0
 8014426:	4628      	mov	r0, r5
 8014428:	f000 fed8 	bl	80151dc <_sbrk_r>
 801442c:	3001      	adds	r0, #1
 801442e:	d1f2      	bne.n	8014416 <sbrk_aligned+0x22>
 8014430:	e7ef      	b.n	8014412 <sbrk_aligned+0x1e>
 8014432:	bf00      	nop
 8014434:	2001456c 	.word	0x2001456c

08014438 <_malloc_r>:
 8014438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801443c:	1ccd      	adds	r5, r1, #3
 801443e:	f025 0503 	bic.w	r5, r5, #3
 8014442:	3508      	adds	r5, #8
 8014444:	2d0c      	cmp	r5, #12
 8014446:	bf38      	it	cc
 8014448:	250c      	movcc	r5, #12
 801444a:	2d00      	cmp	r5, #0
 801444c:	4606      	mov	r6, r0
 801444e:	db01      	blt.n	8014454 <_malloc_r+0x1c>
 8014450:	42a9      	cmp	r1, r5
 8014452:	d904      	bls.n	801445e <_malloc_r+0x26>
 8014454:	230c      	movs	r3, #12
 8014456:	6033      	str	r3, [r6, #0]
 8014458:	2000      	movs	r0, #0
 801445a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801445e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014534 <_malloc_r+0xfc>
 8014462:	f000 f869 	bl	8014538 <__malloc_lock>
 8014466:	f8d8 3000 	ldr.w	r3, [r8]
 801446a:	461c      	mov	r4, r3
 801446c:	bb44      	cbnz	r4, 80144c0 <_malloc_r+0x88>
 801446e:	4629      	mov	r1, r5
 8014470:	4630      	mov	r0, r6
 8014472:	f7ff ffbf 	bl	80143f4 <sbrk_aligned>
 8014476:	1c43      	adds	r3, r0, #1
 8014478:	4604      	mov	r4, r0
 801447a:	d158      	bne.n	801452e <_malloc_r+0xf6>
 801447c:	f8d8 4000 	ldr.w	r4, [r8]
 8014480:	4627      	mov	r7, r4
 8014482:	2f00      	cmp	r7, #0
 8014484:	d143      	bne.n	801450e <_malloc_r+0xd6>
 8014486:	2c00      	cmp	r4, #0
 8014488:	d04b      	beq.n	8014522 <_malloc_r+0xea>
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	4639      	mov	r1, r7
 801448e:	4630      	mov	r0, r6
 8014490:	eb04 0903 	add.w	r9, r4, r3
 8014494:	f000 fea2 	bl	80151dc <_sbrk_r>
 8014498:	4581      	cmp	r9, r0
 801449a:	d142      	bne.n	8014522 <_malloc_r+0xea>
 801449c:	6821      	ldr	r1, [r4, #0]
 801449e:	1a6d      	subs	r5, r5, r1
 80144a0:	4629      	mov	r1, r5
 80144a2:	4630      	mov	r0, r6
 80144a4:	f7ff ffa6 	bl	80143f4 <sbrk_aligned>
 80144a8:	3001      	adds	r0, #1
 80144aa:	d03a      	beq.n	8014522 <_malloc_r+0xea>
 80144ac:	6823      	ldr	r3, [r4, #0]
 80144ae:	442b      	add	r3, r5
 80144b0:	6023      	str	r3, [r4, #0]
 80144b2:	f8d8 3000 	ldr.w	r3, [r8]
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	bb62      	cbnz	r2, 8014514 <_malloc_r+0xdc>
 80144ba:	f8c8 7000 	str.w	r7, [r8]
 80144be:	e00f      	b.n	80144e0 <_malloc_r+0xa8>
 80144c0:	6822      	ldr	r2, [r4, #0]
 80144c2:	1b52      	subs	r2, r2, r5
 80144c4:	d420      	bmi.n	8014508 <_malloc_r+0xd0>
 80144c6:	2a0b      	cmp	r2, #11
 80144c8:	d917      	bls.n	80144fa <_malloc_r+0xc2>
 80144ca:	1961      	adds	r1, r4, r5
 80144cc:	42a3      	cmp	r3, r4
 80144ce:	6025      	str	r5, [r4, #0]
 80144d0:	bf18      	it	ne
 80144d2:	6059      	strne	r1, [r3, #4]
 80144d4:	6863      	ldr	r3, [r4, #4]
 80144d6:	bf08      	it	eq
 80144d8:	f8c8 1000 	streq.w	r1, [r8]
 80144dc:	5162      	str	r2, [r4, r5]
 80144de:	604b      	str	r3, [r1, #4]
 80144e0:	4630      	mov	r0, r6
 80144e2:	f000 f82f 	bl	8014544 <__malloc_unlock>
 80144e6:	f104 000b 	add.w	r0, r4, #11
 80144ea:	1d23      	adds	r3, r4, #4
 80144ec:	f020 0007 	bic.w	r0, r0, #7
 80144f0:	1ac2      	subs	r2, r0, r3
 80144f2:	bf1c      	itt	ne
 80144f4:	1a1b      	subne	r3, r3, r0
 80144f6:	50a3      	strne	r3, [r4, r2]
 80144f8:	e7af      	b.n	801445a <_malloc_r+0x22>
 80144fa:	6862      	ldr	r2, [r4, #4]
 80144fc:	42a3      	cmp	r3, r4
 80144fe:	bf0c      	ite	eq
 8014500:	f8c8 2000 	streq.w	r2, [r8]
 8014504:	605a      	strne	r2, [r3, #4]
 8014506:	e7eb      	b.n	80144e0 <_malloc_r+0xa8>
 8014508:	4623      	mov	r3, r4
 801450a:	6864      	ldr	r4, [r4, #4]
 801450c:	e7ae      	b.n	801446c <_malloc_r+0x34>
 801450e:	463c      	mov	r4, r7
 8014510:	687f      	ldr	r7, [r7, #4]
 8014512:	e7b6      	b.n	8014482 <_malloc_r+0x4a>
 8014514:	461a      	mov	r2, r3
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	42a3      	cmp	r3, r4
 801451a:	d1fb      	bne.n	8014514 <_malloc_r+0xdc>
 801451c:	2300      	movs	r3, #0
 801451e:	6053      	str	r3, [r2, #4]
 8014520:	e7de      	b.n	80144e0 <_malloc_r+0xa8>
 8014522:	230c      	movs	r3, #12
 8014524:	6033      	str	r3, [r6, #0]
 8014526:	4630      	mov	r0, r6
 8014528:	f000 f80c 	bl	8014544 <__malloc_unlock>
 801452c:	e794      	b.n	8014458 <_malloc_r+0x20>
 801452e:	6005      	str	r5, [r0, #0]
 8014530:	e7d6      	b.n	80144e0 <_malloc_r+0xa8>
 8014532:	bf00      	nop
 8014534:	20014570 	.word	0x20014570

08014538 <__malloc_lock>:
 8014538:	4801      	ldr	r0, [pc, #4]	@ (8014540 <__malloc_lock+0x8>)
 801453a:	f7ff b886 	b.w	801364a <__retarget_lock_acquire_recursive>
 801453e:	bf00      	nop
 8014540:	20014568 	.word	0x20014568

08014544 <__malloc_unlock>:
 8014544:	4801      	ldr	r0, [pc, #4]	@ (801454c <__malloc_unlock+0x8>)
 8014546:	f7ff b881 	b.w	801364c <__retarget_lock_release_recursive>
 801454a:	bf00      	nop
 801454c:	20014568 	.word	0x20014568

08014550 <_Balloc>:
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	69c6      	ldr	r6, [r0, #28]
 8014554:	4604      	mov	r4, r0
 8014556:	460d      	mov	r5, r1
 8014558:	b976      	cbnz	r6, 8014578 <_Balloc+0x28>
 801455a:	2010      	movs	r0, #16
 801455c:	f7ff ff42 	bl	80143e4 <malloc>
 8014560:	4602      	mov	r2, r0
 8014562:	61e0      	str	r0, [r4, #28]
 8014564:	b920      	cbnz	r0, 8014570 <_Balloc+0x20>
 8014566:	4b18      	ldr	r3, [pc, #96]	@ (80145c8 <_Balloc+0x78>)
 8014568:	4818      	ldr	r0, [pc, #96]	@ (80145cc <_Balloc+0x7c>)
 801456a:	216b      	movs	r1, #107	@ 0x6b
 801456c:	f7ff f886 	bl	801367c <__assert_func>
 8014570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014574:	6006      	str	r6, [r0, #0]
 8014576:	60c6      	str	r6, [r0, #12]
 8014578:	69e6      	ldr	r6, [r4, #28]
 801457a:	68f3      	ldr	r3, [r6, #12]
 801457c:	b183      	cbz	r3, 80145a0 <_Balloc+0x50>
 801457e:	69e3      	ldr	r3, [r4, #28]
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014586:	b9b8      	cbnz	r0, 80145b8 <_Balloc+0x68>
 8014588:	2101      	movs	r1, #1
 801458a:	fa01 f605 	lsl.w	r6, r1, r5
 801458e:	1d72      	adds	r2, r6, #5
 8014590:	0092      	lsls	r2, r2, #2
 8014592:	4620      	mov	r0, r4
 8014594:	f000 fe39 	bl	801520a <_calloc_r>
 8014598:	b160      	cbz	r0, 80145b4 <_Balloc+0x64>
 801459a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801459e:	e00e      	b.n	80145be <_Balloc+0x6e>
 80145a0:	2221      	movs	r2, #33	@ 0x21
 80145a2:	2104      	movs	r1, #4
 80145a4:	4620      	mov	r0, r4
 80145a6:	f000 fe30 	bl	801520a <_calloc_r>
 80145aa:	69e3      	ldr	r3, [r4, #28]
 80145ac:	60f0      	str	r0, [r6, #12]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d1e4      	bne.n	801457e <_Balloc+0x2e>
 80145b4:	2000      	movs	r0, #0
 80145b6:	bd70      	pop	{r4, r5, r6, pc}
 80145b8:	6802      	ldr	r2, [r0, #0]
 80145ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145be:	2300      	movs	r3, #0
 80145c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145c4:	e7f7      	b.n	80145b6 <_Balloc+0x66>
 80145c6:	bf00      	nop
 80145c8:	08016a02 	.word	0x08016a02
 80145cc:	08016a82 	.word	0x08016a82

080145d0 <_Bfree>:
 80145d0:	b570      	push	{r4, r5, r6, lr}
 80145d2:	69c6      	ldr	r6, [r0, #28]
 80145d4:	4605      	mov	r5, r0
 80145d6:	460c      	mov	r4, r1
 80145d8:	b976      	cbnz	r6, 80145f8 <_Bfree+0x28>
 80145da:	2010      	movs	r0, #16
 80145dc:	f7ff ff02 	bl	80143e4 <malloc>
 80145e0:	4602      	mov	r2, r0
 80145e2:	61e8      	str	r0, [r5, #28]
 80145e4:	b920      	cbnz	r0, 80145f0 <_Bfree+0x20>
 80145e6:	4b09      	ldr	r3, [pc, #36]	@ (801460c <_Bfree+0x3c>)
 80145e8:	4809      	ldr	r0, [pc, #36]	@ (8014610 <_Bfree+0x40>)
 80145ea:	218f      	movs	r1, #143	@ 0x8f
 80145ec:	f7ff f846 	bl	801367c <__assert_func>
 80145f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145f4:	6006      	str	r6, [r0, #0]
 80145f6:	60c6      	str	r6, [r0, #12]
 80145f8:	b13c      	cbz	r4, 801460a <_Bfree+0x3a>
 80145fa:	69eb      	ldr	r3, [r5, #28]
 80145fc:	6862      	ldr	r2, [r4, #4]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014604:	6021      	str	r1, [r4, #0]
 8014606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801460a:	bd70      	pop	{r4, r5, r6, pc}
 801460c:	08016a02 	.word	0x08016a02
 8014610:	08016a82 	.word	0x08016a82

08014614 <__multadd>:
 8014614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014618:	690d      	ldr	r5, [r1, #16]
 801461a:	4607      	mov	r7, r0
 801461c:	460c      	mov	r4, r1
 801461e:	461e      	mov	r6, r3
 8014620:	f101 0c14 	add.w	ip, r1, #20
 8014624:	2000      	movs	r0, #0
 8014626:	f8dc 3000 	ldr.w	r3, [ip]
 801462a:	b299      	uxth	r1, r3
 801462c:	fb02 6101 	mla	r1, r2, r1, r6
 8014630:	0c1e      	lsrs	r6, r3, #16
 8014632:	0c0b      	lsrs	r3, r1, #16
 8014634:	fb02 3306 	mla	r3, r2, r6, r3
 8014638:	b289      	uxth	r1, r1
 801463a:	3001      	adds	r0, #1
 801463c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014640:	4285      	cmp	r5, r0
 8014642:	f84c 1b04 	str.w	r1, [ip], #4
 8014646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801464a:	dcec      	bgt.n	8014626 <__multadd+0x12>
 801464c:	b30e      	cbz	r6, 8014692 <__multadd+0x7e>
 801464e:	68a3      	ldr	r3, [r4, #8]
 8014650:	42ab      	cmp	r3, r5
 8014652:	dc19      	bgt.n	8014688 <__multadd+0x74>
 8014654:	6861      	ldr	r1, [r4, #4]
 8014656:	4638      	mov	r0, r7
 8014658:	3101      	adds	r1, #1
 801465a:	f7ff ff79 	bl	8014550 <_Balloc>
 801465e:	4680      	mov	r8, r0
 8014660:	b928      	cbnz	r0, 801466e <__multadd+0x5a>
 8014662:	4602      	mov	r2, r0
 8014664:	4b0c      	ldr	r3, [pc, #48]	@ (8014698 <__multadd+0x84>)
 8014666:	480d      	ldr	r0, [pc, #52]	@ (801469c <__multadd+0x88>)
 8014668:	21ba      	movs	r1, #186	@ 0xba
 801466a:	f7ff f807 	bl	801367c <__assert_func>
 801466e:	6922      	ldr	r2, [r4, #16]
 8014670:	3202      	adds	r2, #2
 8014672:	f104 010c 	add.w	r1, r4, #12
 8014676:	0092      	lsls	r2, r2, #2
 8014678:	300c      	adds	r0, #12
 801467a:	f7fe fff0 	bl	801365e <memcpy>
 801467e:	4621      	mov	r1, r4
 8014680:	4638      	mov	r0, r7
 8014682:	f7ff ffa5 	bl	80145d0 <_Bfree>
 8014686:	4644      	mov	r4, r8
 8014688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801468c:	3501      	adds	r5, #1
 801468e:	615e      	str	r6, [r3, #20]
 8014690:	6125      	str	r5, [r4, #16]
 8014692:	4620      	mov	r0, r4
 8014694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014698:	08016a71 	.word	0x08016a71
 801469c:	08016a82 	.word	0x08016a82

080146a0 <__hi0bits>:
 80146a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80146a4:	4603      	mov	r3, r0
 80146a6:	bf36      	itet	cc
 80146a8:	0403      	lslcc	r3, r0, #16
 80146aa:	2000      	movcs	r0, #0
 80146ac:	2010      	movcc	r0, #16
 80146ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80146b2:	bf3c      	itt	cc
 80146b4:	021b      	lslcc	r3, r3, #8
 80146b6:	3008      	addcc	r0, #8
 80146b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80146bc:	bf3c      	itt	cc
 80146be:	011b      	lslcc	r3, r3, #4
 80146c0:	3004      	addcc	r0, #4
 80146c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80146c6:	bf3c      	itt	cc
 80146c8:	009b      	lslcc	r3, r3, #2
 80146ca:	3002      	addcc	r0, #2
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	db05      	blt.n	80146dc <__hi0bits+0x3c>
 80146d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80146d4:	f100 0001 	add.w	r0, r0, #1
 80146d8:	bf08      	it	eq
 80146da:	2020      	moveq	r0, #32
 80146dc:	4770      	bx	lr

080146de <__lo0bits>:
 80146de:	6803      	ldr	r3, [r0, #0]
 80146e0:	4602      	mov	r2, r0
 80146e2:	f013 0007 	ands.w	r0, r3, #7
 80146e6:	d00b      	beq.n	8014700 <__lo0bits+0x22>
 80146e8:	07d9      	lsls	r1, r3, #31
 80146ea:	d421      	bmi.n	8014730 <__lo0bits+0x52>
 80146ec:	0798      	lsls	r0, r3, #30
 80146ee:	bf49      	itett	mi
 80146f0:	085b      	lsrmi	r3, r3, #1
 80146f2:	089b      	lsrpl	r3, r3, #2
 80146f4:	2001      	movmi	r0, #1
 80146f6:	6013      	strmi	r3, [r2, #0]
 80146f8:	bf5c      	itt	pl
 80146fa:	6013      	strpl	r3, [r2, #0]
 80146fc:	2002      	movpl	r0, #2
 80146fe:	4770      	bx	lr
 8014700:	b299      	uxth	r1, r3
 8014702:	b909      	cbnz	r1, 8014708 <__lo0bits+0x2a>
 8014704:	0c1b      	lsrs	r3, r3, #16
 8014706:	2010      	movs	r0, #16
 8014708:	b2d9      	uxtb	r1, r3
 801470a:	b909      	cbnz	r1, 8014710 <__lo0bits+0x32>
 801470c:	3008      	adds	r0, #8
 801470e:	0a1b      	lsrs	r3, r3, #8
 8014710:	0719      	lsls	r1, r3, #28
 8014712:	bf04      	itt	eq
 8014714:	091b      	lsreq	r3, r3, #4
 8014716:	3004      	addeq	r0, #4
 8014718:	0799      	lsls	r1, r3, #30
 801471a:	bf04      	itt	eq
 801471c:	089b      	lsreq	r3, r3, #2
 801471e:	3002      	addeq	r0, #2
 8014720:	07d9      	lsls	r1, r3, #31
 8014722:	d403      	bmi.n	801472c <__lo0bits+0x4e>
 8014724:	085b      	lsrs	r3, r3, #1
 8014726:	f100 0001 	add.w	r0, r0, #1
 801472a:	d003      	beq.n	8014734 <__lo0bits+0x56>
 801472c:	6013      	str	r3, [r2, #0]
 801472e:	4770      	bx	lr
 8014730:	2000      	movs	r0, #0
 8014732:	4770      	bx	lr
 8014734:	2020      	movs	r0, #32
 8014736:	4770      	bx	lr

08014738 <__i2b>:
 8014738:	b510      	push	{r4, lr}
 801473a:	460c      	mov	r4, r1
 801473c:	2101      	movs	r1, #1
 801473e:	f7ff ff07 	bl	8014550 <_Balloc>
 8014742:	4602      	mov	r2, r0
 8014744:	b928      	cbnz	r0, 8014752 <__i2b+0x1a>
 8014746:	4b05      	ldr	r3, [pc, #20]	@ (801475c <__i2b+0x24>)
 8014748:	4805      	ldr	r0, [pc, #20]	@ (8014760 <__i2b+0x28>)
 801474a:	f240 1145 	movw	r1, #325	@ 0x145
 801474e:	f7fe ff95 	bl	801367c <__assert_func>
 8014752:	2301      	movs	r3, #1
 8014754:	6144      	str	r4, [r0, #20]
 8014756:	6103      	str	r3, [r0, #16]
 8014758:	bd10      	pop	{r4, pc}
 801475a:	bf00      	nop
 801475c:	08016a71 	.word	0x08016a71
 8014760:	08016a82 	.word	0x08016a82

08014764 <__multiply>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	4614      	mov	r4, r2
 801476a:	690a      	ldr	r2, [r1, #16]
 801476c:	6923      	ldr	r3, [r4, #16]
 801476e:	429a      	cmp	r2, r3
 8014770:	bfa8      	it	ge
 8014772:	4623      	movge	r3, r4
 8014774:	460f      	mov	r7, r1
 8014776:	bfa4      	itt	ge
 8014778:	460c      	movge	r4, r1
 801477a:	461f      	movge	r7, r3
 801477c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014780:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014784:	68a3      	ldr	r3, [r4, #8]
 8014786:	6861      	ldr	r1, [r4, #4]
 8014788:	eb0a 0609 	add.w	r6, sl, r9
 801478c:	42b3      	cmp	r3, r6
 801478e:	b085      	sub	sp, #20
 8014790:	bfb8      	it	lt
 8014792:	3101      	addlt	r1, #1
 8014794:	f7ff fedc 	bl	8014550 <_Balloc>
 8014798:	b930      	cbnz	r0, 80147a8 <__multiply+0x44>
 801479a:	4602      	mov	r2, r0
 801479c:	4b44      	ldr	r3, [pc, #272]	@ (80148b0 <__multiply+0x14c>)
 801479e:	4845      	ldr	r0, [pc, #276]	@ (80148b4 <__multiply+0x150>)
 80147a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80147a4:	f7fe ff6a 	bl	801367c <__assert_func>
 80147a8:	f100 0514 	add.w	r5, r0, #20
 80147ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80147b0:	462b      	mov	r3, r5
 80147b2:	2200      	movs	r2, #0
 80147b4:	4543      	cmp	r3, r8
 80147b6:	d321      	bcc.n	80147fc <__multiply+0x98>
 80147b8:	f107 0114 	add.w	r1, r7, #20
 80147bc:	f104 0214 	add.w	r2, r4, #20
 80147c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80147c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80147c8:	9302      	str	r3, [sp, #8]
 80147ca:	1b13      	subs	r3, r2, r4
 80147cc:	3b15      	subs	r3, #21
 80147ce:	f023 0303 	bic.w	r3, r3, #3
 80147d2:	3304      	adds	r3, #4
 80147d4:	f104 0715 	add.w	r7, r4, #21
 80147d8:	42ba      	cmp	r2, r7
 80147da:	bf38      	it	cc
 80147dc:	2304      	movcc	r3, #4
 80147de:	9301      	str	r3, [sp, #4]
 80147e0:	9b02      	ldr	r3, [sp, #8]
 80147e2:	9103      	str	r1, [sp, #12]
 80147e4:	428b      	cmp	r3, r1
 80147e6:	d80c      	bhi.n	8014802 <__multiply+0x9e>
 80147e8:	2e00      	cmp	r6, #0
 80147ea:	dd03      	ble.n	80147f4 <__multiply+0x90>
 80147ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d05b      	beq.n	80148ac <__multiply+0x148>
 80147f4:	6106      	str	r6, [r0, #16]
 80147f6:	b005      	add	sp, #20
 80147f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147fc:	f843 2b04 	str.w	r2, [r3], #4
 8014800:	e7d8      	b.n	80147b4 <__multiply+0x50>
 8014802:	f8b1 a000 	ldrh.w	sl, [r1]
 8014806:	f1ba 0f00 	cmp.w	sl, #0
 801480a:	d024      	beq.n	8014856 <__multiply+0xf2>
 801480c:	f104 0e14 	add.w	lr, r4, #20
 8014810:	46a9      	mov	r9, r5
 8014812:	f04f 0c00 	mov.w	ip, #0
 8014816:	f85e 7b04 	ldr.w	r7, [lr], #4
 801481a:	f8d9 3000 	ldr.w	r3, [r9]
 801481e:	fa1f fb87 	uxth.w	fp, r7
 8014822:	b29b      	uxth	r3, r3
 8014824:	fb0a 330b 	mla	r3, sl, fp, r3
 8014828:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801482c:	f8d9 7000 	ldr.w	r7, [r9]
 8014830:	4463      	add	r3, ip
 8014832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014836:	fb0a c70b 	mla	r7, sl, fp, ip
 801483a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801483e:	b29b      	uxth	r3, r3
 8014840:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014844:	4572      	cmp	r2, lr
 8014846:	f849 3b04 	str.w	r3, [r9], #4
 801484a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801484e:	d8e2      	bhi.n	8014816 <__multiply+0xb2>
 8014850:	9b01      	ldr	r3, [sp, #4]
 8014852:	f845 c003 	str.w	ip, [r5, r3]
 8014856:	9b03      	ldr	r3, [sp, #12]
 8014858:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801485c:	3104      	adds	r1, #4
 801485e:	f1b9 0f00 	cmp.w	r9, #0
 8014862:	d021      	beq.n	80148a8 <__multiply+0x144>
 8014864:	682b      	ldr	r3, [r5, #0]
 8014866:	f104 0c14 	add.w	ip, r4, #20
 801486a:	46ae      	mov	lr, r5
 801486c:	f04f 0a00 	mov.w	sl, #0
 8014870:	f8bc b000 	ldrh.w	fp, [ip]
 8014874:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014878:	fb09 770b 	mla	r7, r9, fp, r7
 801487c:	4457      	add	r7, sl
 801487e:	b29b      	uxth	r3, r3
 8014880:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014884:	f84e 3b04 	str.w	r3, [lr], #4
 8014888:	f85c 3b04 	ldr.w	r3, [ip], #4
 801488c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014890:	f8be 3000 	ldrh.w	r3, [lr]
 8014894:	fb09 330a 	mla	r3, r9, sl, r3
 8014898:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801489c:	4562      	cmp	r2, ip
 801489e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80148a2:	d8e5      	bhi.n	8014870 <__multiply+0x10c>
 80148a4:	9f01      	ldr	r7, [sp, #4]
 80148a6:	51eb      	str	r3, [r5, r7]
 80148a8:	3504      	adds	r5, #4
 80148aa:	e799      	b.n	80147e0 <__multiply+0x7c>
 80148ac:	3e01      	subs	r6, #1
 80148ae:	e79b      	b.n	80147e8 <__multiply+0x84>
 80148b0:	08016a71 	.word	0x08016a71
 80148b4:	08016a82 	.word	0x08016a82

080148b8 <__pow5mult>:
 80148b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148bc:	4615      	mov	r5, r2
 80148be:	f012 0203 	ands.w	r2, r2, #3
 80148c2:	4607      	mov	r7, r0
 80148c4:	460e      	mov	r6, r1
 80148c6:	d007      	beq.n	80148d8 <__pow5mult+0x20>
 80148c8:	4c25      	ldr	r4, [pc, #148]	@ (8014960 <__pow5mult+0xa8>)
 80148ca:	3a01      	subs	r2, #1
 80148cc:	2300      	movs	r3, #0
 80148ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80148d2:	f7ff fe9f 	bl	8014614 <__multadd>
 80148d6:	4606      	mov	r6, r0
 80148d8:	10ad      	asrs	r5, r5, #2
 80148da:	d03d      	beq.n	8014958 <__pow5mult+0xa0>
 80148dc:	69fc      	ldr	r4, [r7, #28]
 80148de:	b97c      	cbnz	r4, 8014900 <__pow5mult+0x48>
 80148e0:	2010      	movs	r0, #16
 80148e2:	f7ff fd7f 	bl	80143e4 <malloc>
 80148e6:	4602      	mov	r2, r0
 80148e8:	61f8      	str	r0, [r7, #28]
 80148ea:	b928      	cbnz	r0, 80148f8 <__pow5mult+0x40>
 80148ec:	4b1d      	ldr	r3, [pc, #116]	@ (8014964 <__pow5mult+0xac>)
 80148ee:	481e      	ldr	r0, [pc, #120]	@ (8014968 <__pow5mult+0xb0>)
 80148f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80148f4:	f7fe fec2 	bl	801367c <__assert_func>
 80148f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148fc:	6004      	str	r4, [r0, #0]
 80148fe:	60c4      	str	r4, [r0, #12]
 8014900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014908:	b94c      	cbnz	r4, 801491e <__pow5mult+0x66>
 801490a:	f240 2171 	movw	r1, #625	@ 0x271
 801490e:	4638      	mov	r0, r7
 8014910:	f7ff ff12 	bl	8014738 <__i2b>
 8014914:	2300      	movs	r3, #0
 8014916:	f8c8 0008 	str.w	r0, [r8, #8]
 801491a:	4604      	mov	r4, r0
 801491c:	6003      	str	r3, [r0, #0]
 801491e:	f04f 0900 	mov.w	r9, #0
 8014922:	07eb      	lsls	r3, r5, #31
 8014924:	d50a      	bpl.n	801493c <__pow5mult+0x84>
 8014926:	4631      	mov	r1, r6
 8014928:	4622      	mov	r2, r4
 801492a:	4638      	mov	r0, r7
 801492c:	f7ff ff1a 	bl	8014764 <__multiply>
 8014930:	4631      	mov	r1, r6
 8014932:	4680      	mov	r8, r0
 8014934:	4638      	mov	r0, r7
 8014936:	f7ff fe4b 	bl	80145d0 <_Bfree>
 801493a:	4646      	mov	r6, r8
 801493c:	106d      	asrs	r5, r5, #1
 801493e:	d00b      	beq.n	8014958 <__pow5mult+0xa0>
 8014940:	6820      	ldr	r0, [r4, #0]
 8014942:	b938      	cbnz	r0, 8014954 <__pow5mult+0x9c>
 8014944:	4622      	mov	r2, r4
 8014946:	4621      	mov	r1, r4
 8014948:	4638      	mov	r0, r7
 801494a:	f7ff ff0b 	bl	8014764 <__multiply>
 801494e:	6020      	str	r0, [r4, #0]
 8014950:	f8c0 9000 	str.w	r9, [r0]
 8014954:	4604      	mov	r4, r0
 8014956:	e7e4      	b.n	8014922 <__pow5mult+0x6a>
 8014958:	4630      	mov	r0, r6
 801495a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801495e:	bf00      	nop
 8014960:	08016adc 	.word	0x08016adc
 8014964:	08016a02 	.word	0x08016a02
 8014968:	08016a82 	.word	0x08016a82

0801496c <__lshift>:
 801496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014970:	460c      	mov	r4, r1
 8014972:	6849      	ldr	r1, [r1, #4]
 8014974:	6923      	ldr	r3, [r4, #16]
 8014976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801497a:	68a3      	ldr	r3, [r4, #8]
 801497c:	4607      	mov	r7, r0
 801497e:	4691      	mov	r9, r2
 8014980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014984:	f108 0601 	add.w	r6, r8, #1
 8014988:	42b3      	cmp	r3, r6
 801498a:	db0b      	blt.n	80149a4 <__lshift+0x38>
 801498c:	4638      	mov	r0, r7
 801498e:	f7ff fddf 	bl	8014550 <_Balloc>
 8014992:	4605      	mov	r5, r0
 8014994:	b948      	cbnz	r0, 80149aa <__lshift+0x3e>
 8014996:	4602      	mov	r2, r0
 8014998:	4b28      	ldr	r3, [pc, #160]	@ (8014a3c <__lshift+0xd0>)
 801499a:	4829      	ldr	r0, [pc, #164]	@ (8014a40 <__lshift+0xd4>)
 801499c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80149a0:	f7fe fe6c 	bl	801367c <__assert_func>
 80149a4:	3101      	adds	r1, #1
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	e7ee      	b.n	8014988 <__lshift+0x1c>
 80149aa:	2300      	movs	r3, #0
 80149ac:	f100 0114 	add.w	r1, r0, #20
 80149b0:	f100 0210 	add.w	r2, r0, #16
 80149b4:	4618      	mov	r0, r3
 80149b6:	4553      	cmp	r3, sl
 80149b8:	db33      	blt.n	8014a22 <__lshift+0xb6>
 80149ba:	6920      	ldr	r0, [r4, #16]
 80149bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80149c0:	f104 0314 	add.w	r3, r4, #20
 80149c4:	f019 091f 	ands.w	r9, r9, #31
 80149c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80149d0:	d02b      	beq.n	8014a2a <__lshift+0xbe>
 80149d2:	f1c9 0e20 	rsb	lr, r9, #32
 80149d6:	468a      	mov	sl, r1
 80149d8:	2200      	movs	r2, #0
 80149da:	6818      	ldr	r0, [r3, #0]
 80149dc:	fa00 f009 	lsl.w	r0, r0, r9
 80149e0:	4310      	orrs	r0, r2
 80149e2:	f84a 0b04 	str.w	r0, [sl], #4
 80149e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80149ea:	459c      	cmp	ip, r3
 80149ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80149f0:	d8f3      	bhi.n	80149da <__lshift+0x6e>
 80149f2:	ebac 0304 	sub.w	r3, ip, r4
 80149f6:	3b15      	subs	r3, #21
 80149f8:	f023 0303 	bic.w	r3, r3, #3
 80149fc:	3304      	adds	r3, #4
 80149fe:	f104 0015 	add.w	r0, r4, #21
 8014a02:	4584      	cmp	ip, r0
 8014a04:	bf38      	it	cc
 8014a06:	2304      	movcc	r3, #4
 8014a08:	50ca      	str	r2, [r1, r3]
 8014a0a:	b10a      	cbz	r2, 8014a10 <__lshift+0xa4>
 8014a0c:	f108 0602 	add.w	r6, r8, #2
 8014a10:	3e01      	subs	r6, #1
 8014a12:	4638      	mov	r0, r7
 8014a14:	612e      	str	r6, [r5, #16]
 8014a16:	4621      	mov	r1, r4
 8014a18:	f7ff fdda 	bl	80145d0 <_Bfree>
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a26:	3301      	adds	r3, #1
 8014a28:	e7c5      	b.n	80149b6 <__lshift+0x4a>
 8014a2a:	3904      	subs	r1, #4
 8014a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a34:	459c      	cmp	ip, r3
 8014a36:	d8f9      	bhi.n	8014a2c <__lshift+0xc0>
 8014a38:	e7ea      	b.n	8014a10 <__lshift+0xa4>
 8014a3a:	bf00      	nop
 8014a3c:	08016a71 	.word	0x08016a71
 8014a40:	08016a82 	.word	0x08016a82

08014a44 <__mcmp>:
 8014a44:	690a      	ldr	r2, [r1, #16]
 8014a46:	4603      	mov	r3, r0
 8014a48:	6900      	ldr	r0, [r0, #16]
 8014a4a:	1a80      	subs	r0, r0, r2
 8014a4c:	b530      	push	{r4, r5, lr}
 8014a4e:	d10e      	bne.n	8014a6e <__mcmp+0x2a>
 8014a50:	3314      	adds	r3, #20
 8014a52:	3114      	adds	r1, #20
 8014a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014a64:	4295      	cmp	r5, r2
 8014a66:	d003      	beq.n	8014a70 <__mcmp+0x2c>
 8014a68:	d205      	bcs.n	8014a76 <__mcmp+0x32>
 8014a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a6e:	bd30      	pop	{r4, r5, pc}
 8014a70:	42a3      	cmp	r3, r4
 8014a72:	d3f3      	bcc.n	8014a5c <__mcmp+0x18>
 8014a74:	e7fb      	b.n	8014a6e <__mcmp+0x2a>
 8014a76:	2001      	movs	r0, #1
 8014a78:	e7f9      	b.n	8014a6e <__mcmp+0x2a>
	...

08014a7c <__mdiff>:
 8014a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a80:	4689      	mov	r9, r1
 8014a82:	4606      	mov	r6, r0
 8014a84:	4611      	mov	r1, r2
 8014a86:	4648      	mov	r0, r9
 8014a88:	4614      	mov	r4, r2
 8014a8a:	f7ff ffdb 	bl	8014a44 <__mcmp>
 8014a8e:	1e05      	subs	r5, r0, #0
 8014a90:	d112      	bne.n	8014ab8 <__mdiff+0x3c>
 8014a92:	4629      	mov	r1, r5
 8014a94:	4630      	mov	r0, r6
 8014a96:	f7ff fd5b 	bl	8014550 <_Balloc>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	b928      	cbnz	r0, 8014aaa <__mdiff+0x2e>
 8014a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8014b9c <__mdiff+0x120>)
 8014aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8014aa4:	483e      	ldr	r0, [pc, #248]	@ (8014ba0 <__mdiff+0x124>)
 8014aa6:	f7fe fde9 	bl	801367c <__assert_func>
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	b003      	add	sp, #12
 8014ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab8:	bfbc      	itt	lt
 8014aba:	464b      	movlt	r3, r9
 8014abc:	46a1      	movlt	r9, r4
 8014abe:	4630      	mov	r0, r6
 8014ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014ac4:	bfba      	itte	lt
 8014ac6:	461c      	movlt	r4, r3
 8014ac8:	2501      	movlt	r5, #1
 8014aca:	2500      	movge	r5, #0
 8014acc:	f7ff fd40 	bl	8014550 <_Balloc>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	b918      	cbnz	r0, 8014adc <__mdiff+0x60>
 8014ad4:	4b31      	ldr	r3, [pc, #196]	@ (8014b9c <__mdiff+0x120>)
 8014ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8014ada:	e7e3      	b.n	8014aa4 <__mdiff+0x28>
 8014adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014ae0:	6926      	ldr	r6, [r4, #16]
 8014ae2:	60c5      	str	r5, [r0, #12]
 8014ae4:	f109 0310 	add.w	r3, r9, #16
 8014ae8:	f109 0514 	add.w	r5, r9, #20
 8014aec:	f104 0e14 	add.w	lr, r4, #20
 8014af0:	f100 0b14 	add.w	fp, r0, #20
 8014af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014afc:	9301      	str	r3, [sp, #4]
 8014afe:	46d9      	mov	r9, fp
 8014b00:	f04f 0c00 	mov.w	ip, #0
 8014b04:	9b01      	ldr	r3, [sp, #4]
 8014b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	fa1f f38a 	uxth.w	r3, sl
 8014b14:	4619      	mov	r1, r3
 8014b16:	b283      	uxth	r3, r0
 8014b18:	1acb      	subs	r3, r1, r3
 8014b1a:	0c00      	lsrs	r0, r0, #16
 8014b1c:	4463      	add	r3, ip
 8014b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014b2c:	4576      	cmp	r6, lr
 8014b2e:	f849 3b04 	str.w	r3, [r9], #4
 8014b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b36:	d8e5      	bhi.n	8014b04 <__mdiff+0x88>
 8014b38:	1b33      	subs	r3, r6, r4
 8014b3a:	3b15      	subs	r3, #21
 8014b3c:	f023 0303 	bic.w	r3, r3, #3
 8014b40:	3415      	adds	r4, #21
 8014b42:	3304      	adds	r3, #4
 8014b44:	42a6      	cmp	r6, r4
 8014b46:	bf38      	it	cc
 8014b48:	2304      	movcc	r3, #4
 8014b4a:	441d      	add	r5, r3
 8014b4c:	445b      	add	r3, fp
 8014b4e:	461e      	mov	r6, r3
 8014b50:	462c      	mov	r4, r5
 8014b52:	4544      	cmp	r4, r8
 8014b54:	d30e      	bcc.n	8014b74 <__mdiff+0xf8>
 8014b56:	f108 0103 	add.w	r1, r8, #3
 8014b5a:	1b49      	subs	r1, r1, r5
 8014b5c:	f021 0103 	bic.w	r1, r1, #3
 8014b60:	3d03      	subs	r5, #3
 8014b62:	45a8      	cmp	r8, r5
 8014b64:	bf38      	it	cc
 8014b66:	2100      	movcc	r1, #0
 8014b68:	440b      	add	r3, r1
 8014b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b6e:	b191      	cbz	r1, 8014b96 <__mdiff+0x11a>
 8014b70:	6117      	str	r7, [r2, #16]
 8014b72:	e79d      	b.n	8014ab0 <__mdiff+0x34>
 8014b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8014b78:	46e6      	mov	lr, ip
 8014b7a:	0c08      	lsrs	r0, r1, #16
 8014b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8014b80:	4471      	add	r1, lr
 8014b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014b86:	b289      	uxth	r1, r1
 8014b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014b8c:	f846 1b04 	str.w	r1, [r6], #4
 8014b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b94:	e7dd      	b.n	8014b52 <__mdiff+0xd6>
 8014b96:	3f01      	subs	r7, #1
 8014b98:	e7e7      	b.n	8014b6a <__mdiff+0xee>
 8014b9a:	bf00      	nop
 8014b9c:	08016a71 	.word	0x08016a71
 8014ba0:	08016a82 	.word	0x08016a82

08014ba4 <__d2b>:
 8014ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ba8:	460f      	mov	r7, r1
 8014baa:	2101      	movs	r1, #1
 8014bac:	ec59 8b10 	vmov	r8, r9, d0
 8014bb0:	4616      	mov	r6, r2
 8014bb2:	f7ff fccd 	bl	8014550 <_Balloc>
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	b930      	cbnz	r0, 8014bc8 <__d2b+0x24>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	4b23      	ldr	r3, [pc, #140]	@ (8014c4c <__d2b+0xa8>)
 8014bbe:	4824      	ldr	r0, [pc, #144]	@ (8014c50 <__d2b+0xac>)
 8014bc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8014bc4:	f7fe fd5a 	bl	801367c <__assert_func>
 8014bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014bd0:	b10d      	cbz	r5, 8014bd6 <__d2b+0x32>
 8014bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014bd6:	9301      	str	r3, [sp, #4]
 8014bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8014bdc:	d023      	beq.n	8014c26 <__d2b+0x82>
 8014bde:	4668      	mov	r0, sp
 8014be0:	9300      	str	r3, [sp, #0]
 8014be2:	f7ff fd7c 	bl	80146de <__lo0bits>
 8014be6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014bea:	b1d0      	cbz	r0, 8014c22 <__d2b+0x7e>
 8014bec:	f1c0 0320 	rsb	r3, r0, #32
 8014bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8014bf4:	430b      	orrs	r3, r1
 8014bf6:	40c2      	lsrs	r2, r0
 8014bf8:	6163      	str	r3, [r4, #20]
 8014bfa:	9201      	str	r2, [sp, #4]
 8014bfc:	9b01      	ldr	r3, [sp, #4]
 8014bfe:	61a3      	str	r3, [r4, #24]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	bf0c      	ite	eq
 8014c04:	2201      	moveq	r2, #1
 8014c06:	2202      	movne	r2, #2
 8014c08:	6122      	str	r2, [r4, #16]
 8014c0a:	b1a5      	cbz	r5, 8014c36 <__d2b+0x92>
 8014c0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014c10:	4405      	add	r5, r0
 8014c12:	603d      	str	r5, [r7, #0]
 8014c14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014c18:	6030      	str	r0, [r6, #0]
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	b003      	add	sp, #12
 8014c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c22:	6161      	str	r1, [r4, #20]
 8014c24:	e7ea      	b.n	8014bfc <__d2b+0x58>
 8014c26:	a801      	add	r0, sp, #4
 8014c28:	f7ff fd59 	bl	80146de <__lo0bits>
 8014c2c:	9b01      	ldr	r3, [sp, #4]
 8014c2e:	6163      	str	r3, [r4, #20]
 8014c30:	3020      	adds	r0, #32
 8014c32:	2201      	movs	r2, #1
 8014c34:	e7e8      	b.n	8014c08 <__d2b+0x64>
 8014c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014c3e:	6038      	str	r0, [r7, #0]
 8014c40:	6918      	ldr	r0, [r3, #16]
 8014c42:	f7ff fd2d 	bl	80146a0 <__hi0bits>
 8014c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c4a:	e7e5      	b.n	8014c18 <__d2b+0x74>
 8014c4c:	08016a71 	.word	0x08016a71
 8014c50:	08016a82 	.word	0x08016a82

08014c54 <__ssputs_r>:
 8014c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c58:	688e      	ldr	r6, [r1, #8]
 8014c5a:	461f      	mov	r7, r3
 8014c5c:	42be      	cmp	r6, r7
 8014c5e:	680b      	ldr	r3, [r1, #0]
 8014c60:	4682      	mov	sl, r0
 8014c62:	460c      	mov	r4, r1
 8014c64:	4690      	mov	r8, r2
 8014c66:	d82d      	bhi.n	8014cc4 <__ssputs_r+0x70>
 8014c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014c70:	d026      	beq.n	8014cc0 <__ssputs_r+0x6c>
 8014c72:	6965      	ldr	r5, [r4, #20]
 8014c74:	6909      	ldr	r1, [r1, #16]
 8014c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c7a:	eba3 0901 	sub.w	r9, r3, r1
 8014c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c82:	1c7b      	adds	r3, r7, #1
 8014c84:	444b      	add	r3, r9
 8014c86:	106d      	asrs	r5, r5, #1
 8014c88:	429d      	cmp	r5, r3
 8014c8a:	bf38      	it	cc
 8014c8c:	461d      	movcc	r5, r3
 8014c8e:	0553      	lsls	r3, r2, #21
 8014c90:	d527      	bpl.n	8014ce2 <__ssputs_r+0x8e>
 8014c92:	4629      	mov	r1, r5
 8014c94:	f7ff fbd0 	bl	8014438 <_malloc_r>
 8014c98:	4606      	mov	r6, r0
 8014c9a:	b360      	cbz	r0, 8014cf6 <__ssputs_r+0xa2>
 8014c9c:	6921      	ldr	r1, [r4, #16]
 8014c9e:	464a      	mov	r2, r9
 8014ca0:	f7fe fcdd 	bl	801365e <memcpy>
 8014ca4:	89a3      	ldrh	r3, [r4, #12]
 8014ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014cae:	81a3      	strh	r3, [r4, #12]
 8014cb0:	6126      	str	r6, [r4, #16]
 8014cb2:	6165      	str	r5, [r4, #20]
 8014cb4:	444e      	add	r6, r9
 8014cb6:	eba5 0509 	sub.w	r5, r5, r9
 8014cba:	6026      	str	r6, [r4, #0]
 8014cbc:	60a5      	str	r5, [r4, #8]
 8014cbe:	463e      	mov	r6, r7
 8014cc0:	42be      	cmp	r6, r7
 8014cc2:	d900      	bls.n	8014cc6 <__ssputs_r+0x72>
 8014cc4:	463e      	mov	r6, r7
 8014cc6:	6820      	ldr	r0, [r4, #0]
 8014cc8:	4632      	mov	r2, r6
 8014cca:	4641      	mov	r1, r8
 8014ccc:	f000 fa6c 	bl	80151a8 <memmove>
 8014cd0:	68a3      	ldr	r3, [r4, #8]
 8014cd2:	1b9b      	subs	r3, r3, r6
 8014cd4:	60a3      	str	r3, [r4, #8]
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	4433      	add	r3, r6
 8014cda:	6023      	str	r3, [r4, #0]
 8014cdc:	2000      	movs	r0, #0
 8014cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce2:	462a      	mov	r2, r5
 8014ce4:	f000 fab7 	bl	8015256 <_realloc_r>
 8014ce8:	4606      	mov	r6, r0
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d1e0      	bne.n	8014cb0 <__ssputs_r+0x5c>
 8014cee:	6921      	ldr	r1, [r4, #16]
 8014cf0:	4650      	mov	r0, sl
 8014cf2:	f7ff fb2d 	bl	8014350 <_free_r>
 8014cf6:	230c      	movs	r3, #12
 8014cf8:	f8ca 3000 	str.w	r3, [sl]
 8014cfc:	89a3      	ldrh	r3, [r4, #12]
 8014cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d02:	81a3      	strh	r3, [r4, #12]
 8014d04:	f04f 30ff 	mov.w	r0, #4294967295
 8014d08:	e7e9      	b.n	8014cde <__ssputs_r+0x8a>
	...

08014d0c <_svfiprintf_r>:
 8014d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d10:	4698      	mov	r8, r3
 8014d12:	898b      	ldrh	r3, [r1, #12]
 8014d14:	061b      	lsls	r3, r3, #24
 8014d16:	b09d      	sub	sp, #116	@ 0x74
 8014d18:	4607      	mov	r7, r0
 8014d1a:	460d      	mov	r5, r1
 8014d1c:	4614      	mov	r4, r2
 8014d1e:	d510      	bpl.n	8014d42 <_svfiprintf_r+0x36>
 8014d20:	690b      	ldr	r3, [r1, #16]
 8014d22:	b973      	cbnz	r3, 8014d42 <_svfiprintf_r+0x36>
 8014d24:	2140      	movs	r1, #64	@ 0x40
 8014d26:	f7ff fb87 	bl	8014438 <_malloc_r>
 8014d2a:	6028      	str	r0, [r5, #0]
 8014d2c:	6128      	str	r0, [r5, #16]
 8014d2e:	b930      	cbnz	r0, 8014d3e <_svfiprintf_r+0x32>
 8014d30:	230c      	movs	r3, #12
 8014d32:	603b      	str	r3, [r7, #0]
 8014d34:	f04f 30ff 	mov.w	r0, #4294967295
 8014d38:	b01d      	add	sp, #116	@ 0x74
 8014d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3e:	2340      	movs	r3, #64	@ 0x40
 8014d40:	616b      	str	r3, [r5, #20]
 8014d42:	2300      	movs	r3, #0
 8014d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d46:	2320      	movs	r3, #32
 8014d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d50:	2330      	movs	r3, #48	@ 0x30
 8014d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014ef0 <_svfiprintf_r+0x1e4>
 8014d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d5a:	f04f 0901 	mov.w	r9, #1
 8014d5e:	4623      	mov	r3, r4
 8014d60:	469a      	mov	sl, r3
 8014d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d66:	b10a      	cbz	r2, 8014d6c <_svfiprintf_r+0x60>
 8014d68:	2a25      	cmp	r2, #37	@ 0x25
 8014d6a:	d1f9      	bne.n	8014d60 <_svfiprintf_r+0x54>
 8014d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8014d70:	d00b      	beq.n	8014d8a <_svfiprintf_r+0x7e>
 8014d72:	465b      	mov	r3, fp
 8014d74:	4622      	mov	r2, r4
 8014d76:	4629      	mov	r1, r5
 8014d78:	4638      	mov	r0, r7
 8014d7a:	f7ff ff6b 	bl	8014c54 <__ssputs_r>
 8014d7e:	3001      	adds	r0, #1
 8014d80:	f000 80a7 	beq.w	8014ed2 <_svfiprintf_r+0x1c6>
 8014d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d86:	445a      	add	r2, fp
 8014d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	f000 809f 	beq.w	8014ed2 <_svfiprintf_r+0x1c6>
 8014d94:	2300      	movs	r3, #0
 8014d96:	f04f 32ff 	mov.w	r2, #4294967295
 8014d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d9e:	f10a 0a01 	add.w	sl, sl, #1
 8014da2:	9304      	str	r3, [sp, #16]
 8014da4:	9307      	str	r3, [sp, #28]
 8014da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8014dac:	4654      	mov	r4, sl
 8014dae:	2205      	movs	r2, #5
 8014db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014db4:	484e      	ldr	r0, [pc, #312]	@ (8014ef0 <_svfiprintf_r+0x1e4>)
 8014db6:	f7eb fa0b 	bl	80001d0 <memchr>
 8014dba:	9a04      	ldr	r2, [sp, #16]
 8014dbc:	b9d8      	cbnz	r0, 8014df6 <_svfiprintf_r+0xea>
 8014dbe:	06d0      	lsls	r0, r2, #27
 8014dc0:	bf44      	itt	mi
 8014dc2:	2320      	movmi	r3, #32
 8014dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dc8:	0711      	lsls	r1, r2, #28
 8014dca:	bf44      	itt	mi
 8014dcc:	232b      	movmi	r3, #43	@ 0x2b
 8014dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8014dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dd8:	d015      	beq.n	8014e06 <_svfiprintf_r+0xfa>
 8014dda:	9a07      	ldr	r2, [sp, #28]
 8014ddc:	4654      	mov	r4, sl
 8014dde:	2000      	movs	r0, #0
 8014de0:	f04f 0c0a 	mov.w	ip, #10
 8014de4:	4621      	mov	r1, r4
 8014de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dea:	3b30      	subs	r3, #48	@ 0x30
 8014dec:	2b09      	cmp	r3, #9
 8014dee:	d94b      	bls.n	8014e88 <_svfiprintf_r+0x17c>
 8014df0:	b1b0      	cbz	r0, 8014e20 <_svfiprintf_r+0x114>
 8014df2:	9207      	str	r2, [sp, #28]
 8014df4:	e014      	b.n	8014e20 <_svfiprintf_r+0x114>
 8014df6:	eba0 0308 	sub.w	r3, r0, r8
 8014dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8014dfe:	4313      	orrs	r3, r2
 8014e00:	9304      	str	r3, [sp, #16]
 8014e02:	46a2      	mov	sl, r4
 8014e04:	e7d2      	b.n	8014dac <_svfiprintf_r+0xa0>
 8014e06:	9b03      	ldr	r3, [sp, #12]
 8014e08:	1d19      	adds	r1, r3, #4
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	9103      	str	r1, [sp, #12]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	bfbb      	ittet	lt
 8014e12:	425b      	neglt	r3, r3
 8014e14:	f042 0202 	orrlt.w	r2, r2, #2
 8014e18:	9307      	strge	r3, [sp, #28]
 8014e1a:	9307      	strlt	r3, [sp, #28]
 8014e1c:	bfb8      	it	lt
 8014e1e:	9204      	strlt	r2, [sp, #16]
 8014e20:	7823      	ldrb	r3, [r4, #0]
 8014e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e24:	d10a      	bne.n	8014e3c <_svfiprintf_r+0x130>
 8014e26:	7863      	ldrb	r3, [r4, #1]
 8014e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e2a:	d132      	bne.n	8014e92 <_svfiprintf_r+0x186>
 8014e2c:	9b03      	ldr	r3, [sp, #12]
 8014e2e:	1d1a      	adds	r2, r3, #4
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	9203      	str	r2, [sp, #12]
 8014e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e38:	3402      	adds	r4, #2
 8014e3a:	9305      	str	r3, [sp, #20]
 8014e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014f00 <_svfiprintf_r+0x1f4>
 8014e40:	7821      	ldrb	r1, [r4, #0]
 8014e42:	2203      	movs	r2, #3
 8014e44:	4650      	mov	r0, sl
 8014e46:	f7eb f9c3 	bl	80001d0 <memchr>
 8014e4a:	b138      	cbz	r0, 8014e5c <_svfiprintf_r+0x150>
 8014e4c:	9b04      	ldr	r3, [sp, #16]
 8014e4e:	eba0 000a 	sub.w	r0, r0, sl
 8014e52:	2240      	movs	r2, #64	@ 0x40
 8014e54:	4082      	lsls	r2, r0
 8014e56:	4313      	orrs	r3, r2
 8014e58:	3401      	adds	r4, #1
 8014e5a:	9304      	str	r3, [sp, #16]
 8014e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e60:	4824      	ldr	r0, [pc, #144]	@ (8014ef4 <_svfiprintf_r+0x1e8>)
 8014e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e66:	2206      	movs	r2, #6
 8014e68:	f7eb f9b2 	bl	80001d0 <memchr>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d036      	beq.n	8014ede <_svfiprintf_r+0x1d2>
 8014e70:	4b21      	ldr	r3, [pc, #132]	@ (8014ef8 <_svfiprintf_r+0x1ec>)
 8014e72:	bb1b      	cbnz	r3, 8014ebc <_svfiprintf_r+0x1b0>
 8014e74:	9b03      	ldr	r3, [sp, #12]
 8014e76:	3307      	adds	r3, #7
 8014e78:	f023 0307 	bic.w	r3, r3, #7
 8014e7c:	3308      	adds	r3, #8
 8014e7e:	9303      	str	r3, [sp, #12]
 8014e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e82:	4433      	add	r3, r6
 8014e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e86:	e76a      	b.n	8014d5e <_svfiprintf_r+0x52>
 8014e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e8c:	460c      	mov	r4, r1
 8014e8e:	2001      	movs	r0, #1
 8014e90:	e7a8      	b.n	8014de4 <_svfiprintf_r+0xd8>
 8014e92:	2300      	movs	r3, #0
 8014e94:	3401      	adds	r4, #1
 8014e96:	9305      	str	r3, [sp, #20]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	f04f 0c0a 	mov.w	ip, #10
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ea4:	3a30      	subs	r2, #48	@ 0x30
 8014ea6:	2a09      	cmp	r2, #9
 8014ea8:	d903      	bls.n	8014eb2 <_svfiprintf_r+0x1a6>
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d0c6      	beq.n	8014e3c <_svfiprintf_r+0x130>
 8014eae:	9105      	str	r1, [sp, #20]
 8014eb0:	e7c4      	b.n	8014e3c <_svfiprintf_r+0x130>
 8014eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	2301      	movs	r3, #1
 8014eba:	e7f0      	b.n	8014e9e <_svfiprintf_r+0x192>
 8014ebc:	ab03      	add	r3, sp, #12
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	462a      	mov	r2, r5
 8014ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8014efc <_svfiprintf_r+0x1f0>)
 8014ec4:	a904      	add	r1, sp, #16
 8014ec6:	4638      	mov	r0, r7
 8014ec8:	f7fd fdd8 	bl	8012a7c <_printf_float>
 8014ecc:	1c42      	adds	r2, r0, #1
 8014ece:	4606      	mov	r6, r0
 8014ed0:	d1d6      	bne.n	8014e80 <_svfiprintf_r+0x174>
 8014ed2:	89ab      	ldrh	r3, [r5, #12]
 8014ed4:	065b      	lsls	r3, r3, #25
 8014ed6:	f53f af2d 	bmi.w	8014d34 <_svfiprintf_r+0x28>
 8014eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014edc:	e72c      	b.n	8014d38 <_svfiprintf_r+0x2c>
 8014ede:	ab03      	add	r3, sp, #12
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	462a      	mov	r2, r5
 8014ee4:	4b05      	ldr	r3, [pc, #20]	@ (8014efc <_svfiprintf_r+0x1f0>)
 8014ee6:	a904      	add	r1, sp, #16
 8014ee8:	4638      	mov	r0, r7
 8014eea:	f7fe f85f 	bl	8012fac <_printf_i>
 8014eee:	e7ed      	b.n	8014ecc <_svfiprintf_r+0x1c0>
 8014ef0:	08016bd8 	.word	0x08016bd8
 8014ef4:	08016be2 	.word	0x08016be2
 8014ef8:	08012a7d 	.word	0x08012a7d
 8014efc:	08014c55 	.word	0x08014c55
 8014f00:	08016bde 	.word	0x08016bde

08014f04 <__sflush_r>:
 8014f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f0c:	0716      	lsls	r6, r2, #28
 8014f0e:	4605      	mov	r5, r0
 8014f10:	460c      	mov	r4, r1
 8014f12:	d454      	bmi.n	8014fbe <__sflush_r+0xba>
 8014f14:	684b      	ldr	r3, [r1, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	dc02      	bgt.n	8014f20 <__sflush_r+0x1c>
 8014f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	dd48      	ble.n	8014fb2 <__sflush_r+0xae>
 8014f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f22:	2e00      	cmp	r6, #0
 8014f24:	d045      	beq.n	8014fb2 <__sflush_r+0xae>
 8014f26:	2300      	movs	r3, #0
 8014f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014f2c:	682f      	ldr	r7, [r5, #0]
 8014f2e:	6a21      	ldr	r1, [r4, #32]
 8014f30:	602b      	str	r3, [r5, #0]
 8014f32:	d030      	beq.n	8014f96 <__sflush_r+0x92>
 8014f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	0759      	lsls	r1, r3, #29
 8014f3a:	d505      	bpl.n	8014f48 <__sflush_r+0x44>
 8014f3c:	6863      	ldr	r3, [r4, #4]
 8014f3e:	1ad2      	subs	r2, r2, r3
 8014f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014f42:	b10b      	cbz	r3, 8014f48 <__sflush_r+0x44>
 8014f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	2300      	movs	r3, #0
 8014f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f4c:	6a21      	ldr	r1, [r4, #32]
 8014f4e:	4628      	mov	r0, r5
 8014f50:	47b0      	blx	r6
 8014f52:	1c43      	adds	r3, r0, #1
 8014f54:	89a3      	ldrh	r3, [r4, #12]
 8014f56:	d106      	bne.n	8014f66 <__sflush_r+0x62>
 8014f58:	6829      	ldr	r1, [r5, #0]
 8014f5a:	291d      	cmp	r1, #29
 8014f5c:	d82b      	bhi.n	8014fb6 <__sflush_r+0xb2>
 8014f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8015008 <__sflush_r+0x104>)
 8014f60:	410a      	asrs	r2, r1
 8014f62:	07d6      	lsls	r6, r2, #31
 8014f64:	d427      	bmi.n	8014fb6 <__sflush_r+0xb2>
 8014f66:	2200      	movs	r2, #0
 8014f68:	6062      	str	r2, [r4, #4]
 8014f6a:	04d9      	lsls	r1, r3, #19
 8014f6c:	6922      	ldr	r2, [r4, #16]
 8014f6e:	6022      	str	r2, [r4, #0]
 8014f70:	d504      	bpl.n	8014f7c <__sflush_r+0x78>
 8014f72:	1c42      	adds	r2, r0, #1
 8014f74:	d101      	bne.n	8014f7a <__sflush_r+0x76>
 8014f76:	682b      	ldr	r3, [r5, #0]
 8014f78:	b903      	cbnz	r3, 8014f7c <__sflush_r+0x78>
 8014f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014f7e:	602f      	str	r7, [r5, #0]
 8014f80:	b1b9      	cbz	r1, 8014fb2 <__sflush_r+0xae>
 8014f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f86:	4299      	cmp	r1, r3
 8014f88:	d002      	beq.n	8014f90 <__sflush_r+0x8c>
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f7ff f9e0 	bl	8014350 <_free_r>
 8014f90:	2300      	movs	r3, #0
 8014f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8014f94:	e00d      	b.n	8014fb2 <__sflush_r+0xae>
 8014f96:	2301      	movs	r3, #1
 8014f98:	4628      	mov	r0, r5
 8014f9a:	47b0      	blx	r6
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	1c50      	adds	r0, r2, #1
 8014fa0:	d1c9      	bne.n	8014f36 <__sflush_r+0x32>
 8014fa2:	682b      	ldr	r3, [r5, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d0c6      	beq.n	8014f36 <__sflush_r+0x32>
 8014fa8:	2b1d      	cmp	r3, #29
 8014faa:	d001      	beq.n	8014fb0 <__sflush_r+0xac>
 8014fac:	2b16      	cmp	r3, #22
 8014fae:	d11e      	bne.n	8014fee <__sflush_r+0xea>
 8014fb0:	602f      	str	r7, [r5, #0]
 8014fb2:	2000      	movs	r0, #0
 8014fb4:	e022      	b.n	8014ffc <__sflush_r+0xf8>
 8014fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fba:	b21b      	sxth	r3, r3
 8014fbc:	e01b      	b.n	8014ff6 <__sflush_r+0xf2>
 8014fbe:	690f      	ldr	r7, [r1, #16]
 8014fc0:	2f00      	cmp	r7, #0
 8014fc2:	d0f6      	beq.n	8014fb2 <__sflush_r+0xae>
 8014fc4:	0793      	lsls	r3, r2, #30
 8014fc6:	680e      	ldr	r6, [r1, #0]
 8014fc8:	bf08      	it	eq
 8014fca:	694b      	ldreq	r3, [r1, #20]
 8014fcc:	600f      	str	r7, [r1, #0]
 8014fce:	bf18      	it	ne
 8014fd0:	2300      	movne	r3, #0
 8014fd2:	eba6 0807 	sub.w	r8, r6, r7
 8014fd6:	608b      	str	r3, [r1, #8]
 8014fd8:	f1b8 0f00 	cmp.w	r8, #0
 8014fdc:	dde9      	ble.n	8014fb2 <__sflush_r+0xae>
 8014fde:	6a21      	ldr	r1, [r4, #32]
 8014fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014fe2:	4643      	mov	r3, r8
 8014fe4:	463a      	mov	r2, r7
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	47b0      	blx	r6
 8014fea:	2800      	cmp	r0, #0
 8014fec:	dc08      	bgt.n	8015000 <__sflush_r+0xfc>
 8014fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ff6:	81a3      	strh	r3, [r4, #12]
 8014ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8014ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015000:	4407      	add	r7, r0
 8015002:	eba8 0800 	sub.w	r8, r8, r0
 8015006:	e7e7      	b.n	8014fd8 <__sflush_r+0xd4>
 8015008:	dfbffffe 	.word	0xdfbffffe

0801500c <_fflush_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	690b      	ldr	r3, [r1, #16]
 8015010:	4605      	mov	r5, r0
 8015012:	460c      	mov	r4, r1
 8015014:	b913      	cbnz	r3, 801501c <_fflush_r+0x10>
 8015016:	2500      	movs	r5, #0
 8015018:	4628      	mov	r0, r5
 801501a:	bd38      	pop	{r3, r4, r5, pc}
 801501c:	b118      	cbz	r0, 8015026 <_fflush_r+0x1a>
 801501e:	6a03      	ldr	r3, [r0, #32]
 8015020:	b90b      	cbnz	r3, 8015026 <_fflush_r+0x1a>
 8015022:	f7fe f96f 	bl	8013304 <__sinit>
 8015026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d0f3      	beq.n	8015016 <_fflush_r+0xa>
 801502e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015030:	07d0      	lsls	r0, r2, #31
 8015032:	d404      	bmi.n	801503e <_fflush_r+0x32>
 8015034:	0599      	lsls	r1, r3, #22
 8015036:	d402      	bmi.n	801503e <_fflush_r+0x32>
 8015038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801503a:	f7fe fb06 	bl	801364a <__retarget_lock_acquire_recursive>
 801503e:	4628      	mov	r0, r5
 8015040:	4621      	mov	r1, r4
 8015042:	f7ff ff5f 	bl	8014f04 <__sflush_r>
 8015046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015048:	07da      	lsls	r2, r3, #31
 801504a:	4605      	mov	r5, r0
 801504c:	d4e4      	bmi.n	8015018 <_fflush_r+0xc>
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	059b      	lsls	r3, r3, #22
 8015052:	d4e1      	bmi.n	8015018 <_fflush_r+0xc>
 8015054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015056:	f7fe faf9 	bl	801364c <__retarget_lock_release_recursive>
 801505a:	e7dd      	b.n	8015018 <_fflush_r+0xc>

0801505c <fiprintf>:
 801505c:	b40e      	push	{r1, r2, r3}
 801505e:	b503      	push	{r0, r1, lr}
 8015060:	4601      	mov	r1, r0
 8015062:	ab03      	add	r3, sp, #12
 8015064:	4805      	ldr	r0, [pc, #20]	@ (801507c <fiprintf+0x20>)
 8015066:	f853 2b04 	ldr.w	r2, [r3], #4
 801506a:	6800      	ldr	r0, [r0, #0]
 801506c:	9301      	str	r3, [sp, #4]
 801506e:	f000 f957 	bl	8015320 <_vfiprintf_r>
 8015072:	b002      	add	sp, #8
 8015074:	f85d eb04 	ldr.w	lr, [sp], #4
 8015078:	b003      	add	sp, #12
 801507a:	4770      	bx	lr
 801507c:	2000030c 	.word	0x2000030c

08015080 <__swbuf_r>:
 8015080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015082:	460e      	mov	r6, r1
 8015084:	4614      	mov	r4, r2
 8015086:	4605      	mov	r5, r0
 8015088:	b118      	cbz	r0, 8015092 <__swbuf_r+0x12>
 801508a:	6a03      	ldr	r3, [r0, #32]
 801508c:	b90b      	cbnz	r3, 8015092 <__swbuf_r+0x12>
 801508e:	f7fe f939 	bl	8013304 <__sinit>
 8015092:	69a3      	ldr	r3, [r4, #24]
 8015094:	60a3      	str	r3, [r4, #8]
 8015096:	89a3      	ldrh	r3, [r4, #12]
 8015098:	071a      	lsls	r2, r3, #28
 801509a:	d501      	bpl.n	80150a0 <__swbuf_r+0x20>
 801509c:	6923      	ldr	r3, [r4, #16]
 801509e:	b943      	cbnz	r3, 80150b2 <__swbuf_r+0x32>
 80150a0:	4621      	mov	r1, r4
 80150a2:	4628      	mov	r0, r5
 80150a4:	f000 f82a 	bl	80150fc <__swsetup_r>
 80150a8:	b118      	cbz	r0, 80150b2 <__swbuf_r+0x32>
 80150aa:	f04f 37ff 	mov.w	r7, #4294967295
 80150ae:	4638      	mov	r0, r7
 80150b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	6922      	ldr	r2, [r4, #16]
 80150b6:	1a98      	subs	r0, r3, r2
 80150b8:	6963      	ldr	r3, [r4, #20]
 80150ba:	b2f6      	uxtb	r6, r6
 80150bc:	4283      	cmp	r3, r0
 80150be:	4637      	mov	r7, r6
 80150c0:	dc05      	bgt.n	80150ce <__swbuf_r+0x4e>
 80150c2:	4621      	mov	r1, r4
 80150c4:	4628      	mov	r0, r5
 80150c6:	f7ff ffa1 	bl	801500c <_fflush_r>
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d1ed      	bne.n	80150aa <__swbuf_r+0x2a>
 80150ce:	68a3      	ldr	r3, [r4, #8]
 80150d0:	3b01      	subs	r3, #1
 80150d2:	60a3      	str	r3, [r4, #8]
 80150d4:	6823      	ldr	r3, [r4, #0]
 80150d6:	1c5a      	adds	r2, r3, #1
 80150d8:	6022      	str	r2, [r4, #0]
 80150da:	701e      	strb	r6, [r3, #0]
 80150dc:	6962      	ldr	r2, [r4, #20]
 80150de:	1c43      	adds	r3, r0, #1
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d004      	beq.n	80150ee <__swbuf_r+0x6e>
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	07db      	lsls	r3, r3, #31
 80150e8:	d5e1      	bpl.n	80150ae <__swbuf_r+0x2e>
 80150ea:	2e0a      	cmp	r6, #10
 80150ec:	d1df      	bne.n	80150ae <__swbuf_r+0x2e>
 80150ee:	4621      	mov	r1, r4
 80150f0:	4628      	mov	r0, r5
 80150f2:	f7ff ff8b 	bl	801500c <_fflush_r>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d0d9      	beq.n	80150ae <__swbuf_r+0x2e>
 80150fa:	e7d6      	b.n	80150aa <__swbuf_r+0x2a>

080150fc <__swsetup_r>:
 80150fc:	b538      	push	{r3, r4, r5, lr}
 80150fe:	4b29      	ldr	r3, [pc, #164]	@ (80151a4 <__swsetup_r+0xa8>)
 8015100:	4605      	mov	r5, r0
 8015102:	6818      	ldr	r0, [r3, #0]
 8015104:	460c      	mov	r4, r1
 8015106:	b118      	cbz	r0, 8015110 <__swsetup_r+0x14>
 8015108:	6a03      	ldr	r3, [r0, #32]
 801510a:	b90b      	cbnz	r3, 8015110 <__swsetup_r+0x14>
 801510c:	f7fe f8fa 	bl	8013304 <__sinit>
 8015110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015114:	0719      	lsls	r1, r3, #28
 8015116:	d422      	bmi.n	801515e <__swsetup_r+0x62>
 8015118:	06da      	lsls	r2, r3, #27
 801511a:	d407      	bmi.n	801512c <__swsetup_r+0x30>
 801511c:	2209      	movs	r2, #9
 801511e:	602a      	str	r2, [r5, #0]
 8015120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015124:	81a3      	strh	r3, [r4, #12]
 8015126:	f04f 30ff 	mov.w	r0, #4294967295
 801512a:	e033      	b.n	8015194 <__swsetup_r+0x98>
 801512c:	0758      	lsls	r0, r3, #29
 801512e:	d512      	bpl.n	8015156 <__swsetup_r+0x5a>
 8015130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015132:	b141      	cbz	r1, 8015146 <__swsetup_r+0x4a>
 8015134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015138:	4299      	cmp	r1, r3
 801513a:	d002      	beq.n	8015142 <__swsetup_r+0x46>
 801513c:	4628      	mov	r0, r5
 801513e:	f7ff f907 	bl	8014350 <_free_r>
 8015142:	2300      	movs	r3, #0
 8015144:	6363      	str	r3, [r4, #52]	@ 0x34
 8015146:	89a3      	ldrh	r3, [r4, #12]
 8015148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801514c:	81a3      	strh	r3, [r4, #12]
 801514e:	2300      	movs	r3, #0
 8015150:	6063      	str	r3, [r4, #4]
 8015152:	6923      	ldr	r3, [r4, #16]
 8015154:	6023      	str	r3, [r4, #0]
 8015156:	89a3      	ldrh	r3, [r4, #12]
 8015158:	f043 0308 	orr.w	r3, r3, #8
 801515c:	81a3      	strh	r3, [r4, #12]
 801515e:	6923      	ldr	r3, [r4, #16]
 8015160:	b94b      	cbnz	r3, 8015176 <__swsetup_r+0x7a>
 8015162:	89a3      	ldrh	r3, [r4, #12]
 8015164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801516c:	d003      	beq.n	8015176 <__swsetup_r+0x7a>
 801516e:	4621      	mov	r1, r4
 8015170:	4628      	mov	r0, r5
 8015172:	f000 fa13 	bl	801559c <__smakebuf_r>
 8015176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801517a:	f013 0201 	ands.w	r2, r3, #1
 801517e:	d00a      	beq.n	8015196 <__swsetup_r+0x9a>
 8015180:	2200      	movs	r2, #0
 8015182:	60a2      	str	r2, [r4, #8]
 8015184:	6962      	ldr	r2, [r4, #20]
 8015186:	4252      	negs	r2, r2
 8015188:	61a2      	str	r2, [r4, #24]
 801518a:	6922      	ldr	r2, [r4, #16]
 801518c:	b942      	cbnz	r2, 80151a0 <__swsetup_r+0xa4>
 801518e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015192:	d1c5      	bne.n	8015120 <__swsetup_r+0x24>
 8015194:	bd38      	pop	{r3, r4, r5, pc}
 8015196:	0799      	lsls	r1, r3, #30
 8015198:	bf58      	it	pl
 801519a:	6962      	ldrpl	r2, [r4, #20]
 801519c:	60a2      	str	r2, [r4, #8]
 801519e:	e7f4      	b.n	801518a <__swsetup_r+0x8e>
 80151a0:	2000      	movs	r0, #0
 80151a2:	e7f7      	b.n	8015194 <__swsetup_r+0x98>
 80151a4:	2000030c 	.word	0x2000030c

080151a8 <memmove>:
 80151a8:	4288      	cmp	r0, r1
 80151aa:	b510      	push	{r4, lr}
 80151ac:	eb01 0402 	add.w	r4, r1, r2
 80151b0:	d902      	bls.n	80151b8 <memmove+0x10>
 80151b2:	4284      	cmp	r4, r0
 80151b4:	4623      	mov	r3, r4
 80151b6:	d807      	bhi.n	80151c8 <memmove+0x20>
 80151b8:	1e43      	subs	r3, r0, #1
 80151ba:	42a1      	cmp	r1, r4
 80151bc:	d008      	beq.n	80151d0 <memmove+0x28>
 80151be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151c6:	e7f8      	b.n	80151ba <memmove+0x12>
 80151c8:	4402      	add	r2, r0
 80151ca:	4601      	mov	r1, r0
 80151cc:	428a      	cmp	r2, r1
 80151ce:	d100      	bne.n	80151d2 <memmove+0x2a>
 80151d0:	bd10      	pop	{r4, pc}
 80151d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151da:	e7f7      	b.n	80151cc <memmove+0x24>

080151dc <_sbrk_r>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	4d06      	ldr	r5, [pc, #24]	@ (80151f8 <_sbrk_r+0x1c>)
 80151e0:	2300      	movs	r3, #0
 80151e2:	4604      	mov	r4, r0
 80151e4:	4608      	mov	r0, r1
 80151e6:	602b      	str	r3, [r5, #0]
 80151e8:	f7f4 fde4 	bl	8009db4 <_sbrk>
 80151ec:	1c43      	adds	r3, r0, #1
 80151ee:	d102      	bne.n	80151f6 <_sbrk_r+0x1a>
 80151f0:	682b      	ldr	r3, [r5, #0]
 80151f2:	b103      	cbz	r3, 80151f6 <_sbrk_r+0x1a>
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	20014564 	.word	0x20014564

080151fc <abort>:
 80151fc:	b508      	push	{r3, lr}
 80151fe:	2006      	movs	r0, #6
 8015200:	f000 fa30 	bl	8015664 <raise>
 8015204:	2001      	movs	r0, #1
 8015206:	f7f4 fd5d 	bl	8009cc4 <_exit>

0801520a <_calloc_r>:
 801520a:	b570      	push	{r4, r5, r6, lr}
 801520c:	fba1 5402 	umull	r5, r4, r1, r2
 8015210:	b93c      	cbnz	r4, 8015222 <_calloc_r+0x18>
 8015212:	4629      	mov	r1, r5
 8015214:	f7ff f910 	bl	8014438 <_malloc_r>
 8015218:	4606      	mov	r6, r0
 801521a:	b928      	cbnz	r0, 8015228 <_calloc_r+0x1e>
 801521c:	2600      	movs	r6, #0
 801521e:	4630      	mov	r0, r6
 8015220:	bd70      	pop	{r4, r5, r6, pc}
 8015222:	220c      	movs	r2, #12
 8015224:	6002      	str	r2, [r0, #0]
 8015226:	e7f9      	b.n	801521c <_calloc_r+0x12>
 8015228:	462a      	mov	r2, r5
 801522a:	4621      	mov	r1, r4
 801522c:	f7fe f903 	bl	8013436 <memset>
 8015230:	e7f5      	b.n	801521e <_calloc_r+0x14>

08015232 <__ascii_mbtowc>:
 8015232:	b082      	sub	sp, #8
 8015234:	b901      	cbnz	r1, 8015238 <__ascii_mbtowc+0x6>
 8015236:	a901      	add	r1, sp, #4
 8015238:	b142      	cbz	r2, 801524c <__ascii_mbtowc+0x1a>
 801523a:	b14b      	cbz	r3, 8015250 <__ascii_mbtowc+0x1e>
 801523c:	7813      	ldrb	r3, [r2, #0]
 801523e:	600b      	str	r3, [r1, #0]
 8015240:	7812      	ldrb	r2, [r2, #0]
 8015242:	1e10      	subs	r0, r2, #0
 8015244:	bf18      	it	ne
 8015246:	2001      	movne	r0, #1
 8015248:	b002      	add	sp, #8
 801524a:	4770      	bx	lr
 801524c:	4610      	mov	r0, r2
 801524e:	e7fb      	b.n	8015248 <__ascii_mbtowc+0x16>
 8015250:	f06f 0001 	mvn.w	r0, #1
 8015254:	e7f8      	b.n	8015248 <__ascii_mbtowc+0x16>

08015256 <_realloc_r>:
 8015256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801525a:	4680      	mov	r8, r0
 801525c:	4615      	mov	r5, r2
 801525e:	460c      	mov	r4, r1
 8015260:	b921      	cbnz	r1, 801526c <_realloc_r+0x16>
 8015262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015266:	4611      	mov	r1, r2
 8015268:	f7ff b8e6 	b.w	8014438 <_malloc_r>
 801526c:	b92a      	cbnz	r2, 801527a <_realloc_r+0x24>
 801526e:	f7ff f86f 	bl	8014350 <_free_r>
 8015272:	2400      	movs	r4, #0
 8015274:	4620      	mov	r0, r4
 8015276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801527a:	f000 fa31 	bl	80156e0 <_malloc_usable_size_r>
 801527e:	4285      	cmp	r5, r0
 8015280:	4606      	mov	r6, r0
 8015282:	d802      	bhi.n	801528a <_realloc_r+0x34>
 8015284:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015288:	d8f4      	bhi.n	8015274 <_realloc_r+0x1e>
 801528a:	4629      	mov	r1, r5
 801528c:	4640      	mov	r0, r8
 801528e:	f7ff f8d3 	bl	8014438 <_malloc_r>
 8015292:	4607      	mov	r7, r0
 8015294:	2800      	cmp	r0, #0
 8015296:	d0ec      	beq.n	8015272 <_realloc_r+0x1c>
 8015298:	42b5      	cmp	r5, r6
 801529a:	462a      	mov	r2, r5
 801529c:	4621      	mov	r1, r4
 801529e:	bf28      	it	cs
 80152a0:	4632      	movcs	r2, r6
 80152a2:	f7fe f9dc 	bl	801365e <memcpy>
 80152a6:	4621      	mov	r1, r4
 80152a8:	4640      	mov	r0, r8
 80152aa:	f7ff f851 	bl	8014350 <_free_r>
 80152ae:	463c      	mov	r4, r7
 80152b0:	e7e0      	b.n	8015274 <_realloc_r+0x1e>

080152b2 <__ascii_wctomb>:
 80152b2:	4603      	mov	r3, r0
 80152b4:	4608      	mov	r0, r1
 80152b6:	b141      	cbz	r1, 80152ca <__ascii_wctomb+0x18>
 80152b8:	2aff      	cmp	r2, #255	@ 0xff
 80152ba:	d904      	bls.n	80152c6 <__ascii_wctomb+0x14>
 80152bc:	228a      	movs	r2, #138	@ 0x8a
 80152be:	601a      	str	r2, [r3, #0]
 80152c0:	f04f 30ff 	mov.w	r0, #4294967295
 80152c4:	4770      	bx	lr
 80152c6:	700a      	strb	r2, [r1, #0]
 80152c8:	2001      	movs	r0, #1
 80152ca:	4770      	bx	lr

080152cc <__sfputc_r>:
 80152cc:	6893      	ldr	r3, [r2, #8]
 80152ce:	3b01      	subs	r3, #1
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	b410      	push	{r4}
 80152d4:	6093      	str	r3, [r2, #8]
 80152d6:	da08      	bge.n	80152ea <__sfputc_r+0x1e>
 80152d8:	6994      	ldr	r4, [r2, #24]
 80152da:	42a3      	cmp	r3, r4
 80152dc:	db01      	blt.n	80152e2 <__sfputc_r+0x16>
 80152de:	290a      	cmp	r1, #10
 80152e0:	d103      	bne.n	80152ea <__sfputc_r+0x1e>
 80152e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152e6:	f7ff becb 	b.w	8015080 <__swbuf_r>
 80152ea:	6813      	ldr	r3, [r2, #0]
 80152ec:	1c58      	adds	r0, r3, #1
 80152ee:	6010      	str	r0, [r2, #0]
 80152f0:	7019      	strb	r1, [r3, #0]
 80152f2:	4608      	mov	r0, r1
 80152f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152f8:	4770      	bx	lr

080152fa <__sfputs_r>:
 80152fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152fc:	4606      	mov	r6, r0
 80152fe:	460f      	mov	r7, r1
 8015300:	4614      	mov	r4, r2
 8015302:	18d5      	adds	r5, r2, r3
 8015304:	42ac      	cmp	r4, r5
 8015306:	d101      	bne.n	801530c <__sfputs_r+0x12>
 8015308:	2000      	movs	r0, #0
 801530a:	e007      	b.n	801531c <__sfputs_r+0x22>
 801530c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015310:	463a      	mov	r2, r7
 8015312:	4630      	mov	r0, r6
 8015314:	f7ff ffda 	bl	80152cc <__sfputc_r>
 8015318:	1c43      	adds	r3, r0, #1
 801531a:	d1f3      	bne.n	8015304 <__sfputs_r+0xa>
 801531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015320 <_vfiprintf_r>:
 8015320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015324:	460d      	mov	r5, r1
 8015326:	b09d      	sub	sp, #116	@ 0x74
 8015328:	4614      	mov	r4, r2
 801532a:	4698      	mov	r8, r3
 801532c:	4606      	mov	r6, r0
 801532e:	b118      	cbz	r0, 8015338 <_vfiprintf_r+0x18>
 8015330:	6a03      	ldr	r3, [r0, #32]
 8015332:	b90b      	cbnz	r3, 8015338 <_vfiprintf_r+0x18>
 8015334:	f7fd ffe6 	bl	8013304 <__sinit>
 8015338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801533a:	07d9      	lsls	r1, r3, #31
 801533c:	d405      	bmi.n	801534a <_vfiprintf_r+0x2a>
 801533e:	89ab      	ldrh	r3, [r5, #12]
 8015340:	059a      	lsls	r2, r3, #22
 8015342:	d402      	bmi.n	801534a <_vfiprintf_r+0x2a>
 8015344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015346:	f7fe f980 	bl	801364a <__retarget_lock_acquire_recursive>
 801534a:	89ab      	ldrh	r3, [r5, #12]
 801534c:	071b      	lsls	r3, r3, #28
 801534e:	d501      	bpl.n	8015354 <_vfiprintf_r+0x34>
 8015350:	692b      	ldr	r3, [r5, #16]
 8015352:	b99b      	cbnz	r3, 801537c <_vfiprintf_r+0x5c>
 8015354:	4629      	mov	r1, r5
 8015356:	4630      	mov	r0, r6
 8015358:	f7ff fed0 	bl	80150fc <__swsetup_r>
 801535c:	b170      	cbz	r0, 801537c <_vfiprintf_r+0x5c>
 801535e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015360:	07dc      	lsls	r4, r3, #31
 8015362:	d504      	bpl.n	801536e <_vfiprintf_r+0x4e>
 8015364:	f04f 30ff 	mov.w	r0, #4294967295
 8015368:	b01d      	add	sp, #116	@ 0x74
 801536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801536e:	89ab      	ldrh	r3, [r5, #12]
 8015370:	0598      	lsls	r0, r3, #22
 8015372:	d4f7      	bmi.n	8015364 <_vfiprintf_r+0x44>
 8015374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015376:	f7fe f969 	bl	801364c <__retarget_lock_release_recursive>
 801537a:	e7f3      	b.n	8015364 <_vfiprintf_r+0x44>
 801537c:	2300      	movs	r3, #0
 801537e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015380:	2320      	movs	r3, #32
 8015382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015386:	f8cd 800c 	str.w	r8, [sp, #12]
 801538a:	2330      	movs	r3, #48	@ 0x30
 801538c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801553c <_vfiprintf_r+0x21c>
 8015390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015394:	f04f 0901 	mov.w	r9, #1
 8015398:	4623      	mov	r3, r4
 801539a:	469a      	mov	sl, r3
 801539c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153a0:	b10a      	cbz	r2, 80153a6 <_vfiprintf_r+0x86>
 80153a2:	2a25      	cmp	r2, #37	@ 0x25
 80153a4:	d1f9      	bne.n	801539a <_vfiprintf_r+0x7a>
 80153a6:	ebba 0b04 	subs.w	fp, sl, r4
 80153aa:	d00b      	beq.n	80153c4 <_vfiprintf_r+0xa4>
 80153ac:	465b      	mov	r3, fp
 80153ae:	4622      	mov	r2, r4
 80153b0:	4629      	mov	r1, r5
 80153b2:	4630      	mov	r0, r6
 80153b4:	f7ff ffa1 	bl	80152fa <__sfputs_r>
 80153b8:	3001      	adds	r0, #1
 80153ba:	f000 80a7 	beq.w	801550c <_vfiprintf_r+0x1ec>
 80153be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153c0:	445a      	add	r2, fp
 80153c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80153c4:	f89a 3000 	ldrb.w	r3, [sl]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f000 809f 	beq.w	801550c <_vfiprintf_r+0x1ec>
 80153ce:	2300      	movs	r3, #0
 80153d0:	f04f 32ff 	mov.w	r2, #4294967295
 80153d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153d8:	f10a 0a01 	add.w	sl, sl, #1
 80153dc:	9304      	str	r3, [sp, #16]
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80153e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80153e6:	4654      	mov	r4, sl
 80153e8:	2205      	movs	r2, #5
 80153ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153ee:	4853      	ldr	r0, [pc, #332]	@ (801553c <_vfiprintf_r+0x21c>)
 80153f0:	f7ea feee 	bl	80001d0 <memchr>
 80153f4:	9a04      	ldr	r2, [sp, #16]
 80153f6:	b9d8      	cbnz	r0, 8015430 <_vfiprintf_r+0x110>
 80153f8:	06d1      	lsls	r1, r2, #27
 80153fa:	bf44      	itt	mi
 80153fc:	2320      	movmi	r3, #32
 80153fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015402:	0713      	lsls	r3, r2, #28
 8015404:	bf44      	itt	mi
 8015406:	232b      	movmi	r3, #43	@ 0x2b
 8015408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801540c:	f89a 3000 	ldrb.w	r3, [sl]
 8015410:	2b2a      	cmp	r3, #42	@ 0x2a
 8015412:	d015      	beq.n	8015440 <_vfiprintf_r+0x120>
 8015414:	9a07      	ldr	r2, [sp, #28]
 8015416:	4654      	mov	r4, sl
 8015418:	2000      	movs	r0, #0
 801541a:	f04f 0c0a 	mov.w	ip, #10
 801541e:	4621      	mov	r1, r4
 8015420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015424:	3b30      	subs	r3, #48	@ 0x30
 8015426:	2b09      	cmp	r3, #9
 8015428:	d94b      	bls.n	80154c2 <_vfiprintf_r+0x1a2>
 801542a:	b1b0      	cbz	r0, 801545a <_vfiprintf_r+0x13a>
 801542c:	9207      	str	r2, [sp, #28]
 801542e:	e014      	b.n	801545a <_vfiprintf_r+0x13a>
 8015430:	eba0 0308 	sub.w	r3, r0, r8
 8015434:	fa09 f303 	lsl.w	r3, r9, r3
 8015438:	4313      	orrs	r3, r2
 801543a:	9304      	str	r3, [sp, #16]
 801543c:	46a2      	mov	sl, r4
 801543e:	e7d2      	b.n	80153e6 <_vfiprintf_r+0xc6>
 8015440:	9b03      	ldr	r3, [sp, #12]
 8015442:	1d19      	adds	r1, r3, #4
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	9103      	str	r1, [sp, #12]
 8015448:	2b00      	cmp	r3, #0
 801544a:	bfbb      	ittet	lt
 801544c:	425b      	neglt	r3, r3
 801544e:	f042 0202 	orrlt.w	r2, r2, #2
 8015452:	9307      	strge	r3, [sp, #28]
 8015454:	9307      	strlt	r3, [sp, #28]
 8015456:	bfb8      	it	lt
 8015458:	9204      	strlt	r2, [sp, #16]
 801545a:	7823      	ldrb	r3, [r4, #0]
 801545c:	2b2e      	cmp	r3, #46	@ 0x2e
 801545e:	d10a      	bne.n	8015476 <_vfiprintf_r+0x156>
 8015460:	7863      	ldrb	r3, [r4, #1]
 8015462:	2b2a      	cmp	r3, #42	@ 0x2a
 8015464:	d132      	bne.n	80154cc <_vfiprintf_r+0x1ac>
 8015466:	9b03      	ldr	r3, [sp, #12]
 8015468:	1d1a      	adds	r2, r3, #4
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	9203      	str	r2, [sp, #12]
 801546e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015472:	3402      	adds	r4, #2
 8015474:	9305      	str	r3, [sp, #20]
 8015476:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801554c <_vfiprintf_r+0x22c>
 801547a:	7821      	ldrb	r1, [r4, #0]
 801547c:	2203      	movs	r2, #3
 801547e:	4650      	mov	r0, sl
 8015480:	f7ea fea6 	bl	80001d0 <memchr>
 8015484:	b138      	cbz	r0, 8015496 <_vfiprintf_r+0x176>
 8015486:	9b04      	ldr	r3, [sp, #16]
 8015488:	eba0 000a 	sub.w	r0, r0, sl
 801548c:	2240      	movs	r2, #64	@ 0x40
 801548e:	4082      	lsls	r2, r0
 8015490:	4313      	orrs	r3, r2
 8015492:	3401      	adds	r4, #1
 8015494:	9304      	str	r3, [sp, #16]
 8015496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801549a:	4829      	ldr	r0, [pc, #164]	@ (8015540 <_vfiprintf_r+0x220>)
 801549c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80154a0:	2206      	movs	r2, #6
 80154a2:	f7ea fe95 	bl	80001d0 <memchr>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d03f      	beq.n	801552a <_vfiprintf_r+0x20a>
 80154aa:	4b26      	ldr	r3, [pc, #152]	@ (8015544 <_vfiprintf_r+0x224>)
 80154ac:	bb1b      	cbnz	r3, 80154f6 <_vfiprintf_r+0x1d6>
 80154ae:	9b03      	ldr	r3, [sp, #12]
 80154b0:	3307      	adds	r3, #7
 80154b2:	f023 0307 	bic.w	r3, r3, #7
 80154b6:	3308      	adds	r3, #8
 80154b8:	9303      	str	r3, [sp, #12]
 80154ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154bc:	443b      	add	r3, r7
 80154be:	9309      	str	r3, [sp, #36]	@ 0x24
 80154c0:	e76a      	b.n	8015398 <_vfiprintf_r+0x78>
 80154c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80154c6:	460c      	mov	r4, r1
 80154c8:	2001      	movs	r0, #1
 80154ca:	e7a8      	b.n	801541e <_vfiprintf_r+0xfe>
 80154cc:	2300      	movs	r3, #0
 80154ce:	3401      	adds	r4, #1
 80154d0:	9305      	str	r3, [sp, #20]
 80154d2:	4619      	mov	r1, r3
 80154d4:	f04f 0c0a 	mov.w	ip, #10
 80154d8:	4620      	mov	r0, r4
 80154da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154de:	3a30      	subs	r2, #48	@ 0x30
 80154e0:	2a09      	cmp	r2, #9
 80154e2:	d903      	bls.n	80154ec <_vfiprintf_r+0x1cc>
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d0c6      	beq.n	8015476 <_vfiprintf_r+0x156>
 80154e8:	9105      	str	r1, [sp, #20]
 80154ea:	e7c4      	b.n	8015476 <_vfiprintf_r+0x156>
 80154ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80154f0:	4604      	mov	r4, r0
 80154f2:	2301      	movs	r3, #1
 80154f4:	e7f0      	b.n	80154d8 <_vfiprintf_r+0x1b8>
 80154f6:	ab03      	add	r3, sp, #12
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	462a      	mov	r2, r5
 80154fc:	4b12      	ldr	r3, [pc, #72]	@ (8015548 <_vfiprintf_r+0x228>)
 80154fe:	a904      	add	r1, sp, #16
 8015500:	4630      	mov	r0, r6
 8015502:	f7fd fabb 	bl	8012a7c <_printf_float>
 8015506:	4607      	mov	r7, r0
 8015508:	1c78      	adds	r0, r7, #1
 801550a:	d1d6      	bne.n	80154ba <_vfiprintf_r+0x19a>
 801550c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801550e:	07d9      	lsls	r1, r3, #31
 8015510:	d405      	bmi.n	801551e <_vfiprintf_r+0x1fe>
 8015512:	89ab      	ldrh	r3, [r5, #12]
 8015514:	059a      	lsls	r2, r3, #22
 8015516:	d402      	bmi.n	801551e <_vfiprintf_r+0x1fe>
 8015518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801551a:	f7fe f897 	bl	801364c <__retarget_lock_release_recursive>
 801551e:	89ab      	ldrh	r3, [r5, #12]
 8015520:	065b      	lsls	r3, r3, #25
 8015522:	f53f af1f 	bmi.w	8015364 <_vfiprintf_r+0x44>
 8015526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015528:	e71e      	b.n	8015368 <_vfiprintf_r+0x48>
 801552a:	ab03      	add	r3, sp, #12
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	462a      	mov	r2, r5
 8015530:	4b05      	ldr	r3, [pc, #20]	@ (8015548 <_vfiprintf_r+0x228>)
 8015532:	a904      	add	r1, sp, #16
 8015534:	4630      	mov	r0, r6
 8015536:	f7fd fd39 	bl	8012fac <_printf_i>
 801553a:	e7e4      	b.n	8015506 <_vfiprintf_r+0x1e6>
 801553c:	08016bd8 	.word	0x08016bd8
 8015540:	08016be2 	.word	0x08016be2
 8015544:	08012a7d 	.word	0x08012a7d
 8015548:	080152fb 	.word	0x080152fb
 801554c:	08016bde 	.word	0x08016bde

08015550 <__swhatbuf_r>:
 8015550:	b570      	push	{r4, r5, r6, lr}
 8015552:	460c      	mov	r4, r1
 8015554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015558:	2900      	cmp	r1, #0
 801555a:	b096      	sub	sp, #88	@ 0x58
 801555c:	4615      	mov	r5, r2
 801555e:	461e      	mov	r6, r3
 8015560:	da0d      	bge.n	801557e <__swhatbuf_r+0x2e>
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015568:	f04f 0100 	mov.w	r1, #0
 801556c:	bf14      	ite	ne
 801556e:	2340      	movne	r3, #64	@ 0x40
 8015570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015574:	2000      	movs	r0, #0
 8015576:	6031      	str	r1, [r6, #0]
 8015578:	602b      	str	r3, [r5, #0]
 801557a:	b016      	add	sp, #88	@ 0x58
 801557c:	bd70      	pop	{r4, r5, r6, pc}
 801557e:	466a      	mov	r2, sp
 8015580:	f000 f878 	bl	8015674 <_fstat_r>
 8015584:	2800      	cmp	r0, #0
 8015586:	dbec      	blt.n	8015562 <__swhatbuf_r+0x12>
 8015588:	9901      	ldr	r1, [sp, #4]
 801558a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801558e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015592:	4259      	negs	r1, r3
 8015594:	4159      	adcs	r1, r3
 8015596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801559a:	e7eb      	b.n	8015574 <__swhatbuf_r+0x24>

0801559c <__smakebuf_r>:
 801559c:	898b      	ldrh	r3, [r1, #12]
 801559e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155a0:	079d      	lsls	r5, r3, #30
 80155a2:	4606      	mov	r6, r0
 80155a4:	460c      	mov	r4, r1
 80155a6:	d507      	bpl.n	80155b8 <__smakebuf_r+0x1c>
 80155a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80155ac:	6023      	str	r3, [r4, #0]
 80155ae:	6123      	str	r3, [r4, #16]
 80155b0:	2301      	movs	r3, #1
 80155b2:	6163      	str	r3, [r4, #20]
 80155b4:	b003      	add	sp, #12
 80155b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155b8:	ab01      	add	r3, sp, #4
 80155ba:	466a      	mov	r2, sp
 80155bc:	f7ff ffc8 	bl	8015550 <__swhatbuf_r>
 80155c0:	9f00      	ldr	r7, [sp, #0]
 80155c2:	4605      	mov	r5, r0
 80155c4:	4639      	mov	r1, r7
 80155c6:	4630      	mov	r0, r6
 80155c8:	f7fe ff36 	bl	8014438 <_malloc_r>
 80155cc:	b948      	cbnz	r0, 80155e2 <__smakebuf_r+0x46>
 80155ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155d2:	059a      	lsls	r2, r3, #22
 80155d4:	d4ee      	bmi.n	80155b4 <__smakebuf_r+0x18>
 80155d6:	f023 0303 	bic.w	r3, r3, #3
 80155da:	f043 0302 	orr.w	r3, r3, #2
 80155de:	81a3      	strh	r3, [r4, #12]
 80155e0:	e7e2      	b.n	80155a8 <__smakebuf_r+0xc>
 80155e2:	89a3      	ldrh	r3, [r4, #12]
 80155e4:	6020      	str	r0, [r4, #0]
 80155e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155ea:	81a3      	strh	r3, [r4, #12]
 80155ec:	9b01      	ldr	r3, [sp, #4]
 80155ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80155f2:	b15b      	cbz	r3, 801560c <__smakebuf_r+0x70>
 80155f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155f8:	4630      	mov	r0, r6
 80155fa:	f000 f84d 	bl	8015698 <_isatty_r>
 80155fe:	b128      	cbz	r0, 801560c <__smakebuf_r+0x70>
 8015600:	89a3      	ldrh	r3, [r4, #12]
 8015602:	f023 0303 	bic.w	r3, r3, #3
 8015606:	f043 0301 	orr.w	r3, r3, #1
 801560a:	81a3      	strh	r3, [r4, #12]
 801560c:	89a3      	ldrh	r3, [r4, #12]
 801560e:	431d      	orrs	r5, r3
 8015610:	81a5      	strh	r5, [r4, #12]
 8015612:	e7cf      	b.n	80155b4 <__smakebuf_r+0x18>

08015614 <_raise_r>:
 8015614:	291f      	cmp	r1, #31
 8015616:	b538      	push	{r3, r4, r5, lr}
 8015618:	4605      	mov	r5, r0
 801561a:	460c      	mov	r4, r1
 801561c:	d904      	bls.n	8015628 <_raise_r+0x14>
 801561e:	2316      	movs	r3, #22
 8015620:	6003      	str	r3, [r0, #0]
 8015622:	f04f 30ff 	mov.w	r0, #4294967295
 8015626:	bd38      	pop	{r3, r4, r5, pc}
 8015628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801562a:	b112      	cbz	r2, 8015632 <_raise_r+0x1e>
 801562c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015630:	b94b      	cbnz	r3, 8015646 <_raise_r+0x32>
 8015632:	4628      	mov	r0, r5
 8015634:	f000 f852 	bl	80156dc <_getpid_r>
 8015638:	4622      	mov	r2, r4
 801563a:	4601      	mov	r1, r0
 801563c:	4628      	mov	r0, r5
 801563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015642:	f000 b839 	b.w	80156b8 <_kill_r>
 8015646:	2b01      	cmp	r3, #1
 8015648:	d00a      	beq.n	8015660 <_raise_r+0x4c>
 801564a:	1c59      	adds	r1, r3, #1
 801564c:	d103      	bne.n	8015656 <_raise_r+0x42>
 801564e:	2316      	movs	r3, #22
 8015650:	6003      	str	r3, [r0, #0]
 8015652:	2001      	movs	r0, #1
 8015654:	e7e7      	b.n	8015626 <_raise_r+0x12>
 8015656:	2100      	movs	r1, #0
 8015658:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801565c:	4620      	mov	r0, r4
 801565e:	4798      	blx	r3
 8015660:	2000      	movs	r0, #0
 8015662:	e7e0      	b.n	8015626 <_raise_r+0x12>

08015664 <raise>:
 8015664:	4b02      	ldr	r3, [pc, #8]	@ (8015670 <raise+0xc>)
 8015666:	4601      	mov	r1, r0
 8015668:	6818      	ldr	r0, [r3, #0]
 801566a:	f7ff bfd3 	b.w	8015614 <_raise_r>
 801566e:	bf00      	nop
 8015670:	2000030c 	.word	0x2000030c

08015674 <_fstat_r>:
 8015674:	b538      	push	{r3, r4, r5, lr}
 8015676:	4d07      	ldr	r5, [pc, #28]	@ (8015694 <_fstat_r+0x20>)
 8015678:	2300      	movs	r3, #0
 801567a:	4604      	mov	r4, r0
 801567c:	4608      	mov	r0, r1
 801567e:	4611      	mov	r1, r2
 8015680:	602b      	str	r3, [r5, #0]
 8015682:	f7f4 fb6f 	bl	8009d64 <_fstat>
 8015686:	1c43      	adds	r3, r0, #1
 8015688:	d102      	bne.n	8015690 <_fstat_r+0x1c>
 801568a:	682b      	ldr	r3, [r5, #0]
 801568c:	b103      	cbz	r3, 8015690 <_fstat_r+0x1c>
 801568e:	6023      	str	r3, [r4, #0]
 8015690:	bd38      	pop	{r3, r4, r5, pc}
 8015692:	bf00      	nop
 8015694:	20014564 	.word	0x20014564

08015698 <_isatty_r>:
 8015698:	b538      	push	{r3, r4, r5, lr}
 801569a:	4d06      	ldr	r5, [pc, #24]	@ (80156b4 <_isatty_r+0x1c>)
 801569c:	2300      	movs	r3, #0
 801569e:	4604      	mov	r4, r0
 80156a0:	4608      	mov	r0, r1
 80156a2:	602b      	str	r3, [r5, #0]
 80156a4:	f7f4 fb6e 	bl	8009d84 <_isatty>
 80156a8:	1c43      	adds	r3, r0, #1
 80156aa:	d102      	bne.n	80156b2 <_isatty_r+0x1a>
 80156ac:	682b      	ldr	r3, [r5, #0]
 80156ae:	b103      	cbz	r3, 80156b2 <_isatty_r+0x1a>
 80156b0:	6023      	str	r3, [r4, #0]
 80156b2:	bd38      	pop	{r3, r4, r5, pc}
 80156b4:	20014564 	.word	0x20014564

080156b8 <_kill_r>:
 80156b8:	b538      	push	{r3, r4, r5, lr}
 80156ba:	4d07      	ldr	r5, [pc, #28]	@ (80156d8 <_kill_r+0x20>)
 80156bc:	2300      	movs	r3, #0
 80156be:	4604      	mov	r4, r0
 80156c0:	4608      	mov	r0, r1
 80156c2:	4611      	mov	r1, r2
 80156c4:	602b      	str	r3, [r5, #0]
 80156c6:	f7f4 faed 	bl	8009ca4 <_kill>
 80156ca:	1c43      	adds	r3, r0, #1
 80156cc:	d102      	bne.n	80156d4 <_kill_r+0x1c>
 80156ce:	682b      	ldr	r3, [r5, #0]
 80156d0:	b103      	cbz	r3, 80156d4 <_kill_r+0x1c>
 80156d2:	6023      	str	r3, [r4, #0]
 80156d4:	bd38      	pop	{r3, r4, r5, pc}
 80156d6:	bf00      	nop
 80156d8:	20014564 	.word	0x20014564

080156dc <_getpid_r>:
 80156dc:	f7f4 bada 	b.w	8009c94 <_getpid>

080156e0 <_malloc_usable_size_r>:
 80156e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156e4:	1f18      	subs	r0, r3, #4
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	bfbc      	itt	lt
 80156ea:	580b      	ldrlt	r3, [r1, r0]
 80156ec:	18c0      	addlt	r0, r0, r3
 80156ee:	4770      	bx	lr

080156f0 <_init>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	bf00      	nop
 80156f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156f6:	bc08      	pop	{r3}
 80156f8:	469e      	mov	lr, r3
 80156fa:	4770      	bx	lr

080156fc <_fini>:
 80156fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156fe:	bf00      	nop
 8015700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015702:	bc08      	pop	{r3}
 8015704:	469e      	mov	lr, r3
 8015706:	4770      	bx	lr
