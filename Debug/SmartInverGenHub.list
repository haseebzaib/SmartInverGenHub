
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f0c  08013da0  08013da0  00014da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_6x10_mf 00000972  08014cac  08014cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000002  0801561e  0801561e  0001661e  2**0
                  ALLOC
  5 .ARM          00000008  08015620  08015620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08015628  08015628  00017238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08015628  08015628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801563c  0801563c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000238  20000000  08015640  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00017238  2**0
                  CONTENTS
 11 .bss          0000e6f4  20000238  20000238  00017238  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000e92c  2000e92c  00017238  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY
 14 .debug_info   000621a4  00000000  00000000  00017268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b330  00000000  00000000  0007940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003510  00000000  00000000  00084740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002861  00000000  00000000  00087c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000348c1  00000000  00000000  0008a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047d6f  00000000  00000000  000bed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108f00  00000000  00000000  00106ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020f9e1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ee94  00000000  00000000  0020fa24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0021e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d88 	.word	0x08013d88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08013d88 	.word	0x08013d88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_Z11ControlTaskPv>:

char batTime[20];



void ControlTask(void *pvParameters) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
 8000f7e:	af04      	add	r7, sp, #16
 8000f80:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000f84:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8000f88:	6018      	str	r0, [r3, #0]

	struct ModemData_Queue ModemData = { 0 };
 8000f8a:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8000f8e:	22d9      	movs	r2, #217	@ 0xd9
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f010 fd9b 	bl	8011ace <memset>

	struct ControlData_Queue ControlData = { 0 };
 8000f98:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000f9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2374      	movs	r3, #116	@ 0x74
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f010 fd91 	bl	8011ace <memset>

	InverterData_Queue InverterData = { 0 };
 8000fac:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000fb0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f010 fd86 	bl	8011ace <memset>

	System_Rtos::delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc6:	f003 ff6b 	bl	8004ea0 <_ZN11System_Rtos5delayEm>


	//parsing.convertEpochToSTMTime(&hrtc, 1732186868, 5);

	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 8000fca:	f001 f88d 	bl	80020e8 <_ZN8UniqueID6GetUidEv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f010 fe85 	bl	8011ce6 <strcpy>
//		     HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
//		     ControlData.timestamp = parsing.convertToEpoch(sDate, sTime, 5);
//		     RTCsemaphore.semaphoreGive();
//		   }

		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 8000fdc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8000fe0:	3310      	adds	r3, #16
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	489d      	ldr	r0, [pc, #628]	@ (800125c <_Z11ControlTaskPv+0x2e4>)
 8000fe8:	f004 f884 	bl	80050f4 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
//		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
//				sTime.Seconds);
//		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
//				sDate.Year);

		if (ModemDataQueue.queueReceive((void*) &ModemData)
 8000fec:	f507 7369 	add.w	r3, r7, #932	@ 0x3a4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	489b      	ldr	r0, [pc, #620]	@ (8001260 <_Z11ControlTaskPv+0x2e8>)
 8000ff4:	f003 fff9 	bl	8004fea <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8000ff8:	4603      	mov	r3, r0
				== ModemDataQueue.queues_recived) {
 8000ffa:	2b00      	cmp	r3, #0
//					ModemData.internet == 1 ?
//							const_cast<char*>("Conn") :
//							const_cast<char*>("DisConn"));
		}

		if (InverterDataQueue.queueReceive((void*) &InverterData)
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4898      	ldr	r0, [pc, #608]	@ (8001264 <_Z11ControlTaskPv+0x2ec>)
 8001004:	f003 fff1 	bl	8004fea <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001008:	4603      	mov	r3, r0
				== InverterDataQueue.queues_recived) {
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
		if (InverterDataQueue.queueReceive((void*) &InverterData)
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 8095 	beq.w	8001144 <_Z11ControlTaskPv+0x1cc>

			ControlData.batteryLevel =
					std::atoi(
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	3364      	adds	r3, #100	@ 0x64
 8001020:	4618      	mov	r0, r3
 8001022:	f00f ff4f 	bl	8010ec4 <atoi>
 8001026:	4602      	mov	r2, r0
			ControlData.batteryLevel =
 8001028:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800102c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001030:	661a      	str	r2, [r3, #96]	@ 0x60
							const_cast<const char*>(InverterData.inverterData_qpigs[static_cast<int>(inverter_data_qpigs_cmd::batt_cap)]));

			parsing.binarystringToUint8(
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	33a0      	adds	r3, #160	@ 0xa0
 8001038:	4a8b      	ldr	r2, [pc, #556]	@ (8001268 <_Z11ControlTaskPv+0x2f0>)
 800103a:	4619      	mov	r1, r3
 800103c:	488b      	ldr	r0, [pc, #556]	@ (800126c <_Z11ControlTaskPv+0x2f4>)
 800103e:	f004 fc44 	bl	80058ca <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh>
					InverterData.inverterData_qpigs[static_cast<int>(inverter_data_qpigs_cmd::dev_stat_1)],
					&batt_charging_status);
			if (InverterData.device_mode == 3) {
 8001042:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001046:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800104a:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 800104e:	2b03      	cmp	r3, #3
//				LCD.SendTextData(LCD.source_bat, const_cast<char*>("OFF"));
//				LCD.SendTextData(LCD.source_gen, const_cast<char*>("OFF"));
//				LCD.SendTextData(LCD.source_sol, const_cast<char*>("OFF"));
			}

			ControlData.sourceIdentification = InverterData.device_mode;
 8001050:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001054:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001058:	f893 22c1 	ldrb.w	r2, [r3, #705]	@ 0x2c1
 800105c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001060:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

//			LCD.SendNumericData(LCD.Battery,
//					static_cast<uint16_t>(ControlData.batteryLevel));

			ControlData.V_1 = InverterData.rms_volt1;
 8001068:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800106c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001070:	f8d3 2318 	ldr.w	r2, [r3, #792]	@ 0x318
 8001074:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001078:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800107c:	615a      	str	r2, [r3, #20]
			ControlData.V_2 = InverterData.rms_volt2;
 800107e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001082:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001086:	f8d3 231c 	ldr.w	r2, [r3, #796]	@ 0x31c
 800108a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800108e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001092:	619a      	str	r2, [r3, #24]
			ControlData.V_3 = InverterData.rms_volt3;
 8001094:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001098:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800109c:	f8d3 2320 	ldr.w	r2, [r3, #800]	@ 0x320
 80010a0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010a8:	61da      	str	r2, [r3, #28]

			ControlData.I_1 = InverterData.pzem1_data.current;
 80010aa:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010ae:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80010b2:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 80010b6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010be:	621a      	str	r2, [r3, #32]
			ControlData.I_2 = InverterData.pzem2_data.current;
 80010c0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010c4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80010c8:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 80010cc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
			ControlData.I_3 = InverterData.pzem3_data.current;
 80010d6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010da:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80010de:	f8d3 2300 	ldr.w	r2, [r3, #768]	@ 0x300
 80010e2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010e6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28

			ControlData.P_1 = InverterData.pzem1_data.power;
 80010ec:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010f0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80010f4:	f8d3 22cc 	ldr.w	r2, [r3, #716]	@ 0x2cc
 80010f8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
			ControlData.P_2 = InverterData.pzem2_data.power;
 8001102:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001106:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800110a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800110e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001112:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001116:	631a      	str	r2, [r3, #48]	@ 0x30
			ControlData.P_3 = InverterData.pzem3_data.power;
 8001118:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800111c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001120:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 8001124:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001128:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34

			ControlData.Energy = InverterData.pzem1_data.energy;
 800112e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001132:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001136:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800113a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800113e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001142:	639a      	str	r2, [r3, #56]	@ 0x38
//
//			LCD.SendFloatData(LCD.energy, ControlData.Energy);

		}

		if ((batt_charging_status & 0x07) == SCC_AC_charge_on
 8001144:	4b48      	ldr	r3, [pc, #288]	@ (8001268 <_Z11ControlTaskPv+0x2f0>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	2b07      	cmp	r3, #7
 800114e:	d00b      	beq.n	8001168 <_Z11ControlTaskPv+0x1f0>
				|| (batt_charging_status & 0x07) == SCC_charge_on
 8001150:	4b45      	ldr	r3, [pc, #276]	@ (8001268 <_Z11ControlTaskPv+0x2f0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	2b06      	cmp	r3, #6
 800115a:	d005      	beq.n	8001168 <_Z11ControlTaskPv+0x1f0>
				|| (batt_charging_status & 0x07) == AC_charge_on) {
 800115c:	4b42      	ldr	r3, [pc, #264]	@ (8001268 <_Z11ControlTaskPv+0x2f0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	2b05      	cmp	r3, #5
 8001166:	d11f      	bne.n	80011a8 <_Z11ControlTaskPv+0x230>
			if (!batt_chargetimekeeping_Flag) {
 8001168:	4b41      	ldr	r3, [pc, #260]	@ (8001270 <_Z11ControlTaskPv+0x2f8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d13a      	bne.n	80011e6 <_Z11ControlTaskPv+0x26e>
				batt_chargetimekeeping_Flag = 1;
 8001170:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <_Z11ControlTaskPv+0x2f8>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeStartTime = ControlData.timestamp;
 8001176:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800117a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001184:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001188:	665a      	str	r2, [r3, #100]	@ 0x64
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 800118a:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <_Z11ControlTaskPv+0x2fc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 8001190:	4b38      	ldr	r3, [pc, #224]	@ (8001274 <_Z11ControlTaskPv+0x2fc>)
 8001192:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8001194:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 8001196:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <_Z11ControlTaskPv+0x2fc>)
 8001198:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	460b      	mov	r3, r1
 800119e:	4936      	ldr	r1, [pc, #216]	@ (8001278 <_Z11ControlTaskPv+0x300>)
 80011a0:	4836      	ldr	r0, [pc, #216]	@ (800127c <_Z11ControlTaskPv+0x304>)
 80011a2:	f010 fc31 	bl	8011a08 <siprintf>
			if (!batt_chargetimekeeping_Flag) {
 80011a6:	e01e      	b.n	80011e6 <_Z11ControlTaskPv+0x26e>
//				LCD.SendTextData(LCD.chrgT, batTime);
			}
		} else {
			if (batt_chargetimekeeping_Flag) {
 80011a8:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <_Z11ControlTaskPv+0x2f8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01a      	beq.n	80011e6 <_Z11ControlTaskPv+0x26e>
				batt_chargetimekeeping_Flag = 0;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <_Z11ControlTaskPv+0x2f8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeEndTime = ControlData.timestamp;
 80011b6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80011ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80011c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011c8:	669a      	str	r2, [r3, #104]	@ 0x68
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <_Z11ControlTaskPv+0x2fc>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <_Z11ControlTaskPv+0x2fc>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 80011d4:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 80011d6:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <_Z11ControlTaskPv+0x2fc>)
 80011d8:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	4926      	ldr	r1, [pc, #152]	@ (8001278 <_Z11ControlTaskPv+0x300>)
 80011e0:	4826      	ldr	r0, [pc, #152]	@ (800127c <_Z11ControlTaskPv+0x304>)
 80011e2:	f010 fc11 	bl	8011a08 <siprintf>
//				LCD.SendTextData(LCD.dchgT, batTime);
			}
		}

		liquidSensor.Measurement_loop(sensor_liquidMeas::liquidSensor::Meter,
 80011e6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80011ea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80011f4:	f102 0054 	add.w	r0, r2, #84	@ 0x54
 80011f8:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80011fc:	f102 0150 	add.w	r1, r2, #80	@ 0x50
 8001200:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8001204:	325c      	adds	r2, #92	@ 0x5c
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 800120c:	3258      	adds	r2, #88	@ 0x58
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8001280 <_Z11ControlTaskPv+0x308>
 800121a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800121e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001284 <_Z11ControlTaskPv+0x30c>
 8001222:	2100      	movs	r1, #0
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <_Z11ControlTaskPv+0x310>)
 8001226:	f003 fc6b 	bl	8004b00 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>
				0.0, 10.0, 3.3, &ControlData.fuelPer, &ControlData.fuelConsp,
				ControlData.timestamp, &ControlData.refuelingStartTime,
				&ControlData.refuelingEndTime);
		AHT20.measure(&ControlData.temp, &ControlData.humid);
 800122a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800122e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001232:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001236:	336c      	adds	r3, #108	@ 0x6c
 8001238:	4619      	mov	r1, r3
 800123a:	4814      	ldr	r0, [pc, #80]	@ (800128c <_Z11ControlTaskPv+0x314>)
 800123c:	f003 fb1e 	bl	800487c <_ZN15sensor_TempHumd5AHT207measureEPmS1_>
//		LCD.SendNumericData(LCD.Temperature,
//				static_cast<uint16_t>(ControlData.temp));
//		LCD.SendNumericData(LCD.Humidity,
//				static_cast<uint16_t>(ControlData.humid));

		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 8001240:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001244:	4619      	mov	r1, r3
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <_Z11ControlTaskPv+0x318>)
 8001248:	f003 feb2 	bl	8004fb0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 800124c:	2102      	movs	r1, #2
 800124e:	4811      	ldr	r0, [pc, #68]	@ (8001294 <_Z11ControlTaskPv+0x31c>)
 8001250:	f008 fff1 	bl	800a236 <HAL_GPIO_TogglePin>
		System_Rtos::delay(150);
 8001254:	2096      	movs	r0, #150	@ 0x96
 8001256:	f003 fe23 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 800125a:	e6bf      	b.n	8000fdc <_Z11ControlTaskPv+0x64>
 800125c:	20003498 	.word	0x20003498
 8001260:	20002fec 	.word	0x20002fec
 8001264:	2000343c 	.word	0x2000343c
 8001268:	200002a9 	.word	0x200002a9
 800126c:	200002a8 	.word	0x200002a8
 8001270:	200002aa 	.word	0x200002aa
 8001274:	20000254 	.word	0x20000254
 8001278:	08013da0 	.word	0x08013da0
 800127c:	200002ac 	.word	0x200002ac
 8001280:	40533333 	.word	0x40533333
 8001284:	00000000 	.word	0x00000000
 8001288:	20000268 	.word	0x20000268
 800128c:	20000294 	.word	0x20000294
 8001290:	200030bc 	.word	0x200030bc
 8001294:	40020000 	.word	0x40020000

08001298 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d112      	bne.n	80012ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10d      	bne.n	80012ce <_Z41__static_initialization_and_destruction_0ii+0x36>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1);
 80012b2:	4909      	ldr	r1, [pc, #36]	@ (80012d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80012b6:	f003 fbf9 	bl	8004aac <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	2238      	movs	r2, #56	@ 0x38
 80012c0:	4907      	ldr	r1, [pc, #28]	@ (80012e0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80012c2:	4808      	ldr	r0, [pc, #32]	@ (80012e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012c4:	f003 fac2 	bl	800484c <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
System_sys::Parsing_Checking parsing;
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80012ca:	f004 f95a 	bl	8005582 <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20003a00 	.word	0x20003a00
 80012dc:	20000268 	.word	0x20000268
 80012e0:	20003af0 	.word	0x20003af0
 80012e4:	20000294 	.word	0x20000294
 80012e8:	200002a8 	.word	0x200002a8

080012ec <_GLOBAL__sub_I_sDate>:
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff ffcf 	bl	8001298 <_Z41__static_initialization_and_destruction_0ii>
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv>:

u8g2_t u8g2_M;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	72fb      	strb	r3, [r7, #11]
 800130a:	4613      	mov	r3, r2
 800130c:	72bb      	strb	r3, [r7, #10]
      /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
      switch(msg)
 800130e:	7afb      	ldrb	r3, [r7, #11]
 8001310:	3b28      	subs	r3, #40	@ 0x28
 8001312:	2b23      	cmp	r3, #35	@ 0x23
 8001314:	d867      	bhi.n	80013e6 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
 8001316:	a201      	add	r2, pc, #4	@ (adr r2, 800131c <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x20>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	080013e7 	.word	0x080013e7
 8001320:	080013ad 	.word	0x080013ad
 8001324:	080013e7 	.word	0x080013e7
 8001328:	080013e7 	.word	0x080013e7
 800132c:	080013e7 	.word	0x080013e7
 8001330:	080013e7 	.word	0x080013e7
 8001334:	080013e7 	.word	0x080013e7
 8001338:	080013e7 	.word	0x080013e7
 800133c:	080013e7 	.word	0x080013e7
 8001340:	080013e7 	.word	0x080013e7
 8001344:	080013e7 	.word	0x080013e7
 8001348:	080013e7 	.word	0x080013e7
 800134c:	080013e7 	.word	0x080013e7
 8001350:	080013e7 	.word	0x080013e7
 8001354:	080013e7 	.word	0x080013e7
 8001358:	080013e7 	.word	0x080013e7
 800135c:	080013e7 	.word	0x080013e7
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013e7 	.word	0x080013e7
 8001368:	080013e7 	.word	0x080013e7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013e7 	.word	0x080013e7
 8001374:	080013e7 	.word	0x080013e7
 8001378:	080013e7 	.word	0x080013e7
 800137c:	080013e7 	.word	0x080013e7
 8001380:	080013e7 	.word	0x080013e7
 8001384:	080013e7 	.word	0x080013e7
 8001388:	080013e7 	.word	0x080013e7
 800138c:	080013e7 	.word	0x080013e7
 8001390:	080013e7 	.word	0x080013e7
 8001394:	080013e7 	.word	0x080013e7
 8001398:	080013e7 	.word	0x080013e7
 800139c:	080013e7 	.word	0x080013e7
 80013a0:	080013b7 	.word	0x080013b7
 80013a4:	080013c7 	.word	0x080013c7
 80013a8:	080013d7 	.word	0x080013d7
      case U8X8_MSG_GPIO_AND_DELAY_INIT:
          /* Insert codes for initialization */
          break;
      case U8X8_MSG_DELAY_MILLI:
          /* ms Delay */
       	System_Rtos::delay(arg_int);
 80013ac:	7abb      	ldrb	r3, [r7, #10]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fd76 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
          break;
 80013b4:	e017      	b.n	80013e6 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_CS:
          /* Insert codes for SS pin control */
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, (GPIO_PinState)arg_int);
 80013b6:	7abb      	ldrb	r3, [r7, #10]
 80013b8:	461a      	mov	r2, r3
 80013ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013be:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 80013c0:	f008 ff20 	bl	800a204 <HAL_GPIO_WritePin>

          break;
 80013c4:	e00f      	b.n	80013e6 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_DC:
          /* Insert codes for DC pin control */
            HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, (GPIO_PinState)arg_int);
 80013c6:	7abb      	ldrb	r3, [r7, #10]
 80013c8:	461a      	mov	r2, r3
 80013ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf8>)
 80013d0:	f008 ff18 	bl	800a204 <HAL_GPIO_WritePin>

          break;
 80013d4:	e007      	b.n	80013e6 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_RESET:
          /* Insert codes for RST pin control */
           HAL_GPIO_WritePin(DISPLAY_RES_GPIO_Port, DISPLAY_RES_Pin,  (GPIO_PinState)arg_int);
 80013d6:	7abb      	ldrb	r3, [r7, #10]
 80013d8:	461a      	mov	r2, r3
 80013da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf8>)
 80013e0:	f008 ff10 	bl	800a204 <HAL_GPIO_WritePin>

          break;
 80013e4:	bf00      	nop
      }
      return 1;
 80013e6:	2301      	movs	r3, #1
  }
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40020400 	.word	0x40020400

080013f8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	72fb      	strb	r3, [r7, #11]
 8001406:	4613      	mov	r3, r2
 8001408:	72bb      	strb	r3, [r7, #10]
      switch(msg) {
 800140a:	7afb      	ldrb	r3, [r7, #11]
 800140c:	3b14      	subs	r3, #20
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d844      	bhi.n	800149c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa4>
 8001412:	a201      	add	r2, pc, #4	@ (adr r2, 8001418 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	080014a1 	.word	0x080014a1
 800141c:	0800149d 	.word	0x0800149d
 8001420:	0800149d 	.word	0x0800149d
 8001424:	0800144d 	.word	0x0800144d
 8001428:	0800146d 	.word	0x0800146d
 800142c:	08001485 	.word	0x08001485
 8001430:	0800149d 	.word	0x0800149d
 8001434:	0800149d 	.word	0x0800149d
 8001438:	0800149d 	.word	0x0800149d
 800143c:	0800149d 	.word	0x0800149d
 8001440:	0800149d 	.word	0x0800149d
 8001444:	0800149d 	.word	0x0800149d
 8001448:	0800145f 	.word	0x0800145f
      case U8X8_MSG_BYTE_SEND:
          /* Insert codes to transmit data */
          HAL_SPI_Transmit(&OLEDSpi,(uint8_t *)arg_ptr, arg_int, 5000);
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	b29a      	uxth	r2, r3
 8001450:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4815      	ldr	r0, [pc, #84]	@ (80014ac <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb4>)
 8001458:	f00a fff5 	bl	800c446 <HAL_SPI_Transmit>
           break;
 800145c:	e021      	b.n	80014a2 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
          /* Insert codes to begin SPI transmission */

          break;
      case U8X8_MSG_BYTE_SET_DC:
          /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
          u8x8_gpio_SetDC(u8x8, arg_int);
 800145e:	7abb      	ldrb	r3, [r7, #10]
 8001460:	461a      	mov	r2, r3
 8001462:	214a      	movs	r1, #74	@ 0x4a
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f006 f86d 	bl	8007544 <u8x8_gpio_call>
          break;
 800146a:	e01a      	b.n	80014a2 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_START_TRANSFER:
          /* Select slave, U8X8_MSG_GPIO_CS will be called */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	2149      	movs	r1, #73	@ 0x49
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f006 f864 	bl	8007544 <u8x8_gpio_call>
        	System_Rtos::delay(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f003 fd0f 	bl	8004ea0 <_ZN11System_Rtos5delayEm>

          break;
 8001482:	e00e      	b.n	80014a2 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_END_TRANSFER:
    	  	System_Rtos::delay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f003 fd0b 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
          /* Insert codes to end SPI transmission */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	461a      	mov	r2, r3
 8001492:	2149      	movs	r1, #73	@ 0x49
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f006 f855 	bl	8007544 <u8x8_gpio_call>
          break;
 800149a:	e002      	b.n	80014a2 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      default:
          return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	e001      	b.n	80014a4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
          break;
 80014a0:	bf00      	nop
      }
      return 1;
 80014a2:	2301      	movs	r3, #1
  }
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20003b64 	.word	0x20003b64

080014b0 <_Z11DisplayTaskPv>:


void DisplayTask(void *pvParameters)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]

  u8g2_Setup_ssd1309_128x64_noname0_f(&u8g2_M, U8G2_R0, u8x8_byte_stm32_hw_spi,u8x8_stm32_gpio_and_delay);
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <_Z11DisplayTaskPv+0x64>)
 80014ba:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <_Z11DisplayTaskPv+0x68>)
 80014bc:	4917      	ldr	r1, [pc, #92]	@ (800151c <_Z11DisplayTaskPv+0x6c>)
 80014be:	4818      	ldr	r0, [pc, #96]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 80014c0:	f004 fce2 	bl	8005e88 <u8g2_Setup_ssd1309_128x64_noname0_f>
  u8g2_InitDisplay(&u8g2_M);
 80014c4:	4816      	ldr	r0, [pc, #88]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 80014c6:	f006 f80e 	bl	80074e6 <u8x8_InitDisplay>
  u8g2_ClearBuffer(&u8g2_M);
 80014ca:	4815      	ldr	r0, [pc, #84]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 80014cc:	f004 fc4b 	bl	8005d66 <u8g2_ClearBuffer>
  u8g2_SetPowerSave(&u8g2_M, 0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4813      	ldr	r0, [pc, #76]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 80014d4:	f006 f816 	bl	8007504 <u8x8_SetPowerSave>
  u8g2_DrawXBM(&u8g2_M,32,0,smartgrid.w,smartgrid.h,smartgrid.img);
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <_Z11DisplayTaskPv+0x74>)
 80014da:	7919      	ldrb	r1, [r3, #4]
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <_Z11DisplayTaskPv+0x74>)
 80014de:	795b      	ldrb	r3, [r3, #5]
 80014e0:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <_Z11DisplayTaskPv+0x74>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	9201      	str	r2, [sp, #4]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	460b      	mov	r3, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	2120      	movs	r1, #32
 80014ee:	480c      	ldr	r0, [pc, #48]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 80014f0:	f004 fbf6 	bl	8005ce0 <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2_M);
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 80014f6:	f004 fca9 	bl	8005e4c <u8g2_SendBuffer>
  System_Rtos::delay(5000);
 80014fa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014fe:	f003 fccf 	bl	8004ea0 <_ZN11System_Rtos5delayEm>


	while(1)
	{

		UI::loop(&u8g2_M);
 8001502:	4807      	ldr	r0, [pc, #28]	@ (8001520 <_Z11DisplayTaskPv+0x70>)
 8001504:	f004 fb3a 	bl	8005b7c <_ZN2UI4loopEP11u8g2_struct>
		System_Rtos::delay(500);
 8001508:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800150c:	f003 fcc8 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
		UI::loop(&u8g2_M);
 8001510:	bf00      	nop
 8001512:	e7f6      	b.n	8001502 <_Z11DisplayTaskPv+0x52>
 8001514:	080012fd 	.word	0x080012fd
 8001518:	080013f9 	.word	0x080013f9
 800151c:	080148b0 	.word	0x080148b0
 8001520:	200002c0 	.word	0x200002c0
 8001524:	20000048 	.word	0x20000048

08001528 <_Z13calculate_rmsPttff>:

#define ADC_MAX 4095.0  // 12-bit ADC
#define V_REF 3.3     // ADC reference voltage
#define ZMPT_SCALE 1.0 // Adjust based on calibration

float calculate_rms(uint16_t *adc_buffer, uint16_t buffer_size, float vref, float adc_max_value) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	460b      	mov	r3, r1
 8001532:	ed87 0a01 	vstr	s0, [r7, #4]
 8001536:	edc7 0a00 	vstr	s1, [r7]
 800153a:	817b      	strh	r3, [r7, #10]
    float sum_square = 0.0;
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    float dc_offset = vref / 2.0;  // DC offset (e.g., 1.65V for 3.3V Vref)
 8001542:	ed97 7a01 	vldr	s14, [r7, #4]
 8001546:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	edc7 7a07 	vstr	s15, [r7, #28]

    for (uint16_t i = 0; i < buffer_size; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001556:	e027      	b.n	80015a8 <_Z13calculate_rmsPttff+0x80>
        // Convert ADC value to voltage
        float voltage = (adc_buffer[i] / adc_max_value) * vref;
 8001558:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800156a:	ed97 7a00 	vldr	s14, [r7]
 800156e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001572:	ed97 7a01 	vldr	s14, [r7, #4]
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	edc7 7a05 	vstr	s15, [r7, #20]

        // Subtract DC offset to get the AC component
        float ac_component = voltage - dc_offset;
 800157e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001582:	edd7 7a07 	vldr	s15, [r7, #28]
 8001586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158a:	edc7 7a04 	vstr	s15, [r7, #16]

        // Accumulate squared values
        sum_square += ac_component * ac_component;
 800158e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001592:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001596:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800159a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (uint16_t i = 0; i < buffer_size; i++) {
 80015a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015a4:	3301      	adds	r3, #1
 80015a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015a8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80015aa:	897b      	ldrh	r3, [r7, #10]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3d3      	bcc.n	8001558 <_Z13calculate_rmsPttff+0x30>
    }

    // Calculate mean of squared values
    float mean_square = sum_square / buffer_size;
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80015be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Return the RMS value
    return sqrt(mean_square);
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	f7fe ffbe 	bl	8000548 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	ec43 2b10 	vmov	d0, r2, r3
 80015d4:	f00f fb70 	bl	8010cb8 <sqrt>
 80015d8:	ec53 2b10 	vmov	r2, r3, d0
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fb02 	bl	8000be8 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
}
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	0000      	movs	r0, r0
	...

080015f8 <_Z12InverterTaskPv>:


void InverterTask(void *pvParameters) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 80015fe:	af00      	add	r7, sp, #0
 8001600:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001604:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001608:	6018      	str	r0, [r3, #0]

	InverterData_Queue InverterData = {0};
 800160a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800160e:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001612:	4618      	mov	r0, r3
 8001614:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8001618:	461a      	mov	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	f010 fa57 	bl	8011ace <memset>

	System_Rtos::delay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001624:	f003 fc3c 	bl	8004ea0 <_ZN11System_Rtos5delayEm>

	PZEM1.init();
 8001628:	487d      	ldr	r0, [pc, #500]	@ (8001820 <_Z12InverterTaskPv+0x228>)
 800162a:	f003 fc1d 	bl	8004e68 <_ZN11sensor_pzem9PZEM_004T4initEv>
	PZEM2.init();
 800162e:	487d      	ldr	r0, [pc, #500]	@ (8001824 <_Z12InverterTaskPv+0x22c>)
 8001630:	f003 fc1a 	bl	8004e68 <_ZN11sensor_pzem9PZEM_004T4initEv>
	PZEM3.init();
 8001634:	487c      	ldr	r0, [pc, #496]	@ (8001828 <_Z12InverterTaskPv+0x230>)
 8001636:	f003 fc17 	bl	8004e68 <_ZN11sensor_pzem9PZEM_004T4initEv>

HAL_ADC_Start_DMA(&hadc2,(uint32_t *) adcData, BUFFER_SIZE);
 800163a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800163e:	497b      	ldr	r1, [pc, #492]	@ (800182c <_Z12InverterTaskPv+0x234>)
 8001640:	487b      	ldr	r0, [pc, #492]	@ (8001830 <_Z12InverterTaskPv+0x238>)
 8001642:	f007 fbf3 	bl	8008e2c <HAL_ADC_Start_DMA>
HAL_TIM_Base_Start(&htim8);
 8001646:	487b      	ldr	r0, [pc, #492]	@ (8001834 <_Z12InverterTaskPv+0x23c>)
 8001648:	f00b f96e 	bl	800c928 <HAL_TIM_Base_Start>
//		PZEM3.read(&InverterData.pzem3_data);
//
//		//Voltronic.ProtocolID_Inquiry(protoID);
//		//Voltronic.DeviceID_Inquiry(devID);
//		//Voltronic.CPUFW_Ver_Inquiry(ver);
		Voltronic.DeviceStat_Inquiry_qpigs(InverterData.inverterData_qpigs);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4879      	ldr	r0, [pc, #484]	@ (8001838 <_Z12InverterTaskPv+0x240>)
 8001654:	f000 feb4 	bl	80023c0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c>
//		//Voltronic.DeviceStat_Inquiry_qipgs2(InverterData.inverterData_qpigs2);
//		//Voltronic.DeviceStat_Inquiry_qipgsN(InverterData.inverterData_qpigsN);
		Voltronic.DeviceStat_Inquiry_mode(&InverterData.device_mode);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	f203 23c1 	addw	r3, r3, #705	@ 0x2c1
 8001660:	4619      	mov	r1, r3
 8001662:	4875      	ldr	r0, [pc, #468]	@ (8001838 <_Z12InverterTaskPv+0x240>)
 8001664:	f000 ff24 	bl	80024b0 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh>



		if(flag)
 8001668:	4b74      	ldr	r3, [pc, #464]	@ (800183c <_Z12InverterTaskPv+0x244>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80c0 	beq.w	80017fe <_Z12InverterTaskPv+0x206>
		{
			flag = 0;
 800167e:	4b6f      	ldr	r3, [pc, #444]	@ (800183c <_Z12InverterTaskPv+0x244>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

			   // Perform RMS calculation
			 InverterData.rms_volt1 = calculate_rms(channel_1_data, SAMPLES_PER_CHANNEL,V_REF,ADC_MAX);
 8001684:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8001840 <_Z12InverterTaskPv+0x248>
 8001688:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8001844 <_Z12InverterTaskPv+0x24c>
 800168c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001690:	486d      	ldr	r0, [pc, #436]	@ (8001848 <_Z12InverterTaskPv+0x250>)
 8001692:	f7ff ff49 	bl	8001528 <_Z13calculate_rmsPttff>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800169e:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80016a2:	edc3 7ac6 	vstr	s15, [r3, #792]	@ 0x318
			 if( InverterData.rms_volt1 < 0.03)
 80016a6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80016aa:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80016ae:	f8d3 3318 	ldr.w	r3, [r3, #792]	@ 0x318
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff48 	bl	8000548 <__aeabi_f2d>
 80016b8:	a357      	add	r3, pc, #348	@ (adr r3, 8001818 <_Z12InverterTaskPv+0x220>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7ff fa0d 	bl	8000adc <__aeabi_dcmplt>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <_Z12InverterTaskPv+0xe2>
					 {
						 InverterData.rms_volt1 = 0;
 80016c8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80016cc:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 80016d8:	e00f      	b.n	80016fa <_Z12InverterTaskPv+0x102>
					 }
					 else
					 {
						 InverterData.rms_volt1 =  InverterData.rms_volt1*500.0;
 80016da:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80016de:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80016e2:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 80016e6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800184c <_Z12InverterTaskPv+0x254>
 80016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ee:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80016f2:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80016f6:	edc3 7ac6 	vstr	s15, [r3, #792]	@ 0x318
					 }


			 InverterData.rms_volt2 = calculate_rms(channel_2_data, SAMPLES_PER_CHANNEL,V_REF,ADC_MAX);
 80016fa:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001840 <_Z12InverterTaskPv+0x248>
 80016fe:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001844 <_Z12InverterTaskPv+0x24c>
 8001702:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001706:	4852      	ldr	r0, [pc, #328]	@ (8001850 <_Z12InverterTaskPv+0x258>)
 8001708:	f7ff ff0e 	bl	8001528 <_Z13calculate_rmsPttff>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001714:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001718:	edc3 7ac7 	vstr	s15, [r3, #796]	@ 0x31c
			 if( InverterData.rms_volt2 < 0.03)
 800171c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001720:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001724:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff0d 	bl	8000548 <__aeabi_f2d>
 800172e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001818 <_Z12InverterTaskPv+0x220>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff f9d2 	bl	8000adc <__aeabi_dcmplt>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <_Z12InverterTaskPv+0x158>
					 {
						 InverterData.rms_volt2 = 0;
 800173e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001742:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
 800174e:	e00f      	b.n	8001770 <_Z12InverterTaskPv+0x178>
					 }
					 else
					 {
						 InverterData.rms_volt2 =  InverterData.rms_volt2*500.0;
 8001750:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001754:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001758:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 800175c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800184c <_Z12InverterTaskPv+0x254>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001768:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800176c:	edc3 7ac7 	vstr	s15, [r3, #796]	@ 0x31c
					 }

			 InverterData.rms_volt3 = calculate_rms(channel_3_data, SAMPLES_PER_CHANNEL,V_REF,ADC_MAX);
 8001770:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8001840 <_Z12InverterTaskPv+0x248>
 8001774:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001844 <_Z12InverterTaskPv+0x24c>
 8001778:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800177c:	4835      	ldr	r0, [pc, #212]	@ (8001854 <_Z12InverterTaskPv+0x25c>)
 800177e:	f7ff fed3 	bl	8001528 <_Z13calculate_rmsPttff>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800178a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800178e:	edc3 7ac8 	vstr	s15, [r3, #800]	@ 0x320
			 if( InverterData.rms_volt3 < 0.03)
 8001792:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001796:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800179a:	f8d3 3320 	ldr.w	r3, [r3, #800]	@ 0x320
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed2 	bl	8000548 <__aeabi_f2d>
 80017a4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001818 <_Z12InverterTaskPv+0x220>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7ff f997 	bl	8000adc <__aeabi_dcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <_Z12InverterTaskPv+0x1ce>
			 {
				 InverterData.rms_volt3 = 0;
 80017b4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017b8:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
 80017c4:	e00f      	b.n	80017e6 <_Z12InverterTaskPv+0x1ee>
			 }
			 else
			 {
				 InverterData.rms_volt3 =  InverterData.rms_volt3*500.0;
 80017c6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017ca:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017ce:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80017d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800184c <_Z12InverterTaskPv+0x254>
 80017d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017da:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80017de:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80017e2:	edc3 7ac8 	vstr	s15, [r3, #800]	@ 0x320
			 }

			 HAL_ADC_Start_DMA(&hadc2,(uint32_t *) adcData, BUFFER_SIZE);
 80017e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80017ea:	4910      	ldr	r1, [pc, #64]	@ (800182c <_Z12InverterTaskPv+0x234>)
 80017ec:	4810      	ldr	r0, [pc, #64]	@ (8001830 <_Z12InverterTaskPv+0x238>)
 80017ee:	f007 fb1d 	bl	8008e2c <HAL_ADC_Start_DMA>

		     InverterDataQueue.queueSend(reinterpret_cast<void*>(&InverterData));
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4817      	ldr	r0, [pc, #92]	@ (8001858 <_Z12InverterTaskPv+0x260>)
 80017fa:	f003 fbd9 	bl	8004fb0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		}

		InverterDataQueue.queueSend(reinterpret_cast<void*>(&InverterData));
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4814      	ldr	r0, [pc, #80]	@ (8001858 <_Z12InverterTaskPv+0x260>)
 8001806:	f003 fbd3 	bl	8004fb0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		System_Rtos::delay(100);
 800180a:	2064      	movs	r0, #100	@ 0x64
 800180c:	f003 fb48 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
		Voltronic.DeviceStat_Inquiry_qpigs(InverterData.inverterData_qpigs);
 8001810:	e71c      	b.n	800164c <_Z12InverterTaskPv+0x54>
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	eb851eb8 	.word	0xeb851eb8
 800181c:	3f9eb851 	.word	0x3f9eb851
 8001820:	20000570 	.word	0x20000570
 8001824:	20000594 	.word	0x20000594
 8001828:	200005b8 	.word	0x200005b8
 800182c:	200005dc 	.word	0x200005dc
 8001830:	20003a48 	.word	0x20003a48
 8001834:	20003c08 	.word	0x20003c08
 8001838:	20000340 	.word	0x20000340
 800183c:	20001d4c 	.word	0x20001d4c
 8001840:	457ff000 	.word	0x457ff000
 8001844:	40533333 	.word	0x40533333
 8001848:	20001194 	.word	0x20001194
 800184c:	43fa0000 	.word	0x43fa0000
 8001850:	2000157c 	.word	0x2000157c
 8001854:	20001964 	.word	0x20001964
 8001858:	2000343c 	.word	0x2000343c

0800185c <HAL_ADC_ConvCpltCallback>:
	}

}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <HAL_ADC_ConvCpltCallback+0x80>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12f      	bne.n	80018ce <HAL_ADC_ConvCpltCallback+0x72>
	 {
	// Separate data for each channel
    for (int i = 0; i < SAMPLES_PER_CHANNEL; i++) {
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e025      	b.n	80018c0 <HAL_ADC_ConvCpltCallback+0x64>
        channel_1_data[i] = adcData[i * NUM_CHANNELS];     // Channel 1
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	4a18      	ldr	r2, [pc, #96]	@ (80018e0 <HAL_ADC_ConvCpltCallback+0x84>)
 800187e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001882:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x88>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_2_data[i] = adcData[i * NUM_CHANNELS + 1]; // Channel 2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	3301      	adds	r3, #1
 8001894:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <HAL_ADC_ConvCpltCallback+0x84>)
 8001896:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800189a:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <HAL_ADC_ConvCpltCallback+0x8c>)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_3_data[i] = adcData[i * NUM_CHANNELS + 2]; // Channel 3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	3302      	adds	r3, #2
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <HAL_ADC_ConvCpltCallback+0x84>)
 80018ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <HAL_ADC_ConvCpltCallback+0x90>)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SAMPLES_PER_CHANNEL; i++) {
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3301      	adds	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018c6:	dbd5      	blt.n	8001874 <HAL_ADC_ConvCpltCallback+0x18>
    }

    flag = 1;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_ADC_ConvCpltCallback+0x94>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
	 }
    // Process each channel's data (e.g., calculate RMS)
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40012100 	.word	0x40012100
 80018e0:	200005dc 	.word	0x200005dc
 80018e4:	20001194 	.word	0x20001194
 80018e8:	2000157c 	.word	0x2000157c
 80018ec:	20001964 	.word	0x20001964
 80018f0:	20001d4c 	.word	0x20001d4c

080018f4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12b      	bne.n	800195e <HAL_ADC_ConvHalfCpltCallback+0x6a>
	 {
    // Same processing as full-complete but for the first half of the buffer
    for (int i = 0; i < SAMPLES_PER_CHANNEL / 2; i++) {
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e025      	b.n	8001958 <HAL_ADC_ConvHalfCpltCallback+0x64>
        channel_1_data[i] = adcData[i * NUM_CHANNELS];     // Channel 1
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	4a16      	ldr	r2, [pc, #88]	@ (8001970 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001916:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_2_data[i] = adcData[i * NUM_CHANNELS + 1]; // Channel 2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	3301      	adds	r3, #1
 800192c:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 800192e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001932:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        channel_3_data[i] = adcData[i * NUM_CHANNELS + 2]; // Channel 3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	3302      	adds	r3, #2
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001946:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800194a:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <HAL_ADC_ConvHalfCpltCallback+0x88>)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SAMPLES_PER_CHANNEL / 2; i++) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2bf9      	cmp	r3, #249	@ 0xf9
 800195c:	ddd6      	ble.n	800190c <HAL_ADC_ConvHalfCpltCallback+0x18>
    }

	 }
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40012100 	.word	0x40012100
 8001970:	200005dc 	.word	0x200005dc
 8001974:	20001194 	.word	0x20001194
 8001978:	2000157c 	.word	0x2000157c
 800197c:	20001964 	.word	0x20001964

08001980 <_Z41__static_initialization_and_destruction_0ii>:
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d117      	bne.n	80019c0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001996:	4293      	cmp	r3, r2
 8001998:	d112      	bne.n	80019c0 <_Z41__static_initialization_and_destruction_0ii+0x40>
Inverter::Voltronic Voltronic(&INVERTER_U,DE_GPIO_Port,DE_Pin);
 800199a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80019a0:	490a      	ldr	r1, [pc, #40]	@ (80019cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80019a2:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80019a4:	f000 fca2 	bl	80022ec <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
sensor_pzem::PZEM_004T PZEM1(&PZEM1_U);
 80019a8:	490a      	ldr	r1, [pc, #40]	@ (80019d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80019aa:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80019ac:	f003 fa48 	bl	8004e40 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM2(&PZEM2_U);
 80019b0:	490a      	ldr	r1, [pc, #40]	@ (80019dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80019b2:	480b      	ldr	r0, [pc, #44]	@ (80019e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80019b4:	f003 fa44 	bl	8004e40 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM3(&PZEM3_U);
 80019b8:	490a      	ldr	r1, [pc, #40]	@ (80019e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80019ba:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80019bc:	f003 fa40 	bl	8004e40 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	20003d28 	.word	0x20003d28
 80019d0:	20000340 	.word	0x20000340
 80019d4:	20003c98 	.word	0x20003c98
 80019d8:	20000570 	.word	0x20000570
 80019dc:	20003d70 	.word	0x20003d70
 80019e0:	20000594 	.word	0x20000594
 80019e4:	20003c50 	.word	0x20003c50
 80019e8:	200005b8 	.word	0x200005b8

080019ec <_GLOBAL__sub_I_Voltronic>:
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff ffc3 	bl	8001980 <_Z41__static_initialization_and_destruction_0ii>
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f010 f888 	bl	8011b1e <strstr>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_Z9ModemTaskPv>:


char command_buffer[255] = {0};


void ModemTask(void *pvParameters) {
 8001a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1c:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8001a20:	af22      	add	r7, sp, #136	@ 0x88
 8001a22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a26:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001a2a:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8001a2c:	48c9      	ldr	r0, [pc, #804]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001a2e:	f001 f817 	bl	8002a60 <_ZN5Modem8simA76724initEv>

	struct ModemData_Queue ModemData = { 0 };
 8001a32:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001a36:	22d9      	movs	r2, #217	@ 0xd9
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f010 f847 	bl	8011ace <memset>

	struct ControlData_Queue ControlData = {0};
 8001a40:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a44:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a48:	4618      	mov	r0, r3
 8001a4a:	2374      	movs	r3, #116	@ 0x74
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f010 f83d 	bl	8011ace <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be

	enum routine mqtt_routine = net_enable;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 8001a66:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001a6a:	334b      	adds	r3, #75	@ 0x4b
 8001a6c:	4aba      	ldr	r2, [pc, #744]	@ (8001d58 <_Z9ModemTaskPv+0x340>)
 8001a6e:	4614      	mov	r4, r2
 8001a70:	469c      	mov	ip, r3
 8001a72:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001a76:	4665      	mov	r5, ip
 8001a78:	4626      	mov	r6, r4
 8001a7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a7c:	6028      	str	r0, [r5, #0]
 8001a7e:	6069      	str	r1, [r5, #4]
 8001a80:	60aa      	str	r2, [r5, #8]
 8001a82:	60eb      	str	r3, [r5, #12]
 8001a84:	3410      	adds	r4, #16
 8001a86:	f10c 0c10 	add.w	ip, ip, #16
 8001a8a:	4574      	cmp	r4, lr
 8001a8c:	d1f3      	bne.n	8001a76 <_Z9ModemTaskPv+0x5e>
 8001a8e:	4662      	mov	r2, ip
 8001a90:	4623      	mov	r3, r4
 8001a92:	cb03      	ldmia	r3!, {r0, r1}
 8001a94:	6010      	str	r0, [r2, #0]
 8001a96:	6051      	str	r1, [r2, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 8001a9c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001aa0:	3337      	adds	r3, #55	@ 0x37
 8001aa2:	4aae      	ldr	r2, [pc, #696]	@ (8001d5c <_Z9ModemTaskPv+0x344>)
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001aaa:	6020      	str	r0, [r4, #0]
 8001aac:	6061      	str	r1, [r4, #4]
 8001aae:	60a2      	str	r2, [r4, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 8001ab4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ab8:	33c3      	adds	r3, #195	@ 0xc3
 8001aba:	4aa9      	ldr	r2, [pc, #676]	@ (8001d60 <_Z9ModemTaskPv+0x348>)
 8001abc:	6810      	ldr	r0, [r2, #0]
 8001abe:	6018      	str	r0, [r3, #0]
 8001ac0:	8892      	ldrh	r2, [r2, #4]
 8001ac2:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 8001ac4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ac8:	33af      	adds	r3, #175	@ 0xaf
 8001aca:	49a6      	ldr	r1, [pc, #664]	@ (8001d64 <_Z9ModemTaskPv+0x34c>)
 8001acc:	461a      	mov	r2, r3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	cb03      	ldmia	r3!, {r0, r1}
 8001ad2:	6010      	str	r0, [r2, #0]
 8001ad4:	6051      	str	r1, [r2, #4]
 8001ad6:	8819      	ldrh	r1, [r3, #0]
 8001ad8:	789b      	ldrb	r3, [r3, #2]
 8001ada:	8111      	strh	r1, [r2, #8]
 8001adc:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 8001ae4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	489a      	ldr	r0, [pc, #616]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001aec:	f001 f9a4 	bl	8002e38 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 8001af0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001af4:	330f      	adds	r3, #15
 8001af6:	4619      	mov	r1, r3
 8001af8:	4896      	ldr	r0, [pc, #600]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001afa:	f001 fa07 	bl	8002f0c <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 8001afe:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b02:	331e      	adds	r3, #30
 8001b04:	4619      	mov	r1, r3
 8001b06:	4893      	ldr	r0, [pc, #588]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001b08:	f001 fae6 	bl	80030d8 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 8001b0c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b10:	332d      	adds	r3, #45	@ 0x2d
 8001b12:	4619      	mov	r1, r3
 8001b14:	488f      	ldr	r0, [pc, #572]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001b16:	f001 fcd3 	bl	80034c0 <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 8001b1a:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8001b1e:	4619      	mov	r1, r3
 8001b20:	488c      	ldr	r0, [pc, #560]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001b22:	f001 fc1d 	bl	8003360 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 8001b26:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4889      	ldr	r0, [pc, #548]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001b2e:	f001 fbab 	bl	8003288 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 8001b32:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b36:	4619      	mov	r1, r3
 8001b38:	488b      	ldr	r0, [pc, #556]	@ (8001d68 <_Z9ModemTaskPv+0x350>)
 8001b3a:	f003 fa39 	bl	8004fb0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 8001b3e:	2032      	movs	r0, #50	@ 0x32
 8001b40:	f003 f9ae 	bl	8004ea0 <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001b44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4888      	ldr	r0, [pc, #544]	@ (8001d6c <_Z9ModemTaskPv+0x354>)
 8001b4c:	f003 fa4d 	bl	8004fea <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001b54:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	f200 8270 	bhi.w	800203e <_Z9ModemTaskPv+0x626>
 8001b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b64 <_Z9ModemTaskPv+0x14c>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001b75 	.word	0x08001b75
 8001b68:	08001c5d 	.word	0x08001c5d
 8001b6c:	08001d7d 	.word	0x08001d7d
 8001b70:	08001dcd 	.word	0x08001dcd

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001b74:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b78:	330f      	adds	r3, #15
 8001b7a:	497d      	ldr	r1, [pc, #500]	@ (8001d70 <_Z9ModemTaskPv+0x358>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff3d 	bl	80019fc <_ZSt6strstrPcPKc>
 8001b82:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <_Z9ModemTaskPv+0x184>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001b88:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001b8c:	330f      	adds	r3, #15
 8001b8e:	4979      	ldr	r1, [pc, #484]	@ (8001d74 <_Z9ModemTaskPv+0x35c>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff33 	bl	80019fc <_ZSt6strstrPcPKc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01c      	beq.n	8001bd6 <_Z9ModemTaskPv+0x1be>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001b9c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ba0:	331e      	adds	r3, #30
 8001ba2:	4973      	ldr	r1, [pc, #460]	@ (8001d70 <_Z9ModemTaskPv+0x358>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff29 	bl	80019fc <_ZSt6strstrPcPKc>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <_Z9ModemTaskPv+0x1ac>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001bb0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001bb4:	331e      	adds	r3, #30
 8001bb6:	496f      	ldr	r1, [pc, #444]	@ (8001d74 <_Z9ModemTaskPv+0x35c>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff1f 	bl	80019fc <_ZSt6strstrPcPKc>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <_Z9ModemTaskPv+0x1be>
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001bc4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bc8:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <_Z9ModemTaskPv+0x1be>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <_Z9ModemTaskPv+0x1c0>
 8001bd6:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8232 	beq.w	8002042 <_Z9ModemTaskPv+0x62a>


				modeminfo = simA7672.setAPN(ModemData.apn);
 8001bde:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001be2:	3337      	adds	r3, #55	@ 0x37
 8001be4:	4619      	mov	r1, r3
 8001be6:	485b      	ldr	r0, [pc, #364]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001be8:	f001 f87a 	bl	8002ce0 <_ZN5Modem8simA76726setAPNEPc>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb

				simA7672.sslversionset();
 8001bf2:	4858      	ldr	r0, [pc, #352]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001bf4:	f002 f9cc 	bl	8003f90 <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 8001bf8:	4856      	ldr	r0, [pc, #344]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001bfa:	f002 fa05 	bl	8004008 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 8001bfe:	4855      	ldr	r0, [pc, #340]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001c00:	f002 fa3e 	bl	8004080 <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 8001c04:	4853      	ldr	r0, [pc, #332]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001c06:	f002 fa77 	bl	80040f8 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 8001c0a:	4852      	ldr	r0, [pc, #328]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001c0c:	f002 fab0 	bl	8004170 <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 8001c10:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 8214 	bne.w	8002042 <_Z9ModemTaskPv+0x62a>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001c1a:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d108      	bne.n	8001c34 <_Z9ModemTaskPv+0x21c>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001c22:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001c26:	4619      	mov	r1, r3
 8001c28:	484a      	ldr	r0, [pc, #296]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001c2a:	f001 ff63 	bl	8003af4 <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001c34:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10b      	bne.n	8001c54 <_Z9ModemTaskPv+0x23c>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001c3c:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001c40:	4619      	mov	r1, r3
 8001c42:	4844      	ldr	r0, [pc, #272]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001c44:	f001 fe7c 	bl	8003940 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001c48:	4842      	ldr	r0, [pc, #264]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001c4a:	f001 fdb1 	bl	80037b0 <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					}

					mqtt_routine = mqtt_enable;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd

				}

			}

			break;
 8001c5a:	e1f2      	b.n	8002042 <_Z9ModemTaskPv+0x62a>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001c5c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c60:	330f      	adds	r3, #15
 8001c62:	4943      	ldr	r1, [pc, #268]	@ (8001d70 <_Z9ModemTaskPv+0x358>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fec9 	bl	80019fc <_ZSt6strstrPcPKc>
 8001c6a:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <_Z9ModemTaskPv+0x26c>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001c70:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c74:	330f      	adds	r3, #15
 8001c76:	493f      	ldr	r1, [pc, #252]	@ (8001d74 <_Z9ModemTaskPv+0x35c>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff febf 	bl	80019fc <_ZSt6strstrPcPKc>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <_Z9ModemTaskPv+0x2ae>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001c84:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c88:	331e      	adds	r3, #30
 8001c8a:	4939      	ldr	r1, [pc, #228]	@ (8001d70 <_Z9ModemTaskPv+0x358>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff feb5 	bl	80019fc <_ZSt6strstrPcPKc>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <_Z9ModemTaskPv+0x294>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001c98:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c9c:	331e      	adds	r3, #30
 8001c9e:	4935      	ldr	r1, [pc, #212]	@ (8001d74 <_Z9ModemTaskPv+0x35c>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff feab 	bl	80019fc <_ZSt6strstrPcPKc>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00c      	beq.n	8001cc6 <_Z9ModemTaskPv+0x2ae>
					&& cpsiInfo != Modem::simA7672::no_service
 8001cac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cb0:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <_Z9ModemTaskPv+0x2ae>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001cba:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <_Z9ModemTaskPv+0x2ae>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <_Z9ModemTaskPv+0x2b0>
 8001cc6:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 81bc 	beq.w	8002046 <_Z9ModemTaskPv+0x62e>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4820      	ldr	r0, [pc, #128]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001cd2:	f001 f85d 	bl	8002d90 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	481e      	ldr	r0, [pc, #120]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001cda:	f001 f859 	bl	8002d90 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 8001cde:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ce2:	33d8      	adds	r3, #216	@ 0xd8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481b      	ldr	r0, [pc, #108]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001ce8:	f001 fcf2 	bl	80036d0 <_ZN5Modem8simA76729mqttStartEPh>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001cf2:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d121      	bne.n	8001d3e <_Z9ModemTaskPv+0x326>

					mqttstartinfo = simA7672.mqttSetClient(
 8001cfa:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001cfe:	2301      	movs	r3, #1
 8001d00:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <_Z9ModemTaskPv+0x360>)
 8001d02:	4814      	ldr	r0, [pc, #80]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001d04:	f001 fdba 	bl	800387c <_ZN5Modem8simA767213mqttSetClientEhPch>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 8001d0e:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <_Z9ModemTaskPv+0x312>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 8001d16:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001d1e:	f002 f8db 	bl	8003ed8 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 8001d22:	2302      	movs	r3, #2
 8001d24:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					simA7672.mqttStop();
				}

			}

			break;
 8001d28:	e18d      	b.n	8002046 <_Z9ModemTaskPv+0x62e>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001d2a:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001d32:	f001 fe05 	bl	8003940 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001d38:	f001 fd3a 	bl	80037b0 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001d3c:	e183      	b.n	8002046 <_Z9ModemTaskPv+0x62e>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001d3e:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001d42:	4619      	mov	r1, r3
 8001d44:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001d46:	f001 fdfb 	bl	8003940 <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 8001d4a:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <_Z9ModemTaskPv+0x33c>)
 8001d4c:	f001 fd30 	bl	80037b0 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001d50:	e179      	b.n	8002046 <_Z9ModemTaskPv+0x62e>
 8001d52:	bf00      	nop
 8001d54:	20001d50 	.word	0x20001d50
 8001d58:	08013db0 	.word	0x08013db0
 8001d5c:	08013dec 	.word	0x08013dec
 8001d60:	08013dfc 	.word	0x08013dfc
 8001d64:	08013e04 	.word	0x08013e04
 8001d68:	20002fec 	.word	0x20002fec
 8001d6c:	200030bc 	.word	0x200030bc
 8001d70:	08014488 	.word	0x08014488
 8001d74:	08014494 	.word	0x08014494
 8001d78:	08013e10 	.word	0x08013e10
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 8001d7c:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 8162 	bne.w	800204a <_Z9ModemTaskPv+0x632>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 8001d86:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	f000 815d 	beq.w	800204a <_Z9ModemTaskPv+0x632>

				mqttserverinfo = simA7672.mqttConnectServer(
 8001d90:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001d94:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d98:	334b      	adds	r3, #75	@ 0x4b
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	48ad      	ldr	r0, [pc, #692]	@ (8002054 <_Z9ModemTaskPv+0x63c>)
 8001d9e:	f001 fe2b 	bl	80039f8 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001da8:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d103      	bne.n	8001db8 <_Z9ModemTaskPv+0x3a0>

					mqtt_routine = mqtt_loop;
 8001db0:	2303      	movs	r3, #3
 8001db2:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					mqtt_routine = net_enable;
				}

			}

			break;
 8001db6:	e148      	b.n	800204a <_Z9ModemTaskPv+0x632>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001db8:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	48a5      	ldr	r0, [pc, #660]	@ (8002054 <_Z9ModemTaskPv+0x63c>)
 8001dc0:	f001 fe98 	bl	8003af4 <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
			break;
 8001dca:	e13e      	b.n	800204a <_Z9ModemTaskPv+0x632>
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 8001dcc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001dd0:	334b      	adds	r3, #75	@ 0x4b
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	489f      	ldr	r0, [pc, #636]	@ (8002054 <_Z9ModemTaskPv+0x63c>)
 8001dd6:	f001 fc03 	bl	80035e0 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
			mqtt_counter++;
 8001de0:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001de4:	3301      	adds	r3, #1
 8001de6:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 8001dea:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d010      	beq.n	8001e14 <_Z9ModemTaskPv+0x3fc>
 8001df2:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d90c      	bls.n	8001e14 <_Z9ModemTaskPv+0x3fc>
				ModemData.internet = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001e00:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001e04:	4619      	mov	r1, r3
 8001e06:	4893      	ldr	r0, [pc, #588]	@ (8002054 <_Z9ModemTaskPv+0x63c>)
 8001e08:	f001 fe74 	bl	8003af4 <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 8001e12:	e11c      	b.n	800204e <_Z9ModemTaskPv+0x636>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 8001e14:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f040 8118 	bne.w	800204e <_Z9ModemTaskPv+0x636>
				ModemData.internet = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				mqtt_counter = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001e2a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	663b      	str	r3, [r7, #96]	@ 0x60
						 ,ControlData.V_1
 8001e36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e3e:	695b      	ldr	r3, [r3, #20]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb81 	bl	8000548 <__aeabi_f2d>
 8001e46:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						 ,ControlData.V_2
 8001e4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e52:	699b      	ldr	r3, [r3, #24]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb77 	bl	8000548 <__aeabi_f2d>
 8001e5a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						 ,ControlData.V_3
 8001e5e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e66:	69db      	ldr	r3, [r3, #28]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb6d 	bl	8000548 <__aeabi_f2d>
 8001e6e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						 ,ControlData.I_1
 8001e72:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb63 	bl	8000548 <__aeabi_f2d>
 8001e82:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						 ,ControlData.I_2
 8001e86:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb59 	bl	8000548 <__aeabi_f2d>
 8001e96:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						 ,ControlData.I_3
 8001e9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e9e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb4f 	bl	8000548 <__aeabi_f2d>
 8001eaa:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						 ,ControlData.P_1
 8001eae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eb2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb45 	bl	8000548 <__aeabi_f2d>
 8001ebe:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						 ,ControlData.P_2
 8001ec2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ec6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	e9c7 0108 	strd	r0, r1, [r7, #32]
						 ,ControlData.P_3
 8001ed6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eda:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb31 	bl	8000548 <__aeabi_f2d>
 8001ee6:	e9c7 0106 	strd	r0, r1, [r7, #24]
						 ,ControlData.Energy
 8001eea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb27 	bl	8000548 <__aeabi_f2d>
 8001efa:	4682      	mov	sl, r0
 8001efc:	468b      	mov	fp, r1
						 ,ControlData.Freq
 8001efe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb1d 	bl	8000548 <__aeabi_f2d>
 8001f0e:	4680      	mov	r8, r0
 8001f10:	4689      	mov	r9, r1
						 ,ControlData.sourceIdentification
 8001f12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f1e:	617b      	str	r3, [r7, #20]
						 ,ControlData.fuelPer
 8001f20:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f24:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f2c:	613b      	str	r3, [r7, #16]
						 ,ControlData.fuelConsp
 8001f2e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f32:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb05 	bl	8000548 <__aeabi_f2d>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f46:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f4c:	60fa      	str	r2, [r7, #12]
 8001f4e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f52:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f56:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f62:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8001f64:	607e      	str	r6, [r7, #4]
 8001f66:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f6e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001f70:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f74:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f78:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8001f7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f7e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f84:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f88:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8e:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 8001f92:	9320      	str	r3, [sp, #128]	@ 0x80
 8001f94:	921f      	str	r2, [sp, #124]	@ 0x7c
 8001f96:	911e      	str	r1, [sp, #120]	@ 0x78
 8001f98:	901d      	str	r0, [sp, #116]	@ 0x74
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	921c      	str	r2, [sp, #112]	@ 0x70
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	911b      	str	r1, [sp, #108]	@ 0x6c
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8001fa6:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	9217      	str	r2, [sp, #92]	@ 0x5c
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	9216      	str	r2, [sp, #88]	@ 0x58
 8001fb2:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 8001fb6:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 8001fba:	ed97 7b06 	vldr	d7, [r7, #24]
 8001fbe:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8001fc2:	ed97 7b08 	vldr	d7, [r7, #32]
 8001fc6:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001fca:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001fce:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001fd2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001fd6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001fda:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001fde:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001fe2:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001fe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001fea:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001fee:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ff2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001ff6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001ffa:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001ffe:	ed8d 7b00 	vstr	d7, [sp]
 8002002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002004:	4632      	mov	r2, r6
 8002006:	4914      	ldr	r1, [pc, #80]	@ (8002058 <_Z9ModemTaskPv+0x640>)
 8002008:	4814      	ldr	r0, [pc, #80]	@ (800205c <_Z9ModemTaskPv+0x644>)
 800200a:	f00f fcfd 	bl	8011a08 <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 800200e:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8002012:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002016:	f103 02c3 	add.w	r2, r3, #195	@ 0xc3
 800201a:	23ff      	movs	r3, #255	@ 0xff
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <_Z9ModemTaskPv+0x648>)
 8002020:	480c      	ldr	r0, [pc, #48]	@ (8002054 <_Z9ModemTaskPv+0x63c>)
 8002022:	f001 fde3 	bl	8003bec <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 8002026:	4603      	mov	r3, r0
 8002028:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 800202a:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 800202e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002032:	33c3      	adds	r3, #195	@ 0xc3
 8002034:	461a      	mov	r2, r3
 8002036:	4807      	ldr	r0, [pc, #28]	@ (8002054 <_Z9ModemTaskPv+0x63c>)
 8002038:	f001 fe94 	bl	8003d64 <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 800203c:	e007      	b.n	800204e <_Z9ModemTaskPv+0x636>
		}

		default:
			break;
 800203e:	bf00      	nop
 8002040:	e550      	b.n	8001ae4 <_Z9ModemTaskPv+0xcc>
			break;
 8002042:	bf00      	nop
 8002044:	e54e      	b.n	8001ae4 <_Z9ModemTaskPv+0xcc>
			break;
 8002046:	bf00      	nop
 8002048:	e54c      	b.n	8001ae4 <_Z9ModemTaskPv+0xcc>
			break;
 800204a:	bf00      	nop
 800204c:	e54a      	b.n	8001ae4 <_Z9ModemTaskPv+0xcc>
			break;
 800204e:	bf00      	nop
		simA7672.getSim(ModemData.pin);
 8002050:	e548      	b.n	8001ae4 <_Z9ModemTaskPv+0xcc>
 8002052:	bf00      	nop
 8002054:	20001d50 	.word	0x20001d50
 8002058:	08013e18 	.word	0x08013e18
 800205c:	20002550 	.word	0x20002550
 8002060:	20002d80 	.word	0x20002d80

08002064 <_Z41__static_initialization_and_destruction_0ii>:



	}

}
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d108      	bne.n	8002086 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800207a:	4293      	cmp	r3, r2
 800207c:	d103      	bne.n	8002086 <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_U);
 800207e:	4904      	ldr	r1, [pc, #16]	@ (8002090 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002082:	f000 fc89 	bl	8002998 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20003ce0 	.word	0x20003ce0
 8002094:	20001d50 	.word	0x20001d50

08002098 <_GLOBAL__sub_I_simA7672>:
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
 800209c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7ff ffdf 	bl	8002064 <_Z41__static_initialization_and_destruction_0ii>
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZN8UniqueID12CharToHexascEPhh>:


const char kaHexAsc[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
     *pPos++ = kaHexAsc[Wert >> 4];
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80020be:	5c99      	ldrb	r1, [r3, r2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	460a      	mov	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
     *pPos = kaHexAsc[Wert & 0x0f];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80020d2:	5cd2      	ldrb	r2, [r2, r3]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	701a      	strb	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	080144a0 	.word	0x080144a0

080020e8 <_ZN8UniqueID6GetUidEv>:

char *UniqueID::GetUid()
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80020ee:	f006 fba1 	bl	8008834 <HAL_GetUIDw1>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 80020f8:	f006 fb9c 	bl	8008834 <HAL_GetUIDw1>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <_ZN8UniqueID6GetUidEv+0x8c>)
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002104:	4c1c      	ldr	r4, [pc, #112]	@ (8002178 <_ZN8UniqueID6GetUidEv+0x90>)
 8002106:	f006 fba1 	bl	800884c <HAL_GetUIDw2>
 800210a:	4603      	mov	r3, r0
 800210c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b23      	cmp	r3, #35	@ 0x23
 8002112:	d909      	bls.n	8002128 <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b3d      	cmp	r3, #61	@ 0x3d
 8002118:	bf28      	it	cs
 800211a:	233d      	movcs	r3, #61	@ 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	333d      	adds	r3, #61	@ 0x3d
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <_ZN8UniqueID6GetUidEv+0x8c>)
 8002124:	71da      	strb	r2, [r3, #7]
 8002126:	e00b      	b.n	8002140 <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b09      	cmp	r3, #9
 800212c:	d901      	bls.n	8002132 <_ZN8UniqueID6GetUidEv+0x4a>
 800212e:	2241      	movs	r2, #65	@ 0x41
 8002130:	e000      	b.n	8002134 <_ZN8UniqueID6GetUidEv+0x4c>
 8002132:	2230      	movs	r2, #48	@ 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <_ZN8UniqueID6GetUidEv+0x8c>)
 800213e:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8002140:	f006 fb6c 	bl	800881c <HAL_GetUIDw0>
 8002144:	4603      	mov	r3, r0
 8002146:	0c1b      	lsrs	r3, r3, #16
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4619      	mov	r1, r3
 800214c:	480b      	ldr	r0, [pc, #44]	@ (800217c <_ZN8UniqueID6GetUidEv+0x94>)
 800214e:	f7ff ffab 	bl	80020a8 <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8002152:	f006 fb63 	bl	800881c <HAL_GetUIDw0>
 8002156:	4603      	mov	r3, r0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4619      	mov	r1, r3
 800215c:	4808      	ldr	r0, [pc, #32]	@ (8002180 <_ZN8UniqueID6GetUidEv+0x98>)
 800215e:	f7ff ffa3 	bl	80020a8 <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <_ZN8UniqueID6GetUidEv+0x8c>)
 8002164:	2200      	movs	r2, #0
 8002166:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8002168:	4b02      	ldr	r3, [pc, #8]	@ (8002174 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}
 8002172:	bf00      	nop
 8002174:	200034a8 	.word	0x200034a8
 8002178:	200034ab 	.word	0x200034ab
 800217c:	200034b0 	.word	0x200034b0
 8002180:	200034b2 	.word	0x200034b2

08002184 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8002188:	480b      	ldr	r0, [pc, #44]	@ (80021b8 <_Z11app_mainCppv+0x34>)
 800218a:	f002 fec0 	bl	8004f0e <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
	InverterTaskHandler.createTask();
 800218e:	480b      	ldr	r0, [pc, #44]	@ (80021bc <_Z11app_mainCppv+0x38>)
 8002190:	f002 febd 	bl	8004f0e <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ControlTaskHandler.createTask();
 8002194:	480a      	ldr	r0, [pc, #40]	@ (80021c0 <_Z11app_mainCppv+0x3c>)
 8002196:	f002 feba 	bl	8004f0e <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    DisplayTaskHandler.createTask();
 800219a:	480a      	ldr	r0, [pc, #40]	@ (80021c4 <_Z11app_mainCppv+0x40>)
 800219c:	f002 feb7 	bl	8004f0e <_ZN11System_Rtos14freertos_Tasks10createTaskEv>

    ModemDataQueue.queueCreate();
 80021a0:	4809      	ldr	r0, [pc, #36]	@ (80021c8 <_Z11app_mainCppv+0x44>)
 80021a2:	f002 fee9 	bl	8004f78 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    ControlDataQueue.queueCreate();
 80021a6:	4809      	ldr	r0, [pc, #36]	@ (80021cc <_Z11app_mainCppv+0x48>)
 80021a8:	f002 fee6 	bl	8004f78 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    InverterDataQueue.queueCreate();
 80021ac:	4808      	ldr	r0, [pc, #32]	@ (80021d0 <_Z11app_mainCppv+0x4c>)
 80021ae:	f002 fee3 	bl	8004f78 <_ZN11System_Rtos15freertos_queues11queueCreateEv>



}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20002e80 	.word	0x20002e80
 80021bc:	20002ea4 	.word	0x20002ea4
 80021c0:	20002ec8 	.word	0x20002ec8
 80021c4:	20002eec 	.word	0x20002eec
 80021c8:	20002fec 	.word	0x20002fec
 80021cc:	200030bc 	.word	0x200030bc
 80021d0:	2000343c 	.word	0x2000343c

080021d4 <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
    	app_mainCpp();
 80021d8:	f7ff ffd4 	bl	8002184 <_Z11app_mainCppv>
    }
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_Z41__static_initialization_and_destruction_0ii>:


}
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d148      	bne.n	8002282 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d143      	bne.n	8002282 <_Z41__static_initialization_and_destruction_0ii+0xa2>
System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 80021fa:	2318      	movs	r3, #24
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	2301      	movs	r3, #1
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002206:	4a21      	ldr	r2, [pc, #132]	@ (800228c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002208:	4921      	ldr	r1, [pc, #132]	@ (8002290 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800220a:	4822      	ldr	r0, [pc, #136]	@ (8002294 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800220c:	f002 fe5e 	bl	8004ecc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks InverterTaskHandler(InverterTask,"Inverter",_StackSize_Inverter, (void*) 1,24);
 8002210:	2318      	movs	r3, #24
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2301      	movs	r3, #1
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800221c:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800221e:	491f      	ldr	r1, [pc, #124]	@ (800229c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002220:	481f      	ldr	r0, [pc, #124]	@ (80022a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002222:	f002 fe53 	bl	8004ecc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlTaskHandler(ControlTask,"Control",_StackSize_Control, (void*) 1,24);
 8002226:	2318      	movs	r3, #24
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2301      	movs	r3, #1
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002232:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002234:	491c      	ldr	r1, [pc, #112]	@ (80022a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002236:	481d      	ldr	r0, [pc, #116]	@ (80022ac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002238:	f002 fe48 	bl	8004ecc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks DisplayTaskHandler(DisplayTask,"Display",_StackSize_Display, (void*) 1,24);
 800223c:	2318      	movs	r3, #24
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2301      	movs	r3, #1
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002248:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800224a:	491a      	ldr	r1, [pc, #104]	@ (80022b4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800224c:	481a      	ldr	r0, [pc, #104]	@ (80022b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800224e:	f002 fe3d 	bl	8004ecc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_queues ModemDataQueue(1,sizeof(struct ModemData_Queue),	queuebuffer);
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002254:	22d9      	movs	r2, #217	@ 0xd9
 8002256:	2101      	movs	r1, #1
 8002258:	4819      	ldr	r0, [pc, #100]	@ (80022c0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800225a:	f002 fe72 	bl	8004f42 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues ControlDataQueue(1,sizeof(struct ControlData_Queue),	queuebuffer_1);
 800225e:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002260:	2274      	movs	r2, #116	@ 0x74
 8002262:	2101      	movs	r1, #1
 8002264:	4818      	ldr	r0, [pc, #96]	@ (80022c8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002266:	f002 fe6c 	bl	8004f42 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues InverterDataQueue(1,sizeof(struct InverterData_Queue),	queuebuffer_2);
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800226c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8002270:	2101      	movs	r1, #1
 8002272:	4817      	ldr	r0, [pc, #92]	@ (80022d0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002274:	f002 fe65 	bl	8004f42 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_rtc::stmRTC stmRTC(&hrtc,5);
 8002278:	2205      	movs	r2, #5
 800227a:	4916      	ldr	r1, [pc, #88]	@ (80022d4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800227c:	4816      	ldr	r0, [pc, #88]	@ (80022d8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800227e:	f002 ff18 	bl	80050b2 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	080140f4 	.word	0x080140f4
 8002290:	08001a19 	.word	0x08001a19
 8002294:	20002e80 	.word	0x20002e80
 8002298:	080140fc 	.word	0x080140fc
 800229c:	080015f9 	.word	0x080015f9
 80022a0:	20002ea4 	.word	0x20002ea4
 80022a4:	08014108 	.word	0x08014108
 80022a8:	08000f79 	.word	0x08000f79
 80022ac:	20002ec8 	.word	0x20002ec8
 80022b0:	08014110 	.word	0x08014110
 80022b4:	080014b1 	.word	0x080014b1
 80022b8:	20002eec 	.word	0x20002eec
 80022bc:	20002f10 	.word	0x20002f10
 80022c0:	20002fec 	.word	0x20002fec
 80022c4:	20003048 	.word	0x20003048
 80022c8:	200030bc 	.word	0x200030bc
 80022cc:	20003118 	.word	0x20003118
 80022d0:	2000343c 	.word	0x2000343c
 80022d4:	20003b44 	.word	0x20003b44
 80022d8:	20003498 	.word	0x20003498

080022dc <_GLOBAL__sub_I_ModemTaskHandler>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff ff7b 	bl	80021e0 <_Z41__static_initialization_and_destruction_0ii>
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:
struct Voltronic::classInstanceRecorder Voltronic::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t Voltronic::ClassInstanceIncrementer = 0;

Voltronic::Voltronic(UART_HandleTypeDef *huart, GPIO_TypeDef *GPIOx,
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	807b      	strh	r3, [r7, #2]
		uint16_t GPIO_Pin) :
		GlobalTxBufs { Voltronic::Txbuffer }, GlobalRxBufs { Voltronic::Rxbuffer }, serial_(
				huart), checking() {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4618      	mov	r0, r3
 80022fe:	23ff      	movs	r3, #255	@ 0xff
 8002300:	461a      	mov	r2, r3
 8002302:	2100      	movs	r1, #0
 8002304:	f00f fbe3 	bl	8011ace <memset>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	33ff      	adds	r3, #255	@ 0xff
 800230c:	22ff      	movs	r2, #255	@ 0xff
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f00f fbdc 	bl	8011ace <memset>
		GlobalTxBufs { Voltronic::Txbuffer }, GlobalRxBufs { Voltronic::Rxbuffer }, serial_(
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f103 02ff 	add.w	r2, r3, #255	@ 0xff
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 f8c3 	bl	80054be <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800233e:	4618      	mov	r0, r3
 8002340:	f003 f91f 	bl	8005582 <_ZN10System_sys16Parsing_CheckingC1Ev>

	Voltronic::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8002344:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	4a1a      	ldr	r2, [pc, #104]	@ (80023b4 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc8>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	Voltronic::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8002352:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc8>)
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]

	Voltronic::ClassInstanceIncrementer++;
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 800236a:	701a      	strb	r2, [r3, #0]
	if (Voltronic::ClassInstanceIncrementer > numberofuart) {
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d902      	bls.n	800237a <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x8e>
		Voltronic::ClassInstanceIncrementer = 0;
 8002374:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xc4>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
	}

	setInverterCallback(Voltronic::RxCBStatic, Voltronic::TxCBStatic);
 800237a:	490f      	ldr	r1, [pc, #60]	@ (80023b8 <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xcc>)
 800237c:	480f      	ldr	r0, [pc, #60]	@ (80023bc <_ZN8Inverter9VoltronicC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0xd0>)
 800237e:	f002 ff45 	bl	800520c <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

	DE_Port_ = GPIOx;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	DE_Pin_ = GPIO_Pin;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	Disable_DE
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 800239e:	2200      	movs	r2, #0
 80023a0:	4619      	mov	r1, r3
 80023a2:	f007 ff2f 	bl	800a204 <HAL_GPIO_WritePin>
	; // lower the DE         NAK
}
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200034d0 	.word	0x200034d0
 80023b4:	200034b8 	.word	0x200034b8
 80023b8:	08002985 	.word	0x08002985
 80023bc:	08002921 	.word	0x08002921

080023c0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c>:
void Voltronic::Model_Inquiry(char *Model) {
	//status stat = Voltronic_OK;

}

void Voltronic::DeviceStat_Inquiry_qpigs(char buf[24][10]) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t i = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
	status stat = Voltronic_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
	uint8_t *current;
	PrepRxTx(DevGenStatus, sizeof(DevGenStatus) - 1, 1000, _CR, 1);
 80023d2:	2301      	movs	r3, #1
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	230d      	movs	r3, #13
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023de:	2206      	movs	r2, #6
 80023e0:	4931      	ldr	r1, [pc, #196]	@ (80024a8 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xe8>)
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8f4 	bl	80025d0 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>
	stat = check_eventTimeout(rx_evt, 1200);
 80023e8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80023ec:	2100      	movs	r1, #0
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9e3 	bl	80027ba <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]
	if (stat == Voltronic_OK) {
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d13a      	bne.n	8002474 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>

		if (Rxbuffer[0] == '(' && Rxbuffer[1] != 'N' && Rxbuffer[2] != 'A'
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b28      	cmp	r3, #40	@ 0x28
 8002404:	d136      	bne.n	8002474 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	2b4e      	cmp	r3, #78	@ 0x4e
 800240c:	d032      	beq.n	8002474 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	789b      	ldrb	r3, [r3, #2]
 8002412:	2b41      	cmp	r3, #65	@ 0x41
 8002414:	d02e      	beq.n	8002474 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
				&& Rxbuffer[3] != 'K') {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	78db      	ldrb	r3, [r3, #3]
 800241a:	2b4b      	cmp	r3, #75	@ 0x4b
 800241c:	d02a      	beq.n	8002474 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xb4>
			current = Rxbuffer;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	613b      	str	r3, [r7, #16]
			while (i < 24
 8002422:	e007      	b.n	8002434 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0x74>
					&& checking.extractdatainsegments(
							reinterpret_cast<char*>(current), buf[i], 10, &len,
							' ') == checking.sys_ok) {
				current += len; //increment buffer to next position we got from function
 8002424:	89bb      	ldrh	r3, [r7, #12]
 8002426:	461a      	mov	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
				i++;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	3301      	adds	r3, #1
 8002432:	75fb      	strb	r3, [r7, #23]
					&& checking.extractdatainsegments(
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b17      	cmp	r3, #23
 8002438:	d818      	bhi.n	800246c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xac>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f503 7006 	add.w	r0, r3, #536	@ 0x218
							reinterpret_cast<char*>(current), buf[i], 10, &len,
 8002440:	7dfa      	ldrb	r2, [r7, #23]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	441a      	add	r2, r3
					&& checking.extractdatainsegments(
 8002450:	2320      	movs	r3, #32
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	230a      	movs	r3, #10
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	f003 f9dc 	bl	800581a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xac>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xae>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1d8      	bne.n	8002424 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0x64>
			}

			return;
 8002472:	e015      	b.n	80024a0 <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xe0>
		}

	}

	/*will reach this point only if something is not right*/
	i = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]
	while (i < 24) {
 8002478:	e00f      	b.n	800249a <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xda>
		std::strncpy(buf[i], "0", 2);
 800247a:	7dfa      	ldrb	r2, [r7, #23]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	461a      	mov	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xec>)
 800248c:	461a      	mov	r2, r3
 800248e:	460b      	mov	r3, r1
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	8013      	strh	r3, [r2, #0]
		i++;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	3301      	adds	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
	while (i < 24) {
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b17      	cmp	r3, #23
 800249e:	d9ec      	bls.n	800247a <_ZN8Inverter9Voltronic24DeviceStat_Inquiry_qpigsEPA10_c+0xba>
	}

}
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	080144b0 	.word	0x080144b0
 80024ac:	08014120 	.word	0x08014120

080024b0 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh>:
		i++;
	}

}

void Voltronic::DeviceStat_Inquiry_mode(uint8_t *mode) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t i = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
	status stat = Voltronic_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	75bb      	strb	r3, [r7, #22]
	uint8_t *current;
	char buf[5];
	PrepRxTx(DevModeInquiry, sizeof(DevModeInquiry) - 1, 1000, _CR, 1);
 80024c2:	2301      	movs	r3, #1
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	230d      	movs	r3, #13
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ce:	2205      	movs	r2, #5
 80024d0:	493e      	ldr	r1, [pc, #248]	@ (80025cc <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x11c>)
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f87c 	bl	80025d0 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>
	stat = check_eventTimeout(rx_evt, 1200);
 80024d8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80024dc:	2100      	movs	r1, #0
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f96b 	bl	80027ba <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	75bb      	strb	r3, [r7, #22]
	if (stat == Voltronic_OK) {
 80024e8:	7dbb      	ldrb	r3, [r7, #22]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d16b      	bne.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>

		if (Rxbuffer[0] == '(' && Rxbuffer[1] != 'N' && Rxbuffer[2] != 'A'
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b28      	cmp	r3, #40	@ 0x28
 80024f4:	d167      	bne.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80024fc:	d063      	beq.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	789b      	ldrb	r3, [r3, #2]
 8002502:	2b41      	cmp	r3, #65	@ 0x41
 8002504:	d05f      	beq.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				&& Rxbuffer[3] != 'K') {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	78db      	ldrb	r3, [r3, #3]
 800250a:	2b4b      	cmp	r3, #75	@ 0x4b
 800250c:	d05b      	beq.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
			current = Rxbuffer;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	613b      	str	r3, [r7, #16]
			if (checking.extractdatainsegments(reinterpret_cast<char*>(current),
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 7006 	add.w	r0, r3, #536	@ 0x218
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	2320      	movs	r3, #32
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	f107 030e 	add.w	r3, r7, #14
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2302      	movs	r3, #2
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f003 f976 	bl	800581a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>
 800252e:	4603      	mov	r3, r0
					buf, 2, &len, ' ') == checking.sys_ok) {
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
			if (checking.extractdatainsegments(reinterpret_cast<char*>(current),
 800253a:	2b00      	cmp	r3, #0
 800253c:	d043      	beq.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>

				switch (static_cast<invertermode>(buf[0])) {
 800253e:	7a3b      	ldrb	r3, [r7, #8]
 8002540:	3b42      	subs	r3, #66	@ 0x42
 8002542:	2b11      	cmp	r3, #17
 8002544:	d83e      	bhi.n	80025c4 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x114>
 8002546:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x9c>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	080025ad 	.word	0x080025ad
 8002550:	080025c5 	.word	0x080025c5
 8002554:	080025bd 	.word	0x080025bd
 8002558:	080025c5 	.word	0x080025c5
 800255c:	080025b5 	.word	0x080025b5
 8002560:	080025c5 	.word	0x080025c5
 8002564:	080025c5 	.word	0x080025c5
 8002568:	080025c5 	.word	0x080025c5
 800256c:	080025c5 	.word	0x080025c5
 8002570:	080025c5 	.word	0x080025c5
 8002574:	080025a5 	.word	0x080025a5
 8002578:	080025c5 	.word	0x080025c5
 800257c:	080025c5 	.word	0x080025c5
 8002580:	080025c5 	.word	0x080025c5
 8002584:	08002595 	.word	0x08002595
 8002588:	080025c5 	.word	0x080025c5
 800258c:	080025c5 	.word	0x080025c5
 8002590:	0800259d 	.word	0x0800259d
				case invertermode::PowerOnMode: {
					*mode = 1;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
					break;
 800259a:	e014      	b.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::StandByMode: {
					*mode = 2;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
					break;
 80025a2:	e010      	b.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::LineMode: {
					*mode = 3;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2203      	movs	r2, #3
 80025a8:	701a      	strb	r2, [r3, #0]
					break;
 80025aa:	e00c      	b.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::BatteryMode: {
					*mode = 4;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	701a      	strb	r2, [r3, #0]
					break;
 80025b2:	e008      	b.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::FaultMode: {
					*mode = 5;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2205      	movs	r2, #5
 80025b8:	701a      	strb	r2, [r3, #0]
					break;
 80025ba:	e004      	b.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				case invertermode::ShutdownMode: {
					*mode = 6;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2206      	movs	r2, #6
 80025c0:	701a      	strb	r2, [r3, #0]
					break;
 80025c2:	e000      	b.n	80025c6 <_ZN8Inverter9Voltronic23DeviceStat_Inquiry_modeEPh+0x116>
				}

				}

				return;
 80025c4:	bf00      	nop
			}
		}

	}
}
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	080144b8 	.word	0x080144b8

080025d0 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh>:

void Voltronic::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, uint8_t cal_crc) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	@ 0xff
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00f fa6e 	bl	8011ace <memset>
	memset(Txbuffer, 0, BufferLen);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	33ff      	adds	r3, #255	@ 0xff
 80025f6:	22ff      	movs	r2, #255	@ 0xff
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00f fa67 	bl	8011ace <memset>
	rst_event(rx_evt);
 8002600:	2100      	movs	r1, #0
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f899 	bl	800273a <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8002608:	2101      	movs	r1, #1
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f895 	bl	800273a <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>

	Rx_info.EndChar = end_char;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002616:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a
	Rx_info.Rx = Rxbuffer;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	Rx_info.Rxcount = 0;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002636:	22ff      	movs	r2, #255	@ 0xff
 8002638:	4619      	mov	r1, r3
 800263a:	f002 ff75 	bl	8005528 <_ZN13System_serial6serial7RxintEnEPht>

	if (cal_crc == 1) {
 800263e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002642:	2b01      	cmp	r3, #1
 8002644:	d13e      	bne.n	80026c4 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh+0xf4>
		uint16_t crc = CRC16_cal(Txbuf, len - 1);
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	3b01      	subs	r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f8ee 	bl	8002832 <_ZN8Inverter9Voltronic9CRC16_calEPKht>
 8002656:	4603      	mov	r3, r0
 8002658:	82fb      	strh	r3, [r7, #22]
		memcpy(Txbuffer, Txbuf, len - 1);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f103 00ff 	add.w	r0, r3, #255	@ 0xff
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	3b01      	subs	r3, #1
 8002664:	461a      	mov	r2, r3
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	f00f fb45 	bl	8011cf6 <memcpy>
		breaking_bits.w = crc;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8afa      	ldrh	r2, [r7, #22]
 8002670:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		Txbuffer[len - 1] = breaking_bits.bytes.Hb;
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	3b01      	subs	r3, #1
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	f892 1209 	ldrb.w	r1, [r2, #521]	@ 0x209
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	460a      	mov	r2, r1
 8002684:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		len = len + 1;
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	3301      	adds	r3, #1
 800268c:	80fb      	strh	r3, [r7, #6]
		Txbuffer[len - 1] = breaking_bits.bytes.Lb;
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	3b01      	subs	r3, #1
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f892 1208 	ldrb.w	r1, [r2, #520]	@ 0x208
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	460a      	mov	r2, r1
 800269e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		len = len + 1;
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	3301      	adds	r3, #1
 80026a6:	80fb      	strh	r3, [r7, #6]
		Txbuffer[len - 1] = _CR;
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	220d      	movs	r2, #13
 80026b2:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		Txbuffer[len] = _EOS;
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
 80026c2:	e006      	b.n	80026d2 <_ZN8Inverter9Voltronic8PrepRxTxEPKhtthh+0x102>
	} else {
		memcpy(Txbuffer, Txbuf, len);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	33ff      	adds	r3, #255	@ 0xff
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00f fb12 	bl	8011cf6 <memcpy>
	}

	Enable_DE
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80026de:	2201      	movs	r2, #1
 80026e0:	4619      	mov	r1, r3
 80026e2:	f007 fd8f 	bl	800a204 <HAL_GPIO_WritePin>
	;
	serial_.TransmitData(Txbuffer, len, timeout);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f103 01ff 	add.w	r1, r3, #255	@ 0xff
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	f002 ff04 	bl	8005502 <_ZN13System_serial6serial12TransmitDataEPKhtm>
	Disable_DE
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	f007 fd7b 	bl	800a204 <HAL_GPIO_WritePin>
	;
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <_ZN8Inverter9Voltronic9set_eventENS0_9eventTypeE>:

inline void Voltronic::set_event(enum eventType event) {
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	2201      	movs	r2, #1
 800272a:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_ZN8Inverter9Voltronic9rst_eventENS0_9eventTypeE>:
inline void Voltronic::rst_event(enum eventType event) {
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	2200      	movs	r2, #0
 800274e:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>:
enum Voltronic::status Voltronic::check_event(enum eventType event) {
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]

	status stat = Voltronic_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x30>
		stat = Voltronic_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e00e      	b.n	80027ac <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x4e>
	} else if (!Event[event]) {
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE+0x4e>
		stat = Voltronic_ERR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]

}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum Voltronic::status Voltronic::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70fb      	strb	r3, [r7, #3]
 80027c6:	4613      	mov	r3, r2
 80027c8:	803b      	strh	r3, [r7, #0]
	status stat = Voltronic_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
	uint32_t prev_time = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]

	prev_time = HAL_GetTick(); //we get new time before going into while
 80027d2:	f006 f817 	bl	8008804 <HAL_GetTick>
 80027d6:	60b8      	str	r0, [r7, #8]
	while ((check_event(event) != Voltronic_OK)
 80027d8:	e002      	b.n	80027e0 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x26>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 80027da:	200a      	movs	r0, #10
 80027dc:	f002 fb60 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != Voltronic_OK)
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffba 	bl	800275e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>
 80027ea:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4a>
 80027f0:	f006 f808 	bl	8008804 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad2      	subs	r2, r2, r3
 80027fa:	883b      	ldrh	r3, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d201      	bcs.n	8002804 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4a>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x4c>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e7      	bne.n	80027da <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x20>
	}

	if (check_event(event) != Voltronic_OK) {
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffa5 	bl	800275e <_ZN8Inverter9Voltronic11check_eventENS0_9eventTypeE>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <_ZN8Inverter9Voltronic18check_eventTimeoutENS0_9eventTypeEt+0x6e>
		stat = Voltronic_ERR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8002828:	7bfb      	ldrb	r3, [r7, #15]

}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_ZN8Inverter9Voltronic9CRC16_calEPKht>:

uint16_t Voltronic::CRC16_cal(const uint8_t *P, uint16_t len) {
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
	uint8_t temp;
	uint8_t i;
	uint16_t c;
	uint8_t TT;
	uint16_t crc = 0xFFFF;
 8002840:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002844:	827b      	strh	r3, [r7, #18]

	for (c = 0; c < len; c++) {
 8002846:	2300      	movs	r3, #0
 8002848:	82bb      	strh	r3, [r7, #20]
 800284a:	e02b      	b.n	80028a4 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x72>
		temp = P[c];
 800284c:	8abb      	ldrh	r3, [r7, #20]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	747b      	strb	r3, [r7, #17]
		crc = crc ^ temp;
 8002856:	7c7b      	ldrb	r3, [r7, #17]
 8002858:	b29a      	uxth	r2, r3
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	4053      	eors	r3, r2
 800285e:	827b      	strh	r3, [r7, #18]

		for (i = 0; i < 8; i++) {
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
 8002864:	e018      	b.n	8002898 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x66>
			TT = crc & 1;
 8002866:	8a7b      	ldrh	r3, [r7, #18]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	743b      	strb	r3, [r7, #16]
			crc = crc >> 1;
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	827b      	strh	r3, [r7, #18]
			crc = crc & 0x7FFF;
 8002876:	8a7b      	ldrh	r3, [r7, #18]
 8002878:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800287c:	827b      	strh	r3, [r7, #18]

			if (TT == 1) {
 800287e:	7c3b      	ldrb	r3, [r7, #16]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x60>
				crc = crc ^ 0xA001;
 8002884:	8a7b      	ldrh	r3, [r7, #18]
 8002886:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800288a:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800288e:	43db      	mvns	r3, r3
 8002890:	827b      	strh	r3, [r7, #18]
		for (i = 0; i < 8; i++) {
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	3301      	adds	r3, #1
 8002896:	75fb      	strb	r3, [r7, #23]
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b07      	cmp	r3, #7
 800289c:	d9e3      	bls.n	8002866 <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x34>
	for (c = 0; c < len; c++) {
 800289e:	8abb      	ldrh	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	82bb      	strh	r3, [r7, #20]
 80028a4:	8aba      	ldrh	r2, [r7, #20]
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3cf      	bcc.n	800284c <_ZN8Inverter9Voltronic9CRC16_calEPKht+0x1a>

			crc = crc & 0xFFFF;
		}
	}

	return crc;
 80028ac:	8a7b      	ldrh	r3, [r7, #18]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_ZN8Inverter9Voltronic4RxCBEh>:

/*Interrupt callbacks*/

void Voltronic::RxCB(uint8_t data) {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	*Rx_info.Rx++ = data;
 80028c6:	78f8      	ldrb	r0, [r7, #3]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	f8c2 121c 	str.w	r1, [r2, #540]	@ 0x21c
 80028d6:	4602      	mov	r2, r0
 80028d8:	701a      	strb	r2, [r3, #0]
	Rx_info.Rxcount++;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220

	if (data == Rx_info.EndChar) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <_ZN8Inverter9Voltronic4RxCBEh+0x5e>
		set_event(rx_evt);
 8002904:	2100      	movs	r1, #0
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff05 	bl	8002716 <_ZN8Inverter9Voltronic9set_eventENS0_9eventTypeE>
		serial_.RxintDis();
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fe1a 	bl	800554c <_ZN13System_serial6serial8RxintDisEv>
	}
#pragma GCC diagnostic pop
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh>:

void Voltronic::TxCB(UART_HandleTypeDef *huart) {

}

void Voltronic::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e009      	b.n	800294a <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4a11      	ldr	r2, [pc, #68]	@ (8002980 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 800293a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d006      	beq.n	8002952 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	3301      	adds	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d9f2      	bls.n	8002936 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8002950:	e000      	b.n	8002954 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8002952:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <_ZN8Inverter9Voltronic10RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ffa2 	bl	80028ba <_ZN8Inverter9Voltronic4RxCBEh>
	}

}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200034b8 	.word	0x200034b8

08002984 <_ZN8Inverter9Voltronic10TxCBStaticEP20__UART_HandleTypeDef>:
void Voltronic::TxCBStatic(UART_HandleTypeDef *huart) {
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029aa:	461a      	mov	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f00f f88e 	bl	8011ace <memset>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f00f f885 	bl	8011ace <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029da:	6053      	str	r3, [r2, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80029e2:	3304      	adds	r3, #4
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fd69 	bl	80054be <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80029f2:	3308      	adds	r3, #8
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fdc4 	bl	8005582 <_ZN10System_sys16Parsing_CheckingC1Ev>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a00:	461a      	mov	r2, r3
 8002a02:	2300      	movs	r3, #0
 8002a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8002a06:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4a11      	ldr	r2, [pc, #68]	@ (8002a54 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	@ (8002a54 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002a2c:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 8002a2e:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d902      	bls.n	8002a3c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 8002a3c:	4906      	ldr	r1, [pc, #24]	@ (8002a58 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 8002a3e:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 8002a40:	f002 fbce 	bl	80051e0 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200034ec 	.word	0x200034ec
 8002a54:	200034d4 	.word	0x200034d4
 8002a58:	08004839 	.word	0x08004839
 8002a5c:	080047d5 	.word	0x080047d5

08002a60 <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	230a      	movs	r3, #10
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a78:	2204      	movs	r2, #4
 8002a7a:	498f      	ldr	r1, [pc, #572]	@ (8002cb8 <_ZN5Modem8simA76724initEv+0x258>)
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f001 fbb3 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	2100      	movs	r1, #0
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f001 fcda 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002a92:	2301      	movs	r3, #1
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	230a      	movs	r3, #10
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	4985      	ldr	r1, [pc, #532]	@ (8002cb8 <_ZN5Modem8simA76724initEv+0x258>)
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 fba0 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aac:	2100      	movs	r1, #0
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f001 fcc7 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002ab8:	2301      	movs	r3, #1
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	230a      	movs	r3, #10
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	497c      	ldr	r1, [pc, #496]	@ (8002cb8 <_ZN5Modem8simA76724initEv+0x258>)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f001 fb8d 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f001 fcb4 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 8002ade:	2301      	movs	r3, #1
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aea:	220b      	movs	r2, #11
 8002aec:	4973      	ldr	r1, [pc, #460]	@ (8002cbc <_ZN5Modem8simA76724initEv+0x25c>)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 fb7a 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af8:	2100      	movs	r1, #0
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f001 fca1 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 8002b04:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002b08:	f002 f9ca 	bl	8004ea0 <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	230a      	movs	r3, #10
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4967      	ldr	r1, [pc, #412]	@ (8002cb8 <_ZN5Modem8simA76724initEv+0x258>)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f001 fb63 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	2100      	movs	r1, #0
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f001 fc8a 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002b32:	2301      	movs	r3, #1
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	230a      	movs	r3, #10
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b3e:	2204      	movs	r2, #4
 8002b40:	495d      	ldr	r1, [pc, #372]	@ (8002cb8 <_ZN5Modem8simA76724initEv+0x258>)
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f001 fb50 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f001 fc77 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002b58:	2301      	movs	r3, #1
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	230a      	movs	r3, #10
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b64:	2204      	movs	r2, #4
 8002b66:	4954      	ldr	r1, [pc, #336]	@ (8002cb8 <_ZN5Modem8simA76724initEv+0x258>)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f001 fb3d 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	2100      	movs	r1, #0
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f001 fc64 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 8002b7e:	2301      	movs	r3, #1
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	230a      	movs	r3, #10
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	494c      	ldr	r1, [pc, #304]	@ (8002cc0 <_ZN5Modem8simA76724initEv+0x260>)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f001 fb2a 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b98:	2100      	movs	r1, #0
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f001 fc51 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	230a      	movs	r3, #10
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	4944      	ldr	r1, [pc, #272]	@ (8002cc4 <_ZN5Modem8simA76724initEv+0x264>)
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f001 fb17 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 fc3e 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	230a      	movs	r3, #10
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd6:	220b      	movs	r2, #11
 8002bd8:	493b      	ldr	r1, [pc, #236]	@ (8002cc8 <_ZN5Modem8simA76724initEv+0x268>)
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f001 fb04 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be4:	2100      	movs	r1, #0
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f001 fc2b 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4933      	ldr	r1, [pc, #204]	@ (8002ccc <_ZN5Modem8simA76724initEv+0x26c>)
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f001 faf1 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f001 fc18 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c12:	4603      	mov	r3, r0
 8002c14:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 8002c16:	2301      	movs	r3, #1
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c22:	2218      	movs	r2, #24
 8002c24:	492a      	ldr	r1, [pc, #168]	@ (8002cd0 <_ZN5Modem8simA76724initEv+0x270>)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f001 fade 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c30:	2100      	movs	r1, #0
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f001 fc05 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	230a      	movs	r3, #10
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c48:	220b      	movs	r2, #11
 8002c4a:	4922      	ldr	r1, [pc, #136]	@ (8002cd4 <_ZN5Modem8simA76724initEv+0x274>)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 facb 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	2100      	movs	r1, #0
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f001 fbf2 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 8002c62:	2301      	movs	r3, #1
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	230a      	movs	r3, #10
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c6e:	220b      	movs	r2, #11
 8002c70:	4919      	ldr	r1, [pc, #100]	@ (8002cd8 <_ZN5Modem8simA76724initEv+0x278>)
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f001 fab8 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 fbdf 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 8002c88:	2301      	movs	r3, #1
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	230a      	movs	r3, #10
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c94:	220c      	movs	r2, #12
 8002c96:	4911      	ldr	r1, [pc, #68]	@ (8002cdc <_ZN5Modem8simA76724initEv+0x27c>)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f001 faa5 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 fbcc 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002caa:	4603      	mov	r3, r0
 8002cac:	73fb      	strb	r3, [r7, #15]

	return stat;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]

}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	080144c0 	.word	0x080144c0
 8002cbc:	080144c8 	.word	0x080144c8
 8002cc0:	0801457c 	.word	0x0801457c
 8002cc4:	08014584 	.word	0x08014584
 8002cc8:	080144d4 	.word	0x080144d4
 8002ccc:	080144e0 	.word	0x080144e0
 8002cd0:	080144f0 	.word	0x080144f0
 8002cd4:	0801450c 	.word	0x0801450c
 8002cd8:	08014518 	.word	0x08014518
 8002cdc:	08014524 	.word	0x08014524

08002ce0 <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b092      	sub	sp, #72	@ 0x48
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	222e      	movs	r2, #46	@ 0x2e
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f00e fee6 	bl	8011ace <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	4920      	ldr	r1, [pc, #128]	@ (8002d8c <_ZN5Modem8simA76726setAPNEPc+0xac>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f00e fe7c 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd faab 	bl	8000270 <strlen>
 8002d1a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	f107 010c 	add.w	r1, r7, #12
 8002d22:	2301      	movs	r3, #1
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	230a      	movs	r3, #10
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f001 fa5a 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002d34:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f001 fb81 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002d46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <_ZN5Modem8simA76726setAPNEPc+0x8e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d54:	3308      	adds	r3, #8
 8002d56:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d5e:	8a92      	ldrh	r2, [r2, #20]
 8002d60:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fc18 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <_ZN5Modem8simA76726setAPNEPc+0x92>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <_ZN5Modem8simA76726setAPNEPc+0x94>
 8002d72:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 8002d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3740      	adds	r7, #64	@ 0x40
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	08014134 	.word	0x08014134

08002d90 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	@ 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	491e      	ldr	r1, [pc, #120]	@ (8002e34 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00e fe24 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002dc0:	f107 0308 	add.w	r3, r7, #8
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fa53 	bl	8000270 <strlen>
 8002dca:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	f107 0108 	add.w	r1, r7, #8
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f001 fa02 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de8:	2100      	movs	r1, #0
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f001 fb29 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002df0:	4603      	mov	r3, r0
 8002df2:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e00:	3308      	adds	r3, #8
 8002e02:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e0a:	8a92      	ldrh	r2, [r2, #20]
 8002e0c:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fbc2 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 8002e1e:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8002e28:	7ffb      	ldrb	r3, [r7, #31]

}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08014150 	.word	0x08014150

08002e38 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 8002e42:	2301      	movs	r3, #1
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	230a      	movs	r3, #10
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4e:	220a      	movs	r2, #10
 8002e50:	492b      	ldr	r1, [pc, #172]	@ (8002f00 <_ZN5Modem8simA76726getSimEPc+0xc8>)
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f001 f9c8 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002e58:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f001 faef 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d111      	bne.n	8002e92 <_ZN5Modem8simA76726getSimEPc+0x5a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e74:	3308      	adds	r3, #8
 8002e76:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e7e:	8a92      	ldrh	r2, [r2, #20]
 8002e80:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 fb88 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <_ZN5Modem8simA76726getSimEPc+0x5a>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <_ZN5Modem8simA76726getSimEPc+0x5c>
 8002e92:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d024      	beq.n	8002ee2 <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002e9e:	3008      	adds	r0, #8
 8002ea0:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea8:	8a9b      	ldrh	r3, [r3, #20]
 8002eaa:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9302      	str	r3, [sp, #8]
 8002eb0:	230d      	movs	r3, #13
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	233a      	movs	r3, #58	@ 0x3a
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <_ZN5Modem8simA76726getSimEPc+0xcc>)
 8002eba:	f002 fb93 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002ebe:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	490d      	ldr	r1, [pc, #52]	@ (8002f08 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	cb03      	ldmia	r3!, {r0, r1}
 8002ed8:	6010      	str	r0, [r2, #0]
 8002eda:	6051      	str	r1, [r2, #4]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	7213      	strb	r3, [r2, #8]
 8002ee0:	e00a      	b.n	8002ef8 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4908      	ldr	r1, [pc, #32]	@ (8002f08 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	cb03      	ldmia	r3!, {r0, r1}
 8002eec:	6010      	str	r0, [r2, #0]
 8002eee:	6051      	str	r1, [r2, #4]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	7213      	strb	r3, [r2, #8]
 8002ef4:	e000      	b.n	8002ef8 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 8002ef6:	bf00      	nop
	}

}
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	08014534 	.word	0x08014534
 8002f04:	08014160 	.word	0x08014160
 8002f08:	08014168 	.word	0x08014168

08002f0c <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af04      	add	r7, sp, #16
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 8002f16:	2301      	movs	r3, #1
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f22:	220a      	movs	r2, #10
 8002f24:	4961      	ldr	r1, [pc, #388]	@ (80030ac <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f001 f95e 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002f2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002f30:	2100      	movs	r1, #0
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f001 fa85 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d111      	bne.n	8002f66 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002f48:	3308      	adds	r3, #8
 8002f4a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f52:	8a92      	ldrh	r2, [r2, #20]
 8002f54:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 fb1e 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 8002f66:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8093 	beq.w	8003094 <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002f74:	3008      	adds	r0, #8
 8002f76:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f7e:	8a9b      	ldrh	r3, [r3, #20]
 8002f80:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9302      	str	r3, [sp, #8]
 8002f86:	230d      	movs	r3, #13
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	232c      	movs	r3, #44	@ 0x2c
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4b48      	ldr	r3, [pc, #288]	@ (80030b0 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 8002f90:	f002 fb28 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002f94:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d06d      	beq.n	8003080 <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	3b30      	subs	r3, #48	@ 0x30
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	d85d      	bhi.n	800306a <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 8002fae:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fd5 	.word	0x08002fd5
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002ff9 	.word	0x08002ff9
 8002fc0:	0800300d 	.word	0x0800300d
 8002fc4:	08003025 	.word	0x08003025
 8002fc8:	08003035 	.word	0x08003035
 8002fcc:	08003047 	.word	0x08003047
 8002fd0:	08003057 	.word	0x08003057
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4937      	ldr	r1, [pc, #220]	@ (80030b4 <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 8002fd8:	461a      	mov	r2, r3
 8002fda:	460b      	mov	r3, r1
 8002fdc:	cb03      	ldmia	r3!, {r0, r1}
 8002fde:	6010      	str	r0, [r2, #0]
 8002fe0:	6051      	str	r1, [r2, #4]

				break;
 8002fe2:	e04c      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4934      	ldr	r1, [pc, #208]	@ (80030b8 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 8002fe8:	461a      	mov	r2, r3
 8002fea:	460b      	mov	r3, r1
 8002fec:	cb03      	ldmia	r3!, {r0, r1}
 8002fee:	6010      	str	r0, [r2, #0]
 8002ff0:	6051      	str	r1, [r2, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	7213      	strb	r3, [r2, #8]

				break;
 8002ff6:	e042      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4930      	ldr	r1, [pc, #192]	@ (80030bc <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	460b      	mov	r3, r1
 8003000:	cb03      	ldmia	r3!, {r0, r1}
 8003002:	6010      	str	r0, [r2, #0]
 8003004:	6051      	str	r1, [r2, #4]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	8113      	strh	r3, [r2, #8]

				break;
 800300a:	e038      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	492c      	ldr	r1, [pc, #176]	@ (80030c0 <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 8003010:	461a      	mov	r2, r3
 8003012:	460b      	mov	r3, r1
 8003014:	cb03      	ldmia	r3!, {r0, r1}
 8003016:	6010      	str	r0, [r2, #0]
 8003018:	6051      	str	r1, [r2, #4]
 800301a:	8819      	ldrh	r1, [r3, #0]
 800301c:	789b      	ldrb	r3, [r3, #2]
 800301e:	8111      	strh	r1, [r2, #8]
 8003020:	7293      	strb	r3, [r2, #10]

				break;
 8003022:	e02c      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4927      	ldr	r1, [pc, #156]	@ (80030c4 <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8003028:	461a      	mov	r2, r3
 800302a:	460b      	mov	r3, r1
 800302c:	cb03      	ldmia	r3!, {r0, r1}
 800302e:	6010      	str	r0, [r2, #0]
 8003030:	6051      	str	r1, [r2, #4]

				break;
 8003032:	e024      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4a24      	ldr	r2, [pc, #144]	@ (80030c8 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 8003038:	461c      	mov	r4, r3
 800303a:	4613      	mov	r3, r2
 800303c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800303e:	6020      	str	r0, [r4, #0]
 8003040:	6061      	str	r1, [r4, #4]
 8003042:	60a2      	str	r2, [r4, #8]

				break;
 8003044:	e01b      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	4920      	ldr	r1, [pc, #128]	@ (80030cc <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 800304a:	461a      	mov	r2, r3
 800304c:	460b      	mov	r3, r1
 800304e:	cb03      	ldmia	r3!, {r0, r1}
 8003050:	6010      	str	r0, [r2, #0]
 8003052:	6051      	str	r1, [r2, #4]

				break;
 8003054:	e013      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	491d      	ldr	r1, [pc, #116]	@ (80030d0 <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	cb03      	ldmia	r3!, {r0, r1}
 8003060:	6010      	str	r0, [r2, #0]
 8003062:	6051      	str	r1, [r2, #4]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	7213      	strb	r3, [r2, #8]

				break;
 8003068:	e009      	b.n	800307e <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4919      	ldr	r1, [pc, #100]	@ (80030d4 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 800306e:	461a      	mov	r2, r3
 8003070:	460b      	mov	r3, r1
 8003072:	cb03      	ldmia	r3!, {r0, r1}
 8003074:	6010      	str	r0, [r2, #0]
 8003076:	6051      	str	r1, [r2, #4]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	7213      	strb	r3, [r2, #8]

				break;
 800307c:	bf00      	nop
			}
			}
			return;
 800307e:	e012      	b.n	80030a6 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4914      	ldr	r1, [pc, #80]	@ (80030d4 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8003084:	461a      	mov	r2, r3
 8003086:	460b      	mov	r3, r1
 8003088:	cb03      	ldmia	r3!, {r0, r1}
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	6051      	str	r1, [r2, #4]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	7213      	strb	r3, [r2, #8]
 8003092:	e008      	b.n	80030a6 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	490f      	ldr	r1, [pc, #60]	@ (80030d4 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 8003098:	461a      	mov	r2, r3
 800309a:	460b      	mov	r3, r1
 800309c:	cb03      	ldmia	r3!, {r0, r1}
 800309e:	6010      	str	r0, [r2, #0]
 80030a0:	6051      	str	r1, [r2, #4]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	7213      	strb	r3, [r2, #8]
	}

}
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	08014540 	.word	0x08014540
 80030b0:	08014174 	.word	0x08014174
 80030b4:	0801417c 	.word	0x0801417c
 80030b8:	08014184 	.word	0x08014184
 80030bc:	08014190 	.word	0x08014190
 80030c0:	0801419c 	.word	0x0801419c
 80030c4:	080141a8 	.word	0x080141a8
 80030c8:	080141b0 	.word	0x080141b0
 80030cc:	080141bc 	.word	0x080141bc
 80030d0:	080141c4 	.word	0x080141c4
 80030d4:	08014168 	.word	0x08014168

080030d8 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af04      	add	r7, sp, #16
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 80030e2:	2301      	movs	r3, #1
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	230a      	movs	r3, #10
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ee:	220b      	movs	r2, #11
 80030f0:	495b      	ldr	r1, [pc, #364]	@ (8003260 <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f001 f878 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80030f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f001 f99f 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d111      	bne.n	8003132 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003114:	3308      	adds	r3, #8
 8003116:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800311e:	8a92      	ldrh	r2, [r2, #20]
 8003120:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fa38 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 8003132:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8087 	beq.w	8003248 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003140:	3008      	adds	r0, #8
 8003142:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314a:	8a9b      	ldrh	r3, [r3, #20]
 800314c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	230d      	movs	r3, #13
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	232c      	movs	r3, #44	@ 0x2c
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4b42      	ldr	r3, [pc, #264]	@ (8003264 <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 800315c:	f002 fa42 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003160:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800316c:	2b00      	cmp	r3, #0
 800316e:	d061      	beq.n	8003234 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3b30      	subs	r3, #48	@ 0x30
 8003176:	2b06      	cmp	r3, #6
 8003178:	d851      	bhi.n	800321e <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 800317a:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	0800319d 	.word	0x0800319d
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031d5 	.word	0x080031d5
 8003190:	080031ed 	.word	0x080031ed
 8003194:	080031fd 	.word	0x080031fd
 8003198:	0800320f 	.word	0x0800320f
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4932      	ldr	r1, [pc, #200]	@ (8003268 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 80031a0:	461a      	mov	r2, r3
 80031a2:	460b      	mov	r3, r1
 80031a4:	cb03      	ldmia	r3!, {r0, r1}
 80031a6:	6010      	str	r0, [r2, #0]
 80031a8:	6051      	str	r1, [r2, #4]

				break;
 80031aa:	e042      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	492f      	ldr	r1, [pc, #188]	@ (800326c <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 80031b0:	461a      	mov	r2, r3
 80031b2:	460b      	mov	r3, r1
 80031b4:	cb03      	ldmia	r3!, {r0, r1}
 80031b6:	6010      	str	r0, [r2, #0]
 80031b8:	6051      	str	r1, [r2, #4]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	7213      	strb	r3, [r2, #8]

				break;
 80031be:	e038      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	492b      	ldr	r1, [pc, #172]	@ (8003270 <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 80031c4:	461a      	mov	r2, r3
 80031c6:	460b      	mov	r3, r1
 80031c8:	cb03      	ldmia	r3!, {r0, r1}
 80031ca:	6010      	str	r0, [r2, #0]
 80031cc:	6051      	str	r1, [r2, #4]
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	8113      	strh	r3, [r2, #8]

				break;
 80031d2:	e02e      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4927      	ldr	r1, [pc, #156]	@ (8003274 <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 80031d8:	461a      	mov	r2, r3
 80031da:	460b      	mov	r3, r1
 80031dc:	cb03      	ldmia	r3!, {r0, r1}
 80031de:	6010      	str	r0, [r2, #0]
 80031e0:	6051      	str	r1, [r2, #4]
 80031e2:	8819      	ldrh	r1, [r3, #0]
 80031e4:	789b      	ldrb	r3, [r3, #2]
 80031e6:	8111      	strh	r1, [r2, #8]
 80031e8:	7293      	strb	r3, [r2, #10]

				break;
 80031ea:	e022      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4922      	ldr	r1, [pc, #136]	@ (8003278 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 80031f0:	461a      	mov	r2, r3
 80031f2:	460b      	mov	r3, r1
 80031f4:	cb03      	ldmia	r3!, {r0, r1}
 80031f6:	6010      	str	r0, [r2, #0]
 80031f8:	6051      	str	r1, [r2, #4]

				break;
 80031fa:	e01a      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4a1f      	ldr	r2, [pc, #124]	@ (800327c <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 8003200:	461c      	mov	r4, r3
 8003202:	4613      	mov	r3, r2
 8003204:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003206:	6020      	str	r0, [r4, #0]
 8003208:	6061      	str	r1, [r4, #4]
 800320a:	60a2      	str	r2, [r4, #8]

				break;
 800320c:	e011      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	491b      	ldr	r1, [pc, #108]	@ (8003280 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 8003212:	461a      	mov	r2, r3
 8003214:	460b      	mov	r3, r1
 8003216:	cb03      	ldmia	r3!, {r0, r1}
 8003218:	6010      	str	r0, [r2, #0]
 800321a:	6051      	str	r1, [r2, #4]

				break;
 800321c:	e009      	b.n	8003232 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	4918      	ldr	r1, [pc, #96]	@ (8003284 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8003222:	461a      	mov	r2, r3
 8003224:	460b      	mov	r3, r1
 8003226:	cb03      	ldmia	r3!, {r0, r1}
 8003228:	6010      	str	r0, [r2, #0]
 800322a:	6051      	str	r1, [r2, #4]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	7213      	strb	r3, [r2, #8]

				break;
 8003230:	bf00      	nop
			}
			}
			return;
 8003232:	e012      	b.n	800325a <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4913      	ldr	r1, [pc, #76]	@ (8003284 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8003238:	461a      	mov	r2, r3
 800323a:	460b      	mov	r3, r1
 800323c:	cb03      	ldmia	r3!, {r0, r1}
 800323e:	6010      	str	r0, [r2, #0]
 8003240:	6051      	str	r1, [r2, #4]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	7213      	strb	r3, [r2, #8]
 8003246:	e008      	b.n	800325a <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	490e      	ldr	r1, [pc, #56]	@ (8003284 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 800324c:	461a      	mov	r2, r3
 800324e:	460b      	mov	r3, r1
 8003250:	cb03      	ldmia	r3!, {r0, r1}
 8003252:	6010      	str	r0, [r2, #0]
 8003254:	6051      	str	r1, [r2, #4]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	7213      	strb	r3, [r2, #8]
	}

}
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}
 8003260:	0801454c 	.word	0x0801454c
 8003264:	080141d0 	.word	0x080141d0
 8003268:	0801417c 	.word	0x0801417c
 800326c:	08014184 	.word	0x08014184
 8003270:	08014190 	.word	0x08014190
 8003274:	0801419c 	.word	0x0801419c
 8003278:	080141a8 	.word	0x080141a8
 800327c:	080141b0 	.word	0x080141b0
 8003280:	080141bc 	.word	0x080141bc
 8003284:	08014168 	.word	0x08014168

08003288 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af04      	add	r7, sp, #16
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	f107 0310 	add.w	r3, r7, #16
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 80032a6:	2301      	movs	r3, #1
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	230a      	movs	r3, #10
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b2:	220b      	movs	r2, #11
 80032b4:	4928      	ldr	r1, [pc, #160]	@ (8003358 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 ff96 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80032bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032c0:	2100      	movs	r1, #0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f001 f8bd 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d111      	bne.n	80032f6 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80032d8:	3308      	adds	r3, #8
 80032da:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032e2:	8a92      	ldrh	r2, [r2, #20]
 80032e4:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 f956 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 80032f6:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d029      	beq.n	8003350 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003302:	3008      	adds	r0, #8
 8003304:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800330c:	8a9b      	ldrh	r3, [r3, #20]
 800330e:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	9302      	str	r3, [sp, #8]
 8003316:	232c      	movs	r3, #44	@ 0x2c
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	233a      	movs	r3, #58	@ 0x3a
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 8003320:	f002 f960 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003324:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 8003334:	7b3b      	ldrb	r3, [r7, #12]
 8003336:	2b30      	cmp	r3, #48	@ 0x30
 8003338:	d002      	beq.n	8003340 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 800333a:	2b31      	cmp	r3, #49	@ 0x31
 800333c:	d004      	beq.n	8003348 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 800333e:	e007      	b.n	8003350 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
				break;
 8003346:	e003      	b.n	8003350 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
				break;
 800334e:	bf00      	nop
}
 8003350:	bf00      	nop
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08014558 	.word	0x08014558
 800335c:	080141d8 	.word	0x080141d8

08003360 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	@ 0x28
 8003364:	af04      	add	r7, sp, #16
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 8003382:	2301      	movs	r3, #1
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	230a      	movs	r3, #10
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800338e:	220a      	movs	r2, #10
 8003390:	4945      	ldr	r1, [pc, #276]	@ (80034a8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 ff28 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8003398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339c:	2100      	movs	r1, #0
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f001 f84f 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d111      	bne.n	80033d2 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80033b4:	3308      	adds	r3, #8
 80033b6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033be:	8a92      	ldrh	r2, [r2, #20]
 80033c0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 f8e8 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 80033d2:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d062      	beq.n	800349e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80033de:	3008      	adds	r0, #8
 80033e0:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e8:	8a9b      	ldrh	r3, [r3, #20]
 80033ea:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	232c      	movs	r3, #44	@ 0x2c
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	233a      	movs	r3, #58	@ 0x3a
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4b2c      	ldr	r3, [pc, #176]	@ (80034ac <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 80033fc:	f002 f8f2 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003400:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800340c:	2b00      	cmp	r3, #0
 800340e:	d046      	beq.n	800349e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	4926      	ldr	r1, [pc, #152]	@ (80034b0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe faf0 	bl	80019fc <_ZSt6strstrPcPKc>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8003432:	e034      	b.n	800349e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	491e      	ldr	r1, [pc, #120]	@ (80034b4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fade 	bl	80019fc <_ZSt6strstrPcPKc>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	e022      	b.n	800349e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	4916      	ldr	r1, [pc, #88]	@ (80034b8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe facc 	bl	80019fc <_ZSt6strstrPcPKc>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]
}
 800347a:	e010      	b.n	800349e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 800347c:	f107 0308 	add.w	r3, r7, #8
 8003480:	490e      	ldr	r1, [pc, #56]	@ (80034bc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe faba 	bl	80019fc <_ZSt6strstrPcPKc>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	08014564 	.word	0x08014564
 80034ac:	080141e0 	.word	0x080141e0
 80034b0:	080141e8 	.word	0x080141e8
 80034b4:	080141f4 	.word	0x080141f4
 80034b8:	080141f8 	.word	0x080141f8
 80034bc:	08014200 	.word	0x08014200

080034c0 <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	f107 0310 	add.w	r3, r7, #16
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 80034dc:	2301      	movs	r3, #1
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	230a      	movs	r3, #10
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e8:	2208      	movs	r2, #8
 80034ea:	4939      	ldr	r1, [pc, #228]	@ (80035d0 <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fe7b 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80034f2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80034f6:	2100      	movs	r1, #0
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 ffa2 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80034fe:	4603      	mov	r3, r0
 8003500:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003502:	7dbb      	ldrb	r3, [r7, #22]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d111      	bne.n	800352c <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800350e:	3308      	adds	r3, #8
 8003510:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003518:	8a92      	ldrh	r2, [r2, #20]
 800351a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800351c:	4618      	mov	r0, r3
 800351e:	f002 f83b 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 800352c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800352e:	2b00      	cmp	r3, #0
 8003530:	d041      	beq.n	80035b6 <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003538:	3008      	adds	r0, #8
 800353a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003542:	8a9b      	ldrh	r3, [r3, #20]
 8003544:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	232c      	movs	r3, #44	@ 0x2c
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	233a      	movs	r3, #58	@ 0x3a
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4b1f      	ldr	r3, [pc, #124]	@ (80035d4 <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 8003556:	f002 f845 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800355a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01b      	beq.n	80035a2 <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	4618      	mov	r0, r3
 8003570:	f00d fca8 	bl	8010ec4 <atoi>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 8003578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800357c:	2b62      	cmp	r3, #98	@ 0x62
 800357e:	dd02      	ble.n	8003586 <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
 8003584:	e005      	b.n	8003592 <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3b71      	subs	r3, #113	@ 0x71
 800358e:	b2db      	uxtb	r3, r3
 8003590:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 8003592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003596:	461a      	mov	r2, r3
 8003598:	490f      	ldr	r1, [pc, #60]	@ (80035d8 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 800359a:	6838      	ldr	r0, [r7, #0]
 800359c:	f00e fa34 	bl	8011a08 <siprintf>
 80035a0:	e012      	b.n	80035c8 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	490d      	ldr	r1, [pc, #52]	@ (80035dc <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 80035a6:	461a      	mov	r2, r3
 80035a8:	460b      	mov	r3, r1
 80035aa:	cb03      	ldmia	r3!, {r0, r1}
 80035ac:	6010      	str	r0, [r2, #0]
 80035ae:	6051      	str	r1, [r2, #4]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	7213      	strb	r3, [r2, #8]
 80035b4:	e008      	b.n	80035c8 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4908      	ldr	r1, [pc, #32]	@ (80035dc <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 80035ba:	461a      	mov	r2, r3
 80035bc:	460b      	mov	r3, r1
 80035be:	cb03      	ldmia	r3!, {r0, r1}
 80035c0:	6010      	str	r0, [r2, #0]
 80035c2:	6051      	str	r1, [r2, #4]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	7213      	strb	r3, [r2, #8]
	}

}
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	08014570 	.word	0x08014570
 80035d4:	08014204 	.word	0x08014204
 80035d8:	0801420c 	.word	0x0801420c
 80035dc:	08014168 	.word	0x08014168

080035e0 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0a0      	sub	sp, #128	@ 0x80
 80035e4:	af04      	add	r7, sp, #16
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	2260      	movs	r2, #96	@ 0x60
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f00e fa63 	bl	8011ace <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8003608:	2301      	movs	r3, #1
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	230a      	movs	r3, #10
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003614:	2212      	movs	r2, #18
 8003616:	492c      	ldr	r1, [pc, #176]	@ (80036c8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fde5 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 800361e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 ff0c 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003630:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003634:	2b00      	cmp	r3, #0
 8003636:	d111      	bne.n	800365c <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800363e:	3308      	adds	r3, #8
 8003640:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003648:	8a92      	ldrh	r2, [r2, #20]
 800364a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800364c:	4618      	mov	r0, r3
 800364e:	f001 ffa3 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 800365c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02c      	beq.n	80036bc <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003668:	3008      	adds	r0, #8
 800366a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003672:	8a9b      	ldrh	r3, [r3, #20]
 8003674:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	2322      	movs	r3, #34	@ 0x22
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2322      	movs	r3, #34	@ 0x22
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 8003686:	f001 ffad 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800368a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	4619      	mov	r1, r3
 80036a0:	6838      	ldr	r0, [r7, #0]
 80036a2:	f7fe f9ab 	bl	80019fc <_ZSt6strstrPcPKc>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 80036b6:	2302      	movs	r3, #2
 80036b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 80036bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3770      	adds	r7, #112	@ 0x70
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	080145ac 	.word	0x080145ac
 80036cc:	08014234 	.word	0x08014234

080036d0 <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 80036f0:	2303      	movs	r3, #3
 80036f2:	9303      	str	r3, [sp, #12]
 80036f4:	230a      	movs	r3, #10
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	2302      	movs	r3, #2
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	232b      	movs	r3, #43	@ 0x2b
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003704:	220f      	movs	r2, #15
 8003706:	4928      	ldr	r1, [pc, #160]	@ (80037a8 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fdcf 	bl	80042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 800370e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003712:	2100      	movs	r1, #0
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fe94 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800371a:	4603      	mov	r3, r0
 800371c:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800371e:	7dbb      	ldrb	r3, [r7, #22]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d111      	bne.n	8003748 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800372a:	3308      	adds	r3, #8
 800372c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003734:	8a92      	ldrh	r2, [r2, #20]
 8003736:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003738:	4618      	mov	r0, r3
 800373a:	f001 ff2d 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 8003748:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800374a:	2b00      	cmp	r3, #0
 800374c:	d026      	beq.n	800379c <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003754:	3008      	adds	r0, #8
 8003756:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375e:	8a9b      	ldrh	r3, [r3, #20]
 8003760:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	230a      	movs	r3, #10
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	233a      	movs	r3, #58	@ 0x3a
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 8003772:	f001 ff37 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003776:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 800378a:	f107 030c 	add.w	r3, r7, #12
 800378e:	4618      	mov	r0, r3
 8003790:	f00d fb98 	bl	8010ec4 <atoi>
 8003794:	4603      	mov	r3, r0
 8003796:	b2da      	uxtb	r2, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 800379c:	7dfb      	ldrb	r3, [r7, #23]

}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	0801458c 	.word	0x0801458c
 80037ac:	08014244 	.word	0x08014244

080037b0 <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	@ 0x28
 80037b4:	af04      	add	r7, sp, #16
 80037b6:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 80037ce:	2303      	movs	r3, #3
 80037d0:	9303      	str	r3, [sp, #12]
 80037d2:	230a      	movs	r3, #10
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	2302      	movs	r3, #2
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	232b      	movs	r3, #43	@ 0x2b
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e2:	220e      	movs	r2, #14
 80037e4:	4923      	ldr	r1, [pc, #140]	@ (8003874 <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fd60 	bl	80042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 80037ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037f0:	2100      	movs	r1, #0
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fe25 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80037fc:	7dbb      	ldrb	r3, [r7, #22]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d111      	bne.n	8003826 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003808:	3308      	adds	r3, #8
 800380a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003812:	8a92      	ldrh	r2, [r2, #20]
 8003814:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003816:	4618      	mov	r0, r3
 8003818:	f001 febe 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8003826:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01d      	beq.n	8003868 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003832:	3008      	adds	r0, #8
 8003834:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800383c:	8a9b      	ldrh	r3, [r3, #20]
 800383e:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	9302      	str	r3, [sp, #8]
 8003846:	230a      	movs	r3, #10
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	233a      	movs	r3, #58	@ 0x3a
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 8003850:	f001 fec8 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003854:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	0801459c 	.word	0x0801459c
 8003878:	08014254 	.word	0x08014254

0800387c <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b09c      	sub	sp, #112	@ 0x70
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	461a      	mov	r2, r3
 8003888:	460b      	mov	r3, r1
 800388a:	72fb      	strb	r3, [r7, #11]
 800388c:	4613      	mov	r3, r2
 800388e:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	f107 0318 	add.w	r3, r7, #24
 80038a4:	224c      	movs	r2, #76	@ 0x4c
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f00e f910 	bl	8011ace <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 80038ae:	7afa      	ldrb	r2, [r7, #11]
 80038b0:	7abb      	ldrb	r3, [r7, #10]
 80038b2:	f107 0014 	add.w	r0, r7, #20
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4920      	ldr	r1, [pc, #128]	@ (800393c <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 80038bc:	f00e f8a4 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fcd3 	bl	8000270 <strlen>
 80038ca:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	f107 0114 	add.w	r1, r7, #20
 80038d2:	2301      	movs	r3, #1
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	230a      	movs	r3, #10
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fc82 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 80038e4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80038e8:	2100      	movs	r1, #0
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fda9 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80038f6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d111      	bne.n	8003922 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003904:	3308      	adds	r3, #8
 8003906:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800390e:	8a92      	ldrh	r2, [r2, #20]
 8003910:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003912:	4618      	mov	r0, r3
 8003914:	f001 fe40 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 8003922:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 800392e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003932:	4618      	mov	r0, r3
 8003934:	3768      	adds	r7, #104	@ 0x68
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	08014260 	.word	0x08014260

08003940 <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b09a      	sub	sp, #104	@ 0x68
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	224c      	movs	r2, #76	@ 0x4c
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f00e f8b2 	bl	8011ace <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	4920      	ldr	r1, [pc, #128]	@ (80039f4 <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 8003972:	4618      	mov	r0, r3
 8003974:	f00e f848 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003978:	f107 030c 	add.w	r3, r7, #12
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fc77 	bl	8000270 <strlen>
 8003982:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003984:	b29a      	uxth	r2, r3
 8003986:	f107 010c 	add.w	r1, r7, #12
 800398a:	2301      	movs	r3, #1
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	230a      	movs	r3, #10
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fc26 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 800399c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fd4d 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80039ae:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d111      	bne.n	80039da <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80039bc:	3308      	adds	r3, #8
 80039be:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039c6:	8a92      	ldrh	r2, [r2, #20]
 80039c8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fde4 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 80039da:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 80039e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3760      	adds	r7, #96	@ 0x60
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	0801427c 	.word	0x0801427c

080039f8 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b0b0      	sub	sp, #192	@ 0xc0
 80039fc:	af04      	add	r7, sp, #16
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	460b      	mov	r3, r1
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	f107 031c 	add.w	r3, r7, #28
 8003a1a:	2292      	movs	r2, #146	@ 0x92
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f00e f855 	bl	8011ace <memset>
	char recv_buf[5] = { 0 };
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8003a2c:	7afa      	ldrb	r2, [r7, #11]
 8003a2e:	f107 0018 	add.w	r0, r7, #24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	492c      	ldr	r1, [pc, #176]	@ (8003ae8 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 8003a36:	f00d ffe7 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8003a3a:	f107 0318 	add.w	r3, r7, #24
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fc16 	bl	8000270 <strlen>
 8003a44:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	f107 0118 	add.w	r1, r7, #24
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	230a      	movs	r3, #10
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	2302      	movs	r3, #2
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	232b      	movs	r3, #43	@ 0x2b
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fc23 	bl	80042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 8003a66:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fce8 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 8003a78:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d12c      	bne.n	8003ada <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003a86:	3008      	adds	r0, #8
 8003a88:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a90:	8a9b      	ldrh	r3, [r3, #20]
 8003a92:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	9302      	str	r3, [sp, #8]
 8003a9a:	230a      	movs	r3, #10
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	232c      	movs	r3, #44	@ 0x2c
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 8003aa4:	f001 fd9e 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003aa8:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	490c      	ldr	r1, [pc, #48]	@ (8003af0 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd ff9c 	bl	80019fc <_ZSt6strstrPcPKc>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8003ada:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	37b0      	adds	r7, #176	@ 0xb0
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08014290 	.word	0x08014290
 8003aec:	08014234 	.word	0x08014234
 8003af0:	080142b0 	.word	0x080142b0

08003af4 <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0ae      	sub	sp, #184	@ 0xb8
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	2292      	movs	r2, #146	@ 0x92
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00d ffd8 	bl	8011ace <memset>
	char recv_buf[5] = { 0 };
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	2300      	movs	r3, #0
 8003b24:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	f107 0310 	add.w	r3, r7, #16
 8003b2c:	492c      	ldr	r1, [pc, #176]	@ (8003be0 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00d ff6a 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8003b34:	f107 0310 	add.w	r3, r7, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fb99 	bl	8000270 <strlen>
 8003b3e:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	f107 0110 	add.w	r1, r7, #16
 8003b46:	2303      	movs	r3, #3
 8003b48:	9303      	str	r3, [sp, #12]
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	2302      	movs	r3, #2
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	232b      	movs	r3, #43	@ 0x2b
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fba6 	bl	80042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8003b60:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b64:	2100      	movs	r1, #0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fc6b 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 8003b72:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d12c      	bne.n	8003bd4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003b80:	3008      	adds	r0, #8
 8003b82:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8a:	8a9b      	ldrh	r3, [r3, #20]
 8003b8c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	230a      	movs	r3, #10
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	232c      	movs	r3, #44	@ 0x2c
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 8003b9e:	f001 fd21 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003ba2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	490c      	ldr	r1, [pc, #48]	@ (8003be8 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fd ff1f 	bl	80019fc <_ZSt6strstrPcPKc>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 8003bd4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	37a8      	adds	r7, #168	@ 0xa8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	080142b4 	.word	0x080142b4
 8003be4:	080142cc 	.word	0x080142cc
 8003be8:	080142b0 	.word	0x080142b0

08003bec <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b0af      	sub	sp, #188	@ 0xbc
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	2292      	movs	r2, #146	@ 0x92
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f00d ff5a 	bl	8011ace <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 8003c1a:	7afc      	ldrb	r4, [r7, #11]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fc fb27 	bl	8000270 <strlen>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f107 0010 	add.w	r0, r7, #16
 8003c28:	4622      	mov	r2, r4
 8003c2a:	494b      	ldr	r1, [pc, #300]	@ (8003d58 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 8003c2c:	f00d feec 	bl	8011a08 <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8003c30:	f107 0310 	add.w	r3, r7, #16
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fb1b 	bl	8000270 <strlen>
 8003c3a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	f107 0110 	add.w	r1, r7, #16
 8003c42:	2302      	movs	r3, #2
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	233e      	movs	r3, #62	@ 0x3e
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 faca 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8003c54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c58:	2100      	movs	r1, #0
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fbf1 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 8003c66:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d16e      	bne.n	8003d4c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003c74:	3008      	adds	r0, #8
 8003c76:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c7e:	8a9b      	ldrh	r3, [r3, #20]
 8003c80:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003c82:	2300      	movs	r3, #0
 8003c84:	9302      	str	r3, [sp, #8]
 8003c86:	230a      	movs	r3, #10
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	232c      	movs	r3, #44	@ 0x2c
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 8003c90:	f001 fca8 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003c94:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d053      	beq.n	8003d4c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fc fae3 	bl	8000270 <strlen>
 8003caa:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	2303      	movs	r3, #3
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	9302      	str	r3, [sp, #8]
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	232b      	movs	r3, #43	@ 0x2b
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 faf1 	bl	80042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 8003cca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cce:	2100      	movs	r1, #0
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fbb6 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003cdc:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d111      	bne.n	8003d08 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003cea:	3308      	adds	r3, #8
 8003cec:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cf4:	8a92      	ldrh	r2, [r2, #20]
 8003cf6:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fc4d 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 8003d08:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01e      	beq.n	8003d4c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003d14:	3008      	adds	r0, #8
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003d1c:	9302      	str	r3, [sp, #8]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	230d      	movs	r3, #13
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	230a      	movs	r3, #10
 8003d28:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 8003d2a:	f001 fd23 	bl	8005774 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 8003d3e:	2305      	movs	r3, #5
 8003d40:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003d44:	e002      	b.n	8003d4c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 8003d4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	37ac      	adds	r7, #172	@ 0xac
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd90      	pop	{r4, r7, pc}
 8003d58:	080142d8 	.word	0x080142d8
 8003d5c:	080142f0 	.word	0x080142f0
 8003d60:	080142f4 	.word	0x080142f4

08003d64 <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b0b1      	sub	sp, #196	@ 0xc4
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	2292      	movs	r2, #146	@ 0x92
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f00d fe9f 	bl	8011ace <memset>
	char recv_buf[5] = { 0 };
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	2300      	movs	r3, #0
 8003d96:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 8003d98:	7afc      	ldrb	r4, [r7, #11]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fc fa68 	bl	8000270 <strlen>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f107 0018 	add.w	r0, r7, #24
 8003da6:	4622      	mov	r2, r4
 8003da8:	4947      	ldr	r1, [pc, #284]	@ (8003ec8 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 8003daa:	f00d fe2d 	bl	8011a08 <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8003dae:	f107 0318 	add.w	r3, r7, #24
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fa5c 	bl	8000270 <strlen>
 8003db8:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	f107 0118 	add.w	r1, r7, #24
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	233e      	movs	r3, #62	@ 0x3e
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fa0b 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8003dd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fb32 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 8003de4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d167      	bne.n	8003ebc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003df2:	3008      	adds	r0, #8
 8003df4:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfc:	8a9b      	ldrh	r3, [r3, #20]
 8003dfe:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003e00:	2300      	movs	r3, #0
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	230a      	movs	r3, #10
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	232c      	movs	r3, #44	@ 0x2c
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 8003e0e:	f001 fbe9 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003e12:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d04c      	beq.n	8003ebc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fc fa24 	bl	8000270 <strlen>
 8003e28:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	9303      	str	r3, [sp, #12]
 8003e30:	230a      	movs	r3, #10
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	2301      	movs	r3, #1
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	232b      	movs	r3, #43	@ 0x2b
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fa32 	bl	80042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 8003e48:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 faf7 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 8003e5a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d12c      	bne.n	8003ebc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003e68:	3008      	adds	r0, #8
 8003e6a:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e72:	8a9b      	ldrh	r3, [r3, #20]
 8003e74:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003e76:	f107 0310 	add.w	r3, r7, #16
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	230a      	movs	r3, #10
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	232c      	movs	r3, #44	@ 0x2c
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 8003e86:	f001 fbad 	bl	80055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003e8a:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d010      	beq.n	8003ebc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 8003e9a:	f107 0310 	add.w	r3, r7, #16
 8003e9e:	490d      	ldr	r1, [pc, #52]	@ (8003ed4 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fd fdab 	bl	80019fc <_ZSt6strstrPcPKc>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 8003ebc:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	37b4      	adds	r7, #180	@ 0xb4
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd90      	pop	{r4, r7, pc}
 8003ec8:	08014308 	.word	0x08014308
 8003ecc:	080142f0 	.word	0x080142f0
 8003ed0:	08014320 	.word	0x08014320
 8003ed4:	080142b0 	.word	0x080142b0

08003ed8 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b09a      	sub	sp, #104	@ 0x68
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	224c      	movs	r2, #76	@ 0x4c
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f00d fde6 	bl	8011ace <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	4920      	ldr	r1, [pc, #128]	@ (8003f8c <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f00d fd7c 	bl	8011a08 <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003f10:	f107 030c 	add.w	r3, r7, #12
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc f9ab 	bl	8000270 <strlen>
 8003f1a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	f107 010c 	add.w	r1, r7, #12
 8003f22:	2301      	movs	r3, #1
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	230a      	movs	r3, #10
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f95a 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003f34:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa81 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003f46:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d111      	bne.n	8003f72 <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003f54:	3308      	adds	r3, #8
 8003f56:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f5e:	8a92      	ldrh	r2, [r2, #20]
 8003f60:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fb18 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 8003f72:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 8003f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3760      	adds	r7, #96	@ 0x60
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	08014330 	.word	0x08014330

08003f90 <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	230a      	movs	r3, #10
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fac:	221d      	movs	r2, #29
 8003fae:	4915      	ldr	r1, [pc, #84]	@ (8004004 <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f919 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003fb6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003fba:	2100      	movs	r1, #0
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa40 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003fc6:	7bbb      	ldrb	r3, [r7, #14]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d111      	bne.n	8003ff0 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fdc:	8a92      	ldrh	r2, [r2, #20]
 8003fde:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fad9 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <_ZN5Modem8simA767213sslversionsetEv+0x62>
 8003ff0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	080145c0 	.word	0x080145c0

08004008 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004010:	2301      	movs	r3, #1
 8004012:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8004018:	2301      	movs	r3, #1
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	230a      	movs	r3, #10
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004024:	221b      	movs	r2, #27
 8004026:	4915      	ldr	r1, [pc, #84]	@ (800407c <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f8dd 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800402e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004032:	2100      	movs	r1, #0
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa04 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800403a:	4603      	mov	r3, r0
 800403c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800403e:	7bbb      	ldrb	r3, [r7, #14]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d111      	bne.n	8004068 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800404a:	3308      	adds	r3, #8
 800404c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004054:	8a92      	ldrh	r2, [r2, #20]
 8004056:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004058:	4618      	mov	r0, r3
 800405a:	f001 fa9d 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <_ZN5Modem8simA767210sslauthsetEv+0x62>
 8004068:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	080145e0 	.word	0x080145e0

08004080 <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004088:	2301      	movs	r3, #1
 800408a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 8004090:	2301      	movs	r3, #1
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	230a      	movs	r3, #10
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800409c:	2220      	movs	r2, #32
 800409e:	4915      	ldr	r1, [pc, #84]	@ (80040f4 <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8a1 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80040a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80040aa:	2100      	movs	r1, #0
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f9c8 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80040b6:	7bbb      	ldrb	r3, [r7, #14]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80040c2:	3308      	adds	r3, #8
 80040c4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040cc:	8a92      	ldrh	r2, [r2, #20]
 80040ce:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 fa61 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 80040e0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	080145fc 	.word	0x080145fc

080040f8 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004100:	2301      	movs	r3, #1
 8004102:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 8004108:	2301      	movs	r3, #1
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	230a      	movs	r3, #10
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004114:	222c      	movs	r2, #44	@ 0x2c
 8004116:	4915      	ldr	r1, [pc, #84]	@ (800416c <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f865 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800411e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004122:	2100      	movs	r1, #0
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f98c 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800412a:	4603      	mov	r3, r0
 800412c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800412e:	7bbb      	ldrb	r3, [r7, #14]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d111      	bne.n	8004158 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800413a:	3308      	adds	r3, #8
 800413c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004144:	8a92      	ldrh	r2, [r2, #20]
 8004146:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fa25 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 8004158:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	08014620 	.word	0x08014620

08004170 <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8004178:	2301      	movs	r3, #1
 800417a:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 8004180:	2301      	movs	r3, #1
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	230a      	movs	r3, #10
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800418c:	222a      	movs	r2, #42	@ 0x2a
 800418e:	4915      	ldr	r1, [pc, #84]	@ (80041e4 <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f829 	bl	80041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8004196:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f950 	bl	8004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d111      	bne.n	80041d0 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80041b2:	3308      	adds	r3, #8
 80041b4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041bc:	8a92      	ldrh	r2, [r2, #20]
 80041be:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 f9e9 	bl	8005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 80041d0:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80041da:	7bfb      	ldrb	r3, [r7, #15]

}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	08014650 	.word	0x08014650

080041e8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	460b      	mov	r3, r1
 80041f8:	80fb      	strh	r3, [r7, #6]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f00d fc61 	bl	8011ace <memset>
	memset(Txbuffer, 0, BufferLen);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f00d fc58 	bl	8011ace <memset>
	rst_event(rx_evt);
 800421e:	2100      	movs	r1, #0
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f8c8 	bl	80043b6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8004226:	2101      	movs	r1, #1
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8c4 	bl	80043b6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004234:	461a      	mov	r2, r3
 8004236:	7e3b      	ldrb	r3, [r7, #24]
 8004238:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004240:	461a      	mov	r2, r3
 8004242:	7f3b      	ldrb	r3, [r7, #28]
 8004244:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800424c:	2200      	movs	r2, #0
 800424e:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004256:	2200      	movs	r2, #0
 8004258:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004260:	22ff      	movs	r2, #255	@ 0xff
 8004262:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800426c:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004274:	2200      	movs	r2, #0
 8004276:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800427e:	3304      	adds	r3, #4
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004286:	6911      	ldr	r1, [r2, #16]
 8004288:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f94b 	bl	8005528 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004298:	3004      	adds	r0, #4
 800429a:	88bb      	ldrh	r3, [r7, #4]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	f001 f92f 	bl	8005502 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	460b      	mov	r3, r1
 80042bc:	80fb      	strh	r3, [r7, #6]
 80042be:	4613      	mov	r3, r2
 80042c0:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f00d fbff 	bl	8011ace <memset>
	memset(Txbuffer, 0, BufferLen);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f00d fbf6 	bl	8011ace <memset>
	rst_event(rx_evt);
 80042e2:	2100      	movs	r1, #0
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f866 	bl	80043b6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 80042ea:	2101      	movs	r1, #1
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f862 	bl	80043b6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f8:	461a      	mov	r2, r3
 80042fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042fe:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	461a      	mov	r2, r3
 8004308:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800430c:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004314:	2200      	movs	r2, #0
 8004316:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431e:	2200      	movs	r2, #0
 8004320:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004328:	22ff      	movs	r2, #255	@ 0xff
 800432a:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004334:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433c:	2200      	movs	r2, #0
 800433e:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004346:	461a      	mov	r2, r3
 8004348:	7e3b      	ldrb	r3, [r7, #24]
 800434a:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 800434c:	7f3b      	ldrb	r3, [r7, #28]
 800434e:	3b01      	subs	r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004358:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004360:	3304      	adds	r3, #4
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004368:	6911      	ldr	r1, [r2, #16]
 800436a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800436e:	4618      	mov	r0, r3
 8004370:	f001 f8da 	bl	8005528 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800437a:	3004      	adds	r0, #4
 800437c:	88bb      	ldrh	r3, [r7, #4]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	f001 f8be 	bl	8005502 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80043a4:	3309      	adds	r3, #9
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80043cc:	3309      	adds	r3, #9
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80043f8:	3309      	adds	r3, #9
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e010      	b.n	8004434 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800441c:	3309      	adds	r3, #9
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8004434:	7bfb      	ldrb	r3, [r7, #15]

}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
 800444e:	4613      	mov	r3, r2
 8004450:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 8004462:	f004 f9cf 	bl	8008804 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 8004470:	e002      	b.n	8004478 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 8004472:	200a      	movs	r0, #10
 8004474:	f000 fd14 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ffae 	bl	80043de <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8004482:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00c      	beq.n	80044a2 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 8004488:	f004 f9bc 	bl	8008804 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	1ad2      	subs	r2, r2, r3
 8004498:	883b      	ldrh	r3, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d201      	bcs.n	80044a2 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e4      	bne.n	8004472 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff96 	bl	80043de <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e2:	7adb      	ldrb	r3, [r3, #11]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 808a 	beq.w	800460a <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 80044f6:	78f8      	ldrb	r0, [r7, #3]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004508:	610a      	str	r2, [r1, #16]
 800450a:	4602      	mov	r2, r0
 800450c:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004514:	8a9b      	ldrh	r3, [r3, #20]
 8004516:	b29b      	uxth	r3, r3
 8004518:	3301      	adds	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004522:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452a:	7b1b      	ldrb	r3, [r3, #12]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00c      	beq.n	8004556 <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004542:	7b9b      	ldrb	r3, [r3, #14]
 8004544:	b25b      	sxtb	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3301      	adds	r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	b25a      	sxtb	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004554:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455c:	7a9b      	ldrb	r3, [r3, #10]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	2b4f      	cmp	r3, #79	@ 0x4f
 8004568:	d002      	beq.n	8004570 <_ZN5Modem8simA76724RxCBEh+0xa0>
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	2b45      	cmp	r3, #69	@ 0x45
 800456e:	d101      	bne.n	8004574 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <_ZN5Modem8simA76724RxCBEh+0xa6>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004580:	2200      	movs	r2, #0
 8004582:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458a:	2201      	movs	r2, #1
 800458c:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	2b4f      	cmp	r3, #79	@ 0x4f
 8004592:	d105      	bne.n	80045a0 <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459a:	2202      	movs	r2, #2
 800459c:	735a      	strb	r2, [r3, #13]
 800459e:	e00d      	b.n	80045bc <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b45      	cmp	r3, #69	@ 0x45
 80045a4:	d10a      	bne.n	80045bc <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ac:	2205      	movs	r2, #5
 80045ae:	735a      	strb	r2, [r3, #13]
 80045b0:	e004      	b.n	80045bc <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b8:	2200      	movs	r2, #0
 80045ba:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	2b0a      	cmp	r3, #10
 80045c0:	d104      	bne.n	80045cc <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c8:	2201      	movs	r2, #1
 80045ca:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d2:	7b9b      	ldrb	r3, [r3, #14]
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045de:	7b5b      	ldrb	r3, [r3, #13]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bfac      	ite	ge
 80045e6:	2301      	movge	r3, #1
 80045e8:	2300      	movlt	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80ed 	beq.w	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 80045f2:	2100      	movs	r1, #0
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff feca 	bl	800438e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004600:	3304      	adds	r3, #4
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ffa2 	bl	800554c <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8004608:	e0e0      	b.n	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004610:	7adb      	ldrb	r3, [r3, #11]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d072      	beq.n	8004708 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 8004622:	78f8      	ldrb	r0, [r7, #3]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004634:	610a      	str	r2, [r1, #16]
 8004636:	4602      	mov	r2, r0
 8004638:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004640:	8a9b      	ldrh	r3, [r3, #20]
 8004642:	b29b      	uxth	r3, r3
 8004644:	3301      	adds	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800464e:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004656:	7a1b      	ldrb	r3, [r3, #8]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b0a      	cmp	r3, #10
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	2b3e      	cmp	r3, #62	@ 0x3e
 800466c:	f040 80ae 	bne.w	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fe8b 	bl	800438e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f000 ff63 	bl	800554c <_ZN13System_serial6serial8RxintDisEv>
}
 8004686:	e0a1      	b.n	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468e:	7b1b      	ldrb	r3, [r3, #12]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d104      	bne.n	80046a0 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	2b45      	cmp	r3, #69	@ 0x45
 800469a:	d101      	bne.n	80046a0 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <_ZN5Modem8simA76724RxCBEh+0x1d2>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ac:	2202      	movs	r2, #2
 80046ae:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b0a      	cmp	r3, #10
 80046b4:	d10a      	bne.n	80046cc <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046bc:	7b1b      	ldrb	r3, [r3, #12]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ca:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d2:	7b1b      	ldrb	r3, [r3, #12]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046de:	7b9b      	ldrb	r3, [r3, #14]
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	429a      	cmp	r2, r3
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d06d      	beq.n	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 80046f0:	2100      	movs	r1, #0
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fe4b 	bl	800438e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ff23 	bl	800554c <_ZN13System_serial6serial8RxintDisEv>
}
 8004706:	e061      	b.n	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470e:	7adb      	ldrb	r3, [r3, #11]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b03      	cmp	r3, #3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d055      	beq.n	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 8004720:	78f8      	ldrb	r0, [r7, #3]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004732:	610a      	str	r2, [r1, #16]
 8004734:	4602      	mov	r2, r0
 8004736:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473e:	8a9b      	ldrh	r3, [r3, #20]
 8004740:	b29b      	uxth	r3, r3
 8004742:	3301      	adds	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474c:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004754:	7f9b      	ldrb	r3, [r3, #30]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	429a      	cmp	r2, r3
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00c      	beq.n	8004782 <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800476e:	7b9b      	ldrb	r3, [r3, #14]
 8004770:	b25b      	sxtb	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3301      	adds	r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	b25a      	sxtb	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004780:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004788:	7a1b      	ldrb	r3, [r3, #8]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	429a      	cmp	r2, r3
 8004790:	d10e      	bne.n	80047b0 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004798:	7b9b      	ldrb	r3, [r3, #14]
 800479a:	b25b      	sxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a4:	7fdb      	ldrb	r3, [r3, #31]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	429a      	cmp	r2, r3
 80047aa:	db01      	blt.n	80047b0 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <_ZN5Modem8simA76724RxCBEh+0x2e2>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 80047b6:	2100      	movs	r1, #0
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fde8 	bl	800438e <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80047c4:	3304      	adds	r3, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fec0 	bl	800554c <_ZN13System_serial6serial8RxintDisEv>
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e009      	b.n	80047fe <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 80047ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d006      	beq.n	8004806 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	3301      	adds	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d9f2      	bls.n	80047ea <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8004804:	e000      	b.n	8004808 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8004806:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	4a06      	ldr	r2, [pc, #24]	@ (8004834 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4413      	add	r3, r2
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fe53 	bl	80044d0 <_ZN5Modem8simA76724RxCBEh>
	}

}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200034d4 	.word	0x200034d4

08004838 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout)
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
{
	_aht20_ui2c=ui2c;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	79fa      	ldrb	r2, [r7, #7]
 8004866:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	uint8_t cmd = AHT20_SOFT_RESET;
		HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_ << 1, &cmd, 1, timeout_);
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	@ 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
	uint16_t counter = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 800488c:	2032      	movs	r0, #50	@ 0x32
 800488e:	f000 fb07 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8004892:	23ac      	movs	r3, #172	@ 0xac
 8004894:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 8004896:	2333      	movs	r3, #51	@ 0x33
 8004898:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 800489a:	2300      	movs	r3, #0
 800489c:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f875 	bl	800498e <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d068      	beq.n	8004986 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6858      	ldr	r0, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	7a1b      	ldrb	r3, [r3, #8]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	b299      	uxth	r1, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f107 0218 	add.w	r2, r7, #24
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2303      	movs	r3, #3
 80048cc:	f005 fe12 	bl	800a4f4 <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 80048d0:	2064      	movs	r0, #100	@ 0x64
 80048d2:	f000 fae5 	bl	8004ea0 <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6858      	ldr	r0, [r3, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	7a1b      	ldrb	r3, [r3, #8]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	b299      	uxth	r1, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f107 0210 	add.w	r2, r7, #16
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2307      	movs	r3, #7
 80048ee:	f005 feff 	bl	800a6f0 <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 80048f2:	7c3a      	ldrb	r2, [r7, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	7a5b      	ldrb	r3, [r3, #9]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	db36      	blt.n	8004970 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0xf4>
    		{
    	    DATA_Humi=ahtRData[1];
 8004902:	7c7b      	ldrb	r3, [r7, #17]
 8004904:	461a      	mov	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	7cba      	ldrb	r2, [r7, #18]
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	7cfa      	ldrb	r2, [r7, #19]
 8004920:	0912      	lsrs	r2, r2, #4
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	7d3a      	ldrb	r2, [r7, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	7d7a      	ldrb	r2, [r7, #21]
 800494a:	431a      	orrs	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 8004950:	7dba      	ldrb	r2, [r7, #22]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f83a 	bl	80049d0 <_ZN15sensor_TempHumd5AHT204tempEv>
 800495c:	4602      	mov	r2, r0
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f870 	bl	8004a48 <_ZN15sensor_TempHumd5AHT205humidEv>
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
    		break;
 800496e:	e00a      	b.n	8004986 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
    		}
    	else {
    		counter++;
 8004970:	8bfb      	ldrh	r3, [r7, #30]
 8004972:	3301      	adds	r3, #1
 8004974:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 8004976:	200a      	movs	r0, #10
 8004978:	f000 fa92 	bl	8004ea0 <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	2b32      	cmp	r3, #50	@ 0x32
 8004980:	d800      	bhi.n	8004984 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x108>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004982:	e7a8      	b.n	80048d6 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x5a>
    		{
    			break;
 8004984:	bf00      	nop
    		}
    	}
    }
	}
}
 8004986:	bf00      	nop
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6858      	ldr	r0, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	7a1b      	ldrb	r3, [r3, #8]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	b299      	uxth	r1, r3
 80049a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049aa:	2203      	movs	r2, #3
 80049ac:	f006 f8d2 	bl	800ab54 <HAL_I2C_IsDeviceReady>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]

}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fd91 	bl	8000504 <__aeabi_ui2d>
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 80049e8:	f7fb ff30 	bl	800084c <__aeabi_ddiv>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 80049fa:	f7fb ff27 	bl	800084c <__aeabi_ddiv>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 8004a0c:	f7fb fdf4 	bl	80005f8 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	4b09      	ldr	r3, [pc, #36]	@ (8004a44 <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 8004a1e:	f7fb fc33 	bl	8000288 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f7fc f8bd 	bl	8000ba8 <__aeabi_d2uiz>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 8004a32:	68fb      	ldr	r3, [r7, #12]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40900000 	.word	0x40900000
 8004a40:	40690000 	.word	0x40690000
 8004a44:	40490000 	.word	0x40490000

08004a48 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fd55 	bl	8000504 <__aeabi_ui2d>
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8004a60:	f7fb fef4 	bl	800084c <__aeabi_ddiv>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8004a72:	f7fb feeb 	bl	800084c <__aeabi_ddiv>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f7fc f88a 	bl	8000ba8 <__aeabi_d2uiz>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8004a98:	68fb      	ldr	r3, [r7, #12]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40900000 	.word	0x40900000
 8004aa8:	40590000 	.word	0x40590000

08004aac <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc)
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a10      	ldr	r2, [pc, #64]	@ (8004afc <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a0b      	ldr	r2, [pc, #44]	@ (8004afc <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8004ace:	615a      	str	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	761a      	strb	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	61da      	str	r2, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24
{
	hadc_sensor = hadc;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	bf800000 	.word	0xbf800000

08004b00 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>:

void liquidSensor::Measurement_loop(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	61f8      	str	r0, [r7, #28]
 8004b08:	ed87 0a05 	vstr	s0, [r7, #20]
 8004b0c:	edc7 0a04 	vstr	s1, [r7, #16]
 8004b10:	ed87 1a03 	vstr	s2, [r7, #12]
 8004b14:	60ba      	str	r2, [r7, #8]
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	76fb      	strb	r3, [r7, #27]
	getLevel(unit_,LowSpan,fullSpan,VoltOut,getlevel);
 8004b1c:	7efb      	ldrb	r3, [r7, #27]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	ed97 1a03 	vldr	s2, [r7, #12]
 8004b24:	edd7 0a04 	vldr	s1, [r7, #16]
 8004b28:	ed97 0a05 	vldr	s0, [r7, #20]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	69f8      	ldr	r0, [r7, #28]
 8004b30:	f000 f80e 	bl	8004b50 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>
	consumptionliters(consumption);
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	69f8      	ldr	r0, [r7, #28]
 8004b38:	f000 f8e8 	bl	8004d0c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b42:	69f8      	ldr	r0, [r7, #28]
 8004b44:	f000 f91c 	bl	8004d80 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>:

liquidSensor::status liquidSensor::getLevel(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b09a      	sub	sp, #104	@ 0x68
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	61f8      	str	r0, [r7, #28]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	ed87 0a05 	vstr	s0, [r7, #20]
 8004b5e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004b62:	ed87 1a03 	vstr	s2, [r7, #12]
 8004b66:	60ba      	str	r2, [r7, #8]
 8004b68:	76fb      	strb	r3, [r7, #27]


	enum status stat = liquidSensor_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	float totalSpan = fullSpan - LowSpan;
 8004b70:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b7c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 8004b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b84:	2228      	movs	r2, #40	@ 0x28
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f00c ffa0 	bl	8011ace <memset>
	  uint32_t adcValue = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	667b      	str	r3, [r7, #100]	@ 0x64




	if(hadc_sensor == NULL)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x4e>
	{
		return liquidSensor_ERR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0a8      	b.n	8004cf0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
	}
    for(int i = 0; i< 10; i++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ba2:	e030      	b.n	8004c06 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xb6>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f003 fe9f 	bl	80088ec <HAL_ADC_Start>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x72>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e096      	b.n	8004cf0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 ff93 	bl	8008af6 <HAL_ADC_PollForConversion>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x94>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e085      	b.n	8004cf0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	4618      	mov	r0, r3
 8004bea:	f004 fa2f 	bl	800904c <HAL_ADC_GetValue>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	3360      	adds	r3, #96	@ 0x60
 8004bf6:	f107 0108 	add.w	r1, r7, #8
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 8004c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c02:	3301      	adds	r3, #1
 8004c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	ddcb      	ble.n	8004ba4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x54>
    }
    HAL_ADC_Stop(hadc_sensor);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 ff3d 	bl	8008a90 <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c1a:	e00d      	b.n	8004c38 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xe8>
    {
    	adcValue = adcValue +  adcaverage[i];
 8004c1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	3360      	adds	r3, #96	@ 0x60
 8004c22:	f107 0208 	add.w	r2, r7, #8
 8004c26:	4413      	add	r3, r2
 8004c28:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004c2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c2e:	4413      	add	r3, r2
 8004c30:	667b      	str	r3, [r7, #100]	@ 0x64
    for(int i = 0; i< 10; i++)
 8004c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c34:	3301      	adds	r3, #1
 8004c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c3a:	2b09      	cmp	r3, #9
 8004c3c:	ddee      	ble.n	8004c1c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xcc>
    }
    adcValue = adcValue/10;
 8004c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c40:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a8>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	08db      	lsrs	r3, r3, #3
 8004c48:	667b      	str	r3, [r7, #100]	@ 0x64
    float voltage = (adcValue / Resolution) * Vref;
 8004c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c54:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8004cfc <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1ac>
 8004c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c5c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004d00 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b0>
 8004c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c64:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    current_mA = ((voltage/VoltOut) *  (max_cur - min_cur)) + min_cur;
 8004c68:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8004c6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c74:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8004c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c7c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c84:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 8004c88:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004c8c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004c90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c94:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004c98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c9c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cb0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004d04 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 8004cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	ed93 7a00 	vldr	s14, [r3]
 8004ccc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8004d04 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 8004cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004d08 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b8>
 8004cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce0:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ce4:	793b      	ldrb	r3, [r7, #4]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	701a      	strb	r2, [r3, #0]

	  return stat;
 8004cec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3768      	adds	r7, #104	@ 0x68
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	cccccccd 	.word	0xcccccccd
 8004cfc:	45800000 	.word	0x45800000
 8004d00:	40533333 	.word	0x40533333
 8004d04:	43fa0000 	.word	0x43fa0000
 8004d08:	42c80000 	.word	0x42c80000

08004d0c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]

    uint32_t current_time = HAL_GetTick();
 8004d16:	f003 fd75 	bl	8008804 <HAL_GetTick>
 8004d1a:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d30:	d507      	bpl.n	8004d42 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x36>
    {
        prev_volumeLiters = tank_volumeLiters;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	61da      	str	r2, [r3, #28]

        return;
 8004d40:	e018      	b.n	8004d74 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x70>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d311      	bcc.n	8004d74 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	edd3 7a00 	vldr	s15, [r3]
 8004d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	61da      	str	r2, [r3, #28]
    }

}
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	0036ee80 	.word	0x0036ee80

08004d80 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
	current_volume_change = tank_volumeLiters;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da4:	d504      	bpl.n	8004db0 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x30>
    {
    	prev_volume_change = current_volume_change;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	615a      	str	r2, [r3, #20]

        return;
 8004dae:	e044      	b.n	8004e3a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xba>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	ed93 7a04 	vldr	s14, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc4:	ee17 2a90 	vmov	r2, s15
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 8004dcc:	f003 fd1a 	bl	8008804 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	7e1b      	ldrb	r3, [r3, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d111      	bne.n	8004e02 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x82>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	dd25      	ble.n	8004e32 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>
    	  refueling_active = 1;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	601a      	str	r2, [r3, #0]
    	  *endEpochtime = 0; //make it zero so we know we are refueling now to erase previous end time so user dont get confused
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e017      	b.n	8004e32 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dc0f      	bgt.n	8004e2a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d90a      	bls.n	8004e32 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>

			  refueling_active = 0;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e003      	b.n	8004e32 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>

		  }
	  }
	  else
	  {
    	  refueling_prev_time = refueling_start_time;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1a      	ldr	r2, [r3, #32]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	615a      	str	r2, [r3, #20]

}
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>:
#include "System_Rtos.hpp"
#include "sensor_pzem.hpp"

namespace sensor_pzem {

PZEM_004T::PZEM_004T(UART_HandleTypeDef *huart) :
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
		serial_(huart) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fb34 	bl	80054be <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
	huart_ = huart;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	601a      	str	r2, [r3, #0]
}
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <_ZN11sensor_pzem9PZEM_004T4initEv>:

void PZEM_004T::init() {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	serial_.TransmitData(rst_buf, 4, 1000);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1d18      	adds	r0, r3, #4
 8004e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e78:	2204      	movs	r2, #4
 8004e7a:	4908      	ldr	r1, [pc, #32]	@ (8004e9c <_ZN11sensor_pzem9PZEM_004T4initEv+0x34>)
 8004e7c:	f000 fb41 	bl	8005502 <_ZN13System_serial6serial12TransmitDataEPKhtm>
	serial_.ReceiveData(res_buf, 25, 500);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1d18      	adds	r0, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f103 0108 	add.w	r1, r3, #8
 8004e8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004e8e:	2219      	movs	r2, #25
 8004e90:	f000 fb24 	bl	80054dc <_ZN13System_serial6serial11ReceiveDataEPhtm>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	0801467c 	.word	0x0801467c

08004ea0 <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <_ZN11System_Rtos5delayEm+0x28>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f00a f8e8 	bl	800f090 <vTaskDelay>
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	10624dd3 	.word	0x10624dd3

08004ecc <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f00c fefa 	bl	8011ce6 <strcpy>
	usStackDepth = usStackDepth_;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	887a      	ldrh	r2, [r7, #2]
 8004ef6:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	61da      	str	r2, [r3, #28]


}
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 8004f0e:	b5b0      	push	{r4, r5, r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af02      	add	r7, sp, #8
 8004f14:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8a9c      	ldrh	r4, [r3, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699d      	ldr	r5, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	3220      	adds	r2, #32
 8004f2e:	9201      	str	r2, [sp, #4]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	462b      	mov	r3, r5
 8004f34:	4622      	mov	r2, r4
 8004f36:	f009 ff4d 	bl	800edd4 <xTaskCreate>
			&taskHandle);
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bdb0      	pop	{r4, r5, r7, pc}

08004f42 <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	607b      	str	r3, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	817b      	strh	r3, [r7, #10]
 8004f50:	4613      	mov	r3, r2
 8004f52:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	897a      	ldrh	r2, [r7, #10]
 8004f58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	893a      	ldrh	r2, [r7, #8]
 8004f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	659a      	str	r2, [r3, #88]	@ 0x58

}
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f86:	4618      	mov	r0, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f8e:	461c      	mov	r4, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2100      	movs	r1, #0
 8004f9a:	9100      	str	r1, [sp, #0]
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	f009 f893 	bl	800e0c8 <xQueueGenericCreateStatic>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}

08004fb0 <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	22c8      	movs	r2, #200	@ 0xc8
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	f009 f98c 	bl	800e2e4 <xQueueGenericSend>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e000      	b.n	8004fe2 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]

}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2232      	movs	r2, #50	@ 0x32
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f009 fb0f 	bl	800e624 <xQueueReceive>
 8005006:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <_ZN11System_Rtos18freertos_semaphoreC1Ev>:


freertos_semaphore::freertos_semaphore()
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
{

}
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>:

void freertos_semaphore::semaphoreCreate()
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
	xSemaphor = xSemaphoreCreateMutex();
 8005042:	2001      	movs	r0, #1
 8005044:	f009 f935 	bl	800e2b2 <xQueueCreateMutex>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv>:


enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreTake()
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]

    if( xSemaphoreTake(xSemaphor,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800506a:	4618      	mov	r0, r3
 800506c:	f009 fbbc 	bl	800e7e8 <xQueueSemaphoreTake>
 8005070:	4603      	mov	r3, r0
					   pdMS_TO_TICKS(1000)) == pdPASS )
 8005072:	2b01      	cmp	r3, #1
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
    if( xSemaphoreTake(xSemaphor,
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv+0x2e>
      {
    	 return semaphore_recived;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv+0x30>
      }


	return stat;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>:


enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreGive()
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(xSemaphor);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2200      	movs	r2, #0
 80050a2:	2100      	movs	r1, #0
 80050a4:	f009 f91e 	bl	800e2e4 <xQueueGenericSend>

	return stat;
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>:
#include "cstring"
#include "cstdlib"

namespace System_rtc {

stmRTC::stmRTC(RTC_HandleTypeDef *hrtc, int8_t timezone) :
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
		checking(), rtcSemaphore() {
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3308      	adds	r3, #8
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fa5c 	bl	8005582 <_ZN10System_sys16Parsing_CheckingC1Ev>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	330c      	adds	r3, #12
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ffa8 	bl	8005024 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	Internal_handler = hrtc;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	605a      	str	r2, [r3, #4]
	zone = timezone;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	79fa      	ldrb	r2, [r7, #7]
 80050de:	701a      	strb	r2, [r3, #0]
	rtcSemaphore.semaphoreCreate();
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	330c      	adds	r3, #12
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ffa8 	bl	800503a <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>:
void stmRTC::init(){
	rtcSemaphore.semaphoreCreate();
}

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp) {
 80050f4:	b5b0      	push	{r4, r5, r7, lr}
 80050f6:	b090      	sub	sp, #64	@ 0x40
 80050f8:	af04      	add	r7, sp, #16
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	int err = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake()
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	330c      	adds	r3, #12
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffa3 	bl	8005056 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv>
 8005110:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake()
 800511c:	2b00      	cmp	r3, #0
 800511e:	d043      	beq.n	80051a8 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xb4>
		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f107 0114 	add.w	r1, r7, #20
 8005128:	2200      	movs	r2, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f006 ffb5 	bl	800c09a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005138:	2200      	movs	r2, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f007 f80b 	bl	800c156 <HAL_RTC_GetDate>

		if (timestamp != nullptr) {
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x84>
		*timestamp = checking.convertToEpoch(Date, Time, zone);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f103 0508 	add.w	r5, r3, #8
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f993 3000 	ldrsb.w	r3, [r3]
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	466c      	mov	r4, sp
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800515e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005162:	f107 0314 	add.w	r3, r7, #20
 8005166:	cb0c      	ldmia	r3, {r2, r3}
 8005168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fbee 	bl	800594c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x90>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 800517e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xa4>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 800518a:	f107 0314 	add.w	r3, r7, #20
 800518e:	2214      	movs	r2, #20
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f00c fdaf 	bl	8011cf6 <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	330c      	adds	r3, #12
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ff76 	bl	800508e <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a6:	e014      	b.n	80051d2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xde>
	}
	else
	{
		if (timestamp != nullptr) {
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xc0>
		*timestamp = 0;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xce>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 80051ba:	2300      	movs	r3, #0
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xde>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 80051c8:	2214      	movs	r2, #20
 80051ca:	2100      	movs	r1, #0
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f00c fd92 	bl	8011cf6 <memcpy>
		}

	}


	return err;
 80051d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d4:	b2db      	uxtb	r3, r3


}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3730      	adds	r7, #48	@ 0x30
 80051da:	46bd      	mov	sp, r7
 80051dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080051e0 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

 ModemTxCB LocalModemTxCB = nullptr ;
 InverterTxCB LocalInverterTxCB = nullptr ;


void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 80051ea:	4a06      	ldr	r2, [pc, #24]	@ (8005204 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 80051f0:	4a05      	ldr	r2, [pc, #20]	@ (8005208 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6013      	str	r3, [r2, #0]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	200034f0 	.word	0x200034f0
 8005208:	200034f8 	.word	0x200034f8

0800520c <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	LocalInverterRxCB = Rxcb;
 8005216:	4a06      	ldr	r2, [pc, #24]	@ (8005230 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6013      	str	r3, [r2, #0]
	LocalInverterTxCB = TxCB;
 800521c:	4a05      	ldr	r2, [pc, #20]	@ (8005234 <_Z19setInverterCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6013      	str	r3, [r2, #0]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	200034f4 	.word	0x200034f4
 8005234:	200034fc 	.word	0x200034fc

08005238 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005244:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b22      	cmp	r3, #34	@ 0x22
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d030      	beq.n	80052be <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x86>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b29b      	uxth	r3, r3
 8005264:	b2db      	uxtb	r3, r3
 8005266:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 8005268:	89bb      	ldrh	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 800526e:	89bb      	ldrh	r3, [r7, #12]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	b21a      	sxth	r2, r3
 8005274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005278:	4313      	orrs	r3, r2
 800527a:	b21b      	sxth	r3, r3
 800527c:	81fb      	strh	r3, [r7, #14]




		if (huart == &GSM_U) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a13      	ldr	r2, [pc, #76]	@ (80052d0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x98>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d10a      	bne.n	800529c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			if(LocalModemRxCB)
 8005286:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x9c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 800528e:	4b11      	ldr	r3, [pc, #68]	@ (80052d4 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x9c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	89fa      	ldrh	r2, [r7, #14]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	4611      	mov	r1, r2
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
			}

		}

		if (huart == &INVERTER_U) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0e      	ldr	r2, [pc, #56]	@ (80052d8 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10a      	bne.n	80052ba <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>

			if(LocalInverterRxCB)
 80052a4:	4b0d      	ldr	r3, [pc, #52]	@ (80052dc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d006      	beq.n	80052ba <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			{
				LocalInverterRxCB(huart,(uint8_t)uhData);
 80052ac:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	89fa      	ldrh	r2, [r7, #14]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	4611      	mov	r1, r2
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
			}

		}

		return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e003      	b.n	80052c6 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x8e>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
	}
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20003ce0 	.word	0x20003ce0
 80052d4:	200034f0 	.word	0x200034f0
 80052d8:	20003d28 	.word	0x20003d28
 80052dc:	200034f4 	.word	0x200034f4

080052e0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10d      	bne.n	800532e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ff86 	bl	8005238 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 800532c:	e0b0      	b.n	8005490 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1b0>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8083 	beq.w	8005444 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800534e:	2b00      	cmp	r3, #0
 8005350:	d078      	beq.n	8005444 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00f      	beq.n	800537c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0201 	mvn.w	r2, #1
 800536e:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00f      	beq.n	80053a6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0202 	mvn.w	r2, #2
 8005398:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00f      	beq.n	80053d0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0204 	mvn.w	r2, #4
 80053c2:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c8:	f043 0202 	orr.w	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0208 	mvn.w	r2, #8
 80053f6:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fc:	f043 0208 	orr.w	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d039      	beq.n	800548a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1aa>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f008 f94e 	bl	800d6d8 <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 8005442:	e022      	b.n	800548a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1aa>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1b0>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1b0>
	  {


			if (huart == &GSM_U) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a0f      	ldr	r2, [pc, #60]	@ (8005498 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1b8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d107      	bne.n	8005470 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>
				if(LocalModemTxCB)
 8005460:	4b0e      	ldr	r3, [pc, #56]	@ (800549c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1bc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>
				{
					LocalModemTxCB(huart);
 8005468:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1bc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
				}

			}

			if (huart == &INVERTER_U) {
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a0b      	ldr	r2, [pc, #44]	@ (80054a0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10a      	bne.n	800548e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1ae>

				if(LocalInverterTxCB)
 8005478:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d006      	beq.n	800548e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1ae>
				{
					LocalInverterTxCB(huart);
 8005480:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
				}

			}
	    return;
 8005488:	e001      	b.n	800548e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1ae>
	    return;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1b0>
	    return;
 800548e:	bf00      	nop
	  }



}
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20003ce0 	.word	0x20003ce0
 800549c:	200034f8 	.word	0x200034f8
 80054a0:	20003d28 	.word	0x20003d28
 80054a4:	200034fc 	.word	0x200034fc

080054a8 <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff15 	bl	80052e0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <_ZN13System_serial6serial11ReceiveDataEPhtm>:

void serial::ReceiveData(uint8_t *data,uint16_t size,uint32_t timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive(Internal_UartHandler, data, size, timeout);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	f007 ff80 	bl	800d3fa <HAL_UART_Receive>

}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZN13System_serial6serial12TransmitDataEPKhtm>:

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	f007 fee2 	bl	800d2e4 <HAL_UART_Transmit>


}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f007 fff2 	bl	800d528 <HAL_UART_Receive_IT>
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f008 f80b 	bl	800d574 <HAL_UART_AbortReceive_IT>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f00c fab3 	bl	8011ade <strchr>
 8005578:	4603      	mov	r3, r0
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
{

}
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 80055a6:	2302      	movs	r3, #2
 80055a8:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 80055aa:	490c      	ldr	r1, [pc, #48]	@ (80055dc <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f00c fab6 	bl	8011b1e <strstr>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 80055b8:	2300      	movs	r3, #0
 80055ba:	75fb      	strb	r3, [r7, #23]
 80055bc:	e008      	b.n	80055d0 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 80055be:	4908      	ldr	r1, [pc, #32]	@ (80055e0 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 80055c0:	68b8      	ldr	r0, [r7, #8]
 80055c2:	f00c faac 	bl	8011b1e <strstr>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]


}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	0801439c 	.word	0x0801439c
 80055e0:	080143a0 	.word	0x080143a0

080055e4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 80055f0:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 80055f4:	6020      	str	r0, [r4, #0]
 80055f6:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 80055fa:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 80055fe:	6001      	str	r1, [r0, #0]
 8005600:	4611      	mov	r1, r2
 8005602:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005606:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005610:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005614:	460a      	mov	r2, r1
 8005616:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 8005618:	2302      	movs	r3, #2
 800561a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 8005624:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005628:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005632:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8005636:	f107 0014 	add.w	r0, r7, #20
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	f00c fa5c 	bl	8011af8 <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 8005640:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005644:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005648:	f107 0214 	add.w	r2, r7, #20
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	4610      	mov	r0, r2
 8005650:	f00c fa65 	bl	8011b1e <strstr>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 800565a:	2302      	movs	r3, #2
 800565c:	e085      	b.n	800576a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 800565e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 8005666:	2300      	movs	r3, #0
 8005668:	e07f      	b.n	800576a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 800566a:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	4611      	mov	r1, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff76 	bl	8005566 <_ZSt6strchrPci>
 800567a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 800567e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 8005694:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8005698:	2b3a      	cmp	r3, #58	@ 0x3a
 800569a:	d105      	bne.n	80056a8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 800569c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80056a0:	3302      	adds	r3, #2
 80056a2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80056a6:	e007      	b.n	80056b8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 80056a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80056ac:	3301      	adds	r3, #1
 80056ae:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80056b2:	e001      	b.n	80056b8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 80056b4:	2302      	movs	r3, #2
 80056b6:	e058      	b.n	800576a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 80056b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80056bc:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 80056c0:	e03c      	b.n	800573c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 80056c2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80056c6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80056ca:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 80056d8:	429a      	cmp	r2, r3
 80056da:	d00f      	beq.n	80056fc <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 80056dc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80056e0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80056e4:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	441a      	add	r2, r3
 80056ec:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80056f0:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 80056f4:	440b      	add	r3, r1
 80056f6:	7812      	ldrb	r2, [r2, #0]
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e015      	b.n	8005728 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 80056fc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005700:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005704:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	4413      	add	r3, r2
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005712:	429a      	cmp	r2, r3
 8005714:	d108      	bne.n	8005728 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8005716:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800571a:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 800571e:	4413      	add	r3, r2
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8005724:	2300      	movs	r3, #0
 8005726:	e020      	b.n	800576a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8005728:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800572c:	3301      	adds	r3, #1
 800572e:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 8005732:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005736:	3301      	adds	r3, #1
 8005738:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 800573c:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 8005740:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005744:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005748:	8819      	ldrh	r1, [r3, #0]
 800574a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800574e:	1acb      	subs	r3, r1, r3
 8005750:	429a      	cmp	r2, r3
 8005752:	da08      	bge.n	8005766 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 8005754:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005758:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800575c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d3ad      	bcc.n	80056c2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 8005766:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 800576a:	4618      	mov	r0, r3
 800576c:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 8005782:	2300      	movs	r3, #0
 8005784:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 800578c:	2301      	movs	r3, #1
 800578e:	e040      	b.n	8005812 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	f00c f9c3 	bl	8011b1e <strstr>
 8005798:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 80057a0:	2302      	movs	r3, #2
 80057a2:	e036      	b.n	8005812 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fa fd63 	bl	8000270 <strlen>
 80057aa:	4602      	mov	r2, r0
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	4619      	mov	r1, r3
 80057bc:	69f8      	ldr	r0, [r7, #28]
 80057be:	f7ff fed2 	bl	8005566 <_ZSt6strchrPci>
 80057c2:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 80057ca:	2302      	movs	r3, #2
 80057cc:	e021      	b.n	8005812 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3301      	adds	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 80057d8:	e00a      	b.n	80057f0 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	61fa      	str	r2, [r7, #28]
 80057e0:	7819      	ldrb	r1, [r3, #0]
 80057e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e4:	8b7b      	ldrh	r3, [r7, #26]
 80057e6:	1c58      	adds	r0, r3, #1
 80057e8:	8378      	strh	r0, [r7, #26]
 80057ea:	4413      	add	r3, r2
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d004      	beq.n	8005806 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 80057fc:	8b7a      	ldrh	r2, [r7, #26]
 80057fe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005800:	3b01      	subs	r3, #1
 8005802:	429a      	cmp	r2, r3
 8005804:	dbe9      	blt.n	80057da <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8005806:	8b7b      	ldrh	r3, [r7, #26]
 8005808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800580a:	4413      	add	r3, r2
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]


    return stat;
 8005810:	7e7b      	ldrb	r3, [r7, #25]

}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth>:

enum Parsing_Checking::status Parsing_Checking::extractdatainsegments(char *input,char *output,uint16_t output_len,uint16_t *get_len,uint8_t skip_char)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	807b      	strh	r3, [r7, #2]

	enum status stat = sys_ok;
 8005828:	2300      	movs	r3, #0
 800582a:	757b      	strb	r3, [r7, #21]


	   if (!input || !output || output_len == 0 || !get_len) {
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2a>
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x2e>
	        return sys_err; // Invalid parameters
 8005844:	2301      	movs	r3, #1
 8005846:	e03a      	b.n	80058be <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0xa4>
	    }


	   uint16_t len = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	82fb      	strh	r3, [r7, #22]


	   // Skip leading spaces (if any)
	    while (*input == skip_char || *input == '(') {
 800584c:	e002      	b.n	8005854 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x3a>
	        input++;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3301      	adds	r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
	    while (*input == skip_char || *input == '(') {
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800585c:	429a      	cmp	r2, r3
 800585e:	d0f6      	beq.n	800584e <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x34>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b28      	cmp	r3, #40	@ 0x28
 8005866:	d0f2      	beq.n	800584e <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x34>
	    }

	    // Extract characters until space or end of string
	      while (*input != '\0' && *input != skip_char && len < output_len - 1) {
 8005868:	e00a      	b.n	8005880 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x66>
	          output[len++] = *input++;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	60ba      	str	r2, [r7, #8]
 8005870:	7819      	ldrb	r1, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	8afb      	ldrh	r3, [r7, #22]
 8005876:	1c58      	adds	r0, r3, #1
 8005878:	82f8      	strh	r0, [r7, #22]
 800587a:	4413      	add	r3, r2
 800587c:	460a      	mov	r2, r1
 800587e:	701a      	strb	r2, [r3, #0]
	      while (*input != '\0' && *input != skip_char && len < output_len - 1) {
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x84>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005890:	429a      	cmp	r2, r3
 8005892:	d004      	beq.n	800589e <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x84>
 8005894:	8afa      	ldrh	r2, [r7, #22]
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	3b01      	subs	r3, #1
 800589a:	429a      	cmp	r2, r3
 800589c:	dbe5      	blt.n	800586a <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x50>
	      }

	    // Null-terminate the output
	     output[len] = '\0';
 800589e:	8afb      	ldrh	r3, [r7, #22]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]

	     // If no data was extracted, return false
	        if (len == 0) {
 80058a8:	8afb      	ldrh	r3, [r7, #22]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0x98>
	            return sys_err;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e005      	b.n	80058be <_ZN10System_sys16Parsing_Checking21extractdatainsegmentsEPcS1_tPth+0xa4>
	        }

	        // Store the extracted length
	         *get_len = len+1;
 80058b2:	8afb      	ldrh	r3, [r7, #22]
 80058b4:	3301      	adds	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	801a      	strh	r2, [r3, #0]

    return stat;
 80058bc:	7d7b      	ldrb	r3, [r7, #21]

}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh>:

enum Parsing_Checking::status Parsing_Checking::binarystringToUint8(char *binaryString,uint8_t *result)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
	enum status stat = sys_ok;
 80058d6:	2300      	movs	r3, #0
 80058d8:	76fb      	strb	r3, [r7, #27]


	  // Check if the input string is valid
	    size_t length = std::strlen(binaryString);
 80058da:	68b8      	ldr	r0, [r7, #8]
 80058dc:	f7fa fcc8 	bl	8000270 <strlen>
 80058e0:	6178      	str	r0, [r7, #20]

	    if (length == 0 || length > 8) {
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x24>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d901      	bls.n	80058f2 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x28>
	        return sys_err;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e027      	b.n	8005942 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x78>
	    }

		*result = 0;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
	    // Iterate through each character in the string
	    for (size_t i = 0; i < length; ++i) {
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	e01c      	b.n	8005938 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x6e>
	        char c = binaryString[i];
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	74fb      	strb	r3, [r7, #19]
	        if (c != '0' && c != '1') {
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	2b30      	cmp	r3, #48	@ 0x30
 800590c:	d004      	beq.n	8005918 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x4e>
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	2b31      	cmp	r3, #49	@ 0x31
 8005912:	d001      	beq.n	8005918 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x4e>
	        	   return sys_err;
 8005914:	2301      	movs	r3, #1
 8005916:	e014      	b.n	8005942 <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x78>
	        }

	        // Shift result left by 1 bit and add the current bit
	        *result = (*result << 1) | (c - '0');
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	b25a      	sxtb	r2, r3
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	3b30      	subs	r3, #48	@ 0x30
 8005924:	b2db      	uxtb	r3, r3
 8005926:	b25b      	sxtb	r3, r3
 8005928:	4313      	orrs	r3, r2
 800592a:	b25b      	sxtb	r3, r3
 800592c:	b2da      	uxtb	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	701a      	strb	r2, [r3, #0]
	    for (size_t i = 0; i < length; ++i) {
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3301      	adds	r3, #1
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	429a      	cmp	r2, r3
 800593e:	d3de      	bcc.n	80058fe <_ZN10System_sys16Parsing_Checking19binarystringToUint8EPcPh+0x34>
	    }



    return stat;
 8005940:	7efb      	ldrb	r3, [r7, #27]

}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

int32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 800594c:	b082      	sub	sp, #8
 800594e:	b580      	push	{r7, lr}
 8005950:	b08c      	sub	sp, #48	@ 0x30
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
 8005958:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800595c:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 8005960:	78bb      	ldrb	r3, [r7, #2]
 8005962:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 8005964:	787b      	ldrb	r3, [r7, #1]
 8005966:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b45      	cmp	r3, #69	@ 0x45
 8005970:	dc02      	bgt.n	8005978 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 8005972:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005976:	e001      	b.n	800597c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 8005978:	f240 736c 	movw	r3, #1900	@ 0x76c
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4413      	add	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 8005982:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005986:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 8005988:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800598c:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 800598e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005992:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 8005994:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 8005998:	4613      	mov	r3, r2
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    int32_t epoch = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 80059a6:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 80059aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ac:	e011      	b.n	80059d2 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x86>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 80059ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f85d 	bl	8005a70 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 80059bc:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80059c0:	e001      	b.n	80059c6 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 80059c2:	f240 136d 	movw	r3, #365	@ 0x16d
 80059c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c8:	4413      	add	r3, r2
 80059ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	3301      	adds	r3, #1
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	dbe9      	blt.n	80059ae <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 80059da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059dc:	4a23      	ldr	r2, [pc, #140]	@ (8005a6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 80059e4:	2301      	movs	r3, #1
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e8:	e00e      	b.n	8005a08 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xbc>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 80059ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ec:	69b9      	ldr	r1, [r7, #24]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f86e 	bl	8005ad0 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 80059f8:	fb02 f303 	mul.w	r3, r2, r3
 80059fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059fe:	4413      	add	r3, r2
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	3301      	adds	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	dbec      	blt.n	80059ea <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x9e>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	4a15      	ldr	r2, [pc, #84]	@ (8005a6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x120>)
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a1c:	4413      	add	r3, r2
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	4413      	add	r3, r2
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 8005a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	0112      	lsls	r2, r2, #4
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	461a      	mov	r2, r3
 8005a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a58:	4413      	add	r3, r2
 8005a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 8005a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3730      	adds	r7, #48	@ 0x30
 8005a62:	46bd      	mov	sp, r7
 8005a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a68:	b002      	add	sp, #8
 8005a6a:	4770      	bx	lr
 8005a6c:	00015180 	.word	0x00015180

08005a70 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:
	    HAL_RTC_SetDate(hrtc, &gDate, RTC_FORMAT_BIN);

}

bool Parsing_Checking::isLeapYear(int year)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	4b11      	ldr	r3, [pc, #68]	@ (8005acc <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8005a88:	fb83 1302 	smull	r1, r3, r3, r2
 8005a8c:	1159      	asrs	r1, r3, #5
 8005a8e:	17d3      	asrs	r3, r2, #31
 8005a90:	1acb      	subs	r3, r1, r3
 8005a92:	2164      	movs	r1, #100	@ 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10d      	bne.n	8005aba <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8005aa2:	fb83 1302 	smull	r1, r3, r3, r2
 8005aa6:	11d9      	asrs	r1, r3, #7
 8005aa8:	17d3      	asrs	r3, r2, #31
 8005aaa:	1acb      	subs	r3, r1, r3
 8005aac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	51eb851f 	.word	0x51eb851f

08005ad0 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d108      	bne.n	8005af4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff ffc3 	bl	8005a70 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 8005afa:	231d      	movs	r3, #29
 8005afc:	e004      	b.n	8005b08 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4a03      	ldr	r2, [pc, #12]	@ (8005b10 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8005b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08014680 	.word	0x08014680

08005b14 <_ZN2UI4mainEP11u8g2_struct>:
};

UIStruct MenuArray[] = { { MenuNo::Main, UI::main, { MenuNo::Main },
		MenuNo::Main, MenuNo::Main, MenuNo::Main, MenuNo::Main, MenuNo::Main } };

void main(u8g2_t *u8g2) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b098      	sub	sp, #96	@ 0x60
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]


					  char time[50];
					 RTC_DateTypeDef DDate;
					 RTC_TimeTypeDef DTime;
					 stmRTC.getTime(&DDate,&DTime, nullptr);
 8005b1c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005b20:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8005b24:	2300      	movs	r3, #0
 8005b26:	4812      	ldr	r0, [pc, #72]	@ (8005b70 <_ZN2UI4mainEP11u8g2_struct+0x5c>)
 8005b28:	f7ff fae4 	bl	80050f4 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
				     std::sprintf(time, "%02d:%02d:%02d", DTime.Hours, DTime.Minutes,DTime.Seconds);
 8005b2c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005b30:	461a      	mov	r2, r3
 8005b32:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8005b36:	4619      	mov	r1, r3
 8005b38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8005b3c:	f107 000c 	add.w	r0, r7, #12
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	460b      	mov	r3, r1
 8005b44:	490b      	ldr	r1, [pc, #44]	@ (8005b74 <_ZN2UI4mainEP11u8g2_struct+0x60>)
 8005b46:	f00b ff5f 	bl	8011a08 <siprintf>

				     u8g2_ClearBuffer(u8g2);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f90b 	bl	8005d66 <u8g2_ClearBuffer>

		             u8g2_SetFont(u8g2,u8g2_font_6x10_mf );
 8005b50:	4909      	ldr	r1, [pc, #36]	@ (8005b78 <_ZN2UI4mainEP11u8g2_struct+0x64>)
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 ff18 	bl	8006988 <u8g2_SetFont>
		             u8g2_DrawStr(u8g2,0,10,time);
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	220a      	movs	r2, #10
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fe6f 	bl	8006844 <u8g2_DrawStr>
		             u8g2_SendBuffer(u8g2);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f970 	bl	8005e4c <u8g2_SendBuffer>





			}while(1);
 8005b6c:	bf00      	nop
 8005b6e:	e7d5      	b.n	8005b1c <_ZN2UI4mainEP11u8g2_struct+0x8>
 8005b70:	20003498 	.word	0x20003498
 8005b74:	08014460 	.word	0x08014460
 8005b78:	08014cac 	.word	0x08014cac

08005b7c <_ZN2UI4loopEP11u8g2_struct>:
		}while(1);


}

void loop(u8g2_t *u8g2) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	uint16_t index;
	if (CurrMenu == MenuNo::None) {
 8005b84:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <_ZN2UI4loopEP11u8g2_struct+0x7c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d102      	bne.n	8005b92 <_ZN2UI4loopEP11u8g2_struct+0x16>
		CurrMenu = MenuNo::Main;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <_ZN2UI4loopEP11u8g2_struct+0x7c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
	}

	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 8005b92:	2300      	movs	r3, #0
 8005b94:	81fb      	strh	r3, [r7, #14]
 8005b96:	e00e      	b.n	8005bb6 <_ZN2UI4loopEP11u8g2_struct+0x3a>
			index++) {
		if (CurrMenu == MenuArray[index].MenuNo) // check if this menu is found ?
 8005b98:	89fa      	ldrh	r2, [r7, #14]
 8005b9a:	4918      	ldr	r1, [pc, #96]	@ (8005bfc <_ZN2UI4loopEP11u8g2_struct+0x80>)
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <_ZN2UI4loopEP11u8g2_struct+0x7c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d006      	beq.n	8005bbe <_ZN2UI4loopEP11u8g2_struct+0x42>
	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	81fb      	strh	r3, [r7, #14]
 8005bb6:	89fb      	ldrh	r3, [r7, #14]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ed      	beq.n	8005b98 <_ZN2UI4loopEP11u8g2_struct+0x1c>
 8005bbc:	e000      	b.n	8005bc0 <_ZN2UI4loopEP11u8g2_struct+0x44>
				{
			break;
 8005bbe:	bf00      	nop
		}
	}

	if (index < (sizeof(MenuArray) / sizeof(MenuArray[0]))) {
 8005bc0:	89fb      	ldrh	r3, [r7, #14]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d110      	bne.n	8005be8 <_ZN2UI4loopEP11u8g2_struct+0x6c>
		std::memset(UI::display_buffer, 0, sizeof(UI::display_buffer));
 8005bc6:	22ff      	movs	r2, #255	@ 0xff
 8005bc8:	2100      	movs	r1, #0
 8005bca:	480d      	ldr	r0, [pc, #52]	@ (8005c00 <_ZN2UI4loopEP11u8g2_struct+0x84>)
 8005bcc:	f00b ff7f 	bl	8011ace <memset>
		MenuArray[index].function(u8g2);
 8005bd0:	89fa      	ldrh	r2, [r7, #14]
 8005bd2:	490a      	ldr	r1, [pc, #40]	@ (8005bfc <_ZN2UI4loopEP11u8g2_struct+0x80>)
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	3304      	adds	r3, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
	else
	{
		CurrMenu = MenuNo::None;
	}

}
 8005be6:	e002      	b.n	8005bee <_ZN2UI4loopEP11u8g2_struct+0x72>
		CurrMenu = MenuNo::None;
 8005be8:	4b03      	ldr	r3, [pc, #12]	@ (8005bf8 <_ZN2UI4loopEP11u8g2_struct+0x7c>)
 8005bea:	2202      	movs	r2, #2
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	20000004 	.word	0x20000004
 8005c00:	20003500 	.word	0x20003500

08005c04 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	70fb      	strb	r3, [r7, #3]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70bb      	strb	r3, [r7, #2]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005c24:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8005c34:	78fa      	ldrb	r2, [r7, #3]
 8005c36:	787b      	ldrb	r3, [r7, #1]
 8005c38:	4413      	add	r3, r2
 8005c3a:	b2d8      	uxtb	r0, r3
 8005c3c:	78bb      	ldrb	r3, [r7, #2]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	78ba      	ldrb	r2, [r7, #2]
 8005c44:	78f9      	ldrb	r1, [r7, #3]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	4603      	mov	r3, r0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fffc 	bl	8006c48 <u8g2_IsIntersection>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d040      	beq.n	8005cd8 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8005c5a:	e035      	b.n	8005cc8 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	4013      	ands	r3, r2
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00c      	beq.n	8005c84 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7bba      	ldrb	r2, [r7, #14]
 8005c6e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005c72:	78ba      	ldrb	r2, [r7, #2]
 8005c74:	78f9      	ldrb	r1, [r7, #3]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ff91 	bl	8006ba4 <u8g2_DrawHVLine>
 8005c82:	e010      	b.n	8005ca6 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7b7a      	ldrb	r2, [r7, #13]
 8005c92:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005c96:	78ba      	ldrb	r2, [r7, #2]
 8005c98:	78f9      	ldrb	r1, [r7, #3]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 ff7f 	bl	8006ba4 <u8g2_DrawHVLine>
    }
    x++;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      b++;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8005cc2:	787b      	ldrb	r3, [r7, #1]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8005cc8:	787b      	ldrb	r3, [r7, #1]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1c6      	bne.n	8005c5c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7bba      	ldrb	r2, [r7, #14]
 8005cd2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8005cd6:	e000      	b.n	8005cda <u8g2_DrawHXBM+0xd6>
    return;
 8005cd8:	bf00      	nop
}
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	4608      	mov	r0, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	461a      	mov	r2, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	70fb      	strb	r3, [r7, #3]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70bb      	strb	r3, [r7, #2]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8005cfa:	787b      	ldrb	r3, [r7, #1]
 8005cfc:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	3307      	adds	r3, #7
 8005d02:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	787b      	ldrb	r3, [r7, #1]
 8005d0e:	4413      	add	r3, r2
 8005d10:	b2d8      	uxtb	r0, r3
 8005d12:	78ba      	ldrb	r2, [r7, #2]
 8005d14:	7e3b      	ldrb	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	78ba      	ldrb	r2, [r7, #2]
 8005d1c:	78f9      	ldrb	r1, [r7, #3]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4603      	mov	r3, r0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 ff90 	bl	8006c48 <u8g2_IsIntersection>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8005d2e:	e012      	b.n	8005d56 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8005d30:	7878      	ldrb	r0, [r7, #1]
 8005d32:	78ba      	ldrb	r2, [r7, #2]
 8005d34:	78f9      	ldrb	r1, [r7, #3]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff61 	bl	8005c04 <u8g2_DrawHXBM>
    bitmap += blen;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	61fb      	str	r3, [r7, #28]
    y++;
 8005d4a:	78bb      	ldrb	r3, [r7, #2]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	70bb      	strb	r3, [r7, #2]
    h--;
 8005d50:	7e3b      	ldrb	r3, [r7, #24]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8005d56:	7e3b      	ldrb	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e9      	bne.n	8005d30 <u8g2_DrawXBM+0x50>
 8005d5c:	e000      	b.n	8005d60 <u8g2_DrawXBM+0x80>
    return;
 8005d5e:	bf00      	nop
  }
}
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	7c1b      	ldrb	r3, [r3, #16]
 8005d74:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f00b fe9a 	bl	8011ace <memset>
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af02      	add	r7, sp, #8
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
 8005dae:	4613      	mov	r3, r2
 8005db0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	7c1b      	ldrb	r3, [r3, #16]
 8005db8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	89ba      	ldrh	r2, [r7, #12]
 8005dca:	fb12 f303 	smulbb	r3, r2, r3
 8005dce:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8005dd0:	89bb      	ldrh	r3, [r7, #12]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8005dd6:	89bb      	ldrh	r3, [r7, #12]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	4413      	add	r3, r2
 8005ddc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005dde:	7bf9      	ldrb	r1, [r7, #15]
 8005de0:	78ba      	ldrb	r2, [r7, #2]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	460b      	mov	r3, r1
 8005de8:	2100      	movs	r1, #0
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 fb4a 	bl	8007484 <u8x8_DrawTile>
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e0a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005e12:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	7c5b      	ldrb	r3, [r3, #17]
 8005e1a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8005e1c:	7bba      	ldrb	r2, [r7, #14]
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff ffbd 	bl	8005da2 <u8g2_send_tile_row>
    src_row++;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	3301      	adds	r3, #1
 8005e32:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	7b7b      	ldrb	r3, [r7, #13]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d203      	bcs.n	8005e44 <u8g2_send_buffer+0x4c>
 8005e3c:	7bba      	ldrb	r2, [r7, #14]
 8005e3e:	7b3b      	ldrb	r3, [r7, #12]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d3eb      	bcc.n	8005e1c <u8g2_send_buffer+0x24>
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ffcf 	bl	8005df8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 fb63 	bl	8007526 <u8x8_RefreshDisplay>
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2208      	movs	r2, #8
 8005e74:	701a      	strb	r2, [r3, #0]
  return buf;
 8005e76:	4b03      	ldr	r3, [pc, #12]	@ (8005e84 <u8g2_m_16_8_f+0x1c>)
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20003600 	.word	0x20003600

08005e88 <u8g2_Setup_ssd1309_128x64_noname0_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8005ecc <u8g2_Setup_ssd1309_128x64_noname0_f+0x44>)
 8005e9e:	490c      	ldr	r1, [pc, #48]	@ (8005ed0 <u8g2_Setup_ssd1309_128x64_noname0_f+0x48>)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f001 fba1 	bl	80075e8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8005ea6:	f107 0313 	add.w	r3, r7, #19
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ffdc 	bl	8005e68 <u8g2_m_16_8_f>
 8005eb0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8005eb2:	7cfa      	ldrb	r2, [r7, #19]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <u8g2_Setup_ssd1309_128x64_noname0_f+0x4c>)
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 ff8f 	bl	8006de0 <u8g2_SetupBuffer>
}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	080071c1 	.word	0x080071c1
 8005ed0:	08007341 	.word	0x08007341
 8005ed4:	08006c9f 	.word	0x08006c9f

08005ed8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4413      	add	r3, r2
 8005eea:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	781b      	ldrb	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	81fb      	strh	r3, [r7, #14]
    font++;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8005f1c:	89fb      	ldrh	r3, [r7, #14]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	81fb      	strh	r3, [r7, #14]
    return pos;
 8005f2e:	89fb      	ldrh	r3, [r7, #14]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8005f46:	2100      	movs	r1, #0
 8005f48:	6838      	ldr	r0, [r7, #0]
 8005f4a:	f7ff ffc5 	bl	8005ed8 <u8g2_font_get_byte>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8005f56:	2101      	movs	r1, #1
 8005f58:	6838      	ldr	r0, [r7, #0]
 8005f5a:	f7ff ffbd 	bl	8005ed8 <u8g2_font_get_byte>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8005f66:	2102      	movs	r1, #2
 8005f68:	6838      	ldr	r0, [r7, #0]
 8005f6a:	f7ff ffb5 	bl	8005ed8 <u8g2_font_get_byte>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8005f76:	2103      	movs	r1, #3
 8005f78:	6838      	ldr	r0, [r7, #0]
 8005f7a:	f7ff ffad 	bl	8005ed8 <u8g2_font_get_byte>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8005f86:	2104      	movs	r1, #4
 8005f88:	6838      	ldr	r0, [r7, #0]
 8005f8a:	f7ff ffa5 	bl	8005ed8 <u8g2_font_get_byte>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	461a      	mov	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8005f96:	2105      	movs	r1, #5
 8005f98:	6838      	ldr	r0, [r7, #0]
 8005f9a:	f7ff ff9d 	bl	8005ed8 <u8g2_font_get_byte>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8005fa6:	2106      	movs	r1, #6
 8005fa8:	6838      	ldr	r0, [r7, #0]
 8005faa:	f7ff ff95 	bl	8005ed8 <u8g2_font_get_byte>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8005fb6:	2107      	movs	r1, #7
 8005fb8:	6838      	ldr	r0, [r7, #0]
 8005fba:	f7ff ff8d 	bl	8005ed8 <u8g2_font_get_byte>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8005fc6:	2108      	movs	r1, #8
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f7ff ff85 	bl	8005ed8 <u8g2_font_get_byte>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8005fd6:	2109      	movs	r1, #9
 8005fd8:	6838      	ldr	r0, [r7, #0]
 8005fda:	f7ff ff7d 	bl	8005ed8 <u8g2_font_get_byte>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	b25a      	sxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8005fe6:	210a      	movs	r1, #10
 8005fe8:	6838      	ldr	r0, [r7, #0]
 8005fea:	f7ff ff75 	bl	8005ed8 <u8g2_font_get_byte>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	b25a      	sxtb	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8005ff6:	210b      	movs	r1, #11
 8005ff8:	6838      	ldr	r0, [r7, #0]
 8005ffa:	f7ff ff6d 	bl	8005ed8 <u8g2_font_get_byte>
 8005ffe:	4603      	mov	r3, r0
 8006000:	b25a      	sxtb	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8006006:	210c      	movs	r1, #12
 8006008:	6838      	ldr	r0, [r7, #0]
 800600a:	f7ff ff65 	bl	8005ed8 <u8g2_font_get_byte>
 800600e:	4603      	mov	r3, r0
 8006010:	b25a      	sxtb	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8006016:	210d      	movs	r1, #13
 8006018:	6838      	ldr	r0, [r7, #0]
 800601a:	f7ff ff5d 	bl	8005ed8 <u8g2_font_get_byte>
 800601e:	4603      	mov	r3, r0
 8006020:	b25a      	sxtb	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8006026:	210e      	movs	r1, #14
 8006028:	6838      	ldr	r0, [r7, #0]
 800602a:	f7ff ff55 	bl	8005ed8 <u8g2_font_get_byte>
 800602e:	4603      	mov	r3, r0
 8006030:	b25a      	sxtb	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8006036:	210f      	movs	r1, #15
 8006038:	6838      	ldr	r0, [r7, #0]
 800603a:	f7ff ff4d 	bl	8005ed8 <u8g2_font_get_byte>
 800603e:	4603      	mov	r3, r0
 8006040:	b25a      	sxtb	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8006046:	2110      	movs	r1, #16
 8006048:	6838      	ldr	r0, [r7, #0]
 800604a:	f7ff ff45 	bl	8005ed8 <u8g2_font_get_byte>
 800604e:	4603      	mov	r3, r0
 8006050:	b25a      	sxtb	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8006056:	2111      	movs	r1, #17
 8006058:	6838      	ldr	r0, [r7, #0]
 800605a:	f7ff ff4f 	bl	8005efc <u8g2_font_get_word>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8006066:	2113      	movs	r1, #19
 8006068:	6838      	ldr	r0, [r7, #0]
 800606a:	f7ff ff47 	bl	8005efc <u8g2_font_get_word>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8006076:	2115      	movs	r1, #21
 8006078:	6838      	ldr	r0, [r7, #0]
 800607a:	f7ff ff3f 	bl	8005efc <u8g2_font_get_word>
 800607e:	4603      	mov	r3, r0
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	82da      	strh	r2, [r3, #22]
#endif
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7a9b      	ldrb	r3, [r3, #10]
 800609e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80060a8:	7bfa      	ldrb	r2, [r7, #15]
 80060aa:	7b7b      	ldrb	r3, [r7, #13]
 80060ac:	fa42 f303 	asr.w	r3, r2, r3
 80060b0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80060b2:	7b7b      	ldrb	r3, [r7, #13]
 80060b4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80060b6:	7bba      	ldrb	r2, [r7, #14]
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	4413      	add	r3, r2
 80060bc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b07      	cmp	r3, #7
 80060c2:	d91a      	bls.n	80060fa <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80060c4:	2308      	movs	r3, #8
 80060c6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80060c8:	7b3a      	ldrb	r2, [r7, #12]
 80060ca:	7b7b      	ldrb	r3, [r7, #13]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	7b3b      	ldrb	r3, [r7, #12]
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	b25a      	sxtb	r2, r3
 80060ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80060f4:	7bbb      	ldrb	r3, [r7, #14]
 80060f6:	3b08      	subs	r3, #8
 80060f8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	b2db      	uxtb	r3, r3
 8006106:	43db      	mvns	r3, r3
 8006108:	b2da      	uxtb	r2, r3
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	4013      	ands	r3, r2
 800610e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7bba      	ldrb	r2, [r7, #14]
 8006114:	729a      	strb	r2, [r3, #10]
  return val;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ffaa 	bl	800608e <u8g2_font_decode_get_unsigned_bits>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	3b01      	subs	r3, #1
 8006146:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8006148:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	73fb      	strb	r3, [r7, #15]
  return v;
 800615e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800616a:	b490      	push	{r4, r7}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	4604      	mov	r4, r0
 8006172:	4608      	mov	r0, r1
 8006174:	4611      	mov	r1, r2
 8006176:	461a      	mov	r2, r3
 8006178:	4623      	mov	r3, r4
 800617a:	71fb      	strb	r3, [r7, #7]
 800617c:	4603      	mov	r3, r0
 800617e:	71bb      	strb	r3, [r7, #6]
 8006180:	460b      	mov	r3, r1
 8006182:	717b      	strb	r3, [r7, #5]
 8006184:	4613      	mov	r3, r2
 8006186:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8006188:	793b      	ldrb	r3, [r7, #4]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d010      	beq.n	80061b0 <u8g2_add_vector_y+0x46>
 800618e:	2b02      	cmp	r3, #2
 8006190:	dc13      	bgt.n	80061ba <u8g2_add_vector_y+0x50>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <u8g2_add_vector_y+0x32>
 8006196:	2b01      	cmp	r3, #1
 8006198:	d005      	beq.n	80061a6 <u8g2_add_vector_y+0x3c>
 800619a:	e00e      	b.n	80061ba <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 800619c:	797a      	ldrb	r2, [r7, #5]
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	4413      	add	r3, r2
 80061a2:	71fb      	strb	r3, [r7, #7]
      break;
 80061a4:	e00e      	b.n	80061c4 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80061a6:	79ba      	ldrb	r2, [r7, #6]
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	4413      	add	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
      break;
 80061ae:	e009      	b.n	80061c4 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80061b0:	797b      	ldrb	r3, [r7, #5]
 80061b2:	79fa      	ldrb	r2, [r7, #7]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	71fb      	strb	r3, [r7, #7]
      break;
 80061b8:	e004      	b.n	80061c4 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80061ba:	79bb      	ldrb	r3, [r7, #6]
 80061bc:	79fa      	ldrb	r2, [r7, #7]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	71fb      	strb	r3, [r7, #7]
      break;      
 80061c2:	bf00      	nop
  }
  return dy;
 80061c4:	79fb      	ldrb	r3, [r7, #7]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc90      	pop	{r4, r7}
 80061ce:	4770      	bx	lr

080061d0 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80061d0:	b490      	push	{r4, r7}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4623      	mov	r3, r4
 80061e0:	71fb      	strb	r3, [r7, #7]
 80061e2:	4603      	mov	r3, r0
 80061e4:	71bb      	strb	r3, [r7, #6]
 80061e6:	460b      	mov	r3, r1
 80061e8:	717b      	strb	r3, [r7, #5]
 80061ea:	4613      	mov	r3, r2
 80061ec:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80061ee:	793b      	ldrb	r3, [r7, #4]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d010      	beq.n	8006216 <u8g2_add_vector_x+0x46>
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	dc13      	bgt.n	8006220 <u8g2_add_vector_x+0x50>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <u8g2_add_vector_x+0x32>
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d005      	beq.n	800620c <u8g2_add_vector_x+0x3c>
 8006200:	e00e      	b.n	8006220 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8006202:	79ba      	ldrb	r2, [r7, #6]
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	4413      	add	r3, r2
 8006208:	71fb      	strb	r3, [r7, #7]
      break;
 800620a:	e00e      	b.n	800622a <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 800620c:	797b      	ldrb	r3, [r7, #5]
 800620e:	79fa      	ldrb	r2, [r7, #7]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	71fb      	strb	r3, [r7, #7]
      break;
 8006214:	e009      	b.n	800622a <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8006216:	79bb      	ldrb	r3, [r7, #6]
 8006218:	79fa      	ldrb	r2, [r7, #7]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	71fb      	strb	r3, [r7, #7]
      break;
 800621e:	e004      	b.n	800622a <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8006220:	797a      	ldrb	r2, [r7, #5]
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	4413      	add	r3, r2
 8006226:	71fb      	strb	r3, [r7, #7]
      break;      
 8006228:	bf00      	nop
  }
  return dx;
 800622a:	79fb      	ldrb	r3, [r7, #7]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bc90      	pop	{r4, r7}
 8006234:	4770      	bx	lr

08006236 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b088      	sub	sp, #32
 800623a:	af02      	add	r7, sp, #8
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
 8006242:	4613      	mov	r3, r2
 8006244:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3350      	adds	r3, #80	@ 0x50
 800624a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006256:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800625e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006266:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8006268:	7bfa      	ldrb	r2, [r7, #15]
 800626a:	7d7b      	ldrb	r3, [r7, #21]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8006274:	7dfa      	ldrb	r2, [r7, #23]
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	429a      	cmp	r2, r3
 800627a:	d201      	bcs.n	8006280 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	791b      	ldrb	r3, [r3, #4]
 8006284:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800628c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006290:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	7b9b      	ldrb	r3, [r3, #14]
 8006298:	7bb8      	ldrb	r0, [r7, #14]
 800629a:	f7ff ff99 	bl	80061d0 <u8g2_add_vector_x>
 800629e:	4603      	mov	r3, r0
 80062a0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80062a2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80062a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	7b9b      	ldrb	r3, [r3, #14]
 80062ae:	7b78      	ldrb	r0, [r7, #13]
 80062b0:	f7ff ff5b 	bl	800616a <u8g2_add_vector_y>
 80062b4:	4603      	mov	r3, r0
 80062b6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00f      	beq.n	80062de <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	7b1a      	ldrb	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	7b9b      	ldrb	r3, [r3, #14]
 80062cc:	7db8      	ldrb	r0, [r7, #22]
 80062ce:	7b7a      	ldrb	r2, [r7, #13]
 80062d0:	7bb9      	ldrb	r1, [r7, #14]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	4603      	mov	r3, r0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fc64 	bl	8006ba4 <u8g2_DrawHVLine>
 80062dc:	e012      	b.n	8006304 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	7adb      	ldrb	r3, [r3, #11]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10e      	bne.n	8006304 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	7b5a      	ldrb	r2, [r3, #13]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	7b9b      	ldrb	r3, [r3, #14]
 80062f4:	7db8      	ldrb	r0, [r7, #22]
 80062f6:	7b7a      	ldrb	r2, [r7, #13]
 80062f8:	7bb9      	ldrb	r1, [r7, #14]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4603      	mov	r3, r0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fc50 	bl	8006ba4 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8006304:	7dfa      	ldrb	r2, [r7, #23]
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	429a      	cmp	r2, r3
 800630a:	d309      	bcc.n	8006320 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800630c:	7dfa      	ldrb	r2, [r7, #23]
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	757b      	strb	r3, [r7, #21]
    ly++;
 8006318:	7d3b      	ldrb	r3, [r7, #20]
 800631a:	3301      	adds	r3, #1
 800631c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800631e:	e79f      	b.n	8006260 <u8g2_font_decode_len+0x2a>
      break;
 8006320:	bf00      	nop
  }
  lx += cnt;
 8006322:	7d7a      	ldrb	r2, [r7, #21]
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	4413      	add	r3, r2
 8006328:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800632a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8006332:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	71da      	strb	r2, [r3, #7]
  
}
 800633a:	bf00      	nop
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3350      	adds	r3, #80	@ 0x50
 8006350:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8006364:	4619      	mov	r1, r3
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fe91 	bl	800608e <u8g2_font_decode_get_unsigned_bits>
 800636c:	4603      	mov	r3, r0
 800636e:	b25a      	sxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 800637a:	4619      	mov	r1, r3
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fe86 	bl	800608e <u8g2_font_decode_get_unsigned_bits>
 8006382:	4603      	mov	r3, r0
 8006384:	b25a      	sxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	7b1b      	ldrb	r3, [r3, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	735a      	strb	r2, [r3, #13]
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3350      	adds	r3, #80	@ 0x50
 80063be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ffbd 	bl	8006342 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80063d6:	4619      	mov	r1, r3
 80063d8:	6938      	ldr	r0, [r7, #16]
 80063da:	f7ff fea3 	bl	8006124 <u8g2_font_decode_get_signed_bits>
 80063de:	4603      	mov	r3, r0
 80063e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 80063e8:	4619      	mov	r1, r3
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f7ff fe9a 	bl	8006124 <u8g2_font_decode_get_signed_bits>
 80063f0:	4603      	mov	r3, r0
 80063f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80063fa:	4619      	mov	r1, r3
 80063fc:	6938      	ldr	r0, [r7, #16]
 80063fe:	f7ff fe91 	bl	8006124 <u8g2_font_decode_get_signed_bits>
 8006402:	4603      	mov	r3, r0
 8006404:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f340 80cf 	ble.w	80065b0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	7918      	ldrb	r0, [r3, #4]
 8006416:	7bfa      	ldrb	r2, [r7, #15]
 8006418:	7b7b      	ldrb	r3, [r7, #13]
 800641a:	4413      	add	r3, r2
 800641c:	b2db      	uxtb	r3, r3
 800641e:	425b      	negs	r3, r3
 8006420:	b2db      	uxtb	r3, r3
 8006422:	b25a      	sxtb	r2, r3
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	7b9b      	ldrb	r3, [r3, #14]
 8006428:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800642c:	f7ff fed0 	bl	80061d0 <u8g2_add_vector_x>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	7958      	ldrb	r0, [r3, #5]
 800643c:	7bfa      	ldrb	r2, [r7, #15]
 800643e:	7b7b      	ldrb	r3, [r7, #13]
 8006440:	4413      	add	r3, r2
 8006442:	b2db      	uxtb	r3, r3
 8006444:	425b      	negs	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	b25a      	sxtb	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	7b9b      	ldrb	r3, [r3, #14]
 800644e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8006452:	f7ff fe8a 	bl	800616a <u8g2_add_vector_y>
 8006456:	4603      	mov	r3, r0
 8006458:	461a      	mov	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	791b      	ldrb	r3, [r3, #4]
 8006462:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	795b      	ldrb	r3, [r3, #5]
 8006468:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800646e:	7d7b      	ldrb	r3, [r7, #21]
 8006470:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	7b9b      	ldrb	r3, [r3, #14]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d852      	bhi.n	8006520 <u8g2_font_decode_glyph+0x170>
 800647a:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <u8g2_font_decode_glyph+0xd0>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006491 	.word	0x08006491
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064cd 	.word	0x080064cd
 800648c:	080064fd 	.word	0x080064fd
      {
	case 0:
	    x1 += decode->glyph_width;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	7dbb      	ldrb	r3, [r7, #22]
 800649a:	4413      	add	r3, r2
 800649c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 800649e:	7bfa      	ldrb	r2, [r7, #15]
 80064a0:	7d3b      	ldrb	r3, [r7, #20]
 80064a2:	4413      	add	r3, r2
 80064a4:	753b      	strb	r3, [r7, #20]
	    break;
 80064a6:	e03b      	b.n	8006520 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	7dfa      	ldrb	r2, [r7, #23]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	3301      	adds	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80064b6:	7dbb      	ldrb	r3, [r7, #22]
 80064b8:	3301      	adds	r3, #1
 80064ba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	7d3b      	ldrb	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	753b      	strb	r3, [r7, #20]
	    break;
 80064ca:	e029      	b.n	8006520 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	7dfa      	ldrb	r2, [r7, #23]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	3301      	adds	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80064e0:	7dbb      	ldrb	r3, [r7, #22]
 80064e2:	3301      	adds	r3, #1
 80064e4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	7d7a      	ldrb	r2, [r7, #21]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80064ee:	7d7b      	ldrb	r3, [r7, #21]
 80064f0:	3301      	adds	r3, #1
 80064f2:	757b      	strb	r3, [r7, #21]
	    y1++;
 80064f4:	7d3b      	ldrb	r3, [r7, #20]
 80064f6:	3301      	adds	r3, #1
 80064f8:	753b      	strb	r3, [r7, #20]
	    break;	  
 80064fa:	e011      	b.n	8006520 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 80064fc:	7bfa      	ldrb	r2, [r7, #15]
 80064fe:	7dbb      	ldrb	r3, [r7, #22]
 8006500:	4413      	add	r3, r2
 8006502:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	7d7a      	ldrb	r2, [r7, #21]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006512:	7d7b      	ldrb	r3, [r7, #21]
 8006514:	3301      	adds	r3, #1
 8006516:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006518:	7d3b      	ldrb	r3, [r7, #20]
 800651a:	3301      	adds	r3, #1
 800651c:	753b      	strb	r3, [r7, #20]
	    break;	  
 800651e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006520:	7db8      	ldrb	r0, [r7, #22]
 8006522:	7d7a      	ldrb	r2, [r7, #21]
 8006524:	7df9      	ldrb	r1, [r7, #23]
 8006526:	7d3b      	ldrb	r3, [r7, #20]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4603      	mov	r3, r0
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb8b 	bl	8006c48 <u8g2_IsIntersection>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <u8g2_font_decode_glyph+0x18e>
	return d;
 8006538:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800653c:	e03a      	b.n	80065b4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2200      	movs	r2, #0
 8006542:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2200      	movs	r2, #0
 8006548:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8006550:	4619      	mov	r1, r3
 8006552:	6938      	ldr	r0, [r7, #16]
 8006554:	f7ff fd9b 	bl	800608e <u8g2_font_decode_get_unsigned_bits>
 8006558:	4603      	mov	r3, r0
 800655a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8006562:	4619      	mov	r1, r3
 8006564:	6938      	ldr	r0, [r7, #16]
 8006566:	f7ff fd92 	bl	800608e <u8g2_font_decode_get_unsigned_bits>
 800656a:	4603      	mov	r3, r0
 800656c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	2200      	movs	r2, #0
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fe5e 	bl	8006236 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800657a:	7abb      	ldrb	r3, [r7, #10]
 800657c:	2201      	movs	r2, #1
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fe58 	bl	8006236 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8006586:	2101      	movs	r1, #1
 8006588:	6938      	ldr	r0, [r7, #16]
 800658a:	f7ff fd80 	bl	800608e <u8g2_font_decode_get_unsigned_bits>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1ec      	bne.n	800656e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800659a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800659e:	429a      	cmp	r2, r3
 80065a0:	dd00      	ble.n	80065a4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80065a2:	e7d2      	b.n	800654a <u8g2_font_decode_glyph+0x19a>
	break;
 80065a4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	7b1a      	ldrb	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  return d;
 80065b0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065cc:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3317      	adds	r3, #23
 80065d2:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 80065d4:	887b      	ldrh	r3, [r7, #2]
 80065d6:	2bff      	cmp	r3, #255	@ 0xff
 80065d8:	d82a      	bhi.n	8006630 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80065da:	887b      	ldrh	r3, [r7, #2]
 80065dc:	2b60      	cmp	r3, #96	@ 0x60
 80065de:	d907      	bls.n	80065f0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e009      	b.n	8006604 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80065f0:	887b      	ldrh	r3, [r7, #2]
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	d906      	bls.n	8006604 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80065fc:	461a      	mov	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d036      	beq.n	800667c <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	4293      	cmp	r3, r2
 8006618:	d102      	bne.n	8006620 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3302      	adds	r3, #2
 800661e:	e031      	b.n	8006684 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800662e:	e7e9      	b.n	8006604 <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8006636:	461a      	mov	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 8006644:	897b      	ldrh	r3, [r7, #10]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	897b      	ldrh	r3, [r7, #10]
 8006654:	4313      	orrs	r3, r2
 8006656:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 8006658:	897b      	ldrh	r3, [r7, #10]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 800665e:	897a      	ldrh	r2, [r7, #10]
 8006660:	887b      	ldrh	r3, [r7, #2]
 8006662:	429a      	cmp	r2, r3
 8006664:	d102      	bne.n	800666c <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3303      	adds	r3, #3
 800666a:	e00b      	b.n	8006684 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3302      	adds	r3, #2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 800667a:	e7e0      	b.n	800663e <u8g2_font_get_glyph_data+0x82>
	break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <u8g2_font_get_glyph_data+0xc6>
	break;
 8006680:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	461a      	mov	r2, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	70fb      	strb	r3, [r7, #3]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70bb      	strb	r3, [r7, #2]
 80066a6:	4613      	mov	r3, r2
 80066a8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  u8g2->font_decode.target_y = y;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	78ba      	ldrb	r2, [r7, #2]
 80066ba:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80066be:	883b      	ldrh	r3, [r7, #0]
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff ff7a 	bl	80065bc <u8g2_font_get_glyph_data>
 80066c8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff fe6c 	bl	80063b0 <u8g2_font_decode_glyph>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	70fb      	strb	r3, [r7, #3]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70bb      	strb	r3, [r7, #2]
 80066fe:	4613      	mov	r3, r2
 8006700:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006708:	2b03      	cmp	r3, #3
 800670a:	d833      	bhi.n	8006774 <u8g2_DrawGlyph+0x8c>
 800670c:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <u8g2_DrawGlyph+0x2c>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006725 	.word	0x08006725
 8006718:	08006739 	.word	0x08006739
 800671c:	0800674d 	.word	0x0800674d
 8006720:	08006761 	.word	0x08006761
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	78bb      	ldrb	r3, [r7, #2]
 8006732:	4413      	add	r3, r2
 8006734:	70bb      	strb	r3, [r7, #2]
      break;
 8006736:	e01d      	b.n	8006774 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
 8006740:	4603      	mov	r3, r0
 8006742:	461a      	mov	r2, r3
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	70fb      	strb	r3, [r7, #3]
      break;
 800674a:	e013      	b.n	8006774 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	461a      	mov	r2, r3
 8006758:	78bb      	ldrb	r3, [r7, #2]
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	70bb      	strb	r3, [r7, #2]
      break;
 800675e:	e009      	b.n	8006774 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	4413      	add	r3, r2
 8006770:	70fb      	strb	r3, [r7, #3]
      break;
 8006772:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006774:	883b      	ldrh	r3, [r7, #0]
 8006776:	78ba      	ldrb	r2, [r7, #2]
 8006778:	78f9      	ldrb	r1, [r7, #3]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff ff88 	bl	8006690 <u8g2_font_draw_glyph>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop

0800678c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	72fb      	strb	r3, [r7, #11]
 800679a:	4613      	mov	r3, r2
 800679c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fc0a 	bl	8006fb8 <u8x8_utf8_init>
  sum = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7812      	ldrb	r2, [r2, #0]
 80067b0:	4611      	mov	r1, r2
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	4798      	blx	r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80067ba:	8abb      	ldrh	r3, [r7, #20]
 80067bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d038      	beq.n	8006836 <u8g2_draw_string+0xaa>
      break;
    str++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3301      	adds	r3, #1
 80067c8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80067ca:	8abb      	ldrh	r3, [r7, #20]
 80067cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d0e9      	beq.n	80067a8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80067d4:	8abb      	ldrh	r3, [r7, #20]
 80067d6:	7aba      	ldrb	r2, [r7, #10]
 80067d8:	7af9      	ldrb	r1, [r7, #11]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff84 	bl	80066e8 <u8g2_DrawGlyph>
 80067e0:	4603      	mov	r3, r0
 80067e2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d81e      	bhi.n	800682c <u8g2_draw_string+0xa0>
 80067ee:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <u8g2_draw_string+0x68>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006805 	.word	0x08006805
 80067f8:	0800680f 	.word	0x0800680f
 80067fc:	08006819 	.word	0x08006819
 8006800:	08006823 	.word	0x08006823
      {
	case 0:
	  x += delta;
 8006804:	7afa      	ldrb	r2, [r7, #11]
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	4413      	add	r3, r2
 800680a:	72fb      	strb	r3, [r7, #11]
	  break;
 800680c:	e00e      	b.n	800682c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800680e:	7aba      	ldrb	r2, [r7, #10]
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	4413      	add	r3, r2
 8006814:	72bb      	strb	r3, [r7, #10]
	  break;
 8006816:	e009      	b.n	800682c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	7cfb      	ldrb	r3, [r7, #19]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	72fb      	strb	r3, [r7, #11]
	  break;
 8006820:	e004      	b.n	800682c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8006822:	7aba      	ldrb	r2, [r7, #10]
 8006824:	7cfb      	ldrb	r3, [r7, #19]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	72bb      	strb	r3, [r7, #10]
	  break;
 800682a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800682c:	7dfa      	ldrb	r2, [r7, #23]
 800682e:	7cfb      	ldrb	r3, [r7, #19]
 8006830:	4413      	add	r3, r2
 8006832:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006834:	e7b8      	b.n	80067a8 <u8g2_draw_string+0x1c>
      break;
 8006836:	bf00      	nop
    }
  }
  return sum;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	72fb      	strb	r3, [r7, #11]
 8006852:	4613      	mov	r3, r2
 8006854:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a06      	ldr	r2, [pc, #24]	@ (8006874 <u8g2_DrawStr+0x30>)
 800685a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800685c:	7aba      	ldrb	r2, [r7, #10]
 800685e:	7af9      	ldrb	r1, [r7, #11]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff ff92 	bl	800678c <u8g2_draw_string>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08006fd5 	.word	0x08006fd5

08006878 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006884:	2b00      	cmp	r3, #0
 8006886:	d05d      	beq.n	8006944 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f993 206d 	ldrsb.w	r2, [r3, #109]	@ 0x6d
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f993 206e 	ldrsb.w	r2, [r3, #110]	@ 0x6e
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04d      	beq.n	8006946 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d11c      	bne.n	80068ee <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f993 2079 	ldrsb.w	r2, [r3, #121]	@ 0x79
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f993 306f 	ldrsb.w	r3, [r3, #111]	@ 0x6f
 80068c0:	429a      	cmp	r2, r3
 80068c2:	da05      	bge.n	80068d0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f993 206f 	ldrsb.w	r2, [r3, #111]	@ 0x6f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 80068dc:	429a      	cmp	r2, r3
 80068de:	dd32      	ble.n	8006946 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f993 2070 	ldrsb.w	r2, [r3, #112]	@ 0x70
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 80068ec:	e02b      	b.n	8006946 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f993 3079 	ldrsb.w	r3, [r3, #121]	@ 0x79
 80068f4:	461a      	mov	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 80068fc:	4619      	mov	r1, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8006904:	440b      	add	r3, r1
 8006906:	429a      	cmp	r2, r3
 8006908:	da0d      	bge.n	8006926 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8006910:	b2da      	uxtb	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4413      	add	r3, r2
 800691c:	b2db      	uxtb	r3, r3
 800691e:	b25a      	sxtb	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8006932:	429a      	cmp	r2, r3
 8006934:	dd07      	ble.n	8006946 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f993 206c 	ldrsb.w	r2, [r3, #108]	@ 0x6c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8006942:	e000      	b.n	8006946 <u8g2_UpdateRefHeight+0xce>
    return;
 8006944:	bf00      	nop
  }  
}
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  return 0;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a04      	ldr	r2, [pc, #16]	@ (8006984 <u8g2_SetFontPosBaseline+0x1c>)
 8006974:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	08006951 	.word	0x08006951

08006988 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d00b      	beq.n	80069b4 <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	649a      	str	r2, [r3, #72]	@ 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3360      	adds	r3, #96	@ 0x60
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fac7 	bl	8005f3c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff ff62 	bl	8006878 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80069d6:	7dfa      	ldrb	r2, [r7, #23]
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d911      	bls.n	8006a02 <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80069de:	7dfa      	ldrb	r2, [r7, #23]
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d208      	bcs.n	80069f8 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	75bb      	strb	r3, [r7, #22]
      b--;
 80069ea:	7dbb      	ldrb	r3, [r7, #22]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	7dba      	ldrb	r2, [r7, #22]
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e004      	b.n	8006a02 <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	7dfa      	ldrb	r2, [r7, #23]
 8006a00:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8006a02:	7dfa      	ldrb	r2, [r7, #23]
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d301      	bcc.n	8006a0e <u8g2_clip_intersection+0x52>
    return 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e00c      	b.n	8006a28 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 8006a0e:	7dbb      	ldrb	r3, [r7, #22]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <u8g2_clip_intersection+0x5c>
    return 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	e007      	b.n	8006a28 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 8006a18:	7dba      	ldrb	r2, [r7, #22]
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d902      	bls.n	8006a26 <u8g2_clip_intersection+0x6a>
    *bp = d;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	79fa      	ldrb	r2, [r7, #7]
 8006a24:	701a      	strb	r2, [r3, #0]
    
  return 1;
 8006a26:	2301      	movs	r3, #1
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006a34:	b5b0      	push	{r4, r5, r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	70fb      	strb	r3, [r7, #3]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70bb      	strb	r3, [r7, #2]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 403b 	ldrb.w	r4, [r3, #59]	@ 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 503a 	ldrb.w	r5, [r3, #58]	@ 0x3a


  if ( dir == 0 )
 8006a5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11a      	bne.n	8006a98 <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 8006a62:	78bb      	ldrb	r3, [r7, #2]
 8006a64:	429c      	cmp	r4, r3
 8006a66:	d93d      	bls.n	8006ae4 <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	73fb      	strb	r3, [r7, #15]
    a += len;
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	787b      	ldrb	r3, [r7, #1]
 8006a70:	4413      	add	r3, r2
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 8006a76:	f107 010f 	add.w	r1, r7, #15
 8006a7a:	1cfb      	adds	r3, r7, #3
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff ff9c 	bl	80069bc <u8g2_clip_intersection>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d02e      	beq.n	8006ae8 <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	707b      	strb	r3, [r7, #1]
    len -= x;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	787a      	ldrb	r2, [r7, #1]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	707b      	strb	r3, [r7, #1]
 8006a96:	e019      	b.n	8006acc <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	429d      	cmp	r5, r3
 8006a9c:	d926      	bls.n	8006aec <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 8006a9e:	78bb      	ldrb	r3, [r7, #2]
 8006aa0:	73fb      	strb	r3, [r7, #15]
    a += len;
 8006aa2:	7bfa      	ldrb	r2, [r7, #15]
 8006aa4:	787b      	ldrb	r3, [r7, #1]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 8006aac:	f107 010f 	add.w	r1, r7, #15
 8006ab0:	1cbb      	adds	r3, r7, #2
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff ff81 	bl	80069bc <u8g2_clip_intersection>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d017      	beq.n	8006af0 <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	707b      	strb	r3, [r7, #1]
    len -= y;
 8006ac4:	78bb      	ldrb	r3, [r7, #2]
 8006ac6:	787a      	ldrb	r2, [r7, #1]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006ad0:	78f9      	ldrb	r1, [r7, #3]
 8006ad2:	78ba      	ldrb	r2, [r7, #2]
 8006ad4:	7878      	ldrb	r0, [r7, #1]
 8006ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4603      	mov	r3, r0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	47a0      	blx	r4
 8006ae2:	e006      	b.n	8006af2 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8006ae4:	bf00      	nop
 8006ae6:	e004      	b.n	8006af2 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8006ae8:	bf00      	nop
 8006aea:	e002      	b.n	8006af2 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8006aec:	bf00      	nop
 8006aee:	e000      	b.n	8006af2 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8006af0:	bf00      	nop
}
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bdb0      	pop	{r4, r5, r7, pc}

08006af8 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006af8:	b590      	push	{r4, r7, lr}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	70fb      	strb	r3, [r7, #3]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70bb      	strb	r3, [r7, #2]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	78ba      	ldrb	r2, [r7, #2]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 8006b22:	787b      	ldrb	r3, [r7, #1]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d116      	bne.n	8006b56 <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d233      	bcs.n	8006b9c <u8g2_draw_hv_line_4dir+0xa4>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006b3a:	78ba      	ldrb	r2, [r7, #2]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d22d      	bcs.n	8006b9c <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006b44:	7878      	ldrb	r0, [r7, #1]
 8006b46:	78ba      	ldrb	r2, [r7, #2]
 8006b48:	78f9      	ldrb	r1, [r7, #3]
 8006b4a:	7e3b      	ldrb	r3, [r7, #24]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4603      	mov	r3, r0
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	47a0      	blx	r4
    return;
 8006b54:	e022      	b.n	8006b9c <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 8006b56:	7e3b      	ldrb	r3, [r7, #24]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d107      	bne.n	8006b6c <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	787b      	ldrb	r3, [r7, #1]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	70fb      	strb	r3, [r7, #3]
    x++;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	3301      	adds	r3, #1
 8006b68:	70fb      	strb	r3, [r7, #3]
 8006b6a:	e009      	b.n	8006b80 <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 8006b6c:	7e3b      	ldrb	r3, [r7, #24]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d106      	bne.n	8006b80 <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 8006b72:	78ba      	ldrb	r2, [r7, #2]
 8006b74:	787b      	ldrb	r3, [r7, #1]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	70bb      	strb	r3, [r7, #2]
    y++;
 8006b7a:	78bb      	ldrb	r3, [r7, #2]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 8006b80:	7e3b      	ldrb	r3, [r7, #24]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8006b88:	7878      	ldrb	r0, [r7, #1]
 8006b8a:	78ba      	ldrb	r2, [r7, #2]
 8006b8c:	78f9      	ldrb	r1, [r7, #3]
 8006b8e:	7e3b      	ldrb	r3, [r7, #24]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4603      	mov	r3, r0
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff ff4d 	bl	8006a34 <u8g2_draw_hv_line_2dir>
 8006b9a:	e000      	b.n	8006b9e <u8g2_draw_hv_line_4dir+0xa6>
    return;
 8006b9c:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd90      	pop	{r4, r7, pc}

08006ba4 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	70fb      	strb	r3, [r7, #3]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70bb      	strb	r3, [r7, #2]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8006bbe:	787b      	ldrb	r3, [r7, #1]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	685c      	ldr	r4, [r3, #4]
 8006bca:	7878      	ldrb	r0, [r7, #1]
 8006bcc:	78ba      	ldrb	r2, [r7, #2]
 8006bce:	78f9      	ldrb	r1, [r7, #3]
 8006bd0:	7e3b      	ldrb	r3, [r7, #24]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	47a0      	blx	r4
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd90      	pop	{r4, r7, pc}

08006be2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8006be2:	b490      	push	{r4, r7}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	4604      	mov	r4, r0
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	71fb      	strb	r3, [r7, #7]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	71bb      	strb	r3, [r7, #6]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	717b      	strb	r3, [r7, #5]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8006c00:	797a      	ldrb	r2, [r7, #5]
 8006c02:	79bb      	ldrb	r3, [r7, #6]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d20d      	bcs.n	8006c24 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8006c08:	793a      	ldrb	r2, [r7, #4]
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d901      	bls.n	8006c14 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e014      	b.n	8006c3e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8006c14:	797a      	ldrb	r2, [r7, #5]
 8006c16:	793b      	ldrb	r3, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d901      	bls.n	8006c20 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e00e      	b.n	8006c3e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e00c      	b.n	8006c3e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8006c24:	793a      	ldrb	r2, [r7, #4]
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d907      	bls.n	8006c3c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8006c2c:	797a      	ldrb	r2, [r7, #5]
 8006c2e:	793b      	ldrb	r3, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d901      	bls.n	8006c38 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e002      	b.n	8006c3e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8006c3c:	2300      	movs	r3, #0
    }
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc90      	pop	{r4, r7}
 8006c46:	4770      	bx	lr

08006c48 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	70fb      	strb	r3, [r7, #3]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	70bb      	strb	r3, [r7, #2]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 0043 	ldrb.w	r0, [r3, #67]	@ 0x43
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 8006c6e:	7c3b      	ldrb	r3, [r7, #16]
 8006c70:	78ba      	ldrb	r2, [r7, #2]
 8006c72:	f7ff ffb6 	bl	8006be2 <u8g2_is_intersection_decision_tree>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <u8g2_IsIntersection+0x38>
    return 0; 
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e00a      	b.n	8006c96 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 0041 	ldrb.w	r0, [r3, #65]	@ 0x41
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 1042 	ldrb.w	r1, [r3, #66]	@ 0x42
 8006c8c:	787b      	ldrb	r3, [r7, #1]
 8006c8e:	78fa      	ldrb	r2, [r7, #3]
 8006c90:	f7ff ffa7 	bl	8006be2 <u8g2_is_intersection_decision_tree>
 8006c94:	4603      	mov	r3, r0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	4611      	mov	r1, r2
 8006caa:	461a      	mov	r2, r3
 8006cac:	4603      	mov	r3, r0
 8006cae:	70fb      	strb	r3, [r7, #3]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70bb      	strb	r3, [r7, #2]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8006cb8:	78bb      	ldrb	r3, [r7, #2]
 8006cba:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006cbc:	7cfb      	ldrb	r3, [r7, #19]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8006cc8:	7c3a      	ldrb	r2, [r7, #16]
 8006cca:	7cfb      	ldrb	r3, [r7, #19]
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d801      	bhi.n	8006ce8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8006ce4:	7c3b      	ldrb	r3, [r7, #16]
 8006ce6:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d001      	beq.n	8006cf6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8006cf2:	7c3b      	ldrb	r3, [r7, #16]
 8006cf4:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8006cf6:	78bb      	ldrb	r3, [r7, #2]
 8006cf8:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	7c1b      	ldrb	r3, [r3, #16]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	89fb      	ldrh	r3, [r7, #14]
 8006d0c:	fb13 f302 	smulbb	r3, r3, r2
 8006d10:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d16:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
  ptr += x;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8006d28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d117      	bne.n	8006d60 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
  {
      do
      {
	*ptr |= or_mask;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	7cbb      	ldrb	r3, [r7, #18]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	7c7b      	ldrb	r3, [r7, #17]
 8006d44:	4053      	eors	r3, r2
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	701a      	strb	r2, [r3, #0]
	ptr++;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
	len--;
 8006d52:	787b      	ldrb	r3, [r7, #1]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8006d58:	787b      	ldrb	r3, [r7, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e8      	bne.n	8006d30 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8006d5e:	e039      	b.n	8006dd4 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	7cbb      	ldrb	r3, [r7, #18]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	7c7b      	ldrb	r3, [r7, #17]
 8006d74:	4053      	eors	r3, r2
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8006d7c:	7cfb      	ldrb	r3, [r7, #19]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8006d82:	7cfb      	ldrb	r3, [r7, #19]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	74fb      	strb	r3, [r7, #19]
      len--;
 8006d8a:	787b      	ldrb	r3, [r7, #1]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8006d90:	7cfb      	ldrb	r3, [r7, #19]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d115      	bne.n	8006dc2 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4413      	add	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d801      	bhi.n	8006db2 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8006dae:	2301      	movs	r3, #1
 8006db0:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d008      	beq.n	8006dce <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	747b      	strb	r3, [r7, #17]
 8006dc0:	e005      	b.n	8006dce <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8006dc2:	7cbb      	ldrb	r3, [r7, #18]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8006dc8:	7c7b      	ldrb	r3, [r7, #17]
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8006dce:	787b      	ldrb	r3, [r7, #1]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1c5      	bne.n	8006d60 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	649a      	str	r2, [r3, #72]	@ 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	79fa      	ldrb	r2, [r7, #7]
 8006e06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  u8g2->bitmap_transparency = 0;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  u8g2->draw_color = 1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  u8g2->is_auto_page_clear = 1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  
  u8g2->cb = u8g2_cb;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update(u8g2);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fd90 	bl	8006968 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
#endif
}
 8006e50:	bf00      	nop
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e66:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7bfa      	ldrb	r2, [r7, #15]
 8006e72:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	7c1b      	ldrb	r3, [r3, #16]
 8006e7c:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b1f      	cmp	r3, #31
 8006e82:	d901      	bls.n	8006e88 <u8g2_update_dimension_common+0x30>
    t = 31;
 8006e84:	231f      	movs	r3, #31
 8006e86:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006e9c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7bfa      	ldrb	r2, [r7, #15]
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  t = u8g2->tile_buf_height;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006eb2:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8006ebc:	4413      	add	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6812      	ldr	r2, [r2, #0]
 8006ec2:	7c52      	ldrb	r2, [r2, #17]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	dd07      	ble.n	8006ed8 <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	7c5a      	ldrb	r2, [r3, #17]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  u8g2->buf_y1 += t;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	4413      	add	r3, r2
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	22f0      	movs	r2, #240	@ 0xf0
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	8a9b      	ldrh	r3, [r3, #20]
 8006f16:	2bf0      	cmp	r3, #240	@ 0xf0
 8006f18:	d806      	bhi.n	8006f28 <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	8a9b      	ldrh	r3, [r3, #20]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	8adb      	ldrh	r3, [r3, #22]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
#endif

}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ff84 	bl	8006e58 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	70fb      	strb	r3, [r7, #3]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70bb      	strb	r3, [r7, #2]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 8006f9e:	7878      	ldrb	r0, [r7, #1]
 8006fa0:	78ba      	ldrb	r2, [r7, #2]
 8006fa2:	78f9      	ldrb	r1, [r7, #3]
 8006fa4:	7c3b      	ldrb	r3, [r7, #16]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fda4 	bl	8006af8 <u8g2_draw_hv_line_4dir>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <u8x8_ascii_next+0x18>
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	2b0a      	cmp	r3, #10
 8006fea:	d102      	bne.n	8006ff2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8006fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ff0:	e001      	b.n	8006ff6 <u8x8_ascii_next+0x22>
  return b;
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	b29b      	uxth	r3, r3
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8007002:	b590      	push	{r4, r7, lr}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691c      	ldr	r4, [r3, #16]
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	2300      	movs	r3, #0
 8007016:	2120      	movs	r1, #32
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	47a0      	blx	r4
 800701c:	4603      	mov	r3, r0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bd90      	pop	{r4, r7, pc}

08007026 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007026:	b590      	push	{r4, r7, lr}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	460b      	mov	r3, r1
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691c      	ldr	r4, [r3, #16]
 8007038:	7afa      	ldrb	r2, [r7, #11]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2117      	movs	r1, #23
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	47a0      	blx	r4
 8007042:	4603      	mov	r3, r0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bd90      	pop	{r4, r7, pc}

0800704c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8007058:	1cfb      	adds	r3, r7, #3
 800705a:	461a      	mov	r2, r3
 800705c:	2101      	movs	r1, #1
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff ffe1 	bl	8007026 <u8x8_byte_SendBytes>
 8007064:	4603      	mov	r3, r0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800706e:	b590      	push	{r4, r7, lr}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68dc      	ldr	r4, [r3, #12]
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	2300      	movs	r3, #0
 8007082:	2115      	movs	r1, #21
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	47a0      	blx	r4
 8007088:	4603      	mov	r3, r0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}

08007092 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8007092:	b590      	push	{r4, r7, lr}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68dc      	ldr	r4, [r3, #12]
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	2300      	movs	r3, #0
 80070a6:	2116      	movs	r1, #22
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	47a0      	blx	r4
 80070ac:	4603      	mov	r3, r0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}

080070b6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80070b6:	b590      	push	{r4, r7, lr}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	460b      	mov	r3, r1
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	68dc      	ldr	r4, [r3, #12]
 80070c8:	7afa      	ldrb	r2, [r7, #11]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2117      	movs	r1, #23
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	47a0      	blx	r4
 80070d2:	4603      	mov	r3, r0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}

080070dc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68dc      	ldr	r4, [r3, #12]
 80070e8:	2300      	movs	r3, #0
 80070ea:	2200      	movs	r2, #0
 80070ec:	2118      	movs	r1, #24
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	47a0      	blx	r4
 80070f2:	4603      	mov	r3, r0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd90      	pop	{r4, r7, pc}

080070fc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80070fc:	b590      	push	{r4, r7, lr}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68dc      	ldr	r4, [r3, #12]
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	2119      	movs	r1, #25
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	47a0      	blx	r4
 8007112:	4603      	mov	r3, r0
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bd90      	pop	{r4, r7, pc}

0800711c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	73fb      	strb	r3, [r7, #15]
    data++;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2bfe      	cmp	r3, #254	@ 0xfe
 8007136:	d031      	beq.n	800719c <u8x8_cad_SendSequence+0x80>
 8007138:	2bfe      	cmp	r3, #254	@ 0xfe
 800713a:	dc3d      	bgt.n	80071b8 <u8x8_cad_SendSequence+0x9c>
 800713c:	2b19      	cmp	r3, #25
 800713e:	dc3b      	bgt.n	80071b8 <u8x8_cad_SendSequence+0x9c>
 8007140:	2b18      	cmp	r3, #24
 8007142:	da23      	bge.n	800718c <u8x8_cad_SendSequence+0x70>
 8007144:	2b16      	cmp	r3, #22
 8007146:	dc02      	bgt.n	800714e <u8x8_cad_SendSequence+0x32>
 8007148:	2b15      	cmp	r3, #21
 800714a:	da03      	bge.n	8007154 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800714c:	e034      	b.n	80071b8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800714e:	2b17      	cmp	r3, #23
 8007150:	d00e      	beq.n	8007170 <u8x8_cad_SendSequence+0x54>
	return;
 8007152:	e031      	b.n	80071b8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68dc      	ldr	r4, [r3, #12]
 800715e:	7bba      	ldrb	r2, [r7, #14]
 8007160:	7bf9      	ldrb	r1, [r7, #15]
 8007162:	2300      	movs	r3, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	47a0      	blx	r4
	  data++;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	603b      	str	r3, [r7, #0]
	  break;
 800716e:	e022      	b.n	80071b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8007176:	f107 030e 	add.w	r3, r7, #14
 800717a:	461a      	mov	r2, r3
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff ff99 	bl	80070b6 <u8x8_cad_SendData>
	  data++;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	603b      	str	r3, [r7, #0]
	  break;
 800718a:	e014      	b.n	80071b6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68dc      	ldr	r4, [r3, #12]
 8007190:	7bf9      	ldrb	r1, [r7, #15]
 8007192:	2300      	movs	r3, #0
 8007194:	2200      	movs	r2, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	47a0      	blx	r4
	  break;
 800719a:	e00c      	b.n	80071b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	461a      	mov	r2, r3
 80071a6:	2129      	movs	r1, #41	@ 0x29
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9cb 	bl	8007544 <u8x8_gpio_call>
	  data++;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	3301      	adds	r3, #1
 80071b2:	603b      	str	r3, [r7, #0]
	  break;
 80071b4:	bf00      	nop
    cmd = *data;
 80071b6:	e7b6      	b.n	8007126 <u8x8_cad_SendSequence+0xa>
	return;
 80071b8:	bf00      	nop
    }
  }
}
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd90      	pop	{r4, r7, pc}

080071c0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	72fb      	strb	r3, [r7, #11]
 80071ce:	4613      	mov	r3, r2
 80071d0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	3b14      	subs	r3, #20
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d82f      	bhi.n	800723a <u8x8_cad_001+0x7a>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <u8x8_cad_001+0x20>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007229 	.word	0x08007229
 80071e4:	080071f9 	.word	0x080071f9
 80071e8:	0800720d 	.word	0x0800720d
 80071ec:	08007221 	.word	0x08007221
 80071f0:	08007229 	.word	0x08007229
 80071f4:	08007229 	.word	0x08007229
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80071f8:	2100      	movs	r1, #0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff ff01 	bl	8007002 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007200:	7abb      	ldrb	r3, [r7, #10]
 8007202:	4619      	mov	r1, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff ff21 	bl	800704c <u8x8_byte_SendByte>
      break;
 800720a:	e018      	b.n	800723e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800720c:	2100      	movs	r1, #0
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff fef7 	bl	8007002 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007214:	7abb      	ldrb	r3, [r7, #10]
 8007216:	4619      	mov	r1, r3
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff ff17 	bl	800704c <u8x8_byte_SendByte>
      break;
 800721e:	e00e      	b.n	800723e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8007220:	2101      	movs	r1, #1
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff feed 	bl	8007002 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	691c      	ldr	r4, [r3, #16]
 800722c:	7aba      	ldrb	r2, [r7, #10]
 800722e:	7af9      	ldrb	r1, [r7, #11]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	47a0      	blx	r4
 8007236:	4603      	mov	r3, r0
 8007238:	e002      	b.n	8007240 <u8x8_cad_001+0x80>
    default:
      return 0;
 800723a:	2300      	movs	r3, #0
 800723c:	e000      	b.n	8007240 <u8x8_cad_001+0x80>
  }
  return 1;
 800723e:	2301      	movs	r3, #1
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	bd90      	pop	{r4, r7, pc}

08007248 <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	72fb      	strb	r3, [r7, #11]
 8007256:	4613      	mov	r3, r2
 8007258:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	2b0f      	cmp	r3, #15
 800725e:	d006      	beq.n	800726e <u8x8_d_ssd1309_generic+0x26>
 8007260:	2b0f      	cmp	r3, #15
 8007262:	dc62      	bgt.n	800732a <u8x8_d_ssd1309_generic+0xe2>
 8007264:	2b0b      	cmp	r3, #11
 8007266:	d043      	beq.n	80072f0 <u8x8_d_ssd1309_generic+0xa8>
 8007268:	2b0e      	cmp	r3, #14
 800726a:	d04e      	beq.n	800730a <u8x8_d_ssd1309_generic+0xc2>
 800726c:	e05d      	b.n	800732a <u8x8_d_ssd1309_generic+0xe2>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff34 	bl	80070dc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	795b      	ldrb	r3, [r3, #5]
 8007278:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	7f9a      	ldrb	r2, [r3, #30]
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	4413      	add	r3, r2
 8007288:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	091b      	lsrs	r3, r3, #4
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f043 0310 	orr.w	r3, r3, #16
 8007294:	b2db      	uxtb	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fee8 	bl	800706e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fef2 	bl	8007092 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	799b      	ldrb	r3, [r3, #6]
 80072b2:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	4619      	mov	r1, r3
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff fee9 	bl	8007092 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80072cc:	7dbb      	ldrb	r3, [r7, #22]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff feed 	bl	80070b6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80072dc:	7abb      	ldrb	r3, [r7, #10]
 80072de:	3b01      	subs	r3, #1
 80072e0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80072e2:	7abb      	ldrb	r3, [r7, #10]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1eb      	bne.n	80072c0 <u8x8_d_ssd1309_generic+0x78>
      
      u8x8_cad_EndTransfer(u8x8);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff ff07 	bl	80070fc <u8x8_cad_EndTransfer>
      break;
 80072ee:	e01e      	b.n	800732e <u8x8_d_ssd1309_generic+0xe6>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80072f0:	7abb      	ldrb	r3, [r7, #10]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <u8x8_d_ssd1309_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 80072f6:	4910      	ldr	r1, [pc, #64]	@ (8007338 <u8x8_d_ssd1309_generic+0xf0>)
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff ff0f 	bl	800711c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 80072fe:	e016      	b.n	800732e <u8x8_d_ssd1309_generic+0xe6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8007300:	490e      	ldr	r1, [pc, #56]	@ (800733c <u8x8_d_ssd1309_generic+0xf4>)
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff ff0a 	bl	800711c <u8x8_cad_SendSequence>
      break;
 8007308:	e011      	b.n	800732e <u8x8_d_ssd1309_generic+0xe6>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fee6 	bl	80070dc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8007310:	2181      	movs	r1, #129	@ 0x81
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff feab 	bl	800706e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8007318:	7abb      	ldrb	r3, [r7, #10]
 800731a:	4619      	mov	r1, r3
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff feb8 	bl	8007092 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff feea 	bl	80070fc <u8x8_cad_EndTransfer>
      break;
 8007328:	e001      	b.n	800732e <u8x8_d_ssd1309_generic+0xe6>
#endif
    default:
      return 0;
 800732a:	2300      	movs	r3, #0
 800732c:	e000      	b.n	8007330 <u8x8_d_ssd1309_generic+0xe8>
  }
  return 1;
 800732e:	2301      	movs	r3, #1
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	080148b8 	.word	0x080148b8
 800733c:	080148c0 	.word	0x080148c0

08007340 <u8x8_d_ssd1309_128x64_noname0>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	72fb      	strb	r3, [r7, #11]
 800734e:	4613      	mov	r3, r2
 8007350:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8007352:	7aba      	ldrb	r2, [r7, #10]
 8007354:	7af9      	ldrb	r1, [r7, #11]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff ff75 	bl	8007248 <u8x8_d_ssd1309_generic>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <u8x8_d_ssd1309_128x64_noname0+0x28>
    return 1;
 8007364:	2301      	movs	r3, #1
 8007366:	e030      	b.n	80073ca <u8x8_d_ssd1309_128x64_noname0+0x8a>
  
  switch(msg)
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	2b0d      	cmp	r3, #13
 800736c:	d006      	beq.n	800737c <u8x8_d_ssd1309_128x64_noname0+0x3c>
 800736e:	2b0d      	cmp	r3, #13
 8007370:	dc28      	bgt.n	80073c4 <u8x8_d_ssd1309_128x64_noname0+0x84>
 8007372:	2b09      	cmp	r3, #9
 8007374:	d021      	beq.n	80073ba <u8x8_d_ssd1309_128x64_noname0+0x7a>
 8007376:	2b0a      	cmp	r3, #10
 8007378:	d017      	beq.n	80073aa <u8x8_d_ssd1309_128x64_noname0+0x6a>
 800737a:	e023      	b.n	80073c4 <u8x8_d_ssd1309_128x64_noname0+0x84>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800737c:	7abb      	ldrb	r3, [r7, #10]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <u8x8_d_ssd1309_128x64_noname0+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8007382:	4914      	ldr	r1, [pc, #80]	@ (80073d4 <u8x8_d_ssd1309_128x64_noname0+0x94>)
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff fec9 	bl	800711c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	7c9a      	ldrb	r2, [r3, #18]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	779a      	strb	r2, [r3, #30]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8007394:	e018      	b.n	80073c8 <u8x8_d_ssd1309_128x64_noname0+0x88>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8007396:	4910      	ldr	r1, [pc, #64]	@ (80073d8 <u8x8_d_ssd1309_128x64_noname0+0x98>)
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff febf 	bl	800711c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	7cda      	ldrb	r2, [r3, #19]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	779a      	strb	r2, [r3, #30]
      break;
 80073a8:	e00e      	b.n	80073c8 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f82d 	bl	800740a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 80073b0:	490a      	ldr	r1, [pc, #40]	@ (80073dc <u8x8_d_ssd1309_128x64_noname0+0x9c>)
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff feb2 	bl	800711c <u8x8_cad_SendSequence>
      break;
 80073b8:	e006      	b.n	80073c8 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname0_display_info);
 80073ba:	4909      	ldr	r1, [pc, #36]	@ (80073e0 <u8x8_d_ssd1309_128x64_noname0+0xa0>)
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f811 	bl	80073e4 <u8x8_d_helper_display_setup_memory>
      break;
 80073c2:	e001      	b.n	80073c8 <u8x8_d_ssd1309_128x64_noname0+0x88>
    default:
      return 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	e000      	b.n	80073ca <u8x8_d_ssd1309_128x64_noname0+0x8a>
  }
  return 1;
 80073c8:	2301      	movs	r3, #1
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	080148c8 	.word	0x080148c8
 80073d8:	080148d0 	.word	0x080148d0
 80073dc:	080148d8 	.word	0x080148d8
 80073e0:	08014904 	.word	0x08014904

080073e4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	7c9a      	ldrb	r2, [r3, #18]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	779a      	strb	r2, [r3, #30]
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800740a:	b590      	push	{r4, r7, lr}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695c      	ldr	r4, [r3, #20]
 8007416:	2300      	movs	r3, #0
 8007418:	2200      	movs	r2, #0
 800741a:	2128      	movs	r1, #40	@ 0x28
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68dc      	ldr	r4, [r3, #12]
 8007424:	2300      	movs	r3, #0
 8007426:	2200      	movs	r2, #0
 8007428:	2114      	movs	r1, #20
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800742e:	2201      	movs	r2, #1
 8007430:	214b      	movs	r1, #75	@ 0x4b
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f886 	bl	8007544 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	791b      	ldrb	r3, [r3, #4]
 800743e:	461a      	mov	r2, r3
 8007440:	2129      	movs	r1, #41	@ 0x29
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f87e 	bl	8007544 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8007448:	2200      	movs	r2, #0
 800744a:	214b      	movs	r1, #75	@ 0x4b
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f879 	bl	8007544 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	791b      	ldrb	r3, [r3, #4]
 8007458:	461a      	mov	r2, r3
 800745a:	2129      	movs	r1, #41	@ 0x29
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f871 	bl	8007544 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8007462:	2201      	movs	r2, #1
 8007464:	214b      	movs	r1, #75	@ 0x4b
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f86c 	bl	8007544 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	795b      	ldrb	r3, [r3, #5]
 8007472:	461a      	mov	r2, r3
 8007474:	2129      	movs	r1, #41	@ 0x29
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f864 	bl	8007544 <u8x8_gpio_call>
}    
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	bd90      	pop	{r4, r7, pc}

08007484 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007484:	b590      	push	{r4, r7, lr}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	461a      	mov	r2, r3
 8007492:	4603      	mov	r3, r0
 8007494:	70fb      	strb	r3, [r7, #3]
 8007496:	460b      	mov	r3, r1
 8007498:	70bb      	strb	r3, [r7, #2]
 800749a:	4613      	mov	r3, r2
 800749c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80074a2:	78bb      	ldrb	r3, [r7, #2]
 80074a4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80074a6:	787b      	ldrb	r3, [r7, #1]
 80074a8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689c      	ldr	r4, [r3, #8]
 80074b2:	f107 0308 	add.w	r3, r7, #8
 80074b6:	2201      	movs	r2, #1
 80074b8:	210f      	movs	r1, #15
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	47a0      	blx	r4
 80074be:	4603      	mov	r3, r0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd90      	pop	{r4, r7, pc}

080074c8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689c      	ldr	r4, [r3, #8]
 80074d4:	2300      	movs	r3, #0
 80074d6:	2200      	movs	r2, #0
 80074d8:	2109      	movs	r1, #9
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	47a0      	blx	r4
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}

080074e6 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80074e6:	b590      	push	{r4, r7, lr}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689c      	ldr	r4, [r3, #8]
 80074f2:	2300      	movs	r3, #0
 80074f4:	2200      	movs	r2, #0
 80074f6:	210a      	movs	r1, #10
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	47a0      	blx	r4
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	bd90      	pop	{r4, r7, pc}

08007504 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689c      	ldr	r4, [r3, #8]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	2300      	movs	r3, #0
 8007518:	210b      	movs	r1, #11
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	47a0      	blx	r4
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bd90      	pop	{r4, r7, pc}

08007526 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8007526:	b590      	push	{r4, r7, lr}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689c      	ldr	r4, [r3, #8]
 8007532:	2300      	movs	r3, #0
 8007534:	2200      	movs	r2, #0
 8007536:	2110      	movs	r1, #16
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	47a0      	blx	r4
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bd90      	pop	{r4, r7, pc}

08007544 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
 8007550:	4613      	mov	r3, r2
 8007552:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	695c      	ldr	r4, [r3, #20]
 8007558:	78ba      	ldrb	r2, [r7, #2]
 800755a:	78f9      	ldrb	r1, [r7, #3]
 800755c:	2300      	movs	r3, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	47a0      	blx	r4
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	bd90      	pop	{r4, r7, pc}

0800756a <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	72fb      	strb	r3, [r7, #11]
 8007578:	4613      	mov	r3, r2
 800757a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a11      	ldr	r2, [pc, #68]	@ (80075e4 <u8x8_SetupDefaults+0x58>)
 800759e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a10      	ldr	r2, [pc, #64]	@ (80075e4 <u8x8_SetupDefaults+0x58>)
 80075a4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a0e      	ldr	r2, [pc, #56]	@ (80075e4 <u8x8_SetupDefaults+0x58>)
 80075aa:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <u8x8_SetupDefaults+0x58>)
 80075b0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->i2c_address = 255;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	22ff      	movs	r2, #255	@ 0xff
 80075cc:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	22ff      	movs	r2, #255	@ 0xff
 80075d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	0800756b 	.word	0x0800756b

080075e8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff ffc8 	bl	800758c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff ff57 	bl	80074c8 <u8x8_SetupMemory>
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800762a:	463b      	mov	r3, r7
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007636:	4b21      	ldr	r3, [pc, #132]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007638:	4a21      	ldr	r2, [pc, #132]	@ (80076c0 <MX_ADC1_Init+0x9c>)
 800763a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800763c:	4b1f      	ldr	r3, [pc, #124]	@ (80076bc <MX_ADC1_Init+0x98>)
 800763e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007644:	4b1d      	ldr	r3, [pc, #116]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007646:	2200      	movs	r2, #0
 8007648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800764a:	4b1c      	ldr	r3, [pc, #112]	@ (80076bc <MX_ADC1_Init+0x98>)
 800764c:	2200      	movs	r2, #0
 800764e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007650:	4b1a      	ldr	r3, [pc, #104]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007652:	2200      	movs	r2, #0
 8007654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007656:	4b19      	ldr	r3, [pc, #100]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800765e:	4b17      	ldr	r3, [pc, #92]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007660:	2200      	movs	r2, #0
 8007662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007664:	4b15      	ldr	r3, [pc, #84]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007666:	4a17      	ldr	r2, [pc, #92]	@ (80076c4 <MX_ADC1_Init+0xa0>)
 8007668:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800766a:	4b14      	ldr	r3, [pc, #80]	@ (80076bc <MX_ADC1_Init+0x98>)
 800766c:	2200      	movs	r2, #0
 800766e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007670:	4b12      	ldr	r3, [pc, #72]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007672:	2201      	movs	r2, #1
 8007674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007676:	4b11      	ldr	r3, [pc, #68]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800767e:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007680:	2201      	movs	r2, #1
 8007682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007684:	480d      	ldr	r0, [pc, #52]	@ (80076bc <MX_ADC1_Init+0x98>)
 8007686:	f001 f8ed 	bl	8008864 <HAL_ADC_Init>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007690:	f000 fb40 	bl	8007d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007698:	2301      	movs	r3, #1
 800769a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800769c:	2307      	movs	r3, #7
 800769e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076a0:	463b      	mov	r3, r7
 80076a2:	4619      	mov	r1, r3
 80076a4:	4805      	ldr	r0, [pc, #20]	@ (80076bc <MX_ADC1_Init+0x98>)
 80076a6:	f001 fcf3 	bl	8009090 <HAL_ADC_ConfigChannel>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80076b0:	f000 fb30 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20003a00 	.word	0x20003a00
 80076c0:	40012000 	.word	0x40012000
 80076c4:	0f000001 	.word	0x0f000001

080076c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076ce:	463b      	mov	r3, r7
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	605a      	str	r2, [r3, #4]
 80076d6:	609a      	str	r2, [r3, #8]
 80076d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80076da:	4b30      	ldr	r3, [pc, #192]	@ (800779c <MX_ADC2_Init+0xd4>)
 80076dc:	4a30      	ldr	r2, [pc, #192]	@ (80077a0 <MX_ADC2_Init+0xd8>)
 80076de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80076e0:	4b2e      	ldr	r3, [pc, #184]	@ (800779c <MX_ADC2_Init+0xd4>)
 80076e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80076e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80076e8:	4b2c      	ldr	r3, [pc, #176]	@ (800779c <MX_ADC2_Init+0xd4>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80076ee:	4b2b      	ldr	r3, [pc, #172]	@ (800779c <MX_ADC2_Init+0xd4>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80076f4:	4b29      	ldr	r3, [pc, #164]	@ (800779c <MX_ADC2_Init+0xd4>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80076fa:	4b28      	ldr	r3, [pc, #160]	@ (800779c <MX_ADC2_Init+0xd4>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007702:	4b26      	ldr	r3, [pc, #152]	@ (800779c <MX_ADC2_Init+0xd4>)
 8007704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800770a:	4b24      	ldr	r3, [pc, #144]	@ (800779c <MX_ADC2_Init+0xd4>)
 800770c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8007710:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007712:	4b22      	ldr	r3, [pc, #136]	@ (800779c <MX_ADC2_Init+0xd4>)
 8007714:	2200      	movs	r2, #0
 8007716:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8007718:	4b20      	ldr	r3, [pc, #128]	@ (800779c <MX_ADC2_Init+0xd4>)
 800771a:	2203      	movs	r2, #3
 800771c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800771e:	4b1f      	ldr	r3, [pc, #124]	@ (800779c <MX_ADC2_Init+0xd4>)
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007726:	4b1d      	ldr	r3, [pc, #116]	@ (800779c <MX_ADC2_Init+0xd4>)
 8007728:	2200      	movs	r2, #0
 800772a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800772c:	481b      	ldr	r0, [pc, #108]	@ (800779c <MX_ADC2_Init+0xd4>)
 800772e:	f001 f899 	bl	8008864 <HAL_ADC_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8007738:	f000 faec 	bl	8007d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800773c:	2304      	movs	r3, #4
 800773e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007740:	2301      	movs	r3, #1
 8007742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8007744:	2305      	movs	r3, #5
 8007746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007748:	463b      	mov	r3, r7
 800774a:	4619      	mov	r1, r3
 800774c:	4813      	ldr	r0, [pc, #76]	@ (800779c <MX_ADC2_Init+0xd4>)
 800774e:	f001 fc9f 	bl	8009090 <HAL_ADC_ConfigChannel>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8007758:	f000 fadc 	bl	8007d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800775c:	2305      	movs	r3, #5
 800775e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8007760:	2302      	movs	r3, #2
 8007762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007764:	463b      	mov	r3, r7
 8007766:	4619      	mov	r1, r3
 8007768:	480c      	ldr	r0, [pc, #48]	@ (800779c <MX_ADC2_Init+0xd4>)
 800776a:	f001 fc91 	bl	8009090 <HAL_ADC_ConfigChannel>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8007774:	f000 face 	bl	8007d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8007778:	2306      	movs	r3, #6
 800777a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800777c:	2303      	movs	r3, #3
 800777e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007780:	463b      	mov	r3, r7
 8007782:	4619      	mov	r1, r3
 8007784:	4805      	ldr	r0, [pc, #20]	@ (800779c <MX_ADC2_Init+0xd4>)
 8007786:	f001 fc83 	bl	8009090 <HAL_ADC_ConfigChannel>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8007790:	f000 fac0 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20003a48 	.word	0x20003a48
 80077a0:	40012100 	.word	0x40012100

080077a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08c      	sub	sp, #48	@ 0x30
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ac:	f107 031c 	add.w	r3, r7, #28
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a4e      	ldr	r2, [pc, #312]	@ (80078fc <HAL_ADC_MspInit+0x158>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d130      	bne.n	8007828 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	4b4d      	ldr	r3, [pc, #308]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 80077d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80077d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 80077d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	4b46      	ldr	r3, [pc, #280]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	4a45      	ldr	r2, [pc, #276]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80077f2:	4b43      	ldr	r3, [pc, #268]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 80077f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_0_LevelSensor_Pin;
 80077fe:	2301      	movs	r3, #1
 8007800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007802:	2303      	movs	r3, #3
 8007804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC1_0_LevelSensor_GPIO_Port, &GPIO_InitStruct);
 800780a:	f107 031c 	add.w	r3, r7, #28
 800780e:	4619      	mov	r1, r3
 8007810:	483c      	ldr	r0, [pc, #240]	@ (8007904 <HAL_ADC_MspInit+0x160>)
 8007812:	f002 fb5b 	bl	8009ecc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007816:	2200      	movs	r2, #0
 8007818:	2105      	movs	r1, #5
 800781a:	2012      	movs	r0, #18
 800781c:	f001 ff9a 	bl	8009754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007820:	2012      	movs	r0, #18
 8007822:	f001 ffb3 	bl	800978c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8007826:	e065      	b.n	80078f4 <HAL_ADC_MspInit+0x150>
  else if(adcHandle->Instance==ADC2)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a36      	ldr	r2, [pc, #216]	@ (8007908 <HAL_ADC_MspInit+0x164>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d160      	bne.n	80078f4 <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	4b32      	ldr	r3, [pc, #200]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 8007838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783a:	4a31      	ldr	r2, [pc, #196]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 800783c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007840:	6453      	str	r3, [r2, #68]	@ 0x44
 8007842:	4b2f      	ldr	r3, [pc, #188]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	4b2b      	ldr	r3, [pc, #172]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007856:	4a2a      	ldr	r2, [pc, #168]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6313      	str	r3, [r2, #48]	@ 0x30
 800785e:	4b28      	ldr	r3, [pc, #160]	@ (8007900 <HAL_ADC_MspInit+0x15c>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800786a:	2370      	movs	r3, #112	@ 0x70
 800786c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800786e:	2303      	movs	r3, #3
 8007870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007872:	2300      	movs	r3, #0
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007876:	f107 031c 	add.w	r3, r7, #28
 800787a:	4619      	mov	r1, r3
 800787c:	4821      	ldr	r0, [pc, #132]	@ (8007904 <HAL_ADC_MspInit+0x160>)
 800787e:	f002 fb25 	bl	8009ecc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8007882:	4b22      	ldr	r3, [pc, #136]	@ (800790c <HAL_ADC_MspInit+0x168>)
 8007884:	4a22      	ldr	r2, [pc, #136]	@ (8007910 <HAL_ADC_MspInit+0x16c>)
 8007886:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007888:	4b20      	ldr	r3, [pc, #128]	@ (800790c <HAL_ADC_MspInit+0x168>)
 800788a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800788e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007890:	4b1e      	ldr	r3, [pc, #120]	@ (800790c <HAL_ADC_MspInit+0x168>)
 8007892:	2200      	movs	r2, #0
 8007894:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007896:	4b1d      	ldr	r3, [pc, #116]	@ (800790c <HAL_ADC_MspInit+0x168>)
 8007898:	2200      	movs	r2, #0
 800789a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800789c:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <HAL_ADC_MspInit+0x168>)
 800789e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80078a2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80078a4:	4b19      	ldr	r3, [pc, #100]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078aa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80078b2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80078b4:	4b15      	ldr	r3, [pc, #84]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078ba:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80078bc:	4b13      	ldr	r3, [pc, #76]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078be:	2200      	movs	r2, #0
 80078c0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078c2:	4b12      	ldr	r3, [pc, #72]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80078c8:	4810      	ldr	r0, [pc, #64]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078ca:	f001 ff6d 	bl	80097a8 <HAL_DMA_Init>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80078d4:	f000 fa1e 	bl	8007d14 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a0c      	ldr	r2, [pc, #48]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80078de:	4a0b      	ldr	r2, [pc, #44]	@ (800790c <HAL_ADC_MspInit+0x168>)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80078e4:	2200      	movs	r2, #0
 80078e6:	2105      	movs	r1, #5
 80078e8:	2012      	movs	r0, #18
 80078ea:	f001 ff33 	bl	8009754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80078ee:	2012      	movs	r0, #18
 80078f0:	f001 ff4c 	bl	800978c <HAL_NVIC_EnableIRQ>
}
 80078f4:	bf00      	nop
 80078f6:	3730      	adds	r7, #48	@ 0x30
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40012000 	.word	0x40012000
 8007900:	40023800 	.word	0x40023800
 8007904:	40020000 	.word	0x40020000
 8007908:	40012100 	.word	0x40012100
 800790c:	20003a90 	.word	0x20003a90
 8007910:	40026440 	.word	0x40026440

08007914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800791a:	2300      	movs	r3, #0
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <MX_DMA_Init+0x3c>)
 8007920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007922:	4a0b      	ldr	r2, [pc, #44]	@ (8007950 <MX_DMA_Init+0x3c>)
 8007924:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007928:	6313      	str	r3, [r2, #48]	@ 0x30
 800792a:	4b09      	ldr	r3, [pc, #36]	@ (8007950 <MX_DMA_Init+0x3c>)
 800792c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007932:	607b      	str	r3, [r7, #4]
 8007934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007936:	2200      	movs	r2, #0
 8007938:	2105      	movs	r1, #5
 800793a:	203a      	movs	r0, #58	@ 0x3a
 800793c:	f001 ff0a 	bl	8009754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007940:	203a      	movs	r0, #58	@ 0x3a
 8007942:	f001 ff23 	bl	800978c <HAL_NVIC_EnableIRQ>

}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800

08007954 <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0


	app_mainC();
 8007958:	f7fa fc3c 	bl	80021d4 <app_mainC>
    vTaskStartScheduler();
 800795c:	f007 fbce 	bl	800f0fc <vTaskStartScheduler>
}
 8007960:	bf00      	nop
 8007962:	bd80      	pop	{r7, pc}

08007964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08c      	sub	sp, #48	@ 0x30
 8007968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800796a:	f107 031c 	add.w	r3, r7, #28
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	609a      	str	r2, [r3, #8]
 8007976:	60da      	str	r2, [r3, #12]
 8007978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	4b54      	ldr	r3, [pc, #336]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	4a53      	ldr	r2, [pc, #332]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 8007984:	f043 0304 	orr.w	r3, r3, #4
 8007988:	6313      	str	r3, [r2, #48]	@ 0x30
 800798a:	4b51      	ldr	r3, [pc, #324]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 800799c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799e:	4a4c      	ldr	r2, [pc, #304]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80079a6:	4b4a      	ldr	r3, [pc, #296]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	4b46      	ldr	r3, [pc, #280]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ba:	4a45      	ldr	r2, [pc, #276]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80079c2:	4b43      	ldr	r3, [pc, #268]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079d8:	f043 0310 	orr.w	r3, r3, #16
 80079dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80079de:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ea:	2300      	movs	r3, #0
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	4b38      	ldr	r3, [pc, #224]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f2:	4a37      	ldr	r2, [pc, #220]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079f4:	f043 0302 	orr.w	r3, r3, #2
 80079f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80079fa:	4b35      	ldr	r3, [pc, #212]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	4b31      	ldr	r3, [pc, #196]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0e:	4a30      	ldr	r2, [pc, #192]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 8007a10:	f043 0308 	orr.w	r3, r3, #8
 8007a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a16:	4b2e      	ldr	r3, [pc, #184]	@ (8007ad0 <MX_GPIO_Init+0x16c>)
 8007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 8007a22:	2200      	movs	r2, #0
 8007a24:	2102      	movs	r1, #2
 8007a26:	482b      	ldr	r0, [pc, #172]	@ (8007ad4 <MX_GPIO_Init+0x170>)
 8007a28:	f002 fbec 	bl	800a204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a32:	4829      	ldr	r0, [pc, #164]	@ (8007ad8 <MX_GPIO_Init+0x174>)
 8007a34:	f002 fbe6 	bl	800a204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DC_Pin|DISPLAY_RES_Pin, GPIO_PIN_RESET);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8007a3e:	4827      	ldr	r0, [pc, #156]	@ (8007adc <MX_GPIO_Init+0x178>)
 8007a40:	f002 fbe0 	bl	800a204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Relay_cont_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8007a44:	2200      	movs	r2, #0
 8007a46:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007a4a:	4825      	ldr	r0, [pc, #148]	@ (8007ae0 <MX_GPIO_Init+0x17c>)
 8007a4c:	f002 fbda 	bl	800a204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 8007a50:	2302      	movs	r3, #2
 8007a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a54:	2301      	movs	r3, #1
 8007a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 8007a60:	f107 031c 	add.w	r3, r7, #28
 8007a64:	4619      	mov	r1, r3
 8007a66:	481b      	ldr	r0, [pc, #108]	@ (8007ad4 <MX_GPIO_Init+0x170>)
 8007a68:	f002 fa30 	bl	8009ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DE_Pin;
 8007a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a72:	2301      	movs	r3, #1
 8007a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8007a7e:	f107 031c 	add.w	r3, r7, #28
 8007a82:	4619      	mov	r1, r3
 8007a84:	4814      	ldr	r0, [pc, #80]	@ (8007ad8 <MX_GPIO_Init+0x174>)
 8007a86:	f002 fa21 	bl	8009ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_DC_Pin|DISPLAY_RES_Pin;
 8007a8a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a90:	2301      	movs	r3, #1
 8007a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a9c:	f107 031c 	add.w	r3, r7, #28
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	480e      	ldr	r0, [pc, #56]	@ (8007adc <MX_GPIO_Init+0x178>)
 8007aa4:	f002 fa12 	bl	8009ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Relay_cont_Pin|DISPLAY_CS_Pin;
 8007aa8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007aba:	f107 031c 	add.w	r3, r7, #28
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4807      	ldr	r0, [pc, #28]	@ (8007ae0 <MX_GPIO_Init+0x17c>)
 8007ac2:	f002 fa03 	bl	8009ecc <HAL_GPIO_Init>

}
 8007ac6:	bf00      	nop
 8007ac8:	3730      	adds	r7, #48	@ 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	40020000 	.word	0x40020000
 8007ad8:	40021000 	.word	0x40021000
 8007adc:	40020400 	.word	0x40020400
 8007ae0:	40020c00 	.word	0x40020c00

08007ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007ae8:	4b12      	ldr	r3, [pc, #72]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007aea:	4a13      	ldr	r2, [pc, #76]	@ (8007b38 <MX_I2C1_Init+0x54>)
 8007aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007aee:	4b11      	ldr	r3, [pc, #68]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007af0:	4a12      	ldr	r2, [pc, #72]	@ (8007b3c <MX_I2C1_Init+0x58>)
 8007af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007af4:	4b0f      	ldr	r3, [pc, #60]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007afa:	4b0e      	ldr	r3, [pc, #56]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b00:	4b0c      	ldr	r3, [pc, #48]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007b02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b08:	4b0a      	ldr	r3, [pc, #40]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007b0e:	4b09      	ldr	r3, [pc, #36]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b14:	4b07      	ldr	r3, [pc, #28]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b1a:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b20:	4804      	ldr	r0, [pc, #16]	@ (8007b34 <MX_I2C1_Init+0x50>)
 8007b22:	f002 fba3 	bl	800a26c <HAL_I2C_Init>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007b2c:	f000 f8f2 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20003af0 	.word	0x20003af0
 8007b38:	40005400 	.word	0x40005400
 8007b3c:	000186a0 	.word	0x000186a0

08007b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	@ 0x28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	60da      	str	r2, [r3, #12]
 8007b56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a19      	ldr	r2, [pc, #100]	@ (8007bc4 <HAL_I2C_MspInit+0x84>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d12c      	bne.n	8007bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	4b18      	ldr	r3, [pc, #96]	@ (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6a:	4a17      	ldr	r2, [pc, #92]	@ (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b72:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007b7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b84:	2312      	movs	r3, #18
 8007b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b90:	2304      	movs	r3, #4
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4619      	mov	r1, r3
 8007b9a:	480c      	ldr	r0, [pc, #48]	@ (8007bcc <HAL_I2C_MspInit+0x8c>)
 8007b9c:	f002 f996 	bl	8009ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	4b08      	ldr	r3, [pc, #32]	@ (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba8:	4a07      	ldr	r2, [pc, #28]	@ (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007baa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3728      	adds	r7, #40	@ 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40005400 	.word	0x40005400
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	40020400 	.word	0x40020400

08007bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007bd4:	f000 fde0 	bl	8008798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007bd8:	f000 f81e 	bl	8007c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007bdc:	f7ff fec2 	bl	8007964 <MX_GPIO_Init>
  MX_DMA_Init();
 8007be0:	f7ff fe98 	bl	8007914 <MX_DMA_Init>
  MX_ADC1_Init();
 8007be4:	f7ff fd1e 	bl	8007624 <MX_ADC1_Init>
  MX_I2C1_Init();
 8007be8:	f7ff ff7c 	bl	8007ae4 <MX_I2C1_Init>
  MX_RTC_Init();
 8007bec:	f000 f898 	bl	8007d20 <MX_RTC_Init>
  MX_UART4_Init();
 8007bf0:	f000 fba8 	bl	8008344 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8007bf4:	f000 fbd0 	bl	8008398 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007bf8:	f000 fbf8 	bl	80083ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007bfc:	f000 fc20 	bl	8008440 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8007c00:	f000 fc48 	bl	8008494 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8007c04:	f7ff fd60 	bl	80076c8 <MX_ADC2_Init>
  MX_TIM8_Init();
 8007c08:	f000 fb2a 	bl	8008260 <MX_TIM8_Init>
  MX_SPI2_Init();
 8007c0c:	f000 f8d8 	bl	8007dc0 <MX_SPI2_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 8007c10:	f7ff fea0 	bl	8007954 <MX_FREERTOS_Init>
  while (1)
 8007c14:	bf00      	nop
 8007c16:	e7fd      	b.n	8007c14 <main+0x44>

08007c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b094      	sub	sp, #80	@ 0x50
 8007c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c1e:	f107 0320 	add.w	r3, r7, #32
 8007c22:	2230      	movs	r2, #48	@ 0x30
 8007c24:	2100      	movs	r1, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f009 ff51 	bl	8011ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c2c:	f107 030c 	add.w	r3, r7, #12
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	4b29      	ldr	r3, [pc, #164]	@ (8007ce8 <SystemClock_Config+0xd0>)
 8007c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c44:	4a28      	ldr	r2, [pc, #160]	@ (8007ce8 <SystemClock_Config+0xd0>)
 8007c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c4c:	4b26      	ldr	r3, [pc, #152]	@ (8007ce8 <SystemClock_Config+0xd0>)
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	4b23      	ldr	r3, [pc, #140]	@ (8007cec <SystemClock_Config+0xd4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a22      	ldr	r2, [pc, #136]	@ (8007cec <SystemClock_Config+0xd4>)
 8007c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	4b20      	ldr	r3, [pc, #128]	@ (8007cec <SystemClock_Config+0xd4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c70:	607b      	str	r3, [r7, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8007c74:	230a      	movs	r3, #10
 8007c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007c7c:	2310      	movs	r3, #16
 8007c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007c80:	2301      	movs	r3, #1
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c84:	2302      	movs	r3, #2
 8007c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007c90:	23a8      	movs	r3, #168	@ 0xa8
 8007c92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007c94:	2302      	movs	r3, #2
 8007c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007c98:	2304      	movs	r3, #4
 8007c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c9c:	f107 0320 	add.w	r3, r7, #32
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f003 fc0b 	bl	800b4bc <HAL_RCC_OscConfig>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007cac:	f000 f832 	bl	8007d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007cb0:	230f      	movs	r3, #15
 8007cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007cbc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	2105      	movs	r1, #5
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f003 fe6c 	bl	800b9ac <HAL_RCC_ClockConfig>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007cda:	f000 f81b 	bl	8007d14 <Error_Handler>
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3750      	adds	r7, #80	@ 0x50
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	40007000 	.word	0x40007000

08007cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a04      	ldr	r2, [pc, #16]	@ (8007d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007d02:	f000 fd6b 	bl	80087dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	40000400 	.word	0x40000400

08007d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007d18:	b672      	cpsid	i
}
 8007d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007d1c:	bf00      	nop
 8007d1e:	e7fd      	b.n	8007d1c <Error_Handler+0x8>

08007d20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007d24:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d26:	4a10      	ldr	r2, [pc, #64]	@ (8007d68 <MX_RTC_Init+0x48>)
 8007d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007d30:	4b0c      	ldr	r3, [pc, #48]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d32:	227f      	movs	r2, #127	@ 0x7f
 8007d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007d36:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d38:	22ff      	movs	r2, #255	@ 0xff
 8007d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007d3c:	4b09      	ldr	r3, [pc, #36]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007d42:	4b08      	ldr	r3, [pc, #32]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007d48:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007d4e:	4805      	ldr	r0, [pc, #20]	@ (8007d64 <MX_RTC_Init+0x44>)
 8007d50:	f004 f920 	bl	800bf94 <HAL_RTC_Init>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8007d5a:	f7ff ffdb 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20003b44 	.word	0x20003b44
 8007d68:	40002800 	.word	0x40002800

08007d6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	605a      	str	r2, [r3, #4]
 8007d7e:	609a      	str	r2, [r3, #8]
 8007d80:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a0c      	ldr	r2, [pc, #48]	@ (8007db8 <HAL_RTC_MspInit+0x4c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d111      	bne.n	8007db0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d94:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d96:	f107 0308 	add.w	r3, r7, #8
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f004 f818 	bl	800bdd0 <HAL_RCCEx_PeriphCLKConfig>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007da6:	f7ff ffb5 	bl	8007d14 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007daa:	4b04      	ldr	r3, [pc, #16]	@ (8007dbc <HAL_RTC_MspInit+0x50>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007db0:	bf00      	nop
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40002800 	.word	0x40002800
 8007dbc:	42470e3c 	.word	0x42470e3c

08007dc0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007dc4:	4b17      	ldr	r3, [pc, #92]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007dc6:	4a18      	ldr	r2, [pc, #96]	@ (8007e28 <MX_SPI2_Init+0x68>)
 8007dc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007dca:	4b16      	ldr	r3, [pc, #88]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007dcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007dd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007dd2:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007dd8:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007dde:	4b11      	ldr	r3, [pc, #68]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007de0:	2202      	movs	r2, #2
 8007de2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007de4:	4b0f      	ldr	r3, [pc, #60]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007dea:	4b0e      	ldr	r3, [pc, #56]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007df0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007df2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007df4:	2228      	movs	r2, #40	@ 0x28
 8007df6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007dfe:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e04:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007e0a:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007e10:	4804      	ldr	r0, [pc, #16]	@ (8007e24 <MX_SPI2_Init+0x64>)
 8007e12:	f004 fa8f 	bl	800c334 <HAL_SPI_Init>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007e1c:	f7ff ff7a 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20003b64 	.word	0x20003b64
 8007e28:	40003800 	.word	0x40003800

08007e2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	@ 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	609a      	str	r2, [r3, #8]
 8007e40:	60da      	str	r2, [r3, #12]
 8007e42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a19      	ldr	r2, [pc, #100]	@ (8007eb0 <HAL_SPI_MspInit+0x84>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d12c      	bne.n	8007ea8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007e4e:	2300      	movs	r3, #0
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	4b18      	ldr	r3, [pc, #96]	@ (8007eb4 <HAL_SPI_MspInit+0x88>)
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	4a17      	ldr	r2, [pc, #92]	@ (8007eb4 <HAL_SPI_MspInit+0x88>)
 8007e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e5e:	4b15      	ldr	r3, [pc, #84]	@ (8007eb4 <HAL_SPI_MspInit+0x88>)
 8007e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	4b11      	ldr	r3, [pc, #68]	@ (8007eb4 <HAL_SPI_MspInit+0x88>)
 8007e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e72:	4a10      	ldr	r2, [pc, #64]	@ (8007eb4 <HAL_SPI_MspInit+0x88>)
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <HAL_SPI_MspInit+0x88>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007e86:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8007e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e94:	2303      	movs	r3, #3
 8007e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007e98:	2305      	movs	r3, #5
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e9c:	f107 0314 	add.w	r3, r7, #20
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4805      	ldr	r0, [pc, #20]	@ (8007eb8 <HAL_SPI_MspInit+0x8c>)
 8007ea4:	f002 f812 	bl	8009ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	3728      	adds	r7, #40	@ 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40003800 	.word	0x40003800
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	40020400 	.word	0x40020400

08007ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	4b12      	ldr	r3, [pc, #72]	@ (8007f10 <HAL_MspInit+0x54>)
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	4a11      	ldr	r2, [pc, #68]	@ (8007f10 <HAL_MspInit+0x54>)
 8007ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <HAL_MspInit+0x54>)
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f10 <HAL_MspInit+0x54>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8007f10 <HAL_MspInit+0x54>)
 8007ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8007eee:	4b08      	ldr	r3, [pc, #32]	@ (8007f10 <HAL_MspInit+0x54>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007efa:	2200      	movs	r2, #0
 8007efc:	210f      	movs	r1, #15
 8007efe:	f06f 0001 	mvn.w	r0, #1
 8007f02:	f001 fc27 	bl	8009754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	40023800 	.word	0x40023800

08007f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08e      	sub	sp, #56	@ 0x38
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	4b33      	ldr	r3, [pc, #204]	@ (8007ff8 <HAL_InitTick+0xe4>)
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2c:	4a32      	ldr	r2, [pc, #200]	@ (8007ff8 <HAL_InitTick+0xe4>)
 8007f2e:	f043 0302 	orr.w	r3, r3, #2
 8007f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f34:	4b30      	ldr	r3, [pc, #192]	@ (8007ff8 <HAL_InitTick+0xe4>)
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007f40:	f107 0210 	add.w	r2, r7, #16
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f003 ff0e 	bl	800bd6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007f5a:	f003 fedf 	bl	800bd1c <HAL_RCC_GetPCLK1Freq>
 8007f5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f60:	e004      	b.n	8007f6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007f62:	f003 fedb 	bl	800bd1c <HAL_RCC_GetPCLK1Freq>
 8007f66:	4603      	mov	r3, r0
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6e:	4a23      	ldr	r2, [pc, #140]	@ (8007ffc <HAL_InitTick+0xe8>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0c9b      	lsrs	r3, r3, #18
 8007f76:	3b01      	subs	r3, #1
 8007f78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8007f7a:	4b21      	ldr	r3, [pc, #132]	@ (8008000 <HAL_InitTick+0xec>)
 8007f7c:	4a21      	ldr	r2, [pc, #132]	@ (8008004 <HAL_InitTick+0xf0>)
 8007f7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8007f80:	4b1f      	ldr	r3, [pc, #124]	@ (8008000 <HAL_InitTick+0xec>)
 8007f82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007f86:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8007f88:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <HAL_InitTick+0xec>)
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8007f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008000 <HAL_InitTick+0xec>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f94:	4b1a      	ldr	r3, [pc, #104]	@ (8008000 <HAL_InitTick+0xec>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f9a:	4b19      	ldr	r3, [pc, #100]	@ (8008000 <HAL_InitTick+0xec>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8007fa0:	4817      	ldr	r0, [pc, #92]	@ (8008000 <HAL_InitTick+0xec>)
 8007fa2:	f004 fc71 	bl	800c888 <HAL_TIM_Base_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8007fac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11b      	bne.n	8007fec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8007fb4:	4812      	ldr	r0, [pc, #72]	@ (8008000 <HAL_InitTick+0xec>)
 8007fb6:	f004 fd1f 	bl	800c9f8 <HAL_TIM_Base_Start_IT>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8007fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d111      	bne.n	8007fec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007fc8:	201d      	movs	r0, #29
 8007fca:	f001 fbdf 	bl	800978c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b0f      	cmp	r3, #15
 8007fd2:	d808      	bhi.n	8007fe6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	201d      	movs	r0, #29
 8007fda:	f001 fbbb 	bl	8009754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007fde:	4a0a      	ldr	r2, [pc, #40]	@ (8008008 <HAL_InitTick+0xf4>)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	e002      	b.n	8007fec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8007fec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3738      	adds	r7, #56	@ 0x38
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	431bde83 	.word	0x431bde83
 8008000:	20003bbc 	.word	0x20003bbc
 8008004:	40000400 	.word	0x40000400
 8008008:	20000054 	.word	0x20000054

0800800c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <NMI_Handler+0x4>

08008014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <HardFault_Handler+0x4>

0800801c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <MemManage_Handler+0x4>

08008024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008028:	bf00      	nop
 800802a:	e7fd      	b.n	8008028 <BusFault_Handler+0x4>

0800802c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <UsageFault_Handler+0x4>

08008034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008038:	bf00      	nop
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008048:	4803      	ldr	r0, [pc, #12]	@ (8008058 <ADC_IRQHandler+0x14>)
 800804a:	f000 fddf 	bl	8008c0c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800804e:	4803      	ldr	r0, [pc, #12]	@ (800805c <ADC_IRQHandler+0x18>)
 8008050:	f000 fddc 	bl	8008c0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008054:	bf00      	nop
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20003a00 	.word	0x20003a00
 800805c:	20003a48 	.word	0x20003a48

08008060 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008064:	4802      	ldr	r0, [pc, #8]	@ (8008070 <TIM3_IRQHandler+0x10>)
 8008066:	f004 fd37 	bl	800cad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20003bbc 	.word	0x20003bbc

08008074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 8008078:	4802      	ldr	r0, [pc, #8]	@ (8008084 <USART2_IRQHandler+0x10>)
 800807a:	f7fd fa15 	bl	80054a8 <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 800807e:	bf00      	nop
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20003ce0 	.word	0x20003ce0

08008088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart3);
 800808c:	4802      	ldr	r0, [pc, #8]	@ (8008098 <USART3_IRQHandler+0x10>)
 800808e:	f7fd fa0b 	bl	80054a8 <My_UART_IRQHandlerC>
  /* USER CODE END USART3_IRQn 1 */
}
 8008092:	bf00      	nop
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20003d28 	.word	0x20003d28

0800809c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80080a0:	4802      	ldr	r0, [pc, #8]	@ (80080ac <DMA2_Stream2_IRQHandler+0x10>)
 80080a2:	f001 fca9 	bl	80099f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20003a90 	.word	0x20003a90

080080b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  return 1;
 80080b4:	2301      	movs	r3, #1
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <_kill>:

int _kill(int pid, int sig)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80080ca:	f009 fddf 	bl	8011c8c <__errno>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2216      	movs	r2, #22
 80080d2:	601a      	str	r2, [r3, #0]
  return -1;
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_exit>:

void _exit (int status)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80080e8:	f04f 31ff 	mov.w	r1, #4294967295
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ffe7 	bl	80080c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <_exit+0x12>

080080f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	e00a      	b.n	800811e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008108:	f3af 8000 	nop.w
 800810c:	4601      	mov	r1, r0
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	60ba      	str	r2, [r7, #8]
 8008114:	b2ca      	uxtb	r2, r1
 8008116:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3301      	adds	r3, #1
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	429a      	cmp	r2, r3
 8008124:	dbf0      	blt.n	8008108 <_read+0x12>
  }

  return len;
 8008126:	687b      	ldr	r3, [r7, #4]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e009      	b.n	8008156 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	60ba      	str	r2, [r7, #8]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	3301      	adds	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	429a      	cmp	r2, r3
 800815c:	dbf1      	blt.n	8008142 <_write+0x12>
  }
  return len;
 800815e:	687b      	ldr	r3, [r7, #4]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <_close>:

int _close(int file)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008190:	605a      	str	r2, [r3, #4]
  return 0;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <_isatty>:

int _isatty(int file)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80081a8:	2301      	movs	r3, #1
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081d8:	4a14      	ldr	r2, [pc, #80]	@ (800822c <_sbrk+0x5c>)
 80081da:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <_sbrk+0x60>)
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081e4:	4b13      	ldr	r3, [pc, #76]	@ (8008234 <_sbrk+0x64>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081ec:	4b11      	ldr	r3, [pc, #68]	@ (8008234 <_sbrk+0x64>)
 80081ee:	4a12      	ldr	r2, [pc, #72]	@ (8008238 <_sbrk+0x68>)
 80081f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <_sbrk+0x64>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4413      	add	r3, r2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d207      	bcs.n	8008210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008200:	f009 fd44 	bl	8011c8c <__errno>
 8008204:	4603      	mov	r3, r0
 8008206:	220c      	movs	r2, #12
 8008208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800820a:	f04f 33ff 	mov.w	r3, #4294967295
 800820e:	e009      	b.n	8008224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008210:	4b08      	ldr	r3, [pc, #32]	@ (8008234 <_sbrk+0x64>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008216:	4b07      	ldr	r3, [pc, #28]	@ (8008234 <_sbrk+0x64>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	4a05      	ldr	r2, [pc, #20]	@ (8008234 <_sbrk+0x64>)
 8008220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008222:	68fb      	ldr	r3, [r7, #12]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20020000 	.word	0x20020000
 8008230:	00000400 	.word	0x00000400
 8008234:	20003c04 	.word	0x20003c04
 8008238:	2000e930 	.word	0x2000e930

0800823c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008240:	4b06      	ldr	r3, [pc, #24]	@ (800825c <SystemInit+0x20>)
 8008242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008246:	4a05      	ldr	r2, [pc, #20]	@ (800825c <SystemInit+0x20>)
 8008248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800824c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008250:	bf00      	nop
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	605a      	str	r2, [r3, #4]
 8008270:	609a      	str	r2, [r3, #8]
 8008272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008274:	463b      	mov	r3, r7
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800827c:	4b1e      	ldr	r3, [pc, #120]	@ (80082f8 <MX_TIM8_Init+0x98>)
 800827e:	4a1f      	ldr	r2, [pc, #124]	@ (80082fc <MX_TIM8_Init+0x9c>)
 8008280:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8008282:	4b1d      	ldr	r3, [pc, #116]	@ (80082f8 <MX_TIM8_Init+0x98>)
 8008284:	22a7      	movs	r2, #167	@ 0xa7
 8008286:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008288:	4b1b      	ldr	r3, [pc, #108]	@ (80082f8 <MX_TIM8_Init+0x98>)
 800828a:	2200      	movs	r2, #0
 800828c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 800828e:	4b1a      	ldr	r3, [pc, #104]	@ (80082f8 <MX_TIM8_Init+0x98>)
 8008290:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008294:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008296:	4b18      	ldr	r3, [pc, #96]	@ (80082f8 <MX_TIM8_Init+0x98>)
 8008298:	2200      	movs	r2, #0
 800829a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800829c:	4b16      	ldr	r3, [pc, #88]	@ (80082f8 <MX_TIM8_Init+0x98>)
 800829e:	2200      	movs	r2, #0
 80082a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082a2:	4b15      	ldr	r3, [pc, #84]	@ (80082f8 <MX_TIM8_Init+0x98>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80082a8:	4813      	ldr	r0, [pc, #76]	@ (80082f8 <MX_TIM8_Init+0x98>)
 80082aa:	f004 faed 	bl	800c888 <HAL_TIM_Base_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80082b4:	f7ff fd2e 	bl	8007d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80082bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4619      	mov	r1, r3
 80082c4:	480c      	ldr	r0, [pc, #48]	@ (80082f8 <MX_TIM8_Init+0x98>)
 80082c6:	f004 fcf7 	bl	800ccb8 <HAL_TIM_ConfigClockSource>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80082d0:	f7ff fd20 	bl	8007d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80082d4:	2320      	movs	r3, #32
 80082d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082d8:	2300      	movs	r3, #0
 80082da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80082dc:	463b      	mov	r3, r7
 80082de:	4619      	mov	r1, r3
 80082e0:	4805      	ldr	r0, [pc, #20]	@ (80082f8 <MX_TIM8_Init+0x98>)
 80082e2:	f004 ff1f 	bl	800d124 <HAL_TIMEx_MasterConfigSynchronization>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80082ec:	f7ff fd12 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20003c08 	.word	0x20003c08
 80082fc:	40010400 	.word	0x40010400

08008300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a0b      	ldr	r2, [pc, #44]	@ (800833c <HAL_TIM_Base_MspInit+0x3c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10d      	bne.n	800832e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	4b0a      	ldr	r3, [pc, #40]	@ (8008340 <HAL_TIM_Base_MspInit+0x40>)
 8008318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831a:	4a09      	ldr	r2, [pc, #36]	@ (8008340 <HAL_TIM_Base_MspInit+0x40>)
 800831c:	f043 0302 	orr.w	r3, r3, #2
 8008320:	6453      	str	r3, [r2, #68]	@ 0x44
 8008322:	4b07      	ldr	r3, [pc, #28]	@ (8008340 <HAL_TIM_Base_MspInit+0x40>)
 8008324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40010400 	.word	0x40010400
 8008340:	40023800 	.word	0x40023800

08008344 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008348:	4b11      	ldr	r3, [pc, #68]	@ (8008390 <MX_UART4_Init+0x4c>)
 800834a:	4a12      	ldr	r2, [pc, #72]	@ (8008394 <MX_UART4_Init+0x50>)
 800834c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800834e:	4b10      	ldr	r3, [pc, #64]	@ (8008390 <MX_UART4_Init+0x4c>)
 8008350:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008354:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008356:	4b0e      	ldr	r3, [pc, #56]	@ (8008390 <MX_UART4_Init+0x4c>)
 8008358:	2200      	movs	r2, #0
 800835a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800835c:	4b0c      	ldr	r3, [pc, #48]	@ (8008390 <MX_UART4_Init+0x4c>)
 800835e:	2200      	movs	r2, #0
 8008360:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008362:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <MX_UART4_Init+0x4c>)
 8008364:	2200      	movs	r2, #0
 8008366:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008368:	4b09      	ldr	r3, [pc, #36]	@ (8008390 <MX_UART4_Init+0x4c>)
 800836a:	220c      	movs	r2, #12
 800836c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800836e:	4b08      	ldr	r3, [pc, #32]	@ (8008390 <MX_UART4_Init+0x4c>)
 8008370:	2200      	movs	r2, #0
 8008372:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008374:	4b06      	ldr	r3, [pc, #24]	@ (8008390 <MX_UART4_Init+0x4c>)
 8008376:	2200      	movs	r2, #0
 8008378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800837a:	4805      	ldr	r0, [pc, #20]	@ (8008390 <MX_UART4_Init+0x4c>)
 800837c:	f004 ff62 	bl	800d244 <HAL_UART_Init>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008386:	f7ff fcc5 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800838a:	bf00      	nop
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20003c50 	.word	0x20003c50
 8008394:	40004c00 	.word	0x40004c00

08008398 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800839c:	4b11      	ldr	r3, [pc, #68]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 800839e:	4a12      	ldr	r2, [pc, #72]	@ (80083e8 <MX_USART1_UART_Init+0x50>)
 80083a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80083a2:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80083a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80083aa:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80083b0:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80083b6:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80083bc:	4b09      	ldr	r3, [pc, #36]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083be:	220c      	movs	r2, #12
 80083c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80083c8:	4b06      	ldr	r3, [pc, #24]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80083ce:	4805      	ldr	r0, [pc, #20]	@ (80083e4 <MX_USART1_UART_Init+0x4c>)
 80083d0:	f004 ff38 	bl	800d244 <HAL_UART_Init>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80083da:	f7ff fc9b 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80083de:	bf00      	nop
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20003c98 	.word	0x20003c98
 80083e8:	40011000 	.word	0x40011000

080083ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083f0:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 80083f2:	4a12      	ldr	r2, [pc, #72]	@ (800843c <MX_USART2_UART_Init+0x50>)
 80083f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80083f6:	4b10      	ldr	r3, [pc, #64]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 80083f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80083fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 8008400:	2200      	movs	r2, #0
 8008402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008404:	4b0c      	ldr	r3, [pc, #48]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 8008406:	2200      	movs	r2, #0
 8008408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800840a:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 800840c:	2200      	movs	r2, #0
 800840e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008410:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 8008412:	220c      	movs	r2, #12
 8008414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008416:	4b08      	ldr	r3, [pc, #32]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 8008418:	2200      	movs	r2, #0
 800841a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 800841e:	2200      	movs	r2, #0
 8008420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008422:	4805      	ldr	r0, [pc, #20]	@ (8008438 <MX_USART2_UART_Init+0x4c>)
 8008424:	f004 ff0e 	bl	800d244 <HAL_UART_Init>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800842e:	f7ff fc71 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008432:	bf00      	nop
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20003ce0 	.word	0x20003ce0
 800843c:	40004400 	.word	0x40004400

08008440 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008444:	4b11      	ldr	r3, [pc, #68]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 8008446:	4a12      	ldr	r2, [pc, #72]	@ (8008490 <MX_USART3_UART_Init+0x50>)
 8008448:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2400;
 800844a:	4b10      	ldr	r3, [pc, #64]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 800844c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8008450:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008452:	4b0e      	ldr	r3, [pc, #56]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008458:	4b0c      	ldr	r3, [pc, #48]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800845e:	4b0b      	ldr	r3, [pc, #44]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 8008460:	2200      	movs	r2, #0
 8008462:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008464:	4b09      	ldr	r3, [pc, #36]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 8008466:	220c      	movs	r2, #12
 8008468:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800846a:	4b08      	ldr	r3, [pc, #32]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 800846c:	2200      	movs	r2, #0
 800846e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008470:	4b06      	ldr	r3, [pc, #24]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 8008472:	2200      	movs	r2, #0
 8008474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008476:	4805      	ldr	r0, [pc, #20]	@ (800848c <MX_USART3_UART_Init+0x4c>)
 8008478:	f004 fee4 	bl	800d244 <HAL_UART_Init>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008482:	f7ff fc47 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008486:	bf00      	nop
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20003d28 	.word	0x20003d28
 8008490:	40004800 	.word	0x40004800

08008494 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008498:	4b11      	ldr	r3, [pc, #68]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 800849a:	4a12      	ldr	r2, [pc, #72]	@ (80084e4 <MX_USART6_UART_Init+0x50>)
 800849c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800849e:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80084a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80084a6:	4b0e      	ldr	r3, [pc, #56]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80084ac:	4b0c      	ldr	r3, [pc, #48]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80084b2:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80084b8:	4b09      	ldr	r3, [pc, #36]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084ba:	220c      	movs	r2, #12
 80084bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084be:	4b08      	ldr	r3, [pc, #32]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80084c4:	4b06      	ldr	r3, [pc, #24]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80084ca:	4805      	ldr	r0, [pc, #20]	@ (80084e0 <MX_USART6_UART_Init+0x4c>)
 80084cc:	f004 feba 	bl	800d244 <HAL_UART_Init>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80084d6:	f7ff fc1d 	bl	8007d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80084da:	bf00      	nop
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20003d70 	.word	0x20003d70
 80084e4:	40011400 	.word	0x40011400

080084e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b092      	sub	sp, #72	@ 0x48
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	605a      	str	r2, [r3, #4]
 80084fa:	609a      	str	r2, [r3, #8]
 80084fc:	60da      	str	r2, [r3, #12]
 80084fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a86      	ldr	r2, [pc, #536]	@ (8008720 <HAL_UART_MspInit+0x238>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d12d      	bne.n	8008566 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800850a:	2300      	movs	r3, #0
 800850c:	633b      	str	r3, [r7, #48]	@ 0x30
 800850e:	4b85      	ldr	r3, [pc, #532]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	4a84      	ldr	r2, [pc, #528]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008518:	6413      	str	r3, [r2, #64]	@ 0x40
 800851a:	4b82      	ldr	r3, [pc, #520]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008522:	633b      	str	r3, [r7, #48]	@ 0x30
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008526:	2300      	movs	r3, #0
 8008528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800852a:	4b7e      	ldr	r3, [pc, #504]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852e:	4a7d      	ldr	r2, [pc, #500]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008530:	f043 0304 	orr.w	r3, r3, #4
 8008534:	6313      	str	r3, [r2, #48]	@ 0x30
 8008536:	4b7b      	ldr	r3, [pc, #492]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 8008542:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008548:	2302      	movs	r3, #2
 800854a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008550:	2303      	movs	r3, #3
 8008552:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008554:	2308      	movs	r3, #8
 8008556:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008558:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800855c:	4619      	mov	r1, r3
 800855e:	4872      	ldr	r0, [pc, #456]	@ (8008728 <HAL_UART_MspInit+0x240>)
 8008560:	f001 fcb4 	bl	8009ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008564:	e0d8      	b.n	8008718 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART1)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a70      	ldr	r2, [pc, #448]	@ (800872c <HAL_UART_MspInit+0x244>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d12d      	bne.n	80085cc <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008570:	2300      	movs	r3, #0
 8008572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008574:	4b6b      	ldr	r3, [pc, #428]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008578:	4a6a      	ldr	r2, [pc, #424]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 800857a:	f043 0310 	orr.w	r3, r3, #16
 800857e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008580:	4b68      	ldr	r3, [pc, #416]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800858c:	2300      	movs	r3, #0
 800858e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008590:	4b64      	ldr	r3, [pc, #400]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	4a63      	ldr	r2, [pc, #396]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	6313      	str	r3, [r2, #48]	@ 0x30
 800859c:	4b61      	ldr	r3, [pc, #388]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 80085a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ae:	2302      	movs	r3, #2
 80085b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085b6:	2303      	movs	r3, #3
 80085b8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80085ba:	2307      	movs	r3, #7
 80085bc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80085c2:	4619      	mov	r1, r3
 80085c4:	485a      	ldr	r0, [pc, #360]	@ (8008730 <HAL_UART_MspInit+0x248>)
 80085c6:	f001 fc81 	bl	8009ecc <HAL_GPIO_Init>
}
 80085ca:	e0a5      	b.n	8008718 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART2)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a58      	ldr	r2, [pc, #352]	@ (8008734 <HAL_UART_MspInit+0x24c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d134      	bne.n	8008640 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 80085d6:	2300      	movs	r3, #0
 80085d8:	623b      	str	r3, [r7, #32]
 80085da:	4b52      	ldr	r3, [pc, #328]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085de:	4a51      	ldr	r2, [pc, #324]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80085e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80085e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ee:	623b      	str	r3, [r7, #32]
 80085f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085f2:	2300      	movs	r3, #0
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fa:	4a4a      	ldr	r2, [pc, #296]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80085fc:	f043 0301 	orr.w	r3, r3, #1
 8008600:	6313      	str	r3, [r2, #48]	@ 0x30
 8008602:	4b48      	ldr	r3, [pc, #288]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 800860e:	230c      	movs	r3, #12
 8008610:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008612:	2302      	movs	r3, #2
 8008614:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800861a:	2303      	movs	r3, #3
 800861c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800861e:	2307      	movs	r3, #7
 8008620:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008622:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008626:	4619      	mov	r1, r3
 8008628:	4841      	ldr	r0, [pc, #260]	@ (8008730 <HAL_UART_MspInit+0x248>)
 800862a:	f001 fc4f 	bl	8009ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800862e:	2200      	movs	r2, #0
 8008630:	2105      	movs	r1, #5
 8008632:	2026      	movs	r0, #38	@ 0x26
 8008634:	f001 f88e 	bl	8009754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008638:	2026      	movs	r0, #38	@ 0x26
 800863a:	f001 f8a7 	bl	800978c <HAL_NVIC_EnableIRQ>
}
 800863e:	e06b      	b.n	8008718 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART3)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a3c      	ldr	r2, [pc, #240]	@ (8008738 <HAL_UART_MspInit+0x250>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d135      	bne.n	80086b6 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_USART3_CLK_ENABLE();
 800864a:	2300      	movs	r3, #0
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	4b35      	ldr	r3, [pc, #212]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008652:	4a34      	ldr	r2, [pc, #208]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008658:	6413      	str	r3, [r2, #64]	@ 0x40
 800865a:	4b32      	ldr	r3, [pc, #200]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	4b2e      	ldr	r3, [pc, #184]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866e:	4a2d      	ldr	r2, [pc, #180]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008670:	f043 0302 	orr.w	r3, r3, #2
 8008674:	6313      	str	r3, [r2, #48]	@ 0x30
 8008676:	4b2b      	ldr	r3, [pc, #172]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INVERTER_USART3_TX_Pin|INVERTER_USART3_RX_Pin;
 8008682:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008686:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008688:	2302      	movs	r3, #2
 800868a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008690:	2303      	movs	r3, #3
 8008692:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008694:	2307      	movs	r3, #7
 8008696:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008698:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800869c:	4619      	mov	r1, r3
 800869e:	4827      	ldr	r0, [pc, #156]	@ (800873c <HAL_UART_MspInit+0x254>)
 80086a0:	f001 fc14 	bl	8009ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80086a4:	2200      	movs	r2, #0
 80086a6:	2105      	movs	r1, #5
 80086a8:	2027      	movs	r0, #39	@ 0x27
 80086aa:	f001 f853 	bl	8009754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80086ae:	2027      	movs	r0, #39	@ 0x27
 80086b0:	f001 f86c 	bl	800978c <HAL_NVIC_EnableIRQ>
}
 80086b4:	e030      	b.n	8008718 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART6)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a21      	ldr	r2, [pc, #132]	@ (8008740 <HAL_UART_MspInit+0x258>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d12b      	bne.n	8008718 <HAL_UART_MspInit+0x230>
    __HAL_RCC_USART6_CLK_ENABLE();
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	4b17      	ldr	r3, [pc, #92]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80086c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c8:	4a16      	ldr	r2, [pc, #88]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80086ca:	f043 0320 	orr.w	r3, r3, #32
 80086ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80086d0:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80086d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80086e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e4:	4a0f      	ldr	r2, [pc, #60]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80086e6:	f043 0304 	orr.w	r3, r3, #4
 80086ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80086ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008724 <HAL_UART_MspInit+0x23c>)
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 80086f8:	23c0      	movs	r3, #192	@ 0xc0
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fc:	2302      	movs	r3, #2
 80086fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008700:	2300      	movs	r3, #0
 8008702:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008704:	2303      	movs	r3, #3
 8008706:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008708:	2308      	movs	r3, #8
 800870a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800870c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008710:	4619      	mov	r1, r3
 8008712:	4805      	ldr	r0, [pc, #20]	@ (8008728 <HAL_UART_MspInit+0x240>)
 8008714:	f001 fbda 	bl	8009ecc <HAL_GPIO_Init>
}
 8008718:	bf00      	nop
 800871a:	3748      	adds	r7, #72	@ 0x48
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40004c00 	.word	0x40004c00
 8008724:	40023800 	.word	0x40023800
 8008728:	40020800 	.word	0x40020800
 800872c:	40011000 	.word	0x40011000
 8008730:	40020000 	.word	0x40020000
 8008734:	40004400 	.word	0x40004400
 8008738:	40004800 	.word	0x40004800
 800873c:	40020400 	.word	0x40020400
 8008740:	40011400 	.word	0x40011400

08008744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800877c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008748:	f7ff fd78 	bl	800823c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800874c:	480c      	ldr	r0, [pc, #48]	@ (8008780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800874e:	490d      	ldr	r1, [pc, #52]	@ (8008784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008750:	4a0d      	ldr	r2, [pc, #52]	@ (8008788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008754:	e002      	b.n	800875c <LoopCopyDataInit>

08008756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800875a:	3304      	adds	r3, #4

0800875c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800875c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800875e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008760:	d3f9      	bcc.n	8008756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008762:	4a0a      	ldr	r2, [pc, #40]	@ (800878c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008764:	4c0a      	ldr	r4, [pc, #40]	@ (8008790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008768:	e001      	b.n	800876e <LoopFillZerobss>

0800876a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800876a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800876c:	3204      	adds	r2, #4

0800876e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800876e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008770:	d3fb      	bcc.n	800876a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008772:	f009 fa91 	bl	8011c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008776:	f7ff fa2b 	bl	8007bd0 <main>
  bx  lr    
 800877a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800877c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008784:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8008788:	08015640 	.word	0x08015640
  ldr r2, =_sbss
 800878c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8008790:	2000e92c 	.word	0x2000e92c

08008794 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008794:	e7fe      	b.n	8008794 <CAN1_RX0_IRQHandler>
	...

08008798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800879c:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <HAL_Init+0x40>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0d      	ldr	r2, [pc, #52]	@ (80087d8 <HAL_Init+0x40>)
 80087a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <HAL_Init+0x40>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a0a      	ldr	r2, [pc, #40]	@ (80087d8 <HAL_Init+0x40>)
 80087ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087b4:	4b08      	ldr	r3, [pc, #32]	@ (80087d8 <HAL_Init+0x40>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a07      	ldr	r2, [pc, #28]	@ (80087d8 <HAL_Init+0x40>)
 80087ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087c0:	2003      	movs	r0, #3
 80087c2:	f000 ffbc 	bl	800973e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087c6:	200f      	movs	r0, #15
 80087c8:	f7ff fba4 	bl	8007f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087cc:	f7ff fb76 	bl	8007ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40023c00 	.word	0x40023c00

080087dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087e0:	4b06      	ldr	r3, [pc, #24]	@ (80087fc <HAL_IncTick+0x20>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <HAL_IncTick+0x24>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4413      	add	r3, r2
 80087ec:	4a04      	ldr	r2, [pc, #16]	@ (8008800 <HAL_IncTick+0x24>)
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20000058 	.word	0x20000058
 8008800:	20003db8 	.word	0x20003db8

08008804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  return uwTick;
 8008808:	4b03      	ldr	r3, [pc, #12]	@ (8008818 <HAL_GetTick+0x14>)
 800880a:	681b      	ldr	r3, [r3, #0]
}
 800880c:	4618      	mov	r0, r3
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20003db8 	.word	0x20003db8

0800881c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8008820:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <HAL_GetUIDw0+0x14>)
 8008822:	681b      	ldr	r3, [r3, #0]
}
 8008824:	4618      	mov	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	1fff7a10 	.word	0x1fff7a10

08008834 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8008838:	4b03      	ldr	r3, [pc, #12]	@ (8008848 <HAL_GetUIDw1+0x14>)
 800883a:	681b      	ldr	r3, [r3, #0]
}
 800883c:	4618      	mov	r0, r3
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	1fff7a14 	.word	0x1fff7a14

0800884c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8008850:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <HAL_GetUIDw2+0x14>)
 8008852:	681b      	ldr	r3, [r3, #0]
}
 8008854:	4618      	mov	r0, r3
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	1fff7a18 	.word	0x1fff7a18

08008864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e033      	b.n	80088e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887e:	2b00      	cmp	r3, #0
 8008880:	d109      	bne.n	8008896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fe ff8e 	bl	80077a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	f003 0310 	and.w	r3, r3, #16
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d118      	bne.n	80088d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80088aa:	f023 0302 	bic.w	r3, r3, #2
 80088ae:	f043 0202 	orr.w	r2, r3, #2
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fd0c 	bl	80092d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	f043 0201 	orr.w	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80088d2:	e001      	b.n	80088d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <HAL_ADC_Start+0x1a>
 8008902:	2302      	movs	r3, #2
 8008904:	e0b2      	b.n	8008a6c <HAL_ADC_Start+0x180>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	d018      	beq.n	800894e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800892c:	4b52      	ldr	r3, [pc, #328]	@ (8008a78 <HAL_ADC_Start+0x18c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a52      	ldr	r2, [pc, #328]	@ (8008a7c <HAL_ADC_Start+0x190>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	0c9a      	lsrs	r2, r3, #18
 8008938:	4613      	mov	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	4413      	add	r3, r2
 800893e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008940:	e002      	b.n	8008948 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	3b01      	subs	r3, #1
 8008946:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f9      	bne.n	8008942 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	d17a      	bne.n	8008a52 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008960:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008982:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008986:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899a:	d106      	bne.n	80089aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a0:	f023 0206 	bic.w	r2, r3, #6
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80089a8:	e002      	b.n	80089b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80089b8:	4b31      	ldr	r3, [pc, #196]	@ (8008a80 <HAL_ADC_Start+0x194>)
 80089ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80089c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d12a      	bne.n	8008a28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a2b      	ldr	r2, [pc, #172]	@ (8008a84 <HAL_ADC_Start+0x198>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d015      	beq.n	8008a08 <HAL_ADC_Start+0x11c>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a29      	ldr	r2, [pc, #164]	@ (8008a88 <HAL_ADC_Start+0x19c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d105      	bne.n	80089f2 <HAL_ADC_Start+0x106>
 80089e6:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <HAL_ADC_Start+0x194>)
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a25      	ldr	r2, [pc, #148]	@ (8008a8c <HAL_ADC_Start+0x1a0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d136      	bne.n	8008a6a <HAL_ADC_Start+0x17e>
 80089fc:	4b20      	ldr	r3, [pc, #128]	@ (8008a80 <HAL_ADC_Start+0x194>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f003 0310 	and.w	r3, r3, #16
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d130      	bne.n	8008a6a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d129      	bne.n	8008a6a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008a24:	609a      	str	r2, [r3, #8]
 8008a26:	e020      	b.n	8008a6a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a15      	ldr	r2, [pc, #84]	@ (8008a84 <HAL_ADC_Start+0x198>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d11b      	bne.n	8008a6a <HAL_ADC_Start+0x17e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d114      	bne.n	8008a6a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008a4e:	609a      	str	r2, [r3, #8]
 8008a50:	e00b      	b.n	8008a6a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a56:	f043 0210 	orr.w	r2, r3, #16
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a62:	f043 0201 	orr.w	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	20000050 	.word	0x20000050
 8008a7c:	431bde83 	.word	0x431bde83
 8008a80:	40012300 	.word	0x40012300
 8008a84:	40012000 	.word	0x40012000
 8008a88:	40012100 	.word	0x40012100
 8008a8c:	40012200 	.word	0x40012200

08008a90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d101      	bne.n	8008aa6 <HAL_ADC_Stop+0x16>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e021      	b.n	8008aea <HAL_ADC_Stop+0x5a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	f043 0201 	orr.w	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b12:	d113      	bne.n	8008b3c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b22:	d10b      	bne.n	8008b3c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e063      	b.n	8008c04 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b3c:	f7ff fe62 	bl	8008804 <HAL_GetTick>
 8008b40:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008b42:	e021      	b.n	8008b88 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d01d      	beq.n	8008b88 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_ADC_PollForConversion+0x6c>
 8008b52:	f7ff fe57 	bl	8008804 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d212      	bcs.n	8008b88 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d00b      	beq.n	8008b88 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b74:	f043 0204 	orr.w	r2, r3, #4
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e03d      	b.n	8008c04 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d1d6      	bne.n	8008b44 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f06f 0212 	mvn.w	r2, #18
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d123      	bne.n	8008c02 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11f      	bne.n	8008c02 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d111      	bne.n	8008c02 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d105      	bne.n	8008c02 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	f043 0201 	orr.w	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d049      	beq.n	8008cd6 <HAL_ADC_IRQHandler+0xca>
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d046      	beq.n	8008cd6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d105      	bne.n	8008c60 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d12b      	bne.n	8008cc6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d127      	bne.n	8008cc6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d006      	beq.n	8008c92 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d119      	bne.n	8008cc6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0220 	bic.w	r2, r2, #32
 8008ca0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d105      	bne.n	8008cc6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cbe:	f043 0201 	orr.w	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7f8 fdc8 	bl	800185c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0212 	mvn.w	r2, #18
 8008cd4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d057      	beq.n	8008d9c <HAL_ADC_IRQHandler+0x190>
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d054      	beq.n	8008d9c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf6:	f003 0310 	and.w	r3, r3, #16
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d105      	bne.n	8008d0a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d139      	bne.n	8008d8c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d006      	beq.n	8008d34 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d12b      	bne.n	8008d8c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d124      	bne.n	8008d8c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11d      	bne.n	8008d8c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d119      	bne.n	8008d8c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d66:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d105      	bne.n	8008d8c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d84:	f043 0201 	orr.w	r2, r3, #1
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc1f 	bl	80095d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f06f 020c 	mvn.w	r2, #12
 8008d9a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008daa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d017      	beq.n	8008de2 <HAL_ADC_IRQHandler+0x1d6>
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d014      	beq.n	8008de2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10d      	bne.n	8008de2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f947 	bl	8009066 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0201 	mvn.w	r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008df0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d015      	beq.n	8008e24 <HAL_ADC_IRQHandler+0x218>
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d012      	beq.n	8008e24 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0220 	mvn.w	r2, #32
 8008e12:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f930 	bl	800907a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f06f 0220 	mvn.w	r2, #32
 8008e22:	601a      	str	r2, [r3, #0]
  }
}
 8008e24:	bf00      	nop
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_ADC_Start_DMA+0x1e>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e0e9      	b.n	800901e <HAL_ADC_Start_DMA+0x1f2>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d018      	beq.n	8008e92 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008e70:	4b6d      	ldr	r3, [pc, #436]	@ (8009028 <HAL_ADC_Start_DMA+0x1fc>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a6d      	ldr	r2, [pc, #436]	@ (800902c <HAL_ADC_Start_DMA+0x200>)
 8008e76:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7a:	0c9a      	lsrs	r2, r3, #18
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	4413      	add	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8008e84:	e002      	b.n	8008e8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f9      	bne.n	8008e86 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea0:	d107      	bne.n	8008eb2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008eb0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	f040 80a1 	bne.w	8009004 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008eca:	f023 0301 	bic.w	r3, r3, #1
 8008ece:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008eec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f00:	d106      	bne.n	8008f10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f06:	f023 0206 	bic.w	r2, r3, #6
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008f0e:	e002      	b.n	8008f16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f1e:	4b44      	ldr	r3, [pc, #272]	@ (8009030 <HAL_ADC_Start_DMA+0x204>)
 8008f20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f26:	4a43      	ldr	r2, [pc, #268]	@ (8009034 <HAL_ADC_Start_DMA+0x208>)
 8008f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2e:	4a42      	ldr	r2, [pc, #264]	@ (8009038 <HAL_ADC_Start_DMA+0x20c>)
 8008f30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f36:	4a41      	ldr	r2, [pc, #260]	@ (800903c <HAL_ADC_Start_DMA+0x210>)
 8008f38:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008f42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008f52:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f62:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	334c      	adds	r3, #76	@ 0x4c
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f000 fcc6 	bl	8009904 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f003 031f 	and.w	r3, r3, #31
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d12a      	bne.n	8008fda <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a2d      	ldr	r2, [pc, #180]	@ (8009040 <HAL_ADC_Start_DMA+0x214>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d015      	beq.n	8008fba <HAL_ADC_Start_DMA+0x18e>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a2c      	ldr	r2, [pc, #176]	@ (8009044 <HAL_ADC_Start_DMA+0x218>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d105      	bne.n	8008fa4 <HAL_ADC_Start_DMA+0x178>
 8008f98:	4b25      	ldr	r3, [pc, #148]	@ (8009030 <HAL_ADC_Start_DMA+0x204>)
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a27      	ldr	r2, [pc, #156]	@ (8009048 <HAL_ADC_Start_DMA+0x21c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d136      	bne.n	800901c <HAL_ADC_Start_DMA+0x1f0>
 8008fae:	4b20      	ldr	r3, [pc, #128]	@ (8009030 <HAL_ADC_Start_DMA+0x204>)
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f003 0310 	and.w	r3, r3, #16
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d130      	bne.n	800901c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d129      	bne.n	800901c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	e020      	b.n	800901c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a18      	ldr	r2, [pc, #96]	@ (8009040 <HAL_ADC_Start_DMA+0x214>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d11b      	bne.n	800901c <HAL_ADC_Start_DMA+0x1f0>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d114      	bne.n	800901c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009000:	609a      	str	r2, [r3, #8]
 8009002:	e00b      	b.n	800901c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009008:	f043 0210 	orr.w	r2, r3, #16
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009014:	f043 0201 	orr.w	r2, r3, #1
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000050 	.word	0x20000050
 800902c:	431bde83 	.word	0x431bde83
 8009030:	40012300 	.word	0x40012300
 8009034:	080094cd 	.word	0x080094cd
 8009038:	08009587 	.word	0x08009587
 800903c:	080095a3 	.word	0x080095a3
 8009040:	40012000 	.word	0x40012000
 8009044:	40012100 	.word	0x40012100
 8009048:	40012200 	.word	0x40012200

0800904c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_ADC_ConfigChannel+0x1c>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e105      	b.n	80092b8 <HAL_ADC_ConfigChannel+0x228>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b09      	cmp	r3, #9
 80090ba:	d925      	bls.n	8009108 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68d9      	ldr	r1, [r3, #12]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	4613      	mov	r3, r2
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4413      	add	r3, r2
 80090d0:	3b1e      	subs	r3, #30
 80090d2:	2207      	movs	r2, #7
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	43da      	mvns	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	400a      	ands	r2, r1
 80090e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68d9      	ldr	r1, [r3, #12]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	4618      	mov	r0, r3
 80090f4:	4603      	mov	r3, r0
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	4403      	add	r3, r0
 80090fa:	3b1e      	subs	r3, #30
 80090fc:	409a      	lsls	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	60da      	str	r2, [r3, #12]
 8009106:	e022      	b.n	800914e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6919      	ldr	r1, [r3, #16]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	4613      	mov	r3, r2
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	4413      	add	r3, r2
 800911c:	2207      	movs	r2, #7
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	43da      	mvns	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	400a      	ands	r2, r1
 800912a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6919      	ldr	r1, [r3, #16]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	4618      	mov	r0, r3
 800913e:	4603      	mov	r3, r0
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	4403      	add	r3, r0
 8009144:	409a      	lsls	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d824      	bhi.n	80091a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	3b05      	subs	r3, #5
 8009168:	221f      	movs	r2, #31
 800916a:	fa02 f303 	lsl.w	r3, r2, r3
 800916e:	43da      	mvns	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	400a      	ands	r2, r1
 8009176:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	4618      	mov	r0, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	3b05      	subs	r3, #5
 8009192:	fa00 f203 	lsl.w	r2, r0, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	635a      	str	r2, [r3, #52]	@ 0x34
 800919e:	e04c      	b.n	800923a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b0c      	cmp	r3, #12
 80091a6:	d824      	bhi.n	80091f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	3b23      	subs	r3, #35	@ 0x23
 80091ba:	221f      	movs	r2, #31
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	43da      	mvns	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	400a      	ands	r2, r1
 80091c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	4618      	mov	r0, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	3b23      	subs	r3, #35	@ 0x23
 80091e4:	fa00 f203 	lsl.w	r2, r0, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80091f0:	e023      	b.n	800923a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	3b41      	subs	r3, #65	@ 0x41
 8009204:	221f      	movs	r2, #31
 8009206:	fa02 f303 	lsl.w	r3, r2, r3
 800920a:	43da      	mvns	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	400a      	ands	r2, r1
 8009212:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	b29b      	uxth	r3, r3
 8009220:	4618      	mov	r0, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	3b41      	subs	r3, #65	@ 0x41
 800922e:	fa00 f203 	lsl.w	r2, r0, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800923a:	4b22      	ldr	r3, [pc, #136]	@ (80092c4 <HAL_ADC_ConfigChannel+0x234>)
 800923c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a21      	ldr	r2, [pc, #132]	@ (80092c8 <HAL_ADC_ConfigChannel+0x238>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d109      	bne.n	800925c <HAL_ADC_ConfigChannel+0x1cc>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b12      	cmp	r3, #18
 800924e:	d105      	bne.n	800925c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a19      	ldr	r2, [pc, #100]	@ (80092c8 <HAL_ADC_ConfigChannel+0x238>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d123      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x21e>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b10      	cmp	r3, #16
 800926c:	d003      	beq.n	8009276 <HAL_ADC_ConfigChannel+0x1e6>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b11      	cmp	r3, #17
 8009274:	d11b      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b10      	cmp	r3, #16
 8009288:	d111      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800928a:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <HAL_ADC_ConfigChannel+0x23c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a10      	ldr	r2, [pc, #64]	@ (80092d0 <HAL_ADC_ConfigChannel+0x240>)
 8009290:	fba2 2303 	umull	r2, r3, r2, r3
 8009294:	0c9a      	lsrs	r2, r3, #18
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80092a0:	e002      	b.n	80092a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1f9      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	40012300 	.word	0x40012300
 80092c8:	40012000 	.word	0x40012000
 80092cc:	20000050 	.word	0x20000050
 80092d0:	431bde83 	.word	0x431bde83

080092d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092dc:	4b79      	ldr	r3, [pc, #484]	@ (80094c4 <ADC_Init+0x1f0>)
 80092de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	431a      	orrs	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6859      	ldr	r1, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	021a      	lsls	r2, r3, #8
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800932c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6859      	ldr	r1, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689a      	ldr	r2, [r3, #8]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800934e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6899      	ldr	r1, [r3, #8]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009366:	4a58      	ldr	r2, [pc, #352]	@ (80094c8 <ADC_Init+0x1f4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d022      	beq.n	80093b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800937a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6899      	ldr	r1, [r3, #8]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800939c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6899      	ldr	r1, [r3, #8]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	609a      	str	r2, [r3, #8]
 80093b0:	e00f      	b.n	80093d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80093c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80093d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0202 	bic.w	r2, r2, #2
 80093e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6899      	ldr	r1, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7e1b      	ldrb	r3, [r3, #24]
 80093ec:	005a      	lsls	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01b      	beq.n	8009438 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800940e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800941e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6859      	ldr	r1, [r3, #4]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942a:	3b01      	subs	r3, #1
 800942c:	035a      	lsls	r2, r3, #13
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	605a      	str	r2, [r3, #4]
 8009436:	e007      	b.n	8009448 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009446:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	3b01      	subs	r3, #1
 8009464:	051a      	lsls	r2, r3, #20
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689a      	ldr	r2, [r3, #8]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800947c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6899      	ldr	r1, [r3, #8]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800948a:	025a      	lsls	r2, r3, #9
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6899      	ldr	r1, [r3, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	029a      	lsls	r2, r3, #10
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]
}
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	40012300 	.word	0x40012300
 80094c8:	0f000001 	.word	0x0f000001

080094cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d13c      	bne.n	8009560 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d12b      	bne.n	8009558 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009504:	2b00      	cmp	r3, #0
 8009506:	d127      	bne.n	8009558 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009520:	2b00      	cmp	r3, #0
 8009522:	d119      	bne.n	8009558 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0220 	bic.w	r2, r2, #32
 8009532:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d105      	bne.n	8009558 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009550:	f043 0201 	orr.w	r2, r3, #1
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7f8 f97f 	bl	800185c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800955e:	e00e      	b.n	800957e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009564:	f003 0310 	and.w	r3, r3, #16
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff fd84 	bl	800907a <HAL_ADC_ErrorCallback>
}
 8009572:	e004      	b.n	800957e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	4798      	blx	r3
}
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009592:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7f8 f9ad 	bl	80018f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2240      	movs	r2, #64	@ 0x40
 80095b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ba:	f043 0204 	orr.w	r2, r3, #4
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fd59 	bl	800907a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <__NVIC_SetPriorityGrouping+0x44>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009600:	4013      	ands	r3, r2
 8009602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800960c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009616:	4a04      	ldr	r2, [pc, #16]	@ (8009628 <__NVIC_SetPriorityGrouping+0x44>)
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	60d3      	str	r3, [r2, #12]
}
 800961c:	bf00      	nop
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	e000ed00 	.word	0xe000ed00

0800962c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <__NVIC_GetPriorityGrouping+0x18>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	f003 0307 	and.w	r3, r3, #7
}
 800963a:	4618      	mov	r0, r3
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	e000ed00 	.word	0xe000ed00

08009648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009656:	2b00      	cmp	r3, #0
 8009658:	db0b      	blt.n	8009672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	f003 021f 	and.w	r2, r3, #31
 8009660:	4907      	ldr	r1, [pc, #28]	@ (8009680 <__NVIC_EnableIRQ+0x38>)
 8009662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	2001      	movs	r0, #1
 800966a:	fa00 f202 	lsl.w	r2, r0, r2
 800966e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	e000e100 	.word	0xe000e100

08009684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	6039      	str	r1, [r7, #0]
 800968e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009694:	2b00      	cmp	r3, #0
 8009696:	db0a      	blt.n	80096ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	b2da      	uxtb	r2, r3
 800969c:	490c      	ldr	r1, [pc, #48]	@ (80096d0 <__NVIC_SetPriority+0x4c>)
 800969e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a2:	0112      	lsls	r2, r2, #4
 80096a4:	b2d2      	uxtb	r2, r2
 80096a6:	440b      	add	r3, r1
 80096a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80096ac:	e00a      	b.n	80096c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	4908      	ldr	r1, [pc, #32]	@ (80096d4 <__NVIC_SetPriority+0x50>)
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	f003 030f 	and.w	r3, r3, #15
 80096ba:	3b04      	subs	r3, #4
 80096bc:	0112      	lsls	r2, r2, #4
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	440b      	add	r3, r1
 80096c2:	761a      	strb	r2, [r3, #24]
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	e000e100 	.word	0xe000e100
 80096d4:	e000ed00 	.word	0xe000ed00

080096d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096d8:	b480      	push	{r7}
 80096da:	b089      	sub	sp, #36	@ 0x24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f1c3 0307 	rsb	r3, r3, #7
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	bf28      	it	cs
 80096f6:	2304      	movcs	r3, #4
 80096f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	3304      	adds	r3, #4
 80096fe:	2b06      	cmp	r3, #6
 8009700:	d902      	bls.n	8009708 <NVIC_EncodePriority+0x30>
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	3b03      	subs	r3, #3
 8009706:	e000      	b.n	800970a <NVIC_EncodePriority+0x32>
 8009708:	2300      	movs	r3, #0
 800970a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800970c:	f04f 32ff 	mov.w	r2, #4294967295
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	fa02 f303 	lsl.w	r3, r2, r3
 8009716:	43da      	mvns	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	401a      	ands	r2, r3
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009720:	f04f 31ff 	mov.w	r1, #4294967295
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	fa01 f303 	lsl.w	r3, r1, r3
 800972a:	43d9      	mvns	r1, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009730:	4313      	orrs	r3, r2
         );
}
 8009732:	4618      	mov	r0, r3
 8009734:	3724      	adds	r7, #36	@ 0x24
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff ff4c 	bl	80095e4 <__NVIC_SetPriorityGrouping>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009766:	f7ff ff61 	bl	800962c <__NVIC_GetPriorityGrouping>
 800976a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	6978      	ldr	r0, [r7, #20]
 8009772:	f7ff ffb1 	bl	80096d8 <NVIC_EncodePriority>
 8009776:	4602      	mov	r2, r0
 8009778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff ff80 	bl	8009684 <__NVIC_SetPriority>
}
 8009784:	bf00      	nop
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff ff54 	bl	8009648 <__NVIC_EnableIRQ>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80097b4:	f7ff f826 	bl	8008804 <HAL_GetTick>
 80097b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e099      	b.n	80098f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80097e4:	e00f      	b.n	8009806 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80097e6:	f7ff f80d 	bl	8008804 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b05      	cmp	r3, #5
 80097f2:	d908      	bls.n	8009806 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2203      	movs	r2, #3
 80097fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e078      	b.n	80098f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e8      	bne.n	80097e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	4b38      	ldr	r3, [pc, #224]	@ (8009900 <HAL_DMA_Init+0x158>)
 8009820:	4013      	ands	r3, r2
 8009822:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800983e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800984a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4313      	orrs	r3, r2
 8009856:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800985c:	2b04      	cmp	r3, #4
 800985e:	d107      	bne.n	8009870 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009868:	4313      	orrs	r3, r2
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0307 	bic.w	r3, r3, #7
 8009886:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009896:	2b04      	cmp	r3, #4
 8009898:	d117      	bne.n	80098ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fa91 	bl	8009dd4 <DMA_CheckFifoParam>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2240      	movs	r2, #64	@ 0x40
 80098bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80098c6:	2301      	movs	r3, #1
 80098c8:	e016      	b.n	80098f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa48 	bl	8009d68 <DMA_CalcBaseAndBitshift>
 80098d8:	4603      	mov	r3, r0
 80098da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098e0:	223f      	movs	r2, #63	@ 0x3f
 80098e2:	409a      	lsls	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	f010803f 	.word	0xf010803f

08009904 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_DMA_Start_IT+0x26>
 8009926:	2302      	movs	r3, #2
 8009928:	e040      	b.n	80099ac <HAL_DMA_Start_IT+0xa8>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b01      	cmp	r3, #1
 800993c:	d12f      	bne.n	800999e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2202      	movs	r2, #2
 8009942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	68b9      	ldr	r1, [r7, #8]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f9da 	bl	8009d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800995c:	223f      	movs	r2, #63	@ 0x3f
 800995e:	409a      	lsls	r2, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0216 	orr.w	r2, r2, #22
 8009972:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0208 	orr.w	r2, r2, #8
 800998a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	e005      	b.n	80099aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80099a6:	2302      	movs	r3, #2
 80099a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d004      	beq.n	80099d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2280      	movs	r2, #128	@ 0x80
 80099cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e00c      	b.n	80099ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2205      	movs	r2, #5
 80099d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0201 	bic.w	r2, r2, #1
 80099e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009a04:	4b8e      	ldr	r3, [pc, #568]	@ (8009c40 <HAL_DMA_IRQHandler+0x248>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a8e      	ldr	r2, [pc, #568]	@ (8009c44 <HAL_DMA_IRQHandler+0x24c>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	0a9b      	lsrs	r3, r3, #10
 8009a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a22:	2208      	movs	r2, #8
 8009a24:	409a      	lsls	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4013      	ands	r3, r2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d01a      	beq.n	8009a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d013      	beq.n	8009a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0204 	bic.w	r2, r2, #4
 8009a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a50:	2208      	movs	r2, #8
 8009a52:	409a      	lsls	r2, r3
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5c:	f043 0201 	orr.w	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a68:	2201      	movs	r2, #1
 8009a6a:	409a      	lsls	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d012      	beq.n	8009a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a86:	2201      	movs	r2, #1
 8009a88:	409a      	lsls	r2, r3
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a92:	f043 0202 	orr.w	r2, r3, #2
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	409a      	lsls	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d012      	beq.n	8009ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009abc:	2204      	movs	r2, #4
 8009abe:	409a      	lsls	r2, r3
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac8:	f043 0204 	orr.w	r2, r3, #4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ad4:	2210      	movs	r2, #16
 8009ad6:	409a      	lsls	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d043      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0308 	and.w	r3, r3, #8
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d03c      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009af2:	2210      	movs	r2, #16
 8009af4:	409a      	lsls	r2, r3
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d018      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d108      	bne.n	8009b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d024      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3
 8009b26:	e01f      	b.n	8009b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01b      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
 8009b38:	e016      	b.n	8009b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0208 	bic.w	r2, r2, #8
 8009b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	409a      	lsls	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4013      	ands	r3, r2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 808f 	beq.w	8009c98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 8087 	beq.w	8009c98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b8e:	2220      	movs	r2, #32
 8009b90:	409a      	lsls	r2, r3
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d136      	bne.n	8009c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0216 	bic.w	r2, r2, #22
 8009bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	695a      	ldr	r2, [r3, #20]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <HAL_DMA_IRQHandler+0x1da>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d007      	beq.n	8009be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0208 	bic.w	r2, r2, #8
 8009be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009be6:	223f      	movs	r2, #63	@ 0x3f
 8009be8:	409a      	lsls	r2, r3
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d07e      	beq.n	8009d04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
        }
        return;
 8009c0e:	e079      	b.n	8009d04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01d      	beq.n	8009c5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10d      	bne.n	8009c48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d031      	beq.n	8009c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	4798      	blx	r3
 8009c3c:	e02c      	b.n	8009c98 <HAL_DMA_IRQHandler+0x2a0>
 8009c3e:	bf00      	nop
 8009c40:	20000050 	.word	0x20000050
 8009c44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d023      	beq.n	8009c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	4798      	blx	r3
 8009c58:	e01e      	b.n	8009c98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10f      	bne.n	8009c88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0210 	bic.w	r2, r2, #16
 8009c76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d032      	beq.n	8009d06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d022      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2205      	movs	r2, #5
 8009cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 0201 	bic.w	r2, r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60bb      	str	r3, [r7, #8]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d307      	bcc.n	8009ce0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1f2      	bne.n	8009cc4 <HAL_DMA_IRQHandler+0x2cc>
 8009cde:	e000      	b.n	8009ce2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009ce0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	4798      	blx	r3
 8009d02:	e000      	b.n	8009d06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009d04:	bf00      	nop
    }
  }
}
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	2b40      	cmp	r3, #64	@ 0x40
 8009d38:	d108      	bne.n	8009d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009d4a:	e007      	b.n	8009d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	3b10      	subs	r3, #16
 8009d78:	4a14      	ldr	r2, [pc, #80]	@ (8009dcc <DMA_CalcBaseAndBitshift+0x64>)
 8009d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7e:	091b      	lsrs	r3, r3, #4
 8009d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009d82:	4a13      	ldr	r2, [pc, #76]	@ (8009dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d909      	bls.n	8009daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009d9e:	f023 0303 	bic.w	r3, r3, #3
 8009da2:	1d1a      	adds	r2, r3, #4
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	659a      	str	r2, [r3, #88]	@ 0x58
 8009da8:	e007      	b.n	8009dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009db2:	f023 0303 	bic.w	r3, r3, #3
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	aaaaaaab 	.word	0xaaaaaaab
 8009dd0:	08014934 	.word	0x08014934

08009dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d11f      	bne.n	8009e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d856      	bhi.n	8009ea2 <DMA_CheckFifoParam+0xce>
 8009df4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dfc <DMA_CheckFifoParam+0x28>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009e0d 	.word	0x08009e0d
 8009e00:	08009e1f 	.word	0x08009e1f
 8009e04:	08009e0d 	.word	0x08009e0d
 8009e08:	08009ea3 	.word	0x08009ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d046      	beq.n	8009ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e1c:	e043      	b.n	8009ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009e26:	d140      	bne.n	8009eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e2c:	e03d      	b.n	8009eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e36:	d121      	bne.n	8009e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d837      	bhi.n	8009eae <DMA_CheckFifoParam+0xda>
 8009e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <DMA_CheckFifoParam+0x70>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e5b 	.word	0x08009e5b
 8009e4c:	08009e55 	.word	0x08009e55
 8009e50:	08009e6d 	.word	0x08009e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
      break;
 8009e58:	e030      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d025      	beq.n	8009eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e6a:	e022      	b.n	8009eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009e74:	d11f      	bne.n	8009eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009e7a:	e01c      	b.n	8009eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d903      	bls.n	8009e8a <DMA_CheckFifoParam+0xb6>
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d003      	beq.n	8009e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009e88:	e018      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8e:	e015      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00e      	beq.n	8009eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea0:	e00b      	b.n	8009eba <DMA_CheckFifoParam+0xe6>
      break;
 8009ea2:	bf00      	nop
 8009ea4:	e00a      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      break;
 8009ea6:	bf00      	nop
 8009ea8:	e008      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      break;
 8009eaa:	bf00      	nop
 8009eac:	e006      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      break;
 8009eae:	bf00      	nop
 8009eb0:	e004      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      break;
 8009eb2:	bf00      	nop
 8009eb4:	e002      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8009eb6:	bf00      	nop
 8009eb8:	e000      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
      break;
 8009eba:	bf00      	nop
    }
  } 
  
  return status; 
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop

08009ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b089      	sub	sp, #36	@ 0x24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	e16b      	b.n	800a1c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009ee8:	2201      	movs	r2, #1
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	f040 815a 	bne.w	800a1ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d005      	beq.n	8009f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d130      	bne.n	8009f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	2203      	movs	r2, #3
 8009f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2e:	43db      	mvns	r3, r3
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	4013      	ands	r3, r2
 8009f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69ba      	ldr	r2, [r7, #24]
 8009f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009f54:	2201      	movs	r2, #1
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	43db      	mvns	r3, r3
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	4013      	ands	r3, r2
 8009f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	091b      	lsrs	r3, r3, #4
 8009f6a:	f003 0201 	and.w	r2, r3, #1
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d017      	beq.n	8009fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	2203      	movs	r2, #3
 8009f98:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9c:	43db      	mvns	r3, r3
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d123      	bne.n	800a010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	08da      	lsrs	r2, r3, #3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3208      	adds	r2, #8
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	220f      	movs	r2, #15
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	08da      	lsrs	r2, r3, #3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3208      	adds	r2, #8
 800a00a:	69b9      	ldr	r1, [r7, #24]
 800a00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	2203      	movs	r2, #3
 800a01c:	fa02 f303 	lsl.w	r3, r2, r3
 800a020:	43db      	mvns	r3, r3
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	4013      	ands	r3, r2
 800a026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f003 0203 	and.w	r2, r3, #3
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 80b4 	beq.w	800a1ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	4b60      	ldr	r3, [pc, #384]	@ (800a1d8 <HAL_GPIO_Init+0x30c>)
 800a058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a05a:	4a5f      	ldr	r2, [pc, #380]	@ (800a1d8 <HAL_GPIO_Init+0x30c>)
 800a05c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a060:	6453      	str	r3, [r2, #68]	@ 0x44
 800a062:	4b5d      	ldr	r3, [pc, #372]	@ (800a1d8 <HAL_GPIO_Init+0x30c>)
 800a064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a06e:	4a5b      	ldr	r2, [pc, #364]	@ (800a1dc <HAL_GPIO_Init+0x310>)
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	089b      	lsrs	r3, r3, #2
 800a074:	3302      	adds	r3, #2
 800a076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a07a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	220f      	movs	r2, #15
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	4013      	ands	r3, r2
 800a090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a52      	ldr	r2, [pc, #328]	@ (800a1e0 <HAL_GPIO_Init+0x314>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d02b      	beq.n	800a0f2 <HAL_GPIO_Init+0x226>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a51      	ldr	r2, [pc, #324]	@ (800a1e4 <HAL_GPIO_Init+0x318>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d025      	beq.n	800a0ee <HAL_GPIO_Init+0x222>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a50      	ldr	r2, [pc, #320]	@ (800a1e8 <HAL_GPIO_Init+0x31c>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d01f      	beq.n	800a0ea <HAL_GPIO_Init+0x21e>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a4f      	ldr	r2, [pc, #316]	@ (800a1ec <HAL_GPIO_Init+0x320>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d019      	beq.n	800a0e6 <HAL_GPIO_Init+0x21a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a4e      	ldr	r2, [pc, #312]	@ (800a1f0 <HAL_GPIO_Init+0x324>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d013      	beq.n	800a0e2 <HAL_GPIO_Init+0x216>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a4d      	ldr	r2, [pc, #308]	@ (800a1f4 <HAL_GPIO_Init+0x328>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00d      	beq.n	800a0de <HAL_GPIO_Init+0x212>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a4c      	ldr	r2, [pc, #304]	@ (800a1f8 <HAL_GPIO_Init+0x32c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d007      	beq.n	800a0da <HAL_GPIO_Init+0x20e>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a4b      	ldr	r2, [pc, #300]	@ (800a1fc <HAL_GPIO_Init+0x330>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d101      	bne.n	800a0d6 <HAL_GPIO_Init+0x20a>
 800a0d2:	2307      	movs	r3, #7
 800a0d4:	e00e      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	e00c      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0da:	2306      	movs	r3, #6
 800a0dc:	e00a      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0de:	2305      	movs	r3, #5
 800a0e0:	e008      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	e006      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e004      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e002      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e000      	b.n	800a0f4 <HAL_GPIO_Init+0x228>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	69fa      	ldr	r2, [r7, #28]
 800a0f6:	f002 0203 	and.w	r2, r2, #3
 800a0fa:	0092      	lsls	r2, r2, #2
 800a0fc:	4093      	lsls	r3, r2
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	4313      	orrs	r3, r2
 800a102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a104:	4935      	ldr	r1, [pc, #212]	@ (800a1dc <HAL_GPIO_Init+0x310>)
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	089b      	lsrs	r3, r3, #2
 800a10a:	3302      	adds	r3, #2
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a112:	4b3b      	ldr	r3, [pc, #236]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	43db      	mvns	r3, r3
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	4013      	ands	r3, r2
 800a120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a136:	4a32      	ldr	r2, [pc, #200]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a13c:	4b30      	ldr	r3, [pc, #192]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	43db      	mvns	r3, r3
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	4013      	ands	r3, r2
 800a14a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a160:	4a27      	ldr	r2, [pc, #156]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a166:	4b26      	ldr	r3, [pc, #152]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	43db      	mvns	r3, r3
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	4013      	ands	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a18a:	4a1d      	ldr	r2, [pc, #116]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a190:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	43db      	mvns	r3, r3
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	4013      	ands	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a1b4:	4a12      	ldr	r2, [pc, #72]	@ (800a200 <HAL_GPIO_Init+0x334>)
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	61fb      	str	r3, [r7, #28]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	2b0f      	cmp	r3, #15
 800a1c4:	f67f ae90 	bls.w	8009ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a1c8:	bf00      	nop
 800a1ca:	bf00      	nop
 800a1cc:	3724      	adds	r7, #36	@ 0x24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	40023800 	.word	0x40023800
 800a1dc:	40013800 	.word	0x40013800
 800a1e0:	40020000 	.word	0x40020000
 800a1e4:	40020400 	.word	0x40020400
 800a1e8:	40020800 	.word	0x40020800
 800a1ec:	40020c00 	.word	0x40020c00
 800a1f0:	40021000 	.word	0x40021000
 800a1f4:	40021400 	.word	0x40021400
 800a1f8:	40021800 	.word	0x40021800
 800a1fc:	40021c00 	.word	0x40021c00
 800a200:	40013c00 	.word	0x40013c00

0800a204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	807b      	strh	r3, [r7, #2]
 800a210:	4613      	mov	r3, r2
 800a212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a214:	787b      	ldrb	r3, [r7, #1]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a21a:	887a      	ldrh	r2, [r7, #2]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a220:	e003      	b.n	800a22a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a222:	887b      	ldrh	r3, [r7, #2]
 800a224:	041a      	lsls	r2, r3, #16
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	619a      	str	r2, [r3, #24]
}
 800a22a:	bf00      	nop
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a236:	b480      	push	{r7}
 800a238:	b085      	sub	sp, #20
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a248:	887a      	ldrh	r2, [r7, #2]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4013      	ands	r3, r2
 800a24e:	041a      	lsls	r2, r3, #16
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	43d9      	mvns	r1, r3
 800a254:	887b      	ldrh	r3, [r7, #2]
 800a256:	400b      	ands	r3, r1
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	619a      	str	r2, [r3, #24]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e12b      	b.n	800a4d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7fd fc54 	bl	8007b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2224      	movs	r2, #36	@ 0x24
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 0201 	bic.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a2d0:	f001 fd24 	bl	800bd1c <HAL_RCC_GetPCLK1Freq>
 800a2d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	4a81      	ldr	r2, [pc, #516]	@ (800a4e0 <HAL_I2C_Init+0x274>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d807      	bhi.n	800a2f0 <HAL_I2C_Init+0x84>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4a80      	ldr	r2, [pc, #512]	@ (800a4e4 <HAL_I2C_Init+0x278>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	bf94      	ite	ls
 800a2e8:	2301      	movls	r3, #1
 800a2ea:	2300      	movhi	r3, #0
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	e006      	b.n	800a2fe <HAL_I2C_Init+0x92>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4a7d      	ldr	r2, [pc, #500]	@ (800a4e8 <HAL_I2C_Init+0x27c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	bf94      	ite	ls
 800a2f8:	2301      	movls	r3, #1
 800a2fa:	2300      	movhi	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e0e7      	b.n	800a4d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4a78      	ldr	r2, [pc, #480]	@ (800a4ec <HAL_I2C_Init+0x280>)
 800a30a:	fba2 2303 	umull	r2, r3, r2, r3
 800a30e:	0c9b      	lsrs	r3, r3, #18
 800a310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4a6a      	ldr	r2, [pc, #424]	@ (800a4e0 <HAL_I2C_Init+0x274>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d802      	bhi.n	800a340 <HAL_I2C_Init+0xd4>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	3301      	adds	r3, #1
 800a33e:	e009      	b.n	800a354 <HAL_I2C_Init+0xe8>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a346:	fb02 f303 	mul.w	r3, r2, r3
 800a34a:	4a69      	ldr	r2, [pc, #420]	@ (800a4f0 <HAL_I2C_Init+0x284>)
 800a34c:	fba2 2303 	umull	r2, r3, r2, r3
 800a350:	099b      	lsrs	r3, r3, #6
 800a352:	3301      	adds	r3, #1
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	430b      	orrs	r3, r1
 800a35a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a366:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	495c      	ldr	r1, [pc, #368]	@ (800a4e0 <HAL_I2C_Init+0x274>)
 800a370:	428b      	cmp	r3, r1
 800a372:	d819      	bhi.n	800a3a8 <HAL_I2C_Init+0x13c>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	1e59      	subs	r1, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a382:	1c59      	adds	r1, r3, #1
 800a384:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a388:	400b      	ands	r3, r1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00a      	beq.n	800a3a4 <HAL_I2C_Init+0x138>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1e59      	subs	r1, r3, #1
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	fbb1 f3f3 	udiv	r3, r1, r3
 800a39c:	3301      	adds	r3, #1
 800a39e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3a2:	e051      	b.n	800a448 <HAL_I2C_Init+0x1dc>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	e04f      	b.n	800a448 <HAL_I2C_Init+0x1dc>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d111      	bne.n	800a3d4 <HAL_I2C_Init+0x168>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	1e58      	subs	r0, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6859      	ldr	r1, [r3, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	440b      	add	r3, r1
 800a3be:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	bf0c      	ite	eq
 800a3cc:	2301      	moveq	r3, #1
 800a3ce:	2300      	movne	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	e012      	b.n	800a3fa <HAL_I2C_Init+0x18e>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	1e58      	subs	r0, r3, #1
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6859      	ldr	r1, [r3, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	440b      	add	r3, r1
 800a3e2:	0099      	lsls	r1, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bf0c      	ite	eq
 800a3f4:	2301      	moveq	r3, #1
 800a3f6:	2300      	movne	r3, #0
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <HAL_I2C_Init+0x196>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e022      	b.n	800a448 <HAL_I2C_Init+0x1dc>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10e      	bne.n	800a428 <HAL_I2C_Init+0x1bc>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	1e58      	subs	r0, r3, #1
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6859      	ldr	r1, [r3, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	440b      	add	r3, r1
 800a418:	fbb0 f3f3 	udiv	r3, r0, r3
 800a41c:	3301      	adds	r3, #1
 800a41e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a426:	e00f      	b.n	800a448 <HAL_I2C_Init+0x1dc>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	1e58      	subs	r0, r3, #1
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6859      	ldr	r1, [r3, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	0099      	lsls	r1, r3, #2
 800a438:	440b      	add	r3, r1
 800a43a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a43e:	3301      	adds	r3, #1
 800a440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	6809      	ldr	r1, [r1, #0]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	69da      	ldr	r2, [r3, #28]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a476:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6911      	ldr	r1, [r2, #16]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	68d2      	ldr	r2, [r2, #12]
 800a482:	4311      	orrs	r1, r2
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6812      	ldr	r2, [r2, #0]
 800a488:	430b      	orrs	r3, r1
 800a48a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695a      	ldr	r2, [r3, #20]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f042 0201 	orr.w	r2, r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	000186a0 	.word	0x000186a0
 800a4e4:	001e847f 	.word	0x001e847f
 800a4e8:	003d08ff 	.word	0x003d08ff
 800a4ec:	431bde83 	.word	0x431bde83
 800a4f0:	10624dd3 	.word	0x10624dd3

0800a4f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	461a      	mov	r2, r3
 800a500:	460b      	mov	r3, r1
 800a502:	817b      	strh	r3, [r7, #10]
 800a504:	4613      	mov	r3, r2
 800a506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a508:	f7fe f97c 	bl	8008804 <HAL_GetTick>
 800a50c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b20      	cmp	r3, #32
 800a518:	f040 80e0 	bne.w	800a6dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	2319      	movs	r3, #25
 800a522:	2201      	movs	r2, #1
 800a524:	4970      	ldr	r1, [pc, #448]	@ (800a6e8 <HAL_I2C_Master_Transmit+0x1f4>)
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fd92 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a532:	2302      	movs	r3, #2
 800a534:	e0d3      	b.n	800a6de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_I2C_Master_Transmit+0x50>
 800a540:	2302      	movs	r3, #2
 800a542:	e0cc      	b.n	800a6de <HAL_I2C_Master_Transmit+0x1ea>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b01      	cmp	r3, #1
 800a558:	d007      	beq.n	800a56a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f042 0201 	orr.w	r2, r2, #1
 800a568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2221      	movs	r2, #33	@ 0x21
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2210      	movs	r2, #16
 800a586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	893a      	ldrh	r2, [r7, #8]
 800a59a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4a50      	ldr	r2, [pc, #320]	@ (800a6ec <HAL_I2C_Master_Transmit+0x1f8>)
 800a5aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a5ac:	8979      	ldrh	r1, [r7, #10]
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	6a3a      	ldr	r2, [r7, #32]
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 fbfc 	bl	800adb0 <I2C_MasterRequestWrite>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e08d      	b.n	800a6de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	613b      	str	r3, [r7, #16]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	613b      	str	r3, [r7, #16]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	613b      	str	r3, [r7, #16]
 800a5d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a5d8:	e066      	b.n	800a6a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	6a39      	ldr	r1, [r7, #32]
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fe50 	bl	800b284 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00d      	beq.n	800a606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d107      	bne.n	800a602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e06b      	b.n	800a6de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a620:	b29b      	uxth	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	b29a      	uxth	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62e:	3b01      	subs	r3, #1
 800a630:	b29a      	uxth	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d11b      	bne.n	800a67c <HAL_I2C_Master_Transmit+0x188>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d017      	beq.n	800a67c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a650:	781a      	ldrb	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a666:	b29b      	uxth	r3, r3
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	6a39      	ldr	r1, [r7, #32]
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 fe47 	bl	800b314 <I2C_WaitOnBTFFlagUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00d      	beq.n	800a6a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a690:	2b04      	cmp	r3, #4
 800a692:	d107      	bne.n	800a6a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e01a      	b.n	800a6de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d194      	bne.n	800a5da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e000      	b.n	800a6de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a6dc:	2302      	movs	r3, #2
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	00100002 	.word	0x00100002
 800a6ec:	ffff0000 	.word	0xffff0000

0800a6f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08c      	sub	sp, #48	@ 0x30
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	817b      	strh	r3, [r7, #10]
 800a700:	4613      	mov	r3, r2
 800a702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a704:	f7fe f87e 	bl	8008804 <HAL_GetTick>
 800a708:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b20      	cmp	r3, #32
 800a714:	f040 8217 	bne.w	800ab46 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	2319      	movs	r3, #25
 800a71e:	2201      	movs	r2, #1
 800a720:	497c      	ldr	r1, [pc, #496]	@ (800a914 <HAL_I2C_Master_Receive+0x224>)
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fc94 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a72e:	2302      	movs	r3, #2
 800a730:	e20a      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_I2C_Master_Receive+0x50>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e203      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b01      	cmp	r3, #1
 800a754:	d007      	beq.n	800a766 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0201 	orr.w	r2, r2, #1
 800a764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2222      	movs	r2, #34	@ 0x22
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2210      	movs	r2, #16
 800a782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	893a      	ldrh	r2, [r7, #8]
 800a796:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4a5c      	ldr	r2, [pc, #368]	@ (800a918 <HAL_I2C_Master_Receive+0x228>)
 800a7a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a7a8:	8979      	ldrh	r1, [r7, #10]
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fb80 	bl	800aeb4 <I2C_MasterRequestRead>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e1c4      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d113      	bne.n	800a7ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	623b      	str	r3, [r7, #32]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	623b      	str	r3, [r7, #32]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	623b      	str	r3, [r7, #32]
 800a7da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	e198      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d11b      	bne.n	800a82e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a806:	2300      	movs	r3, #0
 800a808:	61fb      	str	r3, [r7, #28]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	61fb      	str	r3, [r7, #28]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	61fb      	str	r3, [r7, #28]
 800a81a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	e178      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a832:	2b02      	cmp	r3, #2
 800a834:	d11b      	bne.n	800a86e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a844:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	61bb      	str	r3, [r7, #24]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	61bb      	str	r3, [r7, #24]
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	e158      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a87c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a894:	e144      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	f200 80f1 	bhi.w	800aa82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d123      	bne.n	800a8f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 fd79 	bl	800b3a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e145      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691a      	ldr	r2, [r3, #16]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a8ee:	e117      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d14e      	bne.n	800a996 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	2200      	movs	r2, #0
 800a900:	4906      	ldr	r1, [pc, #24]	@ (800a91c <HAL_I2C_Master_Receive+0x22c>)
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fba4 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d008      	beq.n	800a920 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e11a      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
 800a912:	bf00      	nop
 800a914:	00100002 	.word	0x00100002
 800a918:	ffff0000 	.word	0xffff0000
 800a91c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a92e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691a      	ldr	r2, [r3, #16]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a958:	b29b      	uxth	r3, r3
 800a95a:	3b01      	subs	r3, #1
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	691a      	ldr	r2, [r3, #16]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	b2d2      	uxtb	r2, r2
 800a96e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97e:	3b01      	subs	r3, #1
 800a980:	b29a      	uxth	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	3b01      	subs	r3, #1
 800a98e:	b29a      	uxth	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a994:	e0c4      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	2200      	movs	r2, #0
 800a99e:	496c      	ldr	r1, [pc, #432]	@ (800ab50 <HAL_I2C_Master_Receive+0x460>)
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 fb55 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e0cb      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	691a      	ldr	r2, [r3, #16]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	b2d2      	uxtb	r2, r2
 800a9cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4955      	ldr	r1, [pc, #340]	@ (800ab50 <HAL_I2C_Master_Receive+0x460>)
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 fb27 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e09d      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	3b01      	subs	r3, #1
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	691a      	ldr	r2, [r3, #16]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa58:	b2d2      	uxtb	r2, r2
 800aa5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa80:	e04e      	b.n	800ab20 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 fc8c 	bl	800b3a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e058      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa0:	b2d2      	uxtb	r2, r2
 800aaa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d124      	bne.n	800ab20 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d107      	bne.n	800aaee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aaec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	691a      	ldr	r2, [r3, #16]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f47f aeb6 	bne.w	800a896 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e000      	b.n	800ab48 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800ab46:	2302      	movs	r3, #2
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3728      	adds	r7, #40	@ 0x28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	00010004 	.word	0x00010004

0800ab54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08a      	sub	sp, #40	@ 0x28
 800ab58:	af02      	add	r7, sp, #8
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	460b      	mov	r3, r1
 800ab62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800ab64:	f7fd fe4e 	bl	8008804 <HAL_GetTick>
 800ab68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	f040 8111 	bne.w	800ad9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2319      	movs	r3, #25
 800ab82:	2201      	movs	r2, #1
 800ab84:	4988      	ldr	r1, [pc, #544]	@ (800ada8 <HAL_I2C_IsDeviceReady+0x254>)
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fa62 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800ab92:	2302      	movs	r3, #2
 800ab94:	e104      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_I2C_IsDeviceReady+0x50>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e0fd      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d007      	beq.n	800abca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f042 0201 	orr.w	r2, r2, #1
 800abc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2224      	movs	r2, #36	@ 0x24
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4a70      	ldr	r2, [pc, #448]	@ (800adac <HAL_I2C_IsDeviceReady+0x258>)
 800abec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abfc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 fa20 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00d      	beq.n	800ac32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac24:	d103      	bne.n	800ac2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac2c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e0b6      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac32:	897b      	ldrh	r3, [r7, #10]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ac40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800ac42:	f7fd fddf 	bl	8008804 <HAL_GetTick>
 800ac46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	bf0c      	ite	eq
 800ac56:	2301      	moveq	r3, #1
 800ac58:	2300      	movne	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac6c:	bf0c      	ite	eq
 800ac6e:	2301      	moveq	r3, #1
 800ac70:	2300      	movne	r3, #0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800ac76:	e025      	b.n	800acc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ac78:	f7fd fdc4 	bl	8008804 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d302      	bcc.n	800ac8e <HAL_I2C_IsDeviceReady+0x13a>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d103      	bne.n	800ac96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	22a0      	movs	r2, #160	@ 0xa0
 800ac92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	bf0c      	ite	eq
 800aca4:	2301      	moveq	r3, #1
 800aca6:	2300      	movne	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acba:	bf0c      	ite	eq
 800acbc:	2301      	moveq	r3, #1
 800acbe:	2300      	movne	r3, #0
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2ba0      	cmp	r3, #160	@ 0xa0
 800acce:	d005      	beq.n	800acdc <HAL_I2C_IsDeviceReady+0x188>
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <HAL_I2C_IsDeviceReady+0x188>
 800acd6:	7dbb      	ldrb	r3, [r7, #22]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0cd      	beq.n	800ac78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2220      	movs	r2, #32
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d129      	bne.n	800ad46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad02:	2300      	movs	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	613b      	str	r3, [r7, #16]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	613b      	str	r3, [r7, #16]
 800ad16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	2319      	movs	r3, #25
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4921      	ldr	r1, [pc, #132]	@ (800ada8 <HAL_I2C_IsDeviceReady+0x254>)
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f994 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e036      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	e02c      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	2319      	movs	r3, #25
 800ad66:	2201      	movs	r2, #1
 800ad68:	490f      	ldr	r1, [pc, #60]	@ (800ada8 <HAL_I2C_IsDeviceReady+0x254>)
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 f970 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e012      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	f4ff af32 	bcc.w	800abee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800ad9e:	2302      	movs	r3, #2
  }
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3720      	adds	r7, #32
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	00100002 	.word	0x00100002
 800adac:	ffff0000 	.word	0xffff0000

0800adb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	607a      	str	r2, [r7, #4]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	460b      	mov	r3, r1
 800adbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d006      	beq.n	800adda <I2C_MasterRequestWrite+0x2a>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d003      	beq.n	800adda <I2C_MasterRequestWrite+0x2a>
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800add8:	d108      	bne.n	800adec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e00b      	b.n	800ae04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf0:	2b12      	cmp	r3, #18
 800adf2:	d107      	bne.n	800ae04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f91d 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00d      	beq.n	800ae38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae2a:	d103      	bne.n	800ae34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e035      	b.n	800aea4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae40:	d108      	bne.n	800ae54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae42:	897b      	ldrh	r3, [r7, #10]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ae50:	611a      	str	r2, [r3, #16]
 800ae52:	e01b      	b.n	800ae8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ae54:	897b      	ldrh	r3, [r7, #10]
 800ae56:	11db      	asrs	r3, r3, #7
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	f003 0306 	and.w	r3, r3, #6
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	f063 030f 	orn	r3, r3, #15
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	490e      	ldr	r1, [pc, #56]	@ (800aeac <I2C_MasterRequestWrite+0xfc>)
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f000 f966 	bl	800b144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e010      	b.n	800aea4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ae82:	897b      	ldrh	r3, [r7, #10]
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4907      	ldr	r1, [pc, #28]	@ (800aeb0 <I2C_MasterRequestWrite+0x100>)
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f000 f956 	bl	800b144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	00010008 	.word	0x00010008
 800aeb0:	00010002 	.word	0x00010002

0800aeb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	607a      	str	r2, [r7, #4]
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	460b      	mov	r3, r1
 800aec2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aed8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2b08      	cmp	r3, #8
 800aede:	d006      	beq.n	800aeee <I2C_MasterRequestRead+0x3a>
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d003      	beq.n	800aeee <I2C_MasterRequestRead+0x3a>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aeec:	d108      	bne.n	800af00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	e00b      	b.n	800af18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af04:	2b11      	cmp	r3, #17
 800af06:	d107      	bne.n	800af18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 f893 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00d      	beq.n	800af4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af3e:	d103      	bne.n	800af48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e079      	b.n	800b040 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af54:	d108      	bne.n	800af68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800af56:	897b      	ldrh	r3, [r7, #10]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	f043 0301 	orr.w	r3, r3, #1
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	611a      	str	r2, [r3, #16]
 800af66:	e05f      	b.n	800b028 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800af68:	897b      	ldrh	r3, [r7, #10]
 800af6a:	11db      	asrs	r3, r3, #7
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	f003 0306 	and.w	r3, r3, #6
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f063 030f 	orn	r3, r3, #15
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4930      	ldr	r1, [pc, #192]	@ (800b048 <I2C_MasterRequestRead+0x194>)
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f8dc 	bl	800b144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e054      	b.n	800b040 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	4929      	ldr	r1, [pc, #164]	@ (800b04c <I2C_MasterRequestRead+0x198>)
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f000 f8cc 	bl	800b144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e044      	b.n	800b040 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afb6:	2300      	movs	r3, #0
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	613b      	str	r3, [r7, #16]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	613b      	str	r3, [r7, #16]
 800afca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800afda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f831 	bl	800b050 <I2C_WaitOnFlagUntilTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800affe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b002:	d103      	bne.n	800b00c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b00a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e017      	b.n	800b040 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b010:	897b      	ldrh	r3, [r7, #10]
 800b012:	11db      	asrs	r3, r3, #7
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f003 0306 	and.w	r3, r3, #6
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	f063 030e 	orn	r3, r3, #14
 800b020:	b2da      	uxtb	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	4907      	ldr	r1, [pc, #28]	@ (800b04c <I2C_MasterRequestRead+0x198>)
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 f888 	bl	800b144 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	00010008 	.word	0x00010008
 800b04c:	00010002 	.word	0x00010002

0800b050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	4613      	mov	r3, r2
 800b05e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b060:	e048      	b.n	800b0f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b068:	d044      	beq.n	800b0f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b06a:	f7fd fbcb 	bl	8008804 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d302      	bcc.n	800b080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d139      	bne.n	800b0f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	0c1b      	lsrs	r3, r3, #16
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b01      	cmp	r3, #1
 800b088:	d10d      	bne.n	800b0a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	43da      	mvns	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	4013      	ands	r3, r2
 800b096:	b29b      	uxth	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bf0c      	ite	eq
 800b09c:	2301      	moveq	r3, #1
 800b09e:	2300      	movne	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	e00c      	b.n	800b0c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	43da      	mvns	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2301      	moveq	r3, #1
 800b0ba:	2300      	movne	r3, #0
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d116      	bne.n	800b0f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e0:	f043 0220 	orr.w	r2, r3, #32
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e023      	b.n	800b13c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d10d      	bne.n	800b11a <I2C_WaitOnFlagUntilTimeout+0xca>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	43da      	mvns	r2, r3
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	4013      	ands	r3, r2
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bf0c      	ite	eq
 800b110:	2301      	moveq	r3, #1
 800b112:	2300      	movne	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	461a      	mov	r2, r3
 800b118:	e00c      	b.n	800b134 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	43da      	mvns	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	4013      	ands	r3, r2
 800b126:	b29b      	uxth	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf0c      	ite	eq
 800b12c:	2301      	moveq	r3, #1
 800b12e:	2300      	movne	r3, #0
 800b130:	b2db      	uxtb	r3, r3
 800b132:	461a      	mov	r2, r3
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	429a      	cmp	r2, r3
 800b138:	d093      	beq.n	800b062 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b152:	e071      	b.n	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b15e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b162:	d123      	bne.n	800b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b172:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b17c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2220      	movs	r2, #32
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b198:	f043 0204 	orr.w	r2, r3, #4
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e067      	b.n	800b27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b2:	d041      	beq.n	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b4:	f7fd fb26 	bl	8008804 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d302      	bcc.n	800b1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d136      	bne.n	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	0c1b      	lsrs	r3, r3, #16
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d10c      	bne.n	800b1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	43da      	mvns	r2, r3
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bf14      	ite	ne
 800b1e6:	2301      	movne	r3, #1
 800b1e8:	2300      	moveq	r3, #0
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	e00b      	b.n	800b206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	43da      	mvns	r2, r3
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	bf14      	ite	ne
 800b200:	2301      	movne	r3, #1
 800b202:	2300      	moveq	r3, #0
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d016      	beq.n	800b238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2220      	movs	r2, #32
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b224:	f043 0220 	orr.w	r2, r3, #32
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e021      	b.n	800b27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d10c      	bne.n	800b25c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	43da      	mvns	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4013      	ands	r3, r2
 800b24e:	b29b      	uxth	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	bf14      	ite	ne
 800b254:	2301      	movne	r3, #1
 800b256:	2300      	moveq	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	e00b      	b.n	800b274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	43da      	mvns	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4013      	ands	r3, r2
 800b268:	b29b      	uxth	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bf14      	ite	ne
 800b26e:	2301      	movne	r3, #1
 800b270:	2300      	moveq	r3, #0
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	f47f af6d 	bne.w	800b154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b290:	e034      	b.n	800b2fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 f8e3 	bl	800b45e <I2C_IsAcknowledgeFailed>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e034      	b.n	800b30c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a8:	d028      	beq.n	800b2fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2aa:	f7fd faab 	bl	8008804 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d302      	bcc.n	800b2c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d11d      	bne.n	800b2fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ca:	2b80      	cmp	r3, #128	@ 0x80
 800b2cc:	d016      	beq.n	800b2fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e8:	f043 0220 	orr.w	r2, r3, #32
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e007      	b.n	800b30c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b306:	2b80      	cmp	r3, #128	@ 0x80
 800b308:	d1c3      	bne.n	800b292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b320:	e034      	b.n	800b38c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f000 f89b 	bl	800b45e <I2C_IsAcknowledgeFailed>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d001      	beq.n	800b332 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e034      	b.n	800b39c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b338:	d028      	beq.n	800b38c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b33a:	f7fd fa63 	bl	8008804 <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	429a      	cmp	r2, r3
 800b348:	d302      	bcc.n	800b350 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d11d      	bne.n	800b38c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	f003 0304 	and.w	r3, r3, #4
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d016      	beq.n	800b38c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2220      	movs	r2, #32
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b378:	f043 0220 	orr.w	r2, r3, #32
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e007      	b.n	800b39c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	f003 0304 	and.w	r3, r3, #4
 800b396:	2b04      	cmp	r3, #4
 800b398:	d1c3      	bne.n	800b322 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3b0:	e049      	b.n	800b446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	f003 0310 	and.w	r3, r3, #16
 800b3bc:	2b10      	cmp	r3, #16
 800b3be:	d119      	bne.n	800b3f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0210 	mvn.w	r2, #16
 800b3c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e030      	b.n	800b456 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3f4:	f7fd fa06 	bl	8008804 <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	429a      	cmp	r2, r3
 800b402:	d302      	bcc.n	800b40a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d11d      	bne.n	800b446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b414:	2b40      	cmp	r3, #64	@ 0x40
 800b416:	d016      	beq.n	800b446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2220      	movs	r2, #32
 800b422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b432:	f043 0220 	orr.w	r2, r3, #32
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e007      	b.n	800b456 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b450:	2b40      	cmp	r3, #64	@ 0x40
 800b452:	d1ae      	bne.n	800b3b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b474:	d11b      	bne.n	800b4ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b47e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b49a:	f043 0204 	orr.w	r2, r3, #4
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e000      	b.n	800b4b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e267      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d075      	beq.n	800b5c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b4da:	4b88      	ldr	r3, [pc, #544]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f003 030c 	and.w	r3, r3, #12
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d00c      	beq.n	800b500 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4e6:	4b85      	ldr	r3, [pc, #532]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b4ee:	2b08      	cmp	r3, #8
 800b4f0:	d112      	bne.n	800b518 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4f2:	4b82      	ldr	r3, [pc, #520]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4fe:	d10b      	bne.n	800b518 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b500:	4b7e      	ldr	r3, [pc, #504]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d05b      	beq.n	800b5c4 <HAL_RCC_OscConfig+0x108>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d157      	bne.n	800b5c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e242      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b520:	d106      	bne.n	800b530 <HAL_RCC_OscConfig+0x74>
 800b522:	4b76      	ldr	r3, [pc, #472]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a75      	ldr	r2, [pc, #468]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	e01d      	b.n	800b56c <HAL_RCC_OscConfig+0xb0>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b538:	d10c      	bne.n	800b554 <HAL_RCC_OscConfig+0x98>
 800b53a:	4b70      	ldr	r3, [pc, #448]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a6f      	ldr	r2, [pc, #444]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	4b6d      	ldr	r3, [pc, #436]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a6c      	ldr	r2, [pc, #432]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b54c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	e00b      	b.n	800b56c <HAL_RCC_OscConfig+0xb0>
 800b554:	4b69      	ldr	r3, [pc, #420]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a68      	ldr	r2, [pc, #416]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b55a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	4b66      	ldr	r3, [pc, #408]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a65      	ldr	r2, [pc, #404]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b56a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d013      	beq.n	800b59c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b574:	f7fd f946 	bl	8008804 <HAL_GetTick>
 800b578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b57a:	e008      	b.n	800b58e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b57c:	f7fd f942 	bl	8008804 <HAL_GetTick>
 800b580:	4602      	mov	r2, r0
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	2b64      	cmp	r3, #100	@ 0x64
 800b588:	d901      	bls.n	800b58e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e207      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b58e:	4b5b      	ldr	r3, [pc, #364]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0f0      	beq.n	800b57c <HAL_RCC_OscConfig+0xc0>
 800b59a:	e014      	b.n	800b5c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b59c:	f7fd f932 	bl	8008804 <HAL_GetTick>
 800b5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5a2:	e008      	b.n	800b5b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5a4:	f7fd f92e 	bl	8008804 <HAL_GetTick>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	2b64      	cmp	r3, #100	@ 0x64
 800b5b0:	d901      	bls.n	800b5b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e1f3      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5b6:	4b51      	ldr	r3, [pc, #324]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1f0      	bne.n	800b5a4 <HAL_RCC_OscConfig+0xe8>
 800b5c2:	e000      	b.n	800b5c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 0302 	and.w	r3, r3, #2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d063      	beq.n	800b69a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b5d2:	4b4a      	ldr	r3, [pc, #296]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f003 030c 	and.w	r3, r3, #12
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00b      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5de:	4b47      	ldr	r3, [pc, #284]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b5e6:	2b08      	cmp	r3, #8
 800b5e8:	d11c      	bne.n	800b624 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5ea:	4b44      	ldr	r3, [pc, #272]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d116      	bne.n	800b624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5f6:	4b41      	ldr	r3, [pc, #260]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d005      	beq.n	800b60e <HAL_RCC_OscConfig+0x152>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d001      	beq.n	800b60e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e1c7      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b60e:	4b3b      	ldr	r3, [pc, #236]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	4937      	ldr	r1, [pc, #220]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b622:	e03a      	b.n	800b69a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d020      	beq.n	800b66e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b62c:	4b34      	ldr	r3, [pc, #208]	@ (800b700 <HAL_RCC_OscConfig+0x244>)
 800b62e:	2201      	movs	r2, #1
 800b630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b632:	f7fd f8e7 	bl	8008804 <HAL_GetTick>
 800b636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b638:	e008      	b.n	800b64c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b63a:	f7fd f8e3 	bl	8008804 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b02      	cmp	r3, #2
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e1a8      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b64c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b658:	4b28      	ldr	r3, [pc, #160]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	4925      	ldr	r1, [pc, #148]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	600b      	str	r3, [r1, #0]
 800b66c:	e015      	b.n	800b69a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b66e:	4b24      	ldr	r3, [pc, #144]	@ (800b700 <HAL_RCC_OscConfig+0x244>)
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b674:	f7fd f8c6 	bl	8008804 <HAL_GetTick>
 800b678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b67a:	e008      	b.n	800b68e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b67c:	f7fd f8c2 	bl	8008804 <HAL_GetTick>
 800b680:	4602      	mov	r2, r0
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b02      	cmp	r3, #2
 800b688:	d901      	bls.n	800b68e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e187      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b68e:	4b1b      	ldr	r3, [pc, #108]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1f0      	bne.n	800b67c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0308 	and.w	r3, r3, #8
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d036      	beq.n	800b714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d016      	beq.n	800b6dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6ae:	4b15      	ldr	r3, [pc, #84]	@ (800b704 <HAL_RCC_OscConfig+0x248>)
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6b4:	f7fd f8a6 	bl	8008804 <HAL_GetTick>
 800b6b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6ba:	e008      	b.n	800b6ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6bc:	f7fd f8a2 	bl	8008804 <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d901      	bls.n	800b6ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e167      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b6fc <HAL_RCC_OscConfig+0x240>)
 800b6d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0f0      	beq.n	800b6bc <HAL_RCC_OscConfig+0x200>
 800b6da:	e01b      	b.n	800b714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6dc:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <HAL_RCC_OscConfig+0x248>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6e2:	f7fd f88f 	bl	8008804 <HAL_GetTick>
 800b6e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6e8:	e00e      	b.n	800b708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6ea:	f7fd f88b 	bl	8008804 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d907      	bls.n	800b708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e150      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
 800b6fc:	40023800 	.word	0x40023800
 800b700:	42470000 	.word	0x42470000
 800b704:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b708:	4b88      	ldr	r3, [pc, #544]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b70a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1ea      	bne.n	800b6ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 8097 	beq.w	800b850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b722:	2300      	movs	r3, #0
 800b724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b726:	4b81      	ldr	r3, [pc, #516]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10f      	bne.n	800b752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b732:	2300      	movs	r3, #0
 800b734:	60bb      	str	r3, [r7, #8]
 800b736:	4b7d      	ldr	r3, [pc, #500]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73a:	4a7c      	ldr	r2, [pc, #496]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b73c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b740:	6413      	str	r3, [r2, #64]	@ 0x40
 800b742:	4b7a      	ldr	r3, [pc, #488]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b74a:	60bb      	str	r3, [r7, #8]
 800b74c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b74e:	2301      	movs	r3, #1
 800b750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b752:	4b77      	ldr	r3, [pc, #476]	@ (800b930 <HAL_RCC_OscConfig+0x474>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d118      	bne.n	800b790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b75e:	4b74      	ldr	r3, [pc, #464]	@ (800b930 <HAL_RCC_OscConfig+0x474>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a73      	ldr	r2, [pc, #460]	@ (800b930 <HAL_RCC_OscConfig+0x474>)
 800b764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b76a:	f7fd f84b 	bl	8008804 <HAL_GetTick>
 800b76e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b770:	e008      	b.n	800b784 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b772:	f7fd f847 	bl	8008804 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e10c      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b784:	4b6a      	ldr	r3, [pc, #424]	@ (800b930 <HAL_RCC_OscConfig+0x474>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0f0      	beq.n	800b772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d106      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x2ea>
 800b798:	4b64      	ldr	r3, [pc, #400]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b79a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b79c:	4a63      	ldr	r2, [pc, #396]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b79e:	f043 0301 	orr.w	r3, r3, #1
 800b7a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7a4:	e01c      	b.n	800b7e0 <HAL_RCC_OscConfig+0x324>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	d10c      	bne.n	800b7c8 <HAL_RCC_OscConfig+0x30c>
 800b7ae:	4b5f      	ldr	r3, [pc, #380]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7b2:	4a5e      	ldr	r2, [pc, #376]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7b4:	f043 0304 	orr.w	r3, r3, #4
 800b7b8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7ba:	4b5c      	ldr	r3, [pc, #368]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7be:	4a5b      	ldr	r2, [pc, #364]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7c0:	f043 0301 	orr.w	r3, r3, #1
 800b7c4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7c6:	e00b      	b.n	800b7e0 <HAL_RCC_OscConfig+0x324>
 800b7c8:	4b58      	ldr	r3, [pc, #352]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7cc:	4a57      	ldr	r2, [pc, #348]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7ce:	f023 0301 	bic.w	r3, r3, #1
 800b7d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7d4:	4b55      	ldr	r3, [pc, #340]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7d8:	4a54      	ldr	r2, [pc, #336]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b7da:	f023 0304 	bic.w	r3, r3, #4
 800b7de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d015      	beq.n	800b814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7e8:	f7fd f80c 	bl	8008804 <HAL_GetTick>
 800b7ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7ee:	e00a      	b.n	800b806 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7f0:	f7fd f808 	bl	8008804 <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d901      	bls.n	800b806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b802:	2303      	movs	r3, #3
 800b804:	e0cb      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b806:	4b49      	ldr	r3, [pc, #292]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b80a:	f003 0302 	and.w	r3, r3, #2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0ee      	beq.n	800b7f0 <HAL_RCC_OscConfig+0x334>
 800b812:	e014      	b.n	800b83e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b814:	f7fc fff6 	bl	8008804 <HAL_GetTick>
 800b818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b81a:	e00a      	b.n	800b832 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b81c:	f7fc fff2 	bl	8008804 <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d901      	bls.n	800b832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e0b5      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b832:	4b3e      	ldr	r3, [pc, #248]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1ee      	bne.n	800b81c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d105      	bne.n	800b850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b844:	4b39      	ldr	r3, [pc, #228]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b848:	4a38      	ldr	r2, [pc, #224]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b84a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b84e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80a1 	beq.w	800b99c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b85a:	4b34      	ldr	r3, [pc, #208]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f003 030c 	and.w	r3, r3, #12
 800b862:	2b08      	cmp	r3, #8
 800b864:	d05c      	beq.n	800b920 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d141      	bne.n	800b8f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b86e:	4b31      	ldr	r3, [pc, #196]	@ (800b934 <HAL_RCC_OscConfig+0x478>)
 800b870:	2200      	movs	r2, #0
 800b872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b874:	f7fc ffc6 	bl	8008804 <HAL_GetTick>
 800b878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b87a:	e008      	b.n	800b88e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b87c:	f7fc ffc2 	bl	8008804 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b02      	cmp	r3, #2
 800b888:	d901      	bls.n	800b88e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e087      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b88e:	4b27      	ldr	r3, [pc, #156]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1f0      	bne.n	800b87c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	69da      	ldr	r2, [r3, #28]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a8:	019b      	lsls	r3, r3, #6
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b0:	085b      	lsrs	r3, r3, #1
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	041b      	lsls	r3, r3, #16
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8bc:	061b      	lsls	r3, r3, #24
 800b8be:	491b      	ldr	r1, [pc, #108]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b8c4:	4b1b      	ldr	r3, [pc, #108]	@ (800b934 <HAL_RCC_OscConfig+0x478>)
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8ca:	f7fc ff9b 	bl	8008804 <HAL_GetTick>
 800b8ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8d0:	e008      	b.n	800b8e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8d2:	f7fc ff97 	bl	8008804 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d901      	bls.n	800b8e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e05c      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8e4:	4b11      	ldr	r3, [pc, #68]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d0f0      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x416>
 800b8f0:	e054      	b.n	800b99c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8f2:	4b10      	ldr	r3, [pc, #64]	@ (800b934 <HAL_RCC_OscConfig+0x478>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8f8:	f7fc ff84 	bl	8008804 <HAL_GetTick>
 800b8fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8fe:	e008      	b.n	800b912 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b900:	f7fc ff80 	bl	8008804 <HAL_GetTick>
 800b904:	4602      	mov	r2, r0
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d901      	bls.n	800b912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e045      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b912:	4b06      	ldr	r3, [pc, #24]	@ (800b92c <HAL_RCC_OscConfig+0x470>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f0      	bne.n	800b900 <HAL_RCC_OscConfig+0x444>
 800b91e:	e03d      	b.n	800b99c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d107      	bne.n	800b938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e038      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
 800b92c:	40023800 	.word	0x40023800
 800b930:	40007000 	.word	0x40007000
 800b934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b938:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a8 <HAL_RCC_OscConfig+0x4ec>)
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d028      	beq.n	800b998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b950:	429a      	cmp	r2, r3
 800b952:	d121      	bne.n	800b998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b95e:	429a      	cmp	r2, r3
 800b960:	d11a      	bne.n	800b998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b968:	4013      	ands	r3, r2
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b96e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b970:	4293      	cmp	r3, r2
 800b972:	d111      	bne.n	800b998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97e:	085b      	lsrs	r3, r3, #1
 800b980:	3b01      	subs	r3, #1
 800b982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b984:	429a      	cmp	r2, r3
 800b986:	d107      	bne.n	800b998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b994:	429a      	cmp	r2, r3
 800b996:	d001      	beq.n	800b99c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e000      	b.n	800b99e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	40023800 	.word	0x40023800

0800b9ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e0cc      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9c0:	4b68      	ldr	r3, [pc, #416]	@ (800bb64 <HAL_RCC_ClockConfig+0x1b8>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0307 	and.w	r3, r3, #7
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d90c      	bls.n	800b9e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ce:	4b65      	ldr	r3, [pc, #404]	@ (800bb64 <HAL_RCC_ClockConfig+0x1b8>)
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9d6:	4b63      	ldr	r3, [pc, #396]	@ (800bb64 <HAL_RCC_ClockConfig+0x1b8>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d001      	beq.n	800b9e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e0b8      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d020      	beq.n	800ba36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d005      	beq.n	800ba0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba00:	4b59      	ldr	r3, [pc, #356]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	4a58      	ldr	r2, [pc, #352]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ba0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 0308 	and.w	r3, r3, #8
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba18:	4b53      	ldr	r3, [pc, #332]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	4a52      	ldr	r2, [pc, #328]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ba22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba24:	4b50      	ldr	r3, [pc, #320]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	494d      	ldr	r1, [pc, #308]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba32:	4313      	orrs	r3, r2
 800ba34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d044      	beq.n	800bacc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d107      	bne.n	800ba5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba4a:	4b47      	ldr	r3, [pc, #284]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d119      	bne.n	800ba8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e07f      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d003      	beq.n	800ba6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d107      	bne.n	800ba7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba6a:	4b3f      	ldr	r3, [pc, #252]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d109      	bne.n	800ba8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e06f      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba7a:	4b3b      	ldr	r3, [pc, #236]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e067      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ba8a:	4b37      	ldr	r3, [pc, #220]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f023 0203 	bic.w	r2, r3, #3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4934      	ldr	r1, [pc, #208]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ba9c:	f7fc feb2 	bl	8008804 <HAL_GetTick>
 800baa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baa2:	e00a      	b.n	800baba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baa4:	f7fc feae 	bl	8008804 <HAL_GetTick>
 800baa8:	4602      	mov	r2, r0
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d901      	bls.n	800baba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e04f      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baba:	4b2b      	ldr	r3, [pc, #172]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	f003 020c 	and.w	r2, r3, #12
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	429a      	cmp	r2, r3
 800baca:	d1eb      	bne.n	800baa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bacc:	4b25      	ldr	r3, [pc, #148]	@ (800bb64 <HAL_RCC_ClockConfig+0x1b8>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0307 	and.w	r3, r3, #7
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d20c      	bcs.n	800baf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bada:	4b22      	ldr	r3, [pc, #136]	@ (800bb64 <HAL_RCC_ClockConfig+0x1b8>)
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bae2:	4b20      	ldr	r3, [pc, #128]	@ (800bb64 <HAL_RCC_ClockConfig+0x1b8>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d001      	beq.n	800baf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e032      	b.n	800bb5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d008      	beq.n	800bb12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb00:	4b19      	ldr	r3, [pc, #100]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	4916      	ldr	r1, [pc, #88]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0308 	and.w	r3, r3, #8
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d009      	beq.n	800bb32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb1e:	4b12      	ldr	r3, [pc, #72]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	490e      	ldr	r1, [pc, #56]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb32:	f000 f821 	bl	800bb78 <HAL_RCC_GetSysClockFreq>
 800bb36:	4602      	mov	r2, r0
 800bb38:	4b0b      	ldr	r3, [pc, #44]	@ (800bb68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	091b      	lsrs	r3, r3, #4
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	490a      	ldr	r1, [pc, #40]	@ (800bb6c <HAL_RCC_ClockConfig+0x1c0>)
 800bb44:	5ccb      	ldrb	r3, [r1, r3]
 800bb46:	fa22 f303 	lsr.w	r3, r2, r3
 800bb4a:	4a09      	ldr	r2, [pc, #36]	@ (800bb70 <HAL_RCC_ClockConfig+0x1c4>)
 800bb4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800bb4e:	4b09      	ldr	r3, [pc, #36]	@ (800bb74 <HAL_RCC_ClockConfig+0x1c8>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fc f9de 	bl	8007f14 <HAL_InitTick>

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	40023c00 	.word	0x40023c00
 800bb68:	40023800 	.word	0x40023800
 800bb6c:	0801491c 	.word	0x0801491c
 800bb70:	20000050 	.word	0x20000050
 800bb74:	20000054 	.word	0x20000054

0800bb78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb7c:	b090      	sub	sp, #64	@ 0x40
 800bb7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800bb84:	2300      	movs	r3, #0
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb90:	4b59      	ldr	r3, [pc, #356]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f003 030c 	and.w	r3, r3, #12
 800bb98:	2b08      	cmp	r3, #8
 800bb9a:	d00d      	beq.n	800bbb8 <HAL_RCC_GetSysClockFreq+0x40>
 800bb9c:	2b08      	cmp	r3, #8
 800bb9e:	f200 80a1 	bhi.w	800bce4 <HAL_RCC_GetSysClockFreq+0x16c>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <HAL_RCC_GetSysClockFreq+0x34>
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d003      	beq.n	800bbb2 <HAL_RCC_GetSysClockFreq+0x3a>
 800bbaa:	e09b      	b.n	800bce4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bbac:	4b53      	ldr	r3, [pc, #332]	@ (800bcfc <HAL_RCC_GetSysClockFreq+0x184>)
 800bbae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bbb0:	e09b      	b.n	800bcea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bbb2:	4b53      	ldr	r3, [pc, #332]	@ (800bd00 <HAL_RCC_GetSysClockFreq+0x188>)
 800bbb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bbb6:	e098      	b.n	800bcea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bbb8:	4b4f      	ldr	r3, [pc, #316]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bbc2:	4b4d      	ldr	r3, [pc, #308]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d028      	beq.n	800bc20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbce:	4b4a      	ldr	r3, [pc, #296]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	099b      	lsrs	r3, r3, #6
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	623b      	str	r3, [r7, #32]
 800bbd8:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4b47      	ldr	r3, [pc, #284]	@ (800bd00 <HAL_RCC_GetSysClockFreq+0x188>)
 800bbe4:	fb03 f201 	mul.w	r2, r3, r1
 800bbe8:	2300      	movs	r3, #0
 800bbea:	fb00 f303 	mul.w	r3, r0, r3
 800bbee:	4413      	add	r3, r2
 800bbf0:	4a43      	ldr	r2, [pc, #268]	@ (800bd00 <HAL_RCC_GetSysClockFreq+0x188>)
 800bbf2:	fba0 1202 	umull	r1, r2, r0, r2
 800bbf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbf8:	460a      	mov	r2, r1
 800bbfa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bbfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbfe:	4413      	add	r3, r2
 800bc00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc04:	2200      	movs	r2, #0
 800bc06:	61bb      	str	r3, [r7, #24]
 800bc08:	61fa      	str	r2, [r7, #28]
 800bc0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bc12:	f7f5 f839 	bl	8000c88 <__aeabi_uldivmod>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc1e:	e053      	b.n	800bcc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc20:	4b35      	ldr	r3, [pc, #212]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	099b      	lsrs	r3, r3, #6
 800bc26:	2200      	movs	r2, #0
 800bc28:	613b      	str	r3, [r7, #16]
 800bc2a:	617a      	str	r2, [r7, #20]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bc32:	f04f 0b00 	mov.w	fp, #0
 800bc36:	4652      	mov	r2, sl
 800bc38:	465b      	mov	r3, fp
 800bc3a:	f04f 0000 	mov.w	r0, #0
 800bc3e:	f04f 0100 	mov.w	r1, #0
 800bc42:	0159      	lsls	r1, r3, #5
 800bc44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bc48:	0150      	lsls	r0, r2, #5
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	ebb2 080a 	subs.w	r8, r2, sl
 800bc52:	eb63 090b 	sbc.w	r9, r3, fp
 800bc56:	f04f 0200 	mov.w	r2, #0
 800bc5a:	f04f 0300 	mov.w	r3, #0
 800bc5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bc62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bc66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bc6a:	ebb2 0408 	subs.w	r4, r2, r8
 800bc6e:	eb63 0509 	sbc.w	r5, r3, r9
 800bc72:	f04f 0200 	mov.w	r2, #0
 800bc76:	f04f 0300 	mov.w	r3, #0
 800bc7a:	00eb      	lsls	r3, r5, #3
 800bc7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc80:	00e2      	lsls	r2, r4, #3
 800bc82:	4614      	mov	r4, r2
 800bc84:	461d      	mov	r5, r3
 800bc86:	eb14 030a 	adds.w	r3, r4, sl
 800bc8a:	603b      	str	r3, [r7, #0]
 800bc8c:	eb45 030b 	adc.w	r3, r5, fp
 800bc90:	607b      	str	r3, [r7, #4]
 800bc92:	f04f 0200 	mov.w	r2, #0
 800bc96:	f04f 0300 	mov.w	r3, #0
 800bc9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bc9e:	4629      	mov	r1, r5
 800bca0:	028b      	lsls	r3, r1, #10
 800bca2:	4621      	mov	r1, r4
 800bca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bca8:	4621      	mov	r1, r4
 800bcaa:	028a      	lsls	r2, r1, #10
 800bcac:	4610      	mov	r0, r2
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	60fa      	str	r2, [r7, #12]
 800bcb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcbc:	f7f4 ffe4 	bl	8000c88 <__aeabi_uldivmod>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bcc8:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	0c1b      	lsrs	r3, r3, #16
 800bcce:	f003 0303 	and.w	r3, r3, #3
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bcd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bce2:	e002      	b.n	800bcea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <HAL_RCC_GetSysClockFreq+0x184>)
 800bce6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3740      	adds	r7, #64	@ 0x40
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcf6:	bf00      	nop
 800bcf8:	40023800 	.word	0x40023800
 800bcfc:	00f42400 	.word	0x00f42400
 800bd00:	017d7840 	.word	0x017d7840

0800bd04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd08:	4b03      	ldr	r3, [pc, #12]	@ (800bd18 <HAL_RCC_GetHCLKFreq+0x14>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	20000050 	.word	0x20000050

0800bd1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bd20:	f7ff fff0 	bl	800bd04 <HAL_RCC_GetHCLKFreq>
 800bd24:	4602      	mov	r2, r0
 800bd26:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	0a9b      	lsrs	r3, r3, #10
 800bd2c:	f003 0307 	and.w	r3, r3, #7
 800bd30:	4903      	ldr	r1, [pc, #12]	@ (800bd40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd32:	5ccb      	ldrb	r3, [r1, r3]
 800bd34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	40023800 	.word	0x40023800
 800bd40:	0801492c 	.word	0x0801492c

0800bd44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bd48:	f7ff ffdc 	bl	800bd04 <HAL_RCC_GetHCLKFreq>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	4b05      	ldr	r3, [pc, #20]	@ (800bd64 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	0b5b      	lsrs	r3, r3, #13
 800bd54:	f003 0307 	and.w	r3, r3, #7
 800bd58:	4903      	ldr	r1, [pc, #12]	@ (800bd68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd5a:	5ccb      	ldrb	r3, [r1, r3]
 800bd5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	40023800 	.word	0x40023800
 800bd68:	0801492c 	.word	0x0801492c

0800bd6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	220f      	movs	r2, #15
 800bd7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bd7c:	4b12      	ldr	r3, [pc, #72]	@ (800bdc8 <HAL_RCC_GetClockConfig+0x5c>)
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	f003 0203 	and.w	r2, r3, #3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bd88:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc8 <HAL_RCC_GetClockConfig+0x5c>)
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bd94:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc8 <HAL_RCC_GetClockConfig+0x5c>)
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bda0:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <HAL_RCC_GetClockConfig+0x5c>)
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	08db      	lsrs	r3, r3, #3
 800bda6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bdae:	4b07      	ldr	r3, [pc, #28]	@ (800bdcc <HAL_RCC_GetClockConfig+0x60>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0207 	and.w	r2, r3, #7
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	601a      	str	r2, [r3, #0]
}
 800bdba:	bf00      	nop
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	40023800 	.word	0x40023800
 800bdcc:	40023c00 	.word	0x40023c00

0800bdd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d105      	bne.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d035      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bdf8:	4b62      	ldr	r3, [pc, #392]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bdfe:	f7fc fd01 	bl	8008804 <HAL_GetTick>
 800be02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be04:	e008      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800be06:	f7fc fcfd 	bl	8008804 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b02      	cmp	r3, #2
 800be12:	d901      	bls.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	e0b0      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be18:	4b5b      	ldr	r3, [pc, #364]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1f0      	bne.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	019a      	lsls	r2, r3, #6
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	071b      	lsls	r3, r3, #28
 800be30:	4955      	ldr	r1, [pc, #340]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800be32:	4313      	orrs	r3, r2
 800be34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be38:	4b52      	ldr	r3, [pc, #328]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800be3a:	2201      	movs	r2, #1
 800be3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be3e:	f7fc fce1 	bl	8008804 <HAL_GetTick>
 800be42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be44:	e008      	b.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800be46:	f7fc fcdd 	bl	8008804 <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	2b02      	cmp	r3, #2
 800be52:	d901      	bls.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e090      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be58:	4b4b      	ldr	r3, [pc, #300]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0f0      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 8083 	beq.w	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
 800be76:	4b44      	ldr	r3, [pc, #272]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800be78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be7a:	4a43      	ldr	r2, [pc, #268]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800be7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be80:	6413      	str	r3, [r2, #64]	@ 0x40
 800be82:	4b41      	ldr	r3, [pc, #260]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800be84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800be8e:	4b3f      	ldr	r3, [pc, #252]	@ (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a3e      	ldr	r2, [pc, #248]	@ (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800be94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be9a:	f7fc fcb3 	bl	8008804 <HAL_GetTick>
 800be9e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800bea0:	e008      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bea2:	f7fc fcaf 	bl	8008804 <HAL_GetTick>
 800bea6:	4602      	mov	r2, r0
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	2b02      	cmp	r3, #2
 800beae:	d901      	bls.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e062      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800beb4:	4b35      	ldr	r3, [pc, #212]	@ (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d0f0      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bec0:	4b31      	ldr	r3, [pc, #196]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bec8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d02f      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d028      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bede:	4b2a      	ldr	r3, [pc, #168]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bee6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bee8:	4b29      	ldr	r3, [pc, #164]	@ (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800beea:	2201      	movs	r2, #1
 800beec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800beee:	4b28      	ldr	r3, [pc, #160]	@ (800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bef4:	4a24      	ldr	r2, [pc, #144]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800befa:	4b23      	ldr	r3, [pc, #140]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800befc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d114      	bne.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bf06:	f7fc fc7d 	bl	8008804 <HAL_GetTick>
 800bf0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf0c:	e00a      	b.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf0e:	f7fc fc79 	bl	8008804 <HAL_GetTick>
 800bf12:	4602      	mov	r2, r0
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d901      	bls.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800bf20:	2303      	movs	r3, #3
 800bf22:	e02a      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf24:	4b18      	ldr	r3, [pc, #96]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0ee      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf3c:	d10d      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800bf3e:	4b12      	ldr	r3, [pc, #72]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bf4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf52:	490d      	ldr	r1, [pc, #52]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	608b      	str	r3, [r1, #8]
 800bf58:	e005      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bf5a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	4a0a      	ldr	r2, [pc, #40]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf60:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800bf64:	6093      	str	r3, [r2, #8]
 800bf66:	4b08      	ldr	r3, [pc, #32]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf72:	4905      	ldr	r1, [pc, #20]	@ (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	42470068 	.word	0x42470068
 800bf88:	40023800 	.word	0x40023800
 800bf8c:	40007000 	.word	0x40007000
 800bf90:	42470e40 	.word	0x42470e40

0800bf94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e073      	b.n	800c092 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	7f5b      	ldrb	r3, [r3, #29]
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d105      	bne.n	800bfc0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7fb fed6 	bl	8007d6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	f003 0310 	and.w	r3, r3, #16
 800bfd0:	2b10      	cmp	r3, #16
 800bfd2:	d055      	beq.n	800c080 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	22ca      	movs	r2, #202	@ 0xca
 800bfda:	625a      	str	r2, [r3, #36]	@ 0x24
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2253      	movs	r2, #83	@ 0x53
 800bfe2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f92b 	bl	800c240 <RTC_EnterInitMode>
 800bfea:	4603      	mov	r3, r0
 800bfec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d12c      	bne.n	800c04e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c006:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6899      	ldr	r1, [r3, #8]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	431a      	orrs	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	431a      	orrs	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	430a      	orrs	r2, r1
 800c024:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	68d2      	ldr	r2, [r2, #12]
 800c02e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6919      	ldr	r1, [r3, #16]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	041a      	lsls	r2, r3, #16
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 f932 	bl	800c2ae <RTC_ExitInitMode>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d110      	bne.n	800c076 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c062:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	22ff      	movs	r2, #255	@ 0xff
 800c07c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c07e:	e001      	b.n	800c084 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c090:	7bfb      	ldrb	r3, [r7, #15]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b086      	sub	sp, #24
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c0cc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c0d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	0c1b      	lsrs	r3, r3, #16
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	0a1b      	lsrs	r3, r3, #8
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	0d9b      	lsrs	r3, r3, #22
 800c104:	b2db      	uxtb	r3, r3
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d11a      	bne.n	800c14c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f8ec 	bl	800c2f8 <RTC_Bcd2ToByte>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 f8e3 	bl	800c2f8 <RTC_Bcd2ToByte>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	789b      	ldrb	r3, [r3, #2]
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 f8da 	bl	800c2f8 <RTC_Bcd2ToByte>
 800c144:	4603      	mov	r3, r0
 800c146:	461a      	mov	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b086      	sub	sp, #24
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c170:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c174:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	0c1b      	lsrs	r3, r3, #16
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	0a1b      	lsrs	r3, r3, #8
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f003 031f 	and.w	r3, r3, #31
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	0b5b      	lsrs	r3, r3, #13
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d11a      	bne.n	800c1ea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	78db      	ldrb	r3, [r3, #3]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f89d 	bl	800c2f8 <RTC_Bcd2ToByte>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	785b      	ldrb	r3, [r3, #1]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 f894 	bl	800c2f8 <RTC_Bcd2ToByte>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	789b      	ldrb	r3, [r3, #2]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 f88b 	bl	800c2f8 <RTC_Bcd2ToByte>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a0d      	ldr	r2, [pc, #52]	@ (800c23c <HAL_RTC_WaitForSynchro+0x48>)
 800c206:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c208:	f7fc fafc 	bl	8008804 <HAL_GetTick>
 800c20c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c20e:	e009      	b.n	800c224 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c210:	f7fc faf8 	bl	8008804 <HAL_GetTick>
 800c214:	4602      	mov	r2, r0
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c21e:	d901      	bls.n	800c224 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e007      	b.n	800c234 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0ee      	beq.n	800c210 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	00017f5f 	.word	0x00017f5f

0800c240 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d122      	bne.n	800c2a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68da      	ldr	r2, [r3, #12]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c26c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c26e:	f7fc fac9 	bl	8008804 <HAL_GetTick>
 800c272:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c274:	e00c      	b.n	800c290 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c276:	f7fc fac5 	bl	8008804 <HAL_GetTick>
 800c27a:	4602      	mov	r2, r0
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c284:	d904      	bls.n	800c290 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2204      	movs	r2, #4
 800c28a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d102      	bne.n	800c2a4 <RTC_EnterInitMode+0x64>
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d1e8      	bne.n	800c276 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68da      	ldr	r2, [r3, #12]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c2c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f003 0320 	and.w	r3, r3, #32
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff ff8b 	bl	800c1f4 <HAL_RTC_WaitForSynchro>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2204      	movs	r2, #4
 800c2e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800c302:	2300      	movs	r3, #0
 800c304:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800c306:	79fb      	ldrb	r3, [r7, #7]
 800c308:	091b      	lsrs	r3, r3, #4
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	461a      	mov	r2, r3
 800c30e:	4613      	mov	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	f003 030f 	and.w	r3, r3, #15
 800c322:	b2db      	uxtb	r3, r3
 800c324:	4413      	add	r3, r2
 800c326:	b2db      	uxtb	r3, r3
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e07b      	b.n	800c43e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d108      	bne.n	800c360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c356:	d009      	beq.n	800c36c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	61da      	str	r2, [r3, #28]
 800c35e:	e005      	b.n	800c36c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d106      	bne.n	800c38c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7fb fd50 	bl	8007e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c3a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c3b4:	431a      	orrs	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3be:	431a      	orrs	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	f003 0302 	and.w	r3, r3, #2
 800c3c8:	431a      	orrs	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	695b      	ldr	r3, [r3, #20]
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	431a      	orrs	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	69db      	ldr	r3, [r3, #28]
 800c3e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
 800c3ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3f0:	ea42 0103 	orr.w	r1, r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	430a      	orrs	r2, r1
 800c402:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	0c1b      	lsrs	r3, r3, #16
 800c40a:	f003 0104 	and.w	r1, r3, #4
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c412:	f003 0210 	and.w	r2, r3, #16
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c42c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b088      	sub	sp, #32
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	603b      	str	r3, [r7, #0]
 800c452:	4613      	mov	r3, r2
 800c454:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c456:	f7fc f9d5 	bl	8008804 <HAL_GetTick>
 800c45a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800c45c:	88fb      	ldrh	r3, [r7, #6]
 800c45e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d001      	beq.n	800c470 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800c46c:	2302      	movs	r3, #2
 800c46e:	e12a      	b.n	800c6c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d002      	beq.n	800c47c <HAL_SPI_Transmit+0x36>
 800c476:	88fb      	ldrh	r3, [r7, #6]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d101      	bne.n	800c480 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e122      	b.n	800c6c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c486:	2b01      	cmp	r3, #1
 800c488:	d101      	bne.n	800c48e <HAL_SPI_Transmit+0x48>
 800c48a:	2302      	movs	r3, #2
 800c48c:	e11b      	b.n	800c6c6 <HAL_SPI_Transmit+0x280>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2203      	movs	r2, #3
 800c49a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	88fa      	ldrh	r2, [r7, #6]
 800c4ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	88fa      	ldrh	r2, [r7, #6]
 800c4b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4dc:	d10f      	bne.n	800c4fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c508:	2b40      	cmp	r3, #64	@ 0x40
 800c50a:	d007      	beq.n	800c51c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c51a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c524:	d152      	bne.n	800c5cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <HAL_SPI_Transmit+0xee>
 800c52e:	8b7b      	ldrh	r3, [r7, #26]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d145      	bne.n	800c5c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c538:	881a      	ldrh	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c544:	1c9a      	adds	r2, r3, #2
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c54e:	b29b      	uxth	r3, r3
 800c550:	3b01      	subs	r3, #1
 800c552:	b29a      	uxth	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c558:	e032      	b.n	800c5c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f003 0302 	and.w	r3, r3, #2
 800c564:	2b02      	cmp	r3, #2
 800c566:	d112      	bne.n	800c58e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c56c:	881a      	ldrh	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c578:	1c9a      	adds	r2, r3, #2
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c582:	b29b      	uxth	r3, r3
 800c584:	3b01      	subs	r3, #1
 800c586:	b29a      	uxth	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c58c:	e018      	b.n	800c5c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c58e:	f7fc f939 	bl	8008804 <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d803      	bhi.n	800c5a6 <HAL_SPI_Transmit+0x160>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a4:	d102      	bne.n	800c5ac <HAL_SPI_Transmit+0x166>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d109      	bne.n	800c5c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e082      	b.n	800c6c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1c7      	bne.n	800c55a <HAL_SPI_Transmit+0x114>
 800c5ca:	e053      	b.n	800c674 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <HAL_SPI_Transmit+0x194>
 800c5d4:	8b7b      	ldrh	r3, [r7, #26]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d147      	bne.n	800c66a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	330c      	adds	r3, #12
 800c5e4:	7812      	ldrb	r2, [r2, #0]
 800c5e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c600:	e033      	b.n	800c66a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d113      	bne.n	800c638 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	330c      	adds	r3, #12
 800c61a:	7812      	ldrb	r2, [r2, #0]
 800c61c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	3b01      	subs	r3, #1
 800c630:	b29a      	uxth	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c636:	e018      	b.n	800c66a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c638:	f7fc f8e4 	bl	8008804 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	429a      	cmp	r2, r3
 800c646:	d803      	bhi.n	800c650 <HAL_SPI_Transmit+0x20a>
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64e:	d102      	bne.n	800c656 <HAL_SPI_Transmit+0x210>
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d109      	bne.n	800c66a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800c666:	2303      	movs	r3, #3
 800c668:	e02d      	b.n	800c6c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1c6      	bne.n	800c602 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c674:	69fa      	ldr	r2, [r7, #28]
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f8b1 	bl	800c7e0 <SPI_EndRxTxTransaction>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2220      	movs	r2, #32
 800c688:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d10a      	bne.n	800c6a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	617b      	str	r3, [r7, #20]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e000      	b.n	800c6c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
  }
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3720      	adds	r7, #32
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	603b      	str	r3, [r7, #0]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c6e0:	f7fc f890 	bl	8008804 <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e8:	1a9b      	subs	r3, r3, r2
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c6f0:	f7fc f888 	bl	8008804 <HAL_GetTick>
 800c6f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c6f6:	4b39      	ldr	r3, [pc, #228]	@ (800c7dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	015b      	lsls	r3, r3, #5
 800c6fc:	0d1b      	lsrs	r3, r3, #20
 800c6fe:	69fa      	ldr	r2, [r7, #28]
 800c700:	fb02 f303 	mul.w	r3, r2, r3
 800c704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c706:	e054      	b.n	800c7b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70e:	d050      	beq.n	800c7b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c710:	f7fc f878 	bl	8008804 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	69fa      	ldr	r2, [r7, #28]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d902      	bls.n	800c726 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d13d      	bne.n	800c7a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c73e:	d111      	bne.n	800c764 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c748:	d004      	beq.n	800c754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c752:	d107      	bne.n	800c764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c76c:	d10f      	bne.n	800c78e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c78c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e017      	b.n	800c7d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	bf0c      	ite	eq
 800c7c2:	2301      	moveq	r3, #1
 800c7c4:	2300      	movne	r3, #0
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d19b      	bne.n	800c708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3720      	adds	r7, #32
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	20000050 	.word	0x20000050

0800c7e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af02      	add	r7, sp, #8
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	2102      	movs	r1, #2
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7ff ff6a 	bl	800c6d0 <SPI_WaitFlagStateUntilTimeout>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d007      	beq.n	800c812 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c806:	f043 0220 	orr.w	r2, r3, #32
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e032      	b.n	800c878 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c812:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <SPI_EndRxTxTransaction+0xa0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a1b      	ldr	r2, [pc, #108]	@ (800c884 <SPI_EndRxTxTransaction+0xa4>)
 800c818:	fba2 2303 	umull	r2, r3, r2, r3
 800c81c:	0d5b      	lsrs	r3, r3, #21
 800c81e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c822:	fb02 f303 	mul.w	r3, r2, r3
 800c826:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c830:	d112      	bne.n	800c858 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2200      	movs	r2, #0
 800c83a:	2180      	movs	r1, #128	@ 0x80
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7ff ff47 	bl	800c6d0 <SPI_WaitFlagStateUntilTimeout>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d016      	beq.n	800c876 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c84c:	f043 0220 	orr.w	r2, r3, #32
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e00f      	b.n	800c878 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	3b01      	subs	r3, #1
 800c862:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c86e:	2b80      	cmp	r3, #128	@ 0x80
 800c870:	d0f2      	beq.n	800c858 <SPI_EndRxTxTransaction+0x78>
 800c872:	e000      	b.n	800c876 <SPI_EndRxTxTransaction+0x96>
        break;
 800c874:	bf00      	nop
  }

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	20000050 	.word	0x20000050
 800c884:	165e9f81 	.word	0x165e9f81

0800c888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e041      	b.n	800c91e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7fb fd26 	bl	8008300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f000 fae6 	bl	800ce98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
	...

0800c928 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d001      	beq.n	800c940 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e046      	b.n	800c9ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2202      	movs	r2, #2
 800c944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a23      	ldr	r2, [pc, #140]	@ (800c9dc <HAL_TIM_Base_Start+0xb4>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d022      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c95a:	d01d      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1f      	ldr	r2, [pc, #124]	@ (800c9e0 <HAL_TIM_Base_Start+0xb8>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d018      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a1e      	ldr	r2, [pc, #120]	@ (800c9e4 <HAL_TIM_Base_Start+0xbc>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d013      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a1c      	ldr	r2, [pc, #112]	@ (800c9e8 <HAL_TIM_Base_Start+0xc0>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d00e      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a1b      	ldr	r2, [pc, #108]	@ (800c9ec <HAL_TIM_Base_Start+0xc4>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d009      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a19      	ldr	r2, [pc, #100]	@ (800c9f0 <HAL_TIM_Base_Start+0xc8>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d004      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a18      	ldr	r2, [pc, #96]	@ (800c9f4 <HAL_TIM_Base_Start+0xcc>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d111      	bne.n	800c9bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f003 0307 	and.w	r3, r3, #7
 800c9a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b06      	cmp	r3, #6
 800c9a8:	d010      	beq.n	800c9cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f042 0201 	orr.w	r2, r2, #1
 800c9b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ba:	e007      	b.n	800c9cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f042 0201 	orr.w	r2, r2, #1
 800c9ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	40010000 	.word	0x40010000
 800c9e0:	40000400 	.word	0x40000400
 800c9e4:	40000800 	.word	0x40000800
 800c9e8:	40000c00 	.word	0x40000c00
 800c9ec:	40010400 	.word	0x40010400
 800c9f0:	40014000 	.word	0x40014000
 800c9f4:	40001800 	.word	0x40001800

0800c9f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d001      	beq.n	800ca10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e04e      	b.n	800caae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0201 	orr.w	r2, r2, #1
 800ca26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a23      	ldr	r2, [pc, #140]	@ (800cabc <HAL_TIM_Base_Start_IT+0xc4>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d022      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca3a:	d01d      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a1f      	ldr	r2, [pc, #124]	@ (800cac0 <HAL_TIM_Base_Start_IT+0xc8>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d018      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a1e      	ldr	r2, [pc, #120]	@ (800cac4 <HAL_TIM_Base_Start_IT+0xcc>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d013      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a1c      	ldr	r2, [pc, #112]	@ (800cac8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00e      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cacc <HAL_TIM_Base_Start_IT+0xd4>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d009      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a19      	ldr	r2, [pc, #100]	@ (800cad0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d004      	beq.n	800ca78 <HAL_TIM_Base_Start_IT+0x80>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a18      	ldr	r2, [pc, #96]	@ (800cad4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d111      	bne.n	800ca9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f003 0307 	and.w	r3, r3, #7
 800ca82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b06      	cmp	r3, #6
 800ca88:	d010      	beq.n	800caac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f042 0201 	orr.w	r2, r2, #1
 800ca98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca9a:	e007      	b.n	800caac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f042 0201 	orr.w	r2, r2, #1
 800caaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	40010000 	.word	0x40010000
 800cac0:	40000400 	.word	0x40000400
 800cac4:	40000800 	.word	0x40000800
 800cac8:	40000c00 	.word	0x40000c00
 800cacc:	40010400 	.word	0x40010400
 800cad0:	40014000 	.word	0x40014000
 800cad4:	40001800 	.word	0x40001800

0800cad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	f003 0302 	and.w	r3, r3, #2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d020      	beq.n	800cb3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f003 0302 	and.w	r3, r3, #2
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d01b      	beq.n	800cb3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f06f 0202 	mvn.w	r2, #2
 800cb0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	f003 0303 	and.w	r3, r3, #3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f999 	bl	800ce5a <HAL_TIM_IC_CaptureCallback>
 800cb28:	e005      	b.n	800cb36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f98b 	bl	800ce46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f99c 	bl	800ce6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	f003 0304 	and.w	r3, r3, #4
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d020      	beq.n	800cb88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f003 0304 	and.w	r3, r3, #4
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d01b      	beq.n	800cb88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f06f 0204 	mvn.w	r2, #4
 800cb58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f973 	bl	800ce5a <HAL_TIM_IC_CaptureCallback>
 800cb74:	e005      	b.n	800cb82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f965 	bl	800ce46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f976 	bl	800ce6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f003 0308 	and.w	r3, r3, #8
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d020      	beq.n	800cbd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f003 0308 	and.w	r3, r3, #8
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01b      	beq.n	800cbd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f06f 0208 	mvn.w	r2, #8
 800cba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2204      	movs	r2, #4
 800cbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	f003 0303 	and.w	r3, r3, #3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f94d 	bl	800ce5a <HAL_TIM_IC_CaptureCallback>
 800cbc0:	e005      	b.n	800cbce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f93f 	bl	800ce46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f950 	bl	800ce6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	f003 0310 	and.w	r3, r3, #16
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d020      	beq.n	800cc20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f003 0310 	and.w	r3, r3, #16
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01b      	beq.n	800cc20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f06f 0210 	mvn.w	r2, #16
 800cbf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2208      	movs	r2, #8
 800cbf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	69db      	ldr	r3, [r3, #28]
 800cbfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f927 	bl	800ce5a <HAL_TIM_IC_CaptureCallback>
 800cc0c:	e005      	b.n	800cc1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f919 	bl	800ce46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f92a 	bl	800ce6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00c      	beq.n	800cc44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d007      	beq.n	800cc44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f06f 0201 	mvn.w	r2, #1
 800cc3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7fb f856 	bl	8007cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00c      	beq.n	800cc68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d007      	beq.n	800cc68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cc60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fae4 	bl	800d230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00c      	beq.n	800cc8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cc84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f8fb 	bl	800ce82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00c      	beq.n	800ccb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f003 0320 	and.w	r3, r3, #32
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d007      	beq.n	800ccb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f06f 0220 	mvn.w	r2, #32
 800cca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fab6 	bl	800d21c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ccb0:	bf00      	nop
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d101      	bne.n	800ccd4 <HAL_TIM_ConfigClockSource+0x1c>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	e0b4      	b.n	800ce3e <HAL_TIM_ConfigClockSource+0x186>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2202      	movs	r2, #2
 800cce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ccf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd0c:	d03e      	beq.n	800cd8c <HAL_TIM_ConfigClockSource+0xd4>
 800cd0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd12:	f200 8087 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd1a:	f000 8086 	beq.w	800ce2a <HAL_TIM_ConfigClockSource+0x172>
 800cd1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd22:	d87f      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd24:	2b70      	cmp	r3, #112	@ 0x70
 800cd26:	d01a      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0xa6>
 800cd28:	2b70      	cmp	r3, #112	@ 0x70
 800cd2a:	d87b      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd2c:	2b60      	cmp	r3, #96	@ 0x60
 800cd2e:	d050      	beq.n	800cdd2 <HAL_TIM_ConfigClockSource+0x11a>
 800cd30:	2b60      	cmp	r3, #96	@ 0x60
 800cd32:	d877      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd34:	2b50      	cmp	r3, #80	@ 0x50
 800cd36:	d03c      	beq.n	800cdb2 <HAL_TIM_ConfigClockSource+0xfa>
 800cd38:	2b50      	cmp	r3, #80	@ 0x50
 800cd3a:	d873      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd3c:	2b40      	cmp	r3, #64	@ 0x40
 800cd3e:	d058      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x13a>
 800cd40:	2b40      	cmp	r3, #64	@ 0x40
 800cd42:	d86f      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd44:	2b30      	cmp	r3, #48	@ 0x30
 800cd46:	d064      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x15a>
 800cd48:	2b30      	cmp	r3, #48	@ 0x30
 800cd4a:	d86b      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd4c:	2b20      	cmp	r3, #32
 800cd4e:	d060      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x15a>
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	d867      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d05c      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x15a>
 800cd58:	2b10      	cmp	r3, #16
 800cd5a:	d05a      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x15a>
 800cd5c:	e062      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd6e:	f000 f9b9 	bl	800d0e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cd80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	609a      	str	r2, [r3, #8]
      break;
 800cd8a:	e04f      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd9c:	f000 f9a2 	bl	800d0e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdae:	609a      	str	r2, [r3, #8]
      break;
 800cdb0:	e03c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f000 f916 	bl	800cff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2150      	movs	r1, #80	@ 0x50
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 f96f 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800cdd0:	e02c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdde:	461a      	mov	r2, r3
 800cde0:	f000 f935 	bl	800d04e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2160      	movs	r1, #96	@ 0x60
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 f95f 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800cdf0:	e01c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f000 f8f6 	bl	800cff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2140      	movs	r1, #64	@ 0x40
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 f94f 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800ce10:	e00c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f000 f946 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800ce22:	e003      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
      break;
 800ce28:	e000      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ce2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce4e:	bf00      	nop
 800ce50:	370c      	adds	r7, #12
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b083      	sub	sp, #12
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce62:	bf00      	nop
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
	...

0800ce98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a46      	ldr	r2, [pc, #280]	@ (800cfc4 <TIM_Base_SetConfig+0x12c>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d013      	beq.n	800ced8 <TIM_Base_SetConfig+0x40>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceb6:	d00f      	beq.n	800ced8 <TIM_Base_SetConfig+0x40>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a43      	ldr	r2, [pc, #268]	@ (800cfc8 <TIM_Base_SetConfig+0x130>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00b      	beq.n	800ced8 <TIM_Base_SetConfig+0x40>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a42      	ldr	r2, [pc, #264]	@ (800cfcc <TIM_Base_SetConfig+0x134>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d007      	beq.n	800ced8 <TIM_Base_SetConfig+0x40>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a41      	ldr	r2, [pc, #260]	@ (800cfd0 <TIM_Base_SetConfig+0x138>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d003      	beq.n	800ced8 <TIM_Base_SetConfig+0x40>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a40      	ldr	r2, [pc, #256]	@ (800cfd4 <TIM_Base_SetConfig+0x13c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d108      	bne.n	800ceea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4a35      	ldr	r2, [pc, #212]	@ (800cfc4 <TIM_Base_SetConfig+0x12c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d02b      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cef8:	d027      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a32      	ldr	r2, [pc, #200]	@ (800cfc8 <TIM_Base_SetConfig+0x130>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d023      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a31      	ldr	r2, [pc, #196]	@ (800cfcc <TIM_Base_SetConfig+0x134>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d01f      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a30      	ldr	r2, [pc, #192]	@ (800cfd0 <TIM_Base_SetConfig+0x138>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d01b      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a2f      	ldr	r2, [pc, #188]	@ (800cfd4 <TIM_Base_SetConfig+0x13c>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d017      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a2e      	ldr	r2, [pc, #184]	@ (800cfd8 <TIM_Base_SetConfig+0x140>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d013      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4a2d      	ldr	r2, [pc, #180]	@ (800cfdc <TIM_Base_SetConfig+0x144>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d00f      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a2c      	ldr	r2, [pc, #176]	@ (800cfe0 <TIM_Base_SetConfig+0x148>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d00b      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a2b      	ldr	r2, [pc, #172]	@ (800cfe4 <TIM_Base_SetConfig+0x14c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d007      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a2a      	ldr	r2, [pc, #168]	@ (800cfe8 <TIM_Base_SetConfig+0x150>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d003      	beq.n	800cf4a <TIM_Base_SetConfig+0xb2>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a29      	ldr	r2, [pc, #164]	@ (800cfec <TIM_Base_SetConfig+0x154>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d108      	bne.n	800cf5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	689a      	ldr	r2, [r3, #8]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a10      	ldr	r2, [pc, #64]	@ (800cfc4 <TIM_Base_SetConfig+0x12c>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d003      	beq.n	800cf90 <TIM_Base_SetConfig+0xf8>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a12      	ldr	r2, [pc, #72]	@ (800cfd4 <TIM_Base_SetConfig+0x13c>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d103      	bne.n	800cf98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	691a      	ldr	r2, [r3, #16]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d105      	bne.n	800cfb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	f023 0201 	bic.w	r2, r3, #1
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	611a      	str	r2, [r3, #16]
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	40010000 	.word	0x40010000
 800cfc8:	40000400 	.word	0x40000400
 800cfcc:	40000800 	.word	0x40000800
 800cfd0:	40000c00 	.word	0x40000c00
 800cfd4:	40010400 	.word	0x40010400
 800cfd8:	40014000 	.word	0x40014000
 800cfdc:	40014400 	.word	0x40014400
 800cfe0:	40014800 	.word	0x40014800
 800cfe4:	40001800 	.word	0x40001800
 800cfe8:	40001c00 	.word	0x40001c00
 800cfec:	40002000 	.word	0x40002000

0800cff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b087      	sub	sp, #28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	f023 0201 	bic.w	r2, r3, #1
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d01a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	011b      	lsls	r3, r3, #4
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	4313      	orrs	r3, r2
 800d024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f023 030a 	bic.w	r3, r3, #10
 800d02c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	4313      	orrs	r3, r2
 800d034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	621a      	str	r2, [r3, #32]
}
 800d042:	bf00      	nop
 800d044:	371c      	adds	r7, #28
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d04e:	b480      	push	{r7}
 800d050:	b087      	sub	sp, #28
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6a1b      	ldr	r3, [r3, #32]
 800d064:	f023 0210 	bic.w	r2, r3, #16
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	031b      	lsls	r3, r3, #12
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	4313      	orrs	r3, r2
 800d082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d08a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	011b      	lsls	r3, r3, #4
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	4313      	orrs	r3, r2
 800d094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	621a      	str	r2, [r3, #32]
}
 800d0a2:	bf00      	nop
 800d0a4:	371c      	adds	r7, #28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	f043 0307 	orr.w	r3, r3, #7
 800d0d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	609a      	str	r2, [r3, #8]
}
 800d0d8:	bf00      	nop
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d0fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	021a      	lsls	r2, r3, #8
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	431a      	orrs	r2, r3
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	4313      	orrs	r3, r2
 800d110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	609a      	str	r2, [r3, #8]
}
 800d118:	bf00      	nop
 800d11a:	371c      	adds	r7, #28
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d134:	2b01      	cmp	r3, #1
 800d136:	d101      	bne.n	800d13c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d138:	2302      	movs	r3, #2
 800d13a:	e05a      	b.n	800d1f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a21      	ldr	r2, [pc, #132]	@ (800d200 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d022      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d188:	d01d      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a1d      	ldr	r2, [pc, #116]	@ (800d204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d018      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a1b      	ldr	r2, [pc, #108]	@ (800d208 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d013      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a1a      	ldr	r2, [pc, #104]	@ (800d20c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d00e      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a18      	ldr	r2, [pc, #96]	@ (800d210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d009      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a17      	ldr	r2, [pc, #92]	@ (800d214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d004      	beq.n	800d1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a15      	ldr	r2, [pc, #84]	@ (800d218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d10c      	bne.n	800d1e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	40010000 	.word	0x40010000
 800d204:	40000400 	.word	0x40000400
 800d208:	40000800 	.word	0x40000800
 800d20c:	40000c00 	.word	0x40000c00
 800d210:	40010400 	.word	0x40010400
 800d214:	40014000 	.word	0x40014000
 800d218:	40001800 	.word	0x40001800

0800d21c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d224:	bf00      	nop
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e042      	b.n	800d2dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7fb f93c 	bl	80084e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2224      	movs	r2, #36	@ 0x24
 800d274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fb47 	bl	800d91c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	691a      	ldr	r2, [r3, #16]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d29c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	695a      	ldr	r2, [r3, #20]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d2ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68da      	ldr	r2, [r3, #12]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d2bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08a      	sub	sp, #40	@ 0x28
 800d2e8:	af02      	add	r7, sp, #8
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	603b      	str	r3, [r7, #0]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b20      	cmp	r3, #32
 800d302:	d175      	bne.n	800d3f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d002      	beq.n	800d310 <HAL_UART_Transmit+0x2c>
 800d30a:	88fb      	ldrh	r3, [r7, #6]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e06e      	b.n	800d3f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2221      	movs	r2, #33	@ 0x21
 800d31e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d322:	f7fb fa6f 	bl	8008804 <HAL_GetTick>
 800d326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	88fa      	ldrh	r2, [r7, #6]
 800d32c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	88fa      	ldrh	r2, [r7, #6]
 800d332:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d33c:	d108      	bne.n	800d350 <HAL_UART_Transmit+0x6c>
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d104      	bne.n	800d350 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	e003      	b.n	800d358 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d354:	2300      	movs	r3, #0
 800d356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d358:	e02e      	b.n	800d3b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2200      	movs	r2, #0
 800d362:	2180      	movs	r1, #128	@ 0x80
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f000 f9cb 	bl	800d700 <UART_WaitOnFlagUntilTimeout>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d005      	beq.n	800d37c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2220      	movs	r2, #32
 800d374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d378:	2303      	movs	r3, #3
 800d37a:	e03a      	b.n	800d3f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10b      	bne.n	800d39a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d390:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	3302      	adds	r3, #2
 800d396:	61bb      	str	r3, [r7, #24]
 800d398:	e007      	b.n	800d3aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	781a      	ldrb	r2, [r3, #0]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1cb      	bne.n	800d35a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2140      	movs	r1, #64	@ 0x40
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 f997 	bl	800d700 <UART_WaitOnFlagUntilTimeout>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2220      	movs	r2, #32
 800d3dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e006      	b.n	800d3f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2220      	movs	r2, #32
 800d3e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	e000      	b.n	800d3f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d3f0:	2302      	movs	r3, #2
  }
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3720      	adds	r7, #32
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b08a      	sub	sp, #40	@ 0x28
 800d3fe:	af02      	add	r7, sp, #8
 800d400:	60f8      	str	r0, [r7, #12]
 800d402:	60b9      	str	r1, [r7, #8]
 800d404:	603b      	str	r3, [r7, #0]
 800d406:	4613      	mov	r3, r2
 800d408:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d40a:	2300      	movs	r3, #0
 800d40c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b20      	cmp	r3, #32
 800d418:	f040 8081 	bne.w	800d51e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <HAL_UART_Receive+0x2e>
 800d422:	88fb      	ldrh	r3, [r7, #6]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e079      	b.n	800d520 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2222      	movs	r2, #34	@ 0x22
 800d436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d440:	f7fb f9e0 	bl	8008804 <HAL_GetTick>
 800d444:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	88fa      	ldrh	r2, [r7, #6]
 800d44a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	88fa      	ldrh	r2, [r7, #6]
 800d450:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d45a:	d108      	bne.n	800d46e <HAL_UART_Receive+0x74>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d104      	bne.n	800d46e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800d464:	2300      	movs	r3, #0
 800d466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	61bb      	str	r3, [r7, #24]
 800d46c:	e003      	b.n	800d476 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d476:	e047      	b.n	800d508 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2200      	movs	r2, #0
 800d480:	2120      	movs	r1, #32
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f000 f93c 	bl	800d700 <UART_WaitOnFlagUntilTimeout>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2220      	movs	r2, #32
 800d492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800d496:	2303      	movs	r3, #3
 800d498:	e042      	b.n	800d520 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10c      	bne.n	800d4ba <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	3302      	adds	r3, #2
 800d4b6:	61bb      	str	r3, [r7, #24]
 800d4b8:	e01f      	b.n	800d4fa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4c2:	d007      	beq.n	800d4d4 <HAL_UART_Receive+0xda>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <HAL_UART_Receive+0xe8>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	691b      	ldr	r3, [r3, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d106      	bne.n	800d4e2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	e008      	b.n	800d4f4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	3b01      	subs	r3, #1
 800d502:	b29a      	uxth	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1b2      	bne.n	800d478 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2220      	movs	r2, #32
 800d516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	e000      	b.n	800d520 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800d51e:	2302      	movs	r3, #2
  }
}
 800d520:	4618      	mov	r0, r3
 800d522:	3720      	adds	r7, #32
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	4613      	mov	r3, r2
 800d534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b20      	cmp	r3, #32
 800d540:	d112      	bne.n	800d568 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <HAL_UART_Receive_IT+0x26>
 800d548:	88fb      	ldrh	r3, [r7, #6]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d54e:	2301      	movs	r3, #1
 800d550:	e00b      	b.n	800d56a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d558:	88fb      	ldrh	r3, [r7, #6]
 800d55a:	461a      	mov	r2, r3
 800d55c:	68b9      	ldr	r1, [r7, #8]
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f000 f927 	bl	800d7b2 <UART_Start_Receive_IT>
 800d564:	4603      	mov	r3, r0
 800d566:	e000      	b.n	800d56a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d568:	2302      	movs	r3, #2
  }
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b09a      	sub	sp, #104	@ 0x68
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	330c      	adds	r3, #12
 800d582:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d58c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d58e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d592:	667b      	str	r3, [r7, #100]	@ 0x64
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	330c      	adds	r3, #12
 800d59a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d59c:	657a      	str	r2, [r7, #84]	@ 0x54
 800d59e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d5a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5a4:	e841 2300 	strex	r3, r2, [r1]
 800d5a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e5      	bne.n	800d57c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3314      	adds	r3, #20
 800d5b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ba:	e853 3f00 	ldrex	r3, [r3]
 800d5be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c2:	f023 0301 	bic.w	r3, r3, #1
 800d5c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3314      	adds	r3, #20
 800d5ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5d0:	643a      	str	r2, [r7, #64]	@ 0x40
 800d5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5d8:	e841 2300 	strex	r3, r2, [r1]
 800d5dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1e5      	bne.n	800d5b0 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d119      	bne.n	800d620 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	330c      	adds	r3, #12
 800d5f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	e853 3f00 	ldrex	r3, [r3]
 800d5fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	f023 0310 	bic.w	r3, r3, #16
 800d602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	330c      	adds	r3, #12
 800d60a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d60c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d614:	e841 2300 	strex	r3, r2, [r1]
 800d618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e5      	bne.n	800d5ec <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d62a:	2b40      	cmp	r3, #64	@ 0x40
 800d62c:	d13f      	bne.n	800d6ae <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	3314      	adds	r3, #20
 800d634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	e853 3f00 	ldrex	r3, [r3]
 800d63c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d644:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3314      	adds	r3, #20
 800d64c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d64e:	61ba      	str	r2, [r7, #24]
 800d650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d652:	6979      	ldr	r1, [r7, #20]
 800d654:	69ba      	ldr	r2, [r7, #24]
 800d656:	e841 2300 	strex	r3, r2, [r1]
 800d65a:	613b      	str	r3, [r7, #16]
   return(result);
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e5      	bne.n	800d62e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d013      	beq.n	800d692 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66e:	4a19      	ldr	r2, [pc, #100]	@ (800d6d4 <HAL_UART_AbortReceive_IT+0x160>)
 800d670:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d676:	4618      	mov	r0, r3
 800d678:	f7fc f99c 	bl	80099b4 <HAL_DMA_Abort_IT>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d022      	beq.n	800d6c8 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d68c:	4610      	mov	r0, r2
 800d68e:	4798      	blx	r3
 800d690:	e01a      	b.n	800d6c8 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2220      	movs	r2, #32
 800d69c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f820 	bl	800d6ec <HAL_UART_AbortReceiveCpltCallback>
 800d6ac:	e00c      	b.n	800d6c8 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f812 	bl	800d6ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3768      	adds	r7, #104	@ 0x68
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	0800d8ed 	.word	0x0800d8ed

0800d6d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	603b      	str	r3, [r7, #0]
 800d70c:	4613      	mov	r3, r2
 800d70e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d710:	e03b      	b.n	800d78a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d712:	6a3b      	ldr	r3, [r7, #32]
 800d714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d718:	d037      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d71a:	f7fb f873 	bl	8008804 <HAL_GetTick>
 800d71e:	4602      	mov	r2, r0
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	1ad3      	subs	r3, r2, r3
 800d724:	6a3a      	ldr	r2, [r7, #32]
 800d726:	429a      	cmp	r2, r3
 800d728:	d302      	bcc.n	800d730 <UART_WaitOnFlagUntilTimeout+0x30>
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d730:	2303      	movs	r3, #3
 800d732:	e03a      	b.n	800d7aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	f003 0304 	and.w	r3, r3, #4
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d023      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0x8a>
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	2b80      	cmp	r3, #128	@ 0x80
 800d746:	d020      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0x8a>
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	2b40      	cmp	r3, #64	@ 0x40
 800d74c:	d01d      	beq.n	800d78a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 0308 	and.w	r3, r3, #8
 800d758:	2b08      	cmp	r3, #8
 800d75a:	d116      	bne.n	800d78a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d75c:	2300      	movs	r3, #0
 800d75e:	617b      	str	r3, [r7, #20]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 f857 	bl	800d826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2208      	movs	r2, #8
 800d77c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e00f      	b.n	800d7aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	4013      	ands	r3, r2
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	429a      	cmp	r2, r3
 800d798:	bf0c      	ite	eq
 800d79a:	2301      	moveq	r3, #1
 800d79c:	2300      	movne	r3, #0
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d0b4      	beq.n	800d712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b085      	sub	sp, #20
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	60b9      	str	r1, [r7, #8]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	88fa      	ldrh	r2, [r7, #6]
 800d7d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2222      	movs	r2, #34	@ 0x22
 800d7dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d007      	beq.n	800d7f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68da      	ldr	r2, [r3, #12]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d7f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	695a      	ldr	r2, [r3, #20]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f042 0201 	orr.w	r2, r2, #1
 800d806:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68da      	ldr	r2, [r3, #12]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f042 0220 	orr.w	r2, r2, #32
 800d816:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d826:	b480      	push	{r7}
 800d828:	b095      	sub	sp, #84	@ 0x54
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	330c      	adds	r3, #12
 800d834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d838:	e853 3f00 	ldrex	r3, [r3]
 800d83c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	330c      	adds	r3, #12
 800d84c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d84e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d856:	e841 2300 	strex	r3, r2, [r1]
 800d85a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1e5      	bne.n	800d82e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3314      	adds	r3, #20
 800d868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	e853 3f00 	ldrex	r3, [r3]
 800d870:	61fb      	str	r3, [r7, #28]
   return(result);
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	f023 0301 	bic.w	r3, r3, #1
 800d878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3314      	adds	r3, #20
 800d880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d88a:	e841 2300 	strex	r3, r2, [r1]
 800d88e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e5      	bne.n	800d862 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d119      	bne.n	800d8d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	330c      	adds	r3, #12
 800d8a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	e853 3f00 	ldrex	r3, [r3]
 800d8ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	f023 0310 	bic.w	r3, r3, #16
 800d8b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	330c      	adds	r3, #12
 800d8bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8be:	61ba      	str	r2, [r7, #24]
 800d8c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c2:	6979      	ldr	r1, [r7, #20]
 800d8c4:	69ba      	ldr	r2, [r7, #24]
 800d8c6:	e841 2300 	strex	r3, r2, [r1]
 800d8ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1e5      	bne.n	800d89e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d8e0:	bf00      	nop
 800d8e2:	3754      	adds	r7, #84	@ 0x54
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2220      	movs	r2, #32
 800d904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f7ff feec 	bl	800d6ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d914:	bf00      	nop
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d91c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d920:	b0c0      	sub	sp, #256	@ 0x100
 800d922:	af00      	add	r7, sp, #0
 800d924:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	691b      	ldr	r3, [r3, #16]
 800d930:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d938:	68d9      	ldr	r1, [r3, #12]
 800d93a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	ea40 0301 	orr.w	r3, r0, r1
 800d944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d94a:	689a      	ldr	r2, [r3, #8]
 800d94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	431a      	orrs	r2, r3
 800d954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d958:	695b      	ldr	r3, [r3, #20]
 800d95a:	431a      	orrs	r2, r3
 800d95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d960:	69db      	ldr	r3, [r3, #28]
 800d962:	4313      	orrs	r3, r2
 800d964:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d974:	f021 010c 	bic.w	r1, r1, #12
 800d978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d982:	430b      	orrs	r3, r1
 800d984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d996:	6999      	ldr	r1, [r3, #24]
 800d998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	ea40 0301 	orr.w	r3, r0, r1
 800d9a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	4b8f      	ldr	r3, [pc, #572]	@ (800dbe8 <UART_SetConfig+0x2cc>)
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d005      	beq.n	800d9bc <UART_SetConfig+0xa0>
 800d9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	4b8d      	ldr	r3, [pc, #564]	@ (800dbec <UART_SetConfig+0x2d0>)
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d104      	bne.n	800d9c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d9bc:	f7fe f9c2 	bl	800bd44 <HAL_RCC_GetPCLK2Freq>
 800d9c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d9c4:	e003      	b.n	800d9ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d9c6:	f7fe f9a9 	bl	800bd1c <HAL_RCC_GetPCLK1Freq>
 800d9ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9d2:	69db      	ldr	r3, [r3, #28]
 800d9d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9d8:	f040 810c 	bne.w	800dbf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d9dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d9e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d9ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	462b      	mov	r3, r5
 800d9f2:	1891      	adds	r1, r2, r2
 800d9f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d9f6:	415b      	adcs	r3, r3
 800d9f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d9fe:	4621      	mov	r1, r4
 800da00:	eb12 0801 	adds.w	r8, r2, r1
 800da04:	4629      	mov	r1, r5
 800da06:	eb43 0901 	adc.w	r9, r3, r1
 800da0a:	f04f 0200 	mov.w	r2, #0
 800da0e:	f04f 0300 	mov.w	r3, #0
 800da12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800da16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800da1e:	4690      	mov	r8, r2
 800da20:	4699      	mov	r9, r3
 800da22:	4623      	mov	r3, r4
 800da24:	eb18 0303 	adds.w	r3, r8, r3
 800da28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da2c:	462b      	mov	r3, r5
 800da2e:	eb49 0303 	adc.w	r3, r9, r3
 800da32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800da42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800da46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800da4a:	460b      	mov	r3, r1
 800da4c:	18db      	adds	r3, r3, r3
 800da4e:	653b      	str	r3, [r7, #80]	@ 0x50
 800da50:	4613      	mov	r3, r2
 800da52:	eb42 0303 	adc.w	r3, r2, r3
 800da56:	657b      	str	r3, [r7, #84]	@ 0x54
 800da58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800da5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800da60:	f7f3 f912 	bl	8000c88 <__aeabi_uldivmod>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4b61      	ldr	r3, [pc, #388]	@ (800dbf0 <UART_SetConfig+0x2d4>)
 800da6a:	fba3 2302 	umull	r2, r3, r3, r2
 800da6e:	095b      	lsrs	r3, r3, #5
 800da70:	011c      	lsls	r4, r3, #4
 800da72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da76:	2200      	movs	r2, #0
 800da78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800da7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800da80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800da84:	4642      	mov	r2, r8
 800da86:	464b      	mov	r3, r9
 800da88:	1891      	adds	r1, r2, r2
 800da8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800da8c:	415b      	adcs	r3, r3
 800da8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800da94:	4641      	mov	r1, r8
 800da96:	eb12 0a01 	adds.w	sl, r2, r1
 800da9a:	4649      	mov	r1, r9
 800da9c:	eb43 0b01 	adc.w	fp, r3, r1
 800daa0:	f04f 0200 	mov.w	r2, #0
 800daa4:	f04f 0300 	mov.w	r3, #0
 800daa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800daac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dab4:	4692      	mov	sl, r2
 800dab6:	469b      	mov	fp, r3
 800dab8:	4643      	mov	r3, r8
 800daba:	eb1a 0303 	adds.w	r3, sl, r3
 800dabe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dac2:	464b      	mov	r3, r9
 800dac4:	eb4b 0303 	adc.w	r3, fp, r3
 800dac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dad8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800dadc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dae0:	460b      	mov	r3, r1
 800dae2:	18db      	adds	r3, r3, r3
 800dae4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dae6:	4613      	mov	r3, r2
 800dae8:	eb42 0303 	adc.w	r3, r2, r3
 800daec:	647b      	str	r3, [r7, #68]	@ 0x44
 800daee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800daf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800daf6:	f7f3 f8c7 	bl	8000c88 <__aeabi_uldivmod>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4611      	mov	r1, r2
 800db00:	4b3b      	ldr	r3, [pc, #236]	@ (800dbf0 <UART_SetConfig+0x2d4>)
 800db02:	fba3 2301 	umull	r2, r3, r3, r1
 800db06:	095b      	lsrs	r3, r3, #5
 800db08:	2264      	movs	r2, #100	@ 0x64
 800db0a:	fb02 f303 	mul.w	r3, r2, r3
 800db0e:	1acb      	subs	r3, r1, r3
 800db10:	00db      	lsls	r3, r3, #3
 800db12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800db16:	4b36      	ldr	r3, [pc, #216]	@ (800dbf0 <UART_SetConfig+0x2d4>)
 800db18:	fba3 2302 	umull	r2, r3, r3, r2
 800db1c:	095b      	lsrs	r3, r3, #5
 800db1e:	005b      	lsls	r3, r3, #1
 800db20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800db24:	441c      	add	r4, r3
 800db26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db2a:	2200      	movs	r2, #0
 800db2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800db30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800db34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800db38:	4642      	mov	r2, r8
 800db3a:	464b      	mov	r3, r9
 800db3c:	1891      	adds	r1, r2, r2
 800db3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800db40:	415b      	adcs	r3, r3
 800db42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800db48:	4641      	mov	r1, r8
 800db4a:	1851      	adds	r1, r2, r1
 800db4c:	6339      	str	r1, [r7, #48]	@ 0x30
 800db4e:	4649      	mov	r1, r9
 800db50:	414b      	adcs	r3, r1
 800db52:	637b      	str	r3, [r7, #52]	@ 0x34
 800db54:	f04f 0200 	mov.w	r2, #0
 800db58:	f04f 0300 	mov.w	r3, #0
 800db5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800db60:	4659      	mov	r1, fp
 800db62:	00cb      	lsls	r3, r1, #3
 800db64:	4651      	mov	r1, sl
 800db66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db6a:	4651      	mov	r1, sl
 800db6c:	00ca      	lsls	r2, r1, #3
 800db6e:	4610      	mov	r0, r2
 800db70:	4619      	mov	r1, r3
 800db72:	4603      	mov	r3, r0
 800db74:	4642      	mov	r2, r8
 800db76:	189b      	adds	r3, r3, r2
 800db78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800db7c:	464b      	mov	r3, r9
 800db7e:	460a      	mov	r2, r1
 800db80:	eb42 0303 	adc.w	r3, r2, r3
 800db84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800db94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800db98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800db9c:	460b      	mov	r3, r1
 800db9e:	18db      	adds	r3, r3, r3
 800dba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dba2:	4613      	mov	r3, r2
 800dba4:	eb42 0303 	adc.w	r3, r2, r3
 800dba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dbaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dbae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800dbb2:	f7f3 f869 	bl	8000c88 <__aeabi_uldivmod>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4b0d      	ldr	r3, [pc, #52]	@ (800dbf0 <UART_SetConfig+0x2d4>)
 800dbbc:	fba3 1302 	umull	r1, r3, r3, r2
 800dbc0:	095b      	lsrs	r3, r3, #5
 800dbc2:	2164      	movs	r1, #100	@ 0x64
 800dbc4:	fb01 f303 	mul.w	r3, r1, r3
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	00db      	lsls	r3, r3, #3
 800dbcc:	3332      	adds	r3, #50	@ 0x32
 800dbce:	4a08      	ldr	r2, [pc, #32]	@ (800dbf0 <UART_SetConfig+0x2d4>)
 800dbd0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd4:	095b      	lsrs	r3, r3, #5
 800dbd6:	f003 0207 	and.w	r2, r3, #7
 800dbda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4422      	add	r2, r4
 800dbe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dbe4:	e106      	b.n	800ddf4 <UART_SetConfig+0x4d8>
 800dbe6:	bf00      	nop
 800dbe8:	40011000 	.word	0x40011000
 800dbec:	40011400 	.word	0x40011400
 800dbf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dbf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dbfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dc02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800dc06:	4642      	mov	r2, r8
 800dc08:	464b      	mov	r3, r9
 800dc0a:	1891      	adds	r1, r2, r2
 800dc0c:	6239      	str	r1, [r7, #32]
 800dc0e:	415b      	adcs	r3, r3
 800dc10:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dc16:	4641      	mov	r1, r8
 800dc18:	1854      	adds	r4, r2, r1
 800dc1a:	4649      	mov	r1, r9
 800dc1c:	eb43 0501 	adc.w	r5, r3, r1
 800dc20:	f04f 0200 	mov.w	r2, #0
 800dc24:	f04f 0300 	mov.w	r3, #0
 800dc28:	00eb      	lsls	r3, r5, #3
 800dc2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dc2e:	00e2      	lsls	r2, r4, #3
 800dc30:	4614      	mov	r4, r2
 800dc32:	461d      	mov	r5, r3
 800dc34:	4643      	mov	r3, r8
 800dc36:	18e3      	adds	r3, r4, r3
 800dc38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	eb45 0303 	adc.w	r3, r5, r3
 800dc42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dc46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dc56:	f04f 0200 	mov.w	r2, #0
 800dc5a:	f04f 0300 	mov.w	r3, #0
 800dc5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800dc62:	4629      	mov	r1, r5
 800dc64:	008b      	lsls	r3, r1, #2
 800dc66:	4621      	mov	r1, r4
 800dc68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	008a      	lsls	r2, r1, #2
 800dc70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800dc74:	f7f3 f808 	bl	8000c88 <__aeabi_uldivmod>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4b60      	ldr	r3, [pc, #384]	@ (800de00 <UART_SetConfig+0x4e4>)
 800dc7e:	fba3 2302 	umull	r2, r3, r3, r2
 800dc82:	095b      	lsrs	r3, r3, #5
 800dc84:	011c      	lsls	r4, r3, #4
 800dc86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dc90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dc94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800dc98:	4642      	mov	r2, r8
 800dc9a:	464b      	mov	r3, r9
 800dc9c:	1891      	adds	r1, r2, r2
 800dc9e:	61b9      	str	r1, [r7, #24]
 800dca0:	415b      	adcs	r3, r3
 800dca2:	61fb      	str	r3, [r7, #28]
 800dca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dca8:	4641      	mov	r1, r8
 800dcaa:	1851      	adds	r1, r2, r1
 800dcac:	6139      	str	r1, [r7, #16]
 800dcae:	4649      	mov	r1, r9
 800dcb0:	414b      	adcs	r3, r1
 800dcb2:	617b      	str	r3, [r7, #20]
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	f04f 0300 	mov.w	r3, #0
 800dcbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dcc0:	4659      	mov	r1, fp
 800dcc2:	00cb      	lsls	r3, r1, #3
 800dcc4:	4651      	mov	r1, sl
 800dcc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dcca:	4651      	mov	r1, sl
 800dccc:	00ca      	lsls	r2, r1, #3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4642      	mov	r2, r8
 800dcd6:	189b      	adds	r3, r3, r2
 800dcd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcdc:	464b      	mov	r3, r9
 800dcde:	460a      	mov	r2, r1
 800dce0:	eb42 0303 	adc.w	r3, r2, r3
 800dce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dcf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dcf4:	f04f 0200 	mov.w	r2, #0
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800dd00:	4649      	mov	r1, r9
 800dd02:	008b      	lsls	r3, r1, #2
 800dd04:	4641      	mov	r1, r8
 800dd06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd0a:	4641      	mov	r1, r8
 800dd0c:	008a      	lsls	r2, r1, #2
 800dd0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dd12:	f7f2 ffb9 	bl	8000c88 <__aeabi_uldivmod>
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4b38      	ldr	r3, [pc, #224]	@ (800de00 <UART_SetConfig+0x4e4>)
 800dd1e:	fba3 2301 	umull	r2, r3, r3, r1
 800dd22:	095b      	lsrs	r3, r3, #5
 800dd24:	2264      	movs	r2, #100	@ 0x64
 800dd26:	fb02 f303 	mul.w	r3, r2, r3
 800dd2a:	1acb      	subs	r3, r1, r3
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	3332      	adds	r3, #50	@ 0x32
 800dd30:	4a33      	ldr	r2, [pc, #204]	@ (800de00 <UART_SetConfig+0x4e4>)
 800dd32:	fba2 2303 	umull	r2, r3, r2, r3
 800dd36:	095b      	lsrs	r3, r3, #5
 800dd38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd3c:	441c      	add	r4, r3
 800dd3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dd42:	2200      	movs	r2, #0
 800dd44:	673b      	str	r3, [r7, #112]	@ 0x70
 800dd46:	677a      	str	r2, [r7, #116]	@ 0x74
 800dd48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	464b      	mov	r3, r9
 800dd50:	1891      	adds	r1, r2, r2
 800dd52:	60b9      	str	r1, [r7, #8]
 800dd54:	415b      	adcs	r3, r3
 800dd56:	60fb      	str	r3, [r7, #12]
 800dd58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dd5c:	4641      	mov	r1, r8
 800dd5e:	1851      	adds	r1, r2, r1
 800dd60:	6039      	str	r1, [r7, #0]
 800dd62:	4649      	mov	r1, r9
 800dd64:	414b      	adcs	r3, r1
 800dd66:	607b      	str	r3, [r7, #4]
 800dd68:	f04f 0200 	mov.w	r2, #0
 800dd6c:	f04f 0300 	mov.w	r3, #0
 800dd70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dd74:	4659      	mov	r1, fp
 800dd76:	00cb      	lsls	r3, r1, #3
 800dd78:	4651      	mov	r1, sl
 800dd7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd7e:	4651      	mov	r1, sl
 800dd80:	00ca      	lsls	r2, r1, #3
 800dd82:	4610      	mov	r0, r2
 800dd84:	4619      	mov	r1, r3
 800dd86:	4603      	mov	r3, r0
 800dd88:	4642      	mov	r2, r8
 800dd8a:	189b      	adds	r3, r3, r2
 800dd8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd8e:	464b      	mov	r3, r9
 800dd90:	460a      	mov	r2, r1
 800dd92:	eb42 0303 	adc.w	r3, r2, r3
 800dd96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dda2:	667a      	str	r2, [r7, #100]	@ 0x64
 800dda4:	f04f 0200 	mov.w	r2, #0
 800dda8:	f04f 0300 	mov.w	r3, #0
 800ddac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ddb0:	4649      	mov	r1, r9
 800ddb2:	008b      	lsls	r3, r1, #2
 800ddb4:	4641      	mov	r1, r8
 800ddb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ddba:	4641      	mov	r1, r8
 800ddbc:	008a      	lsls	r2, r1, #2
 800ddbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ddc2:	f7f2 ff61 	bl	8000c88 <__aeabi_uldivmod>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4b0d      	ldr	r3, [pc, #52]	@ (800de00 <UART_SetConfig+0x4e4>)
 800ddcc:	fba3 1302 	umull	r1, r3, r3, r2
 800ddd0:	095b      	lsrs	r3, r3, #5
 800ddd2:	2164      	movs	r1, #100	@ 0x64
 800ddd4:	fb01 f303 	mul.w	r3, r1, r3
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	3332      	adds	r3, #50	@ 0x32
 800ddde:	4a08      	ldr	r2, [pc, #32]	@ (800de00 <UART_SetConfig+0x4e4>)
 800dde0:	fba2 2303 	umull	r2, r3, r2, r3
 800dde4:	095b      	lsrs	r3, r3, #5
 800dde6:	f003 020f 	and.w	r2, r3, #15
 800ddea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4422      	add	r2, r4
 800ddf2:	609a      	str	r2, [r3, #8]
}
 800ddf4:	bf00      	nop
 800ddf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de00:	51eb851f 	.word	0x51eb851f

0800de04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800de04:	b580      	push	{r7, lr}
 800de06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800de08:	4b05      	ldr	r3, [pc, #20]	@ (800de20 <SysTick_Handler+0x1c>)
 800de0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800de0c:	f001 fdda 	bl	800f9c4 <xTaskGetSchedulerState>
 800de10:	4603      	mov	r3, r0
 800de12:	2b01      	cmp	r3, #1
 800de14:	d001      	beq.n	800de1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800de16:	f002 fccf 	bl	80107b8 <xPortSysTickHandler>
  }
}
 800de1a:	bf00      	nop
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	e000e010 	.word	0xe000e010

0800de24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	4a07      	ldr	r2, [pc, #28]	@ (800de50 <vApplicationGetIdleTaskMemory+0x2c>)
 800de34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	4a06      	ldr	r2, [pc, #24]	@ (800de54 <vApplicationGetIdleTaskMemory+0x30>)
 800de3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2280      	movs	r2, #128	@ 0x80
 800de40:	601a      	str	r2, [r3, #0]
}
 800de42:	bf00      	nop
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	20003dbc 	.word	0x20003dbc
 800de54:	20003e64 	.word	0x20003e64

0800de58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4a07      	ldr	r2, [pc, #28]	@ (800de84 <vApplicationGetTimerTaskMemory+0x2c>)
 800de68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	4a06      	ldr	r2, [pc, #24]	@ (800de88 <vApplicationGetTimerTaskMemory+0x30>)
 800de6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800de76:	601a      	str	r2, [r3, #0]
}
 800de78:	bf00      	nop
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	20004064 	.word	0x20004064
 800de88:	2000410c 	.word	0x2000410c

0800de8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f103 0208 	add.w	r2, r3, #8
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f04f 32ff 	mov.w	r2, #4294967295
 800dea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f103 0208 	add.w	r2, r3, #8
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f103 0208 	add.w	r2, r3, #8
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800deda:	bf00      	nop
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dee6:	b480      	push	{r7}
 800dee8:	b085      	sub	sp, #20
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	689a      	ldr	r2, [r3, #8]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	683a      	ldr	r2, [r7, #0]
 800df0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	683a      	ldr	r2, [r7, #0]
 800df10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	601a      	str	r2, [r3, #0]
}
 800df22:	bf00      	nop
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df2e:	b480      	push	{r7}
 800df30:	b085      	sub	sp, #20
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
 800df36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df44:	d103      	bne.n	800df4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	60fb      	str	r3, [r7, #12]
 800df4c:	e00c      	b.n	800df68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3308      	adds	r3, #8
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	e002      	b.n	800df5c <vListInsert+0x2e>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	429a      	cmp	r2, r3
 800df66:	d2f6      	bcs.n	800df56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	601a      	str	r2, [r3, #0]
}
 800df94:	bf00      	nop
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	6892      	ldr	r2, [r2, #8]
 800dfb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	6852      	ldr	r2, [r2, #4]
 800dfc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d103      	bne.n	800dfd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	689a      	ldr	r2, [r3, #8]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	1e5a      	subs	r2, r3, #1
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10b      	bne.n	800e020 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	e7fd      	b.n	800e01c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e020:	f002 fb3a 	bl	8010698 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e02c:	68f9      	ldr	r1, [r7, #12]
 800e02e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e030:	fb01 f303 	mul.w	r3, r1, r3
 800e034:	441a      	add	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e050:	3b01      	subs	r3, #1
 800e052:	68f9      	ldr	r1, [r7, #12]
 800e054:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e056:	fb01 f303 	mul.w	r3, r1, r3
 800e05a:	441a      	add	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	22ff      	movs	r2, #255	@ 0xff
 800e064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	22ff      	movs	r2, #255	@ 0xff
 800e06c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d114      	bne.n	800e0a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	691b      	ldr	r3, [r3, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d01a      	beq.n	800e0b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3310      	adds	r3, #16
 800e082:	4618      	mov	r0, r3
 800e084:	f001 fad8 	bl	800f638 <xTaskRemoveFromEventList>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d012      	beq.n	800e0b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e08e:	4b0d      	ldr	r3, [pc, #52]	@ (800e0c4 <xQueueGenericReset+0xd0>)
 800e090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	e009      	b.n	800e0b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	3310      	adds	r3, #16
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff fef1 	bl	800de8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3324      	adds	r3, #36	@ 0x24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff feec 	bl	800de8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0b4:	f002 fb22 	bl	80106fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0b8:	2301      	movs	r3, #1
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	e000ed04 	.word	0xe000ed04

0800e0c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b08e      	sub	sp, #56	@ 0x38
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10b      	bne.n	800e0f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
 800e0f2:	e7fd      	b.n	800e0f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10b      	bne.n	800e112 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fe:	f383 8811 	msr	BASEPRI, r3
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e10c:	bf00      	nop
 800e10e:	bf00      	nop
 800e110:	e7fd      	b.n	800e10e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <xQueueGenericCreateStatic+0x56>
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <xQueueGenericCreateStatic+0x5a>
 800e11e:	2301      	movs	r3, #1
 800e120:	e000      	b.n	800e124 <xQueueGenericCreateStatic+0x5c>
 800e122:	2300      	movs	r3, #0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10b      	bne.n	800e140 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	623b      	str	r3, [r7, #32]
}
 800e13a:	bf00      	nop
 800e13c:	bf00      	nop
 800e13e:	e7fd      	b.n	800e13c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <xQueueGenericCreateStatic+0x84>
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d101      	bne.n	800e150 <xQueueGenericCreateStatic+0x88>
 800e14c:	2301      	movs	r3, #1
 800e14e:	e000      	b.n	800e152 <xQueueGenericCreateStatic+0x8a>
 800e150:	2300      	movs	r3, #0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10b      	bne.n	800e16e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	61fb      	str	r3, [r7, #28]
}
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	e7fd      	b.n	800e16a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e16e:	2350      	movs	r3, #80	@ 0x50
 800e170:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2b50      	cmp	r3, #80	@ 0x50
 800e176:	d00b      	beq.n	800e190 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	61bb      	str	r3, [r7, #24]
}
 800e18a:	bf00      	nop
 800e18c:	bf00      	nop
 800e18e:	e7fd      	b.n	800e18c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e190:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00d      	beq.n	800e1b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	68b9      	ldr	r1, [r7, #8]
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f000 f840 	bl	800e238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3730      	adds	r7, #48	@ 0x30
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b08a      	sub	sp, #40	@ 0x28
 800e1c6:	af02      	add	r7, sp, #8
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10b      	bne.n	800e1ee <xQueueGenericCreate+0x2c>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	613b      	str	r3, [r7, #16]
}
 800e1e8:	bf00      	nop
 800e1ea:	bf00      	nop
 800e1ec:	e7fd      	b.n	800e1ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	fb02 f303 	mul.w	r3, r2, r3
 800e1f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	3350      	adds	r3, #80	@ 0x50
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f002 fb6d 	bl	80108dc <pvPortMalloc>
 800e202:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d011      	beq.n	800e22e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	3350      	adds	r3, #80	@ 0x50
 800e212:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e21c:	79fa      	ldrb	r2, [r7, #7]
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	4613      	mov	r3, r2
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	68b9      	ldr	r1, [r7, #8]
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 f805 	bl	800e238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e22e:	69bb      	ldr	r3, [r7, #24]
	}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d103      	bne.n	800e254 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	e002      	b.n	800e25a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e266:	2101      	movs	r1, #1
 800e268:	69b8      	ldr	r0, [r7, #24]
 800e26a:	f7ff fec3 	bl	800dff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	78fa      	ldrb	r2, [r7, #3]
 800e272:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e276:	bf00      	nop
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00e      	beq.n	800e2aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e29e:	2300      	movs	r3, #0
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f81d 	bl	800e2e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e2aa:	bf00      	nop
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b086      	sub	sp, #24
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	617b      	str	r3, [r7, #20]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e2c4:	79fb      	ldrb	r3, [r7, #7]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	6939      	ldr	r1, [r7, #16]
 800e2ca:	6978      	ldr	r0, [r7, #20]
 800e2cc:	f7ff ff79 	bl	800e1c2 <xQueueGenericCreate>
 800e2d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7ff ffd3 	bl	800e27e <prvInitialiseMutex>

		return xNewQueue;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
	}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
	...

0800e2e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b08e      	sub	sp, #56	@ 0x38
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
 800e2f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10b      	bne.n	800e318 <xQueueGenericSend+0x34>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e312:	bf00      	nop
 800e314:	bf00      	nop
 800e316:	e7fd      	b.n	800e314 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d103      	bne.n	800e326 <xQueueGenericSend+0x42>
 800e31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e322:	2b00      	cmp	r3, #0
 800e324:	d101      	bne.n	800e32a <xQueueGenericSend+0x46>
 800e326:	2301      	movs	r3, #1
 800e328:	e000      	b.n	800e32c <xQueueGenericSend+0x48>
 800e32a:	2300      	movs	r3, #0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10b      	bne.n	800e348 <xQueueGenericSend+0x64>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e342:	bf00      	nop
 800e344:	bf00      	nop
 800e346:	e7fd      	b.n	800e344 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d103      	bne.n	800e356 <xQueueGenericSend+0x72>
 800e34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e352:	2b01      	cmp	r3, #1
 800e354:	d101      	bne.n	800e35a <xQueueGenericSend+0x76>
 800e356:	2301      	movs	r3, #1
 800e358:	e000      	b.n	800e35c <xQueueGenericSend+0x78>
 800e35a:	2300      	movs	r3, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10b      	bne.n	800e378 <xQueueGenericSend+0x94>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	623b      	str	r3, [r7, #32]
}
 800e372:	bf00      	nop
 800e374:	bf00      	nop
 800e376:	e7fd      	b.n	800e374 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e378:	f001 fb24 	bl	800f9c4 <xTaskGetSchedulerState>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d102      	bne.n	800e388 <xQueueGenericSend+0xa4>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <xQueueGenericSend+0xa8>
 800e388:	2301      	movs	r3, #1
 800e38a:	e000      	b.n	800e38e <xQueueGenericSend+0xaa>
 800e38c:	2300      	movs	r3, #0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10b      	bne.n	800e3aa <xQueueGenericSend+0xc6>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	61fb      	str	r3, [r7, #28]
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	e7fd      	b.n	800e3a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3aa:	f002 f975 	bl	8010698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d302      	bcc.n	800e3c0 <xQueueGenericSend+0xdc>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d129      	bne.n	800e414 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3c6:	f000 fb37 	bl	800ea38 <prvCopyDataToQueue>
 800e3ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d010      	beq.n	800e3f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	3324      	adds	r3, #36	@ 0x24
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f001 f92d 	bl	800f638 <xTaskRemoveFromEventList>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d013      	beq.n	800e40c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3e4:	4b3f      	ldr	r3, [pc, #252]	@ (800e4e4 <xQueueGenericSend+0x200>)
 800e3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ea:	601a      	str	r2, [r3, #0]
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	e00a      	b.n	800e40c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d007      	beq.n	800e40c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3fc:	4b39      	ldr	r3, [pc, #228]	@ (800e4e4 <xQueueGenericSend+0x200>)
 800e3fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e40c:	f002 f976 	bl	80106fc <vPortExitCritical>
				return pdPASS;
 800e410:	2301      	movs	r3, #1
 800e412:	e063      	b.n	800e4dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e41a:	f002 f96f 	bl	80106fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	e05c      	b.n	800e4dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e424:	2b00      	cmp	r3, #0
 800e426:	d106      	bne.n	800e436 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e428:	f107 0314 	add.w	r3, r7, #20
 800e42c:	4618      	mov	r0, r3
 800e42e:	f001 f967 	bl	800f700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e432:	2301      	movs	r3, #1
 800e434:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e436:	f002 f961 	bl	80106fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e43a:	f000 fecf 	bl	800f1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e43e:	f002 f92b 	bl	8010698 <vPortEnterCritical>
 800e442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e448:	b25b      	sxtb	r3, r3
 800e44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44e:	d103      	bne.n	800e458 <xQueueGenericSend+0x174>
 800e450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e452:	2200      	movs	r2, #0
 800e454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e45a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e45e:	b25b      	sxtb	r3, r3
 800e460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e464:	d103      	bne.n	800e46e <xQueueGenericSend+0x18a>
 800e466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e468:	2200      	movs	r2, #0
 800e46a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e46e:	f002 f945 	bl	80106fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e472:	1d3a      	adds	r2, r7, #4
 800e474:	f107 0314 	add.w	r3, r7, #20
 800e478:	4611      	mov	r1, r2
 800e47a:	4618      	mov	r0, r3
 800e47c:	f001 f956 	bl	800f72c <xTaskCheckForTimeOut>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d124      	bne.n	800e4d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e486:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e488:	f000 fbce 	bl	800ec28 <prvIsQueueFull>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d018      	beq.n	800e4c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e494:	3310      	adds	r3, #16
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4611      	mov	r1, r2
 800e49a:	4618      	mov	r0, r3
 800e49c:	f001 f87a 	bl	800f594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e4a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4a2:	f000 fb59 	bl	800eb58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e4a6:	f000 fea7 	bl	800f1f8 <xTaskResumeAll>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f47f af7c 	bne.w	800e3aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e4 <xQueueGenericSend+0x200>)
 800e4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b8:	601a      	str	r2, [r3, #0]
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	e772      	b.n	800e3aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e4c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4c6:	f000 fb47 	bl	800eb58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4ca:	f000 fe95 	bl	800f1f8 <xTaskResumeAll>
 800e4ce:	e76c      	b.n	800e3aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4d2:	f000 fb41 	bl	800eb58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4d6:	f000 fe8f 	bl	800f1f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e4da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3738      	adds	r7, #56	@ 0x38
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	e000ed04 	.word	0xe000ed04

0800e4e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b090      	sub	sp, #64	@ 0x40
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10b      	bne.n	800e518 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e512:	bf00      	nop
 800e514:	bf00      	nop
 800e516:	e7fd      	b.n	800e514 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d103      	bne.n	800e526 <xQueueGenericSendFromISR+0x3e>
 800e51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e522:	2b00      	cmp	r3, #0
 800e524:	d101      	bne.n	800e52a <xQueueGenericSendFromISR+0x42>
 800e526:	2301      	movs	r3, #1
 800e528:	e000      	b.n	800e52c <xQueueGenericSendFromISR+0x44>
 800e52a:	2300      	movs	r3, #0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d10b      	bne.n	800e548 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e542:	bf00      	nop
 800e544:	bf00      	nop
 800e546:	e7fd      	b.n	800e544 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	2b02      	cmp	r3, #2
 800e54c:	d103      	bne.n	800e556 <xQueueGenericSendFromISR+0x6e>
 800e54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e552:	2b01      	cmp	r3, #1
 800e554:	d101      	bne.n	800e55a <xQueueGenericSendFromISR+0x72>
 800e556:	2301      	movs	r3, #1
 800e558:	e000      	b.n	800e55c <xQueueGenericSendFromISR+0x74>
 800e55a:	2300      	movs	r3, #0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10b      	bne.n	800e578 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	623b      	str	r3, [r7, #32]
}
 800e572:	bf00      	nop
 800e574:	bf00      	nop
 800e576:	e7fd      	b.n	800e574 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e578:	f002 f96e 	bl	8010858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e57c:	f3ef 8211 	mrs	r2, BASEPRI
 800e580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	61fa      	str	r2, [r7, #28]
 800e592:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e594:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e596:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d302      	bcc.n	800e5aa <xQueueGenericSendFromISR+0xc2>
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d12f      	bne.n	800e60a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	68b9      	ldr	r1, [r7, #8]
 800e5be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5c0:	f000 fa3a 	bl	800ea38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5cc:	d112      	bne.n	800e5f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d016      	beq.n	800e604 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d8:	3324      	adds	r3, #36	@ 0x24
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f001 f82c 	bl	800f638 <xTaskRemoveFromEventList>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00e      	beq.n	800e604 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	601a      	str	r2, [r3, #0]
 800e5f2:	e007      	b.n	800e604 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	b25a      	sxtb	r2, r3
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e604:	2301      	movs	r3, #1
 800e606:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e608:	e001      	b.n	800e60e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e60a:	2300      	movs	r3, #0
 800e60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e610:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e618:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3740      	adds	r7, #64	@ 0x40
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08c      	sub	sp, #48	@ 0x30
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e630:	2300      	movs	r3, #0
 800e632:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10b      	bne.n	800e656 <xQueueReceive+0x32>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	623b      	str	r3, [r7, #32]
}
 800e650:	bf00      	nop
 800e652:	bf00      	nop
 800e654:	e7fd      	b.n	800e652 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d103      	bne.n	800e664 <xQueueReceive+0x40>
 800e65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <xQueueReceive+0x44>
 800e664:	2301      	movs	r3, #1
 800e666:	e000      	b.n	800e66a <xQueueReceive+0x46>
 800e668:	2300      	movs	r3, #0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10b      	bne.n	800e686 <xQueueReceive+0x62>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	61fb      	str	r3, [r7, #28]
}
 800e680:	bf00      	nop
 800e682:	bf00      	nop
 800e684:	e7fd      	b.n	800e682 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e686:	f001 f99d 	bl	800f9c4 <xTaskGetSchedulerState>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <xQueueReceive+0x72>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <xQueueReceive+0x76>
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <xQueueReceive+0x78>
 800e69a:	2300      	movs	r3, #0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d10b      	bne.n	800e6b8 <xQueueReceive+0x94>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	61bb      	str	r3, [r7, #24]
}
 800e6b2:	bf00      	nop
 800e6b4:	bf00      	nop
 800e6b6:	e7fd      	b.n	800e6b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6b8:	f001 ffee 	bl	8010698 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d01f      	beq.n	800e708 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6cc:	f000 fa1e 	bl	800eb0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d2:	1e5a      	subs	r2, r3, #1
 800e6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00f      	beq.n	800e700 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e2:	3310      	adds	r3, #16
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f000 ffa7 	bl	800f638 <xTaskRemoveFromEventList>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d007      	beq.n	800e700 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6f0:	4b3c      	ldr	r3, [pc, #240]	@ (800e7e4 <xQueueReceive+0x1c0>)
 800e6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e700:	f001 fffc 	bl	80106fc <vPortExitCritical>
				return pdPASS;
 800e704:	2301      	movs	r3, #1
 800e706:	e069      	b.n	800e7dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d103      	bne.n	800e716 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e70e:	f001 fff5 	bl	80106fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e712:	2300      	movs	r3, #0
 800e714:	e062      	b.n	800e7dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e71c:	f107 0310 	add.w	r3, r7, #16
 800e720:	4618      	mov	r0, r3
 800e722:	f000 ffed 	bl	800f700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e726:	2301      	movs	r3, #1
 800e728:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e72a:	f001 ffe7 	bl	80106fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e72e:	f000 fd55 	bl	800f1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e732:	f001 ffb1 	bl	8010698 <vPortEnterCritical>
 800e736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e73c:	b25b      	sxtb	r3, r3
 800e73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e742:	d103      	bne.n	800e74c <xQueueReceive+0x128>
 800e744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e746:	2200      	movs	r2, #0
 800e748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e752:	b25b      	sxtb	r3, r3
 800e754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e758:	d103      	bne.n	800e762 <xQueueReceive+0x13e>
 800e75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e762:	f001 ffcb 	bl	80106fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e766:	1d3a      	adds	r2, r7, #4
 800e768:	f107 0310 	add.w	r3, r7, #16
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 ffdc 	bl	800f72c <xTaskCheckForTimeOut>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d123      	bne.n	800e7c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e77a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e77c:	f000 fa3e 	bl	800ebfc <prvIsQueueEmpty>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d017      	beq.n	800e7b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e788:	3324      	adds	r3, #36	@ 0x24
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f000 ff00 	bl	800f594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e796:	f000 f9df 	bl	800eb58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e79a:	f000 fd2d 	bl	800f1f8 <xTaskResumeAll>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d189      	bne.n	800e6b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e7a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e4 <xQueueReceive+0x1c0>)
 800e7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	f3bf 8f6f 	isb	sy
 800e7b4:	e780      	b.n	800e6b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7b8:	f000 f9ce 	bl	800eb58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7bc:	f000 fd1c 	bl	800f1f8 <xTaskResumeAll>
 800e7c0:	e77a      	b.n	800e6b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e7c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7c4:	f000 f9c8 	bl	800eb58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7c8:	f000 fd16 	bl	800f1f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7ce:	f000 fa15 	bl	800ebfc <prvIsQueueEmpty>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f43f af6f 	beq.w	800e6b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e7da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3730      	adds	r7, #48	@ 0x30
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	e000ed04 	.word	0xe000ed04

0800e7e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08e      	sub	sp, #56	@ 0x38
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10b      	bne.n	800e81c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	623b      	str	r3, [r7, #32]
}
 800e816:	bf00      	nop
 800e818:	bf00      	nop
 800e81a:	e7fd      	b.n	800e818 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00b      	beq.n	800e83c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	61fb      	str	r3, [r7, #28]
}
 800e836:	bf00      	nop
 800e838:	bf00      	nop
 800e83a:	e7fd      	b.n	800e838 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e83c:	f001 f8c2 	bl	800f9c4 <xTaskGetSchedulerState>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <xQueueSemaphoreTake+0x64>
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <xQueueSemaphoreTake+0x68>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e000      	b.n	800e852 <xQueueSemaphoreTake+0x6a>
 800e850:	2300      	movs	r3, #0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10b      	bne.n	800e86e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	61bb      	str	r3, [r7, #24]
}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	e7fd      	b.n	800e86a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e86e:	f001 ff13 	bl	8010698 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e876:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d024      	beq.n	800e8c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e880:	1e5a      	subs	r2, r3, #1
 800e882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e884:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d104      	bne.n	800e898 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e88e:	f001 fa13 	bl	800fcb8 <pvTaskIncrementMutexHeldCount>
 800e892:	4602      	mov	r2, r0
 800e894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e896:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00f      	beq.n	800e8c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a2:	3310      	adds	r3, #16
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 fec7 	bl	800f638 <xTaskRemoveFromEventList>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d007      	beq.n	800e8c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8b0:	4b54      	ldr	r3, [pc, #336]	@ (800ea04 <xQueueSemaphoreTake+0x21c>)
 800e8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8c0:	f001 ff1c 	bl	80106fc <vPortExitCritical>
				return pdPASS;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	e098      	b.n	800e9fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d112      	bne.n	800e8f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00b      	beq.n	800e8ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	617b      	str	r3, [r7, #20]
}
 800e8e6:	bf00      	nop
 800e8e8:	bf00      	nop
 800e8ea:	e7fd      	b.n	800e8e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e8ec:	f001 ff06 	bl	80106fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e082      	b.n	800e9fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8fa:	f107 030c 	add.w	r3, r7, #12
 800e8fe:	4618      	mov	r0, r3
 800e900:	f000 fefe 	bl	800f700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e904:	2301      	movs	r3, #1
 800e906:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e908:	f001 fef8 	bl	80106fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e90c:	f000 fc66 	bl	800f1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e910:	f001 fec2 	bl	8010698 <vPortEnterCritical>
 800e914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e91a:	b25b      	sxtb	r3, r3
 800e91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e920:	d103      	bne.n	800e92a <xQueueSemaphoreTake+0x142>
 800e922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e930:	b25b      	sxtb	r3, r3
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e936:	d103      	bne.n	800e940 <xQueueSemaphoreTake+0x158>
 800e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e940:	f001 fedc 	bl	80106fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e944:	463a      	mov	r2, r7
 800e946:	f107 030c 	add.w	r3, r7, #12
 800e94a:	4611      	mov	r1, r2
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 feed 	bl	800f72c <xTaskCheckForTimeOut>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d132      	bne.n	800e9be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e95a:	f000 f94f 	bl	800ebfc <prvIsQueueEmpty>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d026      	beq.n	800e9b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d109      	bne.n	800e980 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e96c:	f001 fe94 	bl	8010698 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	4618      	mov	r0, r3
 800e976:	f001 f843 	bl	800fa00 <xTaskPriorityInherit>
 800e97a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e97c:	f001 febe 	bl	80106fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	3324      	adds	r3, #36	@ 0x24
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	4611      	mov	r1, r2
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 fe03 	bl	800f594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e98e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e990:	f000 f8e2 	bl	800eb58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e994:	f000 fc30 	bl	800f1f8 <xTaskResumeAll>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f47f af67 	bne.w	800e86e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e9a0:	4b18      	ldr	r3, [pc, #96]	@ (800ea04 <xQueueSemaphoreTake+0x21c>)
 800e9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	e75d      	b.n	800e86e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e9b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9b4:	f000 f8d0 	bl	800eb58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9b8:	f000 fc1e 	bl	800f1f8 <xTaskResumeAll>
 800e9bc:	e757      	b.n	800e86e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e9be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9c0:	f000 f8ca 	bl	800eb58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9c4:	f000 fc18 	bl	800f1f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9ca:	f000 f917 	bl	800ebfc <prvIsQueueEmpty>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f43f af4c 	beq.w	800e86e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00d      	beq.n	800e9f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e9dc:	f001 fe5c 	bl	8010698 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e9e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9e2:	f000 f811 	bl	800ea08 <prvGetDisinheritPriorityAfterTimeout>
 800e9e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f001 f8de 	bl	800fbb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e9f4:	f001 fe82 	bl	80106fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3738      	adds	r7, #56	@ 0x38
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d006      	beq.n	800ea26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	e001      	b.n	800ea2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ea26:	2300      	movs	r3, #0
 800ea28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ea44:	2300      	movs	r3, #0
 800ea46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10d      	bne.n	800ea72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d14d      	bne.n	800eafa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	4618      	mov	r0, r3
 800ea64:	f001 f834 	bl	800fad0 <xTaskPriorityDisinherit>
 800ea68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	609a      	str	r2, [r3, #8]
 800ea70:	e043      	b.n	800eafa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d119      	bne.n	800eaac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6858      	ldr	r0, [r3, #4]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea80:	461a      	mov	r2, r3
 800ea82:	68b9      	ldr	r1, [r7, #8]
 800ea84:	f003 f937 	bl	8011cf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea90:	441a      	add	r2, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d32b      	bcc.n	800eafa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	605a      	str	r2, [r3, #4]
 800eaaa:	e026      	b.n	800eafa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	68d8      	ldr	r0, [r3, #12]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eab4:	461a      	mov	r2, r3
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	f003 f91d 	bl	8011cf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	68da      	ldr	r2, [r3, #12]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eac4:	425b      	negs	r3, r3
 800eac6:	441a      	add	r2, r3
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	68da      	ldr	r2, [r3, #12]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d207      	bcs.n	800eae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	689a      	ldr	r2, [r3, #8]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae0:	425b      	negs	r3, r3
 800eae2:	441a      	add	r2, r3
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d105      	bne.n	800eafa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800eb02:	697b      	ldr	r3, [r7, #20]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d018      	beq.n	800eb50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68da      	ldr	r2, [r3, #12]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb26:	441a      	add	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	68da      	ldr	r2, [r3, #12]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d303      	bcc.n	800eb40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	68d9      	ldr	r1, [r3, #12]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb48:	461a      	mov	r2, r3
 800eb4a:	6838      	ldr	r0, [r7, #0]
 800eb4c:	f003 f8d3 	bl	8011cf6 <memcpy>
	}
}
 800eb50:	bf00      	nop
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb60:	f001 fd9a 	bl	8010698 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb6c:	e011      	b.n	800eb92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d012      	beq.n	800eb9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	3324      	adds	r3, #36	@ 0x24
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f000 fd5c 	bl	800f638 <xTaskRemoveFromEventList>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb86:	f000 fe35 	bl	800f7f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dce9      	bgt.n	800eb6e <prvUnlockQueue+0x16>
 800eb9a:	e000      	b.n	800eb9e <prvUnlockQueue+0x46>
					break;
 800eb9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	22ff      	movs	r2, #255	@ 0xff
 800eba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eba6:	f001 fda9 	bl	80106fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ebaa:	f001 fd75 	bl	8010698 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ebb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebb6:	e011      	b.n	800ebdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d012      	beq.n	800ebe6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	3310      	adds	r3, #16
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 fd37 	bl	800f638 <xTaskRemoveFromEventList>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ebd0:	f000 fe10 	bl	800f7f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ebd4:	7bbb      	ldrb	r3, [r7, #14]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	dce9      	bgt.n	800ebb8 <prvUnlockQueue+0x60>
 800ebe4:	e000      	b.n	800ebe8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ebe6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	22ff      	movs	r2, #255	@ 0xff
 800ebec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ebf0:	f001 fd84 	bl	80106fc <vPortExitCritical>
}
 800ebf4:	bf00      	nop
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec04:	f001 fd48 	bl	8010698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d102      	bne.n	800ec16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec10:	2301      	movs	r3, #1
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e001      	b.n	800ec1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec1a:	f001 fd6f 	bl	80106fc <vPortExitCritical>

	return xReturn;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec30:	f001 fd32 	bl	8010698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d102      	bne.n	800ec46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec40:	2301      	movs	r3, #1
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e001      	b.n	800ec4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec46:	2300      	movs	r3, #0
 800ec48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec4a:	f001 fd57 	bl	80106fc <vPortExitCritical>

	return xReturn;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec62:	2300      	movs	r3, #0
 800ec64:	60fb      	str	r3, [r7, #12]
 800ec66:	e014      	b.n	800ec92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec68:	4a0f      	ldr	r2, [pc, #60]	@ (800eca8 <vQueueAddToRegistry+0x50>)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10b      	bne.n	800ec8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec74:	490c      	ldr	r1, [pc, #48]	@ (800eca8 <vQueueAddToRegistry+0x50>)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	683a      	ldr	r2, [r7, #0]
 800ec7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec7e:	4a0a      	ldr	r2, [pc, #40]	@ (800eca8 <vQueueAddToRegistry+0x50>)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	4413      	add	r3, r2
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec8a:	e006      	b.n	800ec9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b07      	cmp	r3, #7
 800ec96:	d9e7      	bls.n	800ec68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec98:	bf00      	nop
 800ec9a:	bf00      	nop
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	2000450c 	.word	0x2000450c

0800ecac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b086      	sub	sp, #24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ecbc:	f001 fcec 	bl	8010698 <vPortEnterCritical>
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eccc:	d103      	bne.n	800ecd6 <vQueueWaitForMessageRestricted+0x2a>
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ecdc:	b25b      	sxtb	r3, r3
 800ecde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece2:	d103      	bne.n	800ecec <vQueueWaitForMessageRestricted+0x40>
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ecec:	f001 fd06 	bl	80106fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d106      	bne.n	800ed06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	3324      	adds	r3, #36	@ 0x24
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	68b9      	ldr	r1, [r7, #8]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 fc6d 	bl	800f5e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed06:	6978      	ldr	r0, [r7, #20]
 800ed08:	f7ff ff26 	bl	800eb58 <prvUnlockQueue>
	}
 800ed0c:	bf00      	nop
 800ed0e:	3718      	adds	r7, #24
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b08e      	sub	sp, #56	@ 0x38
 800ed18:	af04      	add	r7, sp, #16
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10b      	bne.n	800ed40 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	623b      	str	r3, [r7, #32]
}
 800ed3a:	bf00      	nop
 800ed3c:	bf00      	nop
 800ed3e:	e7fd      	b.n	800ed3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ed40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10b      	bne.n	800ed5e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ed46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	61fb      	str	r3, [r7, #28]
}
 800ed58:	bf00      	nop
 800ed5a:	bf00      	nop
 800ed5c:	e7fd      	b.n	800ed5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed5e:	23a8      	movs	r3, #168	@ 0xa8
 800ed60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2ba8      	cmp	r3, #168	@ 0xa8
 800ed66:	d00b      	beq.n	800ed80 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	61bb      	str	r3, [r7, #24]
}
 800ed7a:	bf00      	nop
 800ed7c:	bf00      	nop
 800ed7e:	e7fd      	b.n	800ed7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d01e      	beq.n	800edc6 <xTaskCreateStatic+0xb2>
 800ed88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d01b      	beq.n	800edc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eda0:	2300      	movs	r3, #0
 800eda2:	9303      	str	r3, [sp, #12]
 800eda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda6:	9302      	str	r3, [sp, #8]
 800eda8:	f107 0314 	add.w	r3, r7, #20
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	68b9      	ldr	r1, [r7, #8]
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 f851 	bl	800ee60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800edbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edc0:	f000 f8f6 	bl	800efb0 <prvAddNewTaskToReadyList>
 800edc4:	e001      	b.n	800edca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800edca:	697b      	ldr	r3, [r7, #20]
	}
 800edcc:	4618      	mov	r0, r3
 800edce:	3728      	adds	r7, #40	@ 0x28
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08c      	sub	sp, #48	@ 0x30
 800edd8:	af04      	add	r7, sp, #16
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	603b      	str	r3, [r7, #0]
 800ede0:	4613      	mov	r3, r2
 800ede2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ede4:	88fb      	ldrh	r3, [r7, #6]
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4618      	mov	r0, r3
 800edea:	f001 fd77 	bl	80108dc <pvPortMalloc>
 800edee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00e      	beq.n	800ee14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800edf6:	20a8      	movs	r0, #168	@ 0xa8
 800edf8:	f001 fd70 	bl	80108dc <pvPortMalloc>
 800edfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	631a      	str	r2, [r3, #48]	@ 0x30
 800ee0a:	e005      	b.n	800ee18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee0c:	6978      	ldr	r0, [r7, #20]
 800ee0e:	f001 fe33 	bl	8010a78 <vPortFree>
 800ee12:	e001      	b.n	800ee18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee14:	2300      	movs	r3, #0
 800ee16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d017      	beq.n	800ee4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee26:	88fa      	ldrh	r2, [r7, #6]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	9303      	str	r3, [sp, #12]
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	9302      	str	r3, [sp, #8]
 800ee30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	68b9      	ldr	r1, [r7, #8]
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f000 f80f 	bl	800ee60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee42:	69f8      	ldr	r0, [r7, #28]
 800ee44:	f000 f8b4 	bl	800efb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	61bb      	str	r3, [r7, #24]
 800ee4c:	e002      	b.n	800ee54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee54:	69bb      	ldr	r3, [r7, #24]
	}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3720      	adds	r7, #32
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
	...

0800ee60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b088      	sub	sp, #32
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
 800ee6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee70:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	461a      	mov	r2, r3
 800ee78:	21a5      	movs	r1, #165	@ 0xa5
 800ee7a:	f002 fe28 	bl	8011ace <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	4413      	add	r3, r2
 800ee8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	f023 0307 	bic.w	r3, r3, #7
 800ee96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	f003 0307 	and.w	r3, r3, #7
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00b      	beq.n	800eeba <prvInitialiseNewTask+0x5a>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	617b      	str	r3, [r7, #20]
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
 800eeb8:	e7fd      	b.n	800eeb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d01f      	beq.n	800ef00 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eec0:	2300      	movs	r3, #0
 800eec2:	61fb      	str	r3, [r7, #28]
 800eec4:	e012      	b.n	800eeec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	4413      	add	r3, r2
 800eecc:	7819      	ldrb	r1, [r3, #0]
 800eece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	4413      	add	r3, r2
 800eed4:	3334      	adds	r3, #52	@ 0x34
 800eed6:	460a      	mov	r2, r1
 800eed8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	4413      	add	r3, r2
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d006      	beq.n	800eef4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	3301      	adds	r3, #1
 800eeea:	61fb      	str	r3, [r7, #28]
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	2b0f      	cmp	r3, #15
 800eef0:	d9e9      	bls.n	800eec6 <prvInitialiseNewTask+0x66>
 800eef2:	e000      	b.n	800eef6 <prvInitialiseNewTask+0x96>
			{
				break;
 800eef4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eefe:	e003      	b.n	800ef08 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef0a:	2b37      	cmp	r3, #55	@ 0x37
 800ef0c:	d901      	bls.n	800ef12 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef0e:	2337      	movs	r3, #55	@ 0x37
 800ef10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef1c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef20:	2200      	movs	r2, #0
 800ef22:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	3304      	adds	r3, #4
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fe ffcf 	bl	800decc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef30:	3318      	adds	r3, #24
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe ffca 	bl	800decc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef50:	2200      	movs	r2, #0
 800ef52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef60:	3354      	adds	r3, #84	@ 0x54
 800ef62:	224c      	movs	r2, #76	@ 0x4c
 800ef64:	2100      	movs	r1, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f002 fdb1 	bl	8011ace <memset>
 800ef6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef6e:	4a0d      	ldr	r2, [pc, #52]	@ (800efa4 <prvInitialiseNewTask+0x144>)
 800ef70:	659a      	str	r2, [r3, #88]	@ 0x58
 800ef72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef74:	4a0c      	ldr	r2, [pc, #48]	@ (800efa8 <prvInitialiseNewTask+0x148>)
 800ef76:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ef78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef7a:	4a0c      	ldr	r2, [pc, #48]	@ (800efac <prvInitialiseNewTask+0x14c>)
 800ef7c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef7e:	683a      	ldr	r2, [r7, #0]
 800ef80:	68f9      	ldr	r1, [r7, #12]
 800ef82:	69b8      	ldr	r0, [r7, #24]
 800ef84:	f001 fa5a 	bl	801043c <pxPortInitialiseStack>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef9a:	bf00      	nop
 800ef9c:	3720      	adds	r7, #32
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	2000e7e0 	.word	0x2000e7e0
 800efa8:	2000e848 	.word	0x2000e848
 800efac:	2000e8b0 	.word	0x2000e8b0

0800efb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800efb8:	f001 fb6e 	bl	8010698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800efbc:	4b2d      	ldr	r3, [pc, #180]	@ (800f074 <prvAddNewTaskToReadyList+0xc4>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3301      	adds	r3, #1
 800efc2:	4a2c      	ldr	r2, [pc, #176]	@ (800f074 <prvAddNewTaskToReadyList+0xc4>)
 800efc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800efc6:	4b2c      	ldr	r3, [pc, #176]	@ (800f078 <prvAddNewTaskToReadyList+0xc8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d109      	bne.n	800efe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800efce:	4a2a      	ldr	r2, [pc, #168]	@ (800f078 <prvAddNewTaskToReadyList+0xc8>)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800efd4:	4b27      	ldr	r3, [pc, #156]	@ (800f074 <prvAddNewTaskToReadyList+0xc4>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d110      	bne.n	800effe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800efdc:	f000 fc2e 	bl	800f83c <prvInitialiseTaskLists>
 800efe0:	e00d      	b.n	800effe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800efe2:	4b26      	ldr	r3, [pc, #152]	@ (800f07c <prvAddNewTaskToReadyList+0xcc>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d109      	bne.n	800effe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800efea:	4b23      	ldr	r3, [pc, #140]	@ (800f078 <prvAddNewTaskToReadyList+0xc8>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d802      	bhi.n	800effe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eff8:	4a1f      	ldr	r2, [pc, #124]	@ (800f078 <prvAddNewTaskToReadyList+0xc8>)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800effe:	4b20      	ldr	r3, [pc, #128]	@ (800f080 <prvAddNewTaskToReadyList+0xd0>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	3301      	adds	r3, #1
 800f004:	4a1e      	ldr	r2, [pc, #120]	@ (800f080 <prvAddNewTaskToReadyList+0xd0>)
 800f006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f008:	4b1d      	ldr	r3, [pc, #116]	@ (800f080 <prvAddNewTaskToReadyList+0xd0>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f014:	4b1b      	ldr	r3, [pc, #108]	@ (800f084 <prvAddNewTaskToReadyList+0xd4>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d903      	bls.n	800f024 <prvAddNewTaskToReadyList+0x74>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f020:	4a18      	ldr	r2, [pc, #96]	@ (800f084 <prvAddNewTaskToReadyList+0xd4>)
 800f022:	6013      	str	r3, [r2, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f028:	4613      	mov	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	4a15      	ldr	r2, [pc, #84]	@ (800f088 <prvAddNewTaskToReadyList+0xd8>)
 800f032:	441a      	add	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3304      	adds	r3, #4
 800f038:	4619      	mov	r1, r3
 800f03a:	4610      	mov	r0, r2
 800f03c:	f7fe ff53 	bl	800dee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f040:	f001 fb5c 	bl	80106fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f044:	4b0d      	ldr	r3, [pc, #52]	@ (800f07c <prvAddNewTaskToReadyList+0xcc>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00e      	beq.n	800f06a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f04c:	4b0a      	ldr	r3, [pc, #40]	@ (800f078 <prvAddNewTaskToReadyList+0xc8>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f056:	429a      	cmp	r2, r3
 800f058:	d207      	bcs.n	800f06a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f05a:	4b0c      	ldr	r3, [pc, #48]	@ (800f08c <prvAddNewTaskToReadyList+0xdc>)
 800f05c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f060:	601a      	str	r2, [r3, #0]
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20004a20 	.word	0x20004a20
 800f078:	2000454c 	.word	0x2000454c
 800f07c:	20004a2c 	.word	0x20004a2c
 800f080:	20004a3c 	.word	0x20004a3c
 800f084:	20004a28 	.word	0x20004a28
 800f088:	20004550 	.word	0x20004550
 800f08c:	e000ed04 	.word	0xe000ed04

0800f090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f098:	2300      	movs	r3, #0
 800f09a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d018      	beq.n	800f0d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f0a2:	4b14      	ldr	r3, [pc, #80]	@ (800f0f4 <vTaskDelay+0x64>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00b      	beq.n	800f0c2 <vTaskDelay+0x32>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	60bb      	str	r3, [r7, #8]
}
 800f0bc:	bf00      	nop
 800f0be:	bf00      	nop
 800f0c0:	e7fd      	b.n	800f0be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f0c2:	f000 f88b 	bl	800f1dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fe09 	bl	800fce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0ce:	f000 f893 	bl	800f1f8 <xTaskResumeAll>
 800f0d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d107      	bne.n	800f0ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f0da:	4b07      	ldr	r3, [pc, #28]	@ (800f0f8 <vTaskDelay+0x68>)
 800f0dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0ea:	bf00      	nop
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	20004a48 	.word	0x20004a48
 800f0f8:	e000ed04 	.word	0xe000ed04

0800f0fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08a      	sub	sp, #40	@ 0x28
 800f100:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f102:	2300      	movs	r3, #0
 800f104:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f106:	2300      	movs	r3, #0
 800f108:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f10a:	463a      	mov	r2, r7
 800f10c:	1d39      	adds	r1, r7, #4
 800f10e:	f107 0308 	add.w	r3, r7, #8
 800f112:	4618      	mov	r0, r3
 800f114:	f7fe fe86 	bl	800de24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f118:	6839      	ldr	r1, [r7, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	9202      	str	r2, [sp, #8]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	2300      	movs	r3, #0
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	2300      	movs	r3, #0
 800f128:	460a      	mov	r2, r1
 800f12a:	4924      	ldr	r1, [pc, #144]	@ (800f1bc <vTaskStartScheduler+0xc0>)
 800f12c:	4824      	ldr	r0, [pc, #144]	@ (800f1c0 <vTaskStartScheduler+0xc4>)
 800f12e:	f7ff fdf1 	bl	800ed14 <xTaskCreateStatic>
 800f132:	4603      	mov	r3, r0
 800f134:	4a23      	ldr	r2, [pc, #140]	@ (800f1c4 <vTaskStartScheduler+0xc8>)
 800f136:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f138:	4b22      	ldr	r3, [pc, #136]	@ (800f1c4 <vTaskStartScheduler+0xc8>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d002      	beq.n	800f146 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f140:	2301      	movs	r3, #1
 800f142:	617b      	str	r3, [r7, #20]
 800f144:	e001      	b.n	800f14a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f146:	2300      	movs	r3, #0
 800f148:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d102      	bne.n	800f156 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f150:	f000 fe1a 	bl	800fd88 <xTimerCreateTimerTask>
 800f154:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d11b      	bne.n	800f194 <vTaskStartScheduler+0x98>
	__asm volatile
 800f15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f160:	f383 8811 	msr	BASEPRI, r3
 800f164:	f3bf 8f6f 	isb	sy
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	613b      	str	r3, [r7, #16]
}
 800f16e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f170:	4b15      	ldr	r3, [pc, #84]	@ (800f1c8 <vTaskStartScheduler+0xcc>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3354      	adds	r3, #84	@ 0x54
 800f176:	4a15      	ldr	r2, [pc, #84]	@ (800f1cc <vTaskStartScheduler+0xd0>)
 800f178:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f17a:	4b15      	ldr	r3, [pc, #84]	@ (800f1d0 <vTaskStartScheduler+0xd4>)
 800f17c:	f04f 32ff 	mov.w	r2, #4294967295
 800f180:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f182:	4b14      	ldr	r3, [pc, #80]	@ (800f1d4 <vTaskStartScheduler+0xd8>)
 800f184:	2201      	movs	r2, #1
 800f186:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f188:	4b13      	ldr	r3, [pc, #76]	@ (800f1d8 <vTaskStartScheduler+0xdc>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f18e:	f001 f9df 	bl	8010550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f192:	e00f      	b.n	800f1b4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19a:	d10b      	bne.n	800f1b4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a0:	f383 8811 	msr	BASEPRI, r3
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	60fb      	str	r3, [r7, #12]
}
 800f1ae:	bf00      	nop
 800f1b0:	bf00      	nop
 800f1b2:	e7fd      	b.n	800f1b0 <vTaskStartScheduler+0xb4>
}
 800f1b4:	bf00      	nop
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	08014470 	.word	0x08014470
 800f1c0:	0800f80d 	.word	0x0800f80d
 800f1c4:	20004a44 	.word	0x20004a44
 800f1c8:	2000454c 	.word	0x2000454c
 800f1cc:	2000007c 	.word	0x2000007c
 800f1d0:	20004a40 	.word	0x20004a40
 800f1d4:	20004a2c 	.word	0x20004a2c
 800f1d8:	20004a24 	.word	0x20004a24

0800f1dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1dc:	b480      	push	{r7}
 800f1de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f1e0:	4b04      	ldr	r3, [pc, #16]	@ (800f1f4 <vTaskSuspendAll+0x18>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	4a03      	ldr	r2, [pc, #12]	@ (800f1f4 <vTaskSuspendAll+0x18>)
 800f1e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f1ea:	bf00      	nop
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	20004a48 	.word	0x20004a48

0800f1f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1fe:	2300      	movs	r3, #0
 800f200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f202:	2300      	movs	r3, #0
 800f204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f206:	4b42      	ldr	r3, [pc, #264]	@ (800f310 <xTaskResumeAll+0x118>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10b      	bne.n	800f226 <xTaskResumeAll+0x2e>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	603b      	str	r3, [r7, #0]
}
 800f220:	bf00      	nop
 800f222:	bf00      	nop
 800f224:	e7fd      	b.n	800f222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f226:	f001 fa37 	bl	8010698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f22a:	4b39      	ldr	r3, [pc, #228]	@ (800f310 <xTaskResumeAll+0x118>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3b01      	subs	r3, #1
 800f230:	4a37      	ldr	r2, [pc, #220]	@ (800f310 <xTaskResumeAll+0x118>)
 800f232:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f234:	4b36      	ldr	r3, [pc, #216]	@ (800f310 <xTaskResumeAll+0x118>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d162      	bne.n	800f302 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f23c:	4b35      	ldr	r3, [pc, #212]	@ (800f314 <xTaskResumeAll+0x11c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d05e      	beq.n	800f302 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f244:	e02f      	b.n	800f2a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f246:	4b34      	ldr	r3, [pc, #208]	@ (800f318 <xTaskResumeAll+0x120>)
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3318      	adds	r3, #24
 800f252:	4618      	mov	r0, r3
 800f254:	f7fe fea4 	bl	800dfa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	3304      	adds	r3, #4
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fe fe9f 	bl	800dfa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f266:	4b2d      	ldr	r3, [pc, #180]	@ (800f31c <xTaskResumeAll+0x124>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d903      	bls.n	800f276 <xTaskResumeAll+0x7e>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f272:	4a2a      	ldr	r2, [pc, #168]	@ (800f31c <xTaskResumeAll+0x124>)
 800f274:	6013      	str	r3, [r2, #0]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27a:	4613      	mov	r3, r2
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	4413      	add	r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4a27      	ldr	r2, [pc, #156]	@ (800f320 <xTaskResumeAll+0x128>)
 800f284:	441a      	add	r2, r3
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	3304      	adds	r3, #4
 800f28a:	4619      	mov	r1, r3
 800f28c:	4610      	mov	r0, r2
 800f28e:	f7fe fe2a 	bl	800dee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f296:	4b23      	ldr	r3, [pc, #140]	@ (800f324 <xTaskResumeAll+0x12c>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d302      	bcc.n	800f2a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f2a0:	4b21      	ldr	r3, [pc, #132]	@ (800f328 <xTaskResumeAll+0x130>)
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2a6:	4b1c      	ldr	r3, [pc, #112]	@ (800f318 <xTaskResumeAll+0x120>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1cb      	bne.n	800f246 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f2b4:	f000 fb66 	bl	800f984 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f2b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f32c <xTaskResumeAll+0x134>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d010      	beq.n	800f2e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2c4:	f000 f846 	bl	800f354 <xTaskIncrementTick>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d002      	beq.n	800f2d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f2ce:	4b16      	ldr	r3, [pc, #88]	@ (800f328 <xTaskResumeAll+0x130>)
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1f1      	bne.n	800f2c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f2e0:	4b12      	ldr	r3, [pc, #72]	@ (800f32c <xTaskResumeAll+0x134>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2e6:	4b10      	ldr	r3, [pc, #64]	@ (800f328 <xTaskResumeAll+0x130>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d009      	beq.n	800f302 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f330 <xTaskResumeAll+0x138>)
 800f2f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f302:	f001 f9fb 	bl	80106fc <vPortExitCritical>

	return xAlreadyYielded;
 800f306:	68bb      	ldr	r3, [r7, #8]
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	20004a48 	.word	0x20004a48
 800f314:	20004a20 	.word	0x20004a20
 800f318:	200049e0 	.word	0x200049e0
 800f31c:	20004a28 	.word	0x20004a28
 800f320:	20004550 	.word	0x20004550
 800f324:	2000454c 	.word	0x2000454c
 800f328:	20004a34 	.word	0x20004a34
 800f32c:	20004a30 	.word	0x20004a30
 800f330:	e000ed04 	.word	0xe000ed04

0800f334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f33a:	4b05      	ldr	r3, [pc, #20]	@ (800f350 <xTaskGetTickCount+0x1c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f340:	687b      	ldr	r3, [r7, #4]
}
 800f342:	4618      	mov	r0, r3
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	20004a24 	.word	0x20004a24

0800f354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f35e:	4b4f      	ldr	r3, [pc, #316]	@ (800f49c <xTaskIncrementTick+0x148>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f040 8090 	bne.w	800f488 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f368:	4b4d      	ldr	r3, [pc, #308]	@ (800f4a0 <xTaskIncrementTick+0x14c>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3301      	adds	r3, #1
 800f36e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f370:	4a4b      	ldr	r2, [pc, #300]	@ (800f4a0 <xTaskIncrementTick+0x14c>)
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d121      	bne.n	800f3c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f37c:	4b49      	ldr	r3, [pc, #292]	@ (800f4a4 <xTaskIncrementTick+0x150>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00b      	beq.n	800f39e <xTaskIncrementTick+0x4a>
	__asm volatile
 800f386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f38a:	f383 8811 	msr	BASEPRI, r3
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	f3bf 8f4f 	dsb	sy
 800f396:	603b      	str	r3, [r7, #0]
}
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	e7fd      	b.n	800f39a <xTaskIncrementTick+0x46>
 800f39e:	4b41      	ldr	r3, [pc, #260]	@ (800f4a4 <xTaskIncrementTick+0x150>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	4b40      	ldr	r3, [pc, #256]	@ (800f4a8 <xTaskIncrementTick+0x154>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4a3e      	ldr	r2, [pc, #248]	@ (800f4a4 <xTaskIncrementTick+0x150>)
 800f3aa:	6013      	str	r3, [r2, #0]
 800f3ac:	4a3e      	ldr	r2, [pc, #248]	@ (800f4a8 <xTaskIncrementTick+0x154>)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6013      	str	r3, [r2, #0]
 800f3b2:	4b3e      	ldr	r3, [pc, #248]	@ (800f4ac <xTaskIncrementTick+0x158>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	4a3c      	ldr	r2, [pc, #240]	@ (800f4ac <xTaskIncrementTick+0x158>)
 800f3ba:	6013      	str	r3, [r2, #0]
 800f3bc:	f000 fae2 	bl	800f984 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3c0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4b0 <xTaskIncrementTick+0x15c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	693a      	ldr	r2, [r7, #16]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d349      	bcc.n	800f45e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3ca:	4b36      	ldr	r3, [pc, #216]	@ (800f4a4 <xTaskIncrementTick+0x150>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d104      	bne.n	800f3de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3d4:	4b36      	ldr	r3, [pc, #216]	@ (800f4b0 <xTaskIncrementTick+0x15c>)
 800f3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3da:	601a      	str	r2, [r3, #0]
					break;
 800f3dc:	e03f      	b.n	800f45e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3de:	4b31      	ldr	r3, [pc, #196]	@ (800f4a4 <xTaskIncrementTick+0x150>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3ee:	693a      	ldr	r2, [r7, #16]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d203      	bcs.n	800f3fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3f6:	4a2e      	ldr	r2, [pc, #184]	@ (800f4b0 <xTaskIncrementTick+0x15c>)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3fc:	e02f      	b.n	800f45e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	3304      	adds	r3, #4
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe fdcc 	bl	800dfa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d004      	beq.n	800f41a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	3318      	adds	r3, #24
 800f414:	4618      	mov	r0, r3
 800f416:	f7fe fdc3 	bl	800dfa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f41e:	4b25      	ldr	r3, [pc, #148]	@ (800f4b4 <xTaskIncrementTick+0x160>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	429a      	cmp	r2, r3
 800f424:	d903      	bls.n	800f42e <xTaskIncrementTick+0xda>
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f42a:	4a22      	ldr	r2, [pc, #136]	@ (800f4b4 <xTaskIncrementTick+0x160>)
 800f42c:	6013      	str	r3, [r2, #0]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f432:	4613      	mov	r3, r2
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4413      	add	r3, r2
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	4a1f      	ldr	r2, [pc, #124]	@ (800f4b8 <xTaskIncrementTick+0x164>)
 800f43c:	441a      	add	r2, r3
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	3304      	adds	r3, #4
 800f442:	4619      	mov	r1, r3
 800f444:	4610      	mov	r0, r2
 800f446:	f7fe fd4e 	bl	800dee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f44e:	4b1b      	ldr	r3, [pc, #108]	@ (800f4bc <xTaskIncrementTick+0x168>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f454:	429a      	cmp	r2, r3
 800f456:	d3b8      	bcc.n	800f3ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f458:	2301      	movs	r3, #1
 800f45a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f45c:	e7b5      	b.n	800f3ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f45e:	4b17      	ldr	r3, [pc, #92]	@ (800f4bc <xTaskIncrementTick+0x168>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f464:	4914      	ldr	r1, [pc, #80]	@ (800f4b8 <xTaskIncrementTick+0x164>)
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	440b      	add	r3, r1
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2b01      	cmp	r3, #1
 800f474:	d901      	bls.n	800f47a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f476:	2301      	movs	r3, #1
 800f478:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f47a:	4b11      	ldr	r3, [pc, #68]	@ (800f4c0 <xTaskIncrementTick+0x16c>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d007      	beq.n	800f492 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f482:	2301      	movs	r3, #1
 800f484:	617b      	str	r3, [r7, #20]
 800f486:	e004      	b.n	800f492 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f488:	4b0e      	ldr	r3, [pc, #56]	@ (800f4c4 <xTaskIncrementTick+0x170>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	3301      	adds	r3, #1
 800f48e:	4a0d      	ldr	r2, [pc, #52]	@ (800f4c4 <xTaskIncrementTick+0x170>)
 800f490:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f492:	697b      	ldr	r3, [r7, #20]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3718      	adds	r7, #24
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	20004a48 	.word	0x20004a48
 800f4a0:	20004a24 	.word	0x20004a24
 800f4a4:	200049d8 	.word	0x200049d8
 800f4a8:	200049dc 	.word	0x200049dc
 800f4ac:	20004a38 	.word	0x20004a38
 800f4b0:	20004a40 	.word	0x20004a40
 800f4b4:	20004a28 	.word	0x20004a28
 800f4b8:	20004550 	.word	0x20004550
 800f4bc:	2000454c 	.word	0x2000454c
 800f4c0:	20004a34 	.word	0x20004a34
 800f4c4:	20004a30 	.word	0x20004a30

0800f4c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4ce:	4b2b      	ldr	r3, [pc, #172]	@ (800f57c <vTaskSwitchContext+0xb4>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4d6:	4b2a      	ldr	r3, [pc, #168]	@ (800f580 <vTaskSwitchContext+0xb8>)
 800f4d8:	2201      	movs	r2, #1
 800f4da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4dc:	e047      	b.n	800f56e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f4de:	4b28      	ldr	r3, [pc, #160]	@ (800f580 <vTaskSwitchContext+0xb8>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4e4:	4b27      	ldr	r3, [pc, #156]	@ (800f584 <vTaskSwitchContext+0xbc>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	60fb      	str	r3, [r7, #12]
 800f4ea:	e011      	b.n	800f510 <vTaskSwitchContext+0x48>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10b      	bne.n	800f50a <vTaskSwitchContext+0x42>
	__asm volatile
 800f4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f6:	f383 8811 	msr	BASEPRI, r3
 800f4fa:	f3bf 8f6f 	isb	sy
 800f4fe:	f3bf 8f4f 	dsb	sy
 800f502:	607b      	str	r3, [r7, #4]
}
 800f504:	bf00      	nop
 800f506:	bf00      	nop
 800f508:	e7fd      	b.n	800f506 <vTaskSwitchContext+0x3e>
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	60fb      	str	r3, [r7, #12]
 800f510:	491d      	ldr	r1, [pc, #116]	@ (800f588 <vTaskSwitchContext+0xc0>)
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	440b      	add	r3, r1
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d0e3      	beq.n	800f4ec <vTaskSwitchContext+0x24>
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	4613      	mov	r3, r2
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	4413      	add	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4a16      	ldr	r2, [pc, #88]	@ (800f588 <vTaskSwitchContext+0xc0>)
 800f530:	4413      	add	r3, r2
 800f532:	60bb      	str	r3, [r7, #8]
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	605a      	str	r2, [r3, #4]
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	3308      	adds	r3, #8
 800f546:	429a      	cmp	r2, r3
 800f548:	d104      	bne.n	800f554 <vTaskSwitchContext+0x8c>
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	685a      	ldr	r2, [r3, #4]
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	605a      	str	r2, [r3, #4]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	4a0c      	ldr	r2, [pc, #48]	@ (800f58c <vTaskSwitchContext+0xc4>)
 800f55c:	6013      	str	r3, [r2, #0]
 800f55e:	4a09      	ldr	r2, [pc, #36]	@ (800f584 <vTaskSwitchContext+0xbc>)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f564:	4b09      	ldr	r3, [pc, #36]	@ (800f58c <vTaskSwitchContext+0xc4>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	3354      	adds	r3, #84	@ 0x54
 800f56a:	4a09      	ldr	r2, [pc, #36]	@ (800f590 <vTaskSwitchContext+0xc8>)
 800f56c:	6013      	str	r3, [r2, #0]
}
 800f56e:	bf00      	nop
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	20004a48 	.word	0x20004a48
 800f580:	20004a34 	.word	0x20004a34
 800f584:	20004a28 	.word	0x20004a28
 800f588:	20004550 	.word	0x20004550
 800f58c:	2000454c 	.word	0x2000454c
 800f590:	2000007c 	.word	0x2000007c

0800f594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10b      	bne.n	800f5bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a8:	f383 8811 	msr	BASEPRI, r3
 800f5ac:	f3bf 8f6f 	isb	sy
 800f5b0:	f3bf 8f4f 	dsb	sy
 800f5b4:	60fb      	str	r3, [r7, #12]
}
 800f5b6:	bf00      	nop
 800f5b8:	bf00      	nop
 800f5ba:	e7fd      	b.n	800f5b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5bc:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <vTaskPlaceOnEventList+0x48>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	3318      	adds	r3, #24
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7fe fcb2 	bl	800df2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5ca:	2101      	movs	r1, #1
 800f5cc:	6838      	ldr	r0, [r7, #0]
 800f5ce:	f000 fb87 	bl	800fce0 <prvAddCurrentTaskToDelayedList>
}
 800f5d2:	bf00      	nop
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000454c 	.word	0x2000454c

0800f5e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d10b      	bne.n	800f60a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	617b      	str	r3, [r7, #20]
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop
 800f608:	e7fd      	b.n	800f606 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f60a:	4b0a      	ldr	r3, [pc, #40]	@ (800f634 <vTaskPlaceOnEventListRestricted+0x54>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	3318      	adds	r3, #24
 800f610:	4619      	mov	r1, r3
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f7fe fc67 	bl	800dee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d002      	beq.n	800f624 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f61e:	f04f 33ff 	mov.w	r3, #4294967295
 800f622:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	68b8      	ldr	r0, [r7, #8]
 800f628:	f000 fb5a 	bl	800fce0 <prvAddCurrentTaskToDelayedList>
	}
 800f62c:	bf00      	nop
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	2000454c 	.word	0x2000454c

0800f638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10b      	bne.n	800f666 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	60fb      	str	r3, [r7, #12]
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	e7fd      	b.n	800f662 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	3318      	adds	r3, #24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fe fc98 	bl	800dfa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f670:	4b1d      	ldr	r3, [pc, #116]	@ (800f6e8 <xTaskRemoveFromEventList+0xb0>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d11d      	bne.n	800f6b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	3304      	adds	r3, #4
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fe fc8f 	bl	800dfa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f686:	4b19      	ldr	r3, [pc, #100]	@ (800f6ec <xTaskRemoveFromEventList+0xb4>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d903      	bls.n	800f696 <xTaskRemoveFromEventList+0x5e>
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f692:	4a16      	ldr	r2, [pc, #88]	@ (800f6ec <xTaskRemoveFromEventList+0xb4>)
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f69a:	4613      	mov	r3, r2
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	4413      	add	r3, r2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	4a13      	ldr	r2, [pc, #76]	@ (800f6f0 <xTaskRemoveFromEventList+0xb8>)
 800f6a4:	441a      	add	r2, r3
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	3304      	adds	r3, #4
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4610      	mov	r0, r2
 800f6ae:	f7fe fc1a 	bl	800dee6 <vListInsertEnd>
 800f6b2:	e005      	b.n	800f6c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	3318      	adds	r3, #24
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	480e      	ldr	r0, [pc, #56]	@ (800f6f4 <xTaskRemoveFromEventList+0xbc>)
 800f6bc:	f7fe fc13 	bl	800dee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f8 <xTaskRemoveFromEventList+0xc0>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d905      	bls.n	800f6da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f6fc <xTaskRemoveFromEventList+0xc4>)
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	e001      	b.n	800f6de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f6de:	697b      	ldr	r3, [r7, #20]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3718      	adds	r7, #24
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	20004a48 	.word	0x20004a48
 800f6ec:	20004a28 	.word	0x20004a28
 800f6f0:	20004550 	.word	0x20004550
 800f6f4:	200049e0 	.word	0x200049e0
 800f6f8:	2000454c 	.word	0x2000454c
 800f6fc:	20004a34 	.word	0x20004a34

0800f700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f708:	4b06      	ldr	r3, [pc, #24]	@ (800f724 <vTaskInternalSetTimeOutState+0x24>)
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f710:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <vTaskInternalSetTimeOutState+0x28>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	605a      	str	r2, [r3, #4]
}
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	20004a38 	.word	0x20004a38
 800f728:	20004a24 	.word	0x20004a24

0800f72c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b088      	sub	sp, #32
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d10b      	bne.n	800f754 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f740:	f383 8811 	msr	BASEPRI, r3
 800f744:	f3bf 8f6f 	isb	sy
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	613b      	str	r3, [r7, #16]
}
 800f74e:	bf00      	nop
 800f750:	bf00      	nop
 800f752:	e7fd      	b.n	800f750 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10b      	bne.n	800f772 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	60fb      	str	r3, [r7, #12]
}
 800f76c:	bf00      	nop
 800f76e:	bf00      	nop
 800f770:	e7fd      	b.n	800f76e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f772:	f000 ff91 	bl	8010698 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f776:	4b1d      	ldr	r3, [pc, #116]	@ (800f7ec <xTaskCheckForTimeOut+0xc0>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	69ba      	ldr	r2, [r7, #24]
 800f782:	1ad3      	subs	r3, r2, r3
 800f784:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78e:	d102      	bne.n	800f796 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f790:	2300      	movs	r3, #0
 800f792:	61fb      	str	r3, [r7, #28]
 800f794:	e023      	b.n	800f7de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4b15      	ldr	r3, [pc, #84]	@ (800f7f0 <xTaskCheckForTimeOut+0xc4>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d007      	beq.n	800f7b2 <xTaskCheckForTimeOut+0x86>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	69ba      	ldr	r2, [r7, #24]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d302      	bcc.n	800f7b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	61fb      	str	r3, [r7, #28]
 800f7b0:	e015      	b.n	800f7de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d20b      	bcs.n	800f7d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	1ad2      	subs	r2, r2, r3
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff ff99 	bl	800f700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	61fb      	str	r3, [r7, #28]
 800f7d2:	e004      	b.n	800f7de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f7de:	f000 ff8d 	bl	80106fc <vPortExitCritical>

	return xReturn;
 800f7e2:	69fb      	ldr	r3, [r7, #28]
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3720      	adds	r7, #32
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	20004a24 	.word	0x20004a24
 800f7f0:	20004a38 	.word	0x20004a38

0800f7f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f7f8:	4b03      	ldr	r3, [pc, #12]	@ (800f808 <vTaskMissedYield+0x14>)
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	601a      	str	r2, [r3, #0]
}
 800f7fe:	bf00      	nop
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	20004a34 	.word	0x20004a34

0800f80c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f814:	f000 f852 	bl	800f8bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f818:	4b06      	ldr	r3, [pc, #24]	@ (800f834 <prvIdleTask+0x28>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d9f9      	bls.n	800f814 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f820:	4b05      	ldr	r3, [pc, #20]	@ (800f838 <prvIdleTask+0x2c>)
 800f822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f826:	601a      	str	r2, [r3, #0]
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f830:	e7f0      	b.n	800f814 <prvIdleTask+0x8>
 800f832:	bf00      	nop
 800f834:	20004550 	.word	0x20004550
 800f838:	e000ed04 	.word	0xe000ed04

0800f83c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f842:	2300      	movs	r3, #0
 800f844:	607b      	str	r3, [r7, #4]
 800f846:	e00c      	b.n	800f862 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	4613      	mov	r3, r2
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	4413      	add	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4a12      	ldr	r2, [pc, #72]	@ (800f89c <prvInitialiseTaskLists+0x60>)
 800f854:	4413      	add	r3, r2
 800f856:	4618      	mov	r0, r3
 800f858:	f7fe fb18 	bl	800de8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3301      	adds	r3, #1
 800f860:	607b      	str	r3, [r7, #4]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b37      	cmp	r3, #55	@ 0x37
 800f866:	d9ef      	bls.n	800f848 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f868:	480d      	ldr	r0, [pc, #52]	@ (800f8a0 <prvInitialiseTaskLists+0x64>)
 800f86a:	f7fe fb0f 	bl	800de8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f86e:	480d      	ldr	r0, [pc, #52]	@ (800f8a4 <prvInitialiseTaskLists+0x68>)
 800f870:	f7fe fb0c 	bl	800de8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f874:	480c      	ldr	r0, [pc, #48]	@ (800f8a8 <prvInitialiseTaskLists+0x6c>)
 800f876:	f7fe fb09 	bl	800de8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f87a:	480c      	ldr	r0, [pc, #48]	@ (800f8ac <prvInitialiseTaskLists+0x70>)
 800f87c:	f7fe fb06 	bl	800de8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f880:	480b      	ldr	r0, [pc, #44]	@ (800f8b0 <prvInitialiseTaskLists+0x74>)
 800f882:	f7fe fb03 	bl	800de8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f886:	4b0b      	ldr	r3, [pc, #44]	@ (800f8b4 <prvInitialiseTaskLists+0x78>)
 800f888:	4a05      	ldr	r2, [pc, #20]	@ (800f8a0 <prvInitialiseTaskLists+0x64>)
 800f88a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f88c:	4b0a      	ldr	r3, [pc, #40]	@ (800f8b8 <prvInitialiseTaskLists+0x7c>)
 800f88e:	4a05      	ldr	r2, [pc, #20]	@ (800f8a4 <prvInitialiseTaskLists+0x68>)
 800f890:	601a      	str	r2, [r3, #0]
}
 800f892:	bf00      	nop
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	20004550 	.word	0x20004550
 800f8a0:	200049b0 	.word	0x200049b0
 800f8a4:	200049c4 	.word	0x200049c4
 800f8a8:	200049e0 	.word	0x200049e0
 800f8ac:	200049f4 	.word	0x200049f4
 800f8b0:	20004a0c 	.word	0x20004a0c
 800f8b4:	200049d8 	.word	0x200049d8
 800f8b8:	200049dc 	.word	0x200049dc

0800f8bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8c2:	e019      	b.n	800f8f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8c4:	f000 fee8 	bl	8010698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8c8:	4b10      	ldr	r3, [pc, #64]	@ (800f90c <prvCheckTasksWaitingTermination+0x50>)
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fe fb63 	bl	800dfa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f8da:	4b0d      	ldr	r3, [pc, #52]	@ (800f910 <prvCheckTasksWaitingTermination+0x54>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	4a0b      	ldr	r2, [pc, #44]	@ (800f910 <prvCheckTasksWaitingTermination+0x54>)
 800f8e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800f914 <prvCheckTasksWaitingTermination+0x58>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4a0a      	ldr	r2, [pc, #40]	@ (800f914 <prvCheckTasksWaitingTermination+0x58>)
 800f8ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f8ee:	f000 ff05 	bl	80106fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f810 	bl	800f918 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8f8:	4b06      	ldr	r3, [pc, #24]	@ (800f914 <prvCheckTasksWaitingTermination+0x58>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1e1      	bne.n	800f8c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f900:	bf00      	nop
 800f902:	bf00      	nop
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	200049f4 	.word	0x200049f4
 800f910:	20004a20 	.word	0x20004a20
 800f914:	20004a08 	.word	0x20004a08

0800f918 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3354      	adds	r3, #84	@ 0x54
 800f924:	4618      	mov	r0, r3
 800f926:	f002 f925 	bl	8011b74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f930:	2b00      	cmp	r3, #0
 800f932:	d108      	bne.n	800f946 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f938:	4618      	mov	r0, r3
 800f93a:	f001 f89d 	bl	8010a78 <vPortFree>
				vPortFree( pxTCB );
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f001 f89a 	bl	8010a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f944:	e019      	b.n	800f97a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d103      	bne.n	800f958 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f001 f891 	bl	8010a78 <vPortFree>
	}
 800f956:	e010      	b.n	800f97a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d00b      	beq.n	800f97a <prvDeleteTCB+0x62>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	60fb      	str	r3, [r7, #12]
}
 800f974:	bf00      	nop
 800f976:	bf00      	nop
 800f978:	e7fd      	b.n	800f976 <prvDeleteTCB+0x5e>
	}
 800f97a:	bf00      	nop
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
	...

0800f984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f98a:	4b0c      	ldr	r3, [pc, #48]	@ (800f9bc <prvResetNextTaskUnblockTime+0x38>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d104      	bne.n	800f99e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f994:	4b0a      	ldr	r3, [pc, #40]	@ (800f9c0 <prvResetNextTaskUnblockTime+0x3c>)
 800f996:	f04f 32ff 	mov.w	r2, #4294967295
 800f99a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f99c:	e008      	b.n	800f9b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f99e:	4b07      	ldr	r3, [pc, #28]	@ (800f9bc <prvResetNextTaskUnblockTime+0x38>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4a04      	ldr	r2, [pc, #16]	@ (800f9c0 <prvResetNextTaskUnblockTime+0x3c>)
 800f9ae:	6013      	str	r3, [r2, #0]
}
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	200049d8 	.word	0x200049d8
 800f9c0:	20004a40 	.word	0x20004a40

0800f9c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800f9f8 <xTaskGetSchedulerState+0x34>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d102      	bne.n	800f9d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	607b      	str	r3, [r7, #4]
 800f9d6:	e008      	b.n	800f9ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9d8:	4b08      	ldr	r3, [pc, #32]	@ (800f9fc <xTaskGetSchedulerState+0x38>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d102      	bne.n	800f9e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	607b      	str	r3, [r7, #4]
 800f9e4:	e001      	b.n	800f9ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f9ea:	687b      	ldr	r3, [r7, #4]
	}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	20004a2c 	.word	0x20004a2c
 800f9fc:	20004a48 	.word	0x20004a48

0800fa00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d051      	beq.n	800faba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa1a:	4b2a      	ldr	r3, [pc, #168]	@ (800fac4 <xTaskPriorityInherit+0xc4>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d241      	bcs.n	800faa8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	699b      	ldr	r3, [r3, #24]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	db06      	blt.n	800fa3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa2c:	4b25      	ldr	r3, [pc, #148]	@ (800fac4 <xTaskPriorityInherit+0xc4>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	6959      	ldr	r1, [r3, #20]
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa42:	4613      	mov	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4a1f      	ldr	r2, [pc, #124]	@ (800fac8 <xTaskPriorityInherit+0xc8>)
 800fa4c:	4413      	add	r3, r2
 800fa4e:	4299      	cmp	r1, r3
 800fa50:	d122      	bne.n	800fa98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	3304      	adds	r3, #4
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fe faa2 	bl	800dfa0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa5c:	4b19      	ldr	r3, [pc, #100]	@ (800fac4 <xTaskPriorityInherit+0xc4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa6a:	4b18      	ldr	r3, [pc, #96]	@ (800facc <xTaskPriorityInherit+0xcc>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d903      	bls.n	800fa7a <xTaskPriorityInherit+0x7a>
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa76:	4a15      	ldr	r2, [pc, #84]	@ (800facc <xTaskPriorityInherit+0xcc>)
 800fa78:	6013      	str	r3, [r2, #0]
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa7e:	4613      	mov	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4a10      	ldr	r2, [pc, #64]	@ (800fac8 <xTaskPriorityInherit+0xc8>)
 800fa88:	441a      	add	r2, r3
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4610      	mov	r0, r2
 800fa92:	f7fe fa28 	bl	800dee6 <vListInsertEnd>
 800fa96:	e004      	b.n	800faa2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa98:	4b0a      	ldr	r3, [pc, #40]	@ (800fac4 <xTaskPriorityInherit+0xc4>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800faa2:	2301      	movs	r3, #1
 800faa4:	60fb      	str	r3, [r7, #12]
 800faa6:	e008      	b.n	800faba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800faac:	4b05      	ldr	r3, [pc, #20]	@ (800fac4 <xTaskPriorityInherit+0xc4>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d201      	bcs.n	800faba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fab6:	2301      	movs	r3, #1
 800fab8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800faba:	68fb      	ldr	r3, [r7, #12]
	}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	2000454c 	.word	0x2000454c
 800fac8:	20004550 	.word	0x20004550
 800facc:	20004a28 	.word	0x20004a28

0800fad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fadc:	2300      	movs	r3, #0
 800fade:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d058      	beq.n	800fb98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fae6:	4b2f      	ldr	r3, [pc, #188]	@ (800fba4 <xTaskPriorityDisinherit+0xd4>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	429a      	cmp	r2, r3
 800faee:	d00b      	beq.n	800fb08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	60fb      	str	r3, [r7, #12]
}
 800fb02:	bf00      	nop
 800fb04:	bf00      	nop
 800fb06:	e7fd      	b.n	800fb04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10b      	bne.n	800fb28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	60bb      	str	r3, [r7, #8]
}
 800fb22:	bf00      	nop
 800fb24:	bf00      	nop
 800fb26:	e7fd      	b.n	800fb24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb2c:	1e5a      	subs	r2, r3, #1
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d02c      	beq.n	800fb98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d128      	bne.n	800fb98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	3304      	adds	r3, #4
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fe fa28 	bl	800dfa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb68:	4b0f      	ldr	r3, [pc, #60]	@ (800fba8 <xTaskPriorityDisinherit+0xd8>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d903      	bls.n	800fb78 <xTaskPriorityDisinherit+0xa8>
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb74:	4a0c      	ldr	r2, [pc, #48]	@ (800fba8 <xTaskPriorityDisinherit+0xd8>)
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	4413      	add	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4a09      	ldr	r2, [pc, #36]	@ (800fbac <xTaskPriorityDisinherit+0xdc>)
 800fb86:	441a      	add	r2, r3
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	3304      	adds	r3, #4
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	4610      	mov	r0, r2
 800fb90:	f7fe f9a9 	bl	800dee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb94:	2301      	movs	r3, #1
 800fb96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb98:	697b      	ldr	r3, [r7, #20]
	}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3718      	adds	r7, #24
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	2000454c 	.word	0x2000454c
 800fba8:	20004a28 	.word	0x20004a28
 800fbac:	20004550 	.word	0x20004550

0800fbb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b088      	sub	sp, #32
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d06c      	beq.n	800fca2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10b      	bne.n	800fbe8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	60fb      	str	r3, [r7, #12]
}
 800fbe2:	bf00      	nop
 800fbe4:	bf00      	nop
 800fbe6:	e7fd      	b.n	800fbe4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbec:	683a      	ldr	r2, [r7, #0]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d902      	bls.n	800fbf8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	61fb      	str	r3, [r7, #28]
 800fbf6:	e002      	b.n	800fbfe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbfc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc02:	69fa      	ldr	r2, [r7, #28]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d04c      	beq.n	800fca2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d147      	bne.n	800fca2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc12:	4b26      	ldr	r3, [pc, #152]	@ (800fcac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	69ba      	ldr	r2, [r7, #24]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d10b      	bne.n	800fc34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc20:	f383 8811 	msr	BASEPRI, r3
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	60bb      	str	r3, [r7, #8]
}
 800fc2e:	bf00      	nop
 800fc30:	bf00      	nop
 800fc32:	e7fd      	b.n	800fc30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	69fa      	ldr	r2, [r7, #28]
 800fc3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	db04      	blt.n	800fc52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	6959      	ldr	r1, [r3, #20]
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	4613      	mov	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4a13      	ldr	r2, [pc, #76]	@ (800fcb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc62:	4413      	add	r3, r2
 800fc64:	4299      	cmp	r1, r3
 800fc66:	d11c      	bne.n	800fca2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fe f997 	bl	800dfa0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc76:	4b0f      	ldr	r3, [pc, #60]	@ (800fcb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d903      	bls.n	800fc86 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc82:	4a0c      	ldr	r2, [pc, #48]	@ (800fcb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc84:	6013      	str	r3, [r2, #0]
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	4413      	add	r3, r2
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4a07      	ldr	r2, [pc, #28]	@ (800fcb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc94:	441a      	add	r2, r3
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	3304      	adds	r3, #4
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	f7fe f922 	bl	800dee6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fca2:	bf00      	nop
 800fca4:	3720      	adds	r7, #32
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	2000454c 	.word	0x2000454c
 800fcb0:	20004550 	.word	0x20004550
 800fcb4:	20004a28 	.word	0x20004a28

0800fcb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fcb8:	b480      	push	{r7}
 800fcba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fcbc:	4b07      	ldr	r3, [pc, #28]	@ (800fcdc <pvTaskIncrementMutexHeldCount+0x24>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d004      	beq.n	800fcce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fcc4:	4b05      	ldr	r3, [pc, #20]	@ (800fcdc <pvTaskIncrementMutexHeldCount+0x24>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcca:	3201      	adds	r2, #1
 800fccc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fcce:	4b03      	ldr	r3, [pc, #12]	@ (800fcdc <pvTaskIncrementMutexHeldCount+0x24>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
	}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	2000454c 	.word	0x2000454c

0800fce0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fcea:	4b21      	ldr	r3, [pc, #132]	@ (800fd70 <prvAddCurrentTaskToDelayedList+0x90>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcf0:	4b20      	ldr	r3, [pc, #128]	@ (800fd74 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3304      	adds	r3, #4
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe f952 	bl	800dfa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd02:	d10a      	bne.n	800fd1a <prvAddCurrentTaskToDelayedList+0x3a>
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d007      	beq.n	800fd1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd0a:	4b1a      	ldr	r3, [pc, #104]	@ (800fd74 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	4619      	mov	r1, r3
 800fd12:	4819      	ldr	r0, [pc, #100]	@ (800fd78 <prvAddCurrentTaskToDelayedList+0x98>)
 800fd14:	f7fe f8e7 	bl	800dee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd18:	e026      	b.n	800fd68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4413      	add	r3, r2
 800fd20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd22:	4b14      	ldr	r3, [pc, #80]	@ (800fd74 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d209      	bcs.n	800fd46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd32:	4b12      	ldr	r3, [pc, #72]	@ (800fd7c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	4b0f      	ldr	r3, [pc, #60]	@ (800fd74 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	4610      	mov	r0, r2
 800fd40:	f7fe f8f5 	bl	800df2e <vListInsert>
}
 800fd44:	e010      	b.n	800fd68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd46:	4b0e      	ldr	r3, [pc, #56]	@ (800fd80 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd74 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	3304      	adds	r3, #4
 800fd50:	4619      	mov	r1, r3
 800fd52:	4610      	mov	r0, r2
 800fd54:	f7fe f8eb 	bl	800df2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd58:	4b0a      	ldr	r3, [pc, #40]	@ (800fd84 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68ba      	ldr	r2, [r7, #8]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d202      	bcs.n	800fd68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd62:	4a08      	ldr	r2, [pc, #32]	@ (800fd84 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	6013      	str	r3, [r2, #0]
}
 800fd68:	bf00      	nop
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	20004a24 	.word	0x20004a24
 800fd74:	2000454c 	.word	0x2000454c
 800fd78:	20004a0c 	.word	0x20004a0c
 800fd7c:	200049dc 	.word	0x200049dc
 800fd80:	200049d8 	.word	0x200049d8
 800fd84:	20004a40 	.word	0x20004a40

0800fd88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08a      	sub	sp, #40	@ 0x28
 800fd8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd92:	f000 fb13 	bl	80103bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd96:	4b1d      	ldr	r3, [pc, #116]	@ (800fe0c <xTimerCreateTimerTask+0x84>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d021      	beq.n	800fde2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fda6:	1d3a      	adds	r2, r7, #4
 800fda8:	f107 0108 	add.w	r1, r7, #8
 800fdac:	f107 030c 	add.w	r3, r7, #12
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fe f851 	bl	800de58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fdb6:	6879      	ldr	r1, [r7, #4]
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	68fa      	ldr	r2, [r7, #12]
 800fdbc:	9202      	str	r2, [sp, #8]
 800fdbe:	9301      	str	r3, [sp, #4]
 800fdc0:	2337      	movs	r3, #55	@ 0x37
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	460a      	mov	r2, r1
 800fdc8:	4911      	ldr	r1, [pc, #68]	@ (800fe10 <xTimerCreateTimerTask+0x88>)
 800fdca:	4812      	ldr	r0, [pc, #72]	@ (800fe14 <xTimerCreateTimerTask+0x8c>)
 800fdcc:	f7fe ffa2 	bl	800ed14 <xTaskCreateStatic>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	4a11      	ldr	r2, [pc, #68]	@ (800fe18 <xTimerCreateTimerTask+0x90>)
 800fdd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fdd6:	4b10      	ldr	r3, [pc, #64]	@ (800fe18 <xTimerCreateTimerTask+0x90>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fdde:	2301      	movs	r3, #1
 800fde0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10b      	bne.n	800fe00 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	613b      	str	r3, [r7, #16]
}
 800fdfa:	bf00      	nop
 800fdfc:	bf00      	nop
 800fdfe:	e7fd      	b.n	800fdfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fe00:	697b      	ldr	r3, [r7, #20]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	20004a7c 	.word	0x20004a7c
 800fe10:	08014478 	.word	0x08014478
 800fe14:	0800ff55 	.word	0x0800ff55
 800fe18:	20004a80 	.word	0x20004a80

0800fe1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b08a      	sub	sp, #40	@ 0x28
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
 800fe28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d10b      	bne.n	800fe4c <xTimerGenericCommand+0x30>
	__asm volatile
 800fe34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	623b      	str	r3, [r7, #32]
}
 800fe46:	bf00      	nop
 800fe48:	bf00      	nop
 800fe4a:	e7fd      	b.n	800fe48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe4c:	4b19      	ldr	r3, [pc, #100]	@ (800feb4 <xTimerGenericCommand+0x98>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d02a      	beq.n	800feaa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2b05      	cmp	r3, #5
 800fe64:	dc18      	bgt.n	800fe98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe66:	f7ff fdad 	bl	800f9c4 <xTaskGetSchedulerState>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d109      	bne.n	800fe84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe70:	4b10      	ldr	r3, [pc, #64]	@ (800feb4 <xTimerGenericCommand+0x98>)
 800fe72:	6818      	ldr	r0, [r3, #0]
 800fe74:	f107 0110 	add.w	r1, r7, #16
 800fe78:	2300      	movs	r3, #0
 800fe7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe7c:	f7fe fa32 	bl	800e2e4 <xQueueGenericSend>
 800fe80:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe82:	e012      	b.n	800feaa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe84:	4b0b      	ldr	r3, [pc, #44]	@ (800feb4 <xTimerGenericCommand+0x98>)
 800fe86:	6818      	ldr	r0, [r3, #0]
 800fe88:	f107 0110 	add.w	r1, r7, #16
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f7fe fa28 	bl	800e2e4 <xQueueGenericSend>
 800fe94:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe96:	e008      	b.n	800feaa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe98:	4b06      	ldr	r3, [pc, #24]	@ (800feb4 <xTimerGenericCommand+0x98>)
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	f107 0110 	add.w	r1, r7, #16
 800fea0:	2300      	movs	r3, #0
 800fea2:	683a      	ldr	r2, [r7, #0]
 800fea4:	f7fe fb20 	bl	800e4e8 <xQueueGenericSendFromISR>
 800fea8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800feac:	4618      	mov	r0, r3
 800feae:	3728      	adds	r7, #40	@ 0x28
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}
 800feb4:	20004a7c 	.word	0x20004a7c

0800feb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b088      	sub	sp, #32
 800febc:	af02      	add	r7, sp, #8
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fec2:	4b23      	ldr	r3, [pc, #140]	@ (800ff50 <prvProcessExpiredTimer+0x98>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	3304      	adds	r3, #4
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fe f865 	bl	800dfa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fedc:	f003 0304 	and.w	r3, r3, #4
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d023      	beq.n	800ff2c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	699a      	ldr	r2, [r3, #24]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	18d1      	adds	r1, r2, r3
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	6978      	ldr	r0, [r7, #20]
 800fef2:	f000 f8d5 	bl	80100a0 <prvInsertTimerInActiveList>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d020      	beq.n	800ff3e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fefc:	2300      	movs	r3, #0
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	2300      	movs	r3, #0
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	2100      	movs	r1, #0
 800ff06:	6978      	ldr	r0, [r7, #20]
 800ff08:	f7ff ff88 	bl	800fe1c <xTimerGenericCommand>
 800ff0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d114      	bne.n	800ff3e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff18:	f383 8811 	msr	BASEPRI, r3
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	f3bf 8f4f 	dsb	sy
 800ff24:	60fb      	str	r3, [r7, #12]
}
 800ff26:	bf00      	nop
 800ff28:	bf00      	nop
 800ff2a:	e7fd      	b.n	800ff28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff32:	f023 0301 	bic.w	r3, r3, #1
 800ff36:	b2da      	uxtb	r2, r3
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	6978      	ldr	r0, [r7, #20]
 800ff44:	4798      	blx	r3
}
 800ff46:	bf00      	nop
 800ff48:	3718      	adds	r7, #24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20004a74 	.word	0x20004a74

0800ff54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff5c:	f107 0308 	add.w	r3, r7, #8
 800ff60:	4618      	mov	r0, r3
 800ff62:	f000 f859 	bl	8010018 <prvGetNextExpireTime>
 800ff66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f000 f805 	bl	800ff7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff72:	f000 f8d7 	bl	8010124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff76:	bf00      	nop
 800ff78:	e7f0      	b.n	800ff5c <prvTimerTask+0x8>
	...

0800ff7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff86:	f7ff f929 	bl	800f1dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff8a:	f107 0308 	add.w	r3, r7, #8
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 f866 	bl	8010060 <prvSampleTimeNow>
 800ff94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d130      	bne.n	800fffe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10a      	bne.n	800ffb8 <prvProcessTimerOrBlockTask+0x3c>
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d806      	bhi.n	800ffb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ffaa:	f7ff f925 	bl	800f1f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ffae:	68f9      	ldr	r1, [r7, #12]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff ff81 	bl	800feb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ffb6:	e024      	b.n	8010002 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d008      	beq.n	800ffd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ffbe:	4b13      	ldr	r3, [pc, #76]	@ (801000c <prvProcessTimerOrBlockTask+0x90>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d101      	bne.n	800ffcc <prvProcessTimerOrBlockTask+0x50>
 800ffc8:	2301      	movs	r3, #1
 800ffca:	e000      	b.n	800ffce <prvProcessTimerOrBlockTask+0x52>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ffd0:	4b0f      	ldr	r3, [pc, #60]	@ (8010010 <prvProcessTimerOrBlockTask+0x94>)
 800ffd2:	6818      	ldr	r0, [r3, #0]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	1ad3      	subs	r3, r2, r3
 800ffda:	683a      	ldr	r2, [r7, #0]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	f7fe fe65 	bl	800ecac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ffe2:	f7ff f909 	bl	800f1f8 <xTaskResumeAll>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d10a      	bne.n	8010002 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ffec:	4b09      	ldr	r3, [pc, #36]	@ (8010014 <prvProcessTimerOrBlockTask+0x98>)
 800ffee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	f3bf 8f6f 	isb	sy
}
 800fffc:	e001      	b.n	8010002 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fffe:	f7ff f8fb 	bl	800f1f8 <xTaskResumeAll>
}
 8010002:	bf00      	nop
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	20004a78 	.word	0x20004a78
 8010010:	20004a7c 	.word	0x20004a7c
 8010014:	e000ed04 	.word	0xe000ed04

08010018 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010020:	4b0e      	ldr	r3, [pc, #56]	@ (801005c <prvGetNextExpireTime+0x44>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <prvGetNextExpireTime+0x16>
 801002a:	2201      	movs	r2, #1
 801002c:	e000      	b.n	8010030 <prvGetNextExpireTime+0x18>
 801002e:	2200      	movs	r2, #0
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d105      	bne.n	8010048 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801003c:	4b07      	ldr	r3, [pc, #28]	@ (801005c <prvGetNextExpireTime+0x44>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	60fb      	str	r3, [r7, #12]
 8010046:	e001      	b.n	801004c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010048:	2300      	movs	r3, #0
 801004a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801004c:	68fb      	ldr	r3, [r7, #12]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3714      	adds	r7, #20
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	20004a74 	.word	0x20004a74

08010060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010068:	f7ff f964 	bl	800f334 <xTaskGetTickCount>
 801006c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801006e:	4b0b      	ldr	r3, [pc, #44]	@ (801009c <prvSampleTimeNow+0x3c>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	429a      	cmp	r2, r3
 8010076:	d205      	bcs.n	8010084 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010078:	f000 f93a 	bl	80102f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	601a      	str	r2, [r3, #0]
 8010082:	e002      	b.n	801008a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801008a:	4a04      	ldr	r2, [pc, #16]	@ (801009c <prvSampleTimeNow+0x3c>)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010090:	68fb      	ldr	r3, [r7, #12]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3710      	adds	r7, #16
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	20004a84 	.word	0x20004a84

080100a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	607a      	str	r2, [r7, #4]
 80100ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80100ae:	2300      	movs	r3, #0
 80100b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80100be:	68ba      	ldr	r2, [r7, #8]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d812      	bhi.n	80100ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	1ad2      	subs	r2, r2, r3
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d302      	bcc.n	80100da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80100d4:	2301      	movs	r3, #1
 80100d6:	617b      	str	r3, [r7, #20]
 80100d8:	e01b      	b.n	8010112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80100da:	4b10      	ldr	r3, [pc, #64]	@ (801011c <prvInsertTimerInActiveList+0x7c>)
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	3304      	adds	r3, #4
 80100e2:	4619      	mov	r1, r3
 80100e4:	4610      	mov	r0, r2
 80100e6:	f7fd ff22 	bl	800df2e <vListInsert>
 80100ea:	e012      	b.n	8010112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d206      	bcs.n	8010102 <prvInsertTimerInActiveList+0x62>
 80100f4:	68ba      	ldr	r2, [r7, #8]
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d302      	bcc.n	8010102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80100fc:	2301      	movs	r3, #1
 80100fe:	617b      	str	r3, [r7, #20]
 8010100:	e007      	b.n	8010112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010102:	4b07      	ldr	r3, [pc, #28]	@ (8010120 <prvInsertTimerInActiveList+0x80>)
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	3304      	adds	r3, #4
 801010a:	4619      	mov	r1, r3
 801010c:	4610      	mov	r0, r2
 801010e:	f7fd ff0e 	bl	800df2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010112:	697b      	ldr	r3, [r7, #20]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3718      	adds	r7, #24
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	20004a78 	.word	0x20004a78
 8010120:	20004a74 	.word	0x20004a74

08010124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08e      	sub	sp, #56	@ 0x38
 8010128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801012a:	e0ce      	b.n	80102ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	da19      	bge.n	8010166 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010132:	1d3b      	adds	r3, r7, #4
 8010134:	3304      	adds	r3, #4
 8010136:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d10b      	bne.n	8010156 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	61fb      	str	r3, [r7, #28]
}
 8010150:	bf00      	nop
 8010152:	bf00      	nop
 8010154:	e7fd      	b.n	8010152 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801015c:	6850      	ldr	r0, [r2, #4]
 801015e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010160:	6892      	ldr	r2, [r2, #8]
 8010162:	4611      	mov	r1, r2
 8010164:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2b00      	cmp	r3, #0
 801016a:	f2c0 80ae 	blt.w	80102ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010174:	695b      	ldr	r3, [r3, #20]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d004      	beq.n	8010184 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801017a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801017c:	3304      	adds	r3, #4
 801017e:	4618      	mov	r0, r3
 8010180:	f7fd ff0e 	bl	800dfa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010184:	463b      	mov	r3, r7
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff ff6a 	bl	8010060 <prvSampleTimeNow>
 801018c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b09      	cmp	r3, #9
 8010192:	f200 8097 	bhi.w	80102c4 <prvProcessReceivedCommands+0x1a0>
 8010196:	a201      	add	r2, pc, #4	@ (adr r2, 801019c <prvProcessReceivedCommands+0x78>)
 8010198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019c:	080101c5 	.word	0x080101c5
 80101a0:	080101c5 	.word	0x080101c5
 80101a4:	080101c5 	.word	0x080101c5
 80101a8:	0801023b 	.word	0x0801023b
 80101ac:	0801024f 	.word	0x0801024f
 80101b0:	0801029b 	.word	0x0801029b
 80101b4:	080101c5 	.word	0x080101c5
 80101b8:	080101c5 	.word	0x080101c5
 80101bc:	0801023b 	.word	0x0801023b
 80101c0:	0801024f 	.word	0x0801024f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80101c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101ca:	f043 0301 	orr.w	r3, r3, #1
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101da:	699b      	ldr	r3, [r3, #24]
 80101dc:	18d1      	adds	r1, r2, r3
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101e4:	f7ff ff5c 	bl	80100a0 <prvInsertTimerInActiveList>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d06c      	beq.n	80102c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101fc:	f003 0304 	and.w	r3, r3, #4
 8010200:	2b00      	cmp	r3, #0
 8010202:	d061      	beq.n	80102c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010208:	699b      	ldr	r3, [r3, #24]
 801020a:	441a      	add	r2, r3
 801020c:	2300      	movs	r3, #0
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	2300      	movs	r3, #0
 8010212:	2100      	movs	r1, #0
 8010214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010216:	f7ff fe01 	bl	800fe1c <xTimerGenericCommand>
 801021a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d152      	bne.n	80102c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010226:	f383 8811 	msr	BASEPRI, r3
 801022a:	f3bf 8f6f 	isb	sy
 801022e:	f3bf 8f4f 	dsb	sy
 8010232:	61bb      	str	r3, [r7, #24]
}
 8010234:	bf00      	nop
 8010236:	bf00      	nop
 8010238:	e7fd      	b.n	8010236 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801023a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801023c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010240:	f023 0301 	bic.w	r3, r3, #1
 8010244:	b2da      	uxtb	r2, r3
 8010246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010248:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801024c:	e03d      	b.n	80102ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801024e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010254:	f043 0301 	orr.w	r3, r3, #1
 8010258:	b2da      	uxtb	r2, r3
 801025a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801025c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010264:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10b      	bne.n	8010286 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	617b      	str	r3, [r7, #20]
}
 8010280:	bf00      	nop
 8010282:	bf00      	nop
 8010284:	e7fd      	b.n	8010282 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010288:	699a      	ldr	r2, [r3, #24]
 801028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028c:	18d1      	adds	r1, r2, r3
 801028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010294:	f7ff ff04 	bl	80100a0 <prvInsertTimerInActiveList>
					break;
 8010298:	e017      	b.n	80102ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801029a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801029c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102a0:	f003 0302 	and.w	r3, r3, #2
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d103      	bne.n	80102b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80102a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102aa:	f000 fbe5 	bl	8010a78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80102ae:	e00c      	b.n	80102ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102b6:	f023 0301 	bic.w	r3, r3, #1
 80102ba:	b2da      	uxtb	r2, r3
 80102bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80102c2:	e002      	b.n	80102ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80102c4:	bf00      	nop
 80102c6:	e000      	b.n	80102ca <prvProcessReceivedCommands+0x1a6>
					break;
 80102c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80102ca:	4b08      	ldr	r3, [pc, #32]	@ (80102ec <prvProcessReceivedCommands+0x1c8>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	1d39      	adds	r1, r7, #4
 80102d0:	2200      	movs	r2, #0
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe f9a6 	bl	800e624 <xQueueReceive>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f47f af26 	bne.w	801012c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80102e0:	bf00      	nop
 80102e2:	bf00      	nop
 80102e4:	3730      	adds	r7, #48	@ 0x30
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	20004a7c 	.word	0x20004a7c

080102f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b088      	sub	sp, #32
 80102f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102f6:	e049      	b.n	801038c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102f8:	4b2e      	ldr	r3, [pc, #184]	@ (80103b4 <prvSwitchTimerLists+0xc4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010302:	4b2c      	ldr	r3, [pc, #176]	@ (80103b4 <prvSwitchTimerLists+0xc4>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	3304      	adds	r3, #4
 8010310:	4618      	mov	r0, r3
 8010312:	f7fd fe45 	bl	800dfa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010324:	f003 0304 	and.w	r3, r3, #4
 8010328:	2b00      	cmp	r3, #0
 801032a:	d02f      	beq.n	801038c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	693a      	ldr	r2, [r7, #16]
 8010332:	4413      	add	r3, r2
 8010334:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	429a      	cmp	r2, r3
 801033c:	d90e      	bls.n	801035c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801034a:	4b1a      	ldr	r3, [pc, #104]	@ (80103b4 <prvSwitchTimerLists+0xc4>)
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	3304      	adds	r3, #4
 8010352:	4619      	mov	r1, r3
 8010354:	4610      	mov	r0, r2
 8010356:	f7fd fdea 	bl	800df2e <vListInsert>
 801035a:	e017      	b.n	801038c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801035c:	2300      	movs	r3, #0
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	2300      	movs	r3, #0
 8010362:	693a      	ldr	r2, [r7, #16]
 8010364:	2100      	movs	r1, #0
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f7ff fd58 	bl	800fe1c <xTimerGenericCommand>
 801036c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10b      	bne.n	801038c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	603b      	str	r3, [r7, #0]
}
 8010386:	bf00      	nop
 8010388:	bf00      	nop
 801038a:	e7fd      	b.n	8010388 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801038c:	4b09      	ldr	r3, [pc, #36]	@ (80103b4 <prvSwitchTimerLists+0xc4>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1b0      	bne.n	80102f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010396:	4b07      	ldr	r3, [pc, #28]	@ (80103b4 <prvSwitchTimerLists+0xc4>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801039c:	4b06      	ldr	r3, [pc, #24]	@ (80103b8 <prvSwitchTimerLists+0xc8>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a04      	ldr	r2, [pc, #16]	@ (80103b4 <prvSwitchTimerLists+0xc4>)
 80103a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80103a4:	4a04      	ldr	r2, [pc, #16]	@ (80103b8 <prvSwitchTimerLists+0xc8>)
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	6013      	str	r3, [r2, #0]
}
 80103aa:	bf00      	nop
 80103ac:	3718      	adds	r7, #24
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20004a74 	.word	0x20004a74
 80103b8:	20004a78 	.word	0x20004a78

080103bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80103c2:	f000 f969 	bl	8010698 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80103c6:	4b15      	ldr	r3, [pc, #84]	@ (801041c <prvCheckForValidListAndQueue+0x60>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d120      	bne.n	8010410 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80103ce:	4814      	ldr	r0, [pc, #80]	@ (8010420 <prvCheckForValidListAndQueue+0x64>)
 80103d0:	f7fd fd5c 	bl	800de8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80103d4:	4813      	ldr	r0, [pc, #76]	@ (8010424 <prvCheckForValidListAndQueue+0x68>)
 80103d6:	f7fd fd59 	bl	800de8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80103da:	4b13      	ldr	r3, [pc, #76]	@ (8010428 <prvCheckForValidListAndQueue+0x6c>)
 80103dc:	4a10      	ldr	r2, [pc, #64]	@ (8010420 <prvCheckForValidListAndQueue+0x64>)
 80103de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80103e0:	4b12      	ldr	r3, [pc, #72]	@ (801042c <prvCheckForValidListAndQueue+0x70>)
 80103e2:	4a10      	ldr	r2, [pc, #64]	@ (8010424 <prvCheckForValidListAndQueue+0x68>)
 80103e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80103e6:	2300      	movs	r3, #0
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	4b11      	ldr	r3, [pc, #68]	@ (8010430 <prvCheckForValidListAndQueue+0x74>)
 80103ec:	4a11      	ldr	r2, [pc, #68]	@ (8010434 <prvCheckForValidListAndQueue+0x78>)
 80103ee:	2110      	movs	r1, #16
 80103f0:	200a      	movs	r0, #10
 80103f2:	f7fd fe69 	bl	800e0c8 <xQueueGenericCreateStatic>
 80103f6:	4603      	mov	r3, r0
 80103f8:	4a08      	ldr	r2, [pc, #32]	@ (801041c <prvCheckForValidListAndQueue+0x60>)
 80103fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80103fc:	4b07      	ldr	r3, [pc, #28]	@ (801041c <prvCheckForValidListAndQueue+0x60>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d005      	beq.n	8010410 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010404:	4b05      	ldr	r3, [pc, #20]	@ (801041c <prvCheckForValidListAndQueue+0x60>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	490b      	ldr	r1, [pc, #44]	@ (8010438 <prvCheckForValidListAndQueue+0x7c>)
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe fc24 	bl	800ec58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010410:	f000 f974 	bl	80106fc <vPortExitCritical>
}
 8010414:	bf00      	nop
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	20004a7c 	.word	0x20004a7c
 8010420:	20004a4c 	.word	0x20004a4c
 8010424:	20004a60 	.word	0x20004a60
 8010428:	20004a74 	.word	0x20004a74
 801042c:	20004a78 	.word	0x20004a78
 8010430:	20004b28 	.word	0x20004b28
 8010434:	20004a88 	.word	0x20004a88
 8010438:	08014480 	.word	0x08014480

0801043c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	3b04      	subs	r3, #4
 801044c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	3b04      	subs	r3, #4
 801045a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	f023 0201 	bic.w	r2, r3, #1
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	3b04      	subs	r3, #4
 801046a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801046c:	4a0c      	ldr	r2, [pc, #48]	@ (80104a0 <pxPortInitialiseStack+0x64>)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	3b14      	subs	r3, #20
 8010476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	3b04      	subs	r3, #4
 8010482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f06f 0202 	mvn.w	r2, #2
 801048a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	3b20      	subs	r3, #32
 8010490:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010492:	68fb      	ldr	r3, [r7, #12]
}
 8010494:	4618      	mov	r0, r3
 8010496:	3714      	adds	r7, #20
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr
 80104a0:	080104a5 	.word	0x080104a5

080104a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80104ae:	4b13      	ldr	r3, [pc, #76]	@ (80104fc <prvTaskExitError+0x58>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b6:	d00b      	beq.n	80104d0 <prvTaskExitError+0x2c>
	__asm volatile
 80104b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104bc:	f383 8811 	msr	BASEPRI, r3
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	60fb      	str	r3, [r7, #12]
}
 80104ca:	bf00      	nop
 80104cc:	bf00      	nop
 80104ce:	e7fd      	b.n	80104cc <prvTaskExitError+0x28>
	__asm volatile
 80104d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104d4:	f383 8811 	msr	BASEPRI, r3
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	60bb      	str	r3, [r7, #8]
}
 80104e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80104e4:	bf00      	nop
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0fc      	beq.n	80104e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80104ec:	bf00      	nop
 80104ee:	bf00      	nop
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	2000005c 	.word	0x2000005c

08010500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010500:	4b07      	ldr	r3, [pc, #28]	@ (8010520 <pxCurrentTCBConst2>)
 8010502:	6819      	ldr	r1, [r3, #0]
 8010504:	6808      	ldr	r0, [r1, #0]
 8010506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050a:	f380 8809 	msr	PSP, r0
 801050e:	f3bf 8f6f 	isb	sy
 8010512:	f04f 0000 	mov.w	r0, #0
 8010516:	f380 8811 	msr	BASEPRI, r0
 801051a:	4770      	bx	lr
 801051c:	f3af 8000 	nop.w

08010520 <pxCurrentTCBConst2>:
 8010520:	2000454c 	.word	0x2000454c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010524:	bf00      	nop
 8010526:	bf00      	nop

08010528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010528:	4808      	ldr	r0, [pc, #32]	@ (801054c <prvPortStartFirstTask+0x24>)
 801052a:	6800      	ldr	r0, [r0, #0]
 801052c:	6800      	ldr	r0, [r0, #0]
 801052e:	f380 8808 	msr	MSP, r0
 8010532:	f04f 0000 	mov.w	r0, #0
 8010536:	f380 8814 	msr	CONTROL, r0
 801053a:	b662      	cpsie	i
 801053c:	b661      	cpsie	f
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	df00      	svc	0
 8010548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801054a:	bf00      	nop
 801054c:	e000ed08 	.word	0xe000ed08

08010550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b086      	sub	sp, #24
 8010554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010556:	4b47      	ldr	r3, [pc, #284]	@ (8010674 <xPortStartScheduler+0x124>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a47      	ldr	r2, [pc, #284]	@ (8010678 <xPortStartScheduler+0x128>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d10b      	bne.n	8010578 <xPortStartScheduler+0x28>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	613b      	str	r3, [r7, #16]
}
 8010572:	bf00      	nop
 8010574:	bf00      	nop
 8010576:	e7fd      	b.n	8010574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010578:	4b3e      	ldr	r3, [pc, #248]	@ (8010674 <xPortStartScheduler+0x124>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4a3f      	ldr	r2, [pc, #252]	@ (801067c <xPortStartScheduler+0x12c>)
 801057e:	4293      	cmp	r3, r2
 8010580:	d10b      	bne.n	801059a <xPortStartScheduler+0x4a>
	__asm volatile
 8010582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010586:	f383 8811 	msr	BASEPRI, r3
 801058a:	f3bf 8f6f 	isb	sy
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	60fb      	str	r3, [r7, #12]
}
 8010594:	bf00      	nop
 8010596:	bf00      	nop
 8010598:	e7fd      	b.n	8010596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801059a:	4b39      	ldr	r3, [pc, #228]	@ (8010680 <xPortStartScheduler+0x130>)
 801059c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	781b      	ldrb	r3, [r3, #0]
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	22ff      	movs	r2, #255	@ 0xff
 80105aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105b4:	78fb      	ldrb	r3, [r7, #3]
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	4b31      	ldr	r3, [pc, #196]	@ (8010684 <xPortStartScheduler+0x134>)
 80105c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105c2:	4b31      	ldr	r3, [pc, #196]	@ (8010688 <xPortStartScheduler+0x138>)
 80105c4:	2207      	movs	r2, #7
 80105c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105c8:	e009      	b.n	80105de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80105ca:	4b2f      	ldr	r3, [pc, #188]	@ (8010688 <xPortStartScheduler+0x138>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	3b01      	subs	r3, #1
 80105d0:	4a2d      	ldr	r2, [pc, #180]	@ (8010688 <xPortStartScheduler+0x138>)
 80105d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80105d4:	78fb      	ldrb	r3, [r7, #3]
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105de:	78fb      	ldrb	r3, [r7, #3]
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105e6:	2b80      	cmp	r3, #128	@ 0x80
 80105e8:	d0ef      	beq.n	80105ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80105ea:	4b27      	ldr	r3, [pc, #156]	@ (8010688 <xPortStartScheduler+0x138>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f1c3 0307 	rsb	r3, r3, #7
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d00b      	beq.n	801060e <xPortStartScheduler+0xbe>
	__asm volatile
 80105f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105fa:	f383 8811 	msr	BASEPRI, r3
 80105fe:	f3bf 8f6f 	isb	sy
 8010602:	f3bf 8f4f 	dsb	sy
 8010606:	60bb      	str	r3, [r7, #8]
}
 8010608:	bf00      	nop
 801060a:	bf00      	nop
 801060c:	e7fd      	b.n	801060a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801060e:	4b1e      	ldr	r3, [pc, #120]	@ (8010688 <xPortStartScheduler+0x138>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	021b      	lsls	r3, r3, #8
 8010614:	4a1c      	ldr	r2, [pc, #112]	@ (8010688 <xPortStartScheduler+0x138>)
 8010616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010618:	4b1b      	ldr	r3, [pc, #108]	@ (8010688 <xPortStartScheduler+0x138>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010620:	4a19      	ldr	r2, [pc, #100]	@ (8010688 <xPortStartScheduler+0x138>)
 8010622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	b2da      	uxtb	r2, r3
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801062c:	4b17      	ldr	r3, [pc, #92]	@ (801068c <xPortStartScheduler+0x13c>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a16      	ldr	r2, [pc, #88]	@ (801068c <xPortStartScheduler+0x13c>)
 8010632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010638:	4b14      	ldr	r3, [pc, #80]	@ (801068c <xPortStartScheduler+0x13c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a13      	ldr	r2, [pc, #76]	@ (801068c <xPortStartScheduler+0x13c>)
 801063e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010644:	f000 f8da 	bl	80107fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010648:	4b11      	ldr	r3, [pc, #68]	@ (8010690 <xPortStartScheduler+0x140>)
 801064a:	2200      	movs	r2, #0
 801064c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801064e:	f000 f8f9 	bl	8010844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010652:	4b10      	ldr	r3, [pc, #64]	@ (8010694 <xPortStartScheduler+0x144>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a0f      	ldr	r2, [pc, #60]	@ (8010694 <xPortStartScheduler+0x144>)
 8010658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801065c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801065e:	f7ff ff63 	bl	8010528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010662:	f7fe ff31 	bl	800f4c8 <vTaskSwitchContext>
	prvTaskExitError();
 8010666:	f7ff ff1d 	bl	80104a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	e000ed00 	.word	0xe000ed00
 8010678:	410fc271 	.word	0x410fc271
 801067c:	410fc270 	.word	0x410fc270
 8010680:	e000e400 	.word	0xe000e400
 8010684:	20004b78 	.word	0x20004b78
 8010688:	20004b7c 	.word	0x20004b7c
 801068c:	e000ed20 	.word	0xe000ed20
 8010690:	2000005c 	.word	0x2000005c
 8010694:	e000ef34 	.word	0xe000ef34

08010698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	607b      	str	r3, [r7, #4]
}
 80106b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106b2:	4b10      	ldr	r3, [pc, #64]	@ (80106f4 <vPortEnterCritical+0x5c>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3301      	adds	r3, #1
 80106b8:	4a0e      	ldr	r2, [pc, #56]	@ (80106f4 <vPortEnterCritical+0x5c>)
 80106ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106bc:	4b0d      	ldr	r3, [pc, #52]	@ (80106f4 <vPortEnterCritical+0x5c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d110      	bne.n	80106e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106c4:	4b0c      	ldr	r3, [pc, #48]	@ (80106f8 <vPortEnterCritical+0x60>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00b      	beq.n	80106e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80106ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	603b      	str	r3, [r7, #0]
}
 80106e0:	bf00      	nop
 80106e2:	bf00      	nop
 80106e4:	e7fd      	b.n	80106e2 <vPortEnterCritical+0x4a>
	}
}
 80106e6:	bf00      	nop
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	2000005c 	.word	0x2000005c
 80106f8:	e000ed04 	.word	0xe000ed04

080106fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010702:	4b12      	ldr	r3, [pc, #72]	@ (801074c <vPortExitCritical+0x50>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d10b      	bne.n	8010722 <vPortExitCritical+0x26>
	__asm volatile
 801070a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801070e:	f383 8811 	msr	BASEPRI, r3
 8010712:	f3bf 8f6f 	isb	sy
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	607b      	str	r3, [r7, #4]
}
 801071c:	bf00      	nop
 801071e:	bf00      	nop
 8010720:	e7fd      	b.n	801071e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010722:	4b0a      	ldr	r3, [pc, #40]	@ (801074c <vPortExitCritical+0x50>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	3b01      	subs	r3, #1
 8010728:	4a08      	ldr	r2, [pc, #32]	@ (801074c <vPortExitCritical+0x50>)
 801072a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801072c:	4b07      	ldr	r3, [pc, #28]	@ (801074c <vPortExitCritical+0x50>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d105      	bne.n	8010740 <vPortExitCritical+0x44>
 8010734:	2300      	movs	r3, #0
 8010736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	f383 8811 	msr	BASEPRI, r3
}
 801073e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010740:	bf00      	nop
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr
 801074c:	2000005c 	.word	0x2000005c

08010750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010750:	f3ef 8009 	mrs	r0, PSP
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	4b15      	ldr	r3, [pc, #84]	@ (80107b0 <pxCurrentTCBConst>)
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	f01e 0f10 	tst.w	lr, #16
 8010760:	bf08      	it	eq
 8010762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076a:	6010      	str	r0, [r2, #0]
 801076c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010774:	f380 8811 	msr	BASEPRI, r0
 8010778:	f3bf 8f4f 	dsb	sy
 801077c:	f3bf 8f6f 	isb	sy
 8010780:	f7fe fea2 	bl	800f4c8 <vTaskSwitchContext>
 8010784:	f04f 0000 	mov.w	r0, #0
 8010788:	f380 8811 	msr	BASEPRI, r0
 801078c:	bc09      	pop	{r0, r3}
 801078e:	6819      	ldr	r1, [r3, #0]
 8010790:	6808      	ldr	r0, [r1, #0]
 8010792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010796:	f01e 0f10 	tst.w	lr, #16
 801079a:	bf08      	it	eq
 801079c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107a0:	f380 8809 	msr	PSP, r0
 80107a4:	f3bf 8f6f 	isb	sy
 80107a8:	4770      	bx	lr
 80107aa:	bf00      	nop
 80107ac:	f3af 8000 	nop.w

080107b0 <pxCurrentTCBConst>:
 80107b0:	2000454c 	.word	0x2000454c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop

080107b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
	__asm volatile
 80107be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	607b      	str	r3, [r7, #4]
}
 80107d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80107d2:	f7fe fdbf 	bl	800f354 <xTaskIncrementTick>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d003      	beq.n	80107e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80107dc:	4b06      	ldr	r3, [pc, #24]	@ (80107f8 <xPortSysTickHandler+0x40>)
 80107de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107e2:	601a      	str	r2, [r3, #0]
 80107e4:	2300      	movs	r3, #0
 80107e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	f383 8811 	msr	BASEPRI, r3
}
 80107ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107fc:	b480      	push	{r7}
 80107fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010800:	4b0b      	ldr	r3, [pc, #44]	@ (8010830 <vPortSetupTimerInterrupt+0x34>)
 8010802:	2200      	movs	r2, #0
 8010804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010806:	4b0b      	ldr	r3, [pc, #44]	@ (8010834 <vPortSetupTimerInterrupt+0x38>)
 8010808:	2200      	movs	r2, #0
 801080a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801080c:	4b0a      	ldr	r3, [pc, #40]	@ (8010838 <vPortSetupTimerInterrupt+0x3c>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a0a      	ldr	r2, [pc, #40]	@ (801083c <vPortSetupTimerInterrupt+0x40>)
 8010812:	fba2 2303 	umull	r2, r3, r2, r3
 8010816:	099b      	lsrs	r3, r3, #6
 8010818:	4a09      	ldr	r2, [pc, #36]	@ (8010840 <vPortSetupTimerInterrupt+0x44>)
 801081a:	3b01      	subs	r3, #1
 801081c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801081e:	4b04      	ldr	r3, [pc, #16]	@ (8010830 <vPortSetupTimerInterrupt+0x34>)
 8010820:	2207      	movs	r2, #7
 8010822:	601a      	str	r2, [r3, #0]
}
 8010824:	bf00      	nop
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	e000e010 	.word	0xe000e010
 8010834:	e000e018 	.word	0xe000e018
 8010838:	20000050 	.word	0x20000050
 801083c:	10624dd3 	.word	0x10624dd3
 8010840:	e000e014 	.word	0xe000e014

08010844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010854 <vPortEnableVFP+0x10>
 8010848:	6801      	ldr	r1, [r0, #0]
 801084a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801084e:	6001      	str	r1, [r0, #0]
 8010850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010852:	bf00      	nop
 8010854:	e000ed88 	.word	0xe000ed88

08010858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801085e:	f3ef 8305 	mrs	r3, IPSR
 8010862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2b0f      	cmp	r3, #15
 8010868:	d915      	bls.n	8010896 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801086a:	4a18      	ldr	r2, [pc, #96]	@ (80108cc <vPortValidateInterruptPriority+0x74>)
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	4413      	add	r3, r2
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010874:	4b16      	ldr	r3, [pc, #88]	@ (80108d0 <vPortValidateInterruptPriority+0x78>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	7afa      	ldrb	r2, [r7, #11]
 801087a:	429a      	cmp	r2, r3
 801087c:	d20b      	bcs.n	8010896 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801087e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010882:	f383 8811 	msr	BASEPRI, r3
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	f3bf 8f4f 	dsb	sy
 801088e:	607b      	str	r3, [r7, #4]
}
 8010890:	bf00      	nop
 8010892:	bf00      	nop
 8010894:	e7fd      	b.n	8010892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010896:	4b0f      	ldr	r3, [pc, #60]	@ (80108d4 <vPortValidateInterruptPriority+0x7c>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801089e:	4b0e      	ldr	r3, [pc, #56]	@ (80108d8 <vPortValidateInterruptPriority+0x80>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d90b      	bls.n	80108be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	603b      	str	r3, [r7, #0]
}
 80108b8:	bf00      	nop
 80108ba:	bf00      	nop
 80108bc:	e7fd      	b.n	80108ba <vPortValidateInterruptPriority+0x62>
	}
 80108be:	bf00      	nop
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	e000e3f0 	.word	0xe000e3f0
 80108d0:	20004b78 	.word	0x20004b78
 80108d4:	e000ed0c 	.word	0xe000ed0c
 80108d8:	20004b7c 	.word	0x20004b7c

080108dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b08a      	sub	sp, #40	@ 0x28
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108e4:	2300      	movs	r3, #0
 80108e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108e8:	f7fe fc78 	bl	800f1dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108ec:	4b5c      	ldr	r3, [pc, #368]	@ (8010a60 <pvPortMalloc+0x184>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108f4:	f000 f924 	bl	8010b40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108f8:	4b5a      	ldr	r3, [pc, #360]	@ (8010a64 <pvPortMalloc+0x188>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4013      	ands	r3, r2
 8010900:	2b00      	cmp	r3, #0
 8010902:	f040 8095 	bne.w	8010a30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d01e      	beq.n	801094a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801090c:	2208      	movs	r2, #8
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4413      	add	r3, r2
 8010912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f003 0307 	and.w	r3, r3, #7
 801091a:	2b00      	cmp	r3, #0
 801091c:	d015      	beq.n	801094a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f023 0307 	bic.w	r3, r3, #7
 8010924:	3308      	adds	r3, #8
 8010926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f003 0307 	and.w	r3, r3, #7
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00b      	beq.n	801094a <pvPortMalloc+0x6e>
	__asm volatile
 8010932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010936:	f383 8811 	msr	BASEPRI, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	617b      	str	r3, [r7, #20]
}
 8010944:	bf00      	nop
 8010946:	bf00      	nop
 8010948:	e7fd      	b.n	8010946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d06f      	beq.n	8010a30 <pvPortMalloc+0x154>
 8010950:	4b45      	ldr	r3, [pc, #276]	@ (8010a68 <pvPortMalloc+0x18c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	429a      	cmp	r2, r3
 8010958:	d86a      	bhi.n	8010a30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801095a:	4b44      	ldr	r3, [pc, #272]	@ (8010a6c <pvPortMalloc+0x190>)
 801095c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801095e:	4b43      	ldr	r3, [pc, #268]	@ (8010a6c <pvPortMalloc+0x190>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010964:	e004      	b.n	8010970 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	429a      	cmp	r2, r3
 8010978:	d903      	bls.n	8010982 <pvPortMalloc+0xa6>
 801097a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1f1      	bne.n	8010966 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010982:	4b37      	ldr	r3, [pc, #220]	@ (8010a60 <pvPortMalloc+0x184>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010988:	429a      	cmp	r2, r3
 801098a:	d051      	beq.n	8010a30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801098c:	6a3b      	ldr	r3, [r7, #32]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2208      	movs	r2, #8
 8010992:	4413      	add	r3, r2
 8010994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a0:	685a      	ldr	r2, [r3, #4]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	1ad2      	subs	r2, r2, r3
 80109a6:	2308      	movs	r3, #8
 80109a8:	005b      	lsls	r3, r3, #1
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d920      	bls.n	80109f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80109ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	4413      	add	r3, r2
 80109b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	f003 0307 	and.w	r3, r3, #7
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00b      	beq.n	80109d8 <pvPortMalloc+0xfc>
	__asm volatile
 80109c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c4:	f383 8811 	msr	BASEPRI, r3
 80109c8:	f3bf 8f6f 	isb	sy
 80109cc:	f3bf 8f4f 	dsb	sy
 80109d0:	613b      	str	r3, [r7, #16]
}
 80109d2:	bf00      	nop
 80109d4:	bf00      	nop
 80109d6:	e7fd      	b.n	80109d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80109d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109da:	685a      	ldr	r2, [r3, #4]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	1ad2      	subs	r2, r2, r3
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80109e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109ea:	69b8      	ldr	r0, [r7, #24]
 80109ec:	f000 f90a 	bl	8010c04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010a68 <pvPortMalloc+0x18c>)
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	4a1b      	ldr	r2, [pc, #108]	@ (8010a68 <pvPortMalloc+0x18c>)
 80109fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010a68 <pvPortMalloc+0x18c>)
 8010a00:	681a      	ldr	r2, [r3, #0]
 8010a02:	4b1b      	ldr	r3, [pc, #108]	@ (8010a70 <pvPortMalloc+0x194>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d203      	bcs.n	8010a12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a0a:	4b17      	ldr	r3, [pc, #92]	@ (8010a68 <pvPortMalloc+0x18c>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a18      	ldr	r2, [pc, #96]	@ (8010a70 <pvPortMalloc+0x194>)
 8010a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a14:	685a      	ldr	r2, [r3, #4]
 8010a16:	4b13      	ldr	r3, [pc, #76]	@ (8010a64 <pvPortMalloc+0x188>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	431a      	orrs	r2, r3
 8010a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010a26:	4b13      	ldr	r3, [pc, #76]	@ (8010a74 <pvPortMalloc+0x198>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	4a11      	ldr	r2, [pc, #68]	@ (8010a74 <pvPortMalloc+0x198>)
 8010a2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a30:	f7fe fbe2 	bl	800f1f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	f003 0307 	and.w	r3, r3, #7
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00b      	beq.n	8010a56 <pvPortMalloc+0x17a>
	__asm volatile
 8010a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	60fb      	str	r3, [r7, #12]
}
 8010a50:	bf00      	nop
 8010a52:	bf00      	nop
 8010a54:	e7fd      	b.n	8010a52 <pvPortMalloc+0x176>
	return pvReturn;
 8010a56:	69fb      	ldr	r3, [r7, #28]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3728      	adds	r7, #40	@ 0x28
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	2000e7c8 	.word	0x2000e7c8
 8010a64:	2000e7dc 	.word	0x2000e7dc
 8010a68:	2000e7cc 	.word	0x2000e7cc
 8010a6c:	2000e7c0 	.word	0x2000e7c0
 8010a70:	2000e7d0 	.word	0x2000e7d0
 8010a74:	2000e7d4 	.word	0x2000e7d4

08010a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d04f      	beq.n	8010b2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a8a:	2308      	movs	r3, #8
 8010a8c:	425b      	negs	r3, r3
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	4413      	add	r3, r2
 8010a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	685a      	ldr	r2, [r3, #4]
 8010a9c:	4b25      	ldr	r3, [pc, #148]	@ (8010b34 <vPortFree+0xbc>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d10b      	bne.n	8010abe <vPortFree+0x46>
	__asm volatile
 8010aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	60fb      	str	r3, [r7, #12]
}
 8010ab8:	bf00      	nop
 8010aba:	bf00      	nop
 8010abc:	e7fd      	b.n	8010aba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00b      	beq.n	8010ade <vPortFree+0x66>
	__asm volatile
 8010ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aca:	f383 8811 	msr	BASEPRI, r3
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	60bb      	str	r3, [r7, #8]
}
 8010ad8:	bf00      	nop
 8010ada:	bf00      	nop
 8010adc:	e7fd      	b.n	8010ada <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	685a      	ldr	r2, [r3, #4]
 8010ae2:	4b14      	ldr	r3, [pc, #80]	@ (8010b34 <vPortFree+0xbc>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4013      	ands	r3, r2
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d01e      	beq.n	8010b2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d11a      	bne.n	8010b2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	4b0e      	ldr	r3, [pc, #56]	@ (8010b34 <vPortFree+0xbc>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	43db      	mvns	r3, r3
 8010afe:	401a      	ands	r2, r3
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b04:	f7fe fb6a 	bl	800f1dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	685a      	ldr	r2, [r3, #4]
 8010b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b38 <vPortFree+0xc0>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4413      	add	r3, r2
 8010b12:	4a09      	ldr	r2, [pc, #36]	@ (8010b38 <vPortFree+0xc0>)
 8010b14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b16:	6938      	ldr	r0, [r7, #16]
 8010b18:	f000 f874 	bl	8010c04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010b1c:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <vPortFree+0xc4>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3301      	adds	r3, #1
 8010b22:	4a06      	ldr	r2, [pc, #24]	@ (8010b3c <vPortFree+0xc4>)
 8010b24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010b26:	f7fe fb67 	bl	800f1f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b2a:	bf00      	nop
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	2000e7dc 	.word	0x2000e7dc
 8010b38:	2000e7cc 	.word	0x2000e7cc
 8010b3c:	2000e7d8 	.word	0x2000e7d8

08010b40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b46:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8010b4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b4c:	4b27      	ldr	r3, [pc, #156]	@ (8010bec <prvHeapInit+0xac>)
 8010b4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f003 0307 	and.w	r3, r3, #7
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00c      	beq.n	8010b74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	3307      	adds	r3, #7
 8010b5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f023 0307 	bic.w	r3, r3, #7
 8010b66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8010bec <prvHeapInit+0xac>)
 8010b70:	4413      	add	r3, r2
 8010b72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b78:	4a1d      	ldr	r2, [pc, #116]	@ (8010bf0 <prvHeapInit+0xb0>)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8010bf0 <prvHeapInit+0xb0>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	68ba      	ldr	r2, [r7, #8]
 8010b88:	4413      	add	r3, r2
 8010b8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b8c:	2208      	movs	r2, #8
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	1a9b      	subs	r3, r3, r2
 8010b92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f023 0307 	bic.w	r3, r3, #7
 8010b9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	4a15      	ldr	r2, [pc, #84]	@ (8010bf4 <prvHeapInit+0xb4>)
 8010ba0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010ba2:	4b14      	ldr	r3, [pc, #80]	@ (8010bf4 <prvHeapInit+0xb4>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010baa:	4b12      	ldr	r3, [pc, #72]	@ (8010bf4 <prvHeapInit+0xb4>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	1ad2      	subs	r2, r2, r3
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8010bf4 <prvHeapInit+0xb4>)
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8010bf8 <prvHeapInit+0xb8>)
 8010bce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	4a09      	ldr	r2, [pc, #36]	@ (8010bfc <prvHeapInit+0xbc>)
 8010bd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010bd8:	4b09      	ldr	r3, [pc, #36]	@ (8010c00 <prvHeapInit+0xc0>)
 8010bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010bde:	601a      	str	r2, [r3, #0]
}
 8010be0:	bf00      	nop
 8010be2:	3714      	adds	r7, #20
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	20004b80 	.word	0x20004b80
 8010bf0:	2000e7c0 	.word	0x2000e7c0
 8010bf4:	2000e7c8 	.word	0x2000e7c8
 8010bf8:	2000e7d0 	.word	0x2000e7d0
 8010bfc:	2000e7cc 	.word	0x2000e7cc
 8010c00:	2000e7dc 	.word	0x2000e7dc

08010c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c0c:	4b28      	ldr	r3, [pc, #160]	@ (8010cb0 <prvInsertBlockIntoFreeList+0xac>)
 8010c0e:	60fb      	str	r3, [r7, #12]
 8010c10:	e002      	b.n	8010c18 <prvInsertBlockIntoFreeList+0x14>
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	60fb      	str	r3, [r7, #12]
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d8f7      	bhi.n	8010c12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	68ba      	ldr	r2, [r7, #8]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d108      	bne.n	8010c46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	685a      	ldr	r2, [r3, #4]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	441a      	add	r2, r3
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	441a      	add	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d118      	bne.n	8010c8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	4b15      	ldr	r3, [pc, #84]	@ (8010cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d00d      	beq.n	8010c82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	685a      	ldr	r2, [r3, #4]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	441a      	add	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	601a      	str	r2, [r3, #0]
 8010c80:	e008      	b.n	8010c94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c82:	4b0c      	ldr	r3, [pc, #48]	@ (8010cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	601a      	str	r2, [r3, #0]
 8010c8a:	e003      	b.n	8010c94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d002      	beq.n	8010ca2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ca2:	bf00      	nop
 8010ca4:	3714      	adds	r7, #20
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	2000e7c0 	.word	0x2000e7c0
 8010cb4:	2000e7c8 	.word	0x2000e7c8

08010cb8 <sqrt>:
 8010cb8:	b538      	push	{r3, r4, r5, lr}
 8010cba:	ed2d 8b02 	vpush	{d8}
 8010cbe:	ec55 4b10 	vmov	r4, r5, d0
 8010cc2:	f000 f825 	bl	8010d10 <__ieee754_sqrt>
 8010cc6:	4622      	mov	r2, r4
 8010cc8:	462b      	mov	r3, r5
 8010cca:	4620      	mov	r0, r4
 8010ccc:	4629      	mov	r1, r5
 8010cce:	eeb0 8a40 	vmov.f32	s16, s0
 8010cd2:	eef0 8a60 	vmov.f32	s17, s1
 8010cd6:	f7ef ff29 	bl	8000b2c <__aeabi_dcmpun>
 8010cda:	b990      	cbnz	r0, 8010d02 <sqrt+0x4a>
 8010cdc:	2200      	movs	r2, #0
 8010cde:	2300      	movs	r3, #0
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	f7ef fefa 	bl	8000adc <__aeabi_dcmplt>
 8010ce8:	b158      	cbz	r0, 8010d02 <sqrt+0x4a>
 8010cea:	f000 ffcf 	bl	8011c8c <__errno>
 8010cee:	2321      	movs	r3, #33	@ 0x21
 8010cf0:	6003      	str	r3, [r0, #0]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	4610      	mov	r0, r2
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	f7ef fda7 	bl	800084c <__aeabi_ddiv>
 8010cfe:	ec41 0b18 	vmov	d8, r0, r1
 8010d02:	eeb0 0a48 	vmov.f32	s0, s16
 8010d06:	eef0 0a68 	vmov.f32	s1, s17
 8010d0a:	ecbd 8b02 	vpop	{d8}
 8010d0e:	bd38      	pop	{r3, r4, r5, pc}

08010d10 <__ieee754_sqrt>:
 8010d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	4a68      	ldr	r2, [pc, #416]	@ (8010eb8 <__ieee754_sqrt+0x1a8>)
 8010d16:	ec55 4b10 	vmov	r4, r5, d0
 8010d1a:	43aa      	bics	r2, r5
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	4621      	mov	r1, r4
 8010d20:	d110      	bne.n	8010d44 <__ieee754_sqrt+0x34>
 8010d22:	4622      	mov	r2, r4
 8010d24:	4620      	mov	r0, r4
 8010d26:	4629      	mov	r1, r5
 8010d28:	f7ef fc66 	bl	80005f8 <__aeabi_dmul>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4620      	mov	r0, r4
 8010d32:	4629      	mov	r1, r5
 8010d34:	f7ef faaa 	bl	800028c <__adddf3>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	460d      	mov	r5, r1
 8010d3c:	ec45 4b10 	vmov	d0, r4, r5
 8010d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d44:	2d00      	cmp	r5, #0
 8010d46:	dc0e      	bgt.n	8010d66 <__ieee754_sqrt+0x56>
 8010d48:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010d4c:	4322      	orrs	r2, r4
 8010d4e:	d0f5      	beq.n	8010d3c <__ieee754_sqrt+0x2c>
 8010d50:	b19d      	cbz	r5, 8010d7a <__ieee754_sqrt+0x6a>
 8010d52:	4622      	mov	r2, r4
 8010d54:	4620      	mov	r0, r4
 8010d56:	4629      	mov	r1, r5
 8010d58:	f7ef fa96 	bl	8000288 <__aeabi_dsub>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	460b      	mov	r3, r1
 8010d60:	f7ef fd74 	bl	800084c <__aeabi_ddiv>
 8010d64:	e7e8      	b.n	8010d38 <__ieee754_sqrt+0x28>
 8010d66:	152a      	asrs	r2, r5, #20
 8010d68:	d115      	bne.n	8010d96 <__ieee754_sqrt+0x86>
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	e009      	b.n	8010d82 <__ieee754_sqrt+0x72>
 8010d6e:	0acb      	lsrs	r3, r1, #11
 8010d70:	3a15      	subs	r2, #21
 8010d72:	0549      	lsls	r1, r1, #21
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d0fa      	beq.n	8010d6e <__ieee754_sqrt+0x5e>
 8010d78:	e7f7      	b.n	8010d6a <__ieee754_sqrt+0x5a>
 8010d7a:	462a      	mov	r2, r5
 8010d7c:	e7fa      	b.n	8010d74 <__ieee754_sqrt+0x64>
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	3001      	adds	r0, #1
 8010d82:	02dc      	lsls	r4, r3, #11
 8010d84:	d5fb      	bpl.n	8010d7e <__ieee754_sqrt+0x6e>
 8010d86:	1e44      	subs	r4, r0, #1
 8010d88:	1b12      	subs	r2, r2, r4
 8010d8a:	f1c0 0420 	rsb	r4, r0, #32
 8010d8e:	fa21 f404 	lsr.w	r4, r1, r4
 8010d92:	4323      	orrs	r3, r4
 8010d94:	4081      	lsls	r1, r0
 8010d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d9a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010da2:	07d2      	lsls	r2, r2, #31
 8010da4:	bf5c      	itt	pl
 8010da6:	005b      	lslpl	r3, r3, #1
 8010da8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010dac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010db0:	bf58      	it	pl
 8010db2:	0049      	lslpl	r1, r1, #1
 8010db4:	2600      	movs	r6, #0
 8010db6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010dba:	106d      	asrs	r5, r5, #1
 8010dbc:	0049      	lsls	r1, r1, #1
 8010dbe:	2016      	movs	r0, #22
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010dc6:	1917      	adds	r7, r2, r4
 8010dc8:	429f      	cmp	r7, r3
 8010dca:	bfde      	ittt	le
 8010dcc:	193a      	addle	r2, r7, r4
 8010dce:	1bdb      	suble	r3, r3, r7
 8010dd0:	1936      	addle	r6, r6, r4
 8010dd2:	0fcf      	lsrs	r7, r1, #31
 8010dd4:	3801      	subs	r0, #1
 8010dd6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010dda:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010dde:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010de2:	d1f0      	bne.n	8010dc6 <__ieee754_sqrt+0xb6>
 8010de4:	4604      	mov	r4, r0
 8010de6:	2720      	movs	r7, #32
 8010de8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010dec:	429a      	cmp	r2, r3
 8010dee:	eb00 0e0c 	add.w	lr, r0, ip
 8010df2:	db02      	blt.n	8010dfa <__ieee754_sqrt+0xea>
 8010df4:	d113      	bne.n	8010e1e <__ieee754_sqrt+0x10e>
 8010df6:	458e      	cmp	lr, r1
 8010df8:	d811      	bhi.n	8010e1e <__ieee754_sqrt+0x10e>
 8010dfa:	f1be 0f00 	cmp.w	lr, #0
 8010dfe:	eb0e 000c 	add.w	r0, lr, ip
 8010e02:	da42      	bge.n	8010e8a <__ieee754_sqrt+0x17a>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	db40      	blt.n	8010e8a <__ieee754_sqrt+0x17a>
 8010e08:	f102 0801 	add.w	r8, r2, #1
 8010e0c:	1a9b      	subs	r3, r3, r2
 8010e0e:	458e      	cmp	lr, r1
 8010e10:	bf88      	it	hi
 8010e12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010e16:	eba1 010e 	sub.w	r1, r1, lr
 8010e1a:	4464      	add	r4, ip
 8010e1c:	4642      	mov	r2, r8
 8010e1e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010e22:	3f01      	subs	r7, #1
 8010e24:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010e28:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010e2c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010e30:	d1dc      	bne.n	8010dec <__ieee754_sqrt+0xdc>
 8010e32:	4319      	orrs	r1, r3
 8010e34:	d01b      	beq.n	8010e6e <__ieee754_sqrt+0x15e>
 8010e36:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010ebc <__ieee754_sqrt+0x1ac>
 8010e3a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010ec0 <__ieee754_sqrt+0x1b0>
 8010e3e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010e42:	e9db 2300 	ldrd	r2, r3, [fp]
 8010e46:	f7ef fa1f 	bl	8000288 <__aeabi_dsub>
 8010e4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	4640      	mov	r0, r8
 8010e54:	4649      	mov	r1, r9
 8010e56:	f7ef fe4b 	bl	8000af0 <__aeabi_dcmple>
 8010e5a:	b140      	cbz	r0, 8010e6e <__ieee754_sqrt+0x15e>
 8010e5c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010e60:	e9da 0100 	ldrd	r0, r1, [sl]
 8010e64:	e9db 2300 	ldrd	r2, r3, [fp]
 8010e68:	d111      	bne.n	8010e8e <__ieee754_sqrt+0x17e>
 8010e6a:	3601      	adds	r6, #1
 8010e6c:	463c      	mov	r4, r7
 8010e6e:	1072      	asrs	r2, r6, #1
 8010e70:	0863      	lsrs	r3, r4, #1
 8010e72:	07f1      	lsls	r1, r6, #31
 8010e74:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010e78:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010e7c:	bf48      	it	mi
 8010e7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010e82:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010e86:	4618      	mov	r0, r3
 8010e88:	e756      	b.n	8010d38 <__ieee754_sqrt+0x28>
 8010e8a:	4690      	mov	r8, r2
 8010e8c:	e7be      	b.n	8010e0c <__ieee754_sqrt+0xfc>
 8010e8e:	f7ef f9fd 	bl	800028c <__adddf3>
 8010e92:	e9da 8900 	ldrd	r8, r9, [sl]
 8010e96:	4602      	mov	r2, r0
 8010e98:	460b      	mov	r3, r1
 8010e9a:	4640      	mov	r0, r8
 8010e9c:	4649      	mov	r1, r9
 8010e9e:	f7ef fe1d 	bl	8000adc <__aeabi_dcmplt>
 8010ea2:	b120      	cbz	r0, 8010eae <__ieee754_sqrt+0x19e>
 8010ea4:	1ca0      	adds	r0, r4, #2
 8010ea6:	bf08      	it	eq
 8010ea8:	3601      	addeq	r6, #1
 8010eaa:	3402      	adds	r4, #2
 8010eac:	e7df      	b.n	8010e6e <__ieee754_sqrt+0x15e>
 8010eae:	1c63      	adds	r3, r4, #1
 8010eb0:	f023 0401 	bic.w	r4, r3, #1
 8010eb4:	e7db      	b.n	8010e6e <__ieee754_sqrt+0x15e>
 8010eb6:	bf00      	nop
 8010eb8:	7ff00000 	.word	0x7ff00000
 8010ebc:	20000068 	.word	0x20000068
 8010ec0:	20000060 	.word	0x20000060

08010ec4 <atoi>:
 8010ec4:	220a      	movs	r2, #10
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f000 b87a 	b.w	8010fc0 <strtol>

08010ecc <_strtol_l.constprop.0>:
 8010ecc:	2b24      	cmp	r3, #36	@ 0x24
 8010ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed2:	4686      	mov	lr, r0
 8010ed4:	4690      	mov	r8, r2
 8010ed6:	d801      	bhi.n	8010edc <_strtol_l.constprop.0+0x10>
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d106      	bne.n	8010eea <_strtol_l.constprop.0+0x1e>
 8010edc:	f000 fed6 	bl	8011c8c <__errno>
 8010ee0:	2316      	movs	r3, #22
 8010ee2:	6003      	str	r3, [r0, #0]
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eea:	4834      	ldr	r0, [pc, #208]	@ (8010fbc <_strtol_l.constprop.0+0xf0>)
 8010eec:	460d      	mov	r5, r1
 8010eee:	462a      	mov	r2, r5
 8010ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ef4:	5d06      	ldrb	r6, [r0, r4]
 8010ef6:	f016 0608 	ands.w	r6, r6, #8
 8010efa:	d1f8      	bne.n	8010eee <_strtol_l.constprop.0+0x22>
 8010efc:	2c2d      	cmp	r4, #45	@ 0x2d
 8010efe:	d12d      	bne.n	8010f5c <_strtol_l.constprop.0+0x90>
 8010f00:	782c      	ldrb	r4, [r5, #0]
 8010f02:	2601      	movs	r6, #1
 8010f04:	1c95      	adds	r5, r2, #2
 8010f06:	f033 0210 	bics.w	r2, r3, #16
 8010f0a:	d109      	bne.n	8010f20 <_strtol_l.constprop.0+0x54>
 8010f0c:	2c30      	cmp	r4, #48	@ 0x30
 8010f0e:	d12a      	bne.n	8010f66 <_strtol_l.constprop.0+0x9a>
 8010f10:	782a      	ldrb	r2, [r5, #0]
 8010f12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f16:	2a58      	cmp	r2, #88	@ 0x58
 8010f18:	d125      	bne.n	8010f66 <_strtol_l.constprop.0+0x9a>
 8010f1a:	786c      	ldrb	r4, [r5, #1]
 8010f1c:	2310      	movs	r3, #16
 8010f1e:	3502      	adds	r5, #2
 8010f20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010f24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010f28:	2200      	movs	r2, #0
 8010f2a:	fbbc f9f3 	udiv	r9, ip, r3
 8010f2e:	4610      	mov	r0, r2
 8010f30:	fb03 ca19 	mls	sl, r3, r9, ip
 8010f34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010f38:	2f09      	cmp	r7, #9
 8010f3a:	d81b      	bhi.n	8010f74 <_strtol_l.constprop.0+0xa8>
 8010f3c:	463c      	mov	r4, r7
 8010f3e:	42a3      	cmp	r3, r4
 8010f40:	dd27      	ble.n	8010f92 <_strtol_l.constprop.0+0xc6>
 8010f42:	1c57      	adds	r7, r2, #1
 8010f44:	d007      	beq.n	8010f56 <_strtol_l.constprop.0+0x8a>
 8010f46:	4581      	cmp	r9, r0
 8010f48:	d320      	bcc.n	8010f8c <_strtol_l.constprop.0+0xc0>
 8010f4a:	d101      	bne.n	8010f50 <_strtol_l.constprop.0+0x84>
 8010f4c:	45a2      	cmp	sl, r4
 8010f4e:	db1d      	blt.n	8010f8c <_strtol_l.constprop.0+0xc0>
 8010f50:	fb00 4003 	mla	r0, r0, r3, r4
 8010f54:	2201      	movs	r2, #1
 8010f56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f5a:	e7eb      	b.n	8010f34 <_strtol_l.constprop.0+0x68>
 8010f5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8010f5e:	bf04      	itt	eq
 8010f60:	782c      	ldrbeq	r4, [r5, #0]
 8010f62:	1c95      	addeq	r5, r2, #2
 8010f64:	e7cf      	b.n	8010f06 <_strtol_l.constprop.0+0x3a>
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1da      	bne.n	8010f20 <_strtol_l.constprop.0+0x54>
 8010f6a:	2c30      	cmp	r4, #48	@ 0x30
 8010f6c:	bf0c      	ite	eq
 8010f6e:	2308      	moveq	r3, #8
 8010f70:	230a      	movne	r3, #10
 8010f72:	e7d5      	b.n	8010f20 <_strtol_l.constprop.0+0x54>
 8010f74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010f78:	2f19      	cmp	r7, #25
 8010f7a:	d801      	bhi.n	8010f80 <_strtol_l.constprop.0+0xb4>
 8010f7c:	3c37      	subs	r4, #55	@ 0x37
 8010f7e:	e7de      	b.n	8010f3e <_strtol_l.constprop.0+0x72>
 8010f80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010f84:	2f19      	cmp	r7, #25
 8010f86:	d804      	bhi.n	8010f92 <_strtol_l.constprop.0+0xc6>
 8010f88:	3c57      	subs	r4, #87	@ 0x57
 8010f8a:	e7d8      	b.n	8010f3e <_strtol_l.constprop.0+0x72>
 8010f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f90:	e7e1      	b.n	8010f56 <_strtol_l.constprop.0+0x8a>
 8010f92:	1c53      	adds	r3, r2, #1
 8010f94:	d108      	bne.n	8010fa8 <_strtol_l.constprop.0+0xdc>
 8010f96:	2322      	movs	r3, #34	@ 0x22
 8010f98:	f8ce 3000 	str.w	r3, [lr]
 8010f9c:	4660      	mov	r0, ip
 8010f9e:	f1b8 0f00 	cmp.w	r8, #0
 8010fa2:	d0a0      	beq.n	8010ee6 <_strtol_l.constprop.0+0x1a>
 8010fa4:	1e69      	subs	r1, r5, #1
 8010fa6:	e006      	b.n	8010fb6 <_strtol_l.constprop.0+0xea>
 8010fa8:	b106      	cbz	r6, 8010fac <_strtol_l.constprop.0+0xe0>
 8010faa:	4240      	negs	r0, r0
 8010fac:	f1b8 0f00 	cmp.w	r8, #0
 8010fb0:	d099      	beq.n	8010ee6 <_strtol_l.constprop.0+0x1a>
 8010fb2:	2a00      	cmp	r2, #0
 8010fb4:	d1f6      	bne.n	8010fa4 <_strtol_l.constprop.0+0xd8>
 8010fb6:	f8c8 1000 	str.w	r1, [r8]
 8010fba:	e794      	b.n	8010ee6 <_strtol_l.constprop.0+0x1a>
 8010fbc:	0801493d 	.word	0x0801493d

08010fc0 <strtol>:
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	460a      	mov	r2, r1
 8010fc4:	4601      	mov	r1, r0
 8010fc6:	4802      	ldr	r0, [pc, #8]	@ (8010fd0 <strtol+0x10>)
 8010fc8:	6800      	ldr	r0, [r0, #0]
 8010fca:	f7ff bf7f 	b.w	8010ecc <_strtol_l.constprop.0>
 8010fce:	bf00      	nop
 8010fd0:	2000007c 	.word	0x2000007c

08010fd4 <__cvt>:
 8010fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd8:	ec57 6b10 	vmov	r6, r7, d0
 8010fdc:	2f00      	cmp	r7, #0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	463b      	mov	r3, r7
 8010fe4:	bfbb      	ittet	lt
 8010fe6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010fea:	461f      	movlt	r7, r3
 8010fec:	2300      	movge	r3, #0
 8010fee:	232d      	movlt	r3, #45	@ 0x2d
 8010ff0:	700b      	strb	r3, [r1, #0]
 8010ff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ff4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010ff8:	4691      	mov	r9, r2
 8010ffa:	f023 0820 	bic.w	r8, r3, #32
 8010ffe:	bfbc      	itt	lt
 8011000:	4632      	movlt	r2, r6
 8011002:	4616      	movlt	r6, r2
 8011004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011008:	d005      	beq.n	8011016 <__cvt+0x42>
 801100a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801100e:	d100      	bne.n	8011012 <__cvt+0x3e>
 8011010:	3401      	adds	r4, #1
 8011012:	2102      	movs	r1, #2
 8011014:	e000      	b.n	8011018 <__cvt+0x44>
 8011016:	2103      	movs	r1, #3
 8011018:	ab03      	add	r3, sp, #12
 801101a:	9301      	str	r3, [sp, #4]
 801101c:	ab02      	add	r3, sp, #8
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	ec47 6b10 	vmov	d0, r6, r7
 8011024:	4653      	mov	r3, sl
 8011026:	4622      	mov	r2, r4
 8011028:	f000 ff1a 	bl	8011e60 <_dtoa_r>
 801102c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011030:	4605      	mov	r5, r0
 8011032:	d119      	bne.n	8011068 <__cvt+0x94>
 8011034:	f019 0f01 	tst.w	r9, #1
 8011038:	d00e      	beq.n	8011058 <__cvt+0x84>
 801103a:	eb00 0904 	add.w	r9, r0, r4
 801103e:	2200      	movs	r2, #0
 8011040:	2300      	movs	r3, #0
 8011042:	4630      	mov	r0, r6
 8011044:	4639      	mov	r1, r7
 8011046:	f7ef fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801104a:	b108      	cbz	r0, 8011050 <__cvt+0x7c>
 801104c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011050:	2230      	movs	r2, #48	@ 0x30
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	454b      	cmp	r3, r9
 8011056:	d31e      	bcc.n	8011096 <__cvt+0xc2>
 8011058:	9b03      	ldr	r3, [sp, #12]
 801105a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801105c:	1b5b      	subs	r3, r3, r5
 801105e:	4628      	mov	r0, r5
 8011060:	6013      	str	r3, [r2, #0]
 8011062:	b004      	add	sp, #16
 8011064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011068:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801106c:	eb00 0904 	add.w	r9, r0, r4
 8011070:	d1e5      	bne.n	801103e <__cvt+0x6a>
 8011072:	7803      	ldrb	r3, [r0, #0]
 8011074:	2b30      	cmp	r3, #48	@ 0x30
 8011076:	d10a      	bne.n	801108e <__cvt+0xba>
 8011078:	2200      	movs	r2, #0
 801107a:	2300      	movs	r3, #0
 801107c:	4630      	mov	r0, r6
 801107e:	4639      	mov	r1, r7
 8011080:	f7ef fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8011084:	b918      	cbnz	r0, 801108e <__cvt+0xba>
 8011086:	f1c4 0401 	rsb	r4, r4, #1
 801108a:	f8ca 4000 	str.w	r4, [sl]
 801108e:	f8da 3000 	ldr.w	r3, [sl]
 8011092:	4499      	add	r9, r3
 8011094:	e7d3      	b.n	801103e <__cvt+0x6a>
 8011096:	1c59      	adds	r1, r3, #1
 8011098:	9103      	str	r1, [sp, #12]
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	e7d9      	b.n	8011052 <__cvt+0x7e>

0801109e <__exponent>:
 801109e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110a0:	2900      	cmp	r1, #0
 80110a2:	bfba      	itte	lt
 80110a4:	4249      	neglt	r1, r1
 80110a6:	232d      	movlt	r3, #45	@ 0x2d
 80110a8:	232b      	movge	r3, #43	@ 0x2b
 80110aa:	2909      	cmp	r1, #9
 80110ac:	7002      	strb	r2, [r0, #0]
 80110ae:	7043      	strb	r3, [r0, #1]
 80110b0:	dd29      	ble.n	8011106 <__exponent+0x68>
 80110b2:	f10d 0307 	add.w	r3, sp, #7
 80110b6:	461d      	mov	r5, r3
 80110b8:	270a      	movs	r7, #10
 80110ba:	461a      	mov	r2, r3
 80110bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80110c0:	fb07 1416 	mls	r4, r7, r6, r1
 80110c4:	3430      	adds	r4, #48	@ 0x30
 80110c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80110ca:	460c      	mov	r4, r1
 80110cc:	2c63      	cmp	r4, #99	@ 0x63
 80110ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80110d2:	4631      	mov	r1, r6
 80110d4:	dcf1      	bgt.n	80110ba <__exponent+0x1c>
 80110d6:	3130      	adds	r1, #48	@ 0x30
 80110d8:	1e94      	subs	r4, r2, #2
 80110da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80110de:	1c41      	adds	r1, r0, #1
 80110e0:	4623      	mov	r3, r4
 80110e2:	42ab      	cmp	r3, r5
 80110e4:	d30a      	bcc.n	80110fc <__exponent+0x5e>
 80110e6:	f10d 0309 	add.w	r3, sp, #9
 80110ea:	1a9b      	subs	r3, r3, r2
 80110ec:	42ac      	cmp	r4, r5
 80110ee:	bf88      	it	hi
 80110f0:	2300      	movhi	r3, #0
 80110f2:	3302      	adds	r3, #2
 80110f4:	4403      	add	r3, r0
 80110f6:	1a18      	subs	r0, r3, r0
 80110f8:	b003      	add	sp, #12
 80110fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011100:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011104:	e7ed      	b.n	80110e2 <__exponent+0x44>
 8011106:	2330      	movs	r3, #48	@ 0x30
 8011108:	3130      	adds	r1, #48	@ 0x30
 801110a:	7083      	strb	r3, [r0, #2]
 801110c:	70c1      	strb	r1, [r0, #3]
 801110e:	1d03      	adds	r3, r0, #4
 8011110:	e7f1      	b.n	80110f6 <__exponent+0x58>
	...

08011114 <_printf_float>:
 8011114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011118:	b08d      	sub	sp, #52	@ 0x34
 801111a:	460c      	mov	r4, r1
 801111c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011120:	4616      	mov	r6, r2
 8011122:	461f      	mov	r7, r3
 8011124:	4605      	mov	r5, r0
 8011126:	f000 fd11 	bl	8011b4c <_localeconv_r>
 801112a:	6803      	ldr	r3, [r0, #0]
 801112c:	9304      	str	r3, [sp, #16]
 801112e:	4618      	mov	r0, r3
 8011130:	f7ef f89e 	bl	8000270 <strlen>
 8011134:	2300      	movs	r3, #0
 8011136:	930a      	str	r3, [sp, #40]	@ 0x28
 8011138:	f8d8 3000 	ldr.w	r3, [r8]
 801113c:	9005      	str	r0, [sp, #20]
 801113e:	3307      	adds	r3, #7
 8011140:	f023 0307 	bic.w	r3, r3, #7
 8011144:	f103 0208 	add.w	r2, r3, #8
 8011148:	f894 a018 	ldrb.w	sl, [r4, #24]
 801114c:	f8d4 b000 	ldr.w	fp, [r4]
 8011150:	f8c8 2000 	str.w	r2, [r8]
 8011154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011158:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801115c:	9307      	str	r3, [sp, #28]
 801115e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011162:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801116a:	4b9c      	ldr	r3, [pc, #624]	@ (80113dc <_printf_float+0x2c8>)
 801116c:	f04f 32ff 	mov.w	r2, #4294967295
 8011170:	f7ef fcdc 	bl	8000b2c <__aeabi_dcmpun>
 8011174:	bb70      	cbnz	r0, 80111d4 <_printf_float+0xc0>
 8011176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801117a:	4b98      	ldr	r3, [pc, #608]	@ (80113dc <_printf_float+0x2c8>)
 801117c:	f04f 32ff 	mov.w	r2, #4294967295
 8011180:	f7ef fcb6 	bl	8000af0 <__aeabi_dcmple>
 8011184:	bb30      	cbnz	r0, 80111d4 <_printf_float+0xc0>
 8011186:	2200      	movs	r2, #0
 8011188:	2300      	movs	r3, #0
 801118a:	4640      	mov	r0, r8
 801118c:	4649      	mov	r1, r9
 801118e:	f7ef fca5 	bl	8000adc <__aeabi_dcmplt>
 8011192:	b110      	cbz	r0, 801119a <_printf_float+0x86>
 8011194:	232d      	movs	r3, #45	@ 0x2d
 8011196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801119a:	4a91      	ldr	r2, [pc, #580]	@ (80113e0 <_printf_float+0x2cc>)
 801119c:	4b91      	ldr	r3, [pc, #580]	@ (80113e4 <_printf_float+0x2d0>)
 801119e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80111a2:	bf94      	ite	ls
 80111a4:	4690      	movls	r8, r2
 80111a6:	4698      	movhi	r8, r3
 80111a8:	2303      	movs	r3, #3
 80111aa:	6123      	str	r3, [r4, #16]
 80111ac:	f02b 0304 	bic.w	r3, fp, #4
 80111b0:	6023      	str	r3, [r4, #0]
 80111b2:	f04f 0900 	mov.w	r9, #0
 80111b6:	9700      	str	r7, [sp, #0]
 80111b8:	4633      	mov	r3, r6
 80111ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80111bc:	4621      	mov	r1, r4
 80111be:	4628      	mov	r0, r5
 80111c0:	f000 f9d2 	bl	8011568 <_printf_common>
 80111c4:	3001      	adds	r0, #1
 80111c6:	f040 808d 	bne.w	80112e4 <_printf_float+0x1d0>
 80111ca:	f04f 30ff 	mov.w	r0, #4294967295
 80111ce:	b00d      	add	sp, #52	@ 0x34
 80111d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d4:	4642      	mov	r2, r8
 80111d6:	464b      	mov	r3, r9
 80111d8:	4640      	mov	r0, r8
 80111da:	4649      	mov	r1, r9
 80111dc:	f7ef fca6 	bl	8000b2c <__aeabi_dcmpun>
 80111e0:	b140      	cbz	r0, 80111f4 <_printf_float+0xe0>
 80111e2:	464b      	mov	r3, r9
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	bfbc      	itt	lt
 80111e8:	232d      	movlt	r3, #45	@ 0x2d
 80111ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80111ee:	4a7e      	ldr	r2, [pc, #504]	@ (80113e8 <_printf_float+0x2d4>)
 80111f0:	4b7e      	ldr	r3, [pc, #504]	@ (80113ec <_printf_float+0x2d8>)
 80111f2:	e7d4      	b.n	801119e <_printf_float+0x8a>
 80111f4:	6863      	ldr	r3, [r4, #4]
 80111f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80111fa:	9206      	str	r2, [sp, #24]
 80111fc:	1c5a      	adds	r2, r3, #1
 80111fe:	d13b      	bne.n	8011278 <_printf_float+0x164>
 8011200:	2306      	movs	r3, #6
 8011202:	6063      	str	r3, [r4, #4]
 8011204:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011208:	2300      	movs	r3, #0
 801120a:	6022      	str	r2, [r4, #0]
 801120c:	9303      	str	r3, [sp, #12]
 801120e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011210:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011214:	ab09      	add	r3, sp, #36	@ 0x24
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	6861      	ldr	r1, [r4, #4]
 801121a:	ec49 8b10 	vmov	d0, r8, r9
 801121e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011222:	4628      	mov	r0, r5
 8011224:	f7ff fed6 	bl	8010fd4 <__cvt>
 8011228:	9b06      	ldr	r3, [sp, #24]
 801122a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801122c:	2b47      	cmp	r3, #71	@ 0x47
 801122e:	4680      	mov	r8, r0
 8011230:	d129      	bne.n	8011286 <_printf_float+0x172>
 8011232:	1cc8      	adds	r0, r1, #3
 8011234:	db02      	blt.n	801123c <_printf_float+0x128>
 8011236:	6863      	ldr	r3, [r4, #4]
 8011238:	4299      	cmp	r1, r3
 801123a:	dd41      	ble.n	80112c0 <_printf_float+0x1ac>
 801123c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011240:	fa5f fa8a 	uxtb.w	sl, sl
 8011244:	3901      	subs	r1, #1
 8011246:	4652      	mov	r2, sl
 8011248:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801124c:	9109      	str	r1, [sp, #36]	@ 0x24
 801124e:	f7ff ff26 	bl	801109e <__exponent>
 8011252:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011254:	1813      	adds	r3, r2, r0
 8011256:	2a01      	cmp	r2, #1
 8011258:	4681      	mov	r9, r0
 801125a:	6123      	str	r3, [r4, #16]
 801125c:	dc02      	bgt.n	8011264 <_printf_float+0x150>
 801125e:	6822      	ldr	r2, [r4, #0]
 8011260:	07d2      	lsls	r2, r2, #31
 8011262:	d501      	bpl.n	8011268 <_printf_float+0x154>
 8011264:	3301      	adds	r3, #1
 8011266:	6123      	str	r3, [r4, #16]
 8011268:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801126c:	2b00      	cmp	r3, #0
 801126e:	d0a2      	beq.n	80111b6 <_printf_float+0xa2>
 8011270:	232d      	movs	r3, #45	@ 0x2d
 8011272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011276:	e79e      	b.n	80111b6 <_printf_float+0xa2>
 8011278:	9a06      	ldr	r2, [sp, #24]
 801127a:	2a47      	cmp	r2, #71	@ 0x47
 801127c:	d1c2      	bne.n	8011204 <_printf_float+0xf0>
 801127e:	2b00      	cmp	r3, #0
 8011280:	d1c0      	bne.n	8011204 <_printf_float+0xf0>
 8011282:	2301      	movs	r3, #1
 8011284:	e7bd      	b.n	8011202 <_printf_float+0xee>
 8011286:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801128a:	d9db      	bls.n	8011244 <_printf_float+0x130>
 801128c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011290:	d118      	bne.n	80112c4 <_printf_float+0x1b0>
 8011292:	2900      	cmp	r1, #0
 8011294:	6863      	ldr	r3, [r4, #4]
 8011296:	dd0b      	ble.n	80112b0 <_printf_float+0x19c>
 8011298:	6121      	str	r1, [r4, #16]
 801129a:	b913      	cbnz	r3, 80112a2 <_printf_float+0x18e>
 801129c:	6822      	ldr	r2, [r4, #0]
 801129e:	07d0      	lsls	r0, r2, #31
 80112a0:	d502      	bpl.n	80112a8 <_printf_float+0x194>
 80112a2:	3301      	adds	r3, #1
 80112a4:	440b      	add	r3, r1
 80112a6:	6123      	str	r3, [r4, #16]
 80112a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80112aa:	f04f 0900 	mov.w	r9, #0
 80112ae:	e7db      	b.n	8011268 <_printf_float+0x154>
 80112b0:	b913      	cbnz	r3, 80112b8 <_printf_float+0x1a4>
 80112b2:	6822      	ldr	r2, [r4, #0]
 80112b4:	07d2      	lsls	r2, r2, #31
 80112b6:	d501      	bpl.n	80112bc <_printf_float+0x1a8>
 80112b8:	3302      	adds	r3, #2
 80112ba:	e7f4      	b.n	80112a6 <_printf_float+0x192>
 80112bc:	2301      	movs	r3, #1
 80112be:	e7f2      	b.n	80112a6 <_printf_float+0x192>
 80112c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80112c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112c6:	4299      	cmp	r1, r3
 80112c8:	db05      	blt.n	80112d6 <_printf_float+0x1c2>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	6121      	str	r1, [r4, #16]
 80112ce:	07d8      	lsls	r0, r3, #31
 80112d0:	d5ea      	bpl.n	80112a8 <_printf_float+0x194>
 80112d2:	1c4b      	adds	r3, r1, #1
 80112d4:	e7e7      	b.n	80112a6 <_printf_float+0x192>
 80112d6:	2900      	cmp	r1, #0
 80112d8:	bfd4      	ite	le
 80112da:	f1c1 0202 	rsble	r2, r1, #2
 80112de:	2201      	movgt	r2, #1
 80112e0:	4413      	add	r3, r2
 80112e2:	e7e0      	b.n	80112a6 <_printf_float+0x192>
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	055a      	lsls	r2, r3, #21
 80112e8:	d407      	bmi.n	80112fa <_printf_float+0x1e6>
 80112ea:	6923      	ldr	r3, [r4, #16]
 80112ec:	4642      	mov	r2, r8
 80112ee:	4631      	mov	r1, r6
 80112f0:	4628      	mov	r0, r5
 80112f2:	47b8      	blx	r7
 80112f4:	3001      	adds	r0, #1
 80112f6:	d12b      	bne.n	8011350 <_printf_float+0x23c>
 80112f8:	e767      	b.n	80111ca <_printf_float+0xb6>
 80112fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80112fe:	f240 80dd 	bls.w	80114bc <_printf_float+0x3a8>
 8011302:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011306:	2200      	movs	r2, #0
 8011308:	2300      	movs	r3, #0
 801130a:	f7ef fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801130e:	2800      	cmp	r0, #0
 8011310:	d033      	beq.n	801137a <_printf_float+0x266>
 8011312:	4a37      	ldr	r2, [pc, #220]	@ (80113f0 <_printf_float+0x2dc>)
 8011314:	2301      	movs	r3, #1
 8011316:	4631      	mov	r1, r6
 8011318:	4628      	mov	r0, r5
 801131a:	47b8      	blx	r7
 801131c:	3001      	adds	r0, #1
 801131e:	f43f af54 	beq.w	80111ca <_printf_float+0xb6>
 8011322:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011326:	4543      	cmp	r3, r8
 8011328:	db02      	blt.n	8011330 <_printf_float+0x21c>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	07d8      	lsls	r0, r3, #31
 801132e:	d50f      	bpl.n	8011350 <_printf_float+0x23c>
 8011330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011334:	4631      	mov	r1, r6
 8011336:	4628      	mov	r0, r5
 8011338:	47b8      	blx	r7
 801133a:	3001      	adds	r0, #1
 801133c:	f43f af45 	beq.w	80111ca <_printf_float+0xb6>
 8011340:	f04f 0900 	mov.w	r9, #0
 8011344:	f108 38ff 	add.w	r8, r8, #4294967295
 8011348:	f104 0a1a 	add.w	sl, r4, #26
 801134c:	45c8      	cmp	r8, r9
 801134e:	dc09      	bgt.n	8011364 <_printf_float+0x250>
 8011350:	6823      	ldr	r3, [r4, #0]
 8011352:	079b      	lsls	r3, r3, #30
 8011354:	f100 8103 	bmi.w	801155e <_printf_float+0x44a>
 8011358:	68e0      	ldr	r0, [r4, #12]
 801135a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801135c:	4298      	cmp	r0, r3
 801135e:	bfb8      	it	lt
 8011360:	4618      	movlt	r0, r3
 8011362:	e734      	b.n	80111ce <_printf_float+0xba>
 8011364:	2301      	movs	r3, #1
 8011366:	4652      	mov	r2, sl
 8011368:	4631      	mov	r1, r6
 801136a:	4628      	mov	r0, r5
 801136c:	47b8      	blx	r7
 801136e:	3001      	adds	r0, #1
 8011370:	f43f af2b 	beq.w	80111ca <_printf_float+0xb6>
 8011374:	f109 0901 	add.w	r9, r9, #1
 8011378:	e7e8      	b.n	801134c <_printf_float+0x238>
 801137a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	dc39      	bgt.n	80113f4 <_printf_float+0x2e0>
 8011380:	4a1b      	ldr	r2, [pc, #108]	@ (80113f0 <_printf_float+0x2dc>)
 8011382:	2301      	movs	r3, #1
 8011384:	4631      	mov	r1, r6
 8011386:	4628      	mov	r0, r5
 8011388:	47b8      	blx	r7
 801138a:	3001      	adds	r0, #1
 801138c:	f43f af1d 	beq.w	80111ca <_printf_float+0xb6>
 8011390:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011394:	ea59 0303 	orrs.w	r3, r9, r3
 8011398:	d102      	bne.n	80113a0 <_printf_float+0x28c>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	07d9      	lsls	r1, r3, #31
 801139e:	d5d7      	bpl.n	8011350 <_printf_float+0x23c>
 80113a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113a4:	4631      	mov	r1, r6
 80113a6:	4628      	mov	r0, r5
 80113a8:	47b8      	blx	r7
 80113aa:	3001      	adds	r0, #1
 80113ac:	f43f af0d 	beq.w	80111ca <_printf_float+0xb6>
 80113b0:	f04f 0a00 	mov.w	sl, #0
 80113b4:	f104 0b1a 	add.w	fp, r4, #26
 80113b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113ba:	425b      	negs	r3, r3
 80113bc:	4553      	cmp	r3, sl
 80113be:	dc01      	bgt.n	80113c4 <_printf_float+0x2b0>
 80113c0:	464b      	mov	r3, r9
 80113c2:	e793      	b.n	80112ec <_printf_float+0x1d8>
 80113c4:	2301      	movs	r3, #1
 80113c6:	465a      	mov	r2, fp
 80113c8:	4631      	mov	r1, r6
 80113ca:	4628      	mov	r0, r5
 80113cc:	47b8      	blx	r7
 80113ce:	3001      	adds	r0, #1
 80113d0:	f43f aefb 	beq.w	80111ca <_printf_float+0xb6>
 80113d4:	f10a 0a01 	add.w	sl, sl, #1
 80113d8:	e7ee      	b.n	80113b8 <_printf_float+0x2a4>
 80113da:	bf00      	nop
 80113dc:	7fefffff 	.word	0x7fefffff
 80113e0:	08014a3d 	.word	0x08014a3d
 80113e4:	08014a41 	.word	0x08014a41
 80113e8:	08014a45 	.word	0x08014a45
 80113ec:	08014a49 	.word	0x08014a49
 80113f0:	08014a4d 	.word	0x08014a4d
 80113f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113fa:	4553      	cmp	r3, sl
 80113fc:	bfa8      	it	ge
 80113fe:	4653      	movge	r3, sl
 8011400:	2b00      	cmp	r3, #0
 8011402:	4699      	mov	r9, r3
 8011404:	dc36      	bgt.n	8011474 <_printf_float+0x360>
 8011406:	f04f 0b00 	mov.w	fp, #0
 801140a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801140e:	f104 021a 	add.w	r2, r4, #26
 8011412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011414:	9306      	str	r3, [sp, #24]
 8011416:	eba3 0309 	sub.w	r3, r3, r9
 801141a:	455b      	cmp	r3, fp
 801141c:	dc31      	bgt.n	8011482 <_printf_float+0x36e>
 801141e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011420:	459a      	cmp	sl, r3
 8011422:	dc3a      	bgt.n	801149a <_printf_float+0x386>
 8011424:	6823      	ldr	r3, [r4, #0]
 8011426:	07da      	lsls	r2, r3, #31
 8011428:	d437      	bmi.n	801149a <_printf_float+0x386>
 801142a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801142c:	ebaa 0903 	sub.w	r9, sl, r3
 8011430:	9b06      	ldr	r3, [sp, #24]
 8011432:	ebaa 0303 	sub.w	r3, sl, r3
 8011436:	4599      	cmp	r9, r3
 8011438:	bfa8      	it	ge
 801143a:	4699      	movge	r9, r3
 801143c:	f1b9 0f00 	cmp.w	r9, #0
 8011440:	dc33      	bgt.n	80114aa <_printf_float+0x396>
 8011442:	f04f 0800 	mov.w	r8, #0
 8011446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801144a:	f104 0b1a 	add.w	fp, r4, #26
 801144e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011450:	ebaa 0303 	sub.w	r3, sl, r3
 8011454:	eba3 0309 	sub.w	r3, r3, r9
 8011458:	4543      	cmp	r3, r8
 801145a:	f77f af79 	ble.w	8011350 <_printf_float+0x23c>
 801145e:	2301      	movs	r3, #1
 8011460:	465a      	mov	r2, fp
 8011462:	4631      	mov	r1, r6
 8011464:	4628      	mov	r0, r5
 8011466:	47b8      	blx	r7
 8011468:	3001      	adds	r0, #1
 801146a:	f43f aeae 	beq.w	80111ca <_printf_float+0xb6>
 801146e:	f108 0801 	add.w	r8, r8, #1
 8011472:	e7ec      	b.n	801144e <_printf_float+0x33a>
 8011474:	4642      	mov	r2, r8
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	47b8      	blx	r7
 801147c:	3001      	adds	r0, #1
 801147e:	d1c2      	bne.n	8011406 <_printf_float+0x2f2>
 8011480:	e6a3      	b.n	80111ca <_printf_float+0xb6>
 8011482:	2301      	movs	r3, #1
 8011484:	4631      	mov	r1, r6
 8011486:	4628      	mov	r0, r5
 8011488:	9206      	str	r2, [sp, #24]
 801148a:	47b8      	blx	r7
 801148c:	3001      	adds	r0, #1
 801148e:	f43f ae9c 	beq.w	80111ca <_printf_float+0xb6>
 8011492:	9a06      	ldr	r2, [sp, #24]
 8011494:	f10b 0b01 	add.w	fp, fp, #1
 8011498:	e7bb      	b.n	8011412 <_printf_float+0x2fe>
 801149a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801149e:	4631      	mov	r1, r6
 80114a0:	4628      	mov	r0, r5
 80114a2:	47b8      	blx	r7
 80114a4:	3001      	adds	r0, #1
 80114a6:	d1c0      	bne.n	801142a <_printf_float+0x316>
 80114a8:	e68f      	b.n	80111ca <_printf_float+0xb6>
 80114aa:	9a06      	ldr	r2, [sp, #24]
 80114ac:	464b      	mov	r3, r9
 80114ae:	4442      	add	r2, r8
 80114b0:	4631      	mov	r1, r6
 80114b2:	4628      	mov	r0, r5
 80114b4:	47b8      	blx	r7
 80114b6:	3001      	adds	r0, #1
 80114b8:	d1c3      	bne.n	8011442 <_printf_float+0x32e>
 80114ba:	e686      	b.n	80111ca <_printf_float+0xb6>
 80114bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80114c0:	f1ba 0f01 	cmp.w	sl, #1
 80114c4:	dc01      	bgt.n	80114ca <_printf_float+0x3b6>
 80114c6:	07db      	lsls	r3, r3, #31
 80114c8:	d536      	bpl.n	8011538 <_printf_float+0x424>
 80114ca:	2301      	movs	r3, #1
 80114cc:	4642      	mov	r2, r8
 80114ce:	4631      	mov	r1, r6
 80114d0:	4628      	mov	r0, r5
 80114d2:	47b8      	blx	r7
 80114d4:	3001      	adds	r0, #1
 80114d6:	f43f ae78 	beq.w	80111ca <_printf_float+0xb6>
 80114da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114de:	4631      	mov	r1, r6
 80114e0:	4628      	mov	r0, r5
 80114e2:	47b8      	blx	r7
 80114e4:	3001      	adds	r0, #1
 80114e6:	f43f ae70 	beq.w	80111ca <_printf_float+0xb6>
 80114ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80114ee:	2200      	movs	r2, #0
 80114f0:	2300      	movs	r3, #0
 80114f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114f6:	f7ef fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80114fa:	b9c0      	cbnz	r0, 801152e <_printf_float+0x41a>
 80114fc:	4653      	mov	r3, sl
 80114fe:	f108 0201 	add.w	r2, r8, #1
 8011502:	4631      	mov	r1, r6
 8011504:	4628      	mov	r0, r5
 8011506:	47b8      	blx	r7
 8011508:	3001      	adds	r0, #1
 801150a:	d10c      	bne.n	8011526 <_printf_float+0x412>
 801150c:	e65d      	b.n	80111ca <_printf_float+0xb6>
 801150e:	2301      	movs	r3, #1
 8011510:	465a      	mov	r2, fp
 8011512:	4631      	mov	r1, r6
 8011514:	4628      	mov	r0, r5
 8011516:	47b8      	blx	r7
 8011518:	3001      	adds	r0, #1
 801151a:	f43f ae56 	beq.w	80111ca <_printf_float+0xb6>
 801151e:	f108 0801 	add.w	r8, r8, #1
 8011522:	45d0      	cmp	r8, sl
 8011524:	dbf3      	blt.n	801150e <_printf_float+0x3fa>
 8011526:	464b      	mov	r3, r9
 8011528:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801152c:	e6df      	b.n	80112ee <_printf_float+0x1da>
 801152e:	f04f 0800 	mov.w	r8, #0
 8011532:	f104 0b1a 	add.w	fp, r4, #26
 8011536:	e7f4      	b.n	8011522 <_printf_float+0x40e>
 8011538:	2301      	movs	r3, #1
 801153a:	4642      	mov	r2, r8
 801153c:	e7e1      	b.n	8011502 <_printf_float+0x3ee>
 801153e:	2301      	movs	r3, #1
 8011540:	464a      	mov	r2, r9
 8011542:	4631      	mov	r1, r6
 8011544:	4628      	mov	r0, r5
 8011546:	47b8      	blx	r7
 8011548:	3001      	adds	r0, #1
 801154a:	f43f ae3e 	beq.w	80111ca <_printf_float+0xb6>
 801154e:	f108 0801 	add.w	r8, r8, #1
 8011552:	68e3      	ldr	r3, [r4, #12]
 8011554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011556:	1a5b      	subs	r3, r3, r1
 8011558:	4543      	cmp	r3, r8
 801155a:	dcf0      	bgt.n	801153e <_printf_float+0x42a>
 801155c:	e6fc      	b.n	8011358 <_printf_float+0x244>
 801155e:	f04f 0800 	mov.w	r8, #0
 8011562:	f104 0919 	add.w	r9, r4, #25
 8011566:	e7f4      	b.n	8011552 <_printf_float+0x43e>

08011568 <_printf_common>:
 8011568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801156c:	4616      	mov	r6, r2
 801156e:	4698      	mov	r8, r3
 8011570:	688a      	ldr	r2, [r1, #8]
 8011572:	690b      	ldr	r3, [r1, #16]
 8011574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011578:	4293      	cmp	r3, r2
 801157a:	bfb8      	it	lt
 801157c:	4613      	movlt	r3, r2
 801157e:	6033      	str	r3, [r6, #0]
 8011580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011584:	4607      	mov	r7, r0
 8011586:	460c      	mov	r4, r1
 8011588:	b10a      	cbz	r2, 801158e <_printf_common+0x26>
 801158a:	3301      	adds	r3, #1
 801158c:	6033      	str	r3, [r6, #0]
 801158e:	6823      	ldr	r3, [r4, #0]
 8011590:	0699      	lsls	r1, r3, #26
 8011592:	bf42      	ittt	mi
 8011594:	6833      	ldrmi	r3, [r6, #0]
 8011596:	3302      	addmi	r3, #2
 8011598:	6033      	strmi	r3, [r6, #0]
 801159a:	6825      	ldr	r5, [r4, #0]
 801159c:	f015 0506 	ands.w	r5, r5, #6
 80115a0:	d106      	bne.n	80115b0 <_printf_common+0x48>
 80115a2:	f104 0a19 	add.w	sl, r4, #25
 80115a6:	68e3      	ldr	r3, [r4, #12]
 80115a8:	6832      	ldr	r2, [r6, #0]
 80115aa:	1a9b      	subs	r3, r3, r2
 80115ac:	42ab      	cmp	r3, r5
 80115ae:	dc26      	bgt.n	80115fe <_printf_common+0x96>
 80115b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80115b4:	6822      	ldr	r2, [r4, #0]
 80115b6:	3b00      	subs	r3, #0
 80115b8:	bf18      	it	ne
 80115ba:	2301      	movne	r3, #1
 80115bc:	0692      	lsls	r2, r2, #26
 80115be:	d42b      	bmi.n	8011618 <_printf_common+0xb0>
 80115c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115c4:	4641      	mov	r1, r8
 80115c6:	4638      	mov	r0, r7
 80115c8:	47c8      	blx	r9
 80115ca:	3001      	adds	r0, #1
 80115cc:	d01e      	beq.n	801160c <_printf_common+0xa4>
 80115ce:	6823      	ldr	r3, [r4, #0]
 80115d0:	6922      	ldr	r2, [r4, #16]
 80115d2:	f003 0306 	and.w	r3, r3, #6
 80115d6:	2b04      	cmp	r3, #4
 80115d8:	bf02      	ittt	eq
 80115da:	68e5      	ldreq	r5, [r4, #12]
 80115dc:	6833      	ldreq	r3, [r6, #0]
 80115de:	1aed      	subeq	r5, r5, r3
 80115e0:	68a3      	ldr	r3, [r4, #8]
 80115e2:	bf0c      	ite	eq
 80115e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115e8:	2500      	movne	r5, #0
 80115ea:	4293      	cmp	r3, r2
 80115ec:	bfc4      	itt	gt
 80115ee:	1a9b      	subgt	r3, r3, r2
 80115f0:	18ed      	addgt	r5, r5, r3
 80115f2:	2600      	movs	r6, #0
 80115f4:	341a      	adds	r4, #26
 80115f6:	42b5      	cmp	r5, r6
 80115f8:	d11a      	bne.n	8011630 <_printf_common+0xc8>
 80115fa:	2000      	movs	r0, #0
 80115fc:	e008      	b.n	8011610 <_printf_common+0xa8>
 80115fe:	2301      	movs	r3, #1
 8011600:	4652      	mov	r2, sl
 8011602:	4641      	mov	r1, r8
 8011604:	4638      	mov	r0, r7
 8011606:	47c8      	blx	r9
 8011608:	3001      	adds	r0, #1
 801160a:	d103      	bne.n	8011614 <_printf_common+0xac>
 801160c:	f04f 30ff 	mov.w	r0, #4294967295
 8011610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011614:	3501      	adds	r5, #1
 8011616:	e7c6      	b.n	80115a6 <_printf_common+0x3e>
 8011618:	18e1      	adds	r1, r4, r3
 801161a:	1c5a      	adds	r2, r3, #1
 801161c:	2030      	movs	r0, #48	@ 0x30
 801161e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011622:	4422      	add	r2, r4
 8011624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801162c:	3302      	adds	r3, #2
 801162e:	e7c7      	b.n	80115c0 <_printf_common+0x58>
 8011630:	2301      	movs	r3, #1
 8011632:	4622      	mov	r2, r4
 8011634:	4641      	mov	r1, r8
 8011636:	4638      	mov	r0, r7
 8011638:	47c8      	blx	r9
 801163a:	3001      	adds	r0, #1
 801163c:	d0e6      	beq.n	801160c <_printf_common+0xa4>
 801163e:	3601      	adds	r6, #1
 8011640:	e7d9      	b.n	80115f6 <_printf_common+0x8e>
	...

08011644 <_printf_i>:
 8011644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011648:	7e0f      	ldrb	r7, [r1, #24]
 801164a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801164c:	2f78      	cmp	r7, #120	@ 0x78
 801164e:	4691      	mov	r9, r2
 8011650:	4680      	mov	r8, r0
 8011652:	460c      	mov	r4, r1
 8011654:	469a      	mov	sl, r3
 8011656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801165a:	d807      	bhi.n	801166c <_printf_i+0x28>
 801165c:	2f62      	cmp	r7, #98	@ 0x62
 801165e:	d80a      	bhi.n	8011676 <_printf_i+0x32>
 8011660:	2f00      	cmp	r7, #0
 8011662:	f000 80d2 	beq.w	801180a <_printf_i+0x1c6>
 8011666:	2f58      	cmp	r7, #88	@ 0x58
 8011668:	f000 80b9 	beq.w	80117de <_printf_i+0x19a>
 801166c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011674:	e03a      	b.n	80116ec <_printf_i+0xa8>
 8011676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801167a:	2b15      	cmp	r3, #21
 801167c:	d8f6      	bhi.n	801166c <_printf_i+0x28>
 801167e:	a101      	add	r1, pc, #4	@ (adr r1, 8011684 <_printf_i+0x40>)
 8011680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011684:	080116dd 	.word	0x080116dd
 8011688:	080116f1 	.word	0x080116f1
 801168c:	0801166d 	.word	0x0801166d
 8011690:	0801166d 	.word	0x0801166d
 8011694:	0801166d 	.word	0x0801166d
 8011698:	0801166d 	.word	0x0801166d
 801169c:	080116f1 	.word	0x080116f1
 80116a0:	0801166d 	.word	0x0801166d
 80116a4:	0801166d 	.word	0x0801166d
 80116a8:	0801166d 	.word	0x0801166d
 80116ac:	0801166d 	.word	0x0801166d
 80116b0:	080117f1 	.word	0x080117f1
 80116b4:	0801171b 	.word	0x0801171b
 80116b8:	080117ab 	.word	0x080117ab
 80116bc:	0801166d 	.word	0x0801166d
 80116c0:	0801166d 	.word	0x0801166d
 80116c4:	08011813 	.word	0x08011813
 80116c8:	0801166d 	.word	0x0801166d
 80116cc:	0801171b 	.word	0x0801171b
 80116d0:	0801166d 	.word	0x0801166d
 80116d4:	0801166d 	.word	0x0801166d
 80116d8:	080117b3 	.word	0x080117b3
 80116dc:	6833      	ldr	r3, [r6, #0]
 80116de:	1d1a      	adds	r2, r3, #4
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6032      	str	r2, [r6, #0]
 80116e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116ec:	2301      	movs	r3, #1
 80116ee:	e09d      	b.n	801182c <_printf_i+0x1e8>
 80116f0:	6833      	ldr	r3, [r6, #0]
 80116f2:	6820      	ldr	r0, [r4, #0]
 80116f4:	1d19      	adds	r1, r3, #4
 80116f6:	6031      	str	r1, [r6, #0]
 80116f8:	0606      	lsls	r6, r0, #24
 80116fa:	d501      	bpl.n	8011700 <_printf_i+0xbc>
 80116fc:	681d      	ldr	r5, [r3, #0]
 80116fe:	e003      	b.n	8011708 <_printf_i+0xc4>
 8011700:	0645      	lsls	r5, r0, #25
 8011702:	d5fb      	bpl.n	80116fc <_printf_i+0xb8>
 8011704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011708:	2d00      	cmp	r5, #0
 801170a:	da03      	bge.n	8011714 <_printf_i+0xd0>
 801170c:	232d      	movs	r3, #45	@ 0x2d
 801170e:	426d      	negs	r5, r5
 8011710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011714:	4859      	ldr	r0, [pc, #356]	@ (801187c <_printf_i+0x238>)
 8011716:	230a      	movs	r3, #10
 8011718:	e011      	b.n	801173e <_printf_i+0xfa>
 801171a:	6821      	ldr	r1, [r4, #0]
 801171c:	6833      	ldr	r3, [r6, #0]
 801171e:	0608      	lsls	r0, r1, #24
 8011720:	f853 5b04 	ldr.w	r5, [r3], #4
 8011724:	d402      	bmi.n	801172c <_printf_i+0xe8>
 8011726:	0649      	lsls	r1, r1, #25
 8011728:	bf48      	it	mi
 801172a:	b2ad      	uxthmi	r5, r5
 801172c:	2f6f      	cmp	r7, #111	@ 0x6f
 801172e:	4853      	ldr	r0, [pc, #332]	@ (801187c <_printf_i+0x238>)
 8011730:	6033      	str	r3, [r6, #0]
 8011732:	bf14      	ite	ne
 8011734:	230a      	movne	r3, #10
 8011736:	2308      	moveq	r3, #8
 8011738:	2100      	movs	r1, #0
 801173a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801173e:	6866      	ldr	r6, [r4, #4]
 8011740:	60a6      	str	r6, [r4, #8]
 8011742:	2e00      	cmp	r6, #0
 8011744:	bfa2      	ittt	ge
 8011746:	6821      	ldrge	r1, [r4, #0]
 8011748:	f021 0104 	bicge.w	r1, r1, #4
 801174c:	6021      	strge	r1, [r4, #0]
 801174e:	b90d      	cbnz	r5, 8011754 <_printf_i+0x110>
 8011750:	2e00      	cmp	r6, #0
 8011752:	d04b      	beq.n	80117ec <_printf_i+0x1a8>
 8011754:	4616      	mov	r6, r2
 8011756:	fbb5 f1f3 	udiv	r1, r5, r3
 801175a:	fb03 5711 	mls	r7, r3, r1, r5
 801175e:	5dc7      	ldrb	r7, [r0, r7]
 8011760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011764:	462f      	mov	r7, r5
 8011766:	42bb      	cmp	r3, r7
 8011768:	460d      	mov	r5, r1
 801176a:	d9f4      	bls.n	8011756 <_printf_i+0x112>
 801176c:	2b08      	cmp	r3, #8
 801176e:	d10b      	bne.n	8011788 <_printf_i+0x144>
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	07df      	lsls	r7, r3, #31
 8011774:	d508      	bpl.n	8011788 <_printf_i+0x144>
 8011776:	6923      	ldr	r3, [r4, #16]
 8011778:	6861      	ldr	r1, [r4, #4]
 801177a:	4299      	cmp	r1, r3
 801177c:	bfde      	ittt	le
 801177e:	2330      	movle	r3, #48	@ 0x30
 8011780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011788:	1b92      	subs	r2, r2, r6
 801178a:	6122      	str	r2, [r4, #16]
 801178c:	f8cd a000 	str.w	sl, [sp]
 8011790:	464b      	mov	r3, r9
 8011792:	aa03      	add	r2, sp, #12
 8011794:	4621      	mov	r1, r4
 8011796:	4640      	mov	r0, r8
 8011798:	f7ff fee6 	bl	8011568 <_printf_common>
 801179c:	3001      	adds	r0, #1
 801179e:	d14a      	bne.n	8011836 <_printf_i+0x1f2>
 80117a0:	f04f 30ff 	mov.w	r0, #4294967295
 80117a4:	b004      	add	sp, #16
 80117a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	f043 0320 	orr.w	r3, r3, #32
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	4833      	ldr	r0, [pc, #204]	@ (8011880 <_printf_i+0x23c>)
 80117b4:	2778      	movs	r7, #120	@ 0x78
 80117b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	6831      	ldr	r1, [r6, #0]
 80117be:	061f      	lsls	r7, r3, #24
 80117c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80117c4:	d402      	bmi.n	80117cc <_printf_i+0x188>
 80117c6:	065f      	lsls	r7, r3, #25
 80117c8:	bf48      	it	mi
 80117ca:	b2ad      	uxthmi	r5, r5
 80117cc:	6031      	str	r1, [r6, #0]
 80117ce:	07d9      	lsls	r1, r3, #31
 80117d0:	bf44      	itt	mi
 80117d2:	f043 0320 	orrmi.w	r3, r3, #32
 80117d6:	6023      	strmi	r3, [r4, #0]
 80117d8:	b11d      	cbz	r5, 80117e2 <_printf_i+0x19e>
 80117da:	2310      	movs	r3, #16
 80117dc:	e7ac      	b.n	8011738 <_printf_i+0xf4>
 80117de:	4827      	ldr	r0, [pc, #156]	@ (801187c <_printf_i+0x238>)
 80117e0:	e7e9      	b.n	80117b6 <_printf_i+0x172>
 80117e2:	6823      	ldr	r3, [r4, #0]
 80117e4:	f023 0320 	bic.w	r3, r3, #32
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	e7f6      	b.n	80117da <_printf_i+0x196>
 80117ec:	4616      	mov	r6, r2
 80117ee:	e7bd      	b.n	801176c <_printf_i+0x128>
 80117f0:	6833      	ldr	r3, [r6, #0]
 80117f2:	6825      	ldr	r5, [r4, #0]
 80117f4:	6961      	ldr	r1, [r4, #20]
 80117f6:	1d18      	adds	r0, r3, #4
 80117f8:	6030      	str	r0, [r6, #0]
 80117fa:	062e      	lsls	r6, r5, #24
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	d501      	bpl.n	8011804 <_printf_i+0x1c0>
 8011800:	6019      	str	r1, [r3, #0]
 8011802:	e002      	b.n	801180a <_printf_i+0x1c6>
 8011804:	0668      	lsls	r0, r5, #25
 8011806:	d5fb      	bpl.n	8011800 <_printf_i+0x1bc>
 8011808:	8019      	strh	r1, [r3, #0]
 801180a:	2300      	movs	r3, #0
 801180c:	6123      	str	r3, [r4, #16]
 801180e:	4616      	mov	r6, r2
 8011810:	e7bc      	b.n	801178c <_printf_i+0x148>
 8011812:	6833      	ldr	r3, [r6, #0]
 8011814:	1d1a      	adds	r2, r3, #4
 8011816:	6032      	str	r2, [r6, #0]
 8011818:	681e      	ldr	r6, [r3, #0]
 801181a:	6862      	ldr	r2, [r4, #4]
 801181c:	2100      	movs	r1, #0
 801181e:	4630      	mov	r0, r6
 8011820:	f7ee fcd6 	bl	80001d0 <memchr>
 8011824:	b108      	cbz	r0, 801182a <_printf_i+0x1e6>
 8011826:	1b80      	subs	r0, r0, r6
 8011828:	6060      	str	r0, [r4, #4]
 801182a:	6863      	ldr	r3, [r4, #4]
 801182c:	6123      	str	r3, [r4, #16]
 801182e:	2300      	movs	r3, #0
 8011830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011834:	e7aa      	b.n	801178c <_printf_i+0x148>
 8011836:	6923      	ldr	r3, [r4, #16]
 8011838:	4632      	mov	r2, r6
 801183a:	4649      	mov	r1, r9
 801183c:	4640      	mov	r0, r8
 801183e:	47d0      	blx	sl
 8011840:	3001      	adds	r0, #1
 8011842:	d0ad      	beq.n	80117a0 <_printf_i+0x15c>
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	079b      	lsls	r3, r3, #30
 8011848:	d413      	bmi.n	8011872 <_printf_i+0x22e>
 801184a:	68e0      	ldr	r0, [r4, #12]
 801184c:	9b03      	ldr	r3, [sp, #12]
 801184e:	4298      	cmp	r0, r3
 8011850:	bfb8      	it	lt
 8011852:	4618      	movlt	r0, r3
 8011854:	e7a6      	b.n	80117a4 <_printf_i+0x160>
 8011856:	2301      	movs	r3, #1
 8011858:	4632      	mov	r2, r6
 801185a:	4649      	mov	r1, r9
 801185c:	4640      	mov	r0, r8
 801185e:	47d0      	blx	sl
 8011860:	3001      	adds	r0, #1
 8011862:	d09d      	beq.n	80117a0 <_printf_i+0x15c>
 8011864:	3501      	adds	r5, #1
 8011866:	68e3      	ldr	r3, [r4, #12]
 8011868:	9903      	ldr	r1, [sp, #12]
 801186a:	1a5b      	subs	r3, r3, r1
 801186c:	42ab      	cmp	r3, r5
 801186e:	dcf2      	bgt.n	8011856 <_printf_i+0x212>
 8011870:	e7eb      	b.n	801184a <_printf_i+0x206>
 8011872:	2500      	movs	r5, #0
 8011874:	f104 0619 	add.w	r6, r4, #25
 8011878:	e7f5      	b.n	8011866 <_printf_i+0x222>
 801187a:	bf00      	nop
 801187c:	08014a4f 	.word	0x08014a4f
 8011880:	08014a60 	.word	0x08014a60

08011884 <std>:
 8011884:	2300      	movs	r3, #0
 8011886:	b510      	push	{r4, lr}
 8011888:	4604      	mov	r4, r0
 801188a:	e9c0 3300 	strd	r3, r3, [r0]
 801188e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011892:	6083      	str	r3, [r0, #8]
 8011894:	8181      	strh	r1, [r0, #12]
 8011896:	6643      	str	r3, [r0, #100]	@ 0x64
 8011898:	81c2      	strh	r2, [r0, #14]
 801189a:	6183      	str	r3, [r0, #24]
 801189c:	4619      	mov	r1, r3
 801189e:	2208      	movs	r2, #8
 80118a0:	305c      	adds	r0, #92	@ 0x5c
 80118a2:	f000 f914 	bl	8011ace <memset>
 80118a6:	4b0d      	ldr	r3, [pc, #52]	@ (80118dc <std+0x58>)
 80118a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80118aa:	4b0d      	ldr	r3, [pc, #52]	@ (80118e0 <std+0x5c>)
 80118ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80118ae:	4b0d      	ldr	r3, [pc, #52]	@ (80118e4 <std+0x60>)
 80118b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80118b2:	4b0d      	ldr	r3, [pc, #52]	@ (80118e8 <std+0x64>)
 80118b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80118b6:	4b0d      	ldr	r3, [pc, #52]	@ (80118ec <std+0x68>)
 80118b8:	6224      	str	r4, [r4, #32]
 80118ba:	429c      	cmp	r4, r3
 80118bc:	d006      	beq.n	80118cc <std+0x48>
 80118be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80118c2:	4294      	cmp	r4, r2
 80118c4:	d002      	beq.n	80118cc <std+0x48>
 80118c6:	33d0      	adds	r3, #208	@ 0xd0
 80118c8:	429c      	cmp	r4, r3
 80118ca:	d105      	bne.n	80118d8 <std+0x54>
 80118cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80118d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118d4:	f000 ba04 	b.w	8011ce0 <__retarget_lock_init_recursive>
 80118d8:	bd10      	pop	{r4, pc}
 80118da:	bf00      	nop
 80118dc:	08011a49 	.word	0x08011a49
 80118e0:	08011a6b 	.word	0x08011a6b
 80118e4:	08011aa3 	.word	0x08011aa3
 80118e8:	08011ac7 	.word	0x08011ac7
 80118ec:	2000e7e0 	.word	0x2000e7e0

080118f0 <stdio_exit_handler>:
 80118f0:	4a02      	ldr	r2, [pc, #8]	@ (80118fc <stdio_exit_handler+0xc>)
 80118f2:	4903      	ldr	r1, [pc, #12]	@ (8011900 <stdio_exit_handler+0x10>)
 80118f4:	4803      	ldr	r0, [pc, #12]	@ (8011904 <stdio_exit_handler+0x14>)
 80118f6:	f000 b869 	b.w	80119cc <_fwalk_sglue>
 80118fa:	bf00      	nop
 80118fc:	20000070 	.word	0x20000070
 8011900:	080136a5 	.word	0x080136a5
 8011904:	20000080 	.word	0x20000080

08011908 <cleanup_stdio>:
 8011908:	6841      	ldr	r1, [r0, #4]
 801190a:	4b0c      	ldr	r3, [pc, #48]	@ (801193c <cleanup_stdio+0x34>)
 801190c:	4299      	cmp	r1, r3
 801190e:	b510      	push	{r4, lr}
 8011910:	4604      	mov	r4, r0
 8011912:	d001      	beq.n	8011918 <cleanup_stdio+0x10>
 8011914:	f001 fec6 	bl	80136a4 <_fflush_r>
 8011918:	68a1      	ldr	r1, [r4, #8]
 801191a:	4b09      	ldr	r3, [pc, #36]	@ (8011940 <cleanup_stdio+0x38>)
 801191c:	4299      	cmp	r1, r3
 801191e:	d002      	beq.n	8011926 <cleanup_stdio+0x1e>
 8011920:	4620      	mov	r0, r4
 8011922:	f001 febf 	bl	80136a4 <_fflush_r>
 8011926:	68e1      	ldr	r1, [r4, #12]
 8011928:	4b06      	ldr	r3, [pc, #24]	@ (8011944 <cleanup_stdio+0x3c>)
 801192a:	4299      	cmp	r1, r3
 801192c:	d004      	beq.n	8011938 <cleanup_stdio+0x30>
 801192e:	4620      	mov	r0, r4
 8011930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011934:	f001 beb6 	b.w	80136a4 <_fflush_r>
 8011938:	bd10      	pop	{r4, pc}
 801193a:	bf00      	nop
 801193c:	2000e7e0 	.word	0x2000e7e0
 8011940:	2000e848 	.word	0x2000e848
 8011944:	2000e8b0 	.word	0x2000e8b0

08011948 <global_stdio_init.part.0>:
 8011948:	b510      	push	{r4, lr}
 801194a:	4b0b      	ldr	r3, [pc, #44]	@ (8011978 <global_stdio_init.part.0+0x30>)
 801194c:	4c0b      	ldr	r4, [pc, #44]	@ (801197c <global_stdio_init.part.0+0x34>)
 801194e:	4a0c      	ldr	r2, [pc, #48]	@ (8011980 <global_stdio_init.part.0+0x38>)
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	4620      	mov	r0, r4
 8011954:	2200      	movs	r2, #0
 8011956:	2104      	movs	r1, #4
 8011958:	f7ff ff94 	bl	8011884 <std>
 801195c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011960:	2201      	movs	r2, #1
 8011962:	2109      	movs	r1, #9
 8011964:	f7ff ff8e 	bl	8011884 <std>
 8011968:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801196c:	2202      	movs	r2, #2
 801196e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011972:	2112      	movs	r1, #18
 8011974:	f7ff bf86 	b.w	8011884 <std>
 8011978:	2000e918 	.word	0x2000e918
 801197c:	2000e7e0 	.word	0x2000e7e0
 8011980:	080118f1 	.word	0x080118f1

08011984 <__sfp_lock_acquire>:
 8011984:	4801      	ldr	r0, [pc, #4]	@ (801198c <__sfp_lock_acquire+0x8>)
 8011986:	f000 b9ac 	b.w	8011ce2 <__retarget_lock_acquire_recursive>
 801198a:	bf00      	nop
 801198c:	2000e921 	.word	0x2000e921

08011990 <__sfp_lock_release>:
 8011990:	4801      	ldr	r0, [pc, #4]	@ (8011998 <__sfp_lock_release+0x8>)
 8011992:	f000 b9a7 	b.w	8011ce4 <__retarget_lock_release_recursive>
 8011996:	bf00      	nop
 8011998:	2000e921 	.word	0x2000e921

0801199c <__sinit>:
 801199c:	b510      	push	{r4, lr}
 801199e:	4604      	mov	r4, r0
 80119a0:	f7ff fff0 	bl	8011984 <__sfp_lock_acquire>
 80119a4:	6a23      	ldr	r3, [r4, #32]
 80119a6:	b11b      	cbz	r3, 80119b0 <__sinit+0x14>
 80119a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119ac:	f7ff bff0 	b.w	8011990 <__sfp_lock_release>
 80119b0:	4b04      	ldr	r3, [pc, #16]	@ (80119c4 <__sinit+0x28>)
 80119b2:	6223      	str	r3, [r4, #32]
 80119b4:	4b04      	ldr	r3, [pc, #16]	@ (80119c8 <__sinit+0x2c>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d1f5      	bne.n	80119a8 <__sinit+0xc>
 80119bc:	f7ff ffc4 	bl	8011948 <global_stdio_init.part.0>
 80119c0:	e7f2      	b.n	80119a8 <__sinit+0xc>
 80119c2:	bf00      	nop
 80119c4:	08011909 	.word	0x08011909
 80119c8:	2000e918 	.word	0x2000e918

080119cc <_fwalk_sglue>:
 80119cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d0:	4607      	mov	r7, r0
 80119d2:	4688      	mov	r8, r1
 80119d4:	4614      	mov	r4, r2
 80119d6:	2600      	movs	r6, #0
 80119d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119dc:	f1b9 0901 	subs.w	r9, r9, #1
 80119e0:	d505      	bpl.n	80119ee <_fwalk_sglue+0x22>
 80119e2:	6824      	ldr	r4, [r4, #0]
 80119e4:	2c00      	cmp	r4, #0
 80119e6:	d1f7      	bne.n	80119d8 <_fwalk_sglue+0xc>
 80119e8:	4630      	mov	r0, r6
 80119ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ee:	89ab      	ldrh	r3, [r5, #12]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d907      	bls.n	8011a04 <_fwalk_sglue+0x38>
 80119f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119f8:	3301      	adds	r3, #1
 80119fa:	d003      	beq.n	8011a04 <_fwalk_sglue+0x38>
 80119fc:	4629      	mov	r1, r5
 80119fe:	4638      	mov	r0, r7
 8011a00:	47c0      	blx	r8
 8011a02:	4306      	orrs	r6, r0
 8011a04:	3568      	adds	r5, #104	@ 0x68
 8011a06:	e7e9      	b.n	80119dc <_fwalk_sglue+0x10>

08011a08 <siprintf>:
 8011a08:	b40e      	push	{r1, r2, r3}
 8011a0a:	b500      	push	{lr}
 8011a0c:	b09c      	sub	sp, #112	@ 0x70
 8011a0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011a10:	9002      	str	r0, [sp, #8]
 8011a12:	9006      	str	r0, [sp, #24]
 8011a14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011a18:	4809      	ldr	r0, [pc, #36]	@ (8011a40 <siprintf+0x38>)
 8011a1a:	9107      	str	r1, [sp, #28]
 8011a1c:	9104      	str	r1, [sp, #16]
 8011a1e:	4909      	ldr	r1, [pc, #36]	@ (8011a44 <siprintf+0x3c>)
 8011a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a24:	9105      	str	r1, [sp, #20]
 8011a26:	6800      	ldr	r0, [r0, #0]
 8011a28:	9301      	str	r3, [sp, #4]
 8011a2a:	a902      	add	r1, sp, #8
 8011a2c:	f001 fcba 	bl	80133a4 <_svfiprintf_r>
 8011a30:	9b02      	ldr	r3, [sp, #8]
 8011a32:	2200      	movs	r2, #0
 8011a34:	701a      	strb	r2, [r3, #0]
 8011a36:	b01c      	add	sp, #112	@ 0x70
 8011a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a3c:	b003      	add	sp, #12
 8011a3e:	4770      	bx	lr
 8011a40:	2000007c 	.word	0x2000007c
 8011a44:	ffff0208 	.word	0xffff0208

08011a48 <__sread>:
 8011a48:	b510      	push	{r4, lr}
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a50:	f000 f8f8 	bl	8011c44 <_read_r>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	bfab      	itete	ge
 8011a58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a5c:	181b      	addge	r3, r3, r0
 8011a5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011a62:	bfac      	ite	ge
 8011a64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011a66:	81a3      	strhlt	r3, [r4, #12]
 8011a68:	bd10      	pop	{r4, pc}

08011a6a <__swrite>:
 8011a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6e:	461f      	mov	r7, r3
 8011a70:	898b      	ldrh	r3, [r1, #12]
 8011a72:	05db      	lsls	r3, r3, #23
 8011a74:	4605      	mov	r5, r0
 8011a76:	460c      	mov	r4, r1
 8011a78:	4616      	mov	r6, r2
 8011a7a:	d505      	bpl.n	8011a88 <__swrite+0x1e>
 8011a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a80:	2302      	movs	r3, #2
 8011a82:	2200      	movs	r2, #0
 8011a84:	f000 f8cc 	bl	8011c20 <_lseek_r>
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a92:	81a3      	strh	r3, [r4, #12]
 8011a94:	4632      	mov	r2, r6
 8011a96:	463b      	mov	r3, r7
 8011a98:	4628      	mov	r0, r5
 8011a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9e:	f000 b8e3 	b.w	8011c68 <_write_r>

08011aa2 <__sseek>:
 8011aa2:	b510      	push	{r4, lr}
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aaa:	f000 f8b9 	bl	8011c20 <_lseek_r>
 8011aae:	1c43      	adds	r3, r0, #1
 8011ab0:	89a3      	ldrh	r3, [r4, #12]
 8011ab2:	bf15      	itete	ne
 8011ab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011ab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011aba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011abe:	81a3      	strheq	r3, [r4, #12]
 8011ac0:	bf18      	it	ne
 8011ac2:	81a3      	strhne	r3, [r4, #12]
 8011ac4:	bd10      	pop	{r4, pc}

08011ac6 <__sclose>:
 8011ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aca:	f000 b843 	b.w	8011b54 <_close_r>

08011ace <memset>:
 8011ace:	4402      	add	r2, r0
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	d100      	bne.n	8011ad8 <memset+0xa>
 8011ad6:	4770      	bx	lr
 8011ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8011adc:	e7f9      	b.n	8011ad2 <memset+0x4>

08011ade <strchr>:
 8011ade:	b2c9      	uxtb	r1, r1
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ae8:	b112      	cbz	r2, 8011af0 <strchr+0x12>
 8011aea:	428a      	cmp	r2, r1
 8011aec:	d1f9      	bne.n	8011ae2 <strchr+0x4>
 8011aee:	4770      	bx	lr
 8011af0:	2900      	cmp	r1, #0
 8011af2:	bf18      	it	ne
 8011af4:	2000      	movne	r0, #0
 8011af6:	4770      	bx	lr

08011af8 <strncpy>:
 8011af8:	b510      	push	{r4, lr}
 8011afa:	3901      	subs	r1, #1
 8011afc:	4603      	mov	r3, r0
 8011afe:	b132      	cbz	r2, 8011b0e <strncpy+0x16>
 8011b00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011b04:	f803 4b01 	strb.w	r4, [r3], #1
 8011b08:	3a01      	subs	r2, #1
 8011b0a:	2c00      	cmp	r4, #0
 8011b0c:	d1f7      	bne.n	8011afe <strncpy+0x6>
 8011b0e:	441a      	add	r2, r3
 8011b10:	2100      	movs	r1, #0
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d100      	bne.n	8011b18 <strncpy+0x20>
 8011b16:	bd10      	pop	{r4, pc}
 8011b18:	f803 1b01 	strb.w	r1, [r3], #1
 8011b1c:	e7f9      	b.n	8011b12 <strncpy+0x1a>

08011b1e <strstr>:
 8011b1e:	780a      	ldrb	r2, [r1, #0]
 8011b20:	b570      	push	{r4, r5, r6, lr}
 8011b22:	b96a      	cbnz	r2, 8011b40 <strstr+0x22>
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d109      	bne.n	8011b3e <strstr+0x20>
 8011b2a:	460c      	mov	r4, r1
 8011b2c:	4605      	mov	r5, r0
 8011b2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d0f6      	beq.n	8011b24 <strstr+0x6>
 8011b36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011b3a:	429e      	cmp	r6, r3
 8011b3c:	d0f7      	beq.n	8011b2e <strstr+0x10>
 8011b3e:	3001      	adds	r0, #1
 8011b40:	7803      	ldrb	r3, [r0, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1ef      	bne.n	8011b26 <strstr+0x8>
 8011b46:	4618      	mov	r0, r3
 8011b48:	e7ec      	b.n	8011b24 <strstr+0x6>
	...

08011b4c <_localeconv_r>:
 8011b4c:	4800      	ldr	r0, [pc, #0]	@ (8011b50 <_localeconv_r+0x4>)
 8011b4e:	4770      	bx	lr
 8011b50:	200001bc 	.word	0x200001bc

08011b54 <_close_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	4d06      	ldr	r5, [pc, #24]	@ (8011b70 <_close_r+0x1c>)
 8011b58:	2300      	movs	r3, #0
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	4608      	mov	r0, r1
 8011b5e:	602b      	str	r3, [r5, #0]
 8011b60:	f7f6 fb02 	bl	8008168 <_close>
 8011b64:	1c43      	adds	r3, r0, #1
 8011b66:	d102      	bne.n	8011b6e <_close_r+0x1a>
 8011b68:	682b      	ldr	r3, [r5, #0]
 8011b6a:	b103      	cbz	r3, 8011b6e <_close_r+0x1a>
 8011b6c:	6023      	str	r3, [r4, #0]
 8011b6e:	bd38      	pop	{r3, r4, r5, pc}
 8011b70:	2000e91c 	.word	0x2000e91c

08011b74 <_reclaim_reent>:
 8011b74:	4b29      	ldr	r3, [pc, #164]	@ (8011c1c <_reclaim_reent+0xa8>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4283      	cmp	r3, r0
 8011b7a:	b570      	push	{r4, r5, r6, lr}
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	d04b      	beq.n	8011c18 <_reclaim_reent+0xa4>
 8011b80:	69c3      	ldr	r3, [r0, #28]
 8011b82:	b1ab      	cbz	r3, 8011bb0 <_reclaim_reent+0x3c>
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	b16b      	cbz	r3, 8011ba4 <_reclaim_reent+0x30>
 8011b88:	2500      	movs	r5, #0
 8011b8a:	69e3      	ldr	r3, [r4, #28]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	5959      	ldr	r1, [r3, r5]
 8011b90:	2900      	cmp	r1, #0
 8011b92:	d13b      	bne.n	8011c0c <_reclaim_reent+0x98>
 8011b94:	3504      	adds	r5, #4
 8011b96:	2d80      	cmp	r5, #128	@ 0x80
 8011b98:	d1f7      	bne.n	8011b8a <_reclaim_reent+0x16>
 8011b9a:	69e3      	ldr	r3, [r4, #28]
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	68d9      	ldr	r1, [r3, #12]
 8011ba0:	f000 ff22 	bl	80129e8 <_free_r>
 8011ba4:	69e3      	ldr	r3, [r4, #28]
 8011ba6:	6819      	ldr	r1, [r3, #0]
 8011ba8:	b111      	cbz	r1, 8011bb0 <_reclaim_reent+0x3c>
 8011baa:	4620      	mov	r0, r4
 8011bac:	f000 ff1c 	bl	80129e8 <_free_r>
 8011bb0:	6961      	ldr	r1, [r4, #20]
 8011bb2:	b111      	cbz	r1, 8011bba <_reclaim_reent+0x46>
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f000 ff17 	bl	80129e8 <_free_r>
 8011bba:	69e1      	ldr	r1, [r4, #28]
 8011bbc:	b111      	cbz	r1, 8011bc4 <_reclaim_reent+0x50>
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f000 ff12 	bl	80129e8 <_free_r>
 8011bc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011bc6:	b111      	cbz	r1, 8011bce <_reclaim_reent+0x5a>
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f000 ff0d 	bl	80129e8 <_free_r>
 8011bce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bd0:	b111      	cbz	r1, 8011bd8 <_reclaim_reent+0x64>
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 ff08 	bl	80129e8 <_free_r>
 8011bd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011bda:	b111      	cbz	r1, 8011be2 <_reclaim_reent+0x6e>
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f000 ff03 	bl	80129e8 <_free_r>
 8011be2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011be4:	b111      	cbz	r1, 8011bec <_reclaim_reent+0x78>
 8011be6:	4620      	mov	r0, r4
 8011be8:	f000 fefe 	bl	80129e8 <_free_r>
 8011bec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011bee:	b111      	cbz	r1, 8011bf6 <_reclaim_reent+0x82>
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	f000 fef9 	bl	80129e8 <_free_r>
 8011bf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011bf8:	b111      	cbz	r1, 8011c00 <_reclaim_reent+0x8c>
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f000 fef4 	bl	80129e8 <_free_r>
 8011c00:	6a23      	ldr	r3, [r4, #32]
 8011c02:	b14b      	cbz	r3, 8011c18 <_reclaim_reent+0xa4>
 8011c04:	4620      	mov	r0, r4
 8011c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c0a:	4718      	bx	r3
 8011c0c:	680e      	ldr	r6, [r1, #0]
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f000 feea 	bl	80129e8 <_free_r>
 8011c14:	4631      	mov	r1, r6
 8011c16:	e7bb      	b.n	8011b90 <_reclaim_reent+0x1c>
 8011c18:	bd70      	pop	{r4, r5, r6, pc}
 8011c1a:	bf00      	nop
 8011c1c:	2000007c 	.word	0x2000007c

08011c20 <_lseek_r>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	4d07      	ldr	r5, [pc, #28]	@ (8011c40 <_lseek_r+0x20>)
 8011c24:	4604      	mov	r4, r0
 8011c26:	4608      	mov	r0, r1
 8011c28:	4611      	mov	r1, r2
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	602a      	str	r2, [r5, #0]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	f7f6 fac1 	bl	80081b6 <_lseek>
 8011c34:	1c43      	adds	r3, r0, #1
 8011c36:	d102      	bne.n	8011c3e <_lseek_r+0x1e>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	b103      	cbz	r3, 8011c3e <_lseek_r+0x1e>
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}
 8011c40:	2000e91c 	.word	0x2000e91c

08011c44 <_read_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	4d07      	ldr	r5, [pc, #28]	@ (8011c64 <_read_r+0x20>)
 8011c48:	4604      	mov	r4, r0
 8011c4a:	4608      	mov	r0, r1
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	2200      	movs	r2, #0
 8011c50:	602a      	str	r2, [r5, #0]
 8011c52:	461a      	mov	r2, r3
 8011c54:	f7f6 fa4f 	bl	80080f6 <_read>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d102      	bne.n	8011c62 <_read_r+0x1e>
 8011c5c:	682b      	ldr	r3, [r5, #0]
 8011c5e:	b103      	cbz	r3, 8011c62 <_read_r+0x1e>
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	bd38      	pop	{r3, r4, r5, pc}
 8011c64:	2000e91c 	.word	0x2000e91c

08011c68 <_write_r>:
 8011c68:	b538      	push	{r3, r4, r5, lr}
 8011c6a:	4d07      	ldr	r5, [pc, #28]	@ (8011c88 <_write_r+0x20>)
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	4608      	mov	r0, r1
 8011c70:	4611      	mov	r1, r2
 8011c72:	2200      	movs	r2, #0
 8011c74:	602a      	str	r2, [r5, #0]
 8011c76:	461a      	mov	r2, r3
 8011c78:	f7f6 fa5a 	bl	8008130 <_write>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_write_r+0x1e>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_write_r+0x1e>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	2000e91c 	.word	0x2000e91c

08011c8c <__errno>:
 8011c8c:	4b01      	ldr	r3, [pc, #4]	@ (8011c94 <__errno+0x8>)
 8011c8e:	6818      	ldr	r0, [r3, #0]
 8011c90:	4770      	bx	lr
 8011c92:	bf00      	nop
 8011c94:	2000007c 	.word	0x2000007c

08011c98 <__libc_init_array>:
 8011c98:	b570      	push	{r4, r5, r6, lr}
 8011c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8011cd0 <__libc_init_array+0x38>)
 8011c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8011cd4 <__libc_init_array+0x3c>)
 8011c9e:	1b64      	subs	r4, r4, r5
 8011ca0:	10a4      	asrs	r4, r4, #2
 8011ca2:	2600      	movs	r6, #0
 8011ca4:	42a6      	cmp	r6, r4
 8011ca6:	d109      	bne.n	8011cbc <__libc_init_array+0x24>
 8011ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8011cd8 <__libc_init_array+0x40>)
 8011caa:	4c0c      	ldr	r4, [pc, #48]	@ (8011cdc <__libc_init_array+0x44>)
 8011cac:	f002 f86c 	bl	8013d88 <_init>
 8011cb0:	1b64      	subs	r4, r4, r5
 8011cb2:	10a4      	asrs	r4, r4, #2
 8011cb4:	2600      	movs	r6, #0
 8011cb6:	42a6      	cmp	r6, r4
 8011cb8:	d105      	bne.n	8011cc6 <__libc_init_array+0x2e>
 8011cba:	bd70      	pop	{r4, r5, r6, pc}
 8011cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cc0:	4798      	blx	r3
 8011cc2:	3601      	adds	r6, #1
 8011cc4:	e7ee      	b.n	8011ca4 <__libc_init_array+0xc>
 8011cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cca:	4798      	blx	r3
 8011ccc:	3601      	adds	r6, #1
 8011cce:	e7f2      	b.n	8011cb6 <__libc_init_array+0x1e>
 8011cd0:	08015628 	.word	0x08015628
 8011cd4:	08015628 	.word	0x08015628
 8011cd8:	08015628 	.word	0x08015628
 8011cdc:	0801563c 	.word	0x0801563c

08011ce0 <__retarget_lock_init_recursive>:
 8011ce0:	4770      	bx	lr

08011ce2 <__retarget_lock_acquire_recursive>:
 8011ce2:	4770      	bx	lr

08011ce4 <__retarget_lock_release_recursive>:
 8011ce4:	4770      	bx	lr

08011ce6 <strcpy>:
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cec:	f803 2b01 	strb.w	r2, [r3], #1
 8011cf0:	2a00      	cmp	r2, #0
 8011cf2:	d1f9      	bne.n	8011ce8 <strcpy+0x2>
 8011cf4:	4770      	bx	lr

08011cf6 <memcpy>:
 8011cf6:	440a      	add	r2, r1
 8011cf8:	4291      	cmp	r1, r2
 8011cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cfe:	d100      	bne.n	8011d02 <memcpy+0xc>
 8011d00:	4770      	bx	lr
 8011d02:	b510      	push	{r4, lr}
 8011d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d0c:	4291      	cmp	r1, r2
 8011d0e:	d1f9      	bne.n	8011d04 <memcpy+0xe>
 8011d10:	bd10      	pop	{r4, pc}
	...

08011d14 <__assert_func>:
 8011d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d16:	4614      	mov	r4, r2
 8011d18:	461a      	mov	r2, r3
 8011d1a:	4b09      	ldr	r3, [pc, #36]	@ (8011d40 <__assert_func+0x2c>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4605      	mov	r5, r0
 8011d20:	68d8      	ldr	r0, [r3, #12]
 8011d22:	b954      	cbnz	r4, 8011d3a <__assert_func+0x26>
 8011d24:	4b07      	ldr	r3, [pc, #28]	@ (8011d44 <__assert_func+0x30>)
 8011d26:	461c      	mov	r4, r3
 8011d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d2c:	9100      	str	r1, [sp, #0]
 8011d2e:	462b      	mov	r3, r5
 8011d30:	4905      	ldr	r1, [pc, #20]	@ (8011d48 <__assert_func+0x34>)
 8011d32:	f001 fcdf 	bl	80136f4 <fiprintf>
 8011d36:	f001 fdad 	bl	8013894 <abort>
 8011d3a:	4b04      	ldr	r3, [pc, #16]	@ (8011d4c <__assert_func+0x38>)
 8011d3c:	e7f4      	b.n	8011d28 <__assert_func+0x14>
 8011d3e:	bf00      	nop
 8011d40:	2000007c 	.word	0x2000007c
 8011d44:	08014aac 	.word	0x08014aac
 8011d48:	08014a7e 	.word	0x08014a7e
 8011d4c:	08014a71 	.word	0x08014a71

08011d50 <quorem>:
 8011d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d54:	6903      	ldr	r3, [r0, #16]
 8011d56:	690c      	ldr	r4, [r1, #16]
 8011d58:	42a3      	cmp	r3, r4
 8011d5a:	4607      	mov	r7, r0
 8011d5c:	db7e      	blt.n	8011e5c <quorem+0x10c>
 8011d5e:	3c01      	subs	r4, #1
 8011d60:	f101 0814 	add.w	r8, r1, #20
 8011d64:	00a3      	lsls	r3, r4, #2
 8011d66:	f100 0514 	add.w	r5, r0, #20
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d82:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d86:	d32e      	bcc.n	8011de6 <quorem+0x96>
 8011d88:	f04f 0a00 	mov.w	sl, #0
 8011d8c:	46c4      	mov	ip, r8
 8011d8e:	46ae      	mov	lr, r5
 8011d90:	46d3      	mov	fp, sl
 8011d92:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d96:	b298      	uxth	r0, r3
 8011d98:	fb06 a000 	mla	r0, r6, r0, sl
 8011d9c:	0c02      	lsrs	r2, r0, #16
 8011d9e:	0c1b      	lsrs	r3, r3, #16
 8011da0:	fb06 2303 	mla	r3, r6, r3, r2
 8011da4:	f8de 2000 	ldr.w	r2, [lr]
 8011da8:	b280      	uxth	r0, r0
 8011daa:	b292      	uxth	r2, r2
 8011dac:	1a12      	subs	r2, r2, r0
 8011dae:	445a      	add	r2, fp
 8011db0:	f8de 0000 	ldr.w	r0, [lr]
 8011db4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011dbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011dc2:	b292      	uxth	r2, r2
 8011dc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011dc8:	45e1      	cmp	r9, ip
 8011dca:	f84e 2b04 	str.w	r2, [lr], #4
 8011dce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011dd2:	d2de      	bcs.n	8011d92 <quorem+0x42>
 8011dd4:	9b00      	ldr	r3, [sp, #0]
 8011dd6:	58eb      	ldr	r3, [r5, r3]
 8011dd8:	b92b      	cbnz	r3, 8011de6 <quorem+0x96>
 8011dda:	9b01      	ldr	r3, [sp, #4]
 8011ddc:	3b04      	subs	r3, #4
 8011dde:	429d      	cmp	r5, r3
 8011de0:	461a      	mov	r2, r3
 8011de2:	d32f      	bcc.n	8011e44 <quorem+0xf4>
 8011de4:	613c      	str	r4, [r7, #16]
 8011de6:	4638      	mov	r0, r7
 8011de8:	f001 f978 	bl	80130dc <__mcmp>
 8011dec:	2800      	cmp	r0, #0
 8011dee:	db25      	blt.n	8011e3c <quorem+0xec>
 8011df0:	4629      	mov	r1, r5
 8011df2:	2000      	movs	r0, #0
 8011df4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011df8:	f8d1 c000 	ldr.w	ip, [r1]
 8011dfc:	fa1f fe82 	uxth.w	lr, r2
 8011e00:	fa1f f38c 	uxth.w	r3, ip
 8011e04:	eba3 030e 	sub.w	r3, r3, lr
 8011e08:	4403      	add	r3, r0
 8011e0a:	0c12      	lsrs	r2, r2, #16
 8011e0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011e10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e1a:	45c1      	cmp	r9, r8
 8011e1c:	f841 3b04 	str.w	r3, [r1], #4
 8011e20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011e24:	d2e6      	bcs.n	8011df4 <quorem+0xa4>
 8011e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e2e:	b922      	cbnz	r2, 8011e3a <quorem+0xea>
 8011e30:	3b04      	subs	r3, #4
 8011e32:	429d      	cmp	r5, r3
 8011e34:	461a      	mov	r2, r3
 8011e36:	d30b      	bcc.n	8011e50 <quorem+0x100>
 8011e38:	613c      	str	r4, [r7, #16]
 8011e3a:	3601      	adds	r6, #1
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	b003      	add	sp, #12
 8011e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e44:	6812      	ldr	r2, [r2, #0]
 8011e46:	3b04      	subs	r3, #4
 8011e48:	2a00      	cmp	r2, #0
 8011e4a:	d1cb      	bne.n	8011de4 <quorem+0x94>
 8011e4c:	3c01      	subs	r4, #1
 8011e4e:	e7c6      	b.n	8011dde <quorem+0x8e>
 8011e50:	6812      	ldr	r2, [r2, #0]
 8011e52:	3b04      	subs	r3, #4
 8011e54:	2a00      	cmp	r2, #0
 8011e56:	d1ef      	bne.n	8011e38 <quorem+0xe8>
 8011e58:	3c01      	subs	r4, #1
 8011e5a:	e7ea      	b.n	8011e32 <quorem+0xe2>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	e7ee      	b.n	8011e3e <quorem+0xee>

08011e60 <_dtoa_r>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	69c7      	ldr	r7, [r0, #28]
 8011e66:	b099      	sub	sp, #100	@ 0x64
 8011e68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e6c:	ec55 4b10 	vmov	r4, r5, d0
 8011e70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8011e74:	4683      	mov	fp, r0
 8011e76:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011e7a:	b97f      	cbnz	r7, 8011e9c <_dtoa_r+0x3c>
 8011e7c:	2010      	movs	r0, #16
 8011e7e:	f000 fdfd 	bl	8012a7c <malloc>
 8011e82:	4602      	mov	r2, r0
 8011e84:	f8cb 001c 	str.w	r0, [fp, #28]
 8011e88:	b920      	cbnz	r0, 8011e94 <_dtoa_r+0x34>
 8011e8a:	4ba7      	ldr	r3, [pc, #668]	@ (8012128 <_dtoa_r+0x2c8>)
 8011e8c:	21ef      	movs	r1, #239	@ 0xef
 8011e8e:	48a7      	ldr	r0, [pc, #668]	@ (801212c <_dtoa_r+0x2cc>)
 8011e90:	f7ff ff40 	bl	8011d14 <__assert_func>
 8011e94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011e98:	6007      	str	r7, [r0, #0]
 8011e9a:	60c7      	str	r7, [r0, #12]
 8011e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011ea0:	6819      	ldr	r1, [r3, #0]
 8011ea2:	b159      	cbz	r1, 8011ebc <_dtoa_r+0x5c>
 8011ea4:	685a      	ldr	r2, [r3, #4]
 8011ea6:	604a      	str	r2, [r1, #4]
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	4093      	lsls	r3, r2
 8011eac:	608b      	str	r3, [r1, #8]
 8011eae:	4658      	mov	r0, fp
 8011eb0:	f000 feda 	bl	8012c68 <_Bfree>
 8011eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	601a      	str	r2, [r3, #0]
 8011ebc:	1e2b      	subs	r3, r5, #0
 8011ebe:	bfb9      	ittee	lt
 8011ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011ec4:	9303      	strlt	r3, [sp, #12]
 8011ec6:	2300      	movge	r3, #0
 8011ec8:	6033      	strge	r3, [r6, #0]
 8011eca:	9f03      	ldr	r7, [sp, #12]
 8011ecc:	4b98      	ldr	r3, [pc, #608]	@ (8012130 <_dtoa_r+0x2d0>)
 8011ece:	bfbc      	itt	lt
 8011ed0:	2201      	movlt	r2, #1
 8011ed2:	6032      	strlt	r2, [r6, #0]
 8011ed4:	43bb      	bics	r3, r7
 8011ed6:	d112      	bne.n	8011efe <_dtoa_r+0x9e>
 8011ed8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011eda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011ede:	6013      	str	r3, [r2, #0]
 8011ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011ee4:	4323      	orrs	r3, r4
 8011ee6:	f000 854d 	beq.w	8012984 <_dtoa_r+0xb24>
 8011eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011eec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012144 <_dtoa_r+0x2e4>
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f000 854f 	beq.w	8012994 <_dtoa_r+0xb34>
 8011ef6:	f10a 0303 	add.w	r3, sl, #3
 8011efa:	f000 bd49 	b.w	8012990 <_dtoa_r+0xb30>
 8011efe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f02:	2200      	movs	r2, #0
 8011f04:	ec51 0b17 	vmov	r0, r1, d7
 8011f08:	2300      	movs	r3, #0
 8011f0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011f0e:	f7ee fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f12:	4680      	mov	r8, r0
 8011f14:	b158      	cbz	r0, 8011f2e <_dtoa_r+0xce>
 8011f16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011f18:	2301      	movs	r3, #1
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f1e:	b113      	cbz	r3, 8011f26 <_dtoa_r+0xc6>
 8011f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011f22:	4b84      	ldr	r3, [pc, #528]	@ (8012134 <_dtoa_r+0x2d4>)
 8011f24:	6013      	str	r3, [r2, #0]
 8011f26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012148 <_dtoa_r+0x2e8>
 8011f2a:	f000 bd33 	b.w	8012994 <_dtoa_r+0xb34>
 8011f2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011f32:	aa16      	add	r2, sp, #88	@ 0x58
 8011f34:	a917      	add	r1, sp, #92	@ 0x5c
 8011f36:	4658      	mov	r0, fp
 8011f38:	f001 f980 	bl	801323c <__d2b>
 8011f3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011f40:	4681      	mov	r9, r0
 8011f42:	2e00      	cmp	r6, #0
 8011f44:	d077      	beq.n	8012036 <_dtoa_r+0x1d6>
 8011f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011f54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011f58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011f5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011f60:	4619      	mov	r1, r3
 8011f62:	2200      	movs	r2, #0
 8011f64:	4b74      	ldr	r3, [pc, #464]	@ (8012138 <_dtoa_r+0x2d8>)
 8011f66:	f7ee f98f 	bl	8000288 <__aeabi_dsub>
 8011f6a:	a369      	add	r3, pc, #420	@ (adr r3, 8012110 <_dtoa_r+0x2b0>)
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	f7ee fb42 	bl	80005f8 <__aeabi_dmul>
 8011f74:	a368      	add	r3, pc, #416	@ (adr r3, 8012118 <_dtoa_r+0x2b8>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	f7ee f987 	bl	800028c <__adddf3>
 8011f7e:	4604      	mov	r4, r0
 8011f80:	4630      	mov	r0, r6
 8011f82:	460d      	mov	r5, r1
 8011f84:	f7ee face 	bl	8000524 <__aeabi_i2d>
 8011f88:	a365      	add	r3, pc, #404	@ (adr r3, 8012120 <_dtoa_r+0x2c0>)
 8011f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8e:	f7ee fb33 	bl	80005f8 <__aeabi_dmul>
 8011f92:	4602      	mov	r2, r0
 8011f94:	460b      	mov	r3, r1
 8011f96:	4620      	mov	r0, r4
 8011f98:	4629      	mov	r1, r5
 8011f9a:	f7ee f977 	bl	800028c <__adddf3>
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	460d      	mov	r5, r1
 8011fa2:	f7ee fdd9 	bl	8000b58 <__aeabi_d2iz>
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	4607      	mov	r7, r0
 8011faa:	2300      	movs	r3, #0
 8011fac:	4620      	mov	r0, r4
 8011fae:	4629      	mov	r1, r5
 8011fb0:	f7ee fd94 	bl	8000adc <__aeabi_dcmplt>
 8011fb4:	b140      	cbz	r0, 8011fc8 <_dtoa_r+0x168>
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	f7ee fab4 	bl	8000524 <__aeabi_i2d>
 8011fbc:	4622      	mov	r2, r4
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	f7ee fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fc4:	b900      	cbnz	r0, 8011fc8 <_dtoa_r+0x168>
 8011fc6:	3f01      	subs	r7, #1
 8011fc8:	2f16      	cmp	r7, #22
 8011fca:	d851      	bhi.n	8012070 <_dtoa_r+0x210>
 8011fcc:	4b5b      	ldr	r3, [pc, #364]	@ (801213c <_dtoa_r+0x2dc>)
 8011fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011fda:	f7ee fd7f 	bl	8000adc <__aeabi_dcmplt>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d048      	beq.n	8012074 <_dtoa_r+0x214>
 8011fe2:	3f01      	subs	r7, #1
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	9312      	str	r3, [sp, #72]	@ 0x48
 8011fe8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011fea:	1b9b      	subs	r3, r3, r6
 8011fec:	1e5a      	subs	r2, r3, #1
 8011fee:	bf44      	itt	mi
 8011ff0:	f1c3 0801 	rsbmi	r8, r3, #1
 8011ff4:	2300      	movmi	r3, #0
 8011ff6:	9208      	str	r2, [sp, #32]
 8011ff8:	bf54      	ite	pl
 8011ffa:	f04f 0800 	movpl.w	r8, #0
 8011ffe:	9308      	strmi	r3, [sp, #32]
 8012000:	2f00      	cmp	r7, #0
 8012002:	db39      	blt.n	8012078 <_dtoa_r+0x218>
 8012004:	9b08      	ldr	r3, [sp, #32]
 8012006:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012008:	443b      	add	r3, r7
 801200a:	9308      	str	r3, [sp, #32]
 801200c:	2300      	movs	r3, #0
 801200e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012012:	2b09      	cmp	r3, #9
 8012014:	d864      	bhi.n	80120e0 <_dtoa_r+0x280>
 8012016:	2b05      	cmp	r3, #5
 8012018:	bfc4      	itt	gt
 801201a:	3b04      	subgt	r3, #4
 801201c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012020:	f1a3 0302 	sub.w	r3, r3, #2
 8012024:	bfcc      	ite	gt
 8012026:	2400      	movgt	r4, #0
 8012028:	2401      	movle	r4, #1
 801202a:	2b03      	cmp	r3, #3
 801202c:	d863      	bhi.n	80120f6 <_dtoa_r+0x296>
 801202e:	e8df f003 	tbb	[pc, r3]
 8012032:	372a      	.short	0x372a
 8012034:	5535      	.short	0x5535
 8012036:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801203a:	441e      	add	r6, r3
 801203c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012040:	2b20      	cmp	r3, #32
 8012042:	bfc1      	itttt	gt
 8012044:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012048:	409f      	lslgt	r7, r3
 801204a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801204e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012052:	bfd6      	itet	le
 8012054:	f1c3 0320 	rsble	r3, r3, #32
 8012058:	ea47 0003 	orrgt.w	r0, r7, r3
 801205c:	fa04 f003 	lslle.w	r0, r4, r3
 8012060:	f7ee fa50 	bl	8000504 <__aeabi_ui2d>
 8012064:	2201      	movs	r2, #1
 8012066:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801206a:	3e01      	subs	r6, #1
 801206c:	9214      	str	r2, [sp, #80]	@ 0x50
 801206e:	e777      	b.n	8011f60 <_dtoa_r+0x100>
 8012070:	2301      	movs	r3, #1
 8012072:	e7b8      	b.n	8011fe6 <_dtoa_r+0x186>
 8012074:	9012      	str	r0, [sp, #72]	@ 0x48
 8012076:	e7b7      	b.n	8011fe8 <_dtoa_r+0x188>
 8012078:	427b      	negs	r3, r7
 801207a:	930a      	str	r3, [sp, #40]	@ 0x28
 801207c:	2300      	movs	r3, #0
 801207e:	eba8 0807 	sub.w	r8, r8, r7
 8012082:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012084:	e7c4      	b.n	8012010 <_dtoa_r+0x1b0>
 8012086:	2300      	movs	r3, #0
 8012088:	930b      	str	r3, [sp, #44]	@ 0x2c
 801208a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801208c:	2b00      	cmp	r3, #0
 801208e:	dc35      	bgt.n	80120fc <_dtoa_r+0x29c>
 8012090:	2301      	movs	r3, #1
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	9307      	str	r3, [sp, #28]
 8012096:	461a      	mov	r2, r3
 8012098:	920e      	str	r2, [sp, #56]	@ 0x38
 801209a:	e00b      	b.n	80120b4 <_dtoa_r+0x254>
 801209c:	2301      	movs	r3, #1
 801209e:	e7f3      	b.n	8012088 <_dtoa_r+0x228>
 80120a0:	2300      	movs	r3, #0
 80120a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80120a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120a6:	18fb      	adds	r3, r7, r3
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	3301      	adds	r3, #1
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	9307      	str	r3, [sp, #28]
 80120b0:	bfb8      	it	lt
 80120b2:	2301      	movlt	r3, #1
 80120b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80120b8:	2100      	movs	r1, #0
 80120ba:	2204      	movs	r2, #4
 80120bc:	f102 0514 	add.w	r5, r2, #20
 80120c0:	429d      	cmp	r5, r3
 80120c2:	d91f      	bls.n	8012104 <_dtoa_r+0x2a4>
 80120c4:	6041      	str	r1, [r0, #4]
 80120c6:	4658      	mov	r0, fp
 80120c8:	f000 fd8e 	bl	8012be8 <_Balloc>
 80120cc:	4682      	mov	sl, r0
 80120ce:	2800      	cmp	r0, #0
 80120d0:	d13c      	bne.n	801214c <_dtoa_r+0x2ec>
 80120d2:	4b1b      	ldr	r3, [pc, #108]	@ (8012140 <_dtoa_r+0x2e0>)
 80120d4:	4602      	mov	r2, r0
 80120d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80120da:	e6d8      	b.n	8011e8e <_dtoa_r+0x2e>
 80120dc:	2301      	movs	r3, #1
 80120de:	e7e0      	b.n	80120a2 <_dtoa_r+0x242>
 80120e0:	2401      	movs	r4, #1
 80120e2:	2300      	movs	r3, #0
 80120e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80120e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80120e8:	f04f 33ff 	mov.w	r3, #4294967295
 80120ec:	9300      	str	r3, [sp, #0]
 80120ee:	9307      	str	r3, [sp, #28]
 80120f0:	2200      	movs	r2, #0
 80120f2:	2312      	movs	r3, #18
 80120f4:	e7d0      	b.n	8012098 <_dtoa_r+0x238>
 80120f6:	2301      	movs	r3, #1
 80120f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80120fa:	e7f5      	b.n	80120e8 <_dtoa_r+0x288>
 80120fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	9307      	str	r3, [sp, #28]
 8012102:	e7d7      	b.n	80120b4 <_dtoa_r+0x254>
 8012104:	3101      	adds	r1, #1
 8012106:	0052      	lsls	r2, r2, #1
 8012108:	e7d8      	b.n	80120bc <_dtoa_r+0x25c>
 801210a:	bf00      	nop
 801210c:	f3af 8000 	nop.w
 8012110:	636f4361 	.word	0x636f4361
 8012114:	3fd287a7 	.word	0x3fd287a7
 8012118:	8b60c8b3 	.word	0x8b60c8b3
 801211c:	3fc68a28 	.word	0x3fc68a28
 8012120:	509f79fb 	.word	0x509f79fb
 8012124:	3fd34413 	.word	0x3fd34413
 8012128:	08014aba 	.word	0x08014aba
 801212c:	08014ad1 	.word	0x08014ad1
 8012130:	7ff00000 	.word	0x7ff00000
 8012134:	08014a4e 	.word	0x08014a4e
 8012138:	3ff80000 	.word	0x3ff80000
 801213c:	08014bc8 	.word	0x08014bc8
 8012140:	08014b29 	.word	0x08014b29
 8012144:	08014ab6 	.word	0x08014ab6
 8012148:	08014a4d 	.word	0x08014a4d
 801214c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012150:	6018      	str	r0, [r3, #0]
 8012152:	9b07      	ldr	r3, [sp, #28]
 8012154:	2b0e      	cmp	r3, #14
 8012156:	f200 80a4 	bhi.w	80122a2 <_dtoa_r+0x442>
 801215a:	2c00      	cmp	r4, #0
 801215c:	f000 80a1 	beq.w	80122a2 <_dtoa_r+0x442>
 8012160:	2f00      	cmp	r7, #0
 8012162:	dd33      	ble.n	80121cc <_dtoa_r+0x36c>
 8012164:	4bad      	ldr	r3, [pc, #692]	@ (801241c <_dtoa_r+0x5bc>)
 8012166:	f007 020f 	and.w	r2, r7, #15
 801216a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801216e:	ed93 7b00 	vldr	d7, [r3]
 8012172:	05f8      	lsls	r0, r7, #23
 8012174:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012178:	ea4f 1427 	mov.w	r4, r7, asr #4
 801217c:	d516      	bpl.n	80121ac <_dtoa_r+0x34c>
 801217e:	4ba8      	ldr	r3, [pc, #672]	@ (8012420 <_dtoa_r+0x5c0>)
 8012180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012184:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012188:	f7ee fb60 	bl	800084c <__aeabi_ddiv>
 801218c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012190:	f004 040f 	and.w	r4, r4, #15
 8012194:	2603      	movs	r6, #3
 8012196:	4da2      	ldr	r5, [pc, #648]	@ (8012420 <_dtoa_r+0x5c0>)
 8012198:	b954      	cbnz	r4, 80121b0 <_dtoa_r+0x350>
 801219a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801219e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121a2:	f7ee fb53 	bl	800084c <__aeabi_ddiv>
 80121a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121aa:	e028      	b.n	80121fe <_dtoa_r+0x39e>
 80121ac:	2602      	movs	r6, #2
 80121ae:	e7f2      	b.n	8012196 <_dtoa_r+0x336>
 80121b0:	07e1      	lsls	r1, r4, #31
 80121b2:	d508      	bpl.n	80121c6 <_dtoa_r+0x366>
 80121b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80121bc:	f7ee fa1c 	bl	80005f8 <__aeabi_dmul>
 80121c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80121c4:	3601      	adds	r6, #1
 80121c6:	1064      	asrs	r4, r4, #1
 80121c8:	3508      	adds	r5, #8
 80121ca:	e7e5      	b.n	8012198 <_dtoa_r+0x338>
 80121cc:	f000 80d2 	beq.w	8012374 <_dtoa_r+0x514>
 80121d0:	427c      	negs	r4, r7
 80121d2:	4b92      	ldr	r3, [pc, #584]	@ (801241c <_dtoa_r+0x5bc>)
 80121d4:	4d92      	ldr	r5, [pc, #584]	@ (8012420 <_dtoa_r+0x5c0>)
 80121d6:	f004 020f 	and.w	r2, r4, #15
 80121da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121e6:	f7ee fa07 	bl	80005f8 <__aeabi_dmul>
 80121ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121ee:	1124      	asrs	r4, r4, #4
 80121f0:	2300      	movs	r3, #0
 80121f2:	2602      	movs	r6, #2
 80121f4:	2c00      	cmp	r4, #0
 80121f6:	f040 80b2 	bne.w	801235e <_dtoa_r+0x4fe>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d1d3      	bne.n	80121a6 <_dtoa_r+0x346>
 80121fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012200:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012204:	2b00      	cmp	r3, #0
 8012206:	f000 80b7 	beq.w	8012378 <_dtoa_r+0x518>
 801220a:	4b86      	ldr	r3, [pc, #536]	@ (8012424 <_dtoa_r+0x5c4>)
 801220c:	2200      	movs	r2, #0
 801220e:	4620      	mov	r0, r4
 8012210:	4629      	mov	r1, r5
 8012212:	f7ee fc63 	bl	8000adc <__aeabi_dcmplt>
 8012216:	2800      	cmp	r0, #0
 8012218:	f000 80ae 	beq.w	8012378 <_dtoa_r+0x518>
 801221c:	9b07      	ldr	r3, [sp, #28]
 801221e:	2b00      	cmp	r3, #0
 8012220:	f000 80aa 	beq.w	8012378 <_dtoa_r+0x518>
 8012224:	9b00      	ldr	r3, [sp, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	dd37      	ble.n	801229a <_dtoa_r+0x43a>
 801222a:	1e7b      	subs	r3, r7, #1
 801222c:	9304      	str	r3, [sp, #16]
 801222e:	4620      	mov	r0, r4
 8012230:	4b7d      	ldr	r3, [pc, #500]	@ (8012428 <_dtoa_r+0x5c8>)
 8012232:	2200      	movs	r2, #0
 8012234:	4629      	mov	r1, r5
 8012236:	f7ee f9df 	bl	80005f8 <__aeabi_dmul>
 801223a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801223e:	9c00      	ldr	r4, [sp, #0]
 8012240:	3601      	adds	r6, #1
 8012242:	4630      	mov	r0, r6
 8012244:	f7ee f96e 	bl	8000524 <__aeabi_i2d>
 8012248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801224c:	f7ee f9d4 	bl	80005f8 <__aeabi_dmul>
 8012250:	4b76      	ldr	r3, [pc, #472]	@ (801242c <_dtoa_r+0x5cc>)
 8012252:	2200      	movs	r2, #0
 8012254:	f7ee f81a 	bl	800028c <__adddf3>
 8012258:	4605      	mov	r5, r0
 801225a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801225e:	2c00      	cmp	r4, #0
 8012260:	f040 808d 	bne.w	801237e <_dtoa_r+0x51e>
 8012264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012268:	4b71      	ldr	r3, [pc, #452]	@ (8012430 <_dtoa_r+0x5d0>)
 801226a:	2200      	movs	r2, #0
 801226c:	f7ee f80c 	bl	8000288 <__aeabi_dsub>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012278:	462a      	mov	r2, r5
 801227a:	4633      	mov	r3, r6
 801227c:	f7ee fc4c 	bl	8000b18 <__aeabi_dcmpgt>
 8012280:	2800      	cmp	r0, #0
 8012282:	f040 828b 	bne.w	801279c <_dtoa_r+0x93c>
 8012286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801228a:	462a      	mov	r2, r5
 801228c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012290:	f7ee fc24 	bl	8000adc <__aeabi_dcmplt>
 8012294:	2800      	cmp	r0, #0
 8012296:	f040 8128 	bne.w	80124ea <_dtoa_r+0x68a>
 801229a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801229e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80122a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f2c0 815a 	blt.w	801255e <_dtoa_r+0x6fe>
 80122aa:	2f0e      	cmp	r7, #14
 80122ac:	f300 8157 	bgt.w	801255e <_dtoa_r+0x6fe>
 80122b0:	4b5a      	ldr	r3, [pc, #360]	@ (801241c <_dtoa_r+0x5bc>)
 80122b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80122b6:	ed93 7b00 	vldr	d7, [r3]
 80122ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122bc:	2b00      	cmp	r3, #0
 80122be:	ed8d 7b00 	vstr	d7, [sp]
 80122c2:	da03      	bge.n	80122cc <_dtoa_r+0x46c>
 80122c4:	9b07      	ldr	r3, [sp, #28]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f340 8101 	ble.w	80124ce <_dtoa_r+0x66e>
 80122cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80122d0:	4656      	mov	r6, sl
 80122d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122d6:	4620      	mov	r0, r4
 80122d8:	4629      	mov	r1, r5
 80122da:	f7ee fab7 	bl	800084c <__aeabi_ddiv>
 80122de:	f7ee fc3b 	bl	8000b58 <__aeabi_d2iz>
 80122e2:	4680      	mov	r8, r0
 80122e4:	f7ee f91e 	bl	8000524 <__aeabi_i2d>
 80122e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122ec:	f7ee f984 	bl	80005f8 <__aeabi_dmul>
 80122f0:	4602      	mov	r2, r0
 80122f2:	460b      	mov	r3, r1
 80122f4:	4620      	mov	r0, r4
 80122f6:	4629      	mov	r1, r5
 80122f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80122fc:	f7ed ffc4 	bl	8000288 <__aeabi_dsub>
 8012300:	f806 4b01 	strb.w	r4, [r6], #1
 8012304:	9d07      	ldr	r5, [sp, #28]
 8012306:	eba6 040a 	sub.w	r4, r6, sl
 801230a:	42a5      	cmp	r5, r4
 801230c:	4602      	mov	r2, r0
 801230e:	460b      	mov	r3, r1
 8012310:	f040 8117 	bne.w	8012542 <_dtoa_r+0x6e2>
 8012314:	f7ed ffba 	bl	800028c <__adddf3>
 8012318:	e9dd 2300 	ldrd	r2, r3, [sp]
 801231c:	4604      	mov	r4, r0
 801231e:	460d      	mov	r5, r1
 8012320:	f7ee fbfa 	bl	8000b18 <__aeabi_dcmpgt>
 8012324:	2800      	cmp	r0, #0
 8012326:	f040 80f9 	bne.w	801251c <_dtoa_r+0x6bc>
 801232a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801232e:	4620      	mov	r0, r4
 8012330:	4629      	mov	r1, r5
 8012332:	f7ee fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8012336:	b118      	cbz	r0, 8012340 <_dtoa_r+0x4e0>
 8012338:	f018 0f01 	tst.w	r8, #1
 801233c:	f040 80ee 	bne.w	801251c <_dtoa_r+0x6bc>
 8012340:	4649      	mov	r1, r9
 8012342:	4658      	mov	r0, fp
 8012344:	f000 fc90 	bl	8012c68 <_Bfree>
 8012348:	2300      	movs	r3, #0
 801234a:	7033      	strb	r3, [r6, #0]
 801234c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801234e:	3701      	adds	r7, #1
 8012350:	601f      	str	r7, [r3, #0]
 8012352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012354:	2b00      	cmp	r3, #0
 8012356:	f000 831d 	beq.w	8012994 <_dtoa_r+0xb34>
 801235a:	601e      	str	r6, [r3, #0]
 801235c:	e31a      	b.n	8012994 <_dtoa_r+0xb34>
 801235e:	07e2      	lsls	r2, r4, #31
 8012360:	d505      	bpl.n	801236e <_dtoa_r+0x50e>
 8012362:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012366:	f7ee f947 	bl	80005f8 <__aeabi_dmul>
 801236a:	3601      	adds	r6, #1
 801236c:	2301      	movs	r3, #1
 801236e:	1064      	asrs	r4, r4, #1
 8012370:	3508      	adds	r5, #8
 8012372:	e73f      	b.n	80121f4 <_dtoa_r+0x394>
 8012374:	2602      	movs	r6, #2
 8012376:	e742      	b.n	80121fe <_dtoa_r+0x39e>
 8012378:	9c07      	ldr	r4, [sp, #28]
 801237a:	9704      	str	r7, [sp, #16]
 801237c:	e761      	b.n	8012242 <_dtoa_r+0x3e2>
 801237e:	4b27      	ldr	r3, [pc, #156]	@ (801241c <_dtoa_r+0x5bc>)
 8012380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012382:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012386:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801238a:	4454      	add	r4, sl
 801238c:	2900      	cmp	r1, #0
 801238e:	d053      	beq.n	8012438 <_dtoa_r+0x5d8>
 8012390:	4928      	ldr	r1, [pc, #160]	@ (8012434 <_dtoa_r+0x5d4>)
 8012392:	2000      	movs	r0, #0
 8012394:	f7ee fa5a 	bl	800084c <__aeabi_ddiv>
 8012398:	4633      	mov	r3, r6
 801239a:	462a      	mov	r2, r5
 801239c:	f7ed ff74 	bl	8000288 <__aeabi_dsub>
 80123a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80123a4:	4656      	mov	r6, sl
 80123a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123aa:	f7ee fbd5 	bl	8000b58 <__aeabi_d2iz>
 80123ae:	4605      	mov	r5, r0
 80123b0:	f7ee f8b8 	bl	8000524 <__aeabi_i2d>
 80123b4:	4602      	mov	r2, r0
 80123b6:	460b      	mov	r3, r1
 80123b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123bc:	f7ed ff64 	bl	8000288 <__aeabi_dsub>
 80123c0:	3530      	adds	r5, #48	@ 0x30
 80123c2:	4602      	mov	r2, r0
 80123c4:	460b      	mov	r3, r1
 80123c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123ca:	f806 5b01 	strb.w	r5, [r6], #1
 80123ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80123d2:	f7ee fb83 	bl	8000adc <__aeabi_dcmplt>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d171      	bne.n	80124be <_dtoa_r+0x65e>
 80123da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123de:	4911      	ldr	r1, [pc, #68]	@ (8012424 <_dtoa_r+0x5c4>)
 80123e0:	2000      	movs	r0, #0
 80123e2:	f7ed ff51 	bl	8000288 <__aeabi_dsub>
 80123e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80123ea:	f7ee fb77 	bl	8000adc <__aeabi_dcmplt>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	f040 8095 	bne.w	801251e <_dtoa_r+0x6be>
 80123f4:	42a6      	cmp	r6, r4
 80123f6:	f43f af50 	beq.w	801229a <_dtoa_r+0x43a>
 80123fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80123fe:	4b0a      	ldr	r3, [pc, #40]	@ (8012428 <_dtoa_r+0x5c8>)
 8012400:	2200      	movs	r2, #0
 8012402:	f7ee f8f9 	bl	80005f8 <__aeabi_dmul>
 8012406:	4b08      	ldr	r3, [pc, #32]	@ (8012428 <_dtoa_r+0x5c8>)
 8012408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801240c:	2200      	movs	r2, #0
 801240e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012412:	f7ee f8f1 	bl	80005f8 <__aeabi_dmul>
 8012416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801241a:	e7c4      	b.n	80123a6 <_dtoa_r+0x546>
 801241c:	08014bc8 	.word	0x08014bc8
 8012420:	08014ba0 	.word	0x08014ba0
 8012424:	3ff00000 	.word	0x3ff00000
 8012428:	40240000 	.word	0x40240000
 801242c:	401c0000 	.word	0x401c0000
 8012430:	40140000 	.word	0x40140000
 8012434:	3fe00000 	.word	0x3fe00000
 8012438:	4631      	mov	r1, r6
 801243a:	4628      	mov	r0, r5
 801243c:	f7ee f8dc 	bl	80005f8 <__aeabi_dmul>
 8012440:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012444:	9415      	str	r4, [sp, #84]	@ 0x54
 8012446:	4656      	mov	r6, sl
 8012448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801244c:	f7ee fb84 	bl	8000b58 <__aeabi_d2iz>
 8012450:	4605      	mov	r5, r0
 8012452:	f7ee f867 	bl	8000524 <__aeabi_i2d>
 8012456:	4602      	mov	r2, r0
 8012458:	460b      	mov	r3, r1
 801245a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801245e:	f7ed ff13 	bl	8000288 <__aeabi_dsub>
 8012462:	3530      	adds	r5, #48	@ 0x30
 8012464:	f806 5b01 	strb.w	r5, [r6], #1
 8012468:	4602      	mov	r2, r0
 801246a:	460b      	mov	r3, r1
 801246c:	42a6      	cmp	r6, r4
 801246e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012472:	f04f 0200 	mov.w	r2, #0
 8012476:	d124      	bne.n	80124c2 <_dtoa_r+0x662>
 8012478:	4bac      	ldr	r3, [pc, #688]	@ (801272c <_dtoa_r+0x8cc>)
 801247a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801247e:	f7ed ff05 	bl	800028c <__adddf3>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801248a:	f7ee fb45 	bl	8000b18 <__aeabi_dcmpgt>
 801248e:	2800      	cmp	r0, #0
 8012490:	d145      	bne.n	801251e <_dtoa_r+0x6be>
 8012492:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012496:	49a5      	ldr	r1, [pc, #660]	@ (801272c <_dtoa_r+0x8cc>)
 8012498:	2000      	movs	r0, #0
 801249a:	f7ed fef5 	bl	8000288 <__aeabi_dsub>
 801249e:	4602      	mov	r2, r0
 80124a0:	460b      	mov	r3, r1
 80124a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124a6:	f7ee fb19 	bl	8000adc <__aeabi_dcmplt>
 80124aa:	2800      	cmp	r0, #0
 80124ac:	f43f aef5 	beq.w	801229a <_dtoa_r+0x43a>
 80124b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80124b2:	1e73      	subs	r3, r6, #1
 80124b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80124b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80124ba:	2b30      	cmp	r3, #48	@ 0x30
 80124bc:	d0f8      	beq.n	80124b0 <_dtoa_r+0x650>
 80124be:	9f04      	ldr	r7, [sp, #16]
 80124c0:	e73e      	b.n	8012340 <_dtoa_r+0x4e0>
 80124c2:	4b9b      	ldr	r3, [pc, #620]	@ (8012730 <_dtoa_r+0x8d0>)
 80124c4:	f7ee f898 	bl	80005f8 <__aeabi_dmul>
 80124c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124cc:	e7bc      	b.n	8012448 <_dtoa_r+0x5e8>
 80124ce:	d10c      	bne.n	80124ea <_dtoa_r+0x68a>
 80124d0:	4b98      	ldr	r3, [pc, #608]	@ (8012734 <_dtoa_r+0x8d4>)
 80124d2:	2200      	movs	r2, #0
 80124d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124d8:	f7ee f88e 	bl	80005f8 <__aeabi_dmul>
 80124dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124e0:	f7ee fb10 	bl	8000b04 <__aeabi_dcmpge>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	f000 8157 	beq.w	8012798 <_dtoa_r+0x938>
 80124ea:	2400      	movs	r4, #0
 80124ec:	4625      	mov	r5, r4
 80124ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124f0:	43db      	mvns	r3, r3
 80124f2:	9304      	str	r3, [sp, #16]
 80124f4:	4656      	mov	r6, sl
 80124f6:	2700      	movs	r7, #0
 80124f8:	4621      	mov	r1, r4
 80124fa:	4658      	mov	r0, fp
 80124fc:	f000 fbb4 	bl	8012c68 <_Bfree>
 8012500:	2d00      	cmp	r5, #0
 8012502:	d0dc      	beq.n	80124be <_dtoa_r+0x65e>
 8012504:	b12f      	cbz	r7, 8012512 <_dtoa_r+0x6b2>
 8012506:	42af      	cmp	r7, r5
 8012508:	d003      	beq.n	8012512 <_dtoa_r+0x6b2>
 801250a:	4639      	mov	r1, r7
 801250c:	4658      	mov	r0, fp
 801250e:	f000 fbab 	bl	8012c68 <_Bfree>
 8012512:	4629      	mov	r1, r5
 8012514:	4658      	mov	r0, fp
 8012516:	f000 fba7 	bl	8012c68 <_Bfree>
 801251a:	e7d0      	b.n	80124be <_dtoa_r+0x65e>
 801251c:	9704      	str	r7, [sp, #16]
 801251e:	4633      	mov	r3, r6
 8012520:	461e      	mov	r6, r3
 8012522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012526:	2a39      	cmp	r2, #57	@ 0x39
 8012528:	d107      	bne.n	801253a <_dtoa_r+0x6da>
 801252a:	459a      	cmp	sl, r3
 801252c:	d1f8      	bne.n	8012520 <_dtoa_r+0x6c0>
 801252e:	9a04      	ldr	r2, [sp, #16]
 8012530:	3201      	adds	r2, #1
 8012532:	9204      	str	r2, [sp, #16]
 8012534:	2230      	movs	r2, #48	@ 0x30
 8012536:	f88a 2000 	strb.w	r2, [sl]
 801253a:	781a      	ldrb	r2, [r3, #0]
 801253c:	3201      	adds	r2, #1
 801253e:	701a      	strb	r2, [r3, #0]
 8012540:	e7bd      	b.n	80124be <_dtoa_r+0x65e>
 8012542:	4b7b      	ldr	r3, [pc, #492]	@ (8012730 <_dtoa_r+0x8d0>)
 8012544:	2200      	movs	r2, #0
 8012546:	f7ee f857 	bl	80005f8 <__aeabi_dmul>
 801254a:	2200      	movs	r2, #0
 801254c:	2300      	movs	r3, #0
 801254e:	4604      	mov	r4, r0
 8012550:	460d      	mov	r5, r1
 8012552:	f7ee fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8012556:	2800      	cmp	r0, #0
 8012558:	f43f aebb 	beq.w	80122d2 <_dtoa_r+0x472>
 801255c:	e6f0      	b.n	8012340 <_dtoa_r+0x4e0>
 801255e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012560:	2a00      	cmp	r2, #0
 8012562:	f000 80db 	beq.w	801271c <_dtoa_r+0x8bc>
 8012566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012568:	2a01      	cmp	r2, #1
 801256a:	f300 80bf 	bgt.w	80126ec <_dtoa_r+0x88c>
 801256e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012570:	2a00      	cmp	r2, #0
 8012572:	f000 80b7 	beq.w	80126e4 <_dtoa_r+0x884>
 8012576:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801257a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801257c:	4646      	mov	r6, r8
 801257e:	9a08      	ldr	r2, [sp, #32]
 8012580:	2101      	movs	r1, #1
 8012582:	441a      	add	r2, r3
 8012584:	4658      	mov	r0, fp
 8012586:	4498      	add	r8, r3
 8012588:	9208      	str	r2, [sp, #32]
 801258a:	f000 fc21 	bl	8012dd0 <__i2b>
 801258e:	4605      	mov	r5, r0
 8012590:	b15e      	cbz	r6, 80125aa <_dtoa_r+0x74a>
 8012592:	9b08      	ldr	r3, [sp, #32]
 8012594:	2b00      	cmp	r3, #0
 8012596:	dd08      	ble.n	80125aa <_dtoa_r+0x74a>
 8012598:	42b3      	cmp	r3, r6
 801259a:	9a08      	ldr	r2, [sp, #32]
 801259c:	bfa8      	it	ge
 801259e:	4633      	movge	r3, r6
 80125a0:	eba8 0803 	sub.w	r8, r8, r3
 80125a4:	1af6      	subs	r6, r6, r3
 80125a6:	1ad3      	subs	r3, r2, r3
 80125a8:	9308      	str	r3, [sp, #32]
 80125aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125ac:	b1f3      	cbz	r3, 80125ec <_dtoa_r+0x78c>
 80125ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f000 80b7 	beq.w	8012724 <_dtoa_r+0x8c4>
 80125b6:	b18c      	cbz	r4, 80125dc <_dtoa_r+0x77c>
 80125b8:	4629      	mov	r1, r5
 80125ba:	4622      	mov	r2, r4
 80125bc:	4658      	mov	r0, fp
 80125be:	f000 fcc7 	bl	8012f50 <__pow5mult>
 80125c2:	464a      	mov	r2, r9
 80125c4:	4601      	mov	r1, r0
 80125c6:	4605      	mov	r5, r0
 80125c8:	4658      	mov	r0, fp
 80125ca:	f000 fc17 	bl	8012dfc <__multiply>
 80125ce:	4649      	mov	r1, r9
 80125d0:	9004      	str	r0, [sp, #16]
 80125d2:	4658      	mov	r0, fp
 80125d4:	f000 fb48 	bl	8012c68 <_Bfree>
 80125d8:	9b04      	ldr	r3, [sp, #16]
 80125da:	4699      	mov	r9, r3
 80125dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125de:	1b1a      	subs	r2, r3, r4
 80125e0:	d004      	beq.n	80125ec <_dtoa_r+0x78c>
 80125e2:	4649      	mov	r1, r9
 80125e4:	4658      	mov	r0, fp
 80125e6:	f000 fcb3 	bl	8012f50 <__pow5mult>
 80125ea:	4681      	mov	r9, r0
 80125ec:	2101      	movs	r1, #1
 80125ee:	4658      	mov	r0, fp
 80125f0:	f000 fbee 	bl	8012dd0 <__i2b>
 80125f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125f6:	4604      	mov	r4, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f000 81cf 	beq.w	801299c <_dtoa_r+0xb3c>
 80125fe:	461a      	mov	r2, r3
 8012600:	4601      	mov	r1, r0
 8012602:	4658      	mov	r0, fp
 8012604:	f000 fca4 	bl	8012f50 <__pow5mult>
 8012608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801260a:	2b01      	cmp	r3, #1
 801260c:	4604      	mov	r4, r0
 801260e:	f300 8095 	bgt.w	801273c <_dtoa_r+0x8dc>
 8012612:	9b02      	ldr	r3, [sp, #8]
 8012614:	2b00      	cmp	r3, #0
 8012616:	f040 8087 	bne.w	8012728 <_dtoa_r+0x8c8>
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012620:	2b00      	cmp	r3, #0
 8012622:	f040 8089 	bne.w	8012738 <_dtoa_r+0x8d8>
 8012626:	9b03      	ldr	r3, [sp, #12]
 8012628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801262c:	0d1b      	lsrs	r3, r3, #20
 801262e:	051b      	lsls	r3, r3, #20
 8012630:	b12b      	cbz	r3, 801263e <_dtoa_r+0x7de>
 8012632:	9b08      	ldr	r3, [sp, #32]
 8012634:	3301      	adds	r3, #1
 8012636:	9308      	str	r3, [sp, #32]
 8012638:	f108 0801 	add.w	r8, r8, #1
 801263c:	2301      	movs	r3, #1
 801263e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012642:	2b00      	cmp	r3, #0
 8012644:	f000 81b0 	beq.w	80129a8 <_dtoa_r+0xb48>
 8012648:	6923      	ldr	r3, [r4, #16]
 801264a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801264e:	6918      	ldr	r0, [r3, #16]
 8012650:	f000 fb72 	bl	8012d38 <__hi0bits>
 8012654:	f1c0 0020 	rsb	r0, r0, #32
 8012658:	9b08      	ldr	r3, [sp, #32]
 801265a:	4418      	add	r0, r3
 801265c:	f010 001f 	ands.w	r0, r0, #31
 8012660:	d077      	beq.n	8012752 <_dtoa_r+0x8f2>
 8012662:	f1c0 0320 	rsb	r3, r0, #32
 8012666:	2b04      	cmp	r3, #4
 8012668:	dd6b      	ble.n	8012742 <_dtoa_r+0x8e2>
 801266a:	9b08      	ldr	r3, [sp, #32]
 801266c:	f1c0 001c 	rsb	r0, r0, #28
 8012670:	4403      	add	r3, r0
 8012672:	4480      	add	r8, r0
 8012674:	4406      	add	r6, r0
 8012676:	9308      	str	r3, [sp, #32]
 8012678:	f1b8 0f00 	cmp.w	r8, #0
 801267c:	dd05      	ble.n	801268a <_dtoa_r+0x82a>
 801267e:	4649      	mov	r1, r9
 8012680:	4642      	mov	r2, r8
 8012682:	4658      	mov	r0, fp
 8012684:	f000 fcbe 	bl	8013004 <__lshift>
 8012688:	4681      	mov	r9, r0
 801268a:	9b08      	ldr	r3, [sp, #32]
 801268c:	2b00      	cmp	r3, #0
 801268e:	dd05      	ble.n	801269c <_dtoa_r+0x83c>
 8012690:	4621      	mov	r1, r4
 8012692:	461a      	mov	r2, r3
 8012694:	4658      	mov	r0, fp
 8012696:	f000 fcb5 	bl	8013004 <__lshift>
 801269a:	4604      	mov	r4, r0
 801269c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d059      	beq.n	8012756 <_dtoa_r+0x8f6>
 80126a2:	4621      	mov	r1, r4
 80126a4:	4648      	mov	r0, r9
 80126a6:	f000 fd19 	bl	80130dc <__mcmp>
 80126aa:	2800      	cmp	r0, #0
 80126ac:	da53      	bge.n	8012756 <_dtoa_r+0x8f6>
 80126ae:	1e7b      	subs	r3, r7, #1
 80126b0:	9304      	str	r3, [sp, #16]
 80126b2:	4649      	mov	r1, r9
 80126b4:	2300      	movs	r3, #0
 80126b6:	220a      	movs	r2, #10
 80126b8:	4658      	mov	r0, fp
 80126ba:	f000 faf7 	bl	8012cac <__multadd>
 80126be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126c0:	4681      	mov	r9, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f000 8172 	beq.w	80129ac <_dtoa_r+0xb4c>
 80126c8:	2300      	movs	r3, #0
 80126ca:	4629      	mov	r1, r5
 80126cc:	220a      	movs	r2, #10
 80126ce:	4658      	mov	r0, fp
 80126d0:	f000 faec 	bl	8012cac <__multadd>
 80126d4:	9b00      	ldr	r3, [sp, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	4605      	mov	r5, r0
 80126da:	dc67      	bgt.n	80127ac <_dtoa_r+0x94c>
 80126dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126de:	2b02      	cmp	r3, #2
 80126e0:	dc41      	bgt.n	8012766 <_dtoa_r+0x906>
 80126e2:	e063      	b.n	80127ac <_dtoa_r+0x94c>
 80126e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80126e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80126ea:	e746      	b.n	801257a <_dtoa_r+0x71a>
 80126ec:	9b07      	ldr	r3, [sp, #28]
 80126ee:	1e5c      	subs	r4, r3, #1
 80126f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126f2:	42a3      	cmp	r3, r4
 80126f4:	bfbf      	itttt	lt
 80126f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80126f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80126fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80126fc:	1ae3      	sublt	r3, r4, r3
 80126fe:	bfb4      	ite	lt
 8012700:	18d2      	addlt	r2, r2, r3
 8012702:	1b1c      	subge	r4, r3, r4
 8012704:	9b07      	ldr	r3, [sp, #28]
 8012706:	bfbc      	itt	lt
 8012708:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801270a:	2400      	movlt	r4, #0
 801270c:	2b00      	cmp	r3, #0
 801270e:	bfb5      	itete	lt
 8012710:	eba8 0603 	sublt.w	r6, r8, r3
 8012714:	9b07      	ldrge	r3, [sp, #28]
 8012716:	2300      	movlt	r3, #0
 8012718:	4646      	movge	r6, r8
 801271a:	e730      	b.n	801257e <_dtoa_r+0x71e>
 801271c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801271e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012720:	4646      	mov	r6, r8
 8012722:	e735      	b.n	8012590 <_dtoa_r+0x730>
 8012724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012726:	e75c      	b.n	80125e2 <_dtoa_r+0x782>
 8012728:	2300      	movs	r3, #0
 801272a:	e788      	b.n	801263e <_dtoa_r+0x7de>
 801272c:	3fe00000 	.word	0x3fe00000
 8012730:	40240000 	.word	0x40240000
 8012734:	40140000 	.word	0x40140000
 8012738:	9b02      	ldr	r3, [sp, #8]
 801273a:	e780      	b.n	801263e <_dtoa_r+0x7de>
 801273c:	2300      	movs	r3, #0
 801273e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012740:	e782      	b.n	8012648 <_dtoa_r+0x7e8>
 8012742:	d099      	beq.n	8012678 <_dtoa_r+0x818>
 8012744:	9a08      	ldr	r2, [sp, #32]
 8012746:	331c      	adds	r3, #28
 8012748:	441a      	add	r2, r3
 801274a:	4498      	add	r8, r3
 801274c:	441e      	add	r6, r3
 801274e:	9208      	str	r2, [sp, #32]
 8012750:	e792      	b.n	8012678 <_dtoa_r+0x818>
 8012752:	4603      	mov	r3, r0
 8012754:	e7f6      	b.n	8012744 <_dtoa_r+0x8e4>
 8012756:	9b07      	ldr	r3, [sp, #28]
 8012758:	9704      	str	r7, [sp, #16]
 801275a:	2b00      	cmp	r3, #0
 801275c:	dc20      	bgt.n	80127a0 <_dtoa_r+0x940>
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012762:	2b02      	cmp	r3, #2
 8012764:	dd1e      	ble.n	80127a4 <_dtoa_r+0x944>
 8012766:	9b00      	ldr	r3, [sp, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	f47f aec0 	bne.w	80124ee <_dtoa_r+0x68e>
 801276e:	4621      	mov	r1, r4
 8012770:	2205      	movs	r2, #5
 8012772:	4658      	mov	r0, fp
 8012774:	f000 fa9a 	bl	8012cac <__multadd>
 8012778:	4601      	mov	r1, r0
 801277a:	4604      	mov	r4, r0
 801277c:	4648      	mov	r0, r9
 801277e:	f000 fcad 	bl	80130dc <__mcmp>
 8012782:	2800      	cmp	r0, #0
 8012784:	f77f aeb3 	ble.w	80124ee <_dtoa_r+0x68e>
 8012788:	4656      	mov	r6, sl
 801278a:	2331      	movs	r3, #49	@ 0x31
 801278c:	f806 3b01 	strb.w	r3, [r6], #1
 8012790:	9b04      	ldr	r3, [sp, #16]
 8012792:	3301      	adds	r3, #1
 8012794:	9304      	str	r3, [sp, #16]
 8012796:	e6ae      	b.n	80124f6 <_dtoa_r+0x696>
 8012798:	9c07      	ldr	r4, [sp, #28]
 801279a:	9704      	str	r7, [sp, #16]
 801279c:	4625      	mov	r5, r4
 801279e:	e7f3      	b.n	8012788 <_dtoa_r+0x928>
 80127a0:	9b07      	ldr	r3, [sp, #28]
 80127a2:	9300      	str	r3, [sp, #0]
 80127a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	f000 8104 	beq.w	80129b4 <_dtoa_r+0xb54>
 80127ac:	2e00      	cmp	r6, #0
 80127ae:	dd05      	ble.n	80127bc <_dtoa_r+0x95c>
 80127b0:	4629      	mov	r1, r5
 80127b2:	4632      	mov	r2, r6
 80127b4:	4658      	mov	r0, fp
 80127b6:	f000 fc25 	bl	8013004 <__lshift>
 80127ba:	4605      	mov	r5, r0
 80127bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d05a      	beq.n	8012878 <_dtoa_r+0xa18>
 80127c2:	6869      	ldr	r1, [r5, #4]
 80127c4:	4658      	mov	r0, fp
 80127c6:	f000 fa0f 	bl	8012be8 <_Balloc>
 80127ca:	4606      	mov	r6, r0
 80127cc:	b928      	cbnz	r0, 80127da <_dtoa_r+0x97a>
 80127ce:	4b84      	ldr	r3, [pc, #528]	@ (80129e0 <_dtoa_r+0xb80>)
 80127d0:	4602      	mov	r2, r0
 80127d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80127d6:	f7ff bb5a 	b.w	8011e8e <_dtoa_r+0x2e>
 80127da:	692a      	ldr	r2, [r5, #16]
 80127dc:	3202      	adds	r2, #2
 80127de:	0092      	lsls	r2, r2, #2
 80127e0:	f105 010c 	add.w	r1, r5, #12
 80127e4:	300c      	adds	r0, #12
 80127e6:	f7ff fa86 	bl	8011cf6 <memcpy>
 80127ea:	2201      	movs	r2, #1
 80127ec:	4631      	mov	r1, r6
 80127ee:	4658      	mov	r0, fp
 80127f0:	f000 fc08 	bl	8013004 <__lshift>
 80127f4:	f10a 0301 	add.w	r3, sl, #1
 80127f8:	9307      	str	r3, [sp, #28]
 80127fa:	9b00      	ldr	r3, [sp, #0]
 80127fc:	4453      	add	r3, sl
 80127fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012800:	9b02      	ldr	r3, [sp, #8]
 8012802:	f003 0301 	and.w	r3, r3, #1
 8012806:	462f      	mov	r7, r5
 8012808:	930a      	str	r3, [sp, #40]	@ 0x28
 801280a:	4605      	mov	r5, r0
 801280c:	9b07      	ldr	r3, [sp, #28]
 801280e:	4621      	mov	r1, r4
 8012810:	3b01      	subs	r3, #1
 8012812:	4648      	mov	r0, r9
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	f7ff fa9b 	bl	8011d50 <quorem>
 801281a:	4639      	mov	r1, r7
 801281c:	9002      	str	r0, [sp, #8]
 801281e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012822:	4648      	mov	r0, r9
 8012824:	f000 fc5a 	bl	80130dc <__mcmp>
 8012828:	462a      	mov	r2, r5
 801282a:	9008      	str	r0, [sp, #32]
 801282c:	4621      	mov	r1, r4
 801282e:	4658      	mov	r0, fp
 8012830:	f000 fc70 	bl	8013114 <__mdiff>
 8012834:	68c2      	ldr	r2, [r0, #12]
 8012836:	4606      	mov	r6, r0
 8012838:	bb02      	cbnz	r2, 801287c <_dtoa_r+0xa1c>
 801283a:	4601      	mov	r1, r0
 801283c:	4648      	mov	r0, r9
 801283e:	f000 fc4d 	bl	80130dc <__mcmp>
 8012842:	4602      	mov	r2, r0
 8012844:	4631      	mov	r1, r6
 8012846:	4658      	mov	r0, fp
 8012848:	920e      	str	r2, [sp, #56]	@ 0x38
 801284a:	f000 fa0d 	bl	8012c68 <_Bfree>
 801284e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012850:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012852:	9e07      	ldr	r6, [sp, #28]
 8012854:	ea43 0102 	orr.w	r1, r3, r2
 8012858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801285a:	4319      	orrs	r1, r3
 801285c:	d110      	bne.n	8012880 <_dtoa_r+0xa20>
 801285e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012862:	d029      	beq.n	80128b8 <_dtoa_r+0xa58>
 8012864:	9b08      	ldr	r3, [sp, #32]
 8012866:	2b00      	cmp	r3, #0
 8012868:	dd02      	ble.n	8012870 <_dtoa_r+0xa10>
 801286a:	9b02      	ldr	r3, [sp, #8]
 801286c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012870:	9b00      	ldr	r3, [sp, #0]
 8012872:	f883 8000 	strb.w	r8, [r3]
 8012876:	e63f      	b.n	80124f8 <_dtoa_r+0x698>
 8012878:	4628      	mov	r0, r5
 801287a:	e7bb      	b.n	80127f4 <_dtoa_r+0x994>
 801287c:	2201      	movs	r2, #1
 801287e:	e7e1      	b.n	8012844 <_dtoa_r+0x9e4>
 8012880:	9b08      	ldr	r3, [sp, #32]
 8012882:	2b00      	cmp	r3, #0
 8012884:	db04      	blt.n	8012890 <_dtoa_r+0xa30>
 8012886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012888:	430b      	orrs	r3, r1
 801288a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801288c:	430b      	orrs	r3, r1
 801288e:	d120      	bne.n	80128d2 <_dtoa_r+0xa72>
 8012890:	2a00      	cmp	r2, #0
 8012892:	dded      	ble.n	8012870 <_dtoa_r+0xa10>
 8012894:	4649      	mov	r1, r9
 8012896:	2201      	movs	r2, #1
 8012898:	4658      	mov	r0, fp
 801289a:	f000 fbb3 	bl	8013004 <__lshift>
 801289e:	4621      	mov	r1, r4
 80128a0:	4681      	mov	r9, r0
 80128a2:	f000 fc1b 	bl	80130dc <__mcmp>
 80128a6:	2800      	cmp	r0, #0
 80128a8:	dc03      	bgt.n	80128b2 <_dtoa_r+0xa52>
 80128aa:	d1e1      	bne.n	8012870 <_dtoa_r+0xa10>
 80128ac:	f018 0f01 	tst.w	r8, #1
 80128b0:	d0de      	beq.n	8012870 <_dtoa_r+0xa10>
 80128b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80128b6:	d1d8      	bne.n	801286a <_dtoa_r+0xa0a>
 80128b8:	9a00      	ldr	r2, [sp, #0]
 80128ba:	2339      	movs	r3, #57	@ 0x39
 80128bc:	7013      	strb	r3, [r2, #0]
 80128be:	4633      	mov	r3, r6
 80128c0:	461e      	mov	r6, r3
 80128c2:	3b01      	subs	r3, #1
 80128c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80128c8:	2a39      	cmp	r2, #57	@ 0x39
 80128ca:	d052      	beq.n	8012972 <_dtoa_r+0xb12>
 80128cc:	3201      	adds	r2, #1
 80128ce:	701a      	strb	r2, [r3, #0]
 80128d0:	e612      	b.n	80124f8 <_dtoa_r+0x698>
 80128d2:	2a00      	cmp	r2, #0
 80128d4:	dd07      	ble.n	80128e6 <_dtoa_r+0xa86>
 80128d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80128da:	d0ed      	beq.n	80128b8 <_dtoa_r+0xa58>
 80128dc:	9a00      	ldr	r2, [sp, #0]
 80128de:	f108 0301 	add.w	r3, r8, #1
 80128e2:	7013      	strb	r3, [r2, #0]
 80128e4:	e608      	b.n	80124f8 <_dtoa_r+0x698>
 80128e6:	9b07      	ldr	r3, [sp, #28]
 80128e8:	9a07      	ldr	r2, [sp, #28]
 80128ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80128ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d028      	beq.n	8012946 <_dtoa_r+0xae6>
 80128f4:	4649      	mov	r1, r9
 80128f6:	2300      	movs	r3, #0
 80128f8:	220a      	movs	r2, #10
 80128fa:	4658      	mov	r0, fp
 80128fc:	f000 f9d6 	bl	8012cac <__multadd>
 8012900:	42af      	cmp	r7, r5
 8012902:	4681      	mov	r9, r0
 8012904:	f04f 0300 	mov.w	r3, #0
 8012908:	f04f 020a 	mov.w	r2, #10
 801290c:	4639      	mov	r1, r7
 801290e:	4658      	mov	r0, fp
 8012910:	d107      	bne.n	8012922 <_dtoa_r+0xac2>
 8012912:	f000 f9cb 	bl	8012cac <__multadd>
 8012916:	4607      	mov	r7, r0
 8012918:	4605      	mov	r5, r0
 801291a:	9b07      	ldr	r3, [sp, #28]
 801291c:	3301      	adds	r3, #1
 801291e:	9307      	str	r3, [sp, #28]
 8012920:	e774      	b.n	801280c <_dtoa_r+0x9ac>
 8012922:	f000 f9c3 	bl	8012cac <__multadd>
 8012926:	4629      	mov	r1, r5
 8012928:	4607      	mov	r7, r0
 801292a:	2300      	movs	r3, #0
 801292c:	220a      	movs	r2, #10
 801292e:	4658      	mov	r0, fp
 8012930:	f000 f9bc 	bl	8012cac <__multadd>
 8012934:	4605      	mov	r5, r0
 8012936:	e7f0      	b.n	801291a <_dtoa_r+0xaba>
 8012938:	9b00      	ldr	r3, [sp, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfcc      	ite	gt
 801293e:	461e      	movgt	r6, r3
 8012940:	2601      	movle	r6, #1
 8012942:	4456      	add	r6, sl
 8012944:	2700      	movs	r7, #0
 8012946:	4649      	mov	r1, r9
 8012948:	2201      	movs	r2, #1
 801294a:	4658      	mov	r0, fp
 801294c:	f000 fb5a 	bl	8013004 <__lshift>
 8012950:	4621      	mov	r1, r4
 8012952:	4681      	mov	r9, r0
 8012954:	f000 fbc2 	bl	80130dc <__mcmp>
 8012958:	2800      	cmp	r0, #0
 801295a:	dcb0      	bgt.n	80128be <_dtoa_r+0xa5e>
 801295c:	d102      	bne.n	8012964 <_dtoa_r+0xb04>
 801295e:	f018 0f01 	tst.w	r8, #1
 8012962:	d1ac      	bne.n	80128be <_dtoa_r+0xa5e>
 8012964:	4633      	mov	r3, r6
 8012966:	461e      	mov	r6, r3
 8012968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801296c:	2a30      	cmp	r2, #48	@ 0x30
 801296e:	d0fa      	beq.n	8012966 <_dtoa_r+0xb06>
 8012970:	e5c2      	b.n	80124f8 <_dtoa_r+0x698>
 8012972:	459a      	cmp	sl, r3
 8012974:	d1a4      	bne.n	80128c0 <_dtoa_r+0xa60>
 8012976:	9b04      	ldr	r3, [sp, #16]
 8012978:	3301      	adds	r3, #1
 801297a:	9304      	str	r3, [sp, #16]
 801297c:	2331      	movs	r3, #49	@ 0x31
 801297e:	f88a 3000 	strb.w	r3, [sl]
 8012982:	e5b9      	b.n	80124f8 <_dtoa_r+0x698>
 8012984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012986:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80129e4 <_dtoa_r+0xb84>
 801298a:	b11b      	cbz	r3, 8012994 <_dtoa_r+0xb34>
 801298c:	f10a 0308 	add.w	r3, sl, #8
 8012990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012992:	6013      	str	r3, [r2, #0]
 8012994:	4650      	mov	r0, sl
 8012996:	b019      	add	sp, #100	@ 0x64
 8012998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801299c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801299e:	2b01      	cmp	r3, #1
 80129a0:	f77f ae37 	ble.w	8012612 <_dtoa_r+0x7b2>
 80129a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80129a8:	2001      	movs	r0, #1
 80129aa:	e655      	b.n	8012658 <_dtoa_r+0x7f8>
 80129ac:	9b00      	ldr	r3, [sp, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	f77f aed6 	ble.w	8012760 <_dtoa_r+0x900>
 80129b4:	4656      	mov	r6, sl
 80129b6:	4621      	mov	r1, r4
 80129b8:	4648      	mov	r0, r9
 80129ba:	f7ff f9c9 	bl	8011d50 <quorem>
 80129be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80129c2:	f806 8b01 	strb.w	r8, [r6], #1
 80129c6:	9b00      	ldr	r3, [sp, #0]
 80129c8:	eba6 020a 	sub.w	r2, r6, sl
 80129cc:	4293      	cmp	r3, r2
 80129ce:	ddb3      	ble.n	8012938 <_dtoa_r+0xad8>
 80129d0:	4649      	mov	r1, r9
 80129d2:	2300      	movs	r3, #0
 80129d4:	220a      	movs	r2, #10
 80129d6:	4658      	mov	r0, fp
 80129d8:	f000 f968 	bl	8012cac <__multadd>
 80129dc:	4681      	mov	r9, r0
 80129de:	e7ea      	b.n	80129b6 <_dtoa_r+0xb56>
 80129e0:	08014b29 	.word	0x08014b29
 80129e4:	08014aad 	.word	0x08014aad

080129e8 <_free_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	4605      	mov	r5, r0
 80129ec:	2900      	cmp	r1, #0
 80129ee:	d041      	beq.n	8012a74 <_free_r+0x8c>
 80129f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129f4:	1f0c      	subs	r4, r1, #4
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	bfb8      	it	lt
 80129fa:	18e4      	addlt	r4, r4, r3
 80129fc:	f000 f8e8 	bl	8012bd0 <__malloc_lock>
 8012a00:	4a1d      	ldr	r2, [pc, #116]	@ (8012a78 <_free_r+0x90>)
 8012a02:	6813      	ldr	r3, [r2, #0]
 8012a04:	b933      	cbnz	r3, 8012a14 <_free_r+0x2c>
 8012a06:	6063      	str	r3, [r4, #4]
 8012a08:	6014      	str	r4, [r2, #0]
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a10:	f000 b8e4 	b.w	8012bdc <__malloc_unlock>
 8012a14:	42a3      	cmp	r3, r4
 8012a16:	d908      	bls.n	8012a2a <_free_r+0x42>
 8012a18:	6820      	ldr	r0, [r4, #0]
 8012a1a:	1821      	adds	r1, r4, r0
 8012a1c:	428b      	cmp	r3, r1
 8012a1e:	bf01      	itttt	eq
 8012a20:	6819      	ldreq	r1, [r3, #0]
 8012a22:	685b      	ldreq	r3, [r3, #4]
 8012a24:	1809      	addeq	r1, r1, r0
 8012a26:	6021      	streq	r1, [r4, #0]
 8012a28:	e7ed      	b.n	8012a06 <_free_r+0x1e>
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	b10b      	cbz	r3, 8012a34 <_free_r+0x4c>
 8012a30:	42a3      	cmp	r3, r4
 8012a32:	d9fa      	bls.n	8012a2a <_free_r+0x42>
 8012a34:	6811      	ldr	r1, [r2, #0]
 8012a36:	1850      	adds	r0, r2, r1
 8012a38:	42a0      	cmp	r0, r4
 8012a3a:	d10b      	bne.n	8012a54 <_free_r+0x6c>
 8012a3c:	6820      	ldr	r0, [r4, #0]
 8012a3e:	4401      	add	r1, r0
 8012a40:	1850      	adds	r0, r2, r1
 8012a42:	4283      	cmp	r3, r0
 8012a44:	6011      	str	r1, [r2, #0]
 8012a46:	d1e0      	bne.n	8012a0a <_free_r+0x22>
 8012a48:	6818      	ldr	r0, [r3, #0]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	6053      	str	r3, [r2, #4]
 8012a4e:	4408      	add	r0, r1
 8012a50:	6010      	str	r0, [r2, #0]
 8012a52:	e7da      	b.n	8012a0a <_free_r+0x22>
 8012a54:	d902      	bls.n	8012a5c <_free_r+0x74>
 8012a56:	230c      	movs	r3, #12
 8012a58:	602b      	str	r3, [r5, #0]
 8012a5a:	e7d6      	b.n	8012a0a <_free_r+0x22>
 8012a5c:	6820      	ldr	r0, [r4, #0]
 8012a5e:	1821      	adds	r1, r4, r0
 8012a60:	428b      	cmp	r3, r1
 8012a62:	bf04      	itt	eq
 8012a64:	6819      	ldreq	r1, [r3, #0]
 8012a66:	685b      	ldreq	r3, [r3, #4]
 8012a68:	6063      	str	r3, [r4, #4]
 8012a6a:	bf04      	itt	eq
 8012a6c:	1809      	addeq	r1, r1, r0
 8012a6e:	6021      	streq	r1, [r4, #0]
 8012a70:	6054      	str	r4, [r2, #4]
 8012a72:	e7ca      	b.n	8012a0a <_free_r+0x22>
 8012a74:	bd38      	pop	{r3, r4, r5, pc}
 8012a76:	bf00      	nop
 8012a78:	2000e928 	.word	0x2000e928

08012a7c <malloc>:
 8012a7c:	4b02      	ldr	r3, [pc, #8]	@ (8012a88 <malloc+0xc>)
 8012a7e:	4601      	mov	r1, r0
 8012a80:	6818      	ldr	r0, [r3, #0]
 8012a82:	f000 b825 	b.w	8012ad0 <_malloc_r>
 8012a86:	bf00      	nop
 8012a88:	2000007c 	.word	0x2000007c

08012a8c <sbrk_aligned>:
 8012a8c:	b570      	push	{r4, r5, r6, lr}
 8012a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8012acc <sbrk_aligned+0x40>)
 8012a90:	460c      	mov	r4, r1
 8012a92:	6831      	ldr	r1, [r6, #0]
 8012a94:	4605      	mov	r5, r0
 8012a96:	b911      	cbnz	r1, 8012a9e <sbrk_aligned+0x12>
 8012a98:	f000 feec 	bl	8013874 <_sbrk_r>
 8012a9c:	6030      	str	r0, [r6, #0]
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	f000 fee7 	bl	8013874 <_sbrk_r>
 8012aa6:	1c43      	adds	r3, r0, #1
 8012aa8:	d103      	bne.n	8012ab2 <sbrk_aligned+0x26>
 8012aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8012aae:	4620      	mov	r0, r4
 8012ab0:	bd70      	pop	{r4, r5, r6, pc}
 8012ab2:	1cc4      	adds	r4, r0, #3
 8012ab4:	f024 0403 	bic.w	r4, r4, #3
 8012ab8:	42a0      	cmp	r0, r4
 8012aba:	d0f8      	beq.n	8012aae <sbrk_aligned+0x22>
 8012abc:	1a21      	subs	r1, r4, r0
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f000 fed8 	bl	8013874 <_sbrk_r>
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	d1f2      	bne.n	8012aae <sbrk_aligned+0x22>
 8012ac8:	e7ef      	b.n	8012aaa <sbrk_aligned+0x1e>
 8012aca:	bf00      	nop
 8012acc:	2000e924 	.word	0x2000e924

08012ad0 <_malloc_r>:
 8012ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ad4:	1ccd      	adds	r5, r1, #3
 8012ad6:	f025 0503 	bic.w	r5, r5, #3
 8012ada:	3508      	adds	r5, #8
 8012adc:	2d0c      	cmp	r5, #12
 8012ade:	bf38      	it	cc
 8012ae0:	250c      	movcc	r5, #12
 8012ae2:	2d00      	cmp	r5, #0
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	db01      	blt.n	8012aec <_malloc_r+0x1c>
 8012ae8:	42a9      	cmp	r1, r5
 8012aea:	d904      	bls.n	8012af6 <_malloc_r+0x26>
 8012aec:	230c      	movs	r3, #12
 8012aee:	6033      	str	r3, [r6, #0]
 8012af0:	2000      	movs	r0, #0
 8012af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012bcc <_malloc_r+0xfc>
 8012afa:	f000 f869 	bl	8012bd0 <__malloc_lock>
 8012afe:	f8d8 3000 	ldr.w	r3, [r8]
 8012b02:	461c      	mov	r4, r3
 8012b04:	bb44      	cbnz	r4, 8012b58 <_malloc_r+0x88>
 8012b06:	4629      	mov	r1, r5
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f7ff ffbf 	bl	8012a8c <sbrk_aligned>
 8012b0e:	1c43      	adds	r3, r0, #1
 8012b10:	4604      	mov	r4, r0
 8012b12:	d158      	bne.n	8012bc6 <_malloc_r+0xf6>
 8012b14:	f8d8 4000 	ldr.w	r4, [r8]
 8012b18:	4627      	mov	r7, r4
 8012b1a:	2f00      	cmp	r7, #0
 8012b1c:	d143      	bne.n	8012ba6 <_malloc_r+0xd6>
 8012b1e:	2c00      	cmp	r4, #0
 8012b20:	d04b      	beq.n	8012bba <_malloc_r+0xea>
 8012b22:	6823      	ldr	r3, [r4, #0]
 8012b24:	4639      	mov	r1, r7
 8012b26:	4630      	mov	r0, r6
 8012b28:	eb04 0903 	add.w	r9, r4, r3
 8012b2c:	f000 fea2 	bl	8013874 <_sbrk_r>
 8012b30:	4581      	cmp	r9, r0
 8012b32:	d142      	bne.n	8012bba <_malloc_r+0xea>
 8012b34:	6821      	ldr	r1, [r4, #0]
 8012b36:	1a6d      	subs	r5, r5, r1
 8012b38:	4629      	mov	r1, r5
 8012b3a:	4630      	mov	r0, r6
 8012b3c:	f7ff ffa6 	bl	8012a8c <sbrk_aligned>
 8012b40:	3001      	adds	r0, #1
 8012b42:	d03a      	beq.n	8012bba <_malloc_r+0xea>
 8012b44:	6823      	ldr	r3, [r4, #0]
 8012b46:	442b      	add	r3, r5
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8012b4e:	685a      	ldr	r2, [r3, #4]
 8012b50:	bb62      	cbnz	r2, 8012bac <_malloc_r+0xdc>
 8012b52:	f8c8 7000 	str.w	r7, [r8]
 8012b56:	e00f      	b.n	8012b78 <_malloc_r+0xa8>
 8012b58:	6822      	ldr	r2, [r4, #0]
 8012b5a:	1b52      	subs	r2, r2, r5
 8012b5c:	d420      	bmi.n	8012ba0 <_malloc_r+0xd0>
 8012b5e:	2a0b      	cmp	r2, #11
 8012b60:	d917      	bls.n	8012b92 <_malloc_r+0xc2>
 8012b62:	1961      	adds	r1, r4, r5
 8012b64:	42a3      	cmp	r3, r4
 8012b66:	6025      	str	r5, [r4, #0]
 8012b68:	bf18      	it	ne
 8012b6a:	6059      	strne	r1, [r3, #4]
 8012b6c:	6863      	ldr	r3, [r4, #4]
 8012b6e:	bf08      	it	eq
 8012b70:	f8c8 1000 	streq.w	r1, [r8]
 8012b74:	5162      	str	r2, [r4, r5]
 8012b76:	604b      	str	r3, [r1, #4]
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f000 f82f 	bl	8012bdc <__malloc_unlock>
 8012b7e:	f104 000b 	add.w	r0, r4, #11
 8012b82:	1d23      	adds	r3, r4, #4
 8012b84:	f020 0007 	bic.w	r0, r0, #7
 8012b88:	1ac2      	subs	r2, r0, r3
 8012b8a:	bf1c      	itt	ne
 8012b8c:	1a1b      	subne	r3, r3, r0
 8012b8e:	50a3      	strne	r3, [r4, r2]
 8012b90:	e7af      	b.n	8012af2 <_malloc_r+0x22>
 8012b92:	6862      	ldr	r2, [r4, #4]
 8012b94:	42a3      	cmp	r3, r4
 8012b96:	bf0c      	ite	eq
 8012b98:	f8c8 2000 	streq.w	r2, [r8]
 8012b9c:	605a      	strne	r2, [r3, #4]
 8012b9e:	e7eb      	b.n	8012b78 <_malloc_r+0xa8>
 8012ba0:	4623      	mov	r3, r4
 8012ba2:	6864      	ldr	r4, [r4, #4]
 8012ba4:	e7ae      	b.n	8012b04 <_malloc_r+0x34>
 8012ba6:	463c      	mov	r4, r7
 8012ba8:	687f      	ldr	r7, [r7, #4]
 8012baa:	e7b6      	b.n	8012b1a <_malloc_r+0x4a>
 8012bac:	461a      	mov	r2, r3
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	42a3      	cmp	r3, r4
 8012bb2:	d1fb      	bne.n	8012bac <_malloc_r+0xdc>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	6053      	str	r3, [r2, #4]
 8012bb8:	e7de      	b.n	8012b78 <_malloc_r+0xa8>
 8012bba:	230c      	movs	r3, #12
 8012bbc:	6033      	str	r3, [r6, #0]
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f000 f80c 	bl	8012bdc <__malloc_unlock>
 8012bc4:	e794      	b.n	8012af0 <_malloc_r+0x20>
 8012bc6:	6005      	str	r5, [r0, #0]
 8012bc8:	e7d6      	b.n	8012b78 <_malloc_r+0xa8>
 8012bca:	bf00      	nop
 8012bcc:	2000e928 	.word	0x2000e928

08012bd0 <__malloc_lock>:
 8012bd0:	4801      	ldr	r0, [pc, #4]	@ (8012bd8 <__malloc_lock+0x8>)
 8012bd2:	f7ff b886 	b.w	8011ce2 <__retarget_lock_acquire_recursive>
 8012bd6:	bf00      	nop
 8012bd8:	2000e920 	.word	0x2000e920

08012bdc <__malloc_unlock>:
 8012bdc:	4801      	ldr	r0, [pc, #4]	@ (8012be4 <__malloc_unlock+0x8>)
 8012bde:	f7ff b881 	b.w	8011ce4 <__retarget_lock_release_recursive>
 8012be2:	bf00      	nop
 8012be4:	2000e920 	.word	0x2000e920

08012be8 <_Balloc>:
 8012be8:	b570      	push	{r4, r5, r6, lr}
 8012bea:	69c6      	ldr	r6, [r0, #28]
 8012bec:	4604      	mov	r4, r0
 8012bee:	460d      	mov	r5, r1
 8012bf0:	b976      	cbnz	r6, 8012c10 <_Balloc+0x28>
 8012bf2:	2010      	movs	r0, #16
 8012bf4:	f7ff ff42 	bl	8012a7c <malloc>
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	61e0      	str	r0, [r4, #28]
 8012bfc:	b920      	cbnz	r0, 8012c08 <_Balloc+0x20>
 8012bfe:	4b18      	ldr	r3, [pc, #96]	@ (8012c60 <_Balloc+0x78>)
 8012c00:	4818      	ldr	r0, [pc, #96]	@ (8012c64 <_Balloc+0x7c>)
 8012c02:	216b      	movs	r1, #107	@ 0x6b
 8012c04:	f7ff f886 	bl	8011d14 <__assert_func>
 8012c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c0c:	6006      	str	r6, [r0, #0]
 8012c0e:	60c6      	str	r6, [r0, #12]
 8012c10:	69e6      	ldr	r6, [r4, #28]
 8012c12:	68f3      	ldr	r3, [r6, #12]
 8012c14:	b183      	cbz	r3, 8012c38 <_Balloc+0x50>
 8012c16:	69e3      	ldr	r3, [r4, #28]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c1e:	b9b8      	cbnz	r0, 8012c50 <_Balloc+0x68>
 8012c20:	2101      	movs	r1, #1
 8012c22:	fa01 f605 	lsl.w	r6, r1, r5
 8012c26:	1d72      	adds	r2, r6, #5
 8012c28:	0092      	lsls	r2, r2, #2
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f000 fe39 	bl	80138a2 <_calloc_r>
 8012c30:	b160      	cbz	r0, 8012c4c <_Balloc+0x64>
 8012c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c36:	e00e      	b.n	8012c56 <_Balloc+0x6e>
 8012c38:	2221      	movs	r2, #33	@ 0x21
 8012c3a:	2104      	movs	r1, #4
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f000 fe30 	bl	80138a2 <_calloc_r>
 8012c42:	69e3      	ldr	r3, [r4, #28]
 8012c44:	60f0      	str	r0, [r6, #12]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d1e4      	bne.n	8012c16 <_Balloc+0x2e>
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	bd70      	pop	{r4, r5, r6, pc}
 8012c50:	6802      	ldr	r2, [r0, #0]
 8012c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c56:	2300      	movs	r3, #0
 8012c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c5c:	e7f7      	b.n	8012c4e <_Balloc+0x66>
 8012c5e:	bf00      	nop
 8012c60:	08014aba 	.word	0x08014aba
 8012c64:	08014b3a 	.word	0x08014b3a

08012c68 <_Bfree>:
 8012c68:	b570      	push	{r4, r5, r6, lr}
 8012c6a:	69c6      	ldr	r6, [r0, #28]
 8012c6c:	4605      	mov	r5, r0
 8012c6e:	460c      	mov	r4, r1
 8012c70:	b976      	cbnz	r6, 8012c90 <_Bfree+0x28>
 8012c72:	2010      	movs	r0, #16
 8012c74:	f7ff ff02 	bl	8012a7c <malloc>
 8012c78:	4602      	mov	r2, r0
 8012c7a:	61e8      	str	r0, [r5, #28]
 8012c7c:	b920      	cbnz	r0, 8012c88 <_Bfree+0x20>
 8012c7e:	4b09      	ldr	r3, [pc, #36]	@ (8012ca4 <_Bfree+0x3c>)
 8012c80:	4809      	ldr	r0, [pc, #36]	@ (8012ca8 <_Bfree+0x40>)
 8012c82:	218f      	movs	r1, #143	@ 0x8f
 8012c84:	f7ff f846 	bl	8011d14 <__assert_func>
 8012c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c8c:	6006      	str	r6, [r0, #0]
 8012c8e:	60c6      	str	r6, [r0, #12]
 8012c90:	b13c      	cbz	r4, 8012ca2 <_Bfree+0x3a>
 8012c92:	69eb      	ldr	r3, [r5, #28]
 8012c94:	6862      	ldr	r2, [r4, #4]
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c9c:	6021      	str	r1, [r4, #0]
 8012c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ca2:	bd70      	pop	{r4, r5, r6, pc}
 8012ca4:	08014aba 	.word	0x08014aba
 8012ca8:	08014b3a 	.word	0x08014b3a

08012cac <__multadd>:
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	690d      	ldr	r5, [r1, #16]
 8012cb2:	4607      	mov	r7, r0
 8012cb4:	460c      	mov	r4, r1
 8012cb6:	461e      	mov	r6, r3
 8012cb8:	f101 0c14 	add.w	ip, r1, #20
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8012cc2:	b299      	uxth	r1, r3
 8012cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8012cc8:	0c1e      	lsrs	r6, r3, #16
 8012cca:	0c0b      	lsrs	r3, r1, #16
 8012ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8012cd0:	b289      	uxth	r1, r1
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012cd8:	4285      	cmp	r5, r0
 8012cda:	f84c 1b04 	str.w	r1, [ip], #4
 8012cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012ce2:	dcec      	bgt.n	8012cbe <__multadd+0x12>
 8012ce4:	b30e      	cbz	r6, 8012d2a <__multadd+0x7e>
 8012ce6:	68a3      	ldr	r3, [r4, #8]
 8012ce8:	42ab      	cmp	r3, r5
 8012cea:	dc19      	bgt.n	8012d20 <__multadd+0x74>
 8012cec:	6861      	ldr	r1, [r4, #4]
 8012cee:	4638      	mov	r0, r7
 8012cf0:	3101      	adds	r1, #1
 8012cf2:	f7ff ff79 	bl	8012be8 <_Balloc>
 8012cf6:	4680      	mov	r8, r0
 8012cf8:	b928      	cbnz	r0, 8012d06 <__multadd+0x5a>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8012d30 <__multadd+0x84>)
 8012cfe:	480d      	ldr	r0, [pc, #52]	@ (8012d34 <__multadd+0x88>)
 8012d00:	21ba      	movs	r1, #186	@ 0xba
 8012d02:	f7ff f807 	bl	8011d14 <__assert_func>
 8012d06:	6922      	ldr	r2, [r4, #16]
 8012d08:	3202      	adds	r2, #2
 8012d0a:	f104 010c 	add.w	r1, r4, #12
 8012d0e:	0092      	lsls	r2, r2, #2
 8012d10:	300c      	adds	r0, #12
 8012d12:	f7fe fff0 	bl	8011cf6 <memcpy>
 8012d16:	4621      	mov	r1, r4
 8012d18:	4638      	mov	r0, r7
 8012d1a:	f7ff ffa5 	bl	8012c68 <_Bfree>
 8012d1e:	4644      	mov	r4, r8
 8012d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d24:	3501      	adds	r5, #1
 8012d26:	615e      	str	r6, [r3, #20]
 8012d28:	6125      	str	r5, [r4, #16]
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d30:	08014b29 	.word	0x08014b29
 8012d34:	08014b3a 	.word	0x08014b3a

08012d38 <__hi0bits>:
 8012d38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	bf36      	itet	cc
 8012d40:	0403      	lslcc	r3, r0, #16
 8012d42:	2000      	movcs	r0, #0
 8012d44:	2010      	movcc	r0, #16
 8012d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012d4a:	bf3c      	itt	cc
 8012d4c:	021b      	lslcc	r3, r3, #8
 8012d4e:	3008      	addcc	r0, #8
 8012d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d54:	bf3c      	itt	cc
 8012d56:	011b      	lslcc	r3, r3, #4
 8012d58:	3004      	addcc	r0, #4
 8012d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d5e:	bf3c      	itt	cc
 8012d60:	009b      	lslcc	r3, r3, #2
 8012d62:	3002      	addcc	r0, #2
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	db05      	blt.n	8012d74 <__hi0bits+0x3c>
 8012d68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012d6c:	f100 0001 	add.w	r0, r0, #1
 8012d70:	bf08      	it	eq
 8012d72:	2020      	moveq	r0, #32
 8012d74:	4770      	bx	lr

08012d76 <__lo0bits>:
 8012d76:	6803      	ldr	r3, [r0, #0]
 8012d78:	4602      	mov	r2, r0
 8012d7a:	f013 0007 	ands.w	r0, r3, #7
 8012d7e:	d00b      	beq.n	8012d98 <__lo0bits+0x22>
 8012d80:	07d9      	lsls	r1, r3, #31
 8012d82:	d421      	bmi.n	8012dc8 <__lo0bits+0x52>
 8012d84:	0798      	lsls	r0, r3, #30
 8012d86:	bf49      	itett	mi
 8012d88:	085b      	lsrmi	r3, r3, #1
 8012d8a:	089b      	lsrpl	r3, r3, #2
 8012d8c:	2001      	movmi	r0, #1
 8012d8e:	6013      	strmi	r3, [r2, #0]
 8012d90:	bf5c      	itt	pl
 8012d92:	6013      	strpl	r3, [r2, #0]
 8012d94:	2002      	movpl	r0, #2
 8012d96:	4770      	bx	lr
 8012d98:	b299      	uxth	r1, r3
 8012d9a:	b909      	cbnz	r1, 8012da0 <__lo0bits+0x2a>
 8012d9c:	0c1b      	lsrs	r3, r3, #16
 8012d9e:	2010      	movs	r0, #16
 8012da0:	b2d9      	uxtb	r1, r3
 8012da2:	b909      	cbnz	r1, 8012da8 <__lo0bits+0x32>
 8012da4:	3008      	adds	r0, #8
 8012da6:	0a1b      	lsrs	r3, r3, #8
 8012da8:	0719      	lsls	r1, r3, #28
 8012daa:	bf04      	itt	eq
 8012dac:	091b      	lsreq	r3, r3, #4
 8012dae:	3004      	addeq	r0, #4
 8012db0:	0799      	lsls	r1, r3, #30
 8012db2:	bf04      	itt	eq
 8012db4:	089b      	lsreq	r3, r3, #2
 8012db6:	3002      	addeq	r0, #2
 8012db8:	07d9      	lsls	r1, r3, #31
 8012dba:	d403      	bmi.n	8012dc4 <__lo0bits+0x4e>
 8012dbc:	085b      	lsrs	r3, r3, #1
 8012dbe:	f100 0001 	add.w	r0, r0, #1
 8012dc2:	d003      	beq.n	8012dcc <__lo0bits+0x56>
 8012dc4:	6013      	str	r3, [r2, #0]
 8012dc6:	4770      	bx	lr
 8012dc8:	2000      	movs	r0, #0
 8012dca:	4770      	bx	lr
 8012dcc:	2020      	movs	r0, #32
 8012dce:	4770      	bx	lr

08012dd0 <__i2b>:
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	2101      	movs	r1, #1
 8012dd6:	f7ff ff07 	bl	8012be8 <_Balloc>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	b928      	cbnz	r0, 8012dea <__i2b+0x1a>
 8012dde:	4b05      	ldr	r3, [pc, #20]	@ (8012df4 <__i2b+0x24>)
 8012de0:	4805      	ldr	r0, [pc, #20]	@ (8012df8 <__i2b+0x28>)
 8012de2:	f240 1145 	movw	r1, #325	@ 0x145
 8012de6:	f7fe ff95 	bl	8011d14 <__assert_func>
 8012dea:	2301      	movs	r3, #1
 8012dec:	6144      	str	r4, [r0, #20]
 8012dee:	6103      	str	r3, [r0, #16]
 8012df0:	bd10      	pop	{r4, pc}
 8012df2:	bf00      	nop
 8012df4:	08014b29 	.word	0x08014b29
 8012df8:	08014b3a 	.word	0x08014b3a

08012dfc <__multiply>:
 8012dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e00:	4614      	mov	r4, r2
 8012e02:	690a      	ldr	r2, [r1, #16]
 8012e04:	6923      	ldr	r3, [r4, #16]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	bfa8      	it	ge
 8012e0a:	4623      	movge	r3, r4
 8012e0c:	460f      	mov	r7, r1
 8012e0e:	bfa4      	itt	ge
 8012e10:	460c      	movge	r4, r1
 8012e12:	461f      	movge	r7, r3
 8012e14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012e18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012e1c:	68a3      	ldr	r3, [r4, #8]
 8012e1e:	6861      	ldr	r1, [r4, #4]
 8012e20:	eb0a 0609 	add.w	r6, sl, r9
 8012e24:	42b3      	cmp	r3, r6
 8012e26:	b085      	sub	sp, #20
 8012e28:	bfb8      	it	lt
 8012e2a:	3101      	addlt	r1, #1
 8012e2c:	f7ff fedc 	bl	8012be8 <_Balloc>
 8012e30:	b930      	cbnz	r0, 8012e40 <__multiply+0x44>
 8012e32:	4602      	mov	r2, r0
 8012e34:	4b44      	ldr	r3, [pc, #272]	@ (8012f48 <__multiply+0x14c>)
 8012e36:	4845      	ldr	r0, [pc, #276]	@ (8012f4c <__multiply+0x150>)
 8012e38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012e3c:	f7fe ff6a 	bl	8011d14 <__assert_func>
 8012e40:	f100 0514 	add.w	r5, r0, #20
 8012e44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012e48:	462b      	mov	r3, r5
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	4543      	cmp	r3, r8
 8012e4e:	d321      	bcc.n	8012e94 <__multiply+0x98>
 8012e50:	f107 0114 	add.w	r1, r7, #20
 8012e54:	f104 0214 	add.w	r2, r4, #20
 8012e58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012e5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012e60:	9302      	str	r3, [sp, #8]
 8012e62:	1b13      	subs	r3, r2, r4
 8012e64:	3b15      	subs	r3, #21
 8012e66:	f023 0303 	bic.w	r3, r3, #3
 8012e6a:	3304      	adds	r3, #4
 8012e6c:	f104 0715 	add.w	r7, r4, #21
 8012e70:	42ba      	cmp	r2, r7
 8012e72:	bf38      	it	cc
 8012e74:	2304      	movcc	r3, #4
 8012e76:	9301      	str	r3, [sp, #4]
 8012e78:	9b02      	ldr	r3, [sp, #8]
 8012e7a:	9103      	str	r1, [sp, #12]
 8012e7c:	428b      	cmp	r3, r1
 8012e7e:	d80c      	bhi.n	8012e9a <__multiply+0x9e>
 8012e80:	2e00      	cmp	r6, #0
 8012e82:	dd03      	ble.n	8012e8c <__multiply+0x90>
 8012e84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d05b      	beq.n	8012f44 <__multiply+0x148>
 8012e8c:	6106      	str	r6, [r0, #16]
 8012e8e:	b005      	add	sp, #20
 8012e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e94:	f843 2b04 	str.w	r2, [r3], #4
 8012e98:	e7d8      	b.n	8012e4c <__multiply+0x50>
 8012e9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8012e9e:	f1ba 0f00 	cmp.w	sl, #0
 8012ea2:	d024      	beq.n	8012eee <__multiply+0xf2>
 8012ea4:	f104 0e14 	add.w	lr, r4, #20
 8012ea8:	46a9      	mov	r9, r5
 8012eaa:	f04f 0c00 	mov.w	ip, #0
 8012eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012eb2:	f8d9 3000 	ldr.w	r3, [r9]
 8012eb6:	fa1f fb87 	uxth.w	fp, r7
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	fb0a 330b 	mla	r3, sl, fp, r3
 8012ec0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012ec4:	f8d9 7000 	ldr.w	r7, [r9]
 8012ec8:	4463      	add	r3, ip
 8012eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012ece:	fb0a c70b 	mla	r7, sl, fp, ip
 8012ed2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012ed6:	b29b      	uxth	r3, r3
 8012ed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012edc:	4572      	cmp	r2, lr
 8012ede:	f849 3b04 	str.w	r3, [r9], #4
 8012ee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012ee6:	d8e2      	bhi.n	8012eae <__multiply+0xb2>
 8012ee8:	9b01      	ldr	r3, [sp, #4]
 8012eea:	f845 c003 	str.w	ip, [r5, r3]
 8012eee:	9b03      	ldr	r3, [sp, #12]
 8012ef0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ef4:	3104      	adds	r1, #4
 8012ef6:	f1b9 0f00 	cmp.w	r9, #0
 8012efa:	d021      	beq.n	8012f40 <__multiply+0x144>
 8012efc:	682b      	ldr	r3, [r5, #0]
 8012efe:	f104 0c14 	add.w	ip, r4, #20
 8012f02:	46ae      	mov	lr, r5
 8012f04:	f04f 0a00 	mov.w	sl, #0
 8012f08:	f8bc b000 	ldrh.w	fp, [ip]
 8012f0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012f10:	fb09 770b 	mla	r7, r9, fp, r7
 8012f14:	4457      	add	r7, sl
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f1c:	f84e 3b04 	str.w	r3, [lr], #4
 8012f20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012f24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f28:	f8be 3000 	ldrh.w	r3, [lr]
 8012f2c:	fb09 330a 	mla	r3, r9, sl, r3
 8012f30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012f34:	4562      	cmp	r2, ip
 8012f36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f3a:	d8e5      	bhi.n	8012f08 <__multiply+0x10c>
 8012f3c:	9f01      	ldr	r7, [sp, #4]
 8012f3e:	51eb      	str	r3, [r5, r7]
 8012f40:	3504      	adds	r5, #4
 8012f42:	e799      	b.n	8012e78 <__multiply+0x7c>
 8012f44:	3e01      	subs	r6, #1
 8012f46:	e79b      	b.n	8012e80 <__multiply+0x84>
 8012f48:	08014b29 	.word	0x08014b29
 8012f4c:	08014b3a 	.word	0x08014b3a

08012f50 <__pow5mult>:
 8012f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f54:	4615      	mov	r5, r2
 8012f56:	f012 0203 	ands.w	r2, r2, #3
 8012f5a:	4607      	mov	r7, r0
 8012f5c:	460e      	mov	r6, r1
 8012f5e:	d007      	beq.n	8012f70 <__pow5mult+0x20>
 8012f60:	4c25      	ldr	r4, [pc, #148]	@ (8012ff8 <__pow5mult+0xa8>)
 8012f62:	3a01      	subs	r2, #1
 8012f64:	2300      	movs	r3, #0
 8012f66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012f6a:	f7ff fe9f 	bl	8012cac <__multadd>
 8012f6e:	4606      	mov	r6, r0
 8012f70:	10ad      	asrs	r5, r5, #2
 8012f72:	d03d      	beq.n	8012ff0 <__pow5mult+0xa0>
 8012f74:	69fc      	ldr	r4, [r7, #28]
 8012f76:	b97c      	cbnz	r4, 8012f98 <__pow5mult+0x48>
 8012f78:	2010      	movs	r0, #16
 8012f7a:	f7ff fd7f 	bl	8012a7c <malloc>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	61f8      	str	r0, [r7, #28]
 8012f82:	b928      	cbnz	r0, 8012f90 <__pow5mult+0x40>
 8012f84:	4b1d      	ldr	r3, [pc, #116]	@ (8012ffc <__pow5mult+0xac>)
 8012f86:	481e      	ldr	r0, [pc, #120]	@ (8013000 <__pow5mult+0xb0>)
 8012f88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012f8c:	f7fe fec2 	bl	8011d14 <__assert_func>
 8012f90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f94:	6004      	str	r4, [r0, #0]
 8012f96:	60c4      	str	r4, [r0, #12]
 8012f98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012f9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012fa0:	b94c      	cbnz	r4, 8012fb6 <__pow5mult+0x66>
 8012fa2:	f240 2171 	movw	r1, #625	@ 0x271
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7ff ff12 	bl	8012dd0 <__i2b>
 8012fac:	2300      	movs	r3, #0
 8012fae:	f8c8 0008 	str.w	r0, [r8, #8]
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	6003      	str	r3, [r0, #0]
 8012fb6:	f04f 0900 	mov.w	r9, #0
 8012fba:	07eb      	lsls	r3, r5, #31
 8012fbc:	d50a      	bpl.n	8012fd4 <__pow5mult+0x84>
 8012fbe:	4631      	mov	r1, r6
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	f7ff ff1a 	bl	8012dfc <__multiply>
 8012fc8:	4631      	mov	r1, r6
 8012fca:	4680      	mov	r8, r0
 8012fcc:	4638      	mov	r0, r7
 8012fce:	f7ff fe4b 	bl	8012c68 <_Bfree>
 8012fd2:	4646      	mov	r6, r8
 8012fd4:	106d      	asrs	r5, r5, #1
 8012fd6:	d00b      	beq.n	8012ff0 <__pow5mult+0xa0>
 8012fd8:	6820      	ldr	r0, [r4, #0]
 8012fda:	b938      	cbnz	r0, 8012fec <__pow5mult+0x9c>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	4621      	mov	r1, r4
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f7ff ff0b 	bl	8012dfc <__multiply>
 8012fe6:	6020      	str	r0, [r4, #0]
 8012fe8:	f8c0 9000 	str.w	r9, [r0]
 8012fec:	4604      	mov	r4, r0
 8012fee:	e7e4      	b.n	8012fba <__pow5mult+0x6a>
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ff6:	bf00      	nop
 8012ff8:	08014b94 	.word	0x08014b94
 8012ffc:	08014aba 	.word	0x08014aba
 8013000:	08014b3a 	.word	0x08014b3a

08013004 <__lshift>:
 8013004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013008:	460c      	mov	r4, r1
 801300a:	6849      	ldr	r1, [r1, #4]
 801300c:	6923      	ldr	r3, [r4, #16]
 801300e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013012:	68a3      	ldr	r3, [r4, #8]
 8013014:	4607      	mov	r7, r0
 8013016:	4691      	mov	r9, r2
 8013018:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801301c:	f108 0601 	add.w	r6, r8, #1
 8013020:	42b3      	cmp	r3, r6
 8013022:	db0b      	blt.n	801303c <__lshift+0x38>
 8013024:	4638      	mov	r0, r7
 8013026:	f7ff fddf 	bl	8012be8 <_Balloc>
 801302a:	4605      	mov	r5, r0
 801302c:	b948      	cbnz	r0, 8013042 <__lshift+0x3e>
 801302e:	4602      	mov	r2, r0
 8013030:	4b28      	ldr	r3, [pc, #160]	@ (80130d4 <__lshift+0xd0>)
 8013032:	4829      	ldr	r0, [pc, #164]	@ (80130d8 <__lshift+0xd4>)
 8013034:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013038:	f7fe fe6c 	bl	8011d14 <__assert_func>
 801303c:	3101      	adds	r1, #1
 801303e:	005b      	lsls	r3, r3, #1
 8013040:	e7ee      	b.n	8013020 <__lshift+0x1c>
 8013042:	2300      	movs	r3, #0
 8013044:	f100 0114 	add.w	r1, r0, #20
 8013048:	f100 0210 	add.w	r2, r0, #16
 801304c:	4618      	mov	r0, r3
 801304e:	4553      	cmp	r3, sl
 8013050:	db33      	blt.n	80130ba <__lshift+0xb6>
 8013052:	6920      	ldr	r0, [r4, #16]
 8013054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013058:	f104 0314 	add.w	r3, r4, #20
 801305c:	f019 091f 	ands.w	r9, r9, #31
 8013060:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013064:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013068:	d02b      	beq.n	80130c2 <__lshift+0xbe>
 801306a:	f1c9 0e20 	rsb	lr, r9, #32
 801306e:	468a      	mov	sl, r1
 8013070:	2200      	movs	r2, #0
 8013072:	6818      	ldr	r0, [r3, #0]
 8013074:	fa00 f009 	lsl.w	r0, r0, r9
 8013078:	4310      	orrs	r0, r2
 801307a:	f84a 0b04 	str.w	r0, [sl], #4
 801307e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013082:	459c      	cmp	ip, r3
 8013084:	fa22 f20e 	lsr.w	r2, r2, lr
 8013088:	d8f3      	bhi.n	8013072 <__lshift+0x6e>
 801308a:	ebac 0304 	sub.w	r3, ip, r4
 801308e:	3b15      	subs	r3, #21
 8013090:	f023 0303 	bic.w	r3, r3, #3
 8013094:	3304      	adds	r3, #4
 8013096:	f104 0015 	add.w	r0, r4, #21
 801309a:	4584      	cmp	ip, r0
 801309c:	bf38      	it	cc
 801309e:	2304      	movcc	r3, #4
 80130a0:	50ca      	str	r2, [r1, r3]
 80130a2:	b10a      	cbz	r2, 80130a8 <__lshift+0xa4>
 80130a4:	f108 0602 	add.w	r6, r8, #2
 80130a8:	3e01      	subs	r6, #1
 80130aa:	4638      	mov	r0, r7
 80130ac:	612e      	str	r6, [r5, #16]
 80130ae:	4621      	mov	r1, r4
 80130b0:	f7ff fdda 	bl	8012c68 <_Bfree>
 80130b4:	4628      	mov	r0, r5
 80130b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80130be:	3301      	adds	r3, #1
 80130c0:	e7c5      	b.n	801304e <__lshift+0x4a>
 80130c2:	3904      	subs	r1, #4
 80130c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80130c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80130cc:	459c      	cmp	ip, r3
 80130ce:	d8f9      	bhi.n	80130c4 <__lshift+0xc0>
 80130d0:	e7ea      	b.n	80130a8 <__lshift+0xa4>
 80130d2:	bf00      	nop
 80130d4:	08014b29 	.word	0x08014b29
 80130d8:	08014b3a 	.word	0x08014b3a

080130dc <__mcmp>:
 80130dc:	690a      	ldr	r2, [r1, #16]
 80130de:	4603      	mov	r3, r0
 80130e0:	6900      	ldr	r0, [r0, #16]
 80130e2:	1a80      	subs	r0, r0, r2
 80130e4:	b530      	push	{r4, r5, lr}
 80130e6:	d10e      	bne.n	8013106 <__mcmp+0x2a>
 80130e8:	3314      	adds	r3, #20
 80130ea:	3114      	adds	r1, #20
 80130ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80130f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80130f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80130f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80130fc:	4295      	cmp	r5, r2
 80130fe:	d003      	beq.n	8013108 <__mcmp+0x2c>
 8013100:	d205      	bcs.n	801310e <__mcmp+0x32>
 8013102:	f04f 30ff 	mov.w	r0, #4294967295
 8013106:	bd30      	pop	{r4, r5, pc}
 8013108:	42a3      	cmp	r3, r4
 801310a:	d3f3      	bcc.n	80130f4 <__mcmp+0x18>
 801310c:	e7fb      	b.n	8013106 <__mcmp+0x2a>
 801310e:	2001      	movs	r0, #1
 8013110:	e7f9      	b.n	8013106 <__mcmp+0x2a>
	...

08013114 <__mdiff>:
 8013114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013118:	4689      	mov	r9, r1
 801311a:	4606      	mov	r6, r0
 801311c:	4611      	mov	r1, r2
 801311e:	4648      	mov	r0, r9
 8013120:	4614      	mov	r4, r2
 8013122:	f7ff ffdb 	bl	80130dc <__mcmp>
 8013126:	1e05      	subs	r5, r0, #0
 8013128:	d112      	bne.n	8013150 <__mdiff+0x3c>
 801312a:	4629      	mov	r1, r5
 801312c:	4630      	mov	r0, r6
 801312e:	f7ff fd5b 	bl	8012be8 <_Balloc>
 8013132:	4602      	mov	r2, r0
 8013134:	b928      	cbnz	r0, 8013142 <__mdiff+0x2e>
 8013136:	4b3f      	ldr	r3, [pc, #252]	@ (8013234 <__mdiff+0x120>)
 8013138:	f240 2137 	movw	r1, #567	@ 0x237
 801313c:	483e      	ldr	r0, [pc, #248]	@ (8013238 <__mdiff+0x124>)
 801313e:	f7fe fde9 	bl	8011d14 <__assert_func>
 8013142:	2301      	movs	r3, #1
 8013144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013148:	4610      	mov	r0, r2
 801314a:	b003      	add	sp, #12
 801314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013150:	bfbc      	itt	lt
 8013152:	464b      	movlt	r3, r9
 8013154:	46a1      	movlt	r9, r4
 8013156:	4630      	mov	r0, r6
 8013158:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801315c:	bfba      	itte	lt
 801315e:	461c      	movlt	r4, r3
 8013160:	2501      	movlt	r5, #1
 8013162:	2500      	movge	r5, #0
 8013164:	f7ff fd40 	bl	8012be8 <_Balloc>
 8013168:	4602      	mov	r2, r0
 801316a:	b918      	cbnz	r0, 8013174 <__mdiff+0x60>
 801316c:	4b31      	ldr	r3, [pc, #196]	@ (8013234 <__mdiff+0x120>)
 801316e:	f240 2145 	movw	r1, #581	@ 0x245
 8013172:	e7e3      	b.n	801313c <__mdiff+0x28>
 8013174:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013178:	6926      	ldr	r6, [r4, #16]
 801317a:	60c5      	str	r5, [r0, #12]
 801317c:	f109 0310 	add.w	r3, r9, #16
 8013180:	f109 0514 	add.w	r5, r9, #20
 8013184:	f104 0e14 	add.w	lr, r4, #20
 8013188:	f100 0b14 	add.w	fp, r0, #20
 801318c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013190:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013194:	9301      	str	r3, [sp, #4]
 8013196:	46d9      	mov	r9, fp
 8013198:	f04f 0c00 	mov.w	ip, #0
 801319c:	9b01      	ldr	r3, [sp, #4]
 801319e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80131a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80131a6:	9301      	str	r3, [sp, #4]
 80131a8:	fa1f f38a 	uxth.w	r3, sl
 80131ac:	4619      	mov	r1, r3
 80131ae:	b283      	uxth	r3, r0
 80131b0:	1acb      	subs	r3, r1, r3
 80131b2:	0c00      	lsrs	r0, r0, #16
 80131b4:	4463      	add	r3, ip
 80131b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80131ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80131be:	b29b      	uxth	r3, r3
 80131c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80131c4:	4576      	cmp	r6, lr
 80131c6:	f849 3b04 	str.w	r3, [r9], #4
 80131ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80131ce:	d8e5      	bhi.n	801319c <__mdiff+0x88>
 80131d0:	1b33      	subs	r3, r6, r4
 80131d2:	3b15      	subs	r3, #21
 80131d4:	f023 0303 	bic.w	r3, r3, #3
 80131d8:	3415      	adds	r4, #21
 80131da:	3304      	adds	r3, #4
 80131dc:	42a6      	cmp	r6, r4
 80131de:	bf38      	it	cc
 80131e0:	2304      	movcc	r3, #4
 80131e2:	441d      	add	r5, r3
 80131e4:	445b      	add	r3, fp
 80131e6:	461e      	mov	r6, r3
 80131e8:	462c      	mov	r4, r5
 80131ea:	4544      	cmp	r4, r8
 80131ec:	d30e      	bcc.n	801320c <__mdiff+0xf8>
 80131ee:	f108 0103 	add.w	r1, r8, #3
 80131f2:	1b49      	subs	r1, r1, r5
 80131f4:	f021 0103 	bic.w	r1, r1, #3
 80131f8:	3d03      	subs	r5, #3
 80131fa:	45a8      	cmp	r8, r5
 80131fc:	bf38      	it	cc
 80131fe:	2100      	movcc	r1, #0
 8013200:	440b      	add	r3, r1
 8013202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013206:	b191      	cbz	r1, 801322e <__mdiff+0x11a>
 8013208:	6117      	str	r7, [r2, #16]
 801320a:	e79d      	b.n	8013148 <__mdiff+0x34>
 801320c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013210:	46e6      	mov	lr, ip
 8013212:	0c08      	lsrs	r0, r1, #16
 8013214:	fa1c fc81 	uxtah	ip, ip, r1
 8013218:	4471      	add	r1, lr
 801321a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801321e:	b289      	uxth	r1, r1
 8013220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013224:	f846 1b04 	str.w	r1, [r6], #4
 8013228:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801322c:	e7dd      	b.n	80131ea <__mdiff+0xd6>
 801322e:	3f01      	subs	r7, #1
 8013230:	e7e7      	b.n	8013202 <__mdiff+0xee>
 8013232:	bf00      	nop
 8013234:	08014b29 	.word	0x08014b29
 8013238:	08014b3a 	.word	0x08014b3a

0801323c <__d2b>:
 801323c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013240:	460f      	mov	r7, r1
 8013242:	2101      	movs	r1, #1
 8013244:	ec59 8b10 	vmov	r8, r9, d0
 8013248:	4616      	mov	r6, r2
 801324a:	f7ff fccd 	bl	8012be8 <_Balloc>
 801324e:	4604      	mov	r4, r0
 8013250:	b930      	cbnz	r0, 8013260 <__d2b+0x24>
 8013252:	4602      	mov	r2, r0
 8013254:	4b23      	ldr	r3, [pc, #140]	@ (80132e4 <__d2b+0xa8>)
 8013256:	4824      	ldr	r0, [pc, #144]	@ (80132e8 <__d2b+0xac>)
 8013258:	f240 310f 	movw	r1, #783	@ 0x30f
 801325c:	f7fe fd5a 	bl	8011d14 <__assert_func>
 8013260:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013268:	b10d      	cbz	r5, 801326e <__d2b+0x32>
 801326a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801326e:	9301      	str	r3, [sp, #4]
 8013270:	f1b8 0300 	subs.w	r3, r8, #0
 8013274:	d023      	beq.n	80132be <__d2b+0x82>
 8013276:	4668      	mov	r0, sp
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	f7ff fd7c 	bl	8012d76 <__lo0bits>
 801327e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013282:	b1d0      	cbz	r0, 80132ba <__d2b+0x7e>
 8013284:	f1c0 0320 	rsb	r3, r0, #32
 8013288:	fa02 f303 	lsl.w	r3, r2, r3
 801328c:	430b      	orrs	r3, r1
 801328e:	40c2      	lsrs	r2, r0
 8013290:	6163      	str	r3, [r4, #20]
 8013292:	9201      	str	r2, [sp, #4]
 8013294:	9b01      	ldr	r3, [sp, #4]
 8013296:	61a3      	str	r3, [r4, #24]
 8013298:	2b00      	cmp	r3, #0
 801329a:	bf0c      	ite	eq
 801329c:	2201      	moveq	r2, #1
 801329e:	2202      	movne	r2, #2
 80132a0:	6122      	str	r2, [r4, #16]
 80132a2:	b1a5      	cbz	r5, 80132ce <__d2b+0x92>
 80132a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80132a8:	4405      	add	r5, r0
 80132aa:	603d      	str	r5, [r7, #0]
 80132ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80132b0:	6030      	str	r0, [r6, #0]
 80132b2:	4620      	mov	r0, r4
 80132b4:	b003      	add	sp, #12
 80132b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132ba:	6161      	str	r1, [r4, #20]
 80132bc:	e7ea      	b.n	8013294 <__d2b+0x58>
 80132be:	a801      	add	r0, sp, #4
 80132c0:	f7ff fd59 	bl	8012d76 <__lo0bits>
 80132c4:	9b01      	ldr	r3, [sp, #4]
 80132c6:	6163      	str	r3, [r4, #20]
 80132c8:	3020      	adds	r0, #32
 80132ca:	2201      	movs	r2, #1
 80132cc:	e7e8      	b.n	80132a0 <__d2b+0x64>
 80132ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80132d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80132d6:	6038      	str	r0, [r7, #0]
 80132d8:	6918      	ldr	r0, [r3, #16]
 80132da:	f7ff fd2d 	bl	8012d38 <__hi0bits>
 80132de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80132e2:	e7e5      	b.n	80132b0 <__d2b+0x74>
 80132e4:	08014b29 	.word	0x08014b29
 80132e8:	08014b3a 	.word	0x08014b3a

080132ec <__ssputs_r>:
 80132ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132f0:	688e      	ldr	r6, [r1, #8]
 80132f2:	461f      	mov	r7, r3
 80132f4:	42be      	cmp	r6, r7
 80132f6:	680b      	ldr	r3, [r1, #0]
 80132f8:	4682      	mov	sl, r0
 80132fa:	460c      	mov	r4, r1
 80132fc:	4690      	mov	r8, r2
 80132fe:	d82d      	bhi.n	801335c <__ssputs_r+0x70>
 8013300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013304:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013308:	d026      	beq.n	8013358 <__ssputs_r+0x6c>
 801330a:	6965      	ldr	r5, [r4, #20]
 801330c:	6909      	ldr	r1, [r1, #16]
 801330e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013312:	eba3 0901 	sub.w	r9, r3, r1
 8013316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801331a:	1c7b      	adds	r3, r7, #1
 801331c:	444b      	add	r3, r9
 801331e:	106d      	asrs	r5, r5, #1
 8013320:	429d      	cmp	r5, r3
 8013322:	bf38      	it	cc
 8013324:	461d      	movcc	r5, r3
 8013326:	0553      	lsls	r3, r2, #21
 8013328:	d527      	bpl.n	801337a <__ssputs_r+0x8e>
 801332a:	4629      	mov	r1, r5
 801332c:	f7ff fbd0 	bl	8012ad0 <_malloc_r>
 8013330:	4606      	mov	r6, r0
 8013332:	b360      	cbz	r0, 801338e <__ssputs_r+0xa2>
 8013334:	6921      	ldr	r1, [r4, #16]
 8013336:	464a      	mov	r2, r9
 8013338:	f7fe fcdd 	bl	8011cf6 <memcpy>
 801333c:	89a3      	ldrh	r3, [r4, #12]
 801333e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013346:	81a3      	strh	r3, [r4, #12]
 8013348:	6126      	str	r6, [r4, #16]
 801334a:	6165      	str	r5, [r4, #20]
 801334c:	444e      	add	r6, r9
 801334e:	eba5 0509 	sub.w	r5, r5, r9
 8013352:	6026      	str	r6, [r4, #0]
 8013354:	60a5      	str	r5, [r4, #8]
 8013356:	463e      	mov	r6, r7
 8013358:	42be      	cmp	r6, r7
 801335a:	d900      	bls.n	801335e <__ssputs_r+0x72>
 801335c:	463e      	mov	r6, r7
 801335e:	6820      	ldr	r0, [r4, #0]
 8013360:	4632      	mov	r2, r6
 8013362:	4641      	mov	r1, r8
 8013364:	f000 fa6c 	bl	8013840 <memmove>
 8013368:	68a3      	ldr	r3, [r4, #8]
 801336a:	1b9b      	subs	r3, r3, r6
 801336c:	60a3      	str	r3, [r4, #8]
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	4433      	add	r3, r6
 8013372:	6023      	str	r3, [r4, #0]
 8013374:	2000      	movs	r0, #0
 8013376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801337a:	462a      	mov	r2, r5
 801337c:	f000 fab7 	bl	80138ee <_realloc_r>
 8013380:	4606      	mov	r6, r0
 8013382:	2800      	cmp	r0, #0
 8013384:	d1e0      	bne.n	8013348 <__ssputs_r+0x5c>
 8013386:	6921      	ldr	r1, [r4, #16]
 8013388:	4650      	mov	r0, sl
 801338a:	f7ff fb2d 	bl	80129e8 <_free_r>
 801338e:	230c      	movs	r3, #12
 8013390:	f8ca 3000 	str.w	r3, [sl]
 8013394:	89a3      	ldrh	r3, [r4, #12]
 8013396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801339a:	81a3      	strh	r3, [r4, #12]
 801339c:	f04f 30ff 	mov.w	r0, #4294967295
 80133a0:	e7e9      	b.n	8013376 <__ssputs_r+0x8a>
	...

080133a4 <_svfiprintf_r>:
 80133a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a8:	4698      	mov	r8, r3
 80133aa:	898b      	ldrh	r3, [r1, #12]
 80133ac:	061b      	lsls	r3, r3, #24
 80133ae:	b09d      	sub	sp, #116	@ 0x74
 80133b0:	4607      	mov	r7, r0
 80133b2:	460d      	mov	r5, r1
 80133b4:	4614      	mov	r4, r2
 80133b6:	d510      	bpl.n	80133da <_svfiprintf_r+0x36>
 80133b8:	690b      	ldr	r3, [r1, #16]
 80133ba:	b973      	cbnz	r3, 80133da <_svfiprintf_r+0x36>
 80133bc:	2140      	movs	r1, #64	@ 0x40
 80133be:	f7ff fb87 	bl	8012ad0 <_malloc_r>
 80133c2:	6028      	str	r0, [r5, #0]
 80133c4:	6128      	str	r0, [r5, #16]
 80133c6:	b930      	cbnz	r0, 80133d6 <_svfiprintf_r+0x32>
 80133c8:	230c      	movs	r3, #12
 80133ca:	603b      	str	r3, [r7, #0]
 80133cc:	f04f 30ff 	mov.w	r0, #4294967295
 80133d0:	b01d      	add	sp, #116	@ 0x74
 80133d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d6:	2340      	movs	r3, #64	@ 0x40
 80133d8:	616b      	str	r3, [r5, #20]
 80133da:	2300      	movs	r3, #0
 80133dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80133de:	2320      	movs	r3, #32
 80133e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80133e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80133e8:	2330      	movs	r3, #48	@ 0x30
 80133ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013588 <_svfiprintf_r+0x1e4>
 80133ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80133f2:	f04f 0901 	mov.w	r9, #1
 80133f6:	4623      	mov	r3, r4
 80133f8:	469a      	mov	sl, r3
 80133fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133fe:	b10a      	cbz	r2, 8013404 <_svfiprintf_r+0x60>
 8013400:	2a25      	cmp	r2, #37	@ 0x25
 8013402:	d1f9      	bne.n	80133f8 <_svfiprintf_r+0x54>
 8013404:	ebba 0b04 	subs.w	fp, sl, r4
 8013408:	d00b      	beq.n	8013422 <_svfiprintf_r+0x7e>
 801340a:	465b      	mov	r3, fp
 801340c:	4622      	mov	r2, r4
 801340e:	4629      	mov	r1, r5
 8013410:	4638      	mov	r0, r7
 8013412:	f7ff ff6b 	bl	80132ec <__ssputs_r>
 8013416:	3001      	adds	r0, #1
 8013418:	f000 80a7 	beq.w	801356a <_svfiprintf_r+0x1c6>
 801341c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801341e:	445a      	add	r2, fp
 8013420:	9209      	str	r2, [sp, #36]	@ 0x24
 8013422:	f89a 3000 	ldrb.w	r3, [sl]
 8013426:	2b00      	cmp	r3, #0
 8013428:	f000 809f 	beq.w	801356a <_svfiprintf_r+0x1c6>
 801342c:	2300      	movs	r3, #0
 801342e:	f04f 32ff 	mov.w	r2, #4294967295
 8013432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013436:	f10a 0a01 	add.w	sl, sl, #1
 801343a:	9304      	str	r3, [sp, #16]
 801343c:	9307      	str	r3, [sp, #28]
 801343e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013442:	931a      	str	r3, [sp, #104]	@ 0x68
 8013444:	4654      	mov	r4, sl
 8013446:	2205      	movs	r2, #5
 8013448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801344c:	484e      	ldr	r0, [pc, #312]	@ (8013588 <_svfiprintf_r+0x1e4>)
 801344e:	f7ec febf 	bl	80001d0 <memchr>
 8013452:	9a04      	ldr	r2, [sp, #16]
 8013454:	b9d8      	cbnz	r0, 801348e <_svfiprintf_r+0xea>
 8013456:	06d0      	lsls	r0, r2, #27
 8013458:	bf44      	itt	mi
 801345a:	2320      	movmi	r3, #32
 801345c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013460:	0711      	lsls	r1, r2, #28
 8013462:	bf44      	itt	mi
 8013464:	232b      	movmi	r3, #43	@ 0x2b
 8013466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801346a:	f89a 3000 	ldrb.w	r3, [sl]
 801346e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013470:	d015      	beq.n	801349e <_svfiprintf_r+0xfa>
 8013472:	9a07      	ldr	r2, [sp, #28]
 8013474:	4654      	mov	r4, sl
 8013476:	2000      	movs	r0, #0
 8013478:	f04f 0c0a 	mov.w	ip, #10
 801347c:	4621      	mov	r1, r4
 801347e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013482:	3b30      	subs	r3, #48	@ 0x30
 8013484:	2b09      	cmp	r3, #9
 8013486:	d94b      	bls.n	8013520 <_svfiprintf_r+0x17c>
 8013488:	b1b0      	cbz	r0, 80134b8 <_svfiprintf_r+0x114>
 801348a:	9207      	str	r2, [sp, #28]
 801348c:	e014      	b.n	80134b8 <_svfiprintf_r+0x114>
 801348e:	eba0 0308 	sub.w	r3, r0, r8
 8013492:	fa09 f303 	lsl.w	r3, r9, r3
 8013496:	4313      	orrs	r3, r2
 8013498:	9304      	str	r3, [sp, #16]
 801349a:	46a2      	mov	sl, r4
 801349c:	e7d2      	b.n	8013444 <_svfiprintf_r+0xa0>
 801349e:	9b03      	ldr	r3, [sp, #12]
 80134a0:	1d19      	adds	r1, r3, #4
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	9103      	str	r1, [sp, #12]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	bfbb      	ittet	lt
 80134aa:	425b      	neglt	r3, r3
 80134ac:	f042 0202 	orrlt.w	r2, r2, #2
 80134b0:	9307      	strge	r3, [sp, #28]
 80134b2:	9307      	strlt	r3, [sp, #28]
 80134b4:	bfb8      	it	lt
 80134b6:	9204      	strlt	r2, [sp, #16]
 80134b8:	7823      	ldrb	r3, [r4, #0]
 80134ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80134bc:	d10a      	bne.n	80134d4 <_svfiprintf_r+0x130>
 80134be:	7863      	ldrb	r3, [r4, #1]
 80134c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80134c2:	d132      	bne.n	801352a <_svfiprintf_r+0x186>
 80134c4:	9b03      	ldr	r3, [sp, #12]
 80134c6:	1d1a      	adds	r2, r3, #4
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	9203      	str	r2, [sp, #12]
 80134cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80134d0:	3402      	adds	r4, #2
 80134d2:	9305      	str	r3, [sp, #20]
 80134d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013598 <_svfiprintf_r+0x1f4>
 80134d8:	7821      	ldrb	r1, [r4, #0]
 80134da:	2203      	movs	r2, #3
 80134dc:	4650      	mov	r0, sl
 80134de:	f7ec fe77 	bl	80001d0 <memchr>
 80134e2:	b138      	cbz	r0, 80134f4 <_svfiprintf_r+0x150>
 80134e4:	9b04      	ldr	r3, [sp, #16]
 80134e6:	eba0 000a 	sub.w	r0, r0, sl
 80134ea:	2240      	movs	r2, #64	@ 0x40
 80134ec:	4082      	lsls	r2, r0
 80134ee:	4313      	orrs	r3, r2
 80134f0:	3401      	adds	r4, #1
 80134f2:	9304      	str	r3, [sp, #16]
 80134f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134f8:	4824      	ldr	r0, [pc, #144]	@ (801358c <_svfiprintf_r+0x1e8>)
 80134fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80134fe:	2206      	movs	r2, #6
 8013500:	f7ec fe66 	bl	80001d0 <memchr>
 8013504:	2800      	cmp	r0, #0
 8013506:	d036      	beq.n	8013576 <_svfiprintf_r+0x1d2>
 8013508:	4b21      	ldr	r3, [pc, #132]	@ (8013590 <_svfiprintf_r+0x1ec>)
 801350a:	bb1b      	cbnz	r3, 8013554 <_svfiprintf_r+0x1b0>
 801350c:	9b03      	ldr	r3, [sp, #12]
 801350e:	3307      	adds	r3, #7
 8013510:	f023 0307 	bic.w	r3, r3, #7
 8013514:	3308      	adds	r3, #8
 8013516:	9303      	str	r3, [sp, #12]
 8013518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801351a:	4433      	add	r3, r6
 801351c:	9309      	str	r3, [sp, #36]	@ 0x24
 801351e:	e76a      	b.n	80133f6 <_svfiprintf_r+0x52>
 8013520:	fb0c 3202 	mla	r2, ip, r2, r3
 8013524:	460c      	mov	r4, r1
 8013526:	2001      	movs	r0, #1
 8013528:	e7a8      	b.n	801347c <_svfiprintf_r+0xd8>
 801352a:	2300      	movs	r3, #0
 801352c:	3401      	adds	r4, #1
 801352e:	9305      	str	r3, [sp, #20]
 8013530:	4619      	mov	r1, r3
 8013532:	f04f 0c0a 	mov.w	ip, #10
 8013536:	4620      	mov	r0, r4
 8013538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801353c:	3a30      	subs	r2, #48	@ 0x30
 801353e:	2a09      	cmp	r2, #9
 8013540:	d903      	bls.n	801354a <_svfiprintf_r+0x1a6>
 8013542:	2b00      	cmp	r3, #0
 8013544:	d0c6      	beq.n	80134d4 <_svfiprintf_r+0x130>
 8013546:	9105      	str	r1, [sp, #20]
 8013548:	e7c4      	b.n	80134d4 <_svfiprintf_r+0x130>
 801354a:	fb0c 2101 	mla	r1, ip, r1, r2
 801354e:	4604      	mov	r4, r0
 8013550:	2301      	movs	r3, #1
 8013552:	e7f0      	b.n	8013536 <_svfiprintf_r+0x192>
 8013554:	ab03      	add	r3, sp, #12
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	462a      	mov	r2, r5
 801355a:	4b0e      	ldr	r3, [pc, #56]	@ (8013594 <_svfiprintf_r+0x1f0>)
 801355c:	a904      	add	r1, sp, #16
 801355e:	4638      	mov	r0, r7
 8013560:	f7fd fdd8 	bl	8011114 <_printf_float>
 8013564:	1c42      	adds	r2, r0, #1
 8013566:	4606      	mov	r6, r0
 8013568:	d1d6      	bne.n	8013518 <_svfiprintf_r+0x174>
 801356a:	89ab      	ldrh	r3, [r5, #12]
 801356c:	065b      	lsls	r3, r3, #25
 801356e:	f53f af2d 	bmi.w	80133cc <_svfiprintf_r+0x28>
 8013572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013574:	e72c      	b.n	80133d0 <_svfiprintf_r+0x2c>
 8013576:	ab03      	add	r3, sp, #12
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	462a      	mov	r2, r5
 801357c:	4b05      	ldr	r3, [pc, #20]	@ (8013594 <_svfiprintf_r+0x1f0>)
 801357e:	a904      	add	r1, sp, #16
 8013580:	4638      	mov	r0, r7
 8013582:	f7fe f85f 	bl	8011644 <_printf_i>
 8013586:	e7ed      	b.n	8013564 <_svfiprintf_r+0x1c0>
 8013588:	08014c90 	.word	0x08014c90
 801358c:	08014c9a 	.word	0x08014c9a
 8013590:	08011115 	.word	0x08011115
 8013594:	080132ed 	.word	0x080132ed
 8013598:	08014c96 	.word	0x08014c96

0801359c <__sflush_r>:
 801359c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a4:	0716      	lsls	r6, r2, #28
 80135a6:	4605      	mov	r5, r0
 80135a8:	460c      	mov	r4, r1
 80135aa:	d454      	bmi.n	8013656 <__sflush_r+0xba>
 80135ac:	684b      	ldr	r3, [r1, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dc02      	bgt.n	80135b8 <__sflush_r+0x1c>
 80135b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	dd48      	ble.n	801364a <__sflush_r+0xae>
 80135b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135ba:	2e00      	cmp	r6, #0
 80135bc:	d045      	beq.n	801364a <__sflush_r+0xae>
 80135be:	2300      	movs	r3, #0
 80135c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80135c4:	682f      	ldr	r7, [r5, #0]
 80135c6:	6a21      	ldr	r1, [r4, #32]
 80135c8:	602b      	str	r3, [r5, #0]
 80135ca:	d030      	beq.n	801362e <__sflush_r+0x92>
 80135cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80135ce:	89a3      	ldrh	r3, [r4, #12]
 80135d0:	0759      	lsls	r1, r3, #29
 80135d2:	d505      	bpl.n	80135e0 <__sflush_r+0x44>
 80135d4:	6863      	ldr	r3, [r4, #4]
 80135d6:	1ad2      	subs	r2, r2, r3
 80135d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80135da:	b10b      	cbz	r3, 80135e0 <__sflush_r+0x44>
 80135dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80135de:	1ad2      	subs	r2, r2, r3
 80135e0:	2300      	movs	r3, #0
 80135e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135e4:	6a21      	ldr	r1, [r4, #32]
 80135e6:	4628      	mov	r0, r5
 80135e8:	47b0      	blx	r6
 80135ea:	1c43      	adds	r3, r0, #1
 80135ec:	89a3      	ldrh	r3, [r4, #12]
 80135ee:	d106      	bne.n	80135fe <__sflush_r+0x62>
 80135f0:	6829      	ldr	r1, [r5, #0]
 80135f2:	291d      	cmp	r1, #29
 80135f4:	d82b      	bhi.n	801364e <__sflush_r+0xb2>
 80135f6:	4a2a      	ldr	r2, [pc, #168]	@ (80136a0 <__sflush_r+0x104>)
 80135f8:	410a      	asrs	r2, r1
 80135fa:	07d6      	lsls	r6, r2, #31
 80135fc:	d427      	bmi.n	801364e <__sflush_r+0xb2>
 80135fe:	2200      	movs	r2, #0
 8013600:	6062      	str	r2, [r4, #4]
 8013602:	04d9      	lsls	r1, r3, #19
 8013604:	6922      	ldr	r2, [r4, #16]
 8013606:	6022      	str	r2, [r4, #0]
 8013608:	d504      	bpl.n	8013614 <__sflush_r+0x78>
 801360a:	1c42      	adds	r2, r0, #1
 801360c:	d101      	bne.n	8013612 <__sflush_r+0x76>
 801360e:	682b      	ldr	r3, [r5, #0]
 8013610:	b903      	cbnz	r3, 8013614 <__sflush_r+0x78>
 8013612:	6560      	str	r0, [r4, #84]	@ 0x54
 8013614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013616:	602f      	str	r7, [r5, #0]
 8013618:	b1b9      	cbz	r1, 801364a <__sflush_r+0xae>
 801361a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801361e:	4299      	cmp	r1, r3
 8013620:	d002      	beq.n	8013628 <__sflush_r+0x8c>
 8013622:	4628      	mov	r0, r5
 8013624:	f7ff f9e0 	bl	80129e8 <_free_r>
 8013628:	2300      	movs	r3, #0
 801362a:	6363      	str	r3, [r4, #52]	@ 0x34
 801362c:	e00d      	b.n	801364a <__sflush_r+0xae>
 801362e:	2301      	movs	r3, #1
 8013630:	4628      	mov	r0, r5
 8013632:	47b0      	blx	r6
 8013634:	4602      	mov	r2, r0
 8013636:	1c50      	adds	r0, r2, #1
 8013638:	d1c9      	bne.n	80135ce <__sflush_r+0x32>
 801363a:	682b      	ldr	r3, [r5, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d0c6      	beq.n	80135ce <__sflush_r+0x32>
 8013640:	2b1d      	cmp	r3, #29
 8013642:	d001      	beq.n	8013648 <__sflush_r+0xac>
 8013644:	2b16      	cmp	r3, #22
 8013646:	d11e      	bne.n	8013686 <__sflush_r+0xea>
 8013648:	602f      	str	r7, [r5, #0]
 801364a:	2000      	movs	r0, #0
 801364c:	e022      	b.n	8013694 <__sflush_r+0xf8>
 801364e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013652:	b21b      	sxth	r3, r3
 8013654:	e01b      	b.n	801368e <__sflush_r+0xf2>
 8013656:	690f      	ldr	r7, [r1, #16]
 8013658:	2f00      	cmp	r7, #0
 801365a:	d0f6      	beq.n	801364a <__sflush_r+0xae>
 801365c:	0793      	lsls	r3, r2, #30
 801365e:	680e      	ldr	r6, [r1, #0]
 8013660:	bf08      	it	eq
 8013662:	694b      	ldreq	r3, [r1, #20]
 8013664:	600f      	str	r7, [r1, #0]
 8013666:	bf18      	it	ne
 8013668:	2300      	movne	r3, #0
 801366a:	eba6 0807 	sub.w	r8, r6, r7
 801366e:	608b      	str	r3, [r1, #8]
 8013670:	f1b8 0f00 	cmp.w	r8, #0
 8013674:	dde9      	ble.n	801364a <__sflush_r+0xae>
 8013676:	6a21      	ldr	r1, [r4, #32]
 8013678:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801367a:	4643      	mov	r3, r8
 801367c:	463a      	mov	r2, r7
 801367e:	4628      	mov	r0, r5
 8013680:	47b0      	blx	r6
 8013682:	2800      	cmp	r0, #0
 8013684:	dc08      	bgt.n	8013698 <__sflush_r+0xfc>
 8013686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801368a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801368e:	81a3      	strh	r3, [r4, #12]
 8013690:	f04f 30ff 	mov.w	r0, #4294967295
 8013694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013698:	4407      	add	r7, r0
 801369a:	eba8 0800 	sub.w	r8, r8, r0
 801369e:	e7e7      	b.n	8013670 <__sflush_r+0xd4>
 80136a0:	dfbffffe 	.word	0xdfbffffe

080136a4 <_fflush_r>:
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	690b      	ldr	r3, [r1, #16]
 80136a8:	4605      	mov	r5, r0
 80136aa:	460c      	mov	r4, r1
 80136ac:	b913      	cbnz	r3, 80136b4 <_fflush_r+0x10>
 80136ae:	2500      	movs	r5, #0
 80136b0:	4628      	mov	r0, r5
 80136b2:	bd38      	pop	{r3, r4, r5, pc}
 80136b4:	b118      	cbz	r0, 80136be <_fflush_r+0x1a>
 80136b6:	6a03      	ldr	r3, [r0, #32]
 80136b8:	b90b      	cbnz	r3, 80136be <_fflush_r+0x1a>
 80136ba:	f7fe f96f 	bl	801199c <__sinit>
 80136be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d0f3      	beq.n	80136ae <_fflush_r+0xa>
 80136c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80136c8:	07d0      	lsls	r0, r2, #31
 80136ca:	d404      	bmi.n	80136d6 <_fflush_r+0x32>
 80136cc:	0599      	lsls	r1, r3, #22
 80136ce:	d402      	bmi.n	80136d6 <_fflush_r+0x32>
 80136d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136d2:	f7fe fb06 	bl	8011ce2 <__retarget_lock_acquire_recursive>
 80136d6:	4628      	mov	r0, r5
 80136d8:	4621      	mov	r1, r4
 80136da:	f7ff ff5f 	bl	801359c <__sflush_r>
 80136de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136e0:	07da      	lsls	r2, r3, #31
 80136e2:	4605      	mov	r5, r0
 80136e4:	d4e4      	bmi.n	80136b0 <_fflush_r+0xc>
 80136e6:	89a3      	ldrh	r3, [r4, #12]
 80136e8:	059b      	lsls	r3, r3, #22
 80136ea:	d4e1      	bmi.n	80136b0 <_fflush_r+0xc>
 80136ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136ee:	f7fe faf9 	bl	8011ce4 <__retarget_lock_release_recursive>
 80136f2:	e7dd      	b.n	80136b0 <_fflush_r+0xc>

080136f4 <fiprintf>:
 80136f4:	b40e      	push	{r1, r2, r3}
 80136f6:	b503      	push	{r0, r1, lr}
 80136f8:	4601      	mov	r1, r0
 80136fa:	ab03      	add	r3, sp, #12
 80136fc:	4805      	ldr	r0, [pc, #20]	@ (8013714 <fiprintf+0x20>)
 80136fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013702:	6800      	ldr	r0, [r0, #0]
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	f000 f957 	bl	80139b8 <_vfiprintf_r>
 801370a:	b002      	add	sp, #8
 801370c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013710:	b003      	add	sp, #12
 8013712:	4770      	bx	lr
 8013714:	2000007c 	.word	0x2000007c

08013718 <__swbuf_r>:
 8013718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371a:	460e      	mov	r6, r1
 801371c:	4614      	mov	r4, r2
 801371e:	4605      	mov	r5, r0
 8013720:	b118      	cbz	r0, 801372a <__swbuf_r+0x12>
 8013722:	6a03      	ldr	r3, [r0, #32]
 8013724:	b90b      	cbnz	r3, 801372a <__swbuf_r+0x12>
 8013726:	f7fe f939 	bl	801199c <__sinit>
 801372a:	69a3      	ldr	r3, [r4, #24]
 801372c:	60a3      	str	r3, [r4, #8]
 801372e:	89a3      	ldrh	r3, [r4, #12]
 8013730:	071a      	lsls	r2, r3, #28
 8013732:	d501      	bpl.n	8013738 <__swbuf_r+0x20>
 8013734:	6923      	ldr	r3, [r4, #16]
 8013736:	b943      	cbnz	r3, 801374a <__swbuf_r+0x32>
 8013738:	4621      	mov	r1, r4
 801373a:	4628      	mov	r0, r5
 801373c:	f000 f82a 	bl	8013794 <__swsetup_r>
 8013740:	b118      	cbz	r0, 801374a <__swbuf_r+0x32>
 8013742:	f04f 37ff 	mov.w	r7, #4294967295
 8013746:	4638      	mov	r0, r7
 8013748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	6922      	ldr	r2, [r4, #16]
 801374e:	1a98      	subs	r0, r3, r2
 8013750:	6963      	ldr	r3, [r4, #20]
 8013752:	b2f6      	uxtb	r6, r6
 8013754:	4283      	cmp	r3, r0
 8013756:	4637      	mov	r7, r6
 8013758:	dc05      	bgt.n	8013766 <__swbuf_r+0x4e>
 801375a:	4621      	mov	r1, r4
 801375c:	4628      	mov	r0, r5
 801375e:	f7ff ffa1 	bl	80136a4 <_fflush_r>
 8013762:	2800      	cmp	r0, #0
 8013764:	d1ed      	bne.n	8013742 <__swbuf_r+0x2a>
 8013766:	68a3      	ldr	r3, [r4, #8]
 8013768:	3b01      	subs	r3, #1
 801376a:	60a3      	str	r3, [r4, #8]
 801376c:	6823      	ldr	r3, [r4, #0]
 801376e:	1c5a      	adds	r2, r3, #1
 8013770:	6022      	str	r2, [r4, #0]
 8013772:	701e      	strb	r6, [r3, #0]
 8013774:	6962      	ldr	r2, [r4, #20]
 8013776:	1c43      	adds	r3, r0, #1
 8013778:	429a      	cmp	r2, r3
 801377a:	d004      	beq.n	8013786 <__swbuf_r+0x6e>
 801377c:	89a3      	ldrh	r3, [r4, #12]
 801377e:	07db      	lsls	r3, r3, #31
 8013780:	d5e1      	bpl.n	8013746 <__swbuf_r+0x2e>
 8013782:	2e0a      	cmp	r6, #10
 8013784:	d1df      	bne.n	8013746 <__swbuf_r+0x2e>
 8013786:	4621      	mov	r1, r4
 8013788:	4628      	mov	r0, r5
 801378a:	f7ff ff8b 	bl	80136a4 <_fflush_r>
 801378e:	2800      	cmp	r0, #0
 8013790:	d0d9      	beq.n	8013746 <__swbuf_r+0x2e>
 8013792:	e7d6      	b.n	8013742 <__swbuf_r+0x2a>

08013794 <__swsetup_r>:
 8013794:	b538      	push	{r3, r4, r5, lr}
 8013796:	4b29      	ldr	r3, [pc, #164]	@ (801383c <__swsetup_r+0xa8>)
 8013798:	4605      	mov	r5, r0
 801379a:	6818      	ldr	r0, [r3, #0]
 801379c:	460c      	mov	r4, r1
 801379e:	b118      	cbz	r0, 80137a8 <__swsetup_r+0x14>
 80137a0:	6a03      	ldr	r3, [r0, #32]
 80137a2:	b90b      	cbnz	r3, 80137a8 <__swsetup_r+0x14>
 80137a4:	f7fe f8fa 	bl	801199c <__sinit>
 80137a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137ac:	0719      	lsls	r1, r3, #28
 80137ae:	d422      	bmi.n	80137f6 <__swsetup_r+0x62>
 80137b0:	06da      	lsls	r2, r3, #27
 80137b2:	d407      	bmi.n	80137c4 <__swsetup_r+0x30>
 80137b4:	2209      	movs	r2, #9
 80137b6:	602a      	str	r2, [r5, #0]
 80137b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137bc:	81a3      	strh	r3, [r4, #12]
 80137be:	f04f 30ff 	mov.w	r0, #4294967295
 80137c2:	e033      	b.n	801382c <__swsetup_r+0x98>
 80137c4:	0758      	lsls	r0, r3, #29
 80137c6:	d512      	bpl.n	80137ee <__swsetup_r+0x5a>
 80137c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137ca:	b141      	cbz	r1, 80137de <__swsetup_r+0x4a>
 80137cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137d0:	4299      	cmp	r1, r3
 80137d2:	d002      	beq.n	80137da <__swsetup_r+0x46>
 80137d4:	4628      	mov	r0, r5
 80137d6:	f7ff f907 	bl	80129e8 <_free_r>
 80137da:	2300      	movs	r3, #0
 80137dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80137de:	89a3      	ldrh	r3, [r4, #12]
 80137e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80137e4:	81a3      	strh	r3, [r4, #12]
 80137e6:	2300      	movs	r3, #0
 80137e8:	6063      	str	r3, [r4, #4]
 80137ea:	6923      	ldr	r3, [r4, #16]
 80137ec:	6023      	str	r3, [r4, #0]
 80137ee:	89a3      	ldrh	r3, [r4, #12]
 80137f0:	f043 0308 	orr.w	r3, r3, #8
 80137f4:	81a3      	strh	r3, [r4, #12]
 80137f6:	6923      	ldr	r3, [r4, #16]
 80137f8:	b94b      	cbnz	r3, 801380e <__swsetup_r+0x7a>
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013804:	d003      	beq.n	801380e <__swsetup_r+0x7a>
 8013806:	4621      	mov	r1, r4
 8013808:	4628      	mov	r0, r5
 801380a:	f000 fa13 	bl	8013c34 <__smakebuf_r>
 801380e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013812:	f013 0201 	ands.w	r2, r3, #1
 8013816:	d00a      	beq.n	801382e <__swsetup_r+0x9a>
 8013818:	2200      	movs	r2, #0
 801381a:	60a2      	str	r2, [r4, #8]
 801381c:	6962      	ldr	r2, [r4, #20]
 801381e:	4252      	negs	r2, r2
 8013820:	61a2      	str	r2, [r4, #24]
 8013822:	6922      	ldr	r2, [r4, #16]
 8013824:	b942      	cbnz	r2, 8013838 <__swsetup_r+0xa4>
 8013826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801382a:	d1c5      	bne.n	80137b8 <__swsetup_r+0x24>
 801382c:	bd38      	pop	{r3, r4, r5, pc}
 801382e:	0799      	lsls	r1, r3, #30
 8013830:	bf58      	it	pl
 8013832:	6962      	ldrpl	r2, [r4, #20]
 8013834:	60a2      	str	r2, [r4, #8]
 8013836:	e7f4      	b.n	8013822 <__swsetup_r+0x8e>
 8013838:	2000      	movs	r0, #0
 801383a:	e7f7      	b.n	801382c <__swsetup_r+0x98>
 801383c:	2000007c 	.word	0x2000007c

08013840 <memmove>:
 8013840:	4288      	cmp	r0, r1
 8013842:	b510      	push	{r4, lr}
 8013844:	eb01 0402 	add.w	r4, r1, r2
 8013848:	d902      	bls.n	8013850 <memmove+0x10>
 801384a:	4284      	cmp	r4, r0
 801384c:	4623      	mov	r3, r4
 801384e:	d807      	bhi.n	8013860 <memmove+0x20>
 8013850:	1e43      	subs	r3, r0, #1
 8013852:	42a1      	cmp	r1, r4
 8013854:	d008      	beq.n	8013868 <memmove+0x28>
 8013856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801385a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801385e:	e7f8      	b.n	8013852 <memmove+0x12>
 8013860:	4402      	add	r2, r0
 8013862:	4601      	mov	r1, r0
 8013864:	428a      	cmp	r2, r1
 8013866:	d100      	bne.n	801386a <memmove+0x2a>
 8013868:	bd10      	pop	{r4, pc}
 801386a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801386e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013872:	e7f7      	b.n	8013864 <memmove+0x24>

08013874 <_sbrk_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	4d06      	ldr	r5, [pc, #24]	@ (8013890 <_sbrk_r+0x1c>)
 8013878:	2300      	movs	r3, #0
 801387a:	4604      	mov	r4, r0
 801387c:	4608      	mov	r0, r1
 801387e:	602b      	str	r3, [r5, #0]
 8013880:	f7f4 fca6 	bl	80081d0 <_sbrk>
 8013884:	1c43      	adds	r3, r0, #1
 8013886:	d102      	bne.n	801388e <_sbrk_r+0x1a>
 8013888:	682b      	ldr	r3, [r5, #0]
 801388a:	b103      	cbz	r3, 801388e <_sbrk_r+0x1a>
 801388c:	6023      	str	r3, [r4, #0]
 801388e:	bd38      	pop	{r3, r4, r5, pc}
 8013890:	2000e91c 	.word	0x2000e91c

08013894 <abort>:
 8013894:	b508      	push	{r3, lr}
 8013896:	2006      	movs	r0, #6
 8013898:	f000 fa30 	bl	8013cfc <raise>
 801389c:	2001      	movs	r0, #1
 801389e:	f7f4 fc1f 	bl	80080e0 <_exit>

080138a2 <_calloc_r>:
 80138a2:	b570      	push	{r4, r5, r6, lr}
 80138a4:	fba1 5402 	umull	r5, r4, r1, r2
 80138a8:	b93c      	cbnz	r4, 80138ba <_calloc_r+0x18>
 80138aa:	4629      	mov	r1, r5
 80138ac:	f7ff f910 	bl	8012ad0 <_malloc_r>
 80138b0:	4606      	mov	r6, r0
 80138b2:	b928      	cbnz	r0, 80138c0 <_calloc_r+0x1e>
 80138b4:	2600      	movs	r6, #0
 80138b6:	4630      	mov	r0, r6
 80138b8:	bd70      	pop	{r4, r5, r6, pc}
 80138ba:	220c      	movs	r2, #12
 80138bc:	6002      	str	r2, [r0, #0]
 80138be:	e7f9      	b.n	80138b4 <_calloc_r+0x12>
 80138c0:	462a      	mov	r2, r5
 80138c2:	4621      	mov	r1, r4
 80138c4:	f7fe f903 	bl	8011ace <memset>
 80138c8:	e7f5      	b.n	80138b6 <_calloc_r+0x14>

080138ca <__ascii_mbtowc>:
 80138ca:	b082      	sub	sp, #8
 80138cc:	b901      	cbnz	r1, 80138d0 <__ascii_mbtowc+0x6>
 80138ce:	a901      	add	r1, sp, #4
 80138d0:	b142      	cbz	r2, 80138e4 <__ascii_mbtowc+0x1a>
 80138d2:	b14b      	cbz	r3, 80138e8 <__ascii_mbtowc+0x1e>
 80138d4:	7813      	ldrb	r3, [r2, #0]
 80138d6:	600b      	str	r3, [r1, #0]
 80138d8:	7812      	ldrb	r2, [r2, #0]
 80138da:	1e10      	subs	r0, r2, #0
 80138dc:	bf18      	it	ne
 80138de:	2001      	movne	r0, #1
 80138e0:	b002      	add	sp, #8
 80138e2:	4770      	bx	lr
 80138e4:	4610      	mov	r0, r2
 80138e6:	e7fb      	b.n	80138e0 <__ascii_mbtowc+0x16>
 80138e8:	f06f 0001 	mvn.w	r0, #1
 80138ec:	e7f8      	b.n	80138e0 <__ascii_mbtowc+0x16>

080138ee <_realloc_r>:
 80138ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f2:	4680      	mov	r8, r0
 80138f4:	4615      	mov	r5, r2
 80138f6:	460c      	mov	r4, r1
 80138f8:	b921      	cbnz	r1, 8013904 <_realloc_r+0x16>
 80138fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138fe:	4611      	mov	r1, r2
 8013900:	f7ff b8e6 	b.w	8012ad0 <_malloc_r>
 8013904:	b92a      	cbnz	r2, 8013912 <_realloc_r+0x24>
 8013906:	f7ff f86f 	bl	80129e8 <_free_r>
 801390a:	2400      	movs	r4, #0
 801390c:	4620      	mov	r0, r4
 801390e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013912:	f000 fa31 	bl	8013d78 <_malloc_usable_size_r>
 8013916:	4285      	cmp	r5, r0
 8013918:	4606      	mov	r6, r0
 801391a:	d802      	bhi.n	8013922 <_realloc_r+0x34>
 801391c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013920:	d8f4      	bhi.n	801390c <_realloc_r+0x1e>
 8013922:	4629      	mov	r1, r5
 8013924:	4640      	mov	r0, r8
 8013926:	f7ff f8d3 	bl	8012ad0 <_malloc_r>
 801392a:	4607      	mov	r7, r0
 801392c:	2800      	cmp	r0, #0
 801392e:	d0ec      	beq.n	801390a <_realloc_r+0x1c>
 8013930:	42b5      	cmp	r5, r6
 8013932:	462a      	mov	r2, r5
 8013934:	4621      	mov	r1, r4
 8013936:	bf28      	it	cs
 8013938:	4632      	movcs	r2, r6
 801393a:	f7fe f9dc 	bl	8011cf6 <memcpy>
 801393e:	4621      	mov	r1, r4
 8013940:	4640      	mov	r0, r8
 8013942:	f7ff f851 	bl	80129e8 <_free_r>
 8013946:	463c      	mov	r4, r7
 8013948:	e7e0      	b.n	801390c <_realloc_r+0x1e>

0801394a <__ascii_wctomb>:
 801394a:	4603      	mov	r3, r0
 801394c:	4608      	mov	r0, r1
 801394e:	b141      	cbz	r1, 8013962 <__ascii_wctomb+0x18>
 8013950:	2aff      	cmp	r2, #255	@ 0xff
 8013952:	d904      	bls.n	801395e <__ascii_wctomb+0x14>
 8013954:	228a      	movs	r2, #138	@ 0x8a
 8013956:	601a      	str	r2, [r3, #0]
 8013958:	f04f 30ff 	mov.w	r0, #4294967295
 801395c:	4770      	bx	lr
 801395e:	700a      	strb	r2, [r1, #0]
 8013960:	2001      	movs	r0, #1
 8013962:	4770      	bx	lr

08013964 <__sfputc_r>:
 8013964:	6893      	ldr	r3, [r2, #8]
 8013966:	3b01      	subs	r3, #1
 8013968:	2b00      	cmp	r3, #0
 801396a:	b410      	push	{r4}
 801396c:	6093      	str	r3, [r2, #8]
 801396e:	da08      	bge.n	8013982 <__sfputc_r+0x1e>
 8013970:	6994      	ldr	r4, [r2, #24]
 8013972:	42a3      	cmp	r3, r4
 8013974:	db01      	blt.n	801397a <__sfputc_r+0x16>
 8013976:	290a      	cmp	r1, #10
 8013978:	d103      	bne.n	8013982 <__sfputc_r+0x1e>
 801397a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801397e:	f7ff becb 	b.w	8013718 <__swbuf_r>
 8013982:	6813      	ldr	r3, [r2, #0]
 8013984:	1c58      	adds	r0, r3, #1
 8013986:	6010      	str	r0, [r2, #0]
 8013988:	7019      	strb	r1, [r3, #0]
 801398a:	4608      	mov	r0, r1
 801398c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013990:	4770      	bx	lr

08013992 <__sfputs_r>:
 8013992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013994:	4606      	mov	r6, r0
 8013996:	460f      	mov	r7, r1
 8013998:	4614      	mov	r4, r2
 801399a:	18d5      	adds	r5, r2, r3
 801399c:	42ac      	cmp	r4, r5
 801399e:	d101      	bne.n	80139a4 <__sfputs_r+0x12>
 80139a0:	2000      	movs	r0, #0
 80139a2:	e007      	b.n	80139b4 <__sfputs_r+0x22>
 80139a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139a8:	463a      	mov	r2, r7
 80139aa:	4630      	mov	r0, r6
 80139ac:	f7ff ffda 	bl	8013964 <__sfputc_r>
 80139b0:	1c43      	adds	r3, r0, #1
 80139b2:	d1f3      	bne.n	801399c <__sfputs_r+0xa>
 80139b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080139b8 <_vfiprintf_r>:
 80139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139bc:	460d      	mov	r5, r1
 80139be:	b09d      	sub	sp, #116	@ 0x74
 80139c0:	4614      	mov	r4, r2
 80139c2:	4698      	mov	r8, r3
 80139c4:	4606      	mov	r6, r0
 80139c6:	b118      	cbz	r0, 80139d0 <_vfiprintf_r+0x18>
 80139c8:	6a03      	ldr	r3, [r0, #32]
 80139ca:	b90b      	cbnz	r3, 80139d0 <_vfiprintf_r+0x18>
 80139cc:	f7fd ffe6 	bl	801199c <__sinit>
 80139d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139d2:	07d9      	lsls	r1, r3, #31
 80139d4:	d405      	bmi.n	80139e2 <_vfiprintf_r+0x2a>
 80139d6:	89ab      	ldrh	r3, [r5, #12]
 80139d8:	059a      	lsls	r2, r3, #22
 80139da:	d402      	bmi.n	80139e2 <_vfiprintf_r+0x2a>
 80139dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139de:	f7fe f980 	bl	8011ce2 <__retarget_lock_acquire_recursive>
 80139e2:	89ab      	ldrh	r3, [r5, #12]
 80139e4:	071b      	lsls	r3, r3, #28
 80139e6:	d501      	bpl.n	80139ec <_vfiprintf_r+0x34>
 80139e8:	692b      	ldr	r3, [r5, #16]
 80139ea:	b99b      	cbnz	r3, 8013a14 <_vfiprintf_r+0x5c>
 80139ec:	4629      	mov	r1, r5
 80139ee:	4630      	mov	r0, r6
 80139f0:	f7ff fed0 	bl	8013794 <__swsetup_r>
 80139f4:	b170      	cbz	r0, 8013a14 <_vfiprintf_r+0x5c>
 80139f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139f8:	07dc      	lsls	r4, r3, #31
 80139fa:	d504      	bpl.n	8013a06 <_vfiprintf_r+0x4e>
 80139fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013a00:	b01d      	add	sp, #116	@ 0x74
 8013a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a06:	89ab      	ldrh	r3, [r5, #12]
 8013a08:	0598      	lsls	r0, r3, #22
 8013a0a:	d4f7      	bmi.n	80139fc <_vfiprintf_r+0x44>
 8013a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a0e:	f7fe f969 	bl	8011ce4 <__retarget_lock_release_recursive>
 8013a12:	e7f3      	b.n	80139fc <_vfiprintf_r+0x44>
 8013a14:	2300      	movs	r3, #0
 8013a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a18:	2320      	movs	r3, #32
 8013a1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a22:	2330      	movs	r3, #48	@ 0x30
 8013a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013bd4 <_vfiprintf_r+0x21c>
 8013a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a2c:	f04f 0901 	mov.w	r9, #1
 8013a30:	4623      	mov	r3, r4
 8013a32:	469a      	mov	sl, r3
 8013a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a38:	b10a      	cbz	r2, 8013a3e <_vfiprintf_r+0x86>
 8013a3a:	2a25      	cmp	r2, #37	@ 0x25
 8013a3c:	d1f9      	bne.n	8013a32 <_vfiprintf_r+0x7a>
 8013a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8013a42:	d00b      	beq.n	8013a5c <_vfiprintf_r+0xa4>
 8013a44:	465b      	mov	r3, fp
 8013a46:	4622      	mov	r2, r4
 8013a48:	4629      	mov	r1, r5
 8013a4a:	4630      	mov	r0, r6
 8013a4c:	f7ff ffa1 	bl	8013992 <__sfputs_r>
 8013a50:	3001      	adds	r0, #1
 8013a52:	f000 80a7 	beq.w	8013ba4 <_vfiprintf_r+0x1ec>
 8013a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a58:	445a      	add	r2, fp
 8013a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	f000 809f 	beq.w	8013ba4 <_vfiprintf_r+0x1ec>
 8013a66:	2300      	movs	r3, #0
 8013a68:	f04f 32ff 	mov.w	r2, #4294967295
 8013a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a70:	f10a 0a01 	add.w	sl, sl, #1
 8013a74:	9304      	str	r3, [sp, #16]
 8013a76:	9307      	str	r3, [sp, #28]
 8013a78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a7e:	4654      	mov	r4, sl
 8013a80:	2205      	movs	r2, #5
 8013a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a86:	4853      	ldr	r0, [pc, #332]	@ (8013bd4 <_vfiprintf_r+0x21c>)
 8013a88:	f7ec fba2 	bl	80001d0 <memchr>
 8013a8c:	9a04      	ldr	r2, [sp, #16]
 8013a8e:	b9d8      	cbnz	r0, 8013ac8 <_vfiprintf_r+0x110>
 8013a90:	06d1      	lsls	r1, r2, #27
 8013a92:	bf44      	itt	mi
 8013a94:	2320      	movmi	r3, #32
 8013a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a9a:	0713      	lsls	r3, r2, #28
 8013a9c:	bf44      	itt	mi
 8013a9e:	232b      	movmi	r3, #43	@ 0x2b
 8013aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8013aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013aaa:	d015      	beq.n	8013ad8 <_vfiprintf_r+0x120>
 8013aac:	9a07      	ldr	r2, [sp, #28]
 8013aae:	4654      	mov	r4, sl
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f04f 0c0a 	mov.w	ip, #10
 8013ab6:	4621      	mov	r1, r4
 8013ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013abc:	3b30      	subs	r3, #48	@ 0x30
 8013abe:	2b09      	cmp	r3, #9
 8013ac0:	d94b      	bls.n	8013b5a <_vfiprintf_r+0x1a2>
 8013ac2:	b1b0      	cbz	r0, 8013af2 <_vfiprintf_r+0x13a>
 8013ac4:	9207      	str	r2, [sp, #28]
 8013ac6:	e014      	b.n	8013af2 <_vfiprintf_r+0x13a>
 8013ac8:	eba0 0308 	sub.w	r3, r0, r8
 8013acc:	fa09 f303 	lsl.w	r3, r9, r3
 8013ad0:	4313      	orrs	r3, r2
 8013ad2:	9304      	str	r3, [sp, #16]
 8013ad4:	46a2      	mov	sl, r4
 8013ad6:	e7d2      	b.n	8013a7e <_vfiprintf_r+0xc6>
 8013ad8:	9b03      	ldr	r3, [sp, #12]
 8013ada:	1d19      	adds	r1, r3, #4
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	9103      	str	r1, [sp, #12]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	bfbb      	ittet	lt
 8013ae4:	425b      	neglt	r3, r3
 8013ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8013aea:	9307      	strge	r3, [sp, #28]
 8013aec:	9307      	strlt	r3, [sp, #28]
 8013aee:	bfb8      	it	lt
 8013af0:	9204      	strlt	r2, [sp, #16]
 8013af2:	7823      	ldrb	r3, [r4, #0]
 8013af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8013af6:	d10a      	bne.n	8013b0e <_vfiprintf_r+0x156>
 8013af8:	7863      	ldrb	r3, [r4, #1]
 8013afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8013afc:	d132      	bne.n	8013b64 <_vfiprintf_r+0x1ac>
 8013afe:	9b03      	ldr	r3, [sp, #12]
 8013b00:	1d1a      	adds	r2, r3, #4
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	9203      	str	r2, [sp, #12]
 8013b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b0a:	3402      	adds	r4, #2
 8013b0c:	9305      	str	r3, [sp, #20]
 8013b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013be4 <_vfiprintf_r+0x22c>
 8013b12:	7821      	ldrb	r1, [r4, #0]
 8013b14:	2203      	movs	r2, #3
 8013b16:	4650      	mov	r0, sl
 8013b18:	f7ec fb5a 	bl	80001d0 <memchr>
 8013b1c:	b138      	cbz	r0, 8013b2e <_vfiprintf_r+0x176>
 8013b1e:	9b04      	ldr	r3, [sp, #16]
 8013b20:	eba0 000a 	sub.w	r0, r0, sl
 8013b24:	2240      	movs	r2, #64	@ 0x40
 8013b26:	4082      	lsls	r2, r0
 8013b28:	4313      	orrs	r3, r2
 8013b2a:	3401      	adds	r4, #1
 8013b2c:	9304      	str	r3, [sp, #16]
 8013b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b32:	4829      	ldr	r0, [pc, #164]	@ (8013bd8 <_vfiprintf_r+0x220>)
 8013b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b38:	2206      	movs	r2, #6
 8013b3a:	f7ec fb49 	bl	80001d0 <memchr>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d03f      	beq.n	8013bc2 <_vfiprintf_r+0x20a>
 8013b42:	4b26      	ldr	r3, [pc, #152]	@ (8013bdc <_vfiprintf_r+0x224>)
 8013b44:	bb1b      	cbnz	r3, 8013b8e <_vfiprintf_r+0x1d6>
 8013b46:	9b03      	ldr	r3, [sp, #12]
 8013b48:	3307      	adds	r3, #7
 8013b4a:	f023 0307 	bic.w	r3, r3, #7
 8013b4e:	3308      	adds	r3, #8
 8013b50:	9303      	str	r3, [sp, #12]
 8013b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b54:	443b      	add	r3, r7
 8013b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b58:	e76a      	b.n	8013a30 <_vfiprintf_r+0x78>
 8013b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b5e:	460c      	mov	r4, r1
 8013b60:	2001      	movs	r0, #1
 8013b62:	e7a8      	b.n	8013ab6 <_vfiprintf_r+0xfe>
 8013b64:	2300      	movs	r3, #0
 8013b66:	3401      	adds	r4, #1
 8013b68:	9305      	str	r3, [sp, #20]
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	f04f 0c0a 	mov.w	ip, #10
 8013b70:	4620      	mov	r0, r4
 8013b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b76:	3a30      	subs	r2, #48	@ 0x30
 8013b78:	2a09      	cmp	r2, #9
 8013b7a:	d903      	bls.n	8013b84 <_vfiprintf_r+0x1cc>
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d0c6      	beq.n	8013b0e <_vfiprintf_r+0x156>
 8013b80:	9105      	str	r1, [sp, #20]
 8013b82:	e7c4      	b.n	8013b0e <_vfiprintf_r+0x156>
 8013b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b88:	4604      	mov	r4, r0
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e7f0      	b.n	8013b70 <_vfiprintf_r+0x1b8>
 8013b8e:	ab03      	add	r3, sp, #12
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	462a      	mov	r2, r5
 8013b94:	4b12      	ldr	r3, [pc, #72]	@ (8013be0 <_vfiprintf_r+0x228>)
 8013b96:	a904      	add	r1, sp, #16
 8013b98:	4630      	mov	r0, r6
 8013b9a:	f7fd fabb 	bl	8011114 <_printf_float>
 8013b9e:	4607      	mov	r7, r0
 8013ba0:	1c78      	adds	r0, r7, #1
 8013ba2:	d1d6      	bne.n	8013b52 <_vfiprintf_r+0x19a>
 8013ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ba6:	07d9      	lsls	r1, r3, #31
 8013ba8:	d405      	bmi.n	8013bb6 <_vfiprintf_r+0x1fe>
 8013baa:	89ab      	ldrh	r3, [r5, #12]
 8013bac:	059a      	lsls	r2, r3, #22
 8013bae:	d402      	bmi.n	8013bb6 <_vfiprintf_r+0x1fe>
 8013bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bb2:	f7fe f897 	bl	8011ce4 <__retarget_lock_release_recursive>
 8013bb6:	89ab      	ldrh	r3, [r5, #12]
 8013bb8:	065b      	lsls	r3, r3, #25
 8013bba:	f53f af1f 	bmi.w	80139fc <_vfiprintf_r+0x44>
 8013bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bc0:	e71e      	b.n	8013a00 <_vfiprintf_r+0x48>
 8013bc2:	ab03      	add	r3, sp, #12
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4b05      	ldr	r3, [pc, #20]	@ (8013be0 <_vfiprintf_r+0x228>)
 8013bca:	a904      	add	r1, sp, #16
 8013bcc:	4630      	mov	r0, r6
 8013bce:	f7fd fd39 	bl	8011644 <_printf_i>
 8013bd2:	e7e4      	b.n	8013b9e <_vfiprintf_r+0x1e6>
 8013bd4:	08014c90 	.word	0x08014c90
 8013bd8:	08014c9a 	.word	0x08014c9a
 8013bdc:	08011115 	.word	0x08011115
 8013be0:	08013993 	.word	0x08013993
 8013be4:	08014c96 	.word	0x08014c96

08013be8 <__swhatbuf_r>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	460c      	mov	r4, r1
 8013bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf0:	2900      	cmp	r1, #0
 8013bf2:	b096      	sub	sp, #88	@ 0x58
 8013bf4:	4615      	mov	r5, r2
 8013bf6:	461e      	mov	r6, r3
 8013bf8:	da0d      	bge.n	8013c16 <__swhatbuf_r+0x2e>
 8013bfa:	89a3      	ldrh	r3, [r4, #12]
 8013bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c00:	f04f 0100 	mov.w	r1, #0
 8013c04:	bf14      	ite	ne
 8013c06:	2340      	movne	r3, #64	@ 0x40
 8013c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	6031      	str	r1, [r6, #0]
 8013c10:	602b      	str	r3, [r5, #0]
 8013c12:	b016      	add	sp, #88	@ 0x58
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	466a      	mov	r2, sp
 8013c18:	f000 f878 	bl	8013d0c <_fstat_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	dbec      	blt.n	8013bfa <__swhatbuf_r+0x12>
 8013c20:	9901      	ldr	r1, [sp, #4]
 8013c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c2a:	4259      	negs	r1, r3
 8013c2c:	4159      	adcs	r1, r3
 8013c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c32:	e7eb      	b.n	8013c0c <__swhatbuf_r+0x24>

08013c34 <__smakebuf_r>:
 8013c34:	898b      	ldrh	r3, [r1, #12]
 8013c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c38:	079d      	lsls	r5, r3, #30
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460c      	mov	r4, r1
 8013c3e:	d507      	bpl.n	8013c50 <__smakebuf_r+0x1c>
 8013c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	6123      	str	r3, [r4, #16]
 8013c48:	2301      	movs	r3, #1
 8013c4a:	6163      	str	r3, [r4, #20]
 8013c4c:	b003      	add	sp, #12
 8013c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c50:	ab01      	add	r3, sp, #4
 8013c52:	466a      	mov	r2, sp
 8013c54:	f7ff ffc8 	bl	8013be8 <__swhatbuf_r>
 8013c58:	9f00      	ldr	r7, [sp, #0]
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	4639      	mov	r1, r7
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f7fe ff36 	bl	8012ad0 <_malloc_r>
 8013c64:	b948      	cbnz	r0, 8013c7a <__smakebuf_r+0x46>
 8013c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c6a:	059a      	lsls	r2, r3, #22
 8013c6c:	d4ee      	bmi.n	8013c4c <__smakebuf_r+0x18>
 8013c6e:	f023 0303 	bic.w	r3, r3, #3
 8013c72:	f043 0302 	orr.w	r3, r3, #2
 8013c76:	81a3      	strh	r3, [r4, #12]
 8013c78:	e7e2      	b.n	8013c40 <__smakebuf_r+0xc>
 8013c7a:	89a3      	ldrh	r3, [r4, #12]
 8013c7c:	6020      	str	r0, [r4, #0]
 8013c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c82:	81a3      	strh	r3, [r4, #12]
 8013c84:	9b01      	ldr	r3, [sp, #4]
 8013c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c8a:	b15b      	cbz	r3, 8013ca4 <__smakebuf_r+0x70>
 8013c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c90:	4630      	mov	r0, r6
 8013c92:	f000 f84d 	bl	8013d30 <_isatty_r>
 8013c96:	b128      	cbz	r0, 8013ca4 <__smakebuf_r+0x70>
 8013c98:	89a3      	ldrh	r3, [r4, #12]
 8013c9a:	f023 0303 	bic.w	r3, r3, #3
 8013c9e:	f043 0301 	orr.w	r3, r3, #1
 8013ca2:	81a3      	strh	r3, [r4, #12]
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	431d      	orrs	r5, r3
 8013ca8:	81a5      	strh	r5, [r4, #12]
 8013caa:	e7cf      	b.n	8013c4c <__smakebuf_r+0x18>

08013cac <_raise_r>:
 8013cac:	291f      	cmp	r1, #31
 8013cae:	b538      	push	{r3, r4, r5, lr}
 8013cb0:	4605      	mov	r5, r0
 8013cb2:	460c      	mov	r4, r1
 8013cb4:	d904      	bls.n	8013cc0 <_raise_r+0x14>
 8013cb6:	2316      	movs	r3, #22
 8013cb8:	6003      	str	r3, [r0, #0]
 8013cba:	f04f 30ff 	mov.w	r0, #4294967295
 8013cbe:	bd38      	pop	{r3, r4, r5, pc}
 8013cc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013cc2:	b112      	cbz	r2, 8013cca <_raise_r+0x1e>
 8013cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013cc8:	b94b      	cbnz	r3, 8013cde <_raise_r+0x32>
 8013cca:	4628      	mov	r0, r5
 8013ccc:	f000 f852 	bl	8013d74 <_getpid_r>
 8013cd0:	4622      	mov	r2, r4
 8013cd2:	4601      	mov	r1, r0
 8013cd4:	4628      	mov	r0, r5
 8013cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cda:	f000 b839 	b.w	8013d50 <_kill_r>
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d00a      	beq.n	8013cf8 <_raise_r+0x4c>
 8013ce2:	1c59      	adds	r1, r3, #1
 8013ce4:	d103      	bne.n	8013cee <_raise_r+0x42>
 8013ce6:	2316      	movs	r3, #22
 8013ce8:	6003      	str	r3, [r0, #0]
 8013cea:	2001      	movs	r0, #1
 8013cec:	e7e7      	b.n	8013cbe <_raise_r+0x12>
 8013cee:	2100      	movs	r1, #0
 8013cf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	4798      	blx	r3
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	e7e0      	b.n	8013cbe <_raise_r+0x12>

08013cfc <raise>:
 8013cfc:	4b02      	ldr	r3, [pc, #8]	@ (8013d08 <raise+0xc>)
 8013cfe:	4601      	mov	r1, r0
 8013d00:	6818      	ldr	r0, [r3, #0]
 8013d02:	f7ff bfd3 	b.w	8013cac <_raise_r>
 8013d06:	bf00      	nop
 8013d08:	2000007c 	.word	0x2000007c

08013d0c <_fstat_r>:
 8013d0c:	b538      	push	{r3, r4, r5, lr}
 8013d0e:	4d07      	ldr	r5, [pc, #28]	@ (8013d2c <_fstat_r+0x20>)
 8013d10:	2300      	movs	r3, #0
 8013d12:	4604      	mov	r4, r0
 8013d14:	4608      	mov	r0, r1
 8013d16:	4611      	mov	r1, r2
 8013d18:	602b      	str	r3, [r5, #0]
 8013d1a:	f7f4 fa31 	bl	8008180 <_fstat>
 8013d1e:	1c43      	adds	r3, r0, #1
 8013d20:	d102      	bne.n	8013d28 <_fstat_r+0x1c>
 8013d22:	682b      	ldr	r3, [r5, #0]
 8013d24:	b103      	cbz	r3, 8013d28 <_fstat_r+0x1c>
 8013d26:	6023      	str	r3, [r4, #0]
 8013d28:	bd38      	pop	{r3, r4, r5, pc}
 8013d2a:	bf00      	nop
 8013d2c:	2000e91c 	.word	0x2000e91c

08013d30 <_isatty_r>:
 8013d30:	b538      	push	{r3, r4, r5, lr}
 8013d32:	4d06      	ldr	r5, [pc, #24]	@ (8013d4c <_isatty_r+0x1c>)
 8013d34:	2300      	movs	r3, #0
 8013d36:	4604      	mov	r4, r0
 8013d38:	4608      	mov	r0, r1
 8013d3a:	602b      	str	r3, [r5, #0]
 8013d3c:	f7f4 fa30 	bl	80081a0 <_isatty>
 8013d40:	1c43      	adds	r3, r0, #1
 8013d42:	d102      	bne.n	8013d4a <_isatty_r+0x1a>
 8013d44:	682b      	ldr	r3, [r5, #0]
 8013d46:	b103      	cbz	r3, 8013d4a <_isatty_r+0x1a>
 8013d48:	6023      	str	r3, [r4, #0]
 8013d4a:	bd38      	pop	{r3, r4, r5, pc}
 8013d4c:	2000e91c 	.word	0x2000e91c

08013d50 <_kill_r>:
 8013d50:	b538      	push	{r3, r4, r5, lr}
 8013d52:	4d07      	ldr	r5, [pc, #28]	@ (8013d70 <_kill_r+0x20>)
 8013d54:	2300      	movs	r3, #0
 8013d56:	4604      	mov	r4, r0
 8013d58:	4608      	mov	r0, r1
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	602b      	str	r3, [r5, #0]
 8013d5e:	f7f4 f9af 	bl	80080c0 <_kill>
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	d102      	bne.n	8013d6c <_kill_r+0x1c>
 8013d66:	682b      	ldr	r3, [r5, #0]
 8013d68:	b103      	cbz	r3, 8013d6c <_kill_r+0x1c>
 8013d6a:	6023      	str	r3, [r4, #0]
 8013d6c:	bd38      	pop	{r3, r4, r5, pc}
 8013d6e:	bf00      	nop
 8013d70:	2000e91c 	.word	0x2000e91c

08013d74 <_getpid_r>:
 8013d74:	f7f4 b99c 	b.w	80080b0 <_getpid>

08013d78 <_malloc_usable_size_r>:
 8013d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d7c:	1f18      	subs	r0, r3, #4
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	bfbc      	itt	lt
 8013d82:	580b      	ldrlt	r3, [r1, r0]
 8013d84:	18c0      	addlt	r0, r0, r3
 8013d86:	4770      	bx	lr

08013d88 <_init>:
 8013d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d8a:	bf00      	nop
 8013d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d8e:	bc08      	pop	{r3}
 8013d90:	469e      	mov	lr, r3
 8013d92:	4770      	bx	lr

08013d94 <_fini>:
 8013d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d96:	bf00      	nop
 8013d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d9a:	bc08      	pop	{r3}
 8013d9c:	469e      	mov	lr, r3
 8013d9e:	4770      	bx	lr
