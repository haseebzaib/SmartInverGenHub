
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013868  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013dc  080139f8  080139f8  000149f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_5x8_mf 000007db  08014dd4  08014dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  080155af  080155af  000165af  2**0
                  ALLOC
  5 .ARM          00000008  080155b0  080155b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080155b8  080155b8  00017458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  080155b8  080155b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080155cc  080155cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000458  20000000  080155d0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00017458  2**0
                  CONTENTS
 11 .bss          0000c84c  20000458  20000458  00017458  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000cca4  2000cca4  00017458  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00017458  2**0
                  CONTENTS, READONLY
 14 .debug_info   00060d99  00000000  00000000  00017488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b1f8  00000000  00000000  00078221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003598  00000000  00000000  00083420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000028c5  00000000  00000000  000869b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000348f1  00000000  00000000  0008927d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047a0f  00000000  00000000  000bdb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108e3e  00000000  00000000  0010557d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020e3bb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f01c  00000000  00000000  0020e400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0021d41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000458 	.word	0x20000458
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080139e0 	.word	0x080139e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000045c 	.word	0x2000045c
 80001cc:	080139e0 	.word	0x080139e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_Z11ControlTaskPv>:

char batTime[20];



void ControlTask(void *pvParameters) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0da      	sub	sp, #360	@ 0x168
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ee2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000ee6:	6018      	str	r0, [r3, #0]

	struct ModemData_Queue ModemData = { 0 };
 8000ee8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000eec:	22d9      	movs	r2, #217	@ 0xd9
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f010 fc16 	bl	8011722 <memset>

	struct ControlData_Queue ControlData = { 0 };
 8000ef6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000efa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000efe:	4618      	mov	r0, r3
 8000f00:	2374      	movs	r3, #116	@ 0x74
 8000f02:	461a      	mov	r2, r3
 8000f04:	2100      	movs	r1, #0
 8000f06:	f010 fc0c 	bl	8011722 <memset>



	System_Rtos::delay(1000);
 8000f0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f0e:	f003 f8af 	bl	8004070 <_ZN11System_Rtos5delayEm>


	//parsing.convertEpochToSTMTime(&hrtc, 1732186868, 5);

	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 8000f12:	f000 fd7b 	bl	8001a0c <_ZN8UniqueID6GetUidEv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f010 fd0b 	bl	801193a <strcpy>

	while (1) {



		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	3310      	adds	r3, #16
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	484b      	ldr	r0, [pc, #300]	@ (800105c <_Z11ControlTaskPv+0x184>)
 8000f30:	f003 fa49 	bl	80043c6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
//		std::sprintf(time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
//				sTime.Seconds);
//		std::sprintf(date, "%02d-%s-%02d", sDate.Date, months[sDate.Month],
//				sDate.Year);

		if (ModemDataQueue.queueReceive((void*) &ModemData)
 8000f34:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4849      	ldr	r0, [pc, #292]	@ (8001060 <_Z11ControlTaskPv+0x188>)
 8000f3c:	f003 f93d 	bl	80041ba <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8000f40:	4603      	mov	r3, r0
				== ModemDataQueue.queues_recived) {
 8000f42:	2b00      	cmp	r3, #0
////
////			LCD.SendFloatData(LCD.energy, ControlData.Energy);
//
//		}

		if ((batt_charging_status & 0x07) == SCC_AC_charge_on
 8000f44:	4b47      	ldr	r3, [pc, #284]	@ (8001064 <_Z11ControlTaskPv+0x18c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d00b      	beq.n	8000f68 <_Z11ControlTaskPv+0x90>
				|| (batt_charging_status & 0x07) == SCC_charge_on
 8000f50:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <_Z11ControlTaskPv+0x18c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d005      	beq.n	8000f68 <_Z11ControlTaskPv+0x90>
				|| (batt_charging_status & 0x07) == AC_charge_on) {
 8000f5c:	4b41      	ldr	r3, [pc, #260]	@ (8001064 <_Z11ControlTaskPv+0x18c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d11f      	bne.n	8000fa8 <_Z11ControlTaskPv+0xd0>
			if (!batt_chargetimekeeping_Flag) {
 8000f68:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <_Z11ControlTaskPv+0x190>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d13a      	bne.n	8000fe6 <_Z11ControlTaskPv+0x10e>
				batt_chargetimekeeping_Flag = 1;
 8000f70:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <_Z11ControlTaskPv+0x190>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeStartTime = ControlData.timestamp;
 8000f76:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f7a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000f88:	665a      	str	r2, [r3, #100]	@ 0x64
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000f8a:	4b38      	ldr	r3, [pc, #224]	@ (800106c <_Z11ControlTaskPv+0x194>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 8000f90:	4b36      	ldr	r3, [pc, #216]	@ (800106c <_Z11ControlTaskPv+0x194>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000f94:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 8000f96:	4b35      	ldr	r3, [pc, #212]	@ (800106c <_Z11ControlTaskPv+0x194>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4934      	ldr	r1, [pc, #208]	@ (8001070 <_Z11ControlTaskPv+0x198>)
 8000fa0:	4834      	ldr	r0, [pc, #208]	@ (8001074 <_Z11ControlTaskPv+0x19c>)
 8000fa2:	f010 fb5b 	bl	801165c <siprintf>
			if (!batt_chargetimekeeping_Flag) {
 8000fa6:	e01e      	b.n	8000fe6 <_Z11ControlTaskPv+0x10e>
//				LCD.SendTextData(LCD.chrgT, batTime);
			}
		} else {
			if (batt_chargetimekeeping_Flag) {
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <_Z11ControlTaskPv+0x190>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01a      	beq.n	8000fe6 <_Z11ControlTaskPv+0x10e>
				batt_chargetimekeeping_Flag = 0;
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <_Z11ControlTaskPv+0x190>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
				ControlData.batteryChargeEndTime = ControlData.timestamp;
 8000fb6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fc4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fc8:	669a      	str	r2, [r3, #104]	@ 0x68
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <_Z11ControlTaskPv+0x194>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
						sTime.Minutes, sTime.Seconds);
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <_Z11ControlTaskPv+0x194>)
 8000fd2:	785b      	ldrb	r3, [r3, #1]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000fd4:	4619      	mov	r1, r3
						sTime.Minutes, sTime.Seconds);
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <_Z11ControlTaskPv+0x194>)
 8000fd8:	789b      	ldrb	r3, [r3, #2]
				std::sprintf(batTime, "%02d:%02d:%02d", sTime.Hours,
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4924      	ldr	r1, [pc, #144]	@ (8001070 <_Z11ControlTaskPv+0x198>)
 8000fe0:	4824      	ldr	r0, [pc, #144]	@ (8001074 <_Z11ControlTaskPv+0x19c>)
 8000fe2:	f010 fb3b 	bl	801165c <siprintf>
//				LCD.SendTextData(LCD.dchgT, batTime);
			}
		}

		liquidSensor.Measurement_loop(sensor_liquidMeas::liquidSensor::Meter,
 8000fe6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	f102 0054 	add.w	r0, r2, #84	@ 0x54
 8000ff8:	f107 0208 	add.w	r2, r7, #8
 8000ffc:	f102 0150 	add.w	r1, r2, #80	@ 0x50
 8001000:	f107 0208 	add.w	r2, r7, #8
 8001004:	325c      	adds	r2, #92	@ 0x5c
 8001006:	9202      	str	r2, [sp, #8]
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	3258      	adds	r2, #88	@ 0x58
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8001078 <_Z11ControlTaskPv+0x1a0>
 800101a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800101e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800107c <_Z11ControlTaskPv+0x1a4>
 8001022:	2100      	movs	r1, #0
 8001024:	4816      	ldr	r0, [pc, #88]	@ (8001080 <_Z11ControlTaskPv+0x1a8>)
 8001026:	f002 fe83 	bl	8003d30 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>
				0.0, 10.0, 3.3, &ControlData.fuelPer, &ControlData.fuelConsp,
				ControlData.timestamp, &ControlData.refuelingStartTime,
				&ControlData.refuelingEndTime);
		AHT20.measure(&ControlData.temp, &ControlData.humid);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	336c      	adds	r3, #108	@ 0x6c
 8001038:	4619      	mov	r1, r3
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <_Z11ControlTaskPv+0x1ac>)
 800103c:	f002 fd36 	bl	8003aac <_ZN15sensor_TempHumd5AHT207measureEPmS1_>
//		LCD.SendNumericData(LCD.Temperature,
//				static_cast<uint16_t>(ControlData.temp));
//		LCD.SendNumericData(LCD.Humidity,
//				static_cast<uint16_t>(ControlData.humid));

		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4619      	mov	r1, r3
 8001046:	4810      	ldr	r0, [pc, #64]	@ (8001088 <_Z11ControlTaskPv+0x1b0>)
 8001048:	f003 f89a 	bl	8004180 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 800104c:	2102      	movs	r1, #2
 800104e:	480f      	ldr	r0, [pc, #60]	@ (800108c <_Z11ControlTaskPv+0x1b4>)
 8001050:	f008 fd4b 	bl	8009aea <HAL_GPIO_TogglePin>
		System_Rtos::delay(150);
 8001054:	2096      	movs	r0, #150	@ 0x96
 8001056:	f003 f80b 	bl	8004070 <_ZN11System_Rtos5delayEm>
		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 800105a:	e763      	b.n	8000f24 <_Z11ControlTaskPv+0x4c>
 800105c:	20001904 	.word	0x20001904
 8001060:	200017d8 	.word	0x200017d8
 8001064:	200004c9 	.word	0x200004c9
 8001068:	200004ca 	.word	0x200004ca
 800106c:	20000474 	.word	0x20000474
 8001070:	080139f8 	.word	0x080139f8
 8001074:	200004cc 	.word	0x200004cc
 8001078:	40533333 	.word	0x40533333
 800107c:	00000000 	.word	0x00000000
 8001080:	20000488 	.word	0x20000488
 8001084:	200004b4 	.word	0x200004b4
 8001088:	200018a8 	.word	0x200018a8
 800108c:	40020000 	.word	0x40020000

08001090 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d112      	bne.n	80010c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10d      	bne.n	80010c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1);
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80010ae:	f002 fe15 	bl	8003cdc <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	2238      	movs	r2, #56	@ 0x38
 80010b8:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80010ba:	4808      	ldr	r0, [pc, #32]	@ (80010dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80010bc:	f002 fcde 	bl	8003a7c <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
System_sys::Parsing_Checking parsing;
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80010c2:	f003 fc35 	bl	8004930 <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20001e68 	.word	0x20001e68
 80010d4:	20000488 	.word	0x20000488
 80010d8:	20001eb0 	.word	0x20001eb0
 80010dc:	200004b4 	.word	0x200004b4
 80010e0:	200004c8 	.word	0x200004c8

080010e4 <_GLOBAL__sub_I_sDate>:
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff ffcf 	bl	8001090 <_Z41__static_initialization_and_destruction_0ii>
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv>:

u8g2_t u8g2_M;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	72fb      	strb	r3, [r7, #11]
 8001102:	4613      	mov	r3, r2
 8001104:	72bb      	strb	r3, [r7, #10]
      /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
      switch(msg)
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	3b28      	subs	r3, #40	@ 0x28
 800110a:	2b23      	cmp	r3, #35	@ 0x23
 800110c:	d867      	bhi.n	80011de <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
 800110e:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x20>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	080011df 	.word	0x080011df
 8001118:	080011a5 	.word	0x080011a5
 800111c:	080011df 	.word	0x080011df
 8001120:	080011df 	.word	0x080011df
 8001124:	080011df 	.word	0x080011df
 8001128:	080011df 	.word	0x080011df
 800112c:	080011df 	.word	0x080011df
 8001130:	080011df 	.word	0x080011df
 8001134:	080011df 	.word	0x080011df
 8001138:	080011df 	.word	0x080011df
 800113c:	080011df 	.word	0x080011df
 8001140:	080011df 	.word	0x080011df
 8001144:	080011df 	.word	0x080011df
 8001148:	080011df 	.word	0x080011df
 800114c:	080011df 	.word	0x080011df
 8001150:	080011df 	.word	0x080011df
 8001154:	080011df 	.word	0x080011df
 8001158:	080011df 	.word	0x080011df
 800115c:	080011df 	.word	0x080011df
 8001160:	080011df 	.word	0x080011df
 8001164:	080011df 	.word	0x080011df
 8001168:	080011df 	.word	0x080011df
 800116c:	080011df 	.word	0x080011df
 8001170:	080011df 	.word	0x080011df
 8001174:	080011df 	.word	0x080011df
 8001178:	080011df 	.word	0x080011df
 800117c:	080011df 	.word	0x080011df
 8001180:	080011df 	.word	0x080011df
 8001184:	080011df 	.word	0x080011df
 8001188:	080011df 	.word	0x080011df
 800118c:	080011df 	.word	0x080011df
 8001190:	080011df 	.word	0x080011df
 8001194:	080011df 	.word	0x080011df
 8001198:	080011af 	.word	0x080011af
 800119c:	080011bf 	.word	0x080011bf
 80011a0:	080011cf 	.word	0x080011cf
      case U8X8_MSG_GPIO_AND_DELAY_INIT:
          /* Insert codes for initialization */
          break;
      case U8X8_MSG_DELAY_MILLI:
          /* ms Delay */
       	System_Rtos::delay(arg_int);
 80011a4:	7abb      	ldrb	r3, [r7, #10]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 ff62 	bl	8004070 <_ZN11System_Rtos5delayEm>
          break;
 80011ac:	e017      	b.n	80011de <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_CS:
          /* Insert codes for SS pin control */
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, (GPIO_PinState)arg_int);
 80011ae:	7abb      	ldrb	r3, [r7, #10]
 80011b0:	461a      	mov	r2, r3
 80011b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b6:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 80011b8:	f008 fc7e 	bl	8009ab8 <HAL_GPIO_WritePin>

          break;
 80011bc:	e00f      	b.n	80011de <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_DC:
          /* Insert codes for DC pin control */
            HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, (GPIO_PinState)arg_int);
 80011be:	7abb      	ldrb	r3, [r7, #10]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf8>)
 80011c8:	f008 fc76 	bl	8009ab8 <HAL_GPIO_WritePin>

          break;
 80011cc:	e007      	b.n	80011de <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xea>
      case U8X8_MSG_GPIO_RESET:
          /* Insert codes for RST pin control */
           HAL_GPIO_WritePin(DISPLAY_RES_GPIO_Port, DISPLAY_RES_Pin,  (GPIO_PinState)arg_int);
 80011ce:	7abb      	ldrb	r3, [r7, #10]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf8>)
 80011d8:	f008 fc6e 	bl	8009ab8 <HAL_GPIO_WritePin>

          break;
 80011dc:	bf00      	nop
      }
      return 1;
 80011de:	2301      	movs	r3, #1
  }
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40020400 	.word	0x40020400

080011f0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	72fb      	strb	r3, [r7, #11]
 80011fe:	4613      	mov	r3, r2
 8001200:	72bb      	strb	r3, [r7, #10]
      switch(msg) {
 8001202:	7afb      	ldrb	r3, [r7, #11]
 8001204:	3b14      	subs	r3, #20
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d844      	bhi.n	8001294 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa4>
 800120a:	a201      	add	r2, pc, #4	@ (adr r2, 8001210 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001299 	.word	0x08001299
 8001214:	08001295 	.word	0x08001295
 8001218:	08001295 	.word	0x08001295
 800121c:	08001245 	.word	0x08001245
 8001220:	08001265 	.word	0x08001265
 8001224:	0800127d 	.word	0x0800127d
 8001228:	08001295 	.word	0x08001295
 800122c:	08001295 	.word	0x08001295
 8001230:	08001295 	.word	0x08001295
 8001234:	08001295 	.word	0x08001295
 8001238:	08001295 	.word	0x08001295
 800123c:	08001295 	.word	0x08001295
 8001240:	08001257 	.word	0x08001257
      case U8X8_MSG_BYTE_SEND:
          /* Insert codes to transmit data */
          HAL_SPI_Transmit(&OLEDSpi,(uint8_t *)arg_ptr, arg_int, 5000);
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f241 3388 	movw	r3, #5000	@ 0x1388
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4815      	ldr	r0, [pc, #84]	@ (80012a4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb4>)
 8001250:	f00a fe8f 	bl	800bf72 <HAL_SPI_Transmit>
           break;
 8001254:	e021      	b.n	800129a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
          /* Insert codes to begin SPI transmission */

          break;
      case U8X8_MSG_BYTE_SET_DC:
          /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
          u8x8_gpio_SetDC(u8x8, arg_int);
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	461a      	mov	r2, r3
 800125a:	214a      	movs	r1, #74	@ 0x4a
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f006 fc43 	bl	8007ae8 <u8x8_gpio_call>
          break;
 8001262:	e01a      	b.n	800129a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_START_TRANSFER:
          /* Select slave, U8X8_MSG_GPIO_CS will be called */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	2149      	movs	r1, #73	@ 0x49
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f006 fc3a 	bl	8007ae8 <u8x8_gpio_call>
        	System_Rtos::delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f002 fefb 	bl	8004070 <_ZN11System_Rtos5delayEm>

          break;
 800127a:	e00e      	b.n	800129a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_END_TRANSFER:
    	  	System_Rtos::delay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f002 fef7 	bl	8004070 <_ZN11System_Rtos5delayEm>
          /* Insert codes to end SPI transmission */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	461a      	mov	r2, r3
 800128a:	2149      	movs	r1, #73	@ 0x49
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f006 fc2b 	bl	8007ae8 <u8x8_gpio_call>
          break;
 8001292:	e002      	b.n	800129a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      default:
          return 0;
 8001294:	2300      	movs	r3, #0
 8001296:	e001      	b.n	800129c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
          break;
 8001298:	bf00      	nop
      }
      return 1;
 800129a:	2301      	movs	r3, #1
  }
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20001f24 	.word	0x20001f24

080012a8 <_Z11DisplayTaskPv>:


void DisplayTask(void *pvParameters)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]

  u8g2_Setup_ssd1309_128x64_noname0_f(&u8g2_M, U8G2_R0, u8x8_byte_stm32_hw_spi,u8x8_stm32_gpio_and_delay);
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <_Z11DisplayTaskPv+0x64>)
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <_Z11DisplayTaskPv+0x68>)
 80012b4:	4917      	ldr	r1, [pc, #92]	@ (8001314 <_Z11DisplayTaskPv+0x6c>)
 80012b6:	4818      	ldr	r0, [pc, #96]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012b8:	f005 f890 	bl	80063dc <u8g2_Setup_ssd1309_128x64_noname0_f>
  u8g2_InitDisplay(&u8g2_M);
 80012bc:	4816      	ldr	r0, [pc, #88]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012be:	f006 fbe4 	bl	8007a8a <u8x8_InitDisplay>
  u8g2_ClearBuffer(&u8g2_M);
 80012c2:	4815      	ldr	r0, [pc, #84]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012c4:	f004 fff9 	bl	80062ba <u8g2_ClearBuffer>
  u8g2_SetPowerSave(&u8g2_M, 0);
 80012c8:	2100      	movs	r1, #0
 80012ca:	4813      	ldr	r0, [pc, #76]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012cc:	f006 fbec 	bl	8007aa8 <u8x8_SetPowerSave>
  u8g2_DrawXBM(&u8g2_M,32,0,imgcont::smartgrid.w,imgcont::smartgrid.h,imgcont::smartgrid.img);
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <_Z11DisplayTaskPv+0x74>)
 80012d2:	7919      	ldrb	r1, [r3, #4]
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <_Z11DisplayTaskPv+0x74>)
 80012d6:	795b      	ldrb	r3, [r3, #5]
 80012d8:	4a10      	ldr	r2, [pc, #64]	@ (800131c <_Z11DisplayTaskPv+0x74>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	2120      	movs	r1, #32
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012e8:	f004 ff6e 	bl	80061c8 <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2_M);
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012ee:	f005 f857 	bl	80063a0 <u8g2_SendBuffer>
  System_Rtos::delay(2000);
 80012f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012f6:	f002 febb 	bl	8004070 <_ZN11System_Rtos5delayEm>


	while(1)
	{

		UI::loop(&u8g2_M);
 80012fa:	4807      	ldr	r0, [pc, #28]	@ (8001318 <_Z11DisplayTaskPv+0x70>)
 80012fc:	f004 f91a 	bl	8005534 <_ZN2UI4loopEP11u8g2_struct>
		System_Rtos::delay(500);
 8001300:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001304:	f002 feb4 	bl	8004070 <_ZN11System_Rtos5delayEm>
		UI::loop(&u8g2_M);
 8001308:	bf00      	nop
 800130a:	e7f6      	b.n	80012fa <_Z11DisplayTaskPv+0x52>
 800130c:	080010f5 	.word	0x080010f5
 8001310:	080011f1 	.word	0x080011f1
 8001314:	080149dc 	.word	0x080149dc
 8001318:	200004e0 	.word	0x200004e0
 800131c:	0801498c 	.word	0x0801498c

08001320 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f010 fa20 	bl	8011772 <strstr>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_Z9ModemTaskPv>:


char command_buffer[255] = {0};


void ModemTask(void *pvParameters) {
 800133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001340:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8001344:	af22      	add	r7, sp, #136	@ 0x88
 8001346:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800134a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800134e:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8001350:	48c9      	ldr	r0, [pc, #804]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001352:	f000 fc9d 	bl	8001c90 <_ZN5Modem8simA76724initEv>

	struct ModemData_Queue ModemData = { 0 };
 8001356:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800135a:	22d9      	movs	r2, #217	@ 0xd9
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f010 f9df 	bl	8011722 <memset>

	struct ControlData_Queue ControlData = {0};
 8001364:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001368:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800136c:	4618      	mov	r0, r3
 800136e:	2374      	movs	r3, #116	@ 0x74
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f010 f9d5 	bl	8011722 <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001378:	2301      	movs	r3, #1
 800137a:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 800137e:	2301      	movs	r3, #1
 8001380:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be

	enum routine mqtt_routine = net_enable;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 800138a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800138e:	334b      	adds	r3, #75	@ 0x4b
 8001390:	4aba      	ldr	r2, [pc, #744]	@ (800167c <_Z9ModemTaskPv+0x340>)
 8001392:	4614      	mov	r4, r2
 8001394:	469c      	mov	ip, r3
 8001396:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800139a:	4665      	mov	r5, ip
 800139c:	4626      	mov	r6, r4
 800139e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a0:	6028      	str	r0, [r5, #0]
 80013a2:	6069      	str	r1, [r5, #4]
 80013a4:	60aa      	str	r2, [r5, #8]
 80013a6:	60eb      	str	r3, [r5, #12]
 80013a8:	3410      	adds	r4, #16
 80013aa:	f10c 0c10 	add.w	ip, ip, #16
 80013ae:	4574      	cmp	r4, lr
 80013b0:	d1f3      	bne.n	800139a <_Z9ModemTaskPv+0x5e>
 80013b2:	4662      	mov	r2, ip
 80013b4:	4623      	mov	r3, r4
 80013b6:	cb03      	ldmia	r3!, {r0, r1}
 80013b8:	6010      	str	r0, [r2, #0]
 80013ba:	6051      	str	r1, [r2, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 80013c0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013c4:	3337      	adds	r3, #55	@ 0x37
 80013c6:	4aae      	ldr	r2, [pc, #696]	@ (8001680 <_Z9ModemTaskPv+0x344>)
 80013c8:	461c      	mov	r4, r3
 80013ca:	4613      	mov	r3, r2
 80013cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013ce:	6020      	str	r0, [r4, #0]
 80013d0:	6061      	str	r1, [r4, #4]
 80013d2:	60a2      	str	r2, [r4, #8]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 80013d8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013dc:	33c3      	adds	r3, #195	@ 0xc3
 80013de:	4aa9      	ldr	r2, [pc, #676]	@ (8001684 <_Z9ModemTaskPv+0x348>)
 80013e0:	6810      	ldr	r0, [r2, #0]
 80013e2:	6018      	str	r0, [r3, #0]
 80013e4:	8892      	ldrh	r2, [r2, #4]
 80013e6:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 80013e8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013ec:	33af      	adds	r3, #175	@ 0xaf
 80013ee:	49a6      	ldr	r1, [pc, #664]	@ (8001688 <_Z9ModemTaskPv+0x34c>)
 80013f0:	461a      	mov	r2, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	cb03      	ldmia	r3!, {r0, r1}
 80013f6:	6010      	str	r0, [r2, #0]
 80013f8:	6051      	str	r1, [r2, #4]
 80013fa:	8819      	ldrh	r1, [r3, #0]
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	8111      	strh	r1, [r2, #8]
 8001400:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 8001408:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800140c:	4619      	mov	r1, r3
 800140e:	489a      	ldr	r0, [pc, #616]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001410:	f000 fe2a 	bl	8002068 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 8001414:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001418:	330f      	adds	r3, #15
 800141a:	4619      	mov	r1, r3
 800141c:	4896      	ldr	r0, [pc, #600]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800141e:	f000 fe8d 	bl	800213c <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 8001422:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001426:	331e      	adds	r3, #30
 8001428:	4619      	mov	r1, r3
 800142a:	4893      	ldr	r0, [pc, #588]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800142c:	f000 ff6c 	bl	8002308 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 8001430:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001434:	332d      	adds	r3, #45	@ 0x2d
 8001436:	4619      	mov	r1, r3
 8001438:	488f      	ldr	r0, [pc, #572]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800143a:	f001 f959 	bl	80026f0 <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 800143e:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8001442:	4619      	mov	r1, r3
 8001444:	488c      	ldr	r0, [pc, #560]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001446:	f001 f8a3 	bl	8002590 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 800144a:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 800144e:	4619      	mov	r1, r3
 8001450:	4889      	ldr	r0, [pc, #548]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001452:	f001 f831 	bl	80024b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 8001456:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800145a:	4619      	mov	r1, r3
 800145c:	488b      	ldr	r0, [pc, #556]	@ (800168c <_Z9ModemTaskPv+0x350>)
 800145e:	f002 fe8f 	bl	8004180 <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 8001462:	2032      	movs	r0, #50	@ 0x32
 8001464:	f002 fe04 	bl	8004070 <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001468:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800146c:	4619      	mov	r1, r3
 800146e:	4888      	ldr	r0, [pc, #544]	@ (8001690 <_Z9ModemTaskPv+0x354>)
 8001470:	f002 fea3 	bl	80041ba <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001478:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 800147c:	2b03      	cmp	r3, #3
 800147e:	f200 8270 	bhi.w	8001962 <_Z9ModemTaskPv+0x626>
 8001482:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <_Z9ModemTaskPv+0x14c>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	08001581 	.word	0x08001581
 8001490:	080016a1 	.word	0x080016a1
 8001494:	080016f1 	.word	0x080016f1

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001498:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800149c:	330f      	adds	r3, #15
 800149e:	497d      	ldr	r1, [pc, #500]	@ (8001694 <_Z9ModemTaskPv+0x358>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff3d 	bl	8001320 <_ZSt6strstrPcPKc>
 80014a6:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <_Z9ModemTaskPv+0x184>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 80014ac:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80014b0:	330f      	adds	r3, #15
 80014b2:	4979      	ldr	r1, [pc, #484]	@ (8001698 <_Z9ModemTaskPv+0x35c>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff33 	bl	8001320 <_ZSt6strstrPcPKc>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01c      	beq.n	80014fa <_Z9ModemTaskPv+0x1be>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 80014c0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80014c4:	331e      	adds	r3, #30
 80014c6:	4973      	ldr	r1, [pc, #460]	@ (8001694 <_Z9ModemTaskPv+0x358>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff29 	bl	8001320 <_ZSt6strstrPcPKc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <_Z9ModemTaskPv+0x1ac>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 80014d4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80014d8:	331e      	adds	r3, #30
 80014da:	496f      	ldr	r1, [pc, #444]	@ (8001698 <_Z9ModemTaskPv+0x35c>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff1f 	bl	8001320 <_ZSt6strstrPcPKc>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <_Z9ModemTaskPv+0x1be>
					&& cpsiInfo != Modem::simA7672::no_service) {
 80014e8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80014ec:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <_Z9ModemTaskPv+0x1be>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <_Z9ModemTaskPv+0x1c0>
 80014fa:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 8232 	beq.w	8001966 <_Z9ModemTaskPv+0x62a>


				modeminfo = simA7672.setAPN(ModemData.apn);
 8001502:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001506:	3337      	adds	r3, #55	@ 0x37
 8001508:	4619      	mov	r1, r3
 800150a:	485b      	ldr	r0, [pc, #364]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800150c:	f000 fd00 	bl	8001f10 <_ZN5Modem8simA76726setAPNEPc>
 8001510:	4603      	mov	r3, r0
 8001512:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb

				simA7672.sslversionset();
 8001516:	4858      	ldr	r0, [pc, #352]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001518:	f001 fe52 	bl	80031c0 <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 800151c:	4856      	ldr	r0, [pc, #344]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800151e:	f001 fe8b 	bl	8003238 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 8001522:	4855      	ldr	r0, [pc, #340]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001524:	f001 fec4 	bl	80032b0 <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 8001528:	4853      	ldr	r0, [pc, #332]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800152a:	f001 fefd 	bl	8003328 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 800152e:	4852      	ldr	r0, [pc, #328]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001530:	f001 ff36 	bl	80033a0 <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 8001534:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8001538:	2b00      	cmp	r3, #0
 800153a:	f040 8214 	bne.w	8001966 <_Z9ModemTaskPv+0x62a>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 800153e:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001542:	2b02      	cmp	r3, #2
 8001544:	d108      	bne.n	8001558 <_Z9ModemTaskPv+0x21c>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001546:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 800154a:	4619      	mov	r1, r3
 800154c:	484a      	ldr	r0, [pc, #296]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800154e:	f001 fbe9 	bl	8002d24 <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001558:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <_Z9ModemTaskPv+0x23c>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001560:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001564:	4619      	mov	r1, r3
 8001566:	4844      	ldr	r0, [pc, #272]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001568:	f001 fb02 	bl	8002b70 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 800156c:	4842      	ldr	r0, [pc, #264]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800156e:	f001 fa37 	bl	80029e0 <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001572:	2301      	movs	r3, #1
 8001574:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					}

					mqtt_routine = mqtt_enable;
 8001578:	2301      	movs	r3, #1
 800157a:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd

				}

			}

			break;
 800157e:	e1f2      	b.n	8001966 <_Z9ModemTaskPv+0x62a>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001580:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001584:	330f      	adds	r3, #15
 8001586:	4943      	ldr	r1, [pc, #268]	@ (8001694 <_Z9ModemTaskPv+0x358>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fec9 	bl	8001320 <_ZSt6strstrPcPKc>
 800158e:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <_Z9ModemTaskPv+0x26c>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001594:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001598:	330f      	adds	r3, #15
 800159a:	493f      	ldr	r1, [pc, #252]	@ (8001698 <_Z9ModemTaskPv+0x35c>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff febf 	bl	8001320 <_ZSt6strstrPcPKc>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <_Z9ModemTaskPv+0x2ae>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 80015a8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80015ac:	331e      	adds	r3, #30
 80015ae:	4939      	ldr	r1, [pc, #228]	@ (8001694 <_Z9ModemTaskPv+0x358>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff feb5 	bl	8001320 <_ZSt6strstrPcPKc>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <_Z9ModemTaskPv+0x294>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 80015bc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80015c0:	331e      	adds	r3, #30
 80015c2:	4935      	ldr	r1, [pc, #212]	@ (8001698 <_Z9ModemTaskPv+0x35c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff feab 	bl	8001320 <_ZSt6strstrPcPKc>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00c      	beq.n	80015ea <_Z9ModemTaskPv+0x2ae>
					&& cpsiInfo != Modem::simA7672::no_service
 80015d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80015d4:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <_Z9ModemTaskPv+0x2ae>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 80015de:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_Z9ModemTaskPv+0x2ae>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <_Z9ModemTaskPv+0x2b0>
 80015ea:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 81bc 	beq.w	800196a <_Z9ModemTaskPv+0x62e>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 80015f2:	2100      	movs	r1, #0
 80015f4:	4820      	ldr	r0, [pc, #128]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 80015f6:	f000 fce3 	bl	8001fc0 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 80015fa:	2101      	movs	r1, #1
 80015fc:	481e      	ldr	r0, [pc, #120]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 80015fe:	f000 fcdf 	bl	8001fc0 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 8001602:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001606:	33d8      	adds	r3, #216	@ 0xd8
 8001608:	4619      	mov	r1, r3
 800160a:	481b      	ldr	r0, [pc, #108]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800160c:	f001 f978 	bl	8002900 <_ZN5Modem8simA76729mqttStartEPh>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001616:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <_Z9ModemTaskPv+0x326>

					mqttstartinfo = simA7672.mqttSetClient(
 800161e:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001622:	2301      	movs	r3, #1
 8001624:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <_Z9ModemTaskPv+0x360>)
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001628:	f001 fa40 	bl	8002aac <_ZN5Modem8simA767213mqttSetClientEhPch>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 8001632:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <_Z9ModemTaskPv+0x312>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 800163a:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 800163e:	4619      	mov	r1, r3
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001642:	f001 fd61 	bl	8003108 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 8001646:	2302      	movs	r3, #2
 8001648:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					simA7672.mqttStop();
				}

			}

			break;
 800164c:	e18d      	b.n	800196a <_Z9ModemTaskPv+0x62e>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 800164e:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001652:	4619      	mov	r1, r3
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001656:	f001 fa8b 	bl	8002b70 <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 800165a:	4807      	ldr	r0, [pc, #28]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800165c:	f001 f9c0 	bl	80029e0 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001660:	e183      	b.n	800196a <_Z9ModemTaskPv+0x62e>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001662:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001666:	4619      	mov	r1, r3
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 800166a:	f001 fa81 	bl	8002b70 <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 800166e:	4802      	ldr	r0, [pc, #8]	@ (8001678 <_Z9ModemTaskPv+0x33c>)
 8001670:	f001 f9b6 	bl	80029e0 <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001674:	e179      	b.n	800196a <_Z9ModemTaskPv+0x62e>
 8001676:	bf00      	nop
 8001678:	20000560 	.word	0x20000560
 800167c:	08013a08 	.word	0x08013a08
 8001680:	08013a44 	.word	0x08013a44
 8001684:	08013a54 	.word	0x08013a54
 8001688:	08013a5c 	.word	0x08013a5c
 800168c:	200017d8 	.word	0x200017d8
 8001690:	200018a8 	.word	0x200018a8
 8001694:	08014228 	.word	0x08014228
 8001698:	08014234 	.word	0x08014234
 800169c:	08013a68 	.word	0x08013a68
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 80016a0:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 8162 	bne.w	800196e <_Z9ModemTaskPv+0x632>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 80016aa:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	f000 815d 	beq.w	800196e <_Z9ModemTaskPv+0x632>

				mqttserverinfo = simA7672.mqttConnectServer(
 80016b4:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 80016b8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016bc:	334b      	adds	r3, #75	@ 0x4b
 80016be:	461a      	mov	r2, r3
 80016c0:	48ad      	ldr	r0, [pc, #692]	@ (8001978 <_Z9ModemTaskPv+0x63c>)
 80016c2:	f001 fab1 	bl	8002c28 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 80016cc:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d103      	bne.n	80016dc <_Z9ModemTaskPv+0x3a0>

					mqtt_routine = mqtt_loop;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
					mqtt_routine = net_enable;
				}

			}

			break;
 80016da:	e148      	b.n	800196e <_Z9ModemTaskPv+0x632>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80016dc:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 80016e0:	4619      	mov	r1, r3
 80016e2:	48a5      	ldr	r0, [pc, #660]	@ (8001978 <_Z9ModemTaskPv+0x63c>)
 80016e4:	f001 fb1e 	bl	8002d24 <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
			break;
 80016ee:	e13e      	b.n	800196e <_Z9ModemTaskPv+0x632>
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 80016f0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016f4:	334b      	adds	r3, #75	@ 0x4b
 80016f6:	4619      	mov	r1, r3
 80016f8:	489f      	ldr	r0, [pc, #636]	@ (8001978 <_Z9ModemTaskPv+0x63c>)
 80016fa:	f001 f889 	bl	8002810 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
			mqtt_counter++;
 8001704:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001708:	3301      	adds	r3, #1
 800170a:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 800170e:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001712:	2b02      	cmp	r3, #2
 8001714:	d010      	beq.n	8001738 <_Z9ModemTaskPv+0x3fc>
 8001716:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 800171a:	2b03      	cmp	r3, #3
 800171c:	d90c      	bls.n	8001738 <_Z9ModemTaskPv+0x3fc>
				ModemData.internet = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 8001724:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 8001728:	4619      	mov	r1, r3
 800172a:	4893      	ldr	r0, [pc, #588]	@ (8001978 <_Z9ModemTaskPv+0x63c>)
 800172c:	f001 fafa 	bl	8002d24 <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 8001736:	e11c      	b.n	8001972 <_Z9ModemTaskPv+0x636>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 8001738:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 800173c:	2b02      	cmp	r3, #2
 800173e:	f040 8118 	bne.w	8001972 <_Z9ModemTaskPv+0x636>
				ModemData.internet = 1;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
				mqtt_counter = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800174e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001752:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	663b      	str	r3, [r7, #96]	@ 0x60
						 ,ControlData.V_1
 800175a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001762:	695b      	ldr	r3, [r3, #20]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe feef 	bl	8000548 <__aeabi_f2d>
 800176a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						 ,ControlData.V_2
 800176e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001772:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001776:	699b      	ldr	r3, [r3, #24]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						 ,ControlData.V_3
 8001782:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001786:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800178a:	69db      	ldr	r3, [r3, #28]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fedb 	bl	8000548 <__aeabi_f2d>
 8001792:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						 ,ControlData.I_1
 8001796:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800179a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800179e:	6a1b      	ldr	r3, [r3, #32]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						 ,ControlData.I_2
 80017aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fec7 	bl	8000548 <__aeabi_f2d>
 80017ba:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						 ,ControlData.I_3
 80017be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe febd 	bl	8000548 <__aeabi_f2d>
 80017ce:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						 ,ControlData.P_1
 80017d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe feb3 	bl	8000548 <__aeabi_f2d>
 80017e2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						 ,ControlData.P_2
 80017e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017ea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fea9 	bl	8000548 <__aeabi_f2d>
 80017f6:	e9c7 0108 	strd	r0, r1, [r7, #32]
						 ,ControlData.P_3
 80017fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017fe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe9f 	bl	8000548 <__aeabi_f2d>
 800180a:	e9c7 0106 	strd	r0, r1, [r7, #24]
						 ,ControlData.Energy
 800180e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001812:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe95 	bl	8000548 <__aeabi_f2d>
 800181e:	4682      	mov	sl, r0
 8001820:	468b      	mov	fp, r1
						 ,ControlData.Freq
 8001822:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001826:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800182a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe8b 	bl	8000548 <__aeabi_f2d>
 8001832:	4680      	mov	r8, r0
 8001834:	4689      	mov	r9, r1
						 ,ControlData.sourceIdentification
 8001836:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800183a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800183e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001842:	617b      	str	r3, [r7, #20]
						 ,ControlData.fuelPer
 8001844:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001848:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800184c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001850:	613b      	str	r3, [r7, #16]
						 ,ControlData.fuelConsp
 8001852:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001856:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe73 	bl	8000548 <__aeabi_f2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800186a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800186e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001870:	60fa      	str	r2, [r7, #12]
 8001872:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001876:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800187a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001882:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001886:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8001888:	607e      	str	r6, [r7, #4]
 800188a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800188e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001892:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001894:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001898:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800189c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800189e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ac:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b2:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 80018b6:	9320      	str	r3, [sp, #128]	@ 0x80
 80018b8:	921f      	str	r2, [sp, #124]	@ 0x7c
 80018ba:	911e      	str	r1, [sp, #120]	@ 0x78
 80018bc:	901d      	str	r0, [sp, #116]	@ 0x74
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	921c      	str	r2, [sp, #112]	@ 0x70
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	911b      	str	r1, [sp, #108]	@ 0x6c
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	921a      	str	r2, [sp, #104]	@ 0x68
 80018ca:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	9216      	str	r2, [sp, #88]	@ 0x58
 80018d6:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 80018da:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 80018de:	ed97 7b06 	vldr	d7, [r7, #24]
 80018e2:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80018e6:	ed97 7b08 	vldr	d7, [r7, #32]
 80018ea:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80018ee:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80018f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80018f6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80018fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80018fe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001902:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001906:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800190a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800190e:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001912:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001916:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800191a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800191e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001922:	ed8d 7b00 	vstr	d7, [sp]
 8001926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001928:	4632      	mov	r2, r6
 800192a:	4914      	ldr	r1, [pc, #80]	@ (800197c <_Z9ModemTaskPv+0x640>)
 800192c:	4814      	ldr	r0, [pc, #80]	@ (8001980 <_Z9ModemTaskPv+0x644>)
 800192e:	f00f fe95 	bl	801165c <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 8001932:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001936:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800193a:	f103 02c3 	add.w	r2, r3, #195	@ 0xc3
 800193e:	23ff      	movs	r3, #255	@ 0xff
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <_Z9ModemTaskPv+0x648>)
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <_Z9ModemTaskPv+0x63c>)
 8001946:	f001 fa69 	bl	8002e1c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 800194a:	4603      	mov	r3, r0
 800194c:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 800194e:	f897 11b8 	ldrb.w	r1, [r7, #440]	@ 0x1b8
 8001952:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001956:	33c3      	adds	r3, #195	@ 0xc3
 8001958:	461a      	mov	r2, r3
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <_Z9ModemTaskPv+0x63c>)
 800195c:	f001 fb1a 	bl	8002f94 <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 8001960:	e007      	b.n	8001972 <_Z9ModemTaskPv+0x636>
		}

		default:
			break;
 8001962:	bf00      	nop
 8001964:	e550      	b.n	8001408 <_Z9ModemTaskPv+0xcc>
			break;
 8001966:	bf00      	nop
 8001968:	e54e      	b.n	8001408 <_Z9ModemTaskPv+0xcc>
			break;
 800196a:	bf00      	nop
 800196c:	e54c      	b.n	8001408 <_Z9ModemTaskPv+0xcc>
			break;
 800196e:	bf00      	nop
 8001970:	e54a      	b.n	8001408 <_Z9ModemTaskPv+0xcc>
			break;
 8001972:	bf00      	nop
		simA7672.getSim(ModemData.pin);
 8001974:	e548      	b.n	8001408 <_Z9ModemTaskPv+0xcc>
 8001976:	bf00      	nop
 8001978:	20000560 	.word	0x20000560
 800197c:	08013a70 	.word	0x08013a70
 8001980:	20000d60 	.word	0x20000d60
 8001984:	20001590 	.word	0x20001590

08001988 <_Z41__static_initialization_and_destruction_0ii>:



	}

}
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199e:	4293      	cmp	r3, r2
 80019a0:	d103      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_U);
 80019a2:	4904      	ldr	r1, [pc, #16]	@ (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80019a6:	f000 f90f 	bl	8001bc8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200020a0 	.word	0x200020a0
 80019b8:	20000560 	.word	0x20000560

080019bc <_GLOBAL__sub_I_simA7672>:
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
 80019c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ffdf 	bl	8001988 <_Z41__static_initialization_and_destruction_0ii>
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN8UniqueID12CharToHexascEPhh>:


const char kaHexAsc[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
     *pPos++ = kaHexAsc[Wert >> 4];
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80019e2:	5c99      	ldrb	r1, [r3, r2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	460a      	mov	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
     *pPos = kaHexAsc[Wert & 0x0f];
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 80019f6:	5cd2      	ldrb	r2, [r2, r3]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	701a      	strb	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	08014240 	.word	0x08014240

08001a0c <_ZN8UniqueID6GetUidEv>:

char *UniqueID::GetUid()
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001a12:	f007 f849 	bl	8008aa8 <HAL_GetUIDw1>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001a1c:	f007 f844 	bl	8008aa8 <HAL_GetUIDw1>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001a28:	4c1c      	ldr	r4, [pc, #112]	@ (8001a9c <_ZN8UniqueID6GetUidEv+0x90>)
 8001a2a:	f007 f849 	bl	8008ac0 <HAL_GetUIDw2>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b23      	cmp	r3, #35	@ 0x23
 8001a36:	d909      	bls.n	8001a4c <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b3d      	cmp	r3, #61	@ 0x3d
 8001a3c:	bf28      	it	cs
 8001a3e:	233d      	movcs	r3, #61	@ 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	333d      	adds	r3, #61	@ 0x3d
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a48:	71da      	strb	r2, [r3, #7]
 8001a4a:	e00b      	b.n	8001a64 <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d901      	bls.n	8001a56 <_ZN8UniqueID6GetUidEv+0x4a>
 8001a52:	2241      	movs	r2, #65	@ 0x41
 8001a54:	e000      	b.n	8001a58 <_ZN8UniqueID6GetUidEv+0x4c>
 8001a56:	2230      	movs	r2, #48	@ 0x30
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a62:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001a64:	f007 f814 	bl	8008a90 <HAL_GetUIDw0>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <_ZN8UniqueID6GetUidEv+0x94>)
 8001a72:	f7ff ffab 	bl	80019cc <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001a76:	f007 f80b 	bl	8008a90 <HAL_GetUIDw0>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <_ZN8UniqueID6GetUidEv+0x98>)
 8001a82:	f7ff ffa3 	bl	80019cc <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001a8c:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20001914 	.word	0x20001914
 8001a9c:	20001917 	.word	0x20001917
 8001aa0:	2000191c 	.word	0x2000191c
 8001aa4:	2000191e 	.word	0x2000191e

08001aa8 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8001aac:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <_Z11app_mainCppv+0x2c>)
 8001aae:	f002 fb16 	bl	80040de <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ControlTaskHandler.createTask();
 8001ab2:	4809      	ldr	r0, [pc, #36]	@ (8001ad8 <_Z11app_mainCppv+0x30>)
 8001ab4:	f002 fb13 	bl	80040de <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    DisplayTaskHandler.createTask();
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <_Z11app_mainCppv+0x34>)
 8001aba:	f002 fb10 	bl	80040de <_ZN11System_Rtos14freertos_Tasks10createTaskEv>

    ModemDataQueue.queueCreate();
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <_Z11app_mainCppv+0x38>)
 8001ac0:	f002 fb42 	bl	8004148 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    ControlDataQueue.queueCreate();
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <_Z11app_mainCppv+0x3c>)
 8001ac6:	f002 fb3f 	bl	8004148 <_ZN11System_Rtos15freertos_queues11queueCreateEv>



    button::btn_init();
 8001aca:	f004 f951 	bl	8005d70 <_ZN6button8btn_initEv>


}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20001690 	.word	0x20001690
 8001ad8:	200016b4 	.word	0x200016b4
 8001adc:	200016d8 	.word	0x200016d8
 8001ae0:	200017d8 	.word	0x200017d8
 8001ae4:	200018a8 	.word	0x200018a8

08001ae8 <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    	app_mainCpp();
 8001aec:	f7ff ffdc 	bl	8001aa8 <_Z11app_mainCppv>
    }
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_Z41__static_initialization_and_destruction_0ii>:


}
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d136      	bne.n	8001b72 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d131      	bne.n	8001b72 <_Z41__static_initialization_and_destruction_0ii+0x7e>
System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 8001b0e:	2318      	movs	r3, #24
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b1a:	4a18      	ldr	r2, [pc, #96]	@ (8001b7c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001b1c:	4918      	ldr	r1, [pc, #96]	@ (8001b80 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001b1e:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b20:	f002 fabc 	bl	800409c <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlTaskHandler(ControlTask,"Control",_StackSize_Control, (void*) 1,24);
 8001b24:	2318      	movs	r3, #24
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b30:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001b32:	4916      	ldr	r1, [pc, #88]	@ (8001b8c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001b34:	4816      	ldr	r0, [pc, #88]	@ (8001b90 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001b36:	f002 fab1 	bl	800409c <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks DisplayTaskHandler(DisplayTask,"Display",_StackSize_Display, (void*) 1,24);
 8001b3a:	2318      	movs	r3, #24
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b46:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001b48:	4913      	ldr	r1, [pc, #76]	@ (8001b98 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001b4a:	4814      	ldr	r0, [pc, #80]	@ (8001b9c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001b4c:	f002 faa6 	bl	800409c <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_queues ModemDataQueue(1,sizeof(struct ModemData_Queue),	queuebuffer);
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001b52:	22d9      	movs	r2, #217	@ 0xd9
 8001b54:	2101      	movs	r1, #1
 8001b56:	4813      	ldr	r0, [pc, #76]	@ (8001ba4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001b58:	f002 fadb 	bl	8004112 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues ControlDataQueue(1,sizeof(struct ControlData_Queue),	queuebuffer_1);
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001b5e:	2274      	movs	r2, #116	@ 0x74
 8001b60:	2101      	movs	r1, #1
 8001b62:	4812      	ldr	r0, [pc, #72]	@ (8001bac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001b64:	f002 fad5 	bl	8004112 <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_rtc::stmRTC stmRTC(&hrtc,5);
 8001b68:	2205      	movs	r2, #5
 8001b6a:	4911      	ldr	r1, [pc, #68]	@ (8001bb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001b6c:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001b6e:	f002 fc09 	bl	8004384 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	08013d4c 	.word	0x08013d4c
 8001b80:	0800133d 	.word	0x0800133d
 8001b84:	20001690 	.word	0x20001690
 8001b88:	08013d54 	.word	0x08013d54
 8001b8c:	08000ed9 	.word	0x08000ed9
 8001b90:	200016b4 	.word	0x200016b4
 8001b94:	08013d5c 	.word	0x08013d5c
 8001b98:	080012a9 	.word	0x080012a9
 8001b9c:	200016d8 	.word	0x200016d8
 8001ba0:	200016fc 	.word	0x200016fc
 8001ba4:	200017d8 	.word	0x200017d8
 8001ba8:	20001834 	.word	0x20001834
 8001bac:	200018a8 	.word	0x200018a8
 8001bb0:	20001f04 	.word	0x20001f04
 8001bb4:	20001904 	.word	0x20001904

08001bb8 <_GLOBAL__sub_I_ModemTaskHandler>:
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff ff97 	bl	8001af4 <_Z41__static_initialization_and_destruction_0ii>
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f00f fda0 	bl	8011722 <memset>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00f fd97 	bl	8011722 <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c0a:	6053      	str	r3, [r2, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001c12:	3304      	adds	r3, #4
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fe3b 	bl	8004892 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001c22:	3308      	adds	r3, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fe83 	bl	8004930 <_ZN10System_sys16Parsing_CheckingC1Ev>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c30:	461a      	mov	r2, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4a0e      	ldr	r2, [pc, #56]	@ (8001c84 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c5c:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d902      	bls.n	8001c6c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 8001c6c:	4906      	ldr	r1, [pc, #24]	@ (8001c88 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 8001c6e:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 8001c70:	f002 fcda 	bl	8004628 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000193c 	.word	0x2000193c
 8001c84:	20001924 	.word	0x20001924
 8001c88:	08003a69 	.word	0x08003a69
 8001c8c:	08003a05 	.word	0x08003a05

08001c90 <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	230a      	movs	r3, #10
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca8:	2204      	movs	r2, #4
 8001caa:	498f      	ldr	r1, [pc, #572]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x258>)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f001 fbb3 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f001 fcda 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4985      	ldr	r1, [pc, #532]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x258>)
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f001 fba0 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cdc:	2100      	movs	r1, #0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f001 fcc7 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	230a      	movs	r3, #10
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	497c      	ldr	r1, [pc, #496]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x258>)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f001 fb8d 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f001 fcb4 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	230a      	movs	r3, #10
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	220b      	movs	r2, #11
 8001d1c:	4973      	ldr	r1, [pc, #460]	@ (8001eec <_ZN5Modem8simA76724initEv+0x25c>)
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f001 fb7a 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d28:	2100      	movs	r1, #0
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 fca1 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 8001d34:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001d38:	f002 f99a 	bl	8004070 <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	230a      	movs	r3, #10
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d48:	2204      	movs	r2, #4
 8001d4a:	4967      	ldr	r1, [pc, #412]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x258>)
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f001 fb63 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d56:	2100      	movs	r1, #0
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 fc8a 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001d62:	2301      	movs	r3, #1
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	230a      	movs	r3, #10
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6e:	2204      	movs	r2, #4
 8001d70:	495d      	ldr	r1, [pc, #372]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x258>)
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f001 fb50 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f001 fc77 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001d88:	2301      	movs	r3, #1
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	2204      	movs	r2, #4
 8001d96:	4954      	ldr	r1, [pc, #336]	@ (8001ee8 <_ZN5Modem8simA76724initEv+0x258>)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f001 fb3d 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f001 fc64 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 8001dae:	2301      	movs	r3, #1
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	230a      	movs	r3, #10
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dba:	2207      	movs	r2, #7
 8001dbc:	494c      	ldr	r1, [pc, #304]	@ (8001ef0 <_ZN5Modem8simA76724initEv+0x260>)
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f001 fb2a 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc8:	2100      	movs	r1, #0
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f001 fc51 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	230a      	movs	r3, #10
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de0:	2206      	movs	r2, #6
 8001de2:	4944      	ldr	r1, [pc, #272]	@ (8001ef4 <_ZN5Modem8simA76724initEv+0x264>)
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f001 fb17 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f001 fc3e 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	230a      	movs	r3, #10
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e06:	220b      	movs	r2, #11
 8001e08:	493b      	ldr	r1, [pc, #236]	@ (8001ef8 <_ZN5Modem8simA76724initEv+0x268>)
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f001 fb04 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e14:	2100      	movs	r1, #0
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f001 fc2b 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 8001e20:	2301      	movs	r3, #1
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	230a      	movs	r3, #10
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2c:	220c      	movs	r2, #12
 8001e2e:	4933      	ldr	r1, [pc, #204]	@ (8001efc <_ZN5Modem8simA76724initEv+0x26c>)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 faf1 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f001 fc18 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 8001e46:	2301      	movs	r3, #1
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	2218      	movs	r2, #24
 8001e54:	492a      	ldr	r1, [pc, #168]	@ (8001f00 <_ZN5Modem8simA76724initEv+0x270>)
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f001 fade 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f001 fc05 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	230a      	movs	r3, #10
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e78:	220b      	movs	r2, #11
 8001e7a:	4922      	ldr	r1, [pc, #136]	@ (8001f04 <_ZN5Modem8simA76724initEv+0x274>)
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f001 facb 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	2100      	movs	r1, #0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 fbf2 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 8001e92:	2301      	movs	r3, #1
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	230a      	movs	r3, #10
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9e:	220b      	movs	r2, #11
 8001ea0:	4919      	ldr	r1, [pc, #100]	@ (8001f08 <_ZN5Modem8simA76724initEv+0x278>)
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f001 fab8 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f001 fbdf 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	4911      	ldr	r1, [pc, #68]	@ (8001f0c <_ZN5Modem8simA76724initEv+0x27c>)
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f001 faa5 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 fbcc 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]

	return stat;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]

}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	08014250 	.word	0x08014250
 8001eec:	08014258 	.word	0x08014258
 8001ef0:	0801430c 	.word	0x0801430c
 8001ef4:	08014314 	.word	0x08014314
 8001ef8:	08014264 	.word	0x08014264
 8001efc:	08014270 	.word	0x08014270
 8001f00:	08014280 	.word	0x08014280
 8001f04:	0801429c 	.word	0x0801429c
 8001f08:	080142a8 	.word	0x080142a8
 8001f0c:	080142b4 	.word	0x080142b4

08001f10 <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b092      	sub	sp, #72	@ 0x48
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	222e      	movs	r2, #46	@ 0x2e
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00f fbf8 	bl	8011722 <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4920      	ldr	r1, [pc, #128]	@ (8001fbc <_ZN5Modem8simA76726setAPNEPc+0xac>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00f fb8e 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f993 	bl	8000270 <strlen>
 8001f4a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	f107 010c 	add.w	r1, r7, #12
 8001f52:	2301      	movs	r3, #1
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	230a      	movs	r3, #10
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f001 fa5a 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8001f64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f001 fb81 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001f76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <_ZN5Modem8simA76726setAPNEPc+0x8e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001f84:	3308      	adds	r3, #8
 8001f86:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f8e:	8a92      	ldrh	r2, [r2, #20]
 8001f90:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fcd8 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <_ZN5Modem8simA76726setAPNEPc+0x92>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <_ZN5Modem8simA76726setAPNEPc+0x94>
 8001fa2:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 8001fae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3740      	adds	r7, #64	@ 0x40
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	08013d74 	.word	0x08013d74

08001fc0 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	@ 0x28
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	491e      	ldr	r1, [pc, #120]	@ (8002064 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f00f fb36 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f93b 	bl	8000270 <strlen>
 8001ffa:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	f107 0108 	add.w	r1, r7, #8
 8002002:	2301      	movs	r3, #1
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	230a      	movs	r3, #10
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f001 fa02 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002018:	2100      	movs	r1, #0
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f001 fb29 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002020:	4603      	mov	r3, r0
 8002022:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002030:	3308      	adds	r3, #8
 8002032:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800203a:	8a92      	ldrh	r2, [r2, #20]
 800203c:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800203e:	4618      	mov	r0, r3
 8002040:	f002 fc82 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 800204e:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 8002054:	2301      	movs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8002058:	7ffb      	ldrb	r3, [r7, #31]

}
 800205a:	4618      	mov	r0, r3
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	08013d90 	.word	0x08013d90

08002068 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af04      	add	r7, sp, #16
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 8002072:	2301      	movs	r3, #1
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	230a      	movs	r3, #10
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207e:	220a      	movs	r2, #10
 8002080:	492b      	ldr	r1, [pc, #172]	@ (8002130 <_ZN5Modem8simA76726getSimEPc+0xc8>)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f001 f9c8 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002088:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800208c:	2100      	movs	r1, #0
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 faef 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d111      	bne.n	80020c2 <_ZN5Modem8simA76726getSimEPc+0x5a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80020a4:	3308      	adds	r3, #8
 80020a6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ae:	8a92      	ldrh	r2, [r2, #20]
 80020b0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fc48 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <_ZN5Modem8simA76726getSimEPc+0x5a>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <_ZN5Modem8simA76726getSimEPc+0x5c>
 80020c2:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d024      	beq.n	8002112 <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80020ce:	3008      	adds	r0, #8
 80020d0:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d8:	8a9b      	ldrh	r3, [r3, #20]
 80020da:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	230d      	movs	r3, #13
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	233a      	movs	r3, #58	@ 0x3a
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <_ZN5Modem8simA76726getSimEPc+0xcc>)
 80020ea:	f002 fc53 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80020ee:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d113      	bne.n	8002126 <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	490d      	ldr	r1, [pc, #52]	@ (8002138 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	cb03      	ldmia	r3!, {r0, r1}
 8002108:	6010      	str	r0, [r2, #0]
 800210a:	6051      	str	r1, [r2, #4]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	7213      	strb	r3, [r2, #8]
 8002110:	e00a      	b.n	8002128 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	4908      	ldr	r1, [pc, #32]	@ (8002138 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002116:	461a      	mov	r2, r3
 8002118:	460b      	mov	r3, r1
 800211a:	cb03      	ldmia	r3!, {r0, r1}
 800211c:	6010      	str	r0, [r2, #0]
 800211e:	6051      	str	r1, [r2, #4]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	7213      	strb	r3, [r2, #8]
 8002124:	e000      	b.n	8002128 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 8002126:	bf00      	nop
	}

}
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	080142c4 	.word	0x080142c4
 8002134:	08013da0 	.word	0x08013da0
 8002138:	08013da8 	.word	0x08013da8

0800213c <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af04      	add	r7, sp, #16
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	230a      	movs	r3, #10
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	220a      	movs	r2, #10
 8002154:	4961      	ldr	r1, [pc, #388]	@ (80022dc <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 f95e 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800215c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002160:	2100      	movs	r1, #0
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f001 fa85 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002168:	4603      	mov	r3, r0
 800216a:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d111      	bne.n	8002196 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002178:	3308      	adds	r3, #8
 800217a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002182:	8a92      	ldrh	r2, [r2, #20]
 8002184:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fbde 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 8002196:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8093 	beq.w	80022c4 <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80021a4:	3008      	adds	r0, #8
 80021a6:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ae:	8a9b      	ldrh	r3, [r3, #20]
 80021b0:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	9302      	str	r3, [sp, #8]
 80021b6:	230d      	movs	r3, #13
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	232c      	movs	r3, #44	@ 0x2c
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4b48      	ldr	r3, [pc, #288]	@ (80022e0 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 80021c0:	f002 fbe8 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80021c4:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d06d      	beq.n	80022b0 <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b30      	subs	r3, #48	@ 0x30
 80021da:	2b07      	cmp	r3, #7
 80021dc:	d85d      	bhi.n	800229a <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 80021de:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	08002205 	.word	0x08002205
 80021e8:	08002215 	.word	0x08002215
 80021ec:	08002229 	.word	0x08002229
 80021f0:	0800223d 	.word	0x0800223d
 80021f4:	08002255 	.word	0x08002255
 80021f8:	08002265 	.word	0x08002265
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002287 	.word	0x08002287
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4937      	ldr	r1, [pc, #220]	@ (80022e4 <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 8002208:	461a      	mov	r2, r3
 800220a:	460b      	mov	r3, r1
 800220c:	cb03      	ldmia	r3!, {r0, r1}
 800220e:	6010      	str	r0, [r2, #0]
 8002210:	6051      	str	r1, [r2, #4]

				break;
 8002212:	e04c      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4934      	ldr	r1, [pc, #208]	@ (80022e8 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 8002218:	461a      	mov	r2, r3
 800221a:	460b      	mov	r3, r1
 800221c:	cb03      	ldmia	r3!, {r0, r1}
 800221e:	6010      	str	r0, [r2, #0]
 8002220:	6051      	str	r1, [r2, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	7213      	strb	r3, [r2, #8]

				break;
 8002226:	e042      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4930      	ldr	r1, [pc, #192]	@ (80022ec <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 800222c:	461a      	mov	r2, r3
 800222e:	460b      	mov	r3, r1
 8002230:	cb03      	ldmia	r3!, {r0, r1}
 8002232:	6010      	str	r0, [r2, #0]
 8002234:	6051      	str	r1, [r2, #4]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	8113      	strh	r3, [r2, #8]

				break;
 800223a:	e038      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	492c      	ldr	r1, [pc, #176]	@ (80022f0 <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 8002240:	461a      	mov	r2, r3
 8002242:	460b      	mov	r3, r1
 8002244:	cb03      	ldmia	r3!, {r0, r1}
 8002246:	6010      	str	r0, [r2, #0]
 8002248:	6051      	str	r1, [r2, #4]
 800224a:	8819      	ldrh	r1, [r3, #0]
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	8111      	strh	r1, [r2, #8]
 8002250:	7293      	strb	r3, [r2, #10]

				break;
 8002252:	e02c      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4927      	ldr	r1, [pc, #156]	@ (80022f4 <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8002258:	461a      	mov	r2, r3
 800225a:	460b      	mov	r3, r1
 800225c:	cb03      	ldmia	r3!, {r0, r1}
 800225e:	6010      	str	r0, [r2, #0]
 8002260:	6051      	str	r1, [r2, #4]

				break;
 8002262:	e024      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4a24      	ldr	r2, [pc, #144]	@ (80022f8 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 8002268:	461c      	mov	r4, r3
 800226a:	4613      	mov	r3, r2
 800226c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800226e:	6020      	str	r0, [r4, #0]
 8002270:	6061      	str	r1, [r4, #4]
 8002272:	60a2      	str	r2, [r4, #8]

				break;
 8002274:	e01b      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4920      	ldr	r1, [pc, #128]	@ (80022fc <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 800227a:	461a      	mov	r2, r3
 800227c:	460b      	mov	r3, r1
 800227e:	cb03      	ldmia	r3!, {r0, r1}
 8002280:	6010      	str	r0, [r2, #0]
 8002282:	6051      	str	r1, [r2, #4]

				break;
 8002284:	e013      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	491d      	ldr	r1, [pc, #116]	@ (8002300 <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	cb03      	ldmia	r3!, {r0, r1}
 8002290:	6010      	str	r0, [r2, #0]
 8002292:	6051      	str	r1, [r2, #4]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	7213      	strb	r3, [r2, #8]

				break;
 8002298:	e009      	b.n	80022ae <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	4919      	ldr	r1, [pc, #100]	@ (8002304 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 800229e:	461a      	mov	r2, r3
 80022a0:	460b      	mov	r3, r1
 80022a2:	cb03      	ldmia	r3!, {r0, r1}
 80022a4:	6010      	str	r0, [r2, #0]
 80022a6:	6051      	str	r1, [r2, #4]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	7213      	strb	r3, [r2, #8]

				break;
 80022ac:	bf00      	nop
			}
			}
			return;
 80022ae:	e012      	b.n	80022d6 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4914      	ldr	r1, [pc, #80]	@ (8002304 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80022b4:	461a      	mov	r2, r3
 80022b6:	460b      	mov	r3, r1
 80022b8:	cb03      	ldmia	r3!, {r0, r1}
 80022ba:	6010      	str	r0, [r2, #0]
 80022bc:	6051      	str	r1, [r2, #4]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	7213      	strb	r3, [r2, #8]
 80022c2:	e008      	b.n	80022d6 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	490f      	ldr	r1, [pc, #60]	@ (8002304 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80022c8:	461a      	mov	r2, r3
 80022ca:	460b      	mov	r3, r1
 80022cc:	cb03      	ldmia	r3!, {r0, r1}
 80022ce:	6010      	str	r0, [r2, #0]
 80022d0:	6051      	str	r1, [r2, #4]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	7213      	strb	r3, [r2, #8]
	}

}
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	080142d0 	.word	0x080142d0
 80022e0:	08013db4 	.word	0x08013db4
 80022e4:	08013dbc 	.word	0x08013dbc
 80022e8:	08013dc4 	.word	0x08013dc4
 80022ec:	08013dd0 	.word	0x08013dd0
 80022f0:	08013ddc 	.word	0x08013ddc
 80022f4:	08013de8 	.word	0x08013de8
 80022f8:	08013df0 	.word	0x08013df0
 80022fc:	08013dfc 	.word	0x08013dfc
 8002300:	08013e04 	.word	0x08013e04
 8002304:	08013da8 	.word	0x08013da8

08002308 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af04      	add	r7, sp, #16
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 8002312:	2301      	movs	r3, #1
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	230a      	movs	r3, #10
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231e:	220b      	movs	r2, #11
 8002320:	495b      	ldr	r1, [pc, #364]	@ (8002490 <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 f878 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002328:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800232c:	2100      	movs	r1, #0
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 f99f 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d111      	bne.n	8002362 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002344:	3308      	adds	r3, #8
 8002346:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800234e:	8a92      	ldrh	r2, [r2, #20]
 8002350:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002352:	4618      	mov	r0, r3
 8002354:	f002 faf8 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 8002362:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8087 	beq.w	8002478 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002370:	3008      	adds	r0, #8
 8002372:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800237a:	8a9b      	ldrh	r3, [r3, #20]
 800237c:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	230d      	movs	r3, #13
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	232c      	movs	r3, #44	@ 0x2c
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4b42      	ldr	r3, [pc, #264]	@ (8002494 <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 800238c:	f002 fb02 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002390:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf0c      	ite	eq
 8002396:	2301      	moveq	r3, #1
 8002398:	2300      	movne	r3, #0
 800239a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800239c:	2b00      	cmp	r3, #0
 800239e:	d061      	beq.n	8002464 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3b30      	subs	r3, #48	@ 0x30
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d851      	bhi.n	800244e <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 80023aa:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023cd 	.word	0x080023cd
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	080023f1 	.word	0x080023f1
 80023bc:	08002405 	.word	0x08002405
 80023c0:	0800241d 	.word	0x0800241d
 80023c4:	0800242d 	.word	0x0800242d
 80023c8:	0800243f 	.word	0x0800243f
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4932      	ldr	r1, [pc, #200]	@ (8002498 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 80023d0:	461a      	mov	r2, r3
 80023d2:	460b      	mov	r3, r1
 80023d4:	cb03      	ldmia	r3!, {r0, r1}
 80023d6:	6010      	str	r0, [r2, #0]
 80023d8:	6051      	str	r1, [r2, #4]

				break;
 80023da:	e042      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	492f      	ldr	r1, [pc, #188]	@ (800249c <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 80023e0:	461a      	mov	r2, r3
 80023e2:	460b      	mov	r3, r1
 80023e4:	cb03      	ldmia	r3!, {r0, r1}
 80023e6:	6010      	str	r0, [r2, #0]
 80023e8:	6051      	str	r1, [r2, #4]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	7213      	strb	r3, [r2, #8]

				break;
 80023ee:	e038      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	492b      	ldr	r1, [pc, #172]	@ (80024a0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 80023f4:	461a      	mov	r2, r3
 80023f6:	460b      	mov	r3, r1
 80023f8:	cb03      	ldmia	r3!, {r0, r1}
 80023fa:	6010      	str	r0, [r2, #0]
 80023fc:	6051      	str	r1, [r2, #4]
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	8113      	strh	r3, [r2, #8]

				break;
 8002402:	e02e      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4927      	ldr	r1, [pc, #156]	@ (80024a4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 8002408:	461a      	mov	r2, r3
 800240a:	460b      	mov	r3, r1
 800240c:	cb03      	ldmia	r3!, {r0, r1}
 800240e:	6010      	str	r0, [r2, #0]
 8002410:	6051      	str	r1, [r2, #4]
 8002412:	8819      	ldrh	r1, [r3, #0]
 8002414:	789b      	ldrb	r3, [r3, #2]
 8002416:	8111      	strh	r1, [r2, #8]
 8002418:	7293      	strb	r3, [r2, #10]

				break;
 800241a:	e022      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4922      	ldr	r1, [pc, #136]	@ (80024a8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 8002420:	461a      	mov	r2, r3
 8002422:	460b      	mov	r3, r1
 8002424:	cb03      	ldmia	r3!, {r0, r1}
 8002426:	6010      	str	r0, [r2, #0]
 8002428:	6051      	str	r1, [r2, #4]

				break;
 800242a:	e01a      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4a1f      	ldr	r2, [pc, #124]	@ (80024ac <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 8002430:	461c      	mov	r4, r3
 8002432:	4613      	mov	r3, r2
 8002434:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002436:	6020      	str	r0, [r4, #0]
 8002438:	6061      	str	r1, [r4, #4]
 800243a:	60a2      	str	r2, [r4, #8]

				break;
 800243c:	e011      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	491b      	ldr	r1, [pc, #108]	@ (80024b0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 8002442:	461a      	mov	r2, r3
 8002444:	460b      	mov	r3, r1
 8002446:	cb03      	ldmia	r3!, {r0, r1}
 8002448:	6010      	str	r0, [r2, #0]
 800244a:	6051      	str	r1, [r2, #4]

				break;
 800244c:	e009      	b.n	8002462 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	4918      	ldr	r1, [pc, #96]	@ (80024b4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002452:	461a      	mov	r2, r3
 8002454:	460b      	mov	r3, r1
 8002456:	cb03      	ldmia	r3!, {r0, r1}
 8002458:	6010      	str	r0, [r2, #0]
 800245a:	6051      	str	r1, [r2, #4]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	7213      	strb	r3, [r2, #8]

				break;
 8002460:	bf00      	nop
			}
			}
			return;
 8002462:	e012      	b.n	800248a <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4913      	ldr	r1, [pc, #76]	@ (80024b4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002468:	461a      	mov	r2, r3
 800246a:	460b      	mov	r3, r1
 800246c:	cb03      	ldmia	r3!, {r0, r1}
 800246e:	6010      	str	r0, [r2, #0]
 8002470:	6051      	str	r1, [r2, #4]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	7213      	strb	r3, [r2, #8]
 8002476:	e008      	b.n	800248a <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	490e      	ldr	r1, [pc, #56]	@ (80024b4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 800247c:	461a      	mov	r2, r3
 800247e:	460b      	mov	r3, r1
 8002480:	cb03      	ldmia	r3!, {r0, r1}
 8002482:	6010      	str	r0, [r2, #0]
 8002484:	6051      	str	r1, [r2, #4]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	7213      	strb	r3, [r2, #8]
	}

}
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	080142dc 	.word	0x080142dc
 8002494:	08013e10 	.word	0x08013e10
 8002498:	08013dbc 	.word	0x08013dbc
 800249c:	08013dc4 	.word	0x08013dc4
 80024a0:	08013dd0 	.word	0x08013dd0
 80024a4:	08013ddc 	.word	0x08013ddc
 80024a8:	08013de8 	.word	0x08013de8
 80024ac:	08013df0 	.word	0x08013df0
 80024b0:	08013dfc 	.word	0x08013dfc
 80024b4:	08013da8 	.word	0x08013da8

080024b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af04      	add	r7, sp, #16
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 80024d6:	2301      	movs	r3, #1
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	230a      	movs	r3, #10
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e2:	220b      	movs	r2, #11
 80024e4:	4928      	ldr	r1, [pc, #160]	@ (8002588 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 ff96 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80024ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80024f0:	2100      	movs	r1, #0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f001 f8bd 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80024f8:	4603      	mov	r3, r0
 80024fa:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d111      	bne.n	8002526 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002508:	3308      	adds	r3, #8
 800250a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002512:	8a92      	ldrh	r2, [r2, #20]
 8002514:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fa16 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 8002526:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002528:	2b00      	cmp	r3, #0
 800252a:	d029      	beq.n	8002580 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002532:	3008      	adds	r0, #8
 8002534:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253c:	8a9b      	ldrh	r3, [r3, #20]
 800253e:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	232c      	movs	r3, #44	@ 0x2c
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	233a      	movs	r3, #58	@ 0x3a
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 8002550:	f002 fa20 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002554:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 8002564:	7b3b      	ldrb	r3, [r7, #12]
 8002566:	2b30      	cmp	r3, #48	@ 0x30
 8002568:	d002      	beq.n	8002570 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 800256a:	2b31      	cmp	r3, #49	@ 0x31
 800256c:	d004      	beq.n	8002578 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 800256e:	e007      	b.n	8002580 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
				break;
 8002576:	e003      	b.n	8002580 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
				break;
 800257e:	bf00      	nop
}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	080142e8 	.word	0x080142e8
 800258c:	08013e18 	.word	0x08013e18

08002590 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af04      	add	r7, sp, #16
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 80025b2:	2301      	movs	r3, #1
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	230a      	movs	r3, #10
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025be:	220a      	movs	r2, #10
 80025c0:	4945      	ldr	r1, [pc, #276]	@ (80026d8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 ff28 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	2100      	movs	r1, #0
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 f84f 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d111      	bne.n	8002602 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80025e4:	3308      	adds	r3, #8
 80025e6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ee:	8a92      	ldrh	r2, [r2, #20]
 80025f0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 f9a8 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 8002602:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002604:	2b00      	cmp	r3, #0
 8002606:	d062      	beq.n	80026ce <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800260e:	3008      	adds	r0, #8
 8002610:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002618:	8a9b      	ldrh	r3, [r3, #20]
 800261a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	232c      	movs	r3, #44	@ 0x2c
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	233a      	movs	r3, #58	@ 0x3a
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4b2c      	ldr	r3, [pc, #176]	@ (80026dc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 800262c:	f002 f9b2 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002630:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800263c:	2b00      	cmp	r3, #0
 800263e:	d046      	beq.n	80026ce <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 8002640:	f107 0308 	add.w	r3, r7, #8
 8002644:	4926      	ldr	r1, [pc, #152]	@ (80026e0 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fe6a 	bl	8001320 <_ZSt6strstrPcPKc>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8002662:	e034      	b.n	80026ce <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	491e      	ldr	r1, [pc, #120]	@ (80026e4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fe58 	bl	8001320 <_ZSt6strstrPcPKc>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
}
 8002686:	e022      	b.n	80026ce <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	4916      	ldr	r1, [pc, #88]	@ (80026e8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fe46 	bl	8001320 <_ZSt6strstrPcPKc>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
}
 80026aa:	e010      	b.n	80026ce <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	490e      	ldr	r1, [pc, #56]	@ (80026ec <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fe34 	bl	8001320 <_ZSt6strstrPcPKc>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2203      	movs	r2, #3
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	080142f4 	.word	0x080142f4
 80026dc:	08013e20 	.word	0x08013e20
 80026e0:	08013e28 	.word	0x08013e28
 80026e4:	08013e34 	.word	0x08013e34
 80026e8:	08013e38 	.word	0x08013e38
 80026ec:	08013e40 	.word	0x08013e40

080026f0 <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af04      	add	r7, sp, #16
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 800270c:	2301      	movs	r3, #1
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	230a      	movs	r3, #10
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002718:	2208      	movs	r2, #8
 800271a:	4939      	ldr	r1, [pc, #228]	@ (8002800 <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fe7b 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002722:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 ffa2 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800272e:	4603      	mov	r3, r0
 8002730:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002732:	7dbb      	ldrb	r3, [r7, #22]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800273e:	3308      	adds	r3, #8
 8002740:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002748:	8a92      	ldrh	r2, [r2, #20]
 800274a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800274c:	4618      	mov	r0, r3
 800274e:	f002 f8fb 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 800275c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800275e:	2b00      	cmp	r3, #0
 8002760:	d041      	beq.n	80027e6 <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002768:	3008      	adds	r0, #8
 800276a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002772:	8a9b      	ldrh	r3, [r3, #20]
 8002774:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	232c      	movs	r3, #44	@ 0x2c
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	233a      	movs	r3, #58	@ 0x3a
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 8002786:	f002 f905 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800278a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01b      	beq.n	80027d2 <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f00e f9ba 	bl	8010b18 <atoi>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 80027a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027ac:	2b62      	cmp	r3, #98	@ 0x62
 80027ae:	dd02      	ble.n	80027b6 <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	75fb      	strb	r3, [r7, #23]
 80027b4:	e005      	b.n	80027c2 <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3b71      	subs	r3, #113	@ 0x71
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 80027c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027c6:	461a      	mov	r2, r3
 80027c8:	490f      	ldr	r1, [pc, #60]	@ (8002808 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	f00e ff46 	bl	801165c <siprintf>
 80027d0:	e012      	b.n	80027f8 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	490d      	ldr	r1, [pc, #52]	@ (800280c <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 80027d6:	461a      	mov	r2, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	cb03      	ldmia	r3!, {r0, r1}
 80027dc:	6010      	str	r0, [r2, #0]
 80027de:	6051      	str	r1, [r2, #4]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	7213      	strb	r3, [r2, #8]
 80027e4:	e008      	b.n	80027f8 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	4908      	ldr	r1, [pc, #32]	@ (800280c <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 80027ea:	461a      	mov	r2, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	cb03      	ldmia	r3!, {r0, r1}
 80027f0:	6010      	str	r0, [r2, #0]
 80027f2:	6051      	str	r1, [r2, #4]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	7213      	strb	r3, [r2, #8]
	}

}
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	08014300 	.word	0x08014300
 8002804:	08013e44 	.word	0x08013e44
 8002808:	08013e4c 	.word	0x08013e4c
 800280c:	08013da8 	.word	0x08013da8

08002810 <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b0a0      	sub	sp, #128	@ 0x80
 8002814:	af04      	add	r7, sp, #16
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 8002820:	2303      	movs	r3, #3
 8002822:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	2260      	movs	r2, #96	@ 0x60
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f00e ff75 	bl	8011722 <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8002838:	2301      	movs	r3, #1
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	230a      	movs	r3, #10
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002844:	2212      	movs	r2, #18
 8002846:	492c      	ldr	r1, [pc, #176]	@ (80028f8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fde5 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 800284e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002852:	2100      	movs	r1, #0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 ff0c 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002860:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800286e:	3308      	adds	r3, #8
 8002870:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002878:	8a92      	ldrh	r2, [r2, #20]
 800287a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800287c:	4618      	mov	r0, r3
 800287e:	f002 f863 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 800288c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800288e:	2b00      	cmp	r3, #0
 8002890:	d02c      	beq.n	80028ec <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002898:	3008      	adds	r0, #8
 800289a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a2:	8a9b      	ldrh	r3, [r3, #20]
 80028a4:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2322      	movs	r3, #34	@ 0x22
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	2322      	movs	r3, #34	@ 0x22
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 80028b6:	f002 f86d 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80028ba:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	4619      	mov	r1, r3
 80028d0:	6838      	ldr	r0, [r7, #0]
 80028d2:	f7fe fd25 	bl	8001320 <_ZSt6strstrPcPKc>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 80028e6:	2302      	movs	r3, #2
 80028e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 80028ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3770      	adds	r7, #112	@ 0x70
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0801433c 	.word	0x0801433c
 80028fc:	08013e74 	.word	0x08013e74

08002900 <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af04      	add	r7, sp, #16
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 800290a:	2301      	movs	r3, #1
 800290c:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 8002920:	2303      	movs	r3, #3
 8002922:	9303      	str	r3, [sp, #12]
 8002924:	230a      	movs	r3, #10
 8002926:	9302      	str	r3, [sp, #8]
 8002928:	2302      	movs	r3, #2
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	232b      	movs	r3, #43	@ 0x2b
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002934:	220f      	movs	r2, #15
 8002936:	4928      	ldr	r1, [pc, #160]	@ (80029d8 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fdcf 	bl	80034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 800293e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fe94 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800294a:	4603      	mov	r3, r0
 800294c:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800294e:	7dbb      	ldrb	r3, [r7, #22]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800295a:	3308      	adds	r3, #8
 800295c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002964:	8a92      	ldrh	r2, [r2, #20]
 8002966:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002968:	4618      	mov	r0, r3
 800296a:	f001 ffed 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 8002978:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800297a:	2b00      	cmp	r3, #0
 800297c:	d026      	beq.n	80029cc <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002984:	3008      	adds	r0, #8
 8002986:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298e:	8a9b      	ldrh	r3, [r3, #20]
 8002990:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	230a      	movs	r3, #10
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	233a      	movs	r3, #58	@ 0x3a
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 80029a2:	f001 fff7 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80029a6:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	4618      	mov	r0, r3
 80029c0:	f00e f8aa 	bl	8010b18 <atoi>
 80029c4:	4603      	mov	r3, r0
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]

}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	0801431c 	.word	0x0801431c
 80029dc:	08013e84 	.word	0x08013e84

080029e0 <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 80029fe:	2303      	movs	r3, #3
 8002a00:	9303      	str	r3, [sp, #12]
 8002a02:	230a      	movs	r3, #10
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	2302      	movs	r3, #2
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	232b      	movs	r3, #43	@ 0x2b
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a12:	220e      	movs	r2, #14
 8002a14:	4923      	ldr	r1, [pc, #140]	@ (8002aa4 <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fd60 	bl	80034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002a1c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002a20:	2100      	movs	r1, #0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fe25 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a2c:	7dbb      	ldrb	r3, [r7, #22]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d111      	bne.n	8002a56 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002a38:	3308      	adds	r3, #8
 8002a3a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a42:	8a92      	ldrh	r2, [r2, #20]
 8002a44:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 ff7e 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8002a56:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01d      	beq.n	8002a98 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002a62:	3008      	adds	r0, #8
 8002a64:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6c:	8a9b      	ldrh	r3, [r3, #20]
 8002a6e:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	230a      	movs	r3, #10
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	233a      	movs	r3, #58	@ 0x3a
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 8002a80:	f001 ff88 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002a84:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	0801432c 	.word	0x0801432c
 8002aa8:	08013e94 	.word	0x08013e94

08002aac <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b09c      	sub	sp, #112	@ 0x70
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	460b      	mov	r3, r1
 8002aba:	72fb      	strb	r3, [r7, #11]
 8002abc:	4613      	mov	r3, r2
 8002abe:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	224c      	movs	r2, #76	@ 0x4c
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f00e fe22 	bl	8011722 <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 8002ade:	7afa      	ldrb	r2, [r7, #11]
 8002ae0:	7abb      	ldrb	r3, [r7, #10]
 8002ae2:	f107 0014 	add.w	r0, r7, #20
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4920      	ldr	r1, [pc, #128]	@ (8002b6c <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 8002aec:	f00e fdb6 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fbbb 	bl	8000270 <strlen>
 8002afa:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	f107 0114 	add.w	r1, r7, #20
 8002b02:	2301      	movs	r3, #1
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	230a      	movs	r3, #10
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fc82 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002b14:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002b18:	2100      	movs	r1, #0
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fda9 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b26:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d111      	bne.n	8002b52 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002b34:	3308      	adds	r3, #8
 8002b36:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b3e:	8a92      	ldrh	r2, [r2, #20]
 8002b40:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 ff00 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 8002b52:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 8002b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3768      	adds	r7, #104	@ 0x68
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08013ea0 	.word	0x08013ea0

08002b70 <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b09a      	sub	sp, #104	@ 0x68
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	224c      	movs	r2, #76	@ 0x4c
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f00e fdc4 	bl	8011722 <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4920      	ldr	r1, [pc, #128]	@ (8002c24 <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f00e fd5a 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd fb5f 	bl	8000270 <strlen>
 8002bb2:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f107 010c 	add.w	r1, r7, #12
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	230a      	movs	r3, #10
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fc26 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002bcc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fd4d 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002bde:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d111      	bne.n	8002c0a <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002bec:	3308      	adds	r3, #8
 8002bee:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bf6:	8a92      	ldrh	r2, [r2, #20]
 8002bf8:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fea4 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 8002c0a:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 8002c16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3760      	adds	r7, #96	@ 0x60
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	08013ebc 	.word	0x08013ebc

08002c28 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0b0      	sub	sp, #192	@ 0xc0
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	460b      	mov	r3, r1
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	2292      	movs	r2, #146	@ 0x92
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f00e fd67 	bl	8011722 <memset>
	char recv_buf[5] = { 0 };
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8002c5c:	7afa      	ldrb	r2, [r7, #11]
 8002c5e:	f107 0018 	add.w	r0, r7, #24
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	492c      	ldr	r1, [pc, #176]	@ (8002d18 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 8002c66:	f00e fcf9 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8002c6a:	f107 0318 	add.w	r3, r7, #24
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fafe 	bl	8000270 <strlen>
 8002c74:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	f107 0118 	add.w	r1, r7, #24
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	9303      	str	r3, [sp, #12]
 8002c80:	230a      	movs	r3, #10
 8002c82:	9302      	str	r3, [sp, #8]
 8002c84:	2302      	movs	r3, #2
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	232b      	movs	r3, #43	@ 0x2b
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fc23 	bl	80034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 8002c96:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fce8 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 8002ca8:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d12c      	bne.n	8002d0a <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002cb6:	3008      	adds	r0, #8
 8002cb8:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc0:	8a9b      	ldrh	r3, [r3, #20]
 8002cc2:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	230a      	movs	r3, #10
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	232c      	movs	r3, #44	@ 0x2c
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 8002cd4:	f001 fe5e 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002cd8:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fb16 	bl	8001320 <_ZSt6strstrPcPKc>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 8002d04:	2302      	movs	r3, #2
 8002d06:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8002d0a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	37b0      	adds	r7, #176	@ 0xb0
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	08013ed0 	.word	0x08013ed0
 8002d1c:	08013e74 	.word	0x08013e74
 8002d20:	08013ef0 	.word	0x08013ef0

08002d24 <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b0ae      	sub	sp, #184	@ 0xb8
 8002d28:	af04      	add	r7, sp, #16
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2292      	movs	r2, #146	@ 0x92
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f00e fcea 	bl	8011722 <memset>
	char recv_buf[5] = { 0 };
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	2300      	movs	r3, #0
 8002d54:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	492c      	ldr	r1, [pc, #176]	@ (8002e10 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f00e fc7c 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fa81 	bl	8000270 <strlen>
 8002d6e:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	f107 0110 	add.w	r1, r7, #16
 8002d76:	2303      	movs	r3, #3
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	230a      	movs	r3, #10
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	2302      	movs	r3, #2
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	232b      	movs	r3, #43	@ 0x2b
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fba6 	bl	80034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002d90:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002d94:	2100      	movs	r1, #0
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fc6b 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 8002da2:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12c      	bne.n	8002e04 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002db0:	3008      	adds	r0, #8
 8002db2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dba:	8a9b      	ldrh	r3, [r3, #20]
 8002dbc:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	232c      	movs	r3, #44	@ 0x2c
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 8002dce:	f001 fde1 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002dd2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 8002de2:	f107 0308 	add.w	r3, r7, #8
 8002de6:	490c      	ldr	r1, [pc, #48]	@ (8002e18 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fa99 	bl	8001320 <_ZSt6strstrPcPKc>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 8002e04:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	37a8      	adds	r7, #168	@ 0xa8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	08013ef4 	.word	0x08013ef4
 8002e14:	08013f0c 	.word	0x08013f0c
 8002e18:	08013ef0 	.word	0x08013ef0

08002e1c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b0af      	sub	sp, #188	@ 0xbc
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2292      	movs	r2, #146	@ 0x92
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f00e fc6c 	bl	8011722 <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 8002e4a:	7afc      	ldrb	r4, [r7, #11]
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd fa0f 	bl	8000270 <strlen>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f107 0010 	add.w	r0, r7, #16
 8002e58:	4622      	mov	r2, r4
 8002e5a:	494b      	ldr	r1, [pc, #300]	@ (8002f88 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 8002e5c:	f00e fbfe 	bl	801165c <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fa03 	bl	8000270 <strlen>
 8002e6a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	f107 0110 	add.w	r1, r7, #16
 8002e72:	2302      	movs	r3, #2
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	233e      	movs	r3, #62	@ 0x3e
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 faca 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8002e84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e88:	2100      	movs	r1, #0
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fbf1 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 8002e96:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d16e      	bne.n	8002f7c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002ea4:	3008      	adds	r0, #8
 8002ea6:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eae:	8a9b      	ldrh	r3, [r3, #20]
 8002eb0:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9302      	str	r3, [sp, #8]
 8002eb6:	230a      	movs	r3, #10
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	232c      	movs	r3, #44	@ 0x2c
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4b33      	ldr	r3, [pc, #204]	@ (8002f8c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 8002ec0:	f001 fd68 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002ec4:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d053      	beq.n	8002f7c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fd f9cb 	bl	8000270 <strlen>
 8002eda:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	2303      	movs	r3, #3
 8002ee0:	9303      	str	r3, [sp, #12]
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	232b      	movs	r3, #43	@ 0x2b
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 faf1 	bl	80034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 8002efa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002efe:	2100      	movs	r1, #0
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fbb6 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f0c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d111      	bne.n	8002f38 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f24:	8a92      	ldrh	r2, [r2, #20]
 8002f26:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fd0d 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 8002f38:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01e      	beq.n	8002f7c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002f44:	3008      	adds	r0, #8
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002f4c:	9302      	str	r3, [sp, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	230d      	movs	r3, #13
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	230a      	movs	r3, #10
 8002f58:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 8002f5a:	f001 fde3 	bl	8004b24 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 8002f6e:	2305      	movs	r3, #5
 8002f70:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002f74:	e002      	b.n	8002f7c <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 8002f7c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	37ac      	adds	r7, #172	@ 0xac
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	08013f18 	.word	0x08013f18
 8002f8c:	08013f30 	.word	0x08013f30
 8002f90:	08013f34 	.word	0x08013f34

08002f94 <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b0b1      	sub	sp, #196	@ 0xc4
 8002f98:	af04      	add	r7, sp, #16
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	2292      	movs	r2, #146	@ 0x92
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00e fbb1 	bl	8011722 <memset>
	char recv_buf[5] = { 0 };
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 8002fc8:	7afc      	ldrb	r4, [r7, #11]
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd f950 	bl	8000270 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f107 0018 	add.w	r0, r7, #24
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	4947      	ldr	r1, [pc, #284]	@ (80030f8 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 8002fda:	f00e fb3f 	bl	801165c <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 8002fde:	f107 0318 	add.w	r3, r7, #24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd f944 	bl	8000270 <strlen>
 8002fe8:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	f107 0118 	add.w	r1, r7, #24
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	233e      	movs	r3, #62	@ 0x3e
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fa0b 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 8003002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003006:	2100      	movs	r1, #0
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fb32 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 8003014:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003018:	2b00      	cmp	r3, #0
 800301a:	d167      	bne.n	80030ec <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003022:	3008      	adds	r0, #8
 8003024:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302c:	8a9b      	ldrh	r3, [r3, #20]
 800302e:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003030:	2300      	movs	r3, #0
 8003032:	9302      	str	r3, [sp, #8]
 8003034:	230a      	movs	r3, #10
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	232c      	movs	r3, #44	@ 0x2c
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4b2f      	ldr	r3, [pc, #188]	@ (80030fc <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 800303e:	f001 fca9 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003042:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04c      	beq.n	80030ec <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd f90c 	bl	8000270 <strlen>
 8003058:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 800305a:	b29a      	uxth	r2, r3
 800305c:	2303      	movs	r3, #3
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	230a      	movs	r3, #10
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	2301      	movs	r3, #1
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	232b      	movs	r3, #43	@ 0x2b
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa32 	bl	80034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 8003078:	f242 7210 	movw	r2, #10000	@ 0x2710
 800307c:	2100      	movs	r1, #0
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 faf7 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 800308a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800308e:	2b00      	cmp	r3, #0
 8003090:	d12c      	bne.n	80030ec <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003098:	3008      	adds	r0, #8
 800309a:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a2:	8a9b      	ldrh	r3, [r3, #20]
 80030a4:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	9302      	str	r3, [sp, #8]
 80030ac:	230a      	movs	r3, #10
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	232c      	movs	r3, #44	@ 0x2c
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 80030b6:	f001 fc6d 	bl	8004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80030ba:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	490d      	ldr	r1, [pc, #52]	@ (8003104 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe f925 	bl	8001320 <_ZSt6strstrPcPKc>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 80030ec:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	37b4      	adds	r7, #180	@ 0xb4
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	08013f48 	.word	0x08013f48
 80030fc:	08013f30 	.word	0x08013f30
 8003100:	08013f60 	.word	0x08013f60
 8003104:	08013ef0 	.word	0x08013ef0

08003108 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b09a      	sub	sp, #104	@ 0x68
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	224c      	movs	r2, #76	@ 0x4c
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f00e faf8 	bl	8011722 <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4920      	ldr	r1, [pc, #128]	@ (80031bc <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 800313a:	4618      	mov	r0, r3
 800313c:	f00e fa8e 	bl	801165c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f893 	bl	8000270 <strlen>
 800314a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 800314c:	b29a      	uxth	r2, r3
 800314e:	f107 010c 	add.w	r1, r7, #12
 8003152:	2301      	movs	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	230a      	movs	r3, #10
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f95a 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003164:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003168:	2100      	movs	r1, #0
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa81 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003176:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800317a:	2b00      	cmp	r3, #0
 800317c:	d111      	bne.n	80031a2 <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003184:	3308      	adds	r3, #8
 8003186:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800318e:	8a92      	ldrh	r2, [r2, #20]
 8003190:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fbd8 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 80031a2:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 80031ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3760      	adds	r7, #96	@ 0x60
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	08013f70 	.word	0x08013f70

080031c0 <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 80031d0:	2301      	movs	r3, #1
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	230a      	movs	r3, #10
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031dc:	221d      	movs	r2, #29
 80031de:	4915      	ldr	r1, [pc, #84]	@ (8003234 <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f919 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80031e6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80031ea:	2100      	movs	r1, #0
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa40 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d111      	bne.n	8003220 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003202:	3308      	adds	r3, #8
 8003204:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800320c:	8a92      	ldrh	r2, [r2, #20]
 800320e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fb99 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <_ZN5Modem8simA767213sslversionsetEv+0x60>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <_ZN5Modem8simA767213sslversionsetEv+0x62>
 8003220:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	08014350 	.word	0x08014350

08003238 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af02      	add	r7, sp, #8
 800323e:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003240:	2301      	movs	r3, #1
 8003242:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8003248:	2301      	movs	r3, #1
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	230a      	movs	r3, #10
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003254:	221b      	movs	r2, #27
 8003256:	4915      	ldr	r1, [pc, #84]	@ (80032ac <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8dd 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800325e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003262:	2100      	movs	r1, #0
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fa04 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800326a:	4603      	mov	r3, r0
 800326c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800327a:	3308      	adds	r3, #8
 800327c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003284:	8a92      	ldrh	r2, [r2, #20]
 8003286:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fb5d 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <_ZN5Modem8simA767210sslauthsetEv+0x62>
 8003298:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	08014370 	.word	0x08014370

080032b0 <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 80032c0:	2301      	movs	r3, #1
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	230a      	movs	r3, #10
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032cc:	2220      	movs	r2, #32
 80032ce:	4915      	ldr	r1, [pc, #84]	@ (8003324 <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8a1 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80032d6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032da:	2100      	movs	r1, #0
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f9c8 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80032e6:	7bbb      	ldrb	r3, [r7, #14]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80032f2:	3308      	adds	r3, #8
 80032f4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032fc:	8a92      	ldrh	r2, [r2, #20]
 80032fe:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003300:	4618      	mov	r0, r3
 8003302:	f001 fb21 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 8003310:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0801438c 	.word	0x0801438c

08003328 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8003330:	2301      	movs	r3, #1
 8003332:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 8003338:	2301      	movs	r3, #1
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	230a      	movs	r3, #10
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003344:	222c      	movs	r2, #44	@ 0x2c
 8003346:	4915      	ldr	r1, [pc, #84]	@ (800339c <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f865 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800334e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003352:	2100      	movs	r1, #0
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f98c 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800335a:	4603      	mov	r3, r0
 800335c:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800335e:	7bbb      	ldrb	r3, [r7, #14]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d111      	bne.n	8003388 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800336a:	3308      	adds	r3, #8
 800336c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003374:	8a92      	ldrh	r2, [r2, #20]
 8003376:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fae5 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 8003388:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080143b0 	.word	0x080143b0

080033a0 <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 80033b0:	2301      	movs	r3, #1
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	230a      	movs	r3, #10
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033bc:	222a      	movs	r2, #42	@ 0x2a
 80033be:	4915      	ldr	r1, [pc, #84]	@ (8003414 <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f829 	bl	8003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80033c6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80033ca:	2100      	movs	r1, #0
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f950 	bl	8003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033d6:	7bbb      	ldrb	r3, [r7, #14]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80033e2:	3308      	adds	r3, #8
 80033e4:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033ec:	8a92      	ldrh	r2, [r2, #20]
 80033ee:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 faa9 	bl	8004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 8003400:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 800340a:	7bfb      	ldrb	r3, [r7, #15]

}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	080143e0 	.word	0x080143e0

08003418 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	460b      	mov	r3, r1
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	4613      	mov	r3, r2
 800342c:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f00e f973 	bl	8011722 <memset>
	memset(Txbuffer, 0, BufferLen);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f00e f96a 	bl	8011722 <memset>
	rst_event(rx_evt);
 800344e:	2100      	movs	r1, #0
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f8c8 	bl	80035e6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8003456:	2101      	movs	r1, #1
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8c4 	bl	80035e6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003464:	461a      	mov	r2, r3
 8003466:	7e3b      	ldrb	r3, [r7, #24]
 8003468:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003470:	461a      	mov	r2, r3
 8003472:	7f3b      	ldrb	r3, [r7, #28]
 8003474:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800347c:	2200      	movs	r2, #0
 800347e:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003486:	2200      	movs	r2, #0
 8003488:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003490:	22ff      	movs	r2, #255	@ 0xff
 8003492:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800349c:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a4:	2200      	movs	r2, #0
 80034a6:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80034ae:	3304      	adds	r3, #4
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034b6:	6911      	ldr	r1, [r2, #16]
 80034b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fa0a 	bl	80048d6 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80034c8:	3004      	adds	r0, #4
 80034ca:	88bb      	ldrh	r3, [r7, #4]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	f001 f9ee 	bl	80048b0 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4611      	mov	r1, r2
 80034e8:	461a      	mov	r2, r3
 80034ea:	460b      	mov	r3, r1
 80034ec:	80fb      	strh	r3, [r7, #6]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f00e f911 	bl	8011722 <memset>
	memset(Txbuffer, 0, BufferLen);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f00e f908 	bl	8011722 <memset>
	rst_event(rx_evt);
 8003512:	2100      	movs	r1, #0
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f866 	bl	80035e6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 800351a:	2101      	movs	r1, #1
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f862 	bl	80035e6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003528:	461a      	mov	r2, r3
 800352a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800352e:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003536:	461a      	mov	r2, r3
 8003538:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800353c:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003544:	2200      	movs	r2, #0
 8003546:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800354e:	2200      	movs	r2, #0
 8003550:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003558:	22ff      	movs	r2, #255	@ 0xff
 800355a:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003564:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356c:	2200      	movs	r2, #0
 800356e:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003576:	461a      	mov	r2, r3
 8003578:	7e3b      	ldrb	r3, [r7, #24]
 800357a:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 800357c:	7f3b      	ldrb	r3, [r7, #28]
 800357e:	3b01      	subs	r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003588:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003590:	3304      	adds	r3, #4
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003598:	6911      	ldr	r1, [r2, #16]
 800359a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f999 	bl	80048d6 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80035aa:	3004      	adds	r0, #4
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	f001 f97d 	bl	80048b0 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80035d4:	3309      	adds	r3, #9
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80035fc:	3309      	adds	r3, #9
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003628:	3309      	adds	r3, #9
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e010      	b.n	8003664 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800364c:	3309      	adds	r3, #9
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8003664:	7bfb      	ldrb	r3, [r7, #15]

}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
 800367e:	4613      	mov	r3, r2
 8003680:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368c:	461a      	mov	r2, r3
 800368e:	2300      	movs	r3, #0
 8003690:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 8003692:	f005 f9f1 	bl	8008a78 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 80036a0:	e002      	b.n	80036a8 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 80036a2:	200a      	movs	r0, #10
 80036a4:	f000 fce4 	bl	8004070 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ffae 	bl	800360e <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80036b2:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00c      	beq.n	80036d2 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80036b8:	f005 f9de 	bl	8008a78 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	883b      	ldrh	r3, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d201      	bcs.n	80036d2 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e4      	bne.n	80036a2 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff96 	bl	800360e <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]

}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003712:	7adb      	ldrb	r3, [r3, #11]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 808a 	beq.w	800383a <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 8003726:	78f8      	ldrb	r0, [r7, #3]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003738:	610a      	str	r2, [r1, #16]
 800373a:	4602      	mov	r2, r0
 800373c:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003744:	8a9b      	ldrh	r3, [r3, #20]
 8003746:	b29b      	uxth	r3, r3
 8003748:	3301      	adds	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003752:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375a:	7b1b      	ldrb	r3, [r3, #12]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00c      	beq.n	8003786 <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003772:	7b9b      	ldrb	r3, [r3, #14]
 8003774:	b25b      	sxtb	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	b25a      	sxtb	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003784:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800378c:	7a9b      	ldrb	r3, [r3, #10]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	2b4f      	cmp	r3, #79	@ 0x4f
 8003798:	d002      	beq.n	80037a0 <_ZN5Modem8simA76724RxCBEh+0xa0>
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	2b45      	cmp	r3, #69	@ 0x45
 800379e:	d101      	bne.n	80037a4 <_ZN5Modem8simA76724RxCBEh+0xa4>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <_ZN5Modem8simA76724RxCBEh+0xa6>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01b      	beq.n	80037e2 <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b0:	2200      	movs	r2, #0
 80037b2:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ba:	2201      	movs	r2, #1
 80037bc:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80037c2:	d105      	bne.n	80037d0 <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ca:	2202      	movs	r2, #2
 80037cc:	735a      	strb	r2, [r3, #13]
 80037ce:	e00d      	b.n	80037ec <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	2b45      	cmp	r3, #69	@ 0x45
 80037d4:	d10a      	bne.n	80037ec <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037dc:	2205      	movs	r2, #5
 80037de:	735a      	strb	r2, [r3, #13]
 80037e0:	e004      	b.n	80037ec <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e8:	2200      	movs	r2, #0
 80037ea:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b0a      	cmp	r3, #10
 80037f0:	d104      	bne.n	80037fc <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f8:	2201      	movs	r2, #1
 80037fa:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003802:	7b9b      	ldrb	r3, [r3, #14]
 8003804:	b25b      	sxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800380e:	7b5b      	ldrb	r3, [r3, #13]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	429a      	cmp	r2, r3
 8003814:	bfac      	ite	ge
 8003816:	2301      	movge	r3, #1
 8003818:	2300      	movlt	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80ed 	beq.w	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8003822:	2100      	movs	r1, #0
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff feca 	bl	80035be <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f861 	bl	80048fa <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8003838:	e0e0      	b.n	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003840:	7adb      	ldrb	r3, [r3, #11]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d072      	beq.n	8003938 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 8003852:	78f8      	ldrb	r0, [r7, #3]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003864:	610a      	str	r2, [r1, #16]
 8003866:	4602      	mov	r2, r0
 8003868:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003870:	8a9b      	ldrh	r3, [r3, #20]
 8003872:	b29b      	uxth	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800387e:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003886:	7a1b      	ldrb	r3, [r3, #8]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b0a      	cmp	r3, #10
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00f      	beq.n	80038b8 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	2b3e      	cmp	r3, #62	@ 0x3e
 800389c:	f040 80ae 	bne.w	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 80038a0:	2100      	movs	r1, #0
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fe8b 	bl	80035be <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80038ae:	3304      	adds	r3, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f822 	bl	80048fa <_ZN13System_serial6serial8RxintDisEv>
}
 80038b6:	e0a1      	b.n	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038be:	7b1b      	ldrb	r3, [r3, #12]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d104      	bne.n	80038d0 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	2b45      	cmp	r3, #69	@ 0x45
 80038ca:	d101      	bne.n	80038d0 <_ZN5Modem8simA76724RxCBEh+0x1d0>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <_ZN5Modem8simA76724RxCBEh+0x1d2>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038dc:	2202      	movs	r2, #2
 80038de:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2b0a      	cmp	r3, #10
 80038e4:	d10a      	bne.n	80038fc <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ec:	7b1b      	ldrb	r3, [r3, #12]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038fa:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003902:	7b1b      	ldrb	r3, [r3, #12]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800390e:	7b9b      	ldrb	r3, [r3, #14]
 8003910:	b25b      	sxtb	r3, r3
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d06d      	beq.n	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003920:	2100      	movs	r1, #0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fe4b 	bl	80035be <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800392e:	3304      	adds	r3, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f000 ffe2 	bl	80048fa <_ZN13System_serial6serial8RxintDisEv>
}
 8003936:	e061      	b.n	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393e:	7adb      	ldrb	r3, [r3, #11]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b03      	cmp	r3, #3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d055      	beq.n	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 8003950:	78f8      	ldrb	r0, [r7, #3]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003962:	610a      	str	r2, [r1, #16]
 8003964:	4602      	mov	r2, r0
 8003966:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396e:	8a9b      	ldrh	r3, [r3, #20]
 8003970:	b29b      	uxth	r3, r3
 8003972:	3301      	adds	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397c:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003984:	7f9b      	ldrb	r3, [r3, #30]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	429a      	cmp	r2, r3
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00c      	beq.n	80039b2 <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800399e:	7b9b      	ldrb	r3, [r3, #14]
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	3301      	adds	r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	b25a      	sxtb	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b0:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b8:	7a1b      	ldrb	r3, [r3, #8]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10e      	bne.n	80039e0 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c8:	7b9b      	ldrb	r3, [r3, #14]
 80039ca:	b25b      	sxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d4:	7fdb      	ldrb	r3, [r3, #31]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	429a      	cmp	r2, r3
 80039da:	db01      	blt.n	80039e0 <_ZN5Modem8simA76724RxCBEh+0x2e0>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <_ZN5Modem8simA76724RxCBEh+0x2e2>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 80039e6:	2100      	movs	r1, #0
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fde8 	bl	80035be <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80039f4:	3304      	adds	r3, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 ff7f 	bl	80048fa <_ZN13System_serial6serial8RxintDisEv>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e009      	b.n	8003a2e <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	4a11      	ldr	r2, [pc, #68]	@ (8003a64 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003a1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d006      	beq.n	8003a36 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d9f2      	bls.n	8003a1a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8003a34:	e000      	b.n	8003a38 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8003a36:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	4a06      	ldr	r2, [pc, #24]	@ (8003a64 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe53 	bl	8003700 <_ZN5Modem8simA76724RxCBEh>
	}

}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20001924 	.word	0x20001924

08003a68 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout)
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71fb      	strb	r3, [r7, #7]
{
	_aht20_ui2c=ui2c;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	79fa      	ldrb	r2, [r7, #7]
 8003a96:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	uint8_t cmd = AHT20_SOFT_RESET;
		HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_ << 1, &cmd, 1, timeout_);
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	@ 0x28
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
	uint16_t counter = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 8003abc:	2032      	movs	r0, #50	@ 0x32
 8003abe:	f000 fad7 	bl	8004070 <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8003ac2:	23ac      	movs	r3, #172	@ 0xac
 8003ac4:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 8003ac6:	2333      	movs	r3, #51	@ 0x33
 8003ac8:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 8003aca:	2300      	movs	r3, #0
 8003acc:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f875 	bl	8003bbe <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d068      	beq.n	8003bb6 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6858      	ldr	r0, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	7a1b      	ldrb	r3, [r3, #8]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	b299      	uxth	r1, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f107 0218 	add.w	r2, r7, #24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2303      	movs	r3, #3
 8003afc:	f006 f954 	bl	8009da8 <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 8003b00:	2064      	movs	r0, #100	@ 0x64
 8003b02:	f000 fab5 	bl	8004070 <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6858      	ldr	r0, [r3, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	7a1b      	ldrb	r3, [r3, #8]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	b299      	uxth	r1, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f107 0210 	add.w	r2, r7, #16
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2307      	movs	r3, #7
 8003b1e:	f006 fa41 	bl	8009fa4 <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 8003b22:	7c3a      	ldrb	r2, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	7a5b      	ldrb	r3, [r3, #9]
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db36      	blt.n	8003ba0 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0xf4>
    		{
    	    DATA_Humi=ahtRData[1];
 8003b32:	7c7b      	ldrb	r3, [r7, #17]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	7cba      	ldrb	r2, [r7, #18]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	7cfa      	ldrb	r2, [r7, #19]
 8003b50:	0912      	lsrs	r2, r2, #4
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	7d3a      	ldrb	r2, [r7, #20]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	7d7a      	ldrb	r2, [r7, #21]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 8003b80:	7dba      	ldrb	r2, [r7, #22]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f83a 	bl	8003c00 <_ZN15sensor_TempHumd5AHT204tempEv>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f870 	bl	8003c78 <_ZN15sensor_TempHumd5AHT205humidEv>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]
    		break;
 8003b9e:	e00a      	b.n	8003bb6 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x10a>
    		}
    	else {
    		counter++;
 8003ba0:	8bfb      	ldrh	r3, [r7, #30]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 8003ba6:	200a      	movs	r0, #10
 8003ba8:	f000 fa62 	bl	8004070 <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	2b32      	cmp	r3, #50	@ 0x32
 8003bb0:	d800      	bhi.n	8003bb4 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x108>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8003bb2:	e7a8      	b.n	8003b06 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x5a>
    		{
    			break;
 8003bb4:	bf00      	nop
    		}
    	}
    }
	}
}
 8003bb6:	bf00      	nop
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6858      	ldr	r0, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7a1b      	ldrb	r3, [r3, #8]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	b299      	uxth	r1, r3
 8003bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bda:	2203      	movs	r2, #3
 8003bdc:	f006 fc14 	bl	800a408 <HAL_I2C_IsDeviceReady>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]

}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fc79 	bl	8000504 <__aeabi_ui2d>
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8003c18:	f7fc fe18 	bl	800084c <__aeabi_ddiv>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8003c2a:	f7fc fe0f 	bl	800084c <__aeabi_ddiv>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 8003c3c:	f7fc fcdc 	bl	80005f8 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 8003c4e:	f7fc fb1b 	bl	8000288 <__aeabi_dsub>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fc ffa5 	bl	8000ba8 <__aeabi_d2uiz>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 8003c62:	68fb      	ldr	r3, [r7, #12]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40900000 	.word	0x40900000
 8003c70:	40690000 	.word	0x40690000
 8003c74:	40490000 	.word	0x40490000

08003c78 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fc3d 	bl	8000504 <__aeabi_ui2d>
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8003c90:	f7fc fddc 	bl	800084c <__aeabi_ddiv>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 8003ca2:	f7fc fdd3 	bl	800084c <__aeabi_ddiv>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 8003cb4:	f7fc fca0 	bl	80005f8 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7fc ff72 	bl	8000ba8 <__aeabi_d2uiz>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40900000 	.word	0x40900000
 8003cd8:	40590000 	.word	0x40590000

08003cdc <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc)
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a10      	ldr	r2, [pc, #64]	@ (8003d2c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef+0x50>)
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	761a      	strb	r2, [r3, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	61da      	str	r2, [r3, #28]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	621a      	str	r2, [r3, #32]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24
{
	hadc_sensor = hadc;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	bf800000 	.word	0xbf800000

08003d30 <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopENS0_4unitEfffPhPfmPmS4_>:

void liquidSensor::Measurement_loop(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	61f8      	str	r0, [r7, #28]
 8003d38:	ed87 0a05 	vstr	s0, [r7, #20]
 8003d3c:	edc7 0a04 	vstr	s1, [r7, #16]
 8003d40:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d44:	60ba      	str	r2, [r7, #8]
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	76fb      	strb	r3, [r7, #27]
	getLevel(unit_,LowSpan,fullSpan,VoltOut,getlevel);
 8003d4c:	7efb      	ldrb	r3, [r7, #27]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	ed97 1a03 	vldr	s2, [r7, #12]
 8003d54:	edd7 0a04 	vldr	s1, [r7, #16]
 8003d58:	ed97 0a05 	vldr	s0, [r7, #20]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	69f8      	ldr	r0, [r7, #28]
 8003d60:	f000 f80e 	bl	8003d80 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>
	consumptionliters(consumption);
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	69f8      	ldr	r0, [r7, #28]
 8003d68:	f000 f8e8 	bl	8003f3c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d72:	69f8      	ldr	r0, [r7, #28]
 8003d74:	f000 f91c 	bl	8003fb0 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 8003d78:	bf00      	nop
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh>:

liquidSensor::status liquidSensor::getLevel(enum unit unit_,float LowSpan,float fullSpan,float VoltOut,uint8_t *getlevel)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b09a      	sub	sp, #104	@ 0x68
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	61f8      	str	r0, [r7, #28]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	ed87 0a05 	vstr	s0, [r7, #20]
 8003d8e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003d92:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d96:	60ba      	str	r2, [r7, #8]
 8003d98:	76fb      	strb	r3, [r7, #27]


	enum status stat = liquidSensor_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	float totalSpan = fullSpan - LowSpan;
 8003da0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003da4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dac:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 8003db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003db4:	2228      	movs	r2, #40	@ 0x28
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00d fcb2 	bl	8011722 <memset>
	  uint32_t adcValue = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	667b      	str	r3, [r7, #100]	@ 0x64




	if(hadc_sensor == NULL)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x4e>
	{
		return liquidSensor_ERR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0a8      	b.n	8003f20 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
	}
    for(int i = 0; i< 10; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd2:	e030      	b.n	8003e36 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xb6>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 fec1 	bl	8008b60 <HAL_ADC_Start>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x72>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e096      	b.n	8003f20 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f004 ffb5 	bl	8008d6a <HAL_ADC_PollForConversion>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x94>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e085      	b.n	8003f20 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a0>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 f941 	bl	80090a0 <HAL_ADC_GetValue>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	3360      	adds	r3, #96	@ 0x60
 8003e26:	f107 0108 	add.w	r1, r7, #8
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 8003e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e32:	3301      	adds	r3, #1
 8003e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e38:	2b09      	cmp	r3, #9
 8003e3a:	ddcb      	ble.n	8003dd4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x54>
    }
    HAL_ADC_Stop(hadc_sensor);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	4618      	mov	r0, r3
 8003e42:	f004 ff5f 	bl	8008d04 <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e4a:	e00d      	b.n	8003e68 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xe8>
    {
    	adcValue = adcValue +  adcaverage[i];
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3360      	adds	r3, #96	@ 0x60
 8003e52:	f107 0208 	add.w	r2, r7, #8
 8003e56:	4413      	add	r3, r2
 8003e58:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003e5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e5e:	4413      	add	r3, r2
 8003e60:	667b      	str	r3, [r7, #100]	@ 0x64
    for(int i = 0; i< 10; i++)
 8003e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e64:	3301      	adds	r3, #1
 8003e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	ddee      	ble.n	8003e4c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0xcc>
    }
    adcValue = adcValue/10;
 8003e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e70:	4a2d      	ldr	r2, [pc, #180]	@ (8003f28 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1a8>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	667b      	str	r3, [r7, #100]	@ 0x64
    float voltage = (adcValue / Resolution) * Vref;
 8003e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e84:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003f2c <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1ac>
 8003e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e8c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003f30 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b0>
 8003e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e94:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    current_mA = ((voltage/VoltOut) *  (max_cur - min_cur)) + min_cur;
 8003e98:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003e9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8003ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eac:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eb4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 8003eb8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003ebc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003ec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ec4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003ec8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ecc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ee0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003f34 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 8003eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	ed93 7a00 	vldr	s14, [r3]
 8003efc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8003f34 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b4>
 8003f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f04:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f38 <_ZN17sensor_liquidMeas12liquidSensor8getLevelENS0_4unitEfffPh+0x1b8>
 8003f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f10:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f14:	793b      	ldrb	r3, [r7, #4]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	701a      	strb	r2, [r3, #0]

	  return stat;
 8003f1c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3768      	adds	r7, #104	@ 0x68
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	cccccccd 	.word	0xcccccccd
 8003f2c:	45800000 	.word	0x45800000
 8003f30:	40533333 	.word	0x40533333
 8003f34:	43fa0000 	.word	0x43fa0000
 8003f38:	42c80000 	.word	0x42c80000

08003f3c <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]

    uint32_t current_time = HAL_GetTick();
 8003f46:	f004 fd97 	bl	8008a78 <HAL_GetTick>
 8003f4a:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	d507      	bpl.n	8003f72 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x36>
    {
        prev_volumeLiters = tank_volumeLiters;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	61da      	str	r2, [r3, #28]

        return;
 8003f70:	e018      	b.n	8003fa4 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fac <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x70>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d311      	bcc.n	8003fa4 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x68>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	61da      	str	r2, [r3, #28]
    }

}
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	0036ee80 	.word	0x0036ee80

08003fb0 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
	current_volume_change = tank_volumeLiters;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	d504      	bpl.n	8003fe0 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x30>
    {
    	prev_volume_change = current_volume_change;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	615a      	str	r2, [r3, #20]

        return;
 8003fde:	e044      	b.n	800406a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xba>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ff4:	ee17 2a90 	vmov	r2, s15
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 8003ffc:	f004 fd3c 	bl	8008a78 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	7e1b      	ldrb	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d111      	bne.n	8004032 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x82>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b05      	cmp	r3, #5
 8004014:	dd25      	ble.n	8004062 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>
    	  refueling_active = 1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	601a      	str	r2, [r3, #0]
    	  *endEpochtime = 0; //make it zero so we know we are refueling now to erase previous end time so user dont get confused
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e017      	b.n	8004062 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	dc0f      	bgt.n	800405a <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004048:	4293      	cmp	r3, r2
 800404a:	d90a      	bls.n	8004062 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>

			  refueling_active = 0;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e003      	b.n	8004062 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xb2>

		  }
	  }
	  else
	  {
    	  refueling_prev_time = refueling_start_time;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	615a      	str	r2, [r3, #20]

}
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	4a05      	ldr	r2, [pc, #20]	@ (8004098 <_ZN11System_Rtos5delayEm+0x28>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	4618      	mov	r0, r3
 800408c:	f00a fe52 	bl	800ed34 <vTaskDelay>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	10624dd3 	.word	0x10624dd3

0800409c <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4618      	mov	r0, r3
 80040be:	f00d fc3c 	bl	801193a <strcpy>
	usStackDepth = usStackDepth_;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	887a      	ldrh	r2, [r7, #2]
 80040c6:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	61da      	str	r2, [r3, #28]


}
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 80040de:	b5b0      	push	{r4, r5, r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af02      	add	r7, sp, #8
 80040e4:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	1d19      	adds	r1, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8a9c      	ldrh	r4, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699d      	ldr	r5, [r3, #24]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	3220      	adds	r2, #32
 80040fe:	9201      	str	r2, [sp, #4]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	462b      	mov	r3, r5
 8004104:	4622      	mov	r2, r4
 8004106:	f00a fcb7 	bl	800ea78 <xTaskCreate>
			&taskHandle);
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bdb0      	pop	{r4, r5, r7, pc}

08004112 <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	817b      	strh	r3, [r7, #10]
 8004120:	4613      	mov	r3, r2
 8004122:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	897a      	ldrh	r2, [r7, #10]
 8004128:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	893a      	ldrh	r2, [r7, #8]
 8004130:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	659a      	str	r2, [r3, #88]	@ 0x58

}
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004156:	4618      	mov	r0, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800415e:	461c      	mov	r4, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2100      	movs	r1, #0
 800416a:	9100      	str	r1, [sp, #0]
 800416c:	4621      	mov	r1, r4
 800416e:	f009 fdfd 	bl	800dd6c <xQueueGenericCreateStatic>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}

08004180 <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	22c8      	movs	r2, #200	@ 0xc8
 8004196:	6839      	ldr	r1, [r7, #0]
 8004198:	f009 fef6 	bl	800df88 <xQueueGenericSend>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e000      	b.n	80041b2 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 80041c4:	2302      	movs	r3, #2
 80041c6:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2232      	movs	r2, #50	@ 0x32
 80041ce:	6839      	ldr	r1, [r7, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f00a f879 	bl	800e2c8 <xQueueReceive>
 80041d6:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 80041d8:	2b01      	cmp	r3, #1
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZN11System_Rtos18freertos_semaphoreC1Ev>:


freertos_semaphore::freertos_semaphore()
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
{

}
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>:

void freertos_semaphore::semaphoreCreate()
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	xSemaphor = xSemaphoreCreateMutex();
 8004212:	2001      	movs	r0, #1
 8004214:	f009 fe9f 	bl	800df56 <xQueueCreateMutex>
 8004218:	4602      	mov	r2, r0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv>:


enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreTake()
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]

    if( xSemaphoreTake(xSemaphor,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800423a:	4618      	mov	r0, r3
 800423c:	f00a f926 	bl	800e48c <xQueueSemaphoreTake>
 8004240:	4603      	mov	r3, r0
					   pdMS_TO_TICKS(1000)) == pdPASS )
 8004242:	2b01      	cmp	r3, #1
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
    if( xSemaphoreTake(xSemaphor,
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv+0x2e>
      {
    	 return semaphore_recived;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv+0x30>
      }


	return stat;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>:


enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreGive()
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(xSemaphor);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	2300      	movs	r3, #0
 8004270:	2200      	movs	r2, #0
 8004272:	2100      	movs	r1, #0
 8004274:	f009 fe88 	bl	800df88 <xQueueGenericSend>

	return stat;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <_ZN11System_Rtos15freertos_eventsC1Ev>:




freertos_events::freertos_events() {
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]

}
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZN11System_Rtos15freertos_events11eventCreateEv>:

void freertos_events::eventCreate()
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	xeventgroup = xEventGroupCreate();
 80042a0:	f009 fa8a 	bl	800d7b8 <xEventGroupCreate>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <_ZN11System_Rtos15freertos_events9eventGiveEv>:

void freertos_events::eventGive()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042bc:	f3ef 8305 	mrs	r3, IPSR
 80042c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80042c2:	68fb      	ldr	r3, [r7, #12]
	if( (__get_IPSR() != 0U))
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01e      	beq.n	8004310 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x5c>
     {
		 xHigherPriorityTaskWoken = pdFALSE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]
		 xResult = xEventGroupSetBitsFromISR(xeventgroup,  1, &xHigherPriorityTaskWoken );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	461a      	mov	r2, r3
 80042e2:	2101      	movs	r1, #1
 80042e4:	f009 fc10 	bl	800db08 <xEventGroupSetBitsFromISR>
 80042e8:	4602      	mov	r2, r0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
		 if( xResult != pdFAIL )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d012      	beq.n	800431c <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
          {
			 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00e      	beq.n	800431c <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
 80042fe:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x70>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
     else
     {
    	 xEventGroupSetBits( xeventgroup, 1);
     }

}
 800430e:	e005      	b.n	800431c <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
    	 xEventGroupSetBits( xeventgroup, 1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f009 fb3a 	bl	800d990 <xEventGroupSetBits>
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <_ZN11System_Rtos15freertos_events9eventTakeEv>:
void freertos_events::eventTake()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, portMAX_DELAY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	f04f 33ff 	mov.w	r3, #4294967295
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	2300      	movs	r3, #0
 800433c:	2201      	movs	r2, #1
 800433e:	2101      	movs	r1, #1
 8004340:	f009 fa54 	bl	800d7ec <xEventGroupWaitBits>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>:
void freertos_events::eventTakeTimed(uint32_t time)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af02      	add	r7, sp, #8
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, pdMS_TO_TICKS(time));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	4a06      	ldr	r2, [pc, #24]	@ (8004380 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm+0x34>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	2300      	movs	r3, #0
 8004370:	2201      	movs	r2, #1
 8004372:	2101      	movs	r1, #1
 8004374:	f009 fa3a 	bl	800d7ec <xEventGroupWaitBits>
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	10624dd3 	.word	0x10624dd3

08004384 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>:
#include "cstring"
#include "cstdlib"

namespace System_rtc {

stmRTC::stmRTC(RTC_HandleTypeDef *hrtc, int8_t timezone) :
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	4613      	mov	r3, r2
 8004390:	71fb      	strb	r3, [r7, #7]
		checking(), rtcSemaphore() {
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3308      	adds	r3, #8
 8004396:	4618      	mov	r0, r3
 8004398:	f000 faca 	bl	8004930 <_ZN10System_sys16Parsing_CheckingC1Ev>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	330c      	adds	r3, #12
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff27 	bl	80041f4 <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	Internal_handler = hrtc;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	605a      	str	r2, [r3, #4]
	zone = timezone;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	79fa      	ldrb	r2, [r7, #7]
 80043b0:	701a      	strb	r2, [r3, #0]
	rtcSemaphore.semaphoreCreate();
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	330c      	adds	r3, #12
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff27 	bl	800420a <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>:



uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp) {
 80043c6:	b5b0      	push	{r4, r5, r7, lr}
 80043c8:	b090      	sub	sp, #64	@ 0x40
 80043ca:	af04      	add	r7, sp, #16
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
	int err = 1;
 80043d4:	2301      	movs	r3, #1
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake()
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	330c      	adds	r3, #12
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff22 	bl	8004226 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv>
 80043e2:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake()
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d042      	beq.n	8004478 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xb2>
		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f107 0114 	add.w	r1, r7, #20
 80043fa:	2200      	movs	r2, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f007 fb40 	bl	800ba82 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800440a:	2200      	movs	r2, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f007 fc1a 	bl	800bc46 <HAL_RTC_GetDate>

		if (timestamp != nullptr) {
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d017      	beq.n	8004448 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x82>
		*timestamp = checking.convertToEpoch(Date, Time, zone);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f103 0508 	add.w	r5, r3, #8
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f993 3000 	ldrsb.w	r3, [r3]
 8004424:	9303      	str	r3, [sp, #12]
 8004426:	466c      	mov	r4, sp
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	cb0c      	ldmia	r3, {r2, r3}
 800443a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443c:	4628      	mov	r0, r5
 800443e:	f000 fbc5 	bl	8004bcc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8004442:	4602      	mov	r2, r0
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x8e>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 800444e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xa2>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	2214      	movs	r2, #20
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f00d fa71 	bl	801194a <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	330c      	adds	r3, #12
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fef6 	bl	800425e <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004476:	e014      	b.n	80044a2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xdc>
	}
	else
	{
		if (timestamp != nullptr) {
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xbe>
		*timestamp = 0;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xcc>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 800448a:	2300      	movs	r3, #0
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xdc>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 8004498:	2214      	movs	r2, #20
 800449a:	2100      	movs	r1, #0
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f00d fa54 	bl	801194a <memcpy>
		}

	}


	return err;
 80044a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a4:	b2db      	uxtb	r3, r3


}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3730      	adds	r7, #48	@ 0x30
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bdb0      	pop	{r4, r5, r7, pc}

080044ae <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>:

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp,int8_t *timezone) {
 80044ae:	b5b0      	push	{r4, r5, r7, lr}
 80044b0:	b090      	sub	sp, #64	@ 0x40
 80044b2:	af04      	add	r7, sp, #16
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
	int err = 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake()
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	330c      	adds	r3, #12
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff feae 	bl	8004226 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv>
 80044ca:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake()
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d047      	beq.n	800456a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xbc>

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f107 0114 	add.w	r1, r7, #20
 80044e2:	2200      	movs	r2, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f007 facc 	bl	800ba82 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80044f2:	2200      	movs	r2, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f007 fba6 	bl	800bc46 <HAL_RTC_GetDate>

       *timezone = zone;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f993 2000 	ldrsb.w	r2, [r3]
 8004500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004502:	701a      	strb	r2, [r3, #0]

		if (timestamp != nullptr) {
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x8c>
		*timestamp = checking.convertToEpoch(Date, Time, zone);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f103 0508 	add.w	r5, r3, #8
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f993 3000 	ldrsb.w	r3, [r3]
 8004516:	9303      	str	r3, [sp, #12]
 8004518:	466c      	mov	r4, sp
 800451a:	f107 031c 	add.w	r3, r7, #28
 800451e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	cb0c      	ldmia	r3, {r2, r3}
 800452c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800452e:	4628      	mov	r0, r5
 8004530:	f000 fb4c 	bl	8004bcc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8004534:	4602      	mov	r2, r0
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	601a      	str	r2, [r3, #0]



		}
		if (DDate != nullptr) {
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x98>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 8004540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xac>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	2214      	movs	r2, #20
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f00d f9f8 	bl	801194a <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	330c      	adds	r3, #12
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fe7d 	bl	800425e <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004568:	e014      	b.n	8004594 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xe6>
	}
	else
	{
		if (timestamp != nullptr) {
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xc8>
		*timestamp = 0;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xd6>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 800457c:	2300      	movs	r3, #0
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xe6>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 800458a:	2214      	movs	r2, #20
 800458c:	2100      	movs	r1, #0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f00d f9db 	bl	801194a <memcpy>
		}

	}


	return err;
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	b2db      	uxtb	r3, r3


}
 8004598:	4618      	mov	r0, r3
 800459a:	3730      	adds	r7, #48	@ 0x30
 800459c:	46bd      	mov	sp, r7
 800459e:	bdb0      	pop	{r4, r5, r7, pc}

080045a0 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>:
	return err;

}

uint8_t stmRTC::setTime(RTC_DateTypeDef *DDate,RTC_TimeTypeDef *DTime,int8_t timezone)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	@ 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	70fb      	strb	r3, [r7, #3]
	int err = 1;
 80045ae:	2301      	movs	r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake()
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	330c      	adds	r3, #12
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fe35 	bl	8004226 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEv>
 80045bc:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake()
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d027      	beq.n	800461c <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa+0x7c>
	    HAL_RTC_SetTime(Internal_handler, DTime, RTC_FORMAT_BIN);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f007 f9ba 	bl	800b94e <HAL_RTC_SetTime>
	    HAL_RTC_SetDate(Internal_handler, DDate, RTC_FORMAT_BIN);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f007 faab 	bl	800bb3e <HAL_RTC_SetDate>
		zone = timezone;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	701a      	strb	r2, [r3, #0]

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f107 0114 	add.w	r1, r7, #20
 80045f6:	2200      	movs	r2, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f007 fa42 	bl	800ba82 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004606:	2200      	movs	r2, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f007 fb1c 	bl	800bc46 <HAL_RTC_GetDate>

		rtcSemaphore.semaphoreGive();
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	330c      	adds	r3, #12
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fe23 	bl	800425e <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
		err = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}


	return err;
 800461c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461e:	b2db      	uxtb	r3, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	@ 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

 ModemTxCB LocalModemTxCB = nullptr ;
 InverterTxCB LocalInverterTxCB = nullptr ;


void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 8004632:	4a06      	ldr	r2, [pc, #24]	@ (800464c <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 8004638:	4a05      	ldr	r2, [pc, #20]	@ (8004650 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6013      	str	r3, [r2, #0]
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20001940 	.word	0x20001940
 8004650:	20001944 	.word	0x20001944

08004654 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
	LocalInverterRxCB = Rxcb;
	LocalInverterTxCB = TxCB;
}

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004660:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b22      	cmp	r3, #34	@ 0x22
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d021      	beq.n	80046bc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x68>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b29b      	uxth	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 8004684:	89bb      	ldrh	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 800468a:	89bb      	ldrh	r3, [r7, #12]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	b21a      	sxth	r2, r3
 8004690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004694:	4313      	orrs	r3, r2
 8004696:	b21b      	sxth	r3, r3
 8004698:	81fb      	strh	r3, [r7, #14]




		if (huart == &GSM_U) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a0b      	ldr	r2, [pc, #44]	@ (80046cc <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x78>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10a      	bne.n	80046b8 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			if(LocalModemRxCB)
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	89fa      	ldrh	r2, [r7, #14]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	4611      	mov	r1, r2
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
			}

		}


		return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e003      	b.n	80046c4 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x70>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
	}
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	200020a0 	.word	0x200020a0
 80046d0:	20001940 	.word	0x20001940

080046d4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ff9a 	bl	8004654 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 8004720:	e0a4      	b.n	800486c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8083 	beq.w	8004838 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004742:	2b00      	cmp	r3, #0
 8004744:	d078      	beq.n	8004838 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00f      	beq.n	8004770 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0201 	mvn.w	r2, #1
 8004762:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00f      	beq.n	800479a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0202 	mvn.w	r2, #2
 800478c:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f06f 0204 	mvn.w	r2, #4
 80047b6:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047bc:	f043 0202 	orr.w	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0208 	mvn.w	r2, #8
 80047ea:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f0:	f043 0208 	orr.w	r2, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d02d      	beq.n	8004866 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f008 fbea 	bl	800d004 <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 8004836:	e016      	b.n	8004866 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d014      	beq.n	800486c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	  {


			if (huart == &GSM_U) {
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a09      	ldr	r2, [pc, #36]	@ (8004874 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10a      	bne.n	800486a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				if(LocalModemTxCB)
 8004854:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				{
					LocalModemTxCB(huart);
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
				}

			}


	    return;
 8004864:	e001      	b.n	800486a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
	    return;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    return;
 800486a:	bf00      	nop
	  }



}
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	200020a0 	.word	0x200020a0
 8004878:	20001944 	.word	0x20001944

0800487c <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff25 	bl	80046d4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <_ZN13System_serial6serial12TransmitDataEPKhtm>:

	HAL_UART_Receive(Internal_UartHandler, data, size, timeout);

}

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	f008 fa39 	bl	800cd40 <HAL_UART_Transmit>


}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	4613      	mov	r3, r2
 80048e2:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	88fa      	ldrh	r2, [r7, #6]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f008 fab2 	bl	800ce56 <HAL_UART_Receive_IT>
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f008 faca 	bl	800cea0 <HAL_UART_AbortReceive_IT>
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f00c ff06 	bl	8011732 <strchr>
 8004926:	4603      	mov	r3, r0
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
{

}
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 8004956:	2302      	movs	r3, #2
 8004958:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 800495a:	490c      	ldr	r1, [pc, #48]	@ (800498c <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f00c ff08 	bl	8011772 <strstr>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
 800496c:	e008      	b.n	8004980 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 800496e:	4908      	ldr	r1, [pc, #32]	@ (8004990 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 8004970:	68b8      	ldr	r0, [r7, #8]
 8004972:	f00c fefe 	bl	8011772 <strstr>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 8004980:	7dfb      	ldrb	r3, [r7, #23]


}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	08013fdc 	.word	0x08013fdc
 8004990:	08013fe0 	.word	0x08013fe0

08004994 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800499a:	af00      	add	r7, sp, #0
 800499c:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 80049a0:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 80049a4:	6020      	str	r0, [r4, #0]
 80049a6:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 80049aa:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 80049ae:	6001      	str	r1, [r0, #0]
 80049b0:	4611      	mov	r1, r2
 80049b2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80049b6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049c0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80049c4:	460a      	mov	r2, r1
 80049c6:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 80049c8:	2302      	movs	r3, #2
 80049ca:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 80049d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049d8:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049e2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80049e6:	f107 0014 	add.w	r0, r7, #20
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	f00c feae 	bl	801174c <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 80049f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80049f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80049f8:	f107 0214 	add.w	r2, r7, #20
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	4610      	mov	r0, r2
 8004a00:	f00c feb7 	bl	8011772 <strstr>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e085      	b.n	8004b1a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 8004a0e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e07f      	b.n	8004b1a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 8004a1a:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff75 	bl	8004914 <_ZSt6strchrPci>
 8004a2a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 8004a2e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 8004a44:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8004a48:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a4a:	d105      	bne.n	8004a58 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 8004a4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004a50:	3302      	adds	r3, #2
 8004a52:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8004a56:	e007      	b.n	8004a68 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 8004a58:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8004a62:	e001      	b.n	8004a68 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 8004a64:	2302      	movs	r3, #2
 8004a66:	e058      	b.n	8004b1a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 8004a68:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004a6c:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8004a70:	e03c      	b.n	8004aec <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 8004a72:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004a76:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004a7a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4413      	add	r3, r2
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d00f      	beq.n	8004aac <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 8004a8c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004a90:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004a94:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	441a      	add	r2, r3
 8004a9c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8004aa0:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8004aa4:	440b      	add	r3, r1
 8004aa6:	7812      	ldrb	r2, [r2, #0]
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	e015      	b.n	8004ad8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 8004aac:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004ab0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004ab4:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	4413      	add	r3, r2
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d108      	bne.n	8004ad8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8004ac6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8004aca:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8004ace:	4413      	add	r3, r2
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e020      	b.n	8004b1a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8004ad8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8004adc:	3301      	adds	r3, #1
 8004ade:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 8004ae2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8004aec:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 8004af0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004af4:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004af8:	8819      	ldrh	r1, [r3, #0]
 8004afa:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004afe:	1acb      	subs	r3, r1, r3
 8004b00:	429a      	cmp	r2, r3
 8004b02:	da08      	bge.n	8004b16 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 8004b04:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004b08:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004b0c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3ad      	bcc.n	8004a72 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 8004b16:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}

08004b24 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 8004b32:	2300      	movs	r3, #0
 8004b34:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e040      	b.n	8004bc2 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	68b8      	ldr	r0, [r7, #8]
 8004b44:	f00c fe15 	bl	8011772 <strstr>
 8004b48:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 8004b50:	2302      	movs	r3, #2
 8004b52:	e036      	b.n	8004bc2 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fb fb8b 	bl	8000270 <strlen>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	69f8      	ldr	r0, [r7, #28]
 8004b6e:	f7ff fed1 	bl	8004914 <_ZSt6strchrPci>
 8004b72:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e021      	b.n	8004bc2 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 8004b88:	e00a      	b.n	8004ba0 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	7819      	ldrb	r1, [r3, #0]
 8004b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b94:	8b7b      	ldrh	r3, [r7, #26]
 8004b96:	1c58      	adds	r0, r3, #1
 8004b98:	8378      	strh	r0, [r7, #26]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	460a      	mov	r2, r1
 8004b9e:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d004      	beq.n	8004bb6 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 8004bac:	8b7a      	ldrh	r2, [r7, #26]
 8004bae:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	dbe9      	blt.n	8004b8a <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bba:	4413      	add	r3, r2
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]


    return stat;
 8004bc0:	7e7b      	ldrb	r3, [r7, #25]

}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

uint32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 8004bcc:	b082      	sub	sp, #8
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b08c      	sub	sp, #48	@ 0x30
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
 8004bd8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004bdc:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 8004be0:	78bb      	ldrb	r3, [r7, #2]
 8004be2:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b45      	cmp	r3, #69	@ 0x45
 8004bf0:	dc02      	bgt.n	8004bf8 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 8004bf2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004bf6:	e001      	b.n	8004bfc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 8004bf8:	f240 736c 	movw	r3, #1900	@ 0x76c
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4413      	add	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 8004c02:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8004c06:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 8004c08:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c0c:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 8004c0e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004c12:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 8004c14:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    uint32_t epoch = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 8004c26:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2c:	e012      	b.n	8004c54 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x88>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 8004c2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f861 	bl	8004cf8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 8004c3c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8004c40:	e001      	b.n	8004c46 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 8004c42:	f240 136d 	movw	r3, #365	@ 0x16d
 8004c46:	461a      	mov	r2, r3
 8004c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4a:	4413      	add	r3, r2
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	3301      	adds	r3, #1
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	dbe8      	blt.n	8004c2e <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	4a25      	ldr	r2, [pc, #148]	@ (8004cf4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 8004c66:	2301      	movs	r3, #1
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c6a:	e00f      	b.n	8004c8c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xc0>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6e:	69b9      	ldr	r1, [r7, #24]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f871 	bl	8004d58 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c82:	4413      	add	r3, r2
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	3301      	adds	r3, #1
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	dbeb      	blt.n	8004c6c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xa0>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	4413      	add	r3, r2
 8004ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	4413      	add	r3, r2
 8004cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc6:	4413      	add	r3, r2
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cce:	4413      	add	r3, r2
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3730      	adds	r7, #48	@ 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf0:	b002      	add	sp, #8
 8004cf2:	4770      	bx	lr
 8004cf4:	00015180 	.word	0x00015180

08004cf8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:
		}

}

bool Parsing_Checking::isLeapYear(int year)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10c      	bne.n	8004d26 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8004d10:	fb83 1302 	smull	r1, r3, r3, r2
 8004d14:	1159      	asrs	r1, r3, #5
 8004d16:	17d3      	asrs	r3, r2, #31
 8004d18:	1acb      	subs	r3, r1, r3
 8004d1a:	2164      	movs	r1, #100	@ 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 8004d2a:	fb83 1302 	smull	r1, r3, r3, r2
 8004d2e:	11d9      	asrs	r1, r3, #7
 8004d30:	17d3      	asrs	r3, r2, #31
 8004d32:	1acb      	subs	r3, r1, r3
 8004d34:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d108      	bne.n	8004d7c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff ffc3 	bl	8004cf8 <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 8004d82:	231d      	movs	r3, #29
 8004d84:	e004      	b.n	8004d90 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	4a03      	ldr	r2, [pc, #12]	@ (8004d98 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8004d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	0801440c 	.word	0x0801440c

08004d9c <_ZN2UI8SettingsEP11u8g2_struct>:

};


void Settings(u8g2_t *u8g2)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	int8_t sel_sub = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	75fb      	strb	r3, [r7, #23]
do {

	button::resetCode(button::btncodes::cNONE);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f001 f837 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 fa83 	bl	80062ba <u8g2_ClearBuffer>

		u8g2_DrawXBM(u8g2, 104, 0, imgcont::Settings.w, imgcont::Settings.h,imgcont::Settings.img);
 8004db4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee4 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8004db6:	7919      	ldrb	r1, [r3, #4]
 8004db8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee4 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8004dba:	795b      	ldrb	r3, [r3, #5]
 8004dbc:	4a49      	ldr	r2, [pc, #292]	@ (8004ee4 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	9201      	str	r2, [sp, #4]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2168      	movs	r1, #104	@ 0x68
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 f9fc 	bl	80061c8 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 ff31 	bl	8006c3a <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8004dd8:	2102      	movs	r1, #2
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f002 f9bb 	bl	8007156 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8004de0:	4941      	ldr	r1, [pc, #260]	@ (8004ee8 <_ZN2UI8SettingsEP11u8g2_struct+0x14c>)
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f002 f88a 	bl	8006efc <u8g2_SetFont>

		uint8_t strSize = std::strlen( UI_txts::Settings[sel_sub]);
 8004de8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4a3d      	ldr	r2, [pc, #244]	@ (8004eec <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8004df6:	4413      	add	r3, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fb fa39 	bl	8000270 <strlen>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]


		u8g2_DrawBox(u8g2, 2, 3 + (8*sel_sub) , (strSize * 5) + 1 , 9);
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	3303      	adds	r3, #3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	0089      	lsls	r1, r1, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	3301      	adds	r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2109      	movs	r1, #9
 8004e1c:	9100      	str	r1, [sp, #0]
 8004e1e:	2102      	movs	r1, #2
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fa14 	bl	800624e <u8g2_DrawBox>




		for(int i=0; i < TotalSettingsSub;i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	e014      	b.n	8004e56 <_ZN2UI8SettingsEP11u8g2_struct+0xba>
		{
			u8g2_DrawStr(u8g2, 3, 10 + (8*i), UI_txts::Settings[i]);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	330a      	adds	r3, #10
 8004e36:	b2d9      	uxtb	r1, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a2a      	ldr	r2, [pc, #168]	@ (8004eec <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8004e44:	4413      	add	r3, r2
 8004e46:	460a      	mov	r2, r1
 8004e48:	2103      	movs	r1, #3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 ffb4 	bl	8006db8 <u8g2_DrawStr>
		for(int i=0; i < TotalSettingsSub;i++)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	3301      	adds	r3, #1
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	dde7      	ble.n	8004e2c <_ZN2UI8SettingsEP11u8g2_struct+0x90>





		u8g2_SendBuffer(u8g2);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 fa9f 	bl	80063a0 <u8g2_SendBuffer>

		btncodes = button::get_event();
 8004e62:	f000 ffaf 	bl	8005dc4 <_ZN6button9get_eventEv>
 8004e66:	60b8      	str	r0, [r7, #8]
	}while (btncodes == button::btncodes::cNONE);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d09f      	beq.n	8004dae <_ZN2UI8SettingsEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cDWN_BT)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b28      	cmp	r3, #40	@ 0x28
 8004e72:	d106      	bne.n	8004e82 <_ZN2UI8SettingsEP11u8g2_struct+0xe6>
	{
		sel_sub++;
 8004e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	75fb      	strb	r3, [r7, #23]
 8004e80:	e01a      	b.n	8004eb8 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	}
	else if(btncodes == button::btncodes::cUP_BT)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b1e      	cmp	r3, #30
 8004e86:	d10c      	bne.n	8004ea2 <_ZN2UI8SettingsEP11u8g2_struct+0x106>
	{
		sel_sub--;
 8004e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	75fb      	strb	r3, [r7, #23]
        if(sel_sub < 0)
 8004e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da0d      	bge.n	8004eb8 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        {
        	sel_sub = TotalSettingsSub - 1;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
 8004ea0:	e00a      	b.n	8004eb8 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        }
	}
	else if(btncodes == button::btncodes::cEnter_BT)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b0a      	cmp	r3, #10
 8004ea6:	d107      	bne.n	8004eb8 <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	{
		set_UIcode(SettingsMenuCodes[sel_sub].code);
 8004ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eac:	4a10      	ldr	r2, [pc, #64]	@ (8004ef0 <_ZN2UI8SettingsEP11u8g2_struct+0x154>)
 8004eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 feb2 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}


	sel_sub = sel_sub % TotalSettingsSub;
 8004eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	bfb8      	it	lt
 8004ec4:	425b      	neglt	r3, r3
 8004ec6:	75fb      	strb	r3, [r7, #23]

}while (btncodes != button::btncodes::cRGHT_BT && btncodes != button::btncodes::cLFT_BT &&  btncodes != button::btncodes::cEnter_BT);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b32      	cmp	r3, #50	@ 0x32
 8004ecc:	d006      	beq.n	8004edc <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b3c      	cmp	r3, #60	@ 0x3c
 8004ed2:	d003      	beq.n	8004edc <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b0a      	cmp	r3, #10
 8004ed8:	f47f af66 	bne.w	8004da8 <_ZN2UI8SettingsEP11u8g2_struct+0xc>

}
 8004edc:	bf00      	nop
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	080149d4 	.word	0x080149d4
 8004ee8:	08014dd4 	.word	0x08014dd4
 8004eec:	0801443c 	.word	0x0801443c
 8004ef0:	20000000 	.word	0x20000000

08004ef4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct>:

void fuel_temp_humd(u8g2_t *u8g2) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8004efc:	2000      	movs	r0, #0
 8004efe:	f000 ff8d 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 f9d9 	bl	80062ba <u8g2_ClearBuffer>
		UI::common_iconsMain(u8g2);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fea3 	bl	8005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 8004f0e:	4b35      	ldr	r3, [pc, #212]	@ (8004fe4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf0>)
 8004f10:	7919      	ldrb	r1, [r3, #4]
 8004f12:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf0>)
 8004f14:	795b      	ldrb	r3, [r3, #5]
				imgcont::SensorInfo.img);
 8004f16:	4a33      	ldr	r2, [pc, #204]	@ (8004fe4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf0>)
 8004f18:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 8004f1a:	9201      	str	r2, [sp, #4]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	2202      	movs	r2, #2
 8004f22:	2130      	movs	r1, #48	@ 0x30
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 f94f 	bl	80061c8 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 fe84 	bl	8006c3a <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8004f32:	2102      	movs	r1, #2
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f002 f90e 	bl	8007156 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8004f3a:	492b      	ldr	r1, [pc, #172]	@ (8004fe8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf4>)
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 ffdd 	bl	8006efc <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 26, 9);
 8004f42:	2309      	movs	r3, #9
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	231a      	movs	r3, #26
 8004f48:	2211      	movs	r2, #17
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 f97e 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Fuel:");
 8004f52:	4b26      	ldr	r3, [pc, #152]	@ (8004fec <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xf8>)
 8004f54:	2219      	movs	r2, #25
 8004f56:	2103      	movs	r1, #3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 ff2d 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 35, "90%");
 8004f5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xfc>)
 8004f60:	2223      	movs	r2, #35	@ 0x23
 8004f62:	2105      	movs	r1, #5
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 ff27 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 26, 9);
 8004f6a:	2309      	movs	r3, #9
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	231a      	movs	r3, #26
 8004f70:	2228      	movs	r2, #40	@ 0x28
 8004f72:	2102      	movs	r1, #2
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 f96a 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Temp:");
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff4 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x100>)
 8004f7c:	2230      	movs	r2, #48	@ 0x30
 8004f7e:	2103      	movs	r1, #3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 ff19 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "90C");
 8004f86:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x104>)
 8004f88:	223a      	movs	r2, #58	@ 0x3a
 8004f8a:	2105      	movs	r1, #5
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 ff13 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 86, 17, 31, 9);
 8004f92:	2309      	movs	r3, #9
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	231f      	movs	r3, #31
 8004f98:	2211      	movs	r2, #17
 8004f9a:	2156      	movs	r1, #86	@ 0x56
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 f956 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 88, 25, "Humid:");
 8004fa2:	4b16      	ldr	r3, [pc, #88]	@ (8004ffc <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x108>)
 8004fa4:	2219      	movs	r2, #25
 8004fa6:	2158      	movs	r1, #88	@ 0x58
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 ff05 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 88, 35, "50%");
 8004fae:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x10c>)
 8004fb0:	2223      	movs	r2, #35	@ 0x23
 8004fb2:	2158      	movs	r1, #88	@ 0x58
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 feff 	bl	8006db8 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 f9f0 	bl	80063a0 <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 8004fc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fc4:	f000 ff0c 	bl	8005de0 <_ZN6button14get_eventTimedEm>
 8004fc8:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d098      	beq.n	8004f02 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b0a      	cmp	r3, #10
 8004fd4:	d102      	bne.n	8004fdc <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0xe8>
	{
		UI::set_UIcode(MenuNo::Settings);
 8004fd6:	2006      	movs	r0, #6
 8004fd8:	f000 fe20 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}

}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	080149cc 	.word	0x080149cc
 8004fe8:	08014dd4 	.word	0x08014dd4
 8004fec:	080140a0 	.word	0x080140a0
 8004ff0:	080140a8 	.word	0x080140a8
 8004ff4:	080140ac 	.word	0x080140ac
 8004ff8:	080140b4 	.word	0x080140b4
 8004ffc:	080140b8 	.word	0x080140b8
 8005000:	080140c0 	.word	0x080140c0

08005004 <_ZN2UI6AlarmsEP11u8g2_struct>:
void Alarms(u8g2_t *u8g2) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 800500c:	2000      	movs	r0, #0
 800500e:	f000 ff05 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f001 f951 	bl	80062ba <u8g2_ClearBuffer>
		UI::common_iconsMain(u8g2);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fe1b 	bl	8005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 800501e:	4b35      	ldr	r3, [pc, #212]	@ (80050f4 <_ZN2UI6AlarmsEP11u8g2_struct+0xf0>)
 8005020:	7919      	ldrb	r1, [r3, #4]
 8005022:	4b34      	ldr	r3, [pc, #208]	@ (80050f4 <_ZN2UI6AlarmsEP11u8g2_struct+0xf0>)
 8005024:	795b      	ldrb	r3, [r3, #5]
				imgcont::Alarms.img);
 8005026:	4a33      	ldr	r2, [pc, #204]	@ (80050f4 <_ZN2UI6AlarmsEP11u8g2_struct+0xf0>)
 8005028:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 800502a:	9201      	str	r2, [sp, #4]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	460b      	mov	r3, r1
 8005030:	2202      	movs	r2, #2
 8005032:	2130      	movs	r1, #48	@ 0x30
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 f8c7 	bl	80061c8 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 800503a:	2101      	movs	r1, #1
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 fdfc 	bl	8006c3a <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005042:	2102      	movs	r1, #2
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f002 f886 	bl	8007156 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 800504a:	492b      	ldr	r1, [pc, #172]	@ (80050f8 <_ZN2UI6AlarmsEP11u8g2_struct+0xf4>)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 ff55 	bl	8006efc <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 51, 9);
 8005052:	2309      	movs	r3, #9
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2333      	movs	r3, #51	@ 0x33
 8005058:	2211      	movs	r2, #17
 800505a:	2102      	movs	r1, #2
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f001 f8f6 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Frequency:");
 8005062:	4b26      	ldr	r3, [pc, #152]	@ (80050fc <_ZN2UI6AlarmsEP11u8g2_struct+0xf8>)
 8005064:	2219      	movs	r2, #25
 8005066:	2103      	movs	r1, #3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 fea5 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 35, "Normal"); //Over // under
 800506e:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <_ZN2UI6AlarmsEP11u8g2_struct+0xfc>)
 8005070:	2223      	movs	r2, #35	@ 0x23
 8005072:	2105      	movs	r1, #5
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fe9f 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 800507a:	2309      	movs	r3, #9
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	232e      	movs	r3, #46	@ 0x2e
 8005080:	2228      	movs	r2, #40	@ 0x28
 8005082:	2102      	movs	r1, #2
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f001 f8e2 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Overload:");
 800508a:	4b1e      	ldr	r3, [pc, #120]	@ (8005104 <_ZN2UI6AlarmsEP11u8g2_struct+0x100>)
 800508c:	2230      	movs	r2, #48	@ 0x30
 800508e:	2103      	movs	r1, #3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fe91 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Normal"); //Over under
 8005096:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <_ZN2UI6AlarmsEP11u8g2_struct+0xfc>)
 8005098:	223a      	movs	r2, #58	@ 0x3a
 800509a:	2105      	movs	r1, #5
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 fe8b 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 80050a2:	2309      	movs	r3, #9
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2333      	movs	r3, #51	@ 0x33
 80050a8:	2211      	movs	r2, #17
 80050aa:	2151      	movs	r1, #81	@ 0x51
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 f8ce 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "Phaseload:");
 80050b2:	4b15      	ldr	r3, [pc, #84]	@ (8005108 <_ZN2UI6AlarmsEP11u8g2_struct+0x104>)
 80050b4:	2219      	movs	r2, #25
 80050b6:	2152      	movs	r1, #82	@ 0x52
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fe7d 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Normal"); //Over under
 80050be:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <_ZN2UI6AlarmsEP11u8g2_struct+0xfc>)
 80050c0:	2223      	movs	r2, #35	@ 0x23
 80050c2:	2152      	movs	r1, #82	@ 0x52
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 fe77 	bl	8006db8 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f968 	bl	80063a0 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 80050d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050d4:	f000 fe84 	bl	8005de0 <_ZN6button14get_eventTimedEm>
 80050d8:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d098      	beq.n	8005012 <_ZN2UI6AlarmsEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b0a      	cmp	r3, #10
 80050e4:	d102      	bne.n	80050ec <_ZN2UI6AlarmsEP11u8g2_struct+0xe8>
	{
		UI::set_UIcode(MenuNo::Settings);
 80050e6:	2006      	movs	r0, #6
 80050e8:	f000 fd98 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	080149c4 	.word	0x080149c4
 80050f8:	08014dd4 	.word	0x08014dd4
 80050fc:	080140c4 	.word	0x080140c4
 8005100:	080140d0 	.word	0x080140d0
 8005104:	080140d8 	.word	0x080140d8
 8005108:	080140e4 	.word	0x080140e4

0800510c <_ZN2UI7BatteryEP11u8g2_struct>:
void Battery(u8g2_t *u8g2) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005114:	2000      	movs	r0, #0
 8005116:	f000 fe81 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 f8cd 	bl	80062ba <u8g2_ClearBuffer>
		UI::common_iconsMain(u8g2);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fd97 	bl	8005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 8005126:	4b35      	ldr	r3, [pc, #212]	@ (80051fc <_ZN2UI7BatteryEP11u8g2_struct+0xf0>)
 8005128:	7919      	ldrb	r1, [r3, #4]
 800512a:	4b34      	ldr	r3, [pc, #208]	@ (80051fc <_ZN2UI7BatteryEP11u8g2_struct+0xf0>)
 800512c:	795b      	ldrb	r3, [r3, #5]
				imgcont::Battery.img);
 800512e:	4a33      	ldr	r2, [pc, #204]	@ (80051fc <_ZN2UI7BatteryEP11u8g2_struct+0xf0>)
 8005130:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 8005132:	9201      	str	r2, [sp, #4]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	460b      	mov	r3, r1
 8005138:	2202      	movs	r2, #2
 800513a:	2130      	movs	r1, #48	@ 0x30
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 f843 	bl	80061c8 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005142:	2101      	movs	r1, #1
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f001 fd78 	bl	8006c3a <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 800514a:	2102      	movs	r1, #2
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f802 	bl	8007156 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005152:	492b      	ldr	r1, [pc, #172]	@ (8005200 <_ZN2UI7BatteryEP11u8g2_struct+0xf4>)
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 fed1 	bl	8006efc <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 800515a:	2309      	movs	r3, #9
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	2329      	movs	r3, #41	@ 0x29
 8005160:	2211      	movs	r2, #17
 8005162:	2102      	movs	r1, #2
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 f872 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Percent:");
 800516a:	4b26      	ldr	r3, [pc, #152]	@ (8005204 <_ZN2UI7BatteryEP11u8g2_struct+0xf8>)
 800516c:	2219      	movs	r2, #25
 800516e:	2103      	movs	r1, #3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 fe21 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 15, 35, "98%");
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <_ZN2UI7BatteryEP11u8g2_struct+0xfc>)
 8005178:	2223      	movs	r2, #35	@ 0x23
 800517a:	210f      	movs	r1, #15
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fe1b 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8005182:	2309      	movs	r3, #9
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	232e      	movs	r3, #46	@ 0x2e
 8005188:	2228      	movs	r2, #40	@ 0x28
 800518a:	2102      	movs	r1, #2
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 f85e 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "ChrgTime:");
 8005192:	4b1e      	ldr	r3, [pc, #120]	@ (800520c <_ZN2UI7BatteryEP11u8g2_struct+0x100>)
 8005194:	2230      	movs	r2, #48	@ 0x30
 8005196:	2103      	movs	r1, #3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fe0d 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "01:25:08");
 800519e:	4b1c      	ldr	r3, [pc, #112]	@ (8005210 <_ZN2UI7BatteryEP11u8g2_struct+0x104>)
 80051a0:	223a      	movs	r2, #58	@ 0x3a
 80051a2:	2105      	movs	r1, #5
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 fe07 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 80051aa:	2309      	movs	r3, #9
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	2333      	movs	r3, #51	@ 0x33
 80051b0:	2211      	movs	r2, #17
 80051b2:	2151      	movs	r1, #81	@ 0x51
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 f84a 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "DchrgTime:");
 80051ba:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <_ZN2UI7BatteryEP11u8g2_struct+0x108>)
 80051bc:	2219      	movs	r2, #25
 80051be:	2152      	movs	r1, #82	@ 0x52
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fdf9 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "02:25:08");
 80051c6:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <_ZN2UI7BatteryEP11u8g2_struct+0x10c>)
 80051c8:	2223      	movs	r2, #35	@ 0x23
 80051ca:	2152      	movs	r1, #82	@ 0x52
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fdf3 	bl	8006db8 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 f8e4 	bl	80063a0 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 80051d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051dc:	f000 fe00 	bl	8005de0 <_ZN6button14get_eventTimedEm>
 80051e0:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d098      	beq.n	800511a <_ZN2UI7BatteryEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b0a      	cmp	r3, #10
 80051ec:	d102      	bne.n	80051f4 <_ZN2UI7BatteryEP11u8g2_struct+0xe8>
	{
		UI::set_UIcode(MenuNo::Settings);
 80051ee:	2006      	movs	r0, #6
 80051f0:	f000 fd14 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	080149bc 	.word	0x080149bc
 8005200:	08014dd4 	.word	0x08014dd4
 8005204:	080140f0 	.word	0x080140f0
 8005208:	080140fc 	.word	0x080140fc
 800520c:	08014100 	.word	0x08014100
 8005210:	0801410c 	.word	0x0801410c
 8005214:	08014118 	.word	0x08014118
 8005218:	08014124 	.word	0x08014124

0800521c <_ZN2UI6sourceEP11u8g2_struct>:
void source(u8g2_t *u8g2) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af02      	add	r7, sp, #8
 8005222:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005224:	2000      	movs	r0, #0
 8005226:	f000 fdf9 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 f845 	bl	80062ba <u8g2_ClearBuffer>
		UI::common_iconsMain(u8g2);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fd0f 	bl	8005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 8005236:	4b35      	ldr	r3, [pc, #212]	@ (800530c <_ZN2UI6sourceEP11u8g2_struct+0xf0>)
 8005238:	7919      	ldrb	r1, [r3, #4]
 800523a:	4b34      	ldr	r3, [pc, #208]	@ (800530c <_ZN2UI6sourceEP11u8g2_struct+0xf0>)
 800523c:	795b      	ldrb	r3, [r3, #5]
				imgcont::Source.img);
 800523e:	4a33      	ldr	r2, [pc, #204]	@ (800530c <_ZN2UI6sourceEP11u8g2_struct+0xf0>)
 8005240:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 8005242:	9201      	str	r2, [sp, #4]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	460b      	mov	r3, r1
 8005248:	2202      	movs	r2, #2
 800524a:	2130      	movs	r1, #48	@ 0x30
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 ffbb 	bl	80061c8 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005252:	2101      	movs	r1, #1
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fcf0 	bl	8006c3a <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 800525a:	2102      	movs	r1, #2
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 ff7a 	bl	8007156 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005262:	492b      	ldr	r1, [pc, #172]	@ (8005310 <_ZN2UI6sourceEP11u8g2_struct+0xf4>)
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fe49 	bl	8006efc <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 800526a:	2309      	movs	r3, #9
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	2329      	movs	r3, #41	@ 0x29
 8005270:	2211      	movs	r2, #17
 8005272:	2102      	movs	r1, #2
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 ffea 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Battery:");
 800527a:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <_ZN2UI6sourceEP11u8g2_struct+0xf8>)
 800527c:	2219      	movs	r2, #25
 800527e:	2103      	movs	r1, #3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 fd99 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, "Active");  //Off
 8005286:	4b24      	ldr	r3, [pc, #144]	@ (8005318 <_ZN2UI6sourceEP11u8g2_struct+0xfc>)
 8005288:	2223      	movs	r2, #35	@ 0x23
 800528a:	2102      	movs	r1, #2
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fd93 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 51, 9);
 8005292:	2309      	movs	r3, #9
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2333      	movs	r3, #51	@ 0x33
 8005298:	2228      	movs	r2, #40	@ 0x28
 800529a:	2102      	movs	r1, #2
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 ffd6 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Generator:");
 80052a2:	4b1e      	ldr	r3, [pc, #120]	@ (800531c <_ZN2UI6sourceEP11u8g2_struct+0x100>)
 80052a4:	2230      	movs	r2, #48	@ 0x30
 80052a6:	2103      	movs	r1, #3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fd85 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Idle"); //running
 80052ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005320 <_ZN2UI6sourceEP11u8g2_struct+0x104>)
 80052b0:	223a      	movs	r2, #58	@ 0x3a
 80052b2:	2105      	movs	r1, #5
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 fd7f 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 31, 9);
 80052ba:	2309      	movs	r3, #9
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	231f      	movs	r3, #31
 80052c0:	2211      	movs	r2, #17
 80052c2:	2154      	movs	r1, #84	@ 0x54
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 ffc2 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Solar:");
 80052ca:	4b16      	ldr	r3, [pc, #88]	@ (8005324 <_ZN2UI6sourceEP11u8g2_struct+0x108>)
 80052cc:	2219      	movs	r2, #25
 80052ce:	2155      	movs	r1, #85	@ 0x55
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 fd71 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Standby"); //Online
 80052d6:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <_ZN2UI6sourceEP11u8g2_struct+0x10c>)
 80052d8:	2223      	movs	r2, #35	@ 0x23
 80052da:	2152      	movs	r1, #82	@ 0x52
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fd6b 	bl	8006db8 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 f85c 	bl	80063a0 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 80052e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052ec:	f000 fd78 	bl	8005de0 <_ZN6button14get_eventTimedEm>
 80052f0:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d098      	beq.n	800522a <_ZN2UI6sourceEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b0a      	cmp	r3, #10
 80052fc:	d102      	bne.n	8005304 <_ZN2UI6sourceEP11u8g2_struct+0xe8>
	{
		UI::set_UIcode(MenuNo::Settings);
 80052fe:	2006      	movs	r0, #6
 8005300:	f000 fc8c 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}

}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	080149b4 	.word	0x080149b4
 8005310:	08014dd4 	.word	0x08014dd4
 8005314:	08014130 	.word	0x08014130
 8005318:	0801413c 	.word	0x0801413c
 800531c:	08014144 	.word	0x08014144
 8005320:	08014150 	.word	0x08014150
 8005324:	08014158 	.word	0x08014158
 8005328:	08014160 	.word	0x08014160

0800532c <_ZN2UI7networkEP11u8g2_struct>:
void network(u8g2_t *u8g2) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005334:	2000      	movs	r0, #0
 8005336:	f000 fd71 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 ffbd 	bl	80062ba <u8g2_ClearBuffer>
		UI::common_iconsMain(u8g2);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fc87 	bl	8005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <_ZN2UI7networkEP11u8g2_struct+0xf0>)
 8005348:	7919      	ldrb	r1, [r3, #4]
 800534a:	4b34      	ldr	r3, [pc, #208]	@ (800541c <_ZN2UI7networkEP11u8g2_struct+0xf0>)
 800534c:	795b      	ldrb	r3, [r3, #5]
				imgcont::Network.img);
 800534e:	4a33      	ldr	r2, [pc, #204]	@ (800541c <_ZN2UI7networkEP11u8g2_struct+0xf0>)
 8005350:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 8005352:	9201      	str	r2, [sp, #4]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	460b      	mov	r3, r1
 8005358:	2202      	movs	r2, #2
 800535a:	2130      	movs	r1, #48	@ 0x30
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 ff33 	bl	80061c8 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005362:	2101      	movs	r1, #1
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 fc68 	bl	8006c3a <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 800536a:	2102      	movs	r1, #2
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fef2 	bl	8007156 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005372:	492b      	ldr	r1, [pc, #172]	@ (8005420 <_ZN2UI7networkEP11u8g2_struct+0xf4>)
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fdc1 	bl	8006efc <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 800537a:	2309      	movs	r3, #9
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2329      	movs	r3, #41	@ 0x29
 8005380:	2211      	movs	r2, #17
 8005382:	2102      	movs	r1, #2
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 ff62 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Network:");
 800538a:	4b26      	ldr	r3, [pc, #152]	@ (8005424 <_ZN2UI7networkEP11u8g2_struct+0xf8>)
 800538c:	2219      	movs	r2, #25
 800538e:	2103      	movs	r1, #3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 fd11 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, "Connected");
 8005396:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <_ZN2UI7networkEP11u8g2_struct+0xfc>)
 8005398:	2223      	movs	r2, #35	@ 0x23
 800539a:	2102      	movs	r1, #2
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fd0b 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 80053a2:	2309      	movs	r3, #9
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	232e      	movs	r3, #46	@ 0x2e
 80053a8:	2228      	movs	r2, #40	@ 0x28
 80053aa:	2102      	movs	r1, #2
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 ff4e 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Signal-Q:");
 80053b2:	4b1e      	ldr	r3, [pc, #120]	@ (800542c <_ZN2UI7networkEP11u8g2_struct+0x100>)
 80053b4:	2230      	movs	r2, #48	@ 0x30
 80053b6:	2103      	movs	r1, #3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 fcfd 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "-50dBm");
 80053be:	4b1c      	ldr	r3, [pc, #112]	@ (8005430 <_ZN2UI7networkEP11u8g2_struct+0x104>)
 80053c0:	223a      	movs	r2, #58	@ 0x3a
 80053c2:	2105      	movs	r1, #5
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fcf7 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 26, 9);
 80053ca:	2309      	movs	r3, #9
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	231a      	movs	r3, #26
 80053d0:	2211      	movs	r2, #17
 80053d2:	2154      	movs	r1, #84	@ 0x54
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 ff3a 	bl	800624e <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Data:");
 80053da:	4b16      	ldr	r3, [pc, #88]	@ (8005434 <_ZN2UI7networkEP11u8g2_struct+0x108>)
 80053dc:	2219      	movs	r2, #25
 80053de:	2155      	movs	r1, #85	@ 0x55
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fce9 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 83, 35, "Discon");
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <_ZN2UI7networkEP11u8g2_struct+0x10c>)
 80053e8:	2223      	movs	r2, #35	@ 0x23
 80053ea:	2153      	movs	r1, #83	@ 0x53
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 fce3 	bl	8006db8 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 ffd4 	bl	80063a0 <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 80053f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053fc:	f000 fcf0 	bl	8005de0 <_ZN6button14get_eventTimedEm>
 8005400:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d098      	beq.n	800533a <_ZN2UI7networkEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b0a      	cmp	r3, #10
 800540c:	d102      	bne.n	8005414 <_ZN2UI7networkEP11u8g2_struct+0xe8>
	{
		UI::set_UIcode(MenuNo::Settings);
 800540e:	2006      	movs	r0, #6
 8005410:	f000 fc04 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	080149ac 	.word	0x080149ac
 8005420:	08014dd4 	.word	0x08014dd4
 8005424:	08014168 	.word	0x08014168
 8005428:	08014174 	.word	0x08014174
 800542c:	08014180 	.word	0x08014180
 8005430:	0801418c 	.word	0x0801418c
 8005434:	08014194 	.word	0x08014194
 8005438:	0801419c 	.word	0x0801419c

0800543c <_ZN2UI5powerEP11u8g2_struct>:

void power(u8g2_t *u8g2) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]

	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005444:	2000      	movs	r0, #0
 8005446:	f000 fce9 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
	do {

		u8g2_ClearBuffer(u8g2);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ff35 	bl	80062ba <u8g2_ClearBuffer>

		UI::common_iconsMain(u8g2);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fbff 	bl	8005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005456:	4933      	ldr	r1, [pc, #204]	@ (8005524 <_ZN2UI5powerEP11u8g2_struct+0xe8>)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fd4f 	bl	8006efc <u8g2_SetFont>

		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 800545e:	4b32      	ldr	r3, [pc, #200]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005460:	7919      	ldrb	r1, [r3, #4]
 8005462:	4b31      	ldr	r3, [pc, #196]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005464:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 8005466:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005468:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 800546a:	9201      	str	r2, [sp, #4]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	460b      	mov	r3, r1
 8005470:	2210      	movs	r2, #16
 8005472:	210a      	movs	r1, #10
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fea7 	bl	80061c8 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 5, 38, "220.0V");
 800547a:	4b2c      	ldr	r3, [pc, #176]	@ (800552c <_ZN2UI5powerEP11u8g2_struct+0xf0>)
 800547c:	2226      	movs	r2, #38	@ 0x26
 800547e:	2105      	movs	r1, #5
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 fc99 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 46, "020.6A");
 8005486:	4b2a      	ldr	r3, [pc, #168]	@ (8005530 <_ZN2UI5powerEP11u8g2_struct+0xf4>)
 8005488:	222e      	movs	r2, #46	@ 0x2e
 800548a:	2105      	movs	r1, #5
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fc93 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 8005492:	4b25      	ldr	r3, [pc, #148]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005494:	7919      	ldrb	r1, [r3, #4]
 8005496:	4b24      	ldr	r3, [pc, #144]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 8005498:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 800549a:	4a23      	ldr	r2, [pc, #140]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 800549c:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 800549e:	9201      	str	r2, [sp, #4]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	460b      	mov	r3, r1
 80054a4:	220a      	movs	r2, #10
 80054a6:	2136      	movs	r1, #54	@ 0x36
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fe8d 	bl	80061c8 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 50, 32, "220.0V");
 80054ae:	4b1f      	ldr	r3, [pc, #124]	@ (800552c <_ZN2UI5powerEP11u8g2_struct+0xf0>)
 80054b0:	2220      	movs	r2, #32
 80054b2:	2132      	movs	r1, #50	@ 0x32
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fc7f 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 50, 40, "020.6A");
 80054ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <_ZN2UI5powerEP11u8g2_struct+0xf4>)
 80054bc:	2228      	movs	r2, #40	@ 0x28
 80054be:	2132      	movs	r1, #50	@ 0x32
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 fc79 	bl	8006db8 <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 80054c6:	4b18      	ldr	r3, [pc, #96]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 80054c8:	7919      	ldrb	r1, [r3, #4]
 80054ca:	4b17      	ldr	r3, [pc, #92]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 80054cc:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 80054ce:	4a16      	ldr	r2, [pc, #88]	@ (8005528 <_ZN2UI5powerEP11u8g2_struct+0xec>)
 80054d0:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 80054d2:	9201      	str	r2, [sp, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	460b      	mov	r3, r1
 80054d8:	2210      	movs	r2, #16
 80054da:	2164      	movs	r1, #100	@ 0x64
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fe73 	bl	80061c8 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 96, 38, "220.0V");
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <_ZN2UI5powerEP11u8g2_struct+0xf0>)
 80054e4:	2226      	movs	r2, #38	@ 0x26
 80054e6:	2160      	movs	r1, #96	@ 0x60
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fc65 	bl	8006db8 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 96, 46, "020.6A");
 80054ee:	4b10      	ldr	r3, [pc, #64]	@ (8005530 <_ZN2UI5powerEP11u8g2_struct+0xf4>)
 80054f0:	222e      	movs	r2, #46	@ 0x2e
 80054f2:	2160      	movs	r1, #96	@ 0x60
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 fc5f 	bl	8006db8 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ff50 	bl	80063a0 <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 8005500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005504:	f000 fc6c 	bl	8005de0 <_ZN6button14get_eventTimedEm>
 8005508:	60f8      	str	r0, [r7, #12]

	} while (btncodes == button::btncodes::cNONE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d09c      	beq.n	800544a <_ZN2UI5powerEP11u8g2_struct+0xe>

	if(btncodes == button::btncodes::cEnter_BT)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d102      	bne.n	800551c <_ZN2UI5powerEP11u8g2_struct+0xe0>
	{
		UI::set_UIcode(MenuNo::Settings);
 8005516:	2006      	movs	r0, #6
 8005518:	f000 fb80 	bl	8005c1c <_ZN2UI10set_UIcodeE6MenuNo>
	}

}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	08014dd4 	.word	0x08014dd4
 8005528:	080149a4 	.word	0x080149a4
 800552c:	080141a4 	.word	0x080141a4
 8005530:	080141ac 	.word	0x080141ac

08005534 <_ZN2UI4loopEP11u8g2_struct>:

void loop(u8g2_t *u8g2) {
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	uint16_t index;
	if (CurrMenu == MenuNo::None) {
 800553c:	4b81      	ldr	r3, [pc, #516]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b09      	cmp	r3, #9
 8005542:	d102      	bne.n	800554a <_ZN2UI4loopEP11u8g2_struct+0x16>
		CurrMenu = MenuNo::Power;
 8005544:	4b7f      	ldr	r3, [pc, #508]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
	}

	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 800554a:	2300      	movs	r3, #0
 800554c:	81fb      	strh	r3, [r7, #14]
 800554e:	e00e      	b.n	800556e <_ZN2UI4loopEP11u8g2_struct+0x3a>
			index++) {
		if (CurrMenu == MenuArray[index].MenuNo) // check if this menu is found ?
 8005550:	89fa      	ldrh	r2, [r7, #14]
 8005552:	497d      	ldr	r1, [pc, #500]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b78      	ldr	r3, [pc, #480]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d006      	beq.n	8005576 <_ZN2UI4loopEP11u8g2_struct+0x42>
	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	3301      	adds	r3, #1
 800556c:	81fb      	strh	r3, [r7, #14]
 800556e:	89fb      	ldrh	r3, [r7, #14]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d9ed      	bls.n	8005550 <_ZN2UI4loopEP11u8g2_struct+0x1c>
 8005574:	e000      	b.n	8005578 <_ZN2UI4loopEP11u8g2_struct+0x44>
				{
			break;
 8005576:	bf00      	nop
		}
	}

	if (index < (sizeof(MenuArray) / sizeof(MenuArray[0]))) {
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	2b08      	cmp	r3, #8
 800557c:	f200 80d9 	bhi.w	8005732 <_ZN2UI4loopEP11u8g2_struct+0x1fe>
		std::memset(UI::display_buffer, 0, sizeof(UI::display_buffer));
 8005580:	22ff      	movs	r2, #255	@ 0xff
 8005582:	2100      	movs	r1, #0
 8005584:	4871      	ldr	r0, [pc, #452]	@ (800574c <_ZN2UI4loopEP11u8g2_struct+0x218>)
 8005586:	f00c f8cc 	bl	8011722 <memset>
		MenuArray[index].function(u8g2);
 800558a:	89fa      	ldrh	r2, [r7, #14]
 800558c:	496e      	ldr	r1, [pc, #440]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3304      	adds	r3, #4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3

		/*Add buttons related logic*/

		switch (button::get_code()) {
 80055a0:	f000 fc30 	bl	8005e04 <_ZN6button8get_codeEv>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b0a      	cmp	r3, #10
 80055a8:	d04e      	beq.n	8005648 <_ZN2UI4loopEP11u8g2_struct+0x114>
 80055aa:	2b0a      	cmp	r3, #10
 80055ac:	f2c0 80c5 	blt.w	800573a <_ZN2UI4loopEP11u8g2_struct+0x206>
 80055b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80055b2:	f300 80c2 	bgt.w	800573a <_ZN2UI4loopEP11u8g2_struct+0x206>
 80055b6:	2b1e      	cmp	r3, #30
 80055b8:	f2c0 80bf 	blt.w	800573a <_ZN2UI4loopEP11u8g2_struct+0x206>
 80055bc:	3b1e      	subs	r3, #30
 80055be:	2b1e      	cmp	r3, #30
 80055c0:	f200 80bb 	bhi.w	800573a <_ZN2UI4loopEP11u8g2_struct+0x206>
 80055c4:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <_ZN2UI4loopEP11u8g2_struct+0x98>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080056d3 	.word	0x080056d3
 80055d0:	0800573b 	.word	0x0800573b
 80055d4:	0800573b 	.word	0x0800573b
 80055d8:	0800573b 	.word	0x0800573b
 80055dc:	0800573b 	.word	0x0800573b
 80055e0:	0800573b 	.word	0x0800573b
 80055e4:	0800573b 	.word	0x0800573b
 80055e8:	0800573b 	.word	0x0800573b
 80055ec:	0800573b 	.word	0x0800573b
 80055f0:	0800573b 	.word	0x0800573b
 80055f4:	080056eb 	.word	0x080056eb
 80055f8:	0800573b 	.word	0x0800573b
 80055fc:	0800573b 	.word	0x0800573b
 8005600:	0800573b 	.word	0x0800573b
 8005604:	0800573b 	.word	0x0800573b
 8005608:	0800573b 	.word	0x0800573b
 800560c:	0800573b 	.word	0x0800573b
 8005610:	0800573b 	.word	0x0800573b
 8005614:	0800573b 	.word	0x0800573b
 8005618:	0800573b 	.word	0x0800573b
 800561c:	08005703 	.word	0x08005703
 8005620:	0800573b 	.word	0x0800573b
 8005624:	0800573b 	.word	0x0800573b
 8005628:	0800573b 	.word	0x0800573b
 800562c:	0800573b 	.word	0x0800573b
 8005630:	0800573b 	.word	0x0800573b
 8005634:	0800573b 	.word	0x0800573b
 8005638:	0800573b 	.word	0x0800573b
 800563c:	0800573b 	.word	0x0800573b
 8005640:	0800573b 	.word	0x0800573b
 8005644:	0800571b 	.word	0x0800571b
		case button::btncodes::cEnter_BT: {
			int i = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
			for (i = 0; i < TotalEnterIndexes; i++) {
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	e03a      	b.n	80056c8 <_ZN2UI4loopEP11u8g2_struct+0x194>

				if (MenuArray[index].Enter[i] == MenuNo::None) {
 8005652:	89fa      	ldrh	r2, [r7, #14]
 8005654:	493c      	ldr	r1, [pc, #240]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	4413      	add	r3, r2
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	4413      	add	r3, r2
 8005660:	3302      	adds	r3, #2
 8005662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005666:	2b09      	cmp	r3, #9
 8005668:	d10a      	bne.n	8005680 <_ZN2UI4loopEP11u8g2_struct+0x14c>
					CurrMenu = MenuArray[index].MenuNo; //stay in our own menu
 800566a:	89fa      	ldrh	r2, [r7, #14]
 800566c:	4936      	ldr	r1, [pc, #216]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a32      	ldr	r2, [pc, #200]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800567c:	6013      	str	r3, [r2, #0]
					break;
 800567e:	e027      	b.n	80056d0 <_ZN2UI4loopEP11u8g2_struct+0x19c>
				}

				if (MenuArray[index].Enter[i] == UI::get_UIcode())
 8005680:	89fa      	ldrh	r2, [r7, #14]
 8005682:	4931      	ldr	r1, [pc, #196]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8005684:	4613      	mov	r3, r2
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	4413      	add	r3, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	3302      	adds	r3, #2
 8005690:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005694:	f000 fad2 	bl	8005c3c <_ZN2UI10get_UIcodeEv>
 8005698:	4603      	mov	r3, r0
 800569a:	429c      	cmp	r4, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <_ZN2UI4loopEP11u8g2_struct+0x18e>
				{
					CurrMenu = MenuArray[index].Enter[i];
 80056a8:	89fa      	ldrh	r2, [r7, #14]
 80056aa:	4927      	ldr	r1, [pc, #156]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	4413      	add	r3, r2
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	3302      	adds	r3, #2
 80056b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056bc:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80056be:	6013      	str	r3, [r2, #0]
					break;
 80056c0:	e006      	b.n	80056d0 <_ZN2UI4loopEP11u8g2_struct+0x19c>
			for (i = 0; i < TotalEnterIndexes; i++) {
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	ddc1      	ble.n	8005652 <_ZN2UI4loopEP11u8g2_struct+0x11e>
				}

			}

			break;
 80056ce:	e035      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
 80056d0:	e034      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cUP_BT: {
			CurrMenu = MenuArray[index].UP;
 80056d2:	89fa      	ldrh	r2, [r7, #14]
 80056d4:	491c      	ldr	r1, [pc, #112]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	3338      	adds	r3, #56	@ 0x38
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80056e6:	6013      	str	r3, [r2, #0]
			break;
 80056e8:	e028      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cDWN_BT: {
			CurrMenu = MenuArray[index].DN;
 80056ea:	89fa      	ldrh	r2, [r7, #14]
 80056ec:	4916      	ldr	r1, [pc, #88]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80056ee:	4613      	mov	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	3334      	adds	r3, #52	@ 0x34
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80056fe:	6013      	str	r3, [r2, #0]
			break;
 8005700:	e01c      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cRGHT_BT: {
			CurrMenu = MenuArray[index].RGT;
 8005702:	89fa      	ldrh	r2, [r7, #14]
 8005704:	4910      	ldr	r1, [pc, #64]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8005706:	4613      	mov	r3, r2
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	3340      	adds	r3, #64	@ 0x40
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0b      	ldr	r2, [pc, #44]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8005716:	6013      	str	r3, [r2, #0]
			break;
 8005718:	e010      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cLFT_BT: {
			CurrMenu = MenuArray[index].LFT;
 800571a:	89fa      	ldrh	r2, [r7, #14]
 800571c:	490a      	ldr	r1, [pc, #40]	@ (8005748 <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800571e:	4613      	mov	r3, r2
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	333c      	adds	r3, #60	@ 0x3c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a05      	ldr	r2, [pc, #20]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800572e:	6013      	str	r3, [r2, #0]
			break;
 8005730:	e004      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;

		}

	} else {
		CurrMenu = MenuNo::None;
 8005732:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8005734:	2209      	movs	r2, #9
 8005736:	601a      	str	r2, [r3, #0]
	}

}
 8005738:	e000      	b.n	800573c <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;
 800573a:	bf00      	nop
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	bd90      	pop	{r4, r7, pc}
 8005744:	20000008 	.word	0x20000008
 8005748:	2000000c 	.word	0x2000000c
 800574c:	20001948 	.word	0x20001948

08005750 <_ZN2UI11SetTimeDateEP11u8g2_struct>:
	1
};



void UI::SetTimeDate(u8g2_t *u8g2) {
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b0a1      	sub	sp, #132	@ 0x84
 8005754:	af06      	add	r7, sp, #24
 8005756:	6078      	str	r0, [r7, #4]
	uint32_t epochTime;
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;

	int8_t timezone;
	stmRTC.getTime(&DDate, &DTime, &epochTime,&timezone);
 8005758:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800575c:	f107 0210 	add.w	r2, r7, #16
 8005760:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005764:	f107 030f 	add.w	r3, r7, #15
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	4603      	mov	r3, r0
 800576c:	48b8      	ldr	r0, [pc, #736]	@ (8005a50 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x300>)
 800576e:	f7fe fe9e 	bl	80044ae <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>

	int8_t selEpochPos = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	int8_t prevselPos = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66




	do {
		button::resetCode(button::btncodes::cNONE);
 800577e:	2000      	movs	r0, #0
 8005780:	f000 fb4c 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>

		do {
			u8g2_ClearBuffer(u8g2);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fd98 	bl	80062ba <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 800578a:	2101      	movs	r1, #1
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fa54 	bl	8006c3a <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8005792:	2102      	movs	r1, #2
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fcde 	bl	8007156 <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 800579a:	49ae      	ldr	r1, [pc, #696]	@ (8005a54 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x304>)
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fbad 	bl	8006efc <u8g2_SetFont>

			u8g2_DrawStr(u8g2, 10, 10, "Set Time 24hr Format");
 80057a2:	4bad      	ldr	r3, [pc, #692]	@ (8005a58 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x308>)
 80057a4:	220a      	movs	r2, #10
 80057a6:	210a      	movs	r1, #10
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 fb05 	bl	8006db8 <u8g2_DrawStr>


			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d", DTime.Hours, DTime.Minutes,DTime.Seconds,
 80057ae:	7c3b      	ldrb	r3, [r7, #16]
 80057b0:	461e      	mov	r6, r3
 80057b2:	7c7b      	ldrb	r3, [r7, #17]
 80057b4:	469c      	mov	ip, r3
 80057b6:	7cbb      	ldrb	r3, [r7, #18]
					                                                         DDate.Date,DDate.Month,DDate.Year,timezone);
 80057b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80057bc:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80057c0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d", DTime.Hours, DTime.Minutes,DTime.Seconds,
 80057c4:	4604      	mov	r4, r0
 80057c6:	f997 000f 	ldrsb.w	r0, [r7, #15]
 80057ca:	4605      	mov	r5, r0
 80057cc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80057d0:	9504      	str	r5, [sp, #16]
 80057d2:	9403      	str	r4, [sp, #12]
 80057d4:	9102      	str	r1, [sp, #8]
 80057d6:	9201      	str	r2, [sp, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	4663      	mov	r3, ip
 80057dc:	4632      	mov	r2, r6
 80057de:	499f      	ldr	r1, [pc, #636]	@ (8005a5c <_ZN2UI11SetTimeDateEP11u8g2_struct+0x30c>)
 80057e0:	f00b ff3c 	bl	801165c <siprintf>


        	u8g2_DrawStr(u8g2, 5, 30, epochtimeStr);
 80057e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057e8:	221e      	movs	r2, #30
 80057ea:	2105      	movs	r1, #5
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fae3 	bl	8006db8 <u8g2_DrawStr>





         	if(timezone < -9 && selEpochPos >= 12)
 80057f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f6:	f113 0f09 	cmn.w	r3, #9
 80057fa:	da13      	bge.n	8005824 <_ZN2UI11SetTimeDateEP11u8g2_struct+0xd4>
 80057fc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005800:	2b0b      	cmp	r3, #11
 8005802:	dd0f      	ble.n	8005824 <_ZN2UI11SetTimeDateEP11u8g2_struct+0xd4>
            	{
         		u8g2_DrawBox(u8g2, 5 + (5*(prevselPos+1))  , 22, 5, 9);
 8005804:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8005808:	3302      	adds	r3, #2
 800580a:	b2db      	uxtb	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	0092      	lsls	r2, r2, #2
 8005810:	4413      	add	r3, r2
 8005812:	b2d9      	uxtb	r1, r3
 8005814:	2309      	movs	r3, #9
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2305      	movs	r3, #5
 800581a:	2216      	movs	r2, #22
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fd16 	bl	800624e <u8g2_DrawBox>
 8005822:	e00e      	b.n	8005842 <_ZN2UI11SetTimeDateEP11u8g2_struct+0xf2>
            	}
         	else
         	{
         		u8g2_DrawBox(u8g2, 5 + (5*prevselPos)  , 22, 5, 9);
 8005824:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8005828:	3301      	adds	r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	0092      	lsls	r2, r2, #2
 8005830:	4413      	add	r3, r2
 8005832:	b2d9      	uxtb	r1, r3
 8005834:	2309      	movs	r3, #9
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2305      	movs	r3, #5
 800583a:	2216      	movs	r2, #22
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fd06 	bl	800624e <u8g2_DrawBox>
         	}




			u8g2_SendBuffer(u8g2);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fdac 	bl	80063a0 <u8g2_SendBuffer>
			btncodes = button::get_event();
 8005848:	f000 fabc 	bl	8005dc4 <_ZN6button9get_eventEv>
 800584c:	6638      	str	r0, [r7, #96]	@ 0x60
		} while (btncodes == button::btncodes::cNONE);
 800584e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005850:	2b00      	cmp	r3, #0
 8005852:	d097      	beq.n	8005784 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x34>

        switch(btncodes)
 8005854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005856:	2b32      	cmp	r3, #50	@ 0x32
 8005858:	d013      	beq.n	8005882 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x132>
 800585a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800585c:	2b32      	cmp	r3, #50	@ 0x32
 800585e:	f300 815e 	bgt.w	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
 8005862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005864:	2b28      	cmp	r3, #40	@ 0x28
 8005866:	d05b      	beq.n	8005920 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x1d0>
 8005868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800586a:	2b28      	cmp	r3, #40	@ 0x28
 800586c:	f300 8157 	bgt.w	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
 8005870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005872:	2b0a      	cmp	r3, #10
 8005874:	f000 8146 	beq.w	8005b04 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b4>
 8005878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800587a:	2b1e      	cmp	r3, #30
 800587c:	f000 80c4 	beq.w	8005a08 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b8>
 8005880:	e14d      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        {

        case button::btncodes::cRGHT_BT:
        {
        	selEpochPos++;
 8005882:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005886:	b2db      	uxtb	r3, r3
 8005888:	3301      	adds	r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

        	if(selEpochPos < 6)
 8005890:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005894:	2b05      	cmp	r3, #5
 8005896:	dc25      	bgt.n	80058e4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x194>
        	{
        		if(selEpochPos > 2)
 8005898:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800589c:	2b02      	cmp	r3, #2
 800589e:	dd11      	ble.n	80058c4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x174>
        		{
        			if(selEpochPos >= 4)
 80058a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	dd06      	ble.n	80058b6 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x166>
        			 {
        				prevselPos = selEpochPos+2;
 80058a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058ac:	3302      	adds	r3, #2
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        			prevselPos = prevselPos+1;
        		}
        	}


        	break;
 80058b4:	e133      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        				prevselPos = selEpochPos+1;
 80058b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058ba:	3301      	adds	r3, #1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        	break;
 80058c2:	e12c      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        			if(selEpochPos == 2)
 80058c4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d106      	bne.n	80058da <_ZN2UI11SetTimeDateEP11u8g2_struct+0x18a>
        				prevselPos = prevselPos+2;
 80058cc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80058d0:	3302      	adds	r3, #2
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        	break;
 80058d8:	e121      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        				prevselPos = selEpochPos;
 80058da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058de:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        	break;
 80058e2:	e11c      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        		if(selEpochPos == 6 || selEpochPos == 8 || selEpochPos == 10 || selEpochPos == 12)
 80058e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d00b      	beq.n	8005904 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x1b4>
 80058ec:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d007      	beq.n	8005904 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x1b4>
 80058f4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80058f8:	2b0a      	cmp	r3, #10
 80058fa:	d003      	beq.n	8005904 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x1b4>
 80058fc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d106      	bne.n	8005912 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x1c2>
        			prevselPos = prevselPos+2;
 8005904:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005908:	3302      	adds	r3, #2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        	break;
 8005910:	e105      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        			prevselPos = prevselPos+1;
 8005912:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005916:	3301      	adds	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        	break;
 800591e:	e0fe      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>


        case button::btncodes::cDWN_BT:
        {

        	switch(selEpochPos)
 8005920:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005924:	2b0d      	cmp	r3, #13
 8005926:	f200 80f7 	bhi.w	8005b18 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3c8>
 800592a:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x1e0>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005969 	.word	0x08005969
 8005934:	08005969 	.word	0x08005969
 8005938:	0800597d 	.word	0x0800597d
 800593c:	0800597d 	.word	0x0800597d
 8005940:	08005991 	.word	0x08005991
 8005944:	08005991 	.word	0x08005991
 8005948:	080059a5 	.word	0x080059a5
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059bd 	.word	0x080059bd
 8005954:	080059bd 	.word	0x080059bd
 8005958:	080059d5 	.word	0x080059d5
 800595c:	080059d5 	.word	0x080059d5
 8005960:	080059ed 	.word	0x080059ed
 8005964:	080059ed 	.word	0x080059ed
        	{
        	case 0:
        	case 1:
        	{
        		DTime.Hours = DTime.Hours -  datetime[selEpochPos];
 8005968:	7c3a      	ldrb	r2, [r7, #16]
 800596a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800596e:	493c      	ldr	r1, [pc, #240]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 8005970:	56cb      	ldrsb	r3, [r1, r3]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	743b      	strb	r3, [r7, #16]
        		break;
 800597a:	e044      	b.n	8005a06 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b6>
        	}
        	case 2:
        	case 3:
        	{
        		DTime.Minutes = DTime.Minutes -  datetime[selEpochPos];
 800597c:	7c7a      	ldrb	r2, [r7, #17]
 800597e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005982:	4937      	ldr	r1, [pc, #220]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 8005984:	56cb      	ldrsb	r3, [r1, r3]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	747b      	strb	r3, [r7, #17]
        		break;
 800598e:	e03a      	b.n	8005a06 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b6>
        	}
        	case 4:
        	case 5:
        	{
        		DTime.Seconds = DTime.Seconds -  datetime[selEpochPos];
 8005990:	7cba      	ldrb	r2, [r7, #18]
 8005992:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005996:	4932      	ldr	r1, [pc, #200]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 8005998:	56cb      	ldrsb	r3, [r1, r3]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	74bb      	strb	r3, [r7, #18]
        		break;
 80059a2:	e030      	b.n	8005a06 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b6>
        	}
        	case 6:
        	case 7:
        	{
        		DDate.Date = DDate.Date -  datetime[selEpochPos];
 80059a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80059a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80059ac:	492c      	ldr	r1, [pc, #176]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 80059ae:	56cb      	ldrsb	r3, [r1, r3]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        		break;
 80059ba:	e024      	b.n	8005a06 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b6>
        	}
        	case 8:
        	case 9:
        	{
        		DDate.Month =  DDate.Month -  datetime[selEpochPos];
 80059bc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80059c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80059c4:	4926      	ldr	r1, [pc, #152]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 80059c6:	56cb      	ldrsb	r3, [r1, r3]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        		break;
 80059d2:	e018      	b.n	8005a06 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b6>
        	}
        	case 10:
        	case 11:
        	{
        		DDate.Year = DDate.Year -  datetime[selEpochPos];
 80059d4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80059d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80059dc:	4920      	ldr	r1, [pc, #128]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 80059de:	56cb      	ldrsb	r3, [r1, r3]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        		break;
 80059ea:	e00c      	b.n	8005a06 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2b6>
        	}
        	case 12:
        	case 13:
        	{
        		timezone = timezone -  datetime[selEpochPos];
 80059ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80059f6:	491a      	ldr	r1, [pc, #104]	@ (8005a60 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x310>)
 80059f8:	56cb      	ldrsb	r3, [r1, r3]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	73fb      	strb	r3, [r7, #15]
        		break;
 8005a04:	bf00      	nop


        	}


        	break;
 8005a06:	e087      	b.n	8005b18 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3c8>
        }

        case button::btncodes::cUP_BT:
        {
        	switch(selEpochPos)
 8005a08:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a0c:	2b0d      	cmp	r3, #13
 8005a0e:	f200 8085 	bhi.w	8005b1c <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3cc>
 8005a12:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2c8>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a65 	.word	0x08005a65
 8005a1c:	08005a65 	.word	0x08005a65
 8005a20:	08005a79 	.word	0x08005a79
 8005a24:	08005a79 	.word	0x08005a79
 8005a28:	08005a8d 	.word	0x08005a8d
 8005a2c:	08005a8d 	.word	0x08005a8d
 8005a30:	08005aa1 	.word	0x08005aa1
 8005a34:	08005aa1 	.word	0x08005aa1
 8005a38:	08005ab9 	.word	0x08005ab9
 8005a3c:	08005ab9 	.word	0x08005ab9
 8005a40:	08005ad1 	.word	0x08005ad1
 8005a44:	08005ad1 	.word	0x08005ad1
 8005a48:	08005ae9 	.word	0x08005ae9
 8005a4c:	08005ae9 	.word	0x08005ae9
 8005a50:	20001904 	.word	0x20001904
 8005a54:	08014dd4 	.word	0x08014dd4
 8005a58:	080141b4 	.word	0x080141b4
 8005a5c:	080141cc 	.word	0x080141cc
 8005a60:	20000270 	.word	0x20000270
        	{
        	case 0:
        	case 1:
        	{
        		DTime.Hours = DTime.Hours +  datetime[selEpochPos];
 8005a64:	7c3a      	ldrb	r2, [r7, #16]
 8005a66:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a6a:	495a      	ldr	r1, [pc, #360]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005a6c:	56cb      	ldrsb	r3, [r1, r3]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	4413      	add	r3, r2
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	743b      	strb	r3, [r7, #16]
        		break;
 8005a76:	e044      	b.n	8005b02 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b2>
        	}
        	case 2:
        	case 3:
        	{
        		DTime.Minutes = DTime.Minutes +  datetime[selEpochPos];
 8005a78:	7c7a      	ldrb	r2, [r7, #17]
 8005a7a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a7e:	4955      	ldr	r1, [pc, #340]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005a80:	56cb      	ldrsb	r3, [r1, r3]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	747b      	strb	r3, [r7, #17]
        		break;
 8005a8a:	e03a      	b.n	8005b02 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b2>
        	}
        	case 4:
        	case 5:
        	{
        		DTime.Seconds = DTime.Seconds +  datetime[selEpochPos];
 8005a8c:	7cba      	ldrb	r2, [r7, #18]
 8005a8e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005a92:	4950      	ldr	r1, [pc, #320]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005a94:	56cb      	ldrsb	r3, [r1, r3]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4413      	add	r3, r2
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	74bb      	strb	r3, [r7, #18]
        		break;
 8005a9e:	e030      	b.n	8005b02 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b2>
        	}
        	case 6:
        	case 7:
        	{
        		DDate.Date = DDate.Date +  datetime[selEpochPos];
 8005aa0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005aa4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005aa8:	494a      	ldr	r1, [pc, #296]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005aaa:	56cb      	ldrsb	r3, [r1, r3]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        		break;
 8005ab6:	e024      	b.n	8005b02 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b2>
        	}
        	case 8:
        	case 9:
        	{
        		DDate.Month =  DDate.Month +  datetime[selEpochPos];
 8005ab8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005abc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005ac0:	4944      	ldr	r1, [pc, #272]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005ac2:	56cb      	ldrsb	r3, [r1, r3]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        		break;
 8005ace:	e018      	b.n	8005b02 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b2>
        	}
        	case 10:
        	case 11:
        	{
        		DDate.Year = DDate.Year +  datetime[selEpochPos];
 8005ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005ad4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005ad8:	493e      	ldr	r1, [pc, #248]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005ada:	56cb      	ldrsb	r3, [r1, r3]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        		break;
 8005ae6:	e00c      	b.n	8005b02 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3b2>
        	}
        	case 12:
        	case 13:
        	{
        		timezone = timezone +  datetime[selEpochPos];
 8005ae8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005aec:	4a39      	ldr	r2, [pc, #228]	@ (8005bd4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x484>)
 8005aee:	56d3      	ldrsb	r3, [r2, r3]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	73fb      	strb	r3, [r7, #15]
        		break;
 8005b00:	bf00      	nop
        	}


        	}

        	break;
 8005b02:	e00b      	b.n	8005b1c <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3cc>
        }

        case button::btncodes::cEnter_BT:
        {

        	stmRTC.setTime(&DDate,&DTime, timezone);
 8005b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b08:	f107 0210 	add.w	r2, r7, #16
 8005b0c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005b10:	4831      	ldr	r0, [pc, #196]	@ (8005bd8 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x488>)
 8005b12:	f7fe fd45 	bl	80045a0 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>

        	break;
 8005b16:	e002      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        	break;
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x3ce>
        	break;
 8005b1c:	bf00      	nop
        }

        }

        selEpochPos = selEpochPos % 14;
 8005b1e:	f997 2067 	ldrsb.w	r2, [r7, #103]	@ 0x67
 8005b22:	4b2e      	ldr	r3, [pc, #184]	@ (8005bdc <_ZN2UI11SetTimeDateEP11u8g2_struct+0x48c>)
 8005b24:	fb83 1302 	smull	r1, r3, r3, r2
 8005b28:	4413      	add	r3, r2
 8005b2a:	10d9      	asrs	r1, r3, #3
 8005b2c:	17d3      	asrs	r3, r2, #31
 8005b2e:	1ac9      	subs	r1, r1, r3
 8005b30:	460b      	mov	r3, r1
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	1a5b      	subs	r3, r3, r1
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        prevselPos = prevselPos % 20;
 8005b3e:	f997 2066 	ldrsb.w	r2, [r7, #102]	@ 0x66
 8005b42:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x490>)
 8005b44:	fb83 1302 	smull	r1, r3, r3, r2
 8005b48:	10d9      	asrs	r1, r3, #3
 8005b4a:	17d3      	asrs	r3, r2, #31
 8005b4c:	1ac9      	subs	r1, r1, r3
 8005b4e:	460b      	mov	r3, r1
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66


        if(DTime.Hours > 24)
 8005b5c:	7c3b      	ldrb	r3, [r7, #16]
 8005b5e:	2b18      	cmp	r3, #24
 8005b60:	d901      	bls.n	8005b66 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x416>
        {
        	DTime.Hours = 24;
 8005b62:	2318      	movs	r3, #24
 8005b64:	743b      	strb	r3, [r7, #16]
        }
        if(DTime.Minutes > 59)
 8005b66:	7c7b      	ldrb	r3, [r7, #17]
 8005b68:	2b3b      	cmp	r3, #59	@ 0x3b
 8005b6a:	d901      	bls.n	8005b70 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x420>
        {
        	DTime.Minutes = 59;
 8005b6c:	233b      	movs	r3, #59	@ 0x3b
 8005b6e:	747b      	strb	r3, [r7, #17]
        }
        if(DTime.Seconds > 59)
 8005b70:	7cbb      	ldrb	r3, [r7, #18]
 8005b72:	2b3b      	cmp	r3, #59	@ 0x3b
 8005b74:	d901      	bls.n	8005b7a <_ZN2UI11SetTimeDateEP11u8g2_struct+0x42a>
        {
          DTime.Seconds = 59;
 8005b76:	233b      	movs	r3, #59	@ 0x3b
 8005b78:	74bb      	strb	r3, [r7, #18]
        }

        if(DDate.Date > 31)
 8005b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b7e:	2b1f      	cmp	r3, #31
 8005b80:	d902      	bls.n	8005b88 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x438>
        {
        	DDate.Date = 31;
 8005b82:	231f      	movs	r3, #31
 8005b84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if(DDate.Month > 12)
 8005b88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	d902      	bls.n	8005b96 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x446>
        {
        	DDate.Month = 12;
 8005b90:	230c      	movs	r3, #12
 8005b92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if(DDate.Year > 99)
 8005b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b9a:	2b63      	cmp	r3, #99	@ 0x63
 8005b9c:	d902      	bls.n	8005ba4 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x454>
        {
        	DDate.Year = 99;
 8005b9e:	2363      	movs	r3, #99	@ 0x63
 8005ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if(timezone > 13)
 8005ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba8:	2b0d      	cmp	r3, #13
 8005baa:	dd01      	ble.n	8005bb0 <_ZN2UI11SetTimeDateEP11u8g2_struct+0x460>
        {
        	timezone = 13;
 8005bac:	230d      	movs	r3, #13
 8005bae:	73fb      	strb	r3, [r7, #15]
        }
        if(timezone < -11)
 8005bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb4:	f113 0f0b 	cmn.w	r3, #11
 8005bb8:	da01      	bge.n	8005bbe <_ZN2UI11SetTimeDateEP11u8g2_struct+0x46e>
        {
        	timezone = -11;
 8005bba:	23f5      	movs	r3, #245	@ 0xf5
 8005bbc:	73fb      	strb	r3, [r7, #15]
        }




	} while (btncodes !=  button::btncodes::cEnter_BT && btncodes !=  button::btncodes::cLFT_BT);
 8005bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc0:	2b0a      	cmp	r3, #10
 8005bc2:	d003      	beq.n	8005bcc <_ZN2UI11SetTimeDateEP11u8g2_struct+0x47c>
 8005bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc6:	2b3c      	cmp	r3, #60	@ 0x3c
 8005bc8:	f47f add9 	bne.w	800577e <_ZN2UI11SetTimeDateEP11u8g2_struct+0x2e>



}
 8005bcc:	bf00      	nop
 8005bce:	376c      	adds	r7, #108	@ 0x6c
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd4:	20000270 	.word	0x20000270
 8005bd8:	20001904 	.word	0x20001904
 8005bdc:	92492493 	.word	0x92492493
 8005be0:	66666667 	.word	0x66666667

08005be4 <_ZN2UI11SetFuelMeasEP11u8g2_struct>:




void UI::SetFuelMeas(u8g2_t *u8g2) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	do {
		button::resetCode(button::btncodes::cNONE);
 8005bec:	2000      	movs	r0, #0
 8005bee:	f000 f915 	bl	8005e1c <_ZN6button9resetCodeENS_8btncodesE>
		do {
			u8g2_ClearBuffer(u8g2);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb61 	bl	80062ba <u8g2_ClearBuffer>

			u8g2_SendBuffer(u8g2);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fbd1 	bl	80063a0 <u8g2_SendBuffer>
			btncodes = button::get_event();
 8005bfe:	f000 f8e1 	bl	8005dc4 <_ZN6button9get_eventEv>
 8005c02:	60f8      	str	r0, [r7, #12]
		} while (btncodes == button::btncodes::cNONE);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f3      	beq.n	8005bf2 <_ZN2UI11SetFuelMeasEP11u8g2_struct+0xe>

	} while (btncodes != button::btncodes::cLFT_BT);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b3c      	cmp	r3, #60	@ 0x3c
 8005c0e:	d1ed      	bne.n	8005bec <_ZN2UI11SetFuelMeasEP11u8g2_struct+0x8>

}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <_ZN2UI10set_UIcodeE6MenuNo>:

enum MenuNo UIcodeStorage;


void UI::set_UIcode(enum MenuNo UIcode)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]

	UIcodeStorage = UIcode;
 8005c24:	4a04      	ldr	r2, [pc, #16]	@ (8005c38 <_ZN2UI10set_UIcodeE6MenuNo+0x1c>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6013      	str	r3, [r2, #0]

}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20001a48 	.word	0x20001a48

08005c3c <_ZN2UI10get_UIcodeEv>:
enum MenuNo UI::get_UIcode()
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return UIcodeStorage;
 8005c40:	4b03      	ldr	r3, [pc, #12]	@ (8005c50 <_ZN2UI10get_UIcodeEv+0x14>)
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20001a48 	.word	0x20001a48

08005c54 <_ZN2UI16common_iconsMainEP11u8g2_struct>:


void UI::common_iconsMain(u8g2_t *u8g2)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b0a4      	sub	sp, #144	@ 0x90
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	6078      	str	r0, [r7, #4]
	char time[50];
	char date[50];
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;
	stmRTC.getTime(&DDate, &DTime, nullptr);
 8005c5c:	f107 0208 	add.w	r2, r7, #8
 8005c60:	f107 011c 	add.w	r1, r7, #28
 8005c64:	2300      	movs	r3, #0
 8005c66:	4826      	ldr	r0, [pc, #152]	@ (8005d00 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xac>)
 8005c68:	f7fe fbad 	bl	80043c6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
	std::sprintf(time, "%02d:%02d:%02d", DTime.Hours, DTime.Minutes,DTime.Seconds);
 8005c6c:	7a3b      	ldrb	r3, [r7, #8]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	7a7b      	ldrb	r3, [r7, #9]
 8005c72:	4619      	mov	r1, r3
 8005c74:	7abb      	ldrb	r3, [r7, #10]
 8005c76:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4921      	ldr	r1, [pc, #132]	@ (8005d04 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xb0>)
 8005c80:	f00b fcec 	bl	801165c <siprintf>
	std::sprintf(date, "%02d/%02d/%02d", DDate.Date,DDate.Month,DDate.Year);
 8005c84:	7fbb      	ldrb	r3, [r7, #30]
 8005c86:	461a      	mov	r2, r3
 8005c88:	7f7b      	ldrb	r3, [r7, #29]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	f107 0020 	add.w	r0, r7, #32
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	460b      	mov	r3, r1
 8005c96:	491c      	ldr	r1, [pc, #112]	@ (8005d08 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xb4>)
 8005c98:	f00b fce0 	bl	801165c <siprintf>
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005c9c:	491b      	ldr	r1, [pc, #108]	@ (8005d0c <_ZN2UI16common_iconsMainEP11u8g2_struct+0xb8>)
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 f92c 	bl	8006efc <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 0, 10, time);
 8005ca4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ca8:	220a      	movs	r2, #10
 8005caa:	2100      	movs	r1, #0
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 f883 	bl	8006db8 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 88, 10, date);
 8005cb2:	f107 0320 	add.w	r3, r7, #32
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	2158      	movs	r1, #88	@ 0x58
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 f87c 	bl	8006db8 <u8g2_DrawStr>
	u8g2_DrawXBM(u8g2,55,48,imgcont::setting.w,imgcont::setting.h,imgcont::setting.img);
 8005cc0:	4b13      	ldr	r3, [pc, #76]	@ (8005d10 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xbc>)
 8005cc2:	7919      	ldrb	r1, [r3, #4]
 8005cc4:	4b12      	ldr	r3, [pc, #72]	@ (8005d10 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xbc>)
 8005cc6:	795b      	ldrb	r3, [r3, #5]
 8005cc8:	4a11      	ldr	r2, [pc, #68]	@ (8005d10 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xbc>)
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	9201      	str	r2, [sp, #4]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	2230      	movs	r2, #48	@ 0x30
 8005cd4:	2137      	movs	r1, #55	@ 0x37
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa76 	bl	80061c8 <u8g2_DrawXBM>
	u8g2_DrawXBM(u8g2,112,48,imgcont::leftrightArrow.w,imgcont::leftrightArrow.h,imgcont::leftrightArrow.img);
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xc0>)
 8005cde:	7919      	ldrb	r1, [r3, #4]
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xc0>)
 8005ce2:	795b      	ldrb	r3, [r3, #5]
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8005d14 <_ZN2UI16common_iconsMainEP11u8g2_struct+0xc0>)
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	9201      	str	r2, [sp, #4]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	460b      	mov	r3, r1
 8005cee:	2230      	movs	r2, #48	@ 0x30
 8005cf0:	2170      	movs	r1, #112	@ 0x70
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa68 	bl	80061c8 <u8g2_DrawXBM>

}
 8005cf8:	bf00      	nop
 8005cfa:	3788      	adds	r7, #136	@ 0x88
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20001904 	.word	0x20001904
 8005d04:	080141f0 	.word	0x080141f0
 8005d08:	08014200 	.word	0x08014200
 8005d0c:	08014dd4 	.word	0x08014dd4
 8005d10:	08014994 	.word	0x08014994
 8005d14:	0801499c 	.word	0x0801499c

08005d18 <My_Button_IRQHandlerC>:
#include "System_Rtos.hpp"

extern "C"
{
    void My_Button_IRQHandlerC()
    {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
    	button::btn_irq();
 8005d1c:	f000 f88e 	bl	8005e3c <_ZN6button7btn_irqEv>
    }
 8005d20:	bf00      	nop
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <_ZN6buttonL8setTimerEPm>:

struct Button_t Button_;


static void setTimer(uint32_t* timer)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 8005d2c:	f002 fea4 	bl	8008a78 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <_ZN6buttonL10checkTimerEPmm>:

static uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8005d4c:	f002 fe94 	bl	8008a78 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d201      	bcs.n	8005d62 <_ZN6buttonL10checkTimerEPmm+0x24>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <_ZN6buttonL10checkTimerEPmm+0x26>
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
	return ret;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZN6button8btn_initEv>:


void btn_init()
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
	eventsRTOS.eventCreate();
 8005d74:	4808      	ldr	r0, [pc, #32]	@ (8005d98 <_ZN6button8btn_initEv+0x28>)
 8005d76:	f7fe fa8f 	bl	8004298 <_ZN11System_Rtos15freertos_events11eventCreateEv>

	Button_.btn_code = button::btncodes::cNONE;
 8005d7a:	4b08      	ldr	r3, [pc, #32]	@ (8005d9c <_ZN6button8btn_initEv+0x2c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	60da      	str	r2, [r3, #12]
	Button_.buttonFlag = 1;
 8005d80:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <_ZN6button8btn_initEv+0x2c>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	715a      	strb	r2, [r3, #5]
	Button_.buttonTimer = 0;
 8005d86:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <_ZN6button8btn_initEv+0x2c>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
	Button_.Sel_BT =button_identification::iNONE;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	@ (8005d9c <_ZN6button8btn_initEv+0x2c>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20001a4c 	.word	0x20001a4c
 8005d9c:	20001a58 	.word	0x20001a58

08005da0 <_ZN6button9gen_eventENS_8btncodesE>:
void gen_event(enum btncodes btnCode)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 8005da8:	4a04      	ldr	r2, [pc, #16]	@ (8005dbc <_ZN6button9gen_eventENS_8btncodesE+0x1c>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60d3      	str	r3, [r2, #12]
	eventsRTOS.eventGive();
 8005dae:	4804      	ldr	r0, [pc, #16]	@ (8005dc0 <_ZN6button9gen_eventENS_8btncodesE+0x20>)
 8005db0:	f7fe fa80 	bl	80042b4 <_ZN11System_Rtos15freertos_events9eventGiveEv>
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20001a58 	.word	0x20001a58
 8005dc0:	20001a4c 	.word	0x20001a4c

08005dc4 <_ZN6button9get_eventEv>:
enum btncodes get_event()
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0

	eventsRTOS.eventTake();
 8005dc8:	4803      	ldr	r0, [pc, #12]	@ (8005dd8 <_ZN6button9get_eventEv+0x14>)
 8005dca:	f7fe faad 	bl	8004328 <_ZN11System_Rtos15freertos_events9eventTakeEv>
	return Button_.btn_code;
 8005dce:	4b03      	ldr	r3, [pc, #12]	@ (8005ddc <_ZN6button9get_eventEv+0x18>)
 8005dd0:	68db      	ldr	r3, [r3, #12]

}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001a4c 	.word	0x20001a4c
 8005ddc:	20001a58 	.word	0x20001a58

08005de0 <_ZN6button14get_eventTimedEm>:
enum btncodes get_eventTimed(uint32_t time)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	eventsRTOS.eventTakeTimed(time);
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4804      	ldr	r0, [pc, #16]	@ (8005dfc <_ZN6button14get_eventTimedEm+0x1c>)
 8005dec:	f7fe faae 	bl	800434c <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>
	return Button_.btn_code;
 8005df0:	4b03      	ldr	r3, [pc, #12]	@ (8005e00 <_ZN6button14get_eventTimedEm+0x20>)
 8005df2:	68db      	ldr	r3, [r3, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20001a4c 	.word	0x20001a4c
 8005e00:	20001a58 	.word	0x20001a58

08005e04 <_ZN6button8get_codeEv>:

enum btncodes get_code()
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
	return Button_.btn_code;
 8005e08:	4b03      	ldr	r3, [pc, #12]	@ (8005e18 <_ZN6button8get_codeEv+0x14>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20001a58 	.word	0x20001a58

08005e1c <_ZN6button9resetCodeENS_8btncodesE>:

void resetCode(enum btncodes btnCode)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 8005e24:	4a04      	ldr	r2, [pc, #16]	@ (8005e38 <_ZN6button9resetCodeENS_8btncodesE+0x1c>)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60d3      	str	r3, [r2, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20001a58 	.word	0x20001a58

08005e3c <_ZN6button7btn_irqEv>:


void btn_irq()
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
	if (Button_.buttonFlag) {
 8005e40:	4b99      	ldr	r3, [pc, #612]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e42:	795b      	ldrb	r3, [r3, #5]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d06e      	beq.n	8005f26 <_ZN6button7btn_irqEv+0xea>

         if (!pEnter_BT) {
 8005e48:	2104      	movs	r1, #4
 8005e4a:	4898      	ldr	r0, [pc, #608]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005e4c:	f003 fe1c 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <_ZN6button7btn_irqEv+0x38>
				setTimer(&Button_.buttonTimer); //to set debounce
 8005e60:	4891      	ldr	r0, [pc, #580]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e62:	f7ff ff5f 	bl	8005d24 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8005e66:	4b90      	ldr	r3, [pc, #576]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iEnter_BT;
 8005e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	609a      	str	r2, [r3, #8]
				Button_.Sel_BT = button_identification::iNONE;
				break;
			}
			}
		}
}
 8005e72:	e117      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
			}  else if (!pUP_BT) {
 8005e74:	2102      	movs	r1, #2
 8005e76:	488d      	ldr	r0, [pc, #564]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005e78:	f003 fe06 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <_ZN6button7btn_irqEv+0x64>
				setTimer(&Button_.buttonTimer); //to set debounce
 8005e8c:	4886      	ldr	r0, [pc, #536]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e8e:	f7ff ff49 	bl	8005d24 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8005e92:	4b85      	ldr	r3, [pc, #532]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iUP_BT;
 8005e98:	4b83      	ldr	r3, [pc, #524]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	e101      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
			} else if (!pDWN_BT) {
 8005ea0:	2108      	movs	r1, #8
 8005ea2:	4882      	ldr	r0, [pc, #520]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005ea4:	f003 fdf0 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <_ZN6button7btn_irqEv+0x90>
				setTimer(&Button_.buttonTimer); //to set debounce
 8005eb8:	487b      	ldr	r0, [pc, #492]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005eba:	f7ff ff33 	bl	8005d24 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8005ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iDWN_BT;
 8005ec4:	4b78      	ldr	r3, [pc, #480]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	609a      	str	r2, [r3, #8]
}
 8005eca:	e0eb      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
			} else if (!pRGHT_BT) {
 8005ecc:	2110      	movs	r1, #16
 8005ece:	4877      	ldr	r0, [pc, #476]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005ed0:	f003 fdda 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d009      	beq.n	8005ef8 <_ZN6button7btn_irqEv+0xbc>
				setTimer(&Button_.buttonTimer); //to set debounce
 8005ee4:	4870      	ldr	r0, [pc, #448]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005ee6:	f7ff ff1d 	bl	8005d24 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8005eea:	4b6f      	ldr	r3, [pc, #444]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iRGHT_BT;
 8005ef0:	4b6d      	ldr	r3, [pc, #436]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005ef2:	2205      	movs	r2, #5
 8005ef4:	609a      	str	r2, [r3, #8]
}
 8005ef6:	e0d5      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
			} else if (!pLFT_BT) {
 8005ef8:	2120      	movs	r1, #32
 8005efa:	486c      	ldr	r0, [pc, #432]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005efc:	f003 fdc4 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80c9 	beq.w	80060a4 <_ZN6button7btn_irqEv+0x268>
				setTimer(&Button_.buttonTimer); //to set debounce
 8005f12:	4865      	ldr	r0, [pc, #404]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f14:	f7ff ff06 	bl	8005d24 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8005f18:	4b63      	ldr	r3, [pc, #396]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iLFT_BT;
 8005f1e:	4b62      	ldr	r3, [pc, #392]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f20:	2206      	movs	r2, #6
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	e0be      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
		} else if ((!Button_.buttonFlag)
 8005f26:	4b60      	ldr	r3, [pc, #384]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f28:	795b      	ldrb	r3, [r3, #5]
				&& (checkTimer(&Button_.buttonTimer, 120))) //check debounce
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <_ZN6button7btn_irqEv+0x104>
 8005f2e:	2178      	movs	r1, #120	@ 0x78
 8005f30:	485d      	ldr	r0, [pc, #372]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f32:	f7ff ff04 	bl	8005d3e <_ZN6buttonL10checkTimerEPmm>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <_ZN6button7btn_irqEv+0x104>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <_ZN6button7btn_irqEv+0x106>
 8005f40:	2300      	movs	r3, #0
		} else if ((!Button_.buttonFlag)
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80ae 	beq.w	80060a4 <_ZN6button7btn_irqEv+0x268>
			switch (Button_.Sel_BT) {
 8005f48:	4b57      	ldr	r3, [pc, #348]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	f200 80a1 	bhi.w	8006096 <_ZN6button7btn_irqEv+0x25a>
 8005f54:	a201      	add	r2, pc, #4	@ (adr r2, 8005f5c <_ZN6button7btn_irqEv+0x120>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08006097 	.word	0x08006097
 8005f64:	08005faf 	.word	0x08005faf
 8005f68:	08005fe9 	.word	0x08005fe9
 8005f6c:	08006023 	.word	0x08006023
 8005f70:	0800605d 	.word	0x0800605d
				if (!pEnter_BT) {
 8005f74:	2104      	movs	r1, #4
 8005f76:	484d      	ldr	r0, [pc, #308]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005f78:	f003 fd86 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <_ZN6button7btn_irqEv+0x164>
					Button_.buttonFlag = SET;
 8005f8c:	4b46      	ldr	r3, [pc, #280]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8005f92:	4b45      	ldr	r3, [pc, #276]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cEnter_BT);
 8005f98:	200a      	movs	r0, #10
 8005f9a:	f7ff ff01 	bl	8005da0 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8005f9e:	e081      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8005fa0:	4b41      	ldr	r3, [pc, #260]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8005fa6:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
				break;
 8005fac:	e07a      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
				if (!pUP_BT) {
 8005fae:	2102      	movs	r1, #2
 8005fb0:	483e      	ldr	r0, [pc, #248]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005fb2:	f003 fd69 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <_ZN6button7btn_irqEv+0x19e>
					Button_.buttonFlag = SET;
 8005fc6:	4b38      	ldr	r3, [pc, #224]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8005fcc:	4b36      	ldr	r3, [pc, #216]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cUP_BT);
 8005fd2:	201e      	movs	r0, #30
 8005fd4:	f7ff fee4 	bl	8005da0 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8005fd8:	e064      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8005fda:	4b33      	ldr	r3, [pc, #204]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8005fe0:	4b31      	ldr	r3, [pc, #196]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]
				break;
 8005fe6:	e05d      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
				if (!pDWN_BT) {
 8005fe8:	2108      	movs	r1, #8
 8005fea:	4830      	ldr	r0, [pc, #192]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8005fec:	f003 fd4c 	bl	8009a88 <HAL_GPIO_ReadPin>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf0c      	ite	eq
 8005ff6:	2301      	moveq	r3, #1
 8005ff8:	2300      	movne	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <_ZN6button7btn_irqEv+0x1d8>
					Button_.buttonFlag = SET;
 8006000:	4b29      	ldr	r3, [pc, #164]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006002:	2201      	movs	r2, #1
 8006004:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006006:	4b28      	ldr	r3, [pc, #160]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006008:	2200      	movs	r2, #0
 800600a:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cDWN_BT);
 800600c:	2028      	movs	r0, #40	@ 0x28
 800600e:	f7ff fec7 	bl	8005da0 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8006012:	e047      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8006014:	4b24      	ldr	r3, [pc, #144]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006016:	2201      	movs	r2, #1
 8006018:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
				break;
 8006020:	e040      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
				if (!pRGHT_BT) {
 8006022:	2110      	movs	r1, #16
 8006024:	4821      	ldr	r0, [pc, #132]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8006026:	f003 fd2f 	bl	8009a88 <HAL_GPIO_ReadPin>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	bf0c      	ite	eq
 8006030:	2301      	moveq	r3, #1
 8006032:	2300      	movne	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <_ZN6button7btn_irqEv+0x212>
					Button_.buttonFlag = SET;
 800603a:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 800603c:	2201      	movs	r2, #1
 800603e:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006040:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cRGHT_BT);
 8006046:	2032      	movs	r0, #50	@ 0x32
 8006048:	f7ff feaa 	bl	8005da0 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 800604c:	e02a      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 800604e:	4b16      	ldr	r3, [pc, #88]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006050:	2201      	movs	r2, #1
 8006052:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8006054:	4b14      	ldr	r3, [pc, #80]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006056:	2200      	movs	r2, #0
 8006058:	609a      	str	r2, [r3, #8]
				break;
 800605a:	e023      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
				if (!pLFT_BT) {
 800605c:	2120      	movs	r1, #32
 800605e:	4813      	ldr	r0, [pc, #76]	@ (80060ac <_ZN6button7btn_irqEv+0x270>)
 8006060:	f003 fd12 	bl	8009a88 <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <_ZN6button7btn_irqEv+0x24c>
					Button_.buttonFlag = SET;
 8006074:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006076:	2201      	movs	r2, #1
 8006078:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800607a:	4b0b      	ldr	r3, [pc, #44]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 800607c:	2200      	movs	r2, #0
 800607e:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cLFT_BT);
 8006080:	203c      	movs	r0, #60	@ 0x3c
 8006082:	f7ff fe8d 	bl	8005da0 <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8006086:	e00d      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8006088:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 800608a:	2201      	movs	r2, #1
 800608c:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006090:	2200      	movs	r2, #0
 8006092:	609a      	str	r2, [r3, #8]
				break;
 8006094:	e006      	b.n	80060a4 <_ZN6button7btn_irqEv+0x268>
				Button_.buttonFlag = SET;
 8006096:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 8006098:	2201      	movs	r2, #1
 800609a:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iNONE;
 800609c:	4b02      	ldr	r3, [pc, #8]	@ (80060a8 <_ZN6button7btn_irqEv+0x26c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
				break;
 80060a2:	bf00      	nop
}
 80060a4:	bf00      	nop
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20001a58 	.word	0x20001a58
 80060ac:	40020c00 	.word	0x40020c00

080060b0 <_Z41__static_initialization_and_destruction_0ii>:

}
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d102      	bne.n	80060d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
System_Rtos::freertos_events eventsRTOS;
 80060ca:	4803      	ldr	r0, [pc, #12]	@ (80060d8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80060cc:	f7fe f8d9 	bl	8004282 <_ZN11System_Rtos15freertos_eventsC1Ev>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20001a4c 	.word	0x20001a4c

080060dc <_GLOBAL__sub_I_My_Button_IRQHandlerC>:
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
 80060e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7ff ffe3 	bl	80060b0 <_Z41__static_initialization_and_destruction_0ii>
 80060ea:	bd80      	pop	{r7, pc}

080060ec <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	70fb      	strb	r3, [r7, #3]
 80060fe:	460b      	mov	r3, r1
 8006100:	70bb      	strb	r3, [r7, #2]
 8006102:	4613      	mov	r3, r2
 8006104:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800610c:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	787b      	ldrb	r3, [r7, #1]
 8006120:	4413      	add	r3, r2
 8006122:	b2d8      	uxtb	r0, r3
 8006124:	78bb      	ldrb	r3, [r7, #2]
 8006126:	3301      	adds	r3, #1
 8006128:	b2db      	uxtb	r3, r3
 800612a:	78ba      	ldrb	r2, [r7, #2]
 800612c:	78f9      	ldrb	r1, [r7, #3]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4603      	mov	r3, r0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 f859 	bl	80071ea <u8g2_IsIntersection>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d040      	beq.n	80061c0 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8006142:	e035      	b.n	80061b0 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4013      	ands	r3, r2
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7bba      	ldrb	r2, [r7, #14]
 8006156:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800615a:	78ba      	ldrb	r2, [r7, #2]
 800615c:	78f9      	ldrb	r1, [r7, #3]
 800615e:	2300      	movs	r3, #0
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2301      	movs	r3, #1
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 ffd7 	bl	8007118 <u8g2_DrawHVLine>
 800616a:	e010      	b.n	800618e <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7b7a      	ldrb	r2, [r7, #13]
 800617a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800617e:	78ba      	ldrb	r2, [r7, #2]
 8006180:	78f9      	ldrb	r1, [r7, #3]
 8006182:	2300      	movs	r3, #0
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2301      	movs	r3, #1
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 ffc5 	bl	8007118 <u8g2_DrawHVLine>
    }
    x++;
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	3301      	adds	r3, #1
 8006192:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
      b++;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61bb      	str	r3, [r7, #24]
    }
    len--;
 80061aa:	787b      	ldrb	r3, [r7, #1]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1c6      	bne.n	8006144 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7bba      	ldrb	r2, [r7, #14]
 80061ba:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 80061be:	e000      	b.n	80061c2 <u8g2_DrawHXBM+0xd6>
    return;
 80061c0:	bf00      	nop
}
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	70fb      	strb	r3, [r7, #3]
 80061da:	460b      	mov	r3, r1
 80061dc:	70bb      	strb	r3, [r7, #2]
 80061de:	4613      	mov	r3, r2
 80061e0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 80061e2:	787b      	ldrb	r3, [r7, #1]
 80061e4:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	3307      	adds	r3, #7
 80061ea:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	787b      	ldrb	r3, [r7, #1]
 80061f6:	4413      	add	r3, r2
 80061f8:	b2d8      	uxtb	r0, r3
 80061fa:	78ba      	ldrb	r2, [r7, #2]
 80061fc:	7e3b      	ldrb	r3, [r7, #24]
 80061fe:	4413      	add	r3, r2
 8006200:	b2db      	uxtb	r3, r3
 8006202:	78ba      	ldrb	r2, [r7, #2]
 8006204:	78f9      	ldrb	r1, [r7, #3]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4603      	mov	r3, r0
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 ffed 	bl	80071ea <u8g2_IsIntersection>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d017      	beq.n	8006246 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8006216:	e012      	b.n	800623e <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8006218:	7878      	ldrb	r0, [r7, #1]
 800621a:	78ba      	ldrb	r2, [r7, #2]
 800621c:	78f9      	ldrb	r1, [r7, #3]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4603      	mov	r3, r0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff ff61 	bl	80060ec <u8g2_DrawHXBM>
    bitmap += blen;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]
    y++;
 8006232:	78bb      	ldrb	r3, [r7, #2]
 8006234:	3301      	adds	r3, #1
 8006236:	70bb      	strb	r3, [r7, #2]
    h--;
 8006238:	7e3b      	ldrb	r3, [r7, #24]
 800623a:	3b01      	subs	r3, #1
 800623c:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800623e:	7e3b      	ldrb	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e9      	bne.n	8006218 <u8g2_DrawXBM+0x50>
 8006244:	e000      	b.n	8006248 <u8g2_DrawXBM+0x80>
    return;
 8006246:	bf00      	nop
  }
}
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af02      	add	r7, sp, #8
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	461a      	mov	r2, r3
 800625c:	4603      	mov	r3, r0
 800625e:	70fb      	strb	r3, [r7, #3]
 8006260:	460b      	mov	r3, r1
 8006262:	70bb      	strb	r3, [r7, #2]
 8006264:	4613      	mov	r3, r2
 8006266:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	787b      	ldrb	r3, [r7, #1]
 800626c:	4413      	add	r3, r2
 800626e:	b2d8      	uxtb	r0, r3
 8006270:	78ba      	ldrb	r2, [r7, #2]
 8006272:	7c3b      	ldrb	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	b2db      	uxtb	r3, r3
 8006278:	78ba      	ldrb	r2, [r7, #2]
 800627a:	78f9      	ldrb	r1, [r7, #3]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 ffb2 	bl	80071ea <u8g2_IsIntersection>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800628c:	e00d      	b.n	80062aa <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800628e:	787b      	ldrb	r3, [r7, #1]
 8006290:	78ba      	ldrb	r2, [r7, #2]
 8006292:	78f9      	ldrb	r1, [r7, #3]
 8006294:	2000      	movs	r0, #0
 8006296:	9000      	str	r0, [sp, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 ff3d 	bl	8007118 <u8g2_DrawHVLine>
    y++;    
 800629e:	78bb      	ldrb	r3, [r7, #2]
 80062a0:	3301      	adds	r3, #1
 80062a2:	70bb      	strb	r3, [r7, #2]
    h--;
 80062a4:	7c3b      	ldrb	r3, [r7, #16]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80062aa:	7c3b      	ldrb	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ee      	bne.n	800628e <u8g2_DrawBox+0x40>
 80062b0:	e000      	b.n	80062b4 <u8g2_DrawBox+0x66>
    return;
 80062b2:	bf00      	nop
  }
}
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	7c1b      	ldrb	r3, [r3, #16]
 80062c8:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80062d0:	461a      	mov	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f00b fa1a 	bl	8011722 <memset>
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af02      	add	r7, sp, #8
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
 8006302:	4613      	mov	r3, r2
 8006304:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	7c1b      	ldrb	r3, [r3, #16]
 800630c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006316:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	b29b      	uxth	r3, r3
 800631c:	89ba      	ldrh	r2, [r7, #12]
 800631e:	fb12 f303 	smulbb	r3, r2, r3
 8006322:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8006324:	89bb      	ldrh	r3, [r7, #12]
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800632a:	89bb      	ldrh	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4413      	add	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8006332:	7bf9      	ldrb	r1, [r7, #15]
 8006334:	78ba      	ldrb	r2, [r7, #2]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	460b      	mov	r3, r1
 800633c:	2100      	movs	r1, #0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fb72 	bl	8007a28 <u8x8_DrawTile>
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800635e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006366:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	7c5b      	ldrb	r3, [r3, #17]
 800636e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8006370:	7bba      	ldrb	r2, [r7, #14]
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff ffbd 	bl	80062f6 <u8g2_send_tile_row>
    src_row++;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	3301      	adds	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	3301      	adds	r3, #1
 8006386:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8006388:	7bfa      	ldrb	r2, [r7, #15]
 800638a:	7b7b      	ldrb	r3, [r7, #13]
 800638c:	429a      	cmp	r2, r3
 800638e:	d203      	bcs.n	8006398 <u8g2_send_buffer+0x4c>
 8006390:	7bba      	ldrb	r2, [r7, #14]
 8006392:	7b3b      	ldrb	r3, [r7, #12]
 8006394:	429a      	cmp	r2, r3
 8006396:	d3eb      	bcc.n	8006370 <u8g2_send_buffer+0x24>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ffcf 	bl	800634c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fb8b 	bl	8007aca <u8x8_RefreshDisplay>
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2208      	movs	r2, #8
 80063c8:	701a      	strb	r2, [r3, #0]
  return buf;
 80063ca:	4b03      	ldr	r3, [pc, #12]	@ (80063d8 <u8g2_m_16_8_f+0x1c>)
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	20001a68 	.word	0x20001a68

080063dc <u8g2_Setup_ssd1309_128x64_noname0_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006420 <u8g2_Setup_ssd1309_128x64_noname0_f+0x44>)
 80063f2:	490c      	ldr	r1, [pc, #48]	@ (8006424 <u8g2_Setup_ssd1309_128x64_noname0_f+0x48>)
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f001 fbc9 	bl	8007b8c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80063fa:	f107 0313 	add.w	r3, r7, #19
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ffdc 	bl	80063bc <u8g2_m_16_8_f>
 8006404:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8006406:	7cfa      	ldrb	r2, [r7, #19]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <u8g2_Setup_ssd1309_128x64_noname0_f+0x4c>)
 800640e:	6979      	ldr	r1, [r7, #20]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 ffb6 	bl	8007382 <u8g2_SetupBuffer>
}
 8006416:	bf00      	nop
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	08007765 	.word	0x08007765
 8006424:	080078e5 	.word	0x080078e5
 8006428:	08007241 	.word	0x08007241

0800642c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	781b      	ldrb	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	4413      	add	r3, r2
 8006462:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	81fb      	strh	r3, [r7, #14]
    font++;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3301      	adds	r3, #1
 800646e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8006470:	89fb      	ldrh	r3, [r7, #14]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	89fb      	ldrh	r3, [r7, #14]
 800647e:	4413      	add	r3, r2
 8006480:	81fb      	strh	r3, [r7, #14]
    return pos;
 8006482:	89fb      	ldrh	r3, [r7, #14]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800649a:	2100      	movs	r1, #0
 800649c:	6838      	ldr	r0, [r7, #0]
 800649e:	f7ff ffc5 	bl	800642c <u8g2_font_get_byte>
 80064a2:	4603      	mov	r3, r0
 80064a4:	461a      	mov	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80064aa:	2101      	movs	r1, #1
 80064ac:	6838      	ldr	r0, [r7, #0]
 80064ae:	f7ff ffbd 	bl	800642c <u8g2_font_get_byte>
 80064b2:	4603      	mov	r3, r0
 80064b4:	461a      	mov	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80064ba:	2102      	movs	r1, #2
 80064bc:	6838      	ldr	r0, [r7, #0]
 80064be:	f7ff ffb5 	bl	800642c <u8g2_font_get_byte>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80064ca:	2103      	movs	r1, #3
 80064cc:	6838      	ldr	r0, [r7, #0]
 80064ce:	f7ff ffad 	bl	800642c <u8g2_font_get_byte>
 80064d2:	4603      	mov	r3, r0
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80064da:	2104      	movs	r1, #4
 80064dc:	6838      	ldr	r0, [r7, #0]
 80064de:	f7ff ffa5 	bl	800642c <u8g2_font_get_byte>
 80064e2:	4603      	mov	r3, r0
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80064ea:	2105      	movs	r1, #5
 80064ec:	6838      	ldr	r0, [r7, #0]
 80064ee:	f7ff ff9d 	bl	800642c <u8g2_font_get_byte>
 80064f2:	4603      	mov	r3, r0
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80064fa:	2106      	movs	r1, #6
 80064fc:	6838      	ldr	r0, [r7, #0]
 80064fe:	f7ff ff95 	bl	800642c <u8g2_font_get_byte>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800650a:	2107      	movs	r1, #7
 800650c:	6838      	ldr	r0, [r7, #0]
 800650e:	f7ff ff8d 	bl	800642c <u8g2_font_get_byte>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800651a:	2108      	movs	r1, #8
 800651c:	6838      	ldr	r0, [r7, #0]
 800651e:	f7ff ff85 	bl	800642c <u8g2_font_get_byte>
 8006522:	4603      	mov	r3, r0
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800652a:	2109      	movs	r1, #9
 800652c:	6838      	ldr	r0, [r7, #0]
 800652e:	f7ff ff7d 	bl	800642c <u8g2_font_get_byte>
 8006532:	4603      	mov	r3, r0
 8006534:	b25a      	sxtb	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800653a:	210a      	movs	r1, #10
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f7ff ff75 	bl	800642c <u8g2_font_get_byte>
 8006542:	4603      	mov	r3, r0
 8006544:	b25a      	sxtb	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800654a:	210b      	movs	r1, #11
 800654c:	6838      	ldr	r0, [r7, #0]
 800654e:	f7ff ff6d 	bl	800642c <u8g2_font_get_byte>
 8006552:	4603      	mov	r3, r0
 8006554:	b25a      	sxtb	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800655a:	210c      	movs	r1, #12
 800655c:	6838      	ldr	r0, [r7, #0]
 800655e:	f7ff ff65 	bl	800642c <u8g2_font_get_byte>
 8006562:	4603      	mov	r3, r0
 8006564:	b25a      	sxtb	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800656a:	210d      	movs	r1, #13
 800656c:	6838      	ldr	r0, [r7, #0]
 800656e:	f7ff ff5d 	bl	800642c <u8g2_font_get_byte>
 8006572:	4603      	mov	r3, r0
 8006574:	b25a      	sxtb	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800657a:	210e      	movs	r1, #14
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f7ff ff55 	bl	800642c <u8g2_font_get_byte>
 8006582:	4603      	mov	r3, r0
 8006584:	b25a      	sxtb	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800658a:	210f      	movs	r1, #15
 800658c:	6838      	ldr	r0, [r7, #0]
 800658e:	f7ff ff4d 	bl	800642c <u8g2_font_get_byte>
 8006592:	4603      	mov	r3, r0
 8006594:	b25a      	sxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800659a:	2110      	movs	r1, #16
 800659c:	6838      	ldr	r0, [r7, #0]
 800659e:	f7ff ff45 	bl	800642c <u8g2_font_get_byte>
 80065a2:	4603      	mov	r3, r0
 80065a4:	b25a      	sxtb	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80065aa:	2111      	movs	r1, #17
 80065ac:	6838      	ldr	r0, [r7, #0]
 80065ae:	f7ff ff4f 	bl	8006450 <u8g2_font_get_word>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80065ba:	2113      	movs	r1, #19
 80065bc:	6838      	ldr	r0, [r7, #0]
 80065be:	f7ff ff47 	bl	8006450 <u8g2_font_get_word>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80065ca:	2115      	movs	r1, #21
 80065cc:	6838      	ldr	r0, [r7, #0]
 80065ce:	f7ff ff3f 	bl	8006450 <u8g2_font_get_word>
 80065d2:	4603      	mov	r3, r0
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	82da      	strh	r2, [r3, #22]
#endif
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7a9b      	ldrb	r3, [r3, #10]
 80065f2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80065fc:	7bfa      	ldrb	r2, [r7, #15]
 80065fe:	7b7b      	ldrb	r3, [r7, #13]
 8006600:	fa42 f303 	asr.w	r3, r2, r3
 8006604:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8006606:	7b7b      	ldrb	r3, [r7, #13]
 8006608:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800660a:	7bba      	ldrb	r2, [r7, #14]
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	4413      	add	r3, r2
 8006610:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	2b07      	cmp	r3, #7
 8006616:	d91a      	bls.n	800664e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8006618:	2308      	movs	r3, #8
 800661a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800661c:	7b3a      	ldrb	r2, [r7, #12]
 800661e:	7b7b      	ldrb	r3, [r7, #13]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	7b3b      	ldrb	r3, [r7, #12]
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	b25a      	sxtb	r2, r3
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006642:	4313      	orrs	r3, r2
 8006644:	b25b      	sxtb	r3, r3
 8006646:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	3b08      	subs	r3, #8
 800664c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	43db      	mvns	r3, r3
 800665c:	b2da      	uxtb	r2, r3
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	4013      	ands	r3, r2
 8006662:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7bba      	ldrb	r2, [r7, #14]
 8006668:	729a      	strb	r2, [r3, #10]
  return val;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ffaa 	bl	80065e2 <u8g2_font_decode_get_unsigned_bits>
 800668e:	4603      	mov	r3, r0
 8006690:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8006692:	2301      	movs	r3, #1
 8006694:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	3b01      	subs	r3, #1
 800669a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800669c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80066a8:	7bfa      	ldrb	r2, [r7, #15]
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	73fb      	strb	r3, [r7, #15]
  return v;
 80066b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80066be:	b490      	push	{r4, r7}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	4604      	mov	r4, r0
 80066c6:	4608      	mov	r0, r1
 80066c8:	4611      	mov	r1, r2
 80066ca:	461a      	mov	r2, r3
 80066cc:	4623      	mov	r3, r4
 80066ce:	71fb      	strb	r3, [r7, #7]
 80066d0:	4603      	mov	r3, r0
 80066d2:	71bb      	strb	r3, [r7, #6]
 80066d4:	460b      	mov	r3, r1
 80066d6:	717b      	strb	r3, [r7, #5]
 80066d8:	4613      	mov	r3, r2
 80066da:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80066dc:	793b      	ldrb	r3, [r7, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d010      	beq.n	8006704 <u8g2_add_vector_y+0x46>
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	dc13      	bgt.n	800670e <u8g2_add_vector_y+0x50>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <u8g2_add_vector_y+0x32>
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d005      	beq.n	80066fa <u8g2_add_vector_y+0x3c>
 80066ee:	e00e      	b.n	800670e <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80066f0:	797a      	ldrb	r2, [r7, #5]
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	4413      	add	r3, r2
 80066f6:	71fb      	strb	r3, [r7, #7]
      break;
 80066f8:	e00e      	b.n	8006718 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80066fa:	79ba      	ldrb	r2, [r7, #6]
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	4413      	add	r3, r2
 8006700:	71fb      	strb	r3, [r7, #7]
      break;
 8006702:	e009      	b.n	8006718 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8006704:	797b      	ldrb	r3, [r7, #5]
 8006706:	79fa      	ldrb	r2, [r7, #7]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	71fb      	strb	r3, [r7, #7]
      break;
 800670c:	e004      	b.n	8006718 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800670e:	79bb      	ldrb	r3, [r7, #6]
 8006710:	79fa      	ldrb	r2, [r7, #7]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	71fb      	strb	r3, [r7, #7]
      break;      
 8006716:	bf00      	nop
  }
  return dy;
 8006718:	79fb      	ldrb	r3, [r7, #7]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bc90      	pop	{r4, r7}
 8006722:	4770      	bx	lr

08006724 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8006724:	b490      	push	{r4, r7}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4623      	mov	r3, r4
 8006734:	71fb      	strb	r3, [r7, #7]
 8006736:	4603      	mov	r3, r0
 8006738:	71bb      	strb	r3, [r7, #6]
 800673a:	460b      	mov	r3, r1
 800673c:	717b      	strb	r3, [r7, #5]
 800673e:	4613      	mov	r3, r2
 8006740:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8006742:	793b      	ldrb	r3, [r7, #4]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d010      	beq.n	800676a <u8g2_add_vector_x+0x46>
 8006748:	2b02      	cmp	r3, #2
 800674a:	dc13      	bgt.n	8006774 <u8g2_add_vector_x+0x50>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <u8g2_add_vector_x+0x32>
 8006750:	2b01      	cmp	r3, #1
 8006752:	d005      	beq.n	8006760 <u8g2_add_vector_x+0x3c>
 8006754:	e00e      	b.n	8006774 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8006756:	79ba      	ldrb	r2, [r7, #6]
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	4413      	add	r3, r2
 800675c:	71fb      	strb	r3, [r7, #7]
      break;
 800675e:	e00e      	b.n	800677e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8006760:	797b      	ldrb	r3, [r7, #5]
 8006762:	79fa      	ldrb	r2, [r7, #7]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	71fb      	strb	r3, [r7, #7]
      break;
 8006768:	e009      	b.n	800677e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800676a:	79bb      	ldrb	r3, [r7, #6]
 800676c:	79fa      	ldrb	r2, [r7, #7]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	71fb      	strb	r3, [r7, #7]
      break;
 8006772:	e004      	b.n	800677e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8006774:	797a      	ldrb	r2, [r7, #5]
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4413      	add	r3, r2
 800677a:	71fb      	strb	r3, [r7, #7]
      break;      
 800677c:	bf00      	nop
  }
  return dx;
 800677e:	79fb      	ldrb	r3, [r7, #7]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bc90      	pop	{r4, r7}
 8006788:	4770      	bx	lr

0800678a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b088      	sub	sp, #32
 800678e:	af02      	add	r7, sp, #8
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
 8006796:	4613      	mov	r3, r2
 8006798:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3350      	adds	r3, #80	@ 0x50
 800679e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80067aa:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80067b2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80067ba:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80067bc:	7bfa      	ldrb	r2, [r7, #15]
 80067be:	7d7b      	ldrb	r3, [r7, #21]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80067c8:	7dfa      	ldrb	r2, [r7, #23]
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d201      	bcs.n	80067d4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	791b      	ldrb	r3, [r3, #4]
 80067d8:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	795b      	ldrb	r3, [r3, #5]
 80067de:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80067e0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80067e4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	7b9b      	ldrb	r3, [r3, #14]
 80067ec:	7bb8      	ldrb	r0, [r7, #14]
 80067ee:	f7ff ff99 	bl	8006724 <u8g2_add_vector_x>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80067f6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80067fa:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	7b9b      	ldrb	r3, [r3, #14]
 8006802:	7b78      	ldrb	r0, [r7, #13]
 8006804:	f7ff ff5b 	bl	80066be <u8g2_add_vector_y>
 8006808:	4603      	mov	r3, r0
 800680a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800680c:	78bb      	ldrb	r3, [r7, #2]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00f      	beq.n	8006832 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	7b1a      	ldrb	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	7b9b      	ldrb	r3, [r3, #14]
 8006820:	7db8      	ldrb	r0, [r7, #22]
 8006822:	7b7a      	ldrb	r2, [r7, #13]
 8006824:	7bb9      	ldrb	r1, [r7, #14]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4603      	mov	r3, r0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc74 	bl	8007118 <u8g2_DrawHVLine>
 8006830:	e012      	b.n	8006858 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	7adb      	ldrb	r3, [r3, #11]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10e      	bne.n	8006858 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	7b5a      	ldrb	r2, [r3, #13]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	7b9b      	ldrb	r3, [r3, #14]
 8006848:	7db8      	ldrb	r0, [r7, #22]
 800684a:	7b7a      	ldrb	r2, [r7, #13]
 800684c:	7bb9      	ldrb	r1, [r7, #14]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	4603      	mov	r3, r0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fc60 	bl	8007118 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8006858:	7dfa      	ldrb	r2, [r7, #23]
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	429a      	cmp	r2, r3
 800685e:	d309      	bcc.n	8006874 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8006860:	7dfa      	ldrb	r2, [r7, #23]
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	757b      	strb	r3, [r7, #21]
    ly++;
 800686c:	7d3b      	ldrb	r3, [r7, #20]
 800686e:	3301      	adds	r3, #1
 8006870:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8006872:	e79f      	b.n	80067b4 <u8g2_font_decode_len+0x2a>
      break;
 8006874:	bf00      	nop
  }
  lx += cnt;
 8006876:	7d7a      	ldrb	r2, [r7, #21]
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	4413      	add	r3, r2
 800687c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800687e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8006886:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	71da      	strb	r2, [r3, #7]
  
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3350      	adds	r3, #80	@ 0x50
 80068a4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80068b8:	4619      	mov	r1, r3
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff fe91 	bl	80065e2 <u8g2_font_decode_get_unsigned_bits>
 80068c0:	4603      	mov	r3, r0
 80068c2:	b25a      	sxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80068ce:	4619      	mov	r1, r3
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fe86 	bl	80065e2 <u8g2_font_decode_get_unsigned_bits>
 80068d6:	4603      	mov	r3, r0
 80068d8:	b25a      	sxtb	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	735a      	strb	r2, [r3, #13]
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3350      	adds	r3, #80	@ 0x50
 8006912:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff ffbd 	bl	8006896 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006922:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800692a:	4619      	mov	r1, r3
 800692c:	6938      	ldr	r0, [r7, #16]
 800692e:	f7ff fea3 	bl	8006678 <u8g2_font_decode_get_signed_bits>
 8006932:	4603      	mov	r3, r0
 8006934:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 800693c:	4619      	mov	r1, r3
 800693e:	6938      	ldr	r0, [r7, #16]
 8006940:	f7ff fe9a 	bl	8006678 <u8g2_font_decode_get_signed_bits>
 8006944:	4603      	mov	r3, r0
 8006946:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800694e:	4619      	mov	r1, r3
 8006950:	6938      	ldr	r0, [r7, #16]
 8006952:	f7ff fe91 	bl	8006678 <u8g2_font_decode_get_signed_bits>
 8006956:	4603      	mov	r3, r0
 8006958:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f340 80cf 	ble.w	8006b04 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	7918      	ldrb	r0, [r3, #4]
 800696a:	7bfa      	ldrb	r2, [r7, #15]
 800696c:	7b7b      	ldrb	r3, [r7, #13]
 800696e:	4413      	add	r3, r2
 8006970:	b2db      	uxtb	r3, r3
 8006972:	425b      	negs	r3, r3
 8006974:	b2db      	uxtb	r3, r3
 8006976:	b25a      	sxtb	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	7b9b      	ldrb	r3, [r3, #14]
 800697c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8006980:	f7ff fed0 	bl	8006724 <u8g2_add_vector_x>
 8006984:	4603      	mov	r3, r0
 8006986:	461a      	mov	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	7958      	ldrb	r0, [r3, #5]
 8006990:	7bfa      	ldrb	r2, [r7, #15]
 8006992:	7b7b      	ldrb	r3, [r7, #13]
 8006994:	4413      	add	r3, r2
 8006996:	b2db      	uxtb	r3, r3
 8006998:	425b      	negs	r3, r3
 800699a:	b2db      	uxtb	r3, r3
 800699c:	b25a      	sxtb	r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	7b9b      	ldrb	r3, [r3, #14]
 80069a2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80069a6:	f7ff fe8a 	bl	80066be <u8g2_add_vector_y>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	791b      	ldrb	r3, [r3, #4]
 80069b6:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	795b      	ldrb	r3, [r3, #5]
 80069bc:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80069c2:	7d7b      	ldrb	r3, [r7, #21]
 80069c4:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	7b9b      	ldrb	r3, [r3, #14]
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d852      	bhi.n	8006a74 <u8g2_font_decode_glyph+0x170>
 80069ce:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <u8g2_font_decode_glyph+0xd0>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a21 	.word	0x08006a21
 80069e0:	08006a51 	.word	0x08006a51
      {
	case 0:
	    x1 += decode->glyph_width;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	7dbb      	ldrb	r3, [r7, #22]
 80069ee:	4413      	add	r3, r2
 80069f0:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80069f2:	7bfa      	ldrb	r2, [r7, #15]
 80069f4:	7d3b      	ldrb	r3, [r7, #20]
 80069f6:	4413      	add	r3, r2
 80069f8:	753b      	strb	r3, [r7, #20]
	    break;
 80069fa:	e03b      	b.n	8006a74 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	7dfa      	ldrb	r2, [r7, #23]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	3301      	adds	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8006a0a:	7dbb      	ldrb	r3, [r7, #22]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	7d3b      	ldrb	r3, [r7, #20]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	753b      	strb	r3, [r7, #20]
	    break;
 8006a1e:	e029      	b.n	8006a74 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	7dfa      	ldrb	r2, [r7, #23]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	3301      	adds	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8006a34:	7dbb      	ldrb	r3, [r7, #22]
 8006a36:	3301      	adds	r3, #1
 8006a38:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	7d7a      	ldrb	r2, [r7, #21]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006a42:	7d7b      	ldrb	r3, [r7, #21]
 8006a44:	3301      	adds	r3, #1
 8006a46:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006a48:	7d3b      	ldrb	r3, [r7, #20]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006a4e:	e011      	b.n	8006a74 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	7dbb      	ldrb	r3, [r7, #22]
 8006a54:	4413      	add	r3, r2
 8006a56:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	7d7a      	ldrb	r2, [r7, #21]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006a66:	7d7b      	ldrb	r3, [r7, #21]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006a6c:	7d3b      	ldrb	r3, [r7, #20]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006a72:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006a74:	7db8      	ldrb	r0, [r7, #22]
 8006a76:	7d7a      	ldrb	r2, [r7, #21]
 8006a78:	7df9      	ldrb	r1, [r7, #23]
 8006a7a:	7d3b      	ldrb	r3, [r7, #20]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4603      	mov	r3, r0
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fbb2 	bl	80071ea <u8g2_IsIntersection>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <u8g2_font_decode_glyph+0x18e>
	return d;
 8006a8c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006a90:	e03a      	b.n	8006b08 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2200      	movs	r2, #0
 8006a96:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6938      	ldr	r0, [r7, #16]
 8006aa8:	f7ff fd9b 	bl	80065e2 <u8g2_font_decode_get_unsigned_bits>
 8006aac:	4603      	mov	r3, r0
 8006aae:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6938      	ldr	r0, [r7, #16]
 8006aba:	f7ff fd92 	bl	80065e2 <u8g2_font_decode_get_unsigned_bits>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fe5e 	bl	800678a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8006ace:	7abb      	ldrb	r3, [r7, #10]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe58 	bl	800678a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8006ada:	2101      	movs	r1, #1
 8006adc:	6938      	ldr	r0, [r7, #16]
 8006ade:	f7ff fd80 	bl	80065e2 <u8g2_font_decode_get_unsigned_bits>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1ec      	bne.n	8006ac2 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8006aee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	dd00      	ble.n	8006af8 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006af6:	e7d2      	b.n	8006a9e <u8g2_font_decode_glyph+0x19a>
	break;
 8006af8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	7b1a      	ldrb	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  return d;
 8006b04:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b20:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3317      	adds	r3, #23
 8006b26:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 8006b28:	887b      	ldrh	r3, [r7, #2]
 8006b2a:	2bff      	cmp	r3, #255	@ 0xff
 8006b2c:	d82a      	bhi.n	8006b84 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8006b2e:	887b      	ldrh	r3, [r7, #2]
 8006b30:	2b60      	cmp	r3, #96	@ 0x60
 8006b32:	d907      	bls.n	8006b44 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e009      	b.n	8006b58 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	2b40      	cmp	r3, #64	@ 0x40
 8006b48:	d906      	bls.n	8006b58 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006b50:	461a      	mov	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d036      	beq.n	8006bd0 <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	887b      	ldrh	r3, [r7, #2]
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d102      	bne.n	8006b74 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3302      	adds	r3, #2
 8006b72:	e031      	b.n	8006bd8 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006b82:	e7e9      	b.n	8006b58 <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 8006b98:	897b      	ldrh	r3, [r7, #10]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	897b      	ldrh	r3, [r7, #10]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 8006bac:	897b      	ldrh	r3, [r7, #10]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 8006bb2:	897a      	ldrh	r2, [r7, #10]
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d102      	bne.n	8006bc0 <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3303      	adds	r3, #3
 8006bbe:	e00b      	b.n	8006bd8 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3302      	adds	r3, #2
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 8006bce:	e7e0      	b.n	8006b92 <u8g2_font_get_glyph_data+0x82>
	break;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <u8g2_font_get_glyph_data+0xc6>
	break;
 8006bd4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	70fb      	strb	r3, [r7, #3]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70bb      	strb	r3, [r7, #2]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	78fa      	ldrb	r2, [r7, #3]
 8006c06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  u8g2->font_decode.target_y = y;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	78ba      	ldrb	r2, [r7, #2]
 8006c0e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006c12:	883b      	ldrh	r3, [r7, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff ff7a 	bl	8006b10 <u8g2_font_get_glyph_data>
 8006c1c:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fe6c 	bl	8006904 <u8g2_font_decode_glyph>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	70fb      	strb	r3, [r7, #3]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70bb      	strb	r3, [r7, #2]
 8006c72:	4613      	mov	r3, r2
 8006c74:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d833      	bhi.n	8006ce8 <u8g2_DrawGlyph+0x8c>
 8006c80:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <u8g2_DrawGlyph+0x2c>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006c99 	.word	0x08006c99
 8006c8c:	08006cad 	.word	0x08006cad
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006cd5 	.word	0x08006cd5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	78bb      	ldrb	r3, [r7, #2]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	70bb      	strb	r3, [r7, #2]
      break;
 8006caa:	e01d      	b.n	8006ce8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	70fb      	strb	r3, [r7, #3]
      break;
 8006cbe:	e013      	b.n	8006ce8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	78bb      	ldrb	r3, [r7, #2]
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	70bb      	strb	r3, [r7, #2]
      break;
 8006cd2:	e009      	b.n	8006ce8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	70fb      	strb	r3, [r7, #3]
      break;
 8006ce6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006ce8:	883b      	ldrh	r3, [r7, #0]
 8006cea:	78ba      	ldrb	r2, [r7, #2]
 8006cec:	78f9      	ldrb	r1, [r7, #3]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff ff78 	bl	8006be4 <u8g2_font_draw_glyph>
 8006cf4:	4603      	mov	r3, r0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop

08006d00 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	607b      	str	r3, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	72fb      	strb	r3, [r7, #11]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fc21 	bl	800755a <u8x8_utf8_init>
  sum = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	4611      	mov	r1, r2
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	4798      	blx	r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8006d2e:	8abb      	ldrh	r3, [r7, #20]
 8006d30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d038      	beq.n	8006daa <u8g2_draw_string+0xaa>
      break;
    str++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8006d3e:	8abb      	ldrh	r3, [r7, #20]
 8006d40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d0e9      	beq.n	8006d1c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8006d48:	8abb      	ldrh	r3, [r7, #20]
 8006d4a:	7aba      	ldrb	r2, [r7, #10]
 8006d4c:	7af9      	ldrb	r1, [r7, #11]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ff84 	bl	8006c5c <u8g2_DrawGlyph>
 8006d54:	4603      	mov	r3, r0
 8006d56:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d81e      	bhi.n	8006da0 <u8g2_draw_string+0xa0>
 8006d62:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <u8g2_draw_string+0x68>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d79 	.word	0x08006d79
 8006d6c:	08006d83 	.word	0x08006d83
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006d97 	.word	0x08006d97
      {
	case 0:
	  x += delta;
 8006d78:	7afa      	ldrb	r2, [r7, #11]
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	72fb      	strb	r3, [r7, #11]
	  break;
 8006d80:	e00e      	b.n	8006da0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8006d82:	7aba      	ldrb	r2, [r7, #10]
 8006d84:	7cfb      	ldrb	r3, [r7, #19]
 8006d86:	4413      	add	r3, r2
 8006d88:	72bb      	strb	r3, [r7, #10]
	  break;
 8006d8a:	e009      	b.n	8006da0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8006d8c:	7afa      	ldrb	r2, [r7, #11]
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	72fb      	strb	r3, [r7, #11]
	  break;
 8006d94:	e004      	b.n	8006da0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8006d96:	7aba      	ldrb	r2, [r7, #10]
 8006d98:	7cfb      	ldrb	r3, [r7, #19]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	72bb      	strb	r3, [r7, #10]
	  break;
 8006d9e:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8006da0:	7dfa      	ldrb	r2, [r7, #23]
 8006da2:	7cfb      	ldrb	r3, [r7, #19]
 8006da4:	4413      	add	r3, r2
 8006da6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006da8:	e7b8      	b.n	8006d1c <u8g2_draw_string+0x1c>
      break;
 8006daa:	bf00      	nop
    }
  }
  return sum;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop

08006db8 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	72fb      	strb	r3, [r7, #11]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a06      	ldr	r2, [pc, #24]	@ (8006de8 <u8g2_DrawStr+0x30>)
 8006dce:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006dd0:	7aba      	ldrb	r2, [r7, #10]
 8006dd2:	7af9      	ldrb	r1, [r7, #11]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff ff92 	bl	8006d00 <u8g2_draw_string>
 8006ddc:	4603      	mov	r3, r0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08007577 	.word	0x08007577

08006dec <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d05d      	beq.n	8006eb8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f993 206d 	ldrsb.w	r2, [r3, #109]	@ 0x6d
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f993 206e 	ldrsb.w	r2, [r3, #110]	@ 0x6e
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04d      	beq.n	8006eba <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d11c      	bne.n	8006e62 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f993 2079 	ldrsb.w	r2, [r3, #121]	@ 0x79
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f993 306f 	ldrsb.w	r3, [r3, #111]	@ 0x6f
 8006e34:	429a      	cmp	r2, r3
 8006e36:	da05      	bge.n	8006e44 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f993 206f 	ldrsb.w	r2, [r3, #111]	@ 0x6f
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 8006e50:	429a      	cmp	r2, r3
 8006e52:	dd32      	ble.n	8006eba <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f993 2070 	ldrsb.w	r2, [r3, #112]	@ 0x70
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8006e60:	e02b      	b.n	8006eba <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f993 3079 	ldrsb.w	r3, [r3, #121]	@ 0x79
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8006e70:	4619      	mov	r1, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8006e78:	440b      	add	r3, r1
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	da0d      	bge.n	8006e9a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	b25a      	sxtb	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	dd07      	ble.n	8006eba <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f993 206c 	ldrsb.w	r2, [r3, #108]	@ 0x6c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8006eb6:	e000      	b.n	8006eba <u8g2_UpdateRefHeight+0xce>
    return;
 8006eb8:	bf00      	nop
  }  
}
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  return 0;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a04      	ldr	r2, [pc, #16]	@ (8006ef8 <u8g2_SetFontPosBaseline+0x1c>)
 8006ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	08006ec5 	.word	0x08006ec5

08006efc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d00b      	beq.n	8006f28 <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	649a      	str	r2, [r3, #72]	@ 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3360      	adds	r3, #96	@ 0x60
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fab7 	bl	8006490 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff ff62 	bl	8006dec <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8006f4a:	7dfa      	ldrb	r2, [r7, #23]
 8006f4c:	7dbb      	ldrb	r3, [r7, #22]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d911      	bls.n	8006f76 <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8006f52:	7dfa      	ldrb	r2, [r7, #23]
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d208      	bcs.n	8006f6c <u8g2_clip_intersection+0x3c>
    {
      b = d;
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	75bb      	strb	r3, [r7, #22]
      b--;
 8006f5e:	7dbb      	ldrb	r3, [r7, #22]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	7dba      	ldrb	r2, [r7, #22]
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e004      	b.n	8006f76 <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	7dfa      	ldrb	r2, [r7, #23]
 8006f74:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8006f76:	7dfa      	ldrb	r2, [r7, #23]
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d301      	bcc.n	8006f82 <u8g2_clip_intersection+0x52>
    return 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e00c      	b.n	8006f9c <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 8006f82:	7dbb      	ldrb	r3, [r7, #22]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <u8g2_clip_intersection+0x5c>
    return 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e007      	b.n	8006f9c <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 8006f8c:	7dba      	ldrb	r2, [r7, #22]
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d902      	bls.n	8006f9a <u8g2_clip_intersection+0x6a>
    *bp = d;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	79fa      	ldrb	r2, [r7, #7]
 8006f98:	701a      	strb	r2, [r3, #0]
    
  return 1;
 8006f9a:	2301      	movs	r3, #1
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006fa8:	b5b0      	push	{r4, r5, r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	70fb      	strb	r3, [r7, #3]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70bb      	strb	r3, [r7, #2]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 403b 	ldrb.w	r4, [r3, #59]	@ 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 503a 	ldrb.w	r5, [r3, #58]	@ 0x3a


  if ( dir == 0 )
 8006fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d11a      	bne.n	800700c <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 8006fd6:	78bb      	ldrb	r3, [r7, #2]
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	d93d      	bls.n	8007058 <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	73fb      	strb	r3, [r7, #15]
    a += len;
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	787b      	ldrb	r3, [r7, #1]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 8006fea:	f107 010f 	add.w	r1, r7, #15
 8006fee:	1cfb      	adds	r3, r7, #3
 8006ff0:	462a      	mov	r2, r5
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff9c 	bl	8006f30 <u8g2_clip_intersection>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02e      	beq.n	800705c <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	707b      	strb	r3, [r7, #1]
    len -= x;
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	787a      	ldrb	r2, [r7, #1]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	707b      	strb	r3, [r7, #1]
 800700a:	e019      	b.n	8007040 <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	429d      	cmp	r5, r3
 8007010:	d926      	bls.n	8007060 <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 8007012:	78bb      	ldrb	r3, [r7, #2]
 8007014:	73fb      	strb	r3, [r7, #15]
    a += len;
 8007016:	7bfa      	ldrb	r2, [r7, #15]
 8007018:	787b      	ldrb	r3, [r7, #1]
 800701a:	4413      	add	r3, r2
 800701c:	b2db      	uxtb	r3, r3
 800701e:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 8007020:	f107 010f 	add.w	r1, r7, #15
 8007024:	1cbb      	adds	r3, r7, #2
 8007026:	4622      	mov	r2, r4
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff81 	bl	8006f30 <u8g2_clip_intersection>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	707b      	strb	r3, [r7, #1]
    len -= y;
 8007038:	78bb      	ldrb	r3, [r7, #2]
 800703a:	787a      	ldrb	r2, [r7, #1]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007044:	78f9      	ldrb	r1, [r7, #3]
 8007046:	78ba      	ldrb	r2, [r7, #2]
 8007048:	7878      	ldrb	r0, [r7, #1]
 800704a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4603      	mov	r3, r0
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	47a0      	blx	r4
 8007056:	e006      	b.n	8007066 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8007058:	bf00      	nop
 800705a:	e004      	b.n	8007066 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 800705c:	bf00      	nop
 800705e:	e002      	b.n	8007066 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8007064:	bf00      	nop
}
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bdb0      	pop	{r4, r5, r7, pc}

0800706c <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b085      	sub	sp, #20
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4603      	mov	r3, r0
 800707c:	70fb      	strb	r3, [r7, #3]
 800707e:	460b      	mov	r3, r1
 8007080:	70bb      	strb	r3, [r7, #2]
 8007082:	4613      	mov	r3, r2
 8007084:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	78ba      	ldrb	r2, [r7, #2]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 8007096:	787b      	ldrb	r3, [r7, #1]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d116      	bne.n	80070ca <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d233      	bcs.n	8007110 <u8g2_draw_hv_line_4dir+0xa4>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80070ae:	78ba      	ldrb	r2, [r7, #2]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d22d      	bcs.n	8007110 <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80070b8:	7878      	ldrb	r0, [r7, #1]
 80070ba:	78ba      	ldrb	r2, [r7, #2]
 80070bc:	78f9      	ldrb	r1, [r7, #3]
 80070be:	7e3b      	ldrb	r3, [r7, #24]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4603      	mov	r3, r0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	47a0      	blx	r4
    return;
 80070c8:	e022      	b.n	8007110 <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 80070ca:	7e3b      	ldrb	r3, [r7, #24]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d107      	bne.n	80070e0 <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	787b      	ldrb	r3, [r7, #1]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	70fb      	strb	r3, [r7, #3]
    x++;
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	3301      	adds	r3, #1
 80070dc:	70fb      	strb	r3, [r7, #3]
 80070de:	e009      	b.n	80070f4 <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 80070e0:	7e3b      	ldrb	r3, [r7, #24]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d106      	bne.n	80070f4 <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 80070e6:	78ba      	ldrb	r2, [r7, #2]
 80070e8:	787b      	ldrb	r3, [r7, #1]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	70bb      	strb	r3, [r7, #2]
    y++;
 80070ee:	78bb      	ldrb	r3, [r7, #2]
 80070f0:	3301      	adds	r3, #1
 80070f2:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 80070f4:	7e3b      	ldrb	r3, [r7, #24]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80070fc:	7878      	ldrb	r0, [r7, #1]
 80070fe:	78ba      	ldrb	r2, [r7, #2]
 8007100:	78f9      	ldrb	r1, [r7, #3]
 8007102:	7e3b      	ldrb	r3, [r7, #24]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4603      	mov	r3, r0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff ff4d 	bl	8006fa8 <u8g2_draw_hv_line_2dir>
 800710e:	e000      	b.n	8007112 <u8g2_draw_hv_line_4dir+0xa6>
    return;
 8007110:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	bd90      	pop	{r4, r7, pc}

08007118 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	4603      	mov	r3, r0
 8007128:	70fb      	strb	r3, [r7, #3]
 800712a:	460b      	mov	r3, r1
 800712c:	70bb      	strb	r3, [r7, #2]
 800712e:	4613      	mov	r3, r2
 8007130:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8007132:	787b      	ldrb	r3, [r7, #1]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	685c      	ldr	r4, [r3, #4]
 800713e:	7878      	ldrb	r0, [r7, #1]
 8007140:	78ba      	ldrb	r2, [r7, #2]
 8007142:	78f9      	ldrb	r1, [r7, #3]
 8007144:	7e3b      	ldrb	r3, [r7, #24]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	47a0      	blx	r4
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	bd90      	pop	{r4, r7, pc}

08007156 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  if ( color >= 3 )
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d903      	bls.n	8007178 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8007184:	b490      	push	{r4, r7}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4623      	mov	r3, r4
 8007194:	71fb      	strb	r3, [r7, #7]
 8007196:	4603      	mov	r3, r0
 8007198:	71bb      	strb	r3, [r7, #6]
 800719a:	460b      	mov	r3, r1
 800719c:	717b      	strb	r3, [r7, #5]
 800719e:	4613      	mov	r3, r2
 80071a0:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80071a2:	797a      	ldrb	r2, [r7, #5]
 80071a4:	79bb      	ldrb	r3, [r7, #6]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d20d      	bcs.n	80071c6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80071aa:	793a      	ldrb	r2, [r7, #4]
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d901      	bls.n	80071b6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e014      	b.n	80071e0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80071b6:	797a      	ldrb	r2, [r7, #5]
 80071b8:	793b      	ldrb	r3, [r7, #4]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d901      	bls.n	80071c2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	e00e      	b.n	80071e0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e00c      	b.n	80071e0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80071c6:	793a      	ldrb	r2, [r7, #4]
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d907      	bls.n	80071de <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80071ce:	797a      	ldrb	r2, [r7, #5]
 80071d0:	793b      	ldrb	r3, [r7, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d901      	bls.n	80071da <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e002      	b.n	80071e0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80071de:	2300      	movs	r3, #0
    }
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc90      	pop	{r4, r7}
 80071e8:	4770      	bx	lr

080071ea <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	461a      	mov	r2, r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70bb      	strb	r3, [r7, #2]
 8007200:	4613      	mov	r3, r2
 8007202:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 0043 	ldrb.w	r0, [r3, #67]	@ 0x43
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 8007210:	7c3b      	ldrb	r3, [r7, #16]
 8007212:	78ba      	ldrb	r2, [r7, #2]
 8007214:	f7ff ffb6 	bl	8007184 <u8g2_is_intersection_decision_tree>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <u8g2_IsIntersection+0x38>
    return 0; 
 800721e:	2300      	movs	r3, #0
 8007220:	e00a      	b.n	8007238 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 0041 	ldrb.w	r0, [r3, #65]	@ 0x41
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 1042 	ldrb.w	r1, [r3, #66]	@ 0x42
 800722e:	787b      	ldrb	r3, [r7, #1]
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	f7ff ffa7 	bl	8007184 <u8g2_is_intersection_decision_tree>
 8007236:	4603      	mov	r3, r0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	70fb      	strb	r3, [r7, #3]
 8007252:	460b      	mov	r3, r1
 8007254:	70bb      	strb	r3, [r7, #2]
 8007256:	4613      	mov	r3, r2
 8007258:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800725a:	78bb      	ldrb	r3, [r7, #2]
 800725c:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800725e:	7cfb      	ldrb	r3, [r7, #19]
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800726a:	7c3a      	ldrb	r2, [r7, #16]
 800726c:	7cfb      	ldrb	r3, [r7, #19]
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007282:	2b01      	cmp	r3, #1
 8007284:	d801      	bhi.n	800728a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8007286:	7c3b      	ldrb	r3, [r7, #16]
 8007288:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007290:	2b01      	cmp	r3, #1
 8007292:	d001      	beq.n	8007298 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8007294:	7c3b      	ldrb	r3, [r7, #16]
 8007296:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8007298:	78bb      	ldrb	r3, [r7, #2]
 800729a:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800729c:	89fb      	ldrh	r3, [r7, #14]
 800729e:	f023 0307 	bic.w	r3, r3, #7
 80072a2:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	7c1b      	ldrb	r3, [r3, #16]
 80072aa:	461a      	mov	r2, r3
 80072ac:	89fb      	ldrh	r3, [r7, #14]
 80072ae:	fb13 f302 	smulbb	r3, r3, r2
 80072b2:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b8:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80072ba:	89fb      	ldrh	r3, [r7, #14]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4413      	add	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
  ptr += x;
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4413      	add	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80072ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d117      	bne.n	8007302 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
  {
      do
      {
	*ptr |= or_mask;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	7cbb      	ldrb	r3, [r7, #18]
 80072d8:	4313      	orrs	r3, r2
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	7c7b      	ldrb	r3, [r7, #17]
 80072e6:	4053      	eors	r3, r2
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	701a      	strb	r2, [r3, #0]
	ptr++;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	3301      	adds	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
	len--;
 80072f4:	787b      	ldrb	r3, [r7, #1]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80072fa:	787b      	ldrb	r3, [r7, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e8      	bne.n	80072d2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8007300:	e039      	b.n	8007376 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	7cbb      	ldrb	r3, [r7, #18]
 8007308:	4313      	orrs	r3, r2
 800730a:	b2da      	uxtb	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	7c7b      	ldrb	r3, [r7, #17]
 8007316:	4053      	eors	r3, r2
 8007318:	b2da      	uxtb	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800731e:	7cfb      	ldrb	r3, [r7, #19]
 8007320:	3301      	adds	r3, #1
 8007322:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8007324:	7cfb      	ldrb	r3, [r7, #19]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	74fb      	strb	r3, [r7, #19]
      len--;
 800732c:	787b      	ldrb	r3, [r7, #1]
 800732e:	3b01      	subs	r3, #1
 8007330:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8007332:	7cfb      	ldrb	r3, [r7, #19]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d115      	bne.n	8007364 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800733e:	461a      	mov	r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	4413      	add	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800734c:	2b01      	cmp	r3, #1
 800734e:	d801      	bhi.n	8007354 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800735a:	2b01      	cmp	r3, #1
 800735c:	d008      	beq.n	8007370 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800735e:	2301      	movs	r3, #1
 8007360:	747b      	strb	r3, [r7, #17]
 8007362:	e005      	b.n	8007370 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8007364:	7cbb      	ldrb	r3, [r7, #18]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800736a:	7c7b      	ldrb	r3, [r7, #17]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8007370:	787b      	ldrb	r3, [r7, #1]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1c5      	bne.n	8007302 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	649a      	str	r2, [r3, #72]	@ 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	79fa      	ldrb	r2, [r7, #7]
 80073a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  u8g2->bitmap_transparency = 0;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  u8g2->draw_color = 1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  u8g2->is_auto_page_clear = 1;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  
  u8g2->cb = u8g2_cb;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update(u8g2);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff fd79 	bl	8006edc <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
#endif
}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007408:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	7c1b      	ldrb	r3, [r3, #16]
 800741e:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	2b1f      	cmp	r3, #31
 8007424:	d901      	bls.n	800742a <u8g2_update_dimension_common+0x30>
    t = 31;
 8007426:	231f      	movs	r3, #31
 8007428:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7bfa      	ldrb	r2, [r7, #15]
 8007434:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800743e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  t = u8g2->tile_buf_height;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007454:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800745e:	4413      	add	r3, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	7c52      	ldrb	r2, [r2, #17]
 8007466:	4293      	cmp	r3, r2
 8007468:	dd07      	ble.n	800747a <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	7c5a      	ldrb	r2, [r3, #17]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  u8g2->buf_y1 += t;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	4413      	add	r3, r2
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	22f0      	movs	r2, #240	@ 0xf0
 80074ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	8a9b      	ldrh	r3, [r3, #20]
 80074b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80074ba:	d806      	bhi.n	80074ca <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	8a9b      	ldrh	r3, [r3, #20]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	8adb      	ldrh	r3, [r3, #22]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
#endif

}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff ff84 	bl	80073fa <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af02      	add	r7, sp, #8
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	461a      	mov	r2, r3
 8007534:	4603      	mov	r3, r0
 8007536:	70fb      	strb	r3, [r7, #3]
 8007538:	460b      	mov	r3, r1
 800753a:	70bb      	strb	r3, [r7, #2]
 800753c:	4613      	mov	r3, r2
 800753e:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 8007540:	7878      	ldrb	r0, [r7, #1]
 8007542:	78ba      	ldrb	r2, [r7, #2]
 8007544:	78f9      	ldrb	r1, [r7, #3]
 8007546:	7c3b      	ldrb	r3, [r7, #16]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4603      	mov	r3, r0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fd8d 	bl	800706c <u8g2_draw_hv_line_4dir>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <u8x8_ascii_next+0x18>
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	2b0a      	cmp	r3, #10
 800758c:	d102      	bne.n	8007594 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800758e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007592:	e001      	b.n	8007598 <u8x8_ascii_next+0x22>
  return b;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b29b      	uxth	r3, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691c      	ldr	r4, [r3, #16]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	2300      	movs	r3, #0
 80075b8:	2120      	movs	r1, #32
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	47a0      	blx	r4
 80075be:	4603      	mov	r3, r0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd90      	pop	{r4, r7, pc}

080075c8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80075c8:	b590      	push	{r4, r7, lr}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	460b      	mov	r3, r1
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	691c      	ldr	r4, [r3, #16]
 80075da:	7afa      	ldrb	r2, [r7, #11]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2117      	movs	r1, #23
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	47a0      	blx	r4
 80075e4:	4603      	mov	r3, r0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}

080075ee <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80075fa:	1cfb      	adds	r3, r7, #3
 80075fc:	461a      	mov	r2, r3
 80075fe:	2101      	movs	r1, #1
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff ffe1 	bl	80075c8 <u8x8_byte_SendBytes>
 8007606:	4603      	mov	r3, r0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68dc      	ldr	r4, [r3, #12]
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	2300      	movs	r3, #0
 8007624:	2115      	movs	r1, #21
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	47a0      	blx	r4
 800762a:	4603      	mov	r3, r0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bd90      	pop	{r4, r7, pc}

08007634 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68dc      	ldr	r4, [r3, #12]
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	2300      	movs	r3, #0
 8007648:	2116      	movs	r1, #22
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	47a0      	blx	r4
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	bd90      	pop	{r4, r7, pc}

08007658 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	460b      	mov	r3, r1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68dc      	ldr	r4, [r3, #12]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2117      	movs	r1, #23
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	47a0      	blx	r4
 8007674:	4603      	mov	r3, r0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	bd90      	pop	{r4, r7, pc}

0800767e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800767e:	b590      	push	{r4, r7, lr}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68dc      	ldr	r4, [r3, #12]
 800768a:	2300      	movs	r3, #0
 800768c:	2200      	movs	r2, #0
 800768e:	2118      	movs	r1, #24
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	47a0      	blx	r4
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}

0800769e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800769e:	b590      	push	{r4, r7, lr}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68dc      	ldr	r4, [r3, #12]
 80076aa:	2300      	movs	r3, #0
 80076ac:	2200      	movs	r2, #0
 80076ae:	2119      	movs	r1, #25
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	47a0      	blx	r4
 80076b4:	4603      	mov	r3, r0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}

080076be <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80076be:	b590      	push	{r4, r7, lr}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	73fb      	strb	r3, [r7, #15]
    data++;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80076d8:	d031      	beq.n	800773e <u8x8_cad_SendSequence+0x80>
 80076da:	2bfe      	cmp	r3, #254	@ 0xfe
 80076dc:	dc3d      	bgt.n	800775a <u8x8_cad_SendSequence+0x9c>
 80076de:	2b19      	cmp	r3, #25
 80076e0:	dc3b      	bgt.n	800775a <u8x8_cad_SendSequence+0x9c>
 80076e2:	2b18      	cmp	r3, #24
 80076e4:	da23      	bge.n	800772e <u8x8_cad_SendSequence+0x70>
 80076e6:	2b16      	cmp	r3, #22
 80076e8:	dc02      	bgt.n	80076f0 <u8x8_cad_SendSequence+0x32>
 80076ea:	2b15      	cmp	r3, #21
 80076ec:	da03      	bge.n	80076f6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80076ee:	e034      	b.n	800775a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80076f0:	2b17      	cmp	r3, #23
 80076f2:	d00e      	beq.n	8007712 <u8x8_cad_SendSequence+0x54>
	return;
 80076f4:	e031      	b.n	800775a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68dc      	ldr	r4, [r3, #12]
 8007700:	7bba      	ldrb	r2, [r7, #14]
 8007702:	7bf9      	ldrb	r1, [r7, #15]
 8007704:	2300      	movs	r3, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	47a0      	blx	r4
	  data++;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	3301      	adds	r3, #1
 800770e:	603b      	str	r3, [r7, #0]
	  break;
 8007710:	e022      	b.n	8007758 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8007718:	f107 030e 	add.w	r3, r7, #14
 800771c:	461a      	mov	r2, r3
 800771e:	2101      	movs	r1, #1
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff99 	bl	8007658 <u8x8_cad_SendData>
	  data++;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	603b      	str	r3, [r7, #0]
	  break;
 800772c:	e014      	b.n	8007758 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68dc      	ldr	r4, [r3, #12]
 8007732:	7bf9      	ldrb	r1, [r7, #15]
 8007734:	2300      	movs	r3, #0
 8007736:	2200      	movs	r2, #0
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	47a0      	blx	r4
	  break;
 800773c:	e00c      	b.n	8007758 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	461a      	mov	r2, r3
 8007748:	2129      	movs	r1, #41	@ 0x29
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9cc 	bl	8007ae8 <u8x8_gpio_call>
	  data++;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	603b      	str	r3, [r7, #0]
	  break;
 8007756:	bf00      	nop
    cmd = *data;
 8007758:	e7b6      	b.n	80076c8 <u8x8_cad_SendSequence+0xa>
	return;
 800775a:	bf00      	nop
    }
  }
}
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bd90      	pop	{r4, r7, pc}
	...

08007764 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	72fb      	strb	r3, [r7, #11]
 8007772:	4613      	mov	r3, r2
 8007774:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	3b14      	subs	r3, #20
 800777a:	2b05      	cmp	r3, #5
 800777c:	d82f      	bhi.n	80077de <u8x8_cad_001+0x7a>
 800777e:	a201      	add	r2, pc, #4	@ (adr r2, 8007784 <u8x8_cad_001+0x20>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077cd 	.word	0x080077cd
 8007788:	0800779d 	.word	0x0800779d
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077c5 	.word	0x080077c5
 8007794:	080077cd 	.word	0x080077cd
 8007798:	080077cd 	.word	0x080077cd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800779c:	2100      	movs	r1, #0
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff ff00 	bl	80075a4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80077a4:	7abb      	ldrb	r3, [r7, #10]
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff ff20 	bl	80075ee <u8x8_byte_SendByte>
      break;
 80077ae:	e018      	b.n	80077e2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80077b0:	2100      	movs	r1, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fef6 	bl	80075a4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80077b8:	7abb      	ldrb	r3, [r7, #10]
 80077ba:	4619      	mov	r1, r3
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff ff16 	bl	80075ee <u8x8_byte_SendByte>
      break;
 80077c2:	e00e      	b.n	80077e2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80077c4:	2101      	movs	r1, #1
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff feec 	bl	80075a4 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	691c      	ldr	r4, [r3, #16]
 80077d0:	7aba      	ldrb	r2, [r7, #10]
 80077d2:	7af9      	ldrb	r1, [r7, #11]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	47a0      	blx	r4
 80077da:	4603      	mov	r3, r0
 80077dc:	e002      	b.n	80077e4 <u8x8_cad_001+0x80>
    default:
      return 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	e000      	b.n	80077e4 <u8x8_cad_001+0x80>
  }
  return 1;
 80077e2:	2301      	movs	r3, #1
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd90      	pop	{r4, r7, pc}

080077ec <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	72fb      	strb	r3, [r7, #11]
 80077fa:	4613      	mov	r3, r2
 80077fc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	2b0f      	cmp	r3, #15
 8007802:	d006      	beq.n	8007812 <u8x8_d_ssd1309_generic+0x26>
 8007804:	2b0f      	cmp	r3, #15
 8007806:	dc62      	bgt.n	80078ce <u8x8_d_ssd1309_generic+0xe2>
 8007808:	2b0b      	cmp	r3, #11
 800780a:	d043      	beq.n	8007894 <u8x8_d_ssd1309_generic+0xa8>
 800780c:	2b0e      	cmp	r3, #14
 800780e:	d04e      	beq.n	80078ae <u8x8_d_ssd1309_generic+0xc2>
 8007810:	e05d      	b.n	80078ce <u8x8_d_ssd1309_generic+0xe2>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff ff33 	bl	800767e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	795b      	ldrb	r3, [r3, #5]
 800781c:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	7f9a      	ldrb	r2, [r3, #30]
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	4413      	add	r3, r2
 800782c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f043 0310 	orr.w	r3, r3, #16
 8007838:	b2db      	uxtb	r3, r3
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff fee7 	bl	8007610 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	b2db      	uxtb	r3, r3
 800784a:	4619      	mov	r1, r3
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff fef1 	bl	8007634 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	799b      	ldrb	r3, [r3, #6]
 8007856:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff fee8 	bl	8007634 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8007870:	7dbb      	ldrb	r3, [r7, #22]
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	b2db      	uxtb	r3, r3
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4619      	mov	r1, r3
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff feec 	bl	8007658 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8007880:	7abb      	ldrb	r3, [r7, #10]
 8007882:	3b01      	subs	r3, #1
 8007884:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8007886:	7abb      	ldrb	r3, [r7, #10]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1eb      	bne.n	8007864 <u8x8_d_ssd1309_generic+0x78>
      
      u8x8_cad_EndTransfer(u8x8);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff ff06 	bl	800769e <u8x8_cad_EndTransfer>
      break;
 8007892:	e01e      	b.n	80078d2 <u8x8_d_ssd1309_generic+0xe6>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8007894:	7abb      	ldrb	r3, [r7, #10]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <u8x8_d_ssd1309_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 800789a:	4910      	ldr	r1, [pc, #64]	@ (80078dc <u8x8_d_ssd1309_generic+0xf0>)
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7ff ff0e 	bl	80076be <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 80078a2:	e016      	b.n	80078d2 <u8x8_d_ssd1309_generic+0xe6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 80078a4:	490e      	ldr	r1, [pc, #56]	@ (80078e0 <u8x8_d_ssd1309_generic+0xf4>)
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff ff09 	bl	80076be <u8x8_cad_SendSequence>
      break;
 80078ac:	e011      	b.n	80078d2 <u8x8_d_ssd1309_generic+0xe6>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff fee5 	bl	800767e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80078b4:	2181      	movs	r1, #129	@ 0x81
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff feaa 	bl	8007610 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 80078bc:	7abb      	ldrb	r3, [r7, #10]
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff feb7 	bl	8007634 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7ff fee9 	bl	800769e <u8x8_cad_EndTransfer>
      break;
 80078cc:	e001      	b.n	80078d2 <u8x8_d_ssd1309_generic+0xe6>
#endif
    default:
      return 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <u8x8_d_ssd1309_generic+0xe8>
  }
  return 1;
 80078d2:	2301      	movs	r3, #1
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	080149e4 	.word	0x080149e4
 80078e0:	080149ec 	.word	0x080149ec

080078e4 <u8x8_d_ssd1309_128x64_noname0>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	72fb      	strb	r3, [r7, #11]
 80078f2:	4613      	mov	r3, r2
 80078f4:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80078f6:	7aba      	ldrb	r2, [r7, #10]
 80078f8:	7af9      	ldrb	r1, [r7, #11]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff ff75 	bl	80077ec <u8x8_d_ssd1309_generic>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <u8x8_d_ssd1309_128x64_noname0+0x28>
    return 1;
 8007908:	2301      	movs	r3, #1
 800790a:	e030      	b.n	800796e <u8x8_d_ssd1309_128x64_noname0+0x8a>
  
  switch(msg)
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	2b0d      	cmp	r3, #13
 8007910:	d006      	beq.n	8007920 <u8x8_d_ssd1309_128x64_noname0+0x3c>
 8007912:	2b0d      	cmp	r3, #13
 8007914:	dc28      	bgt.n	8007968 <u8x8_d_ssd1309_128x64_noname0+0x84>
 8007916:	2b09      	cmp	r3, #9
 8007918:	d021      	beq.n	800795e <u8x8_d_ssd1309_128x64_noname0+0x7a>
 800791a:	2b0a      	cmp	r3, #10
 800791c:	d017      	beq.n	800794e <u8x8_d_ssd1309_128x64_noname0+0x6a>
 800791e:	e023      	b.n	8007968 <u8x8_d_ssd1309_128x64_noname0+0x84>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8007920:	7abb      	ldrb	r3, [r7, #10]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <u8x8_d_ssd1309_128x64_noname0+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8007926:	4914      	ldr	r1, [pc, #80]	@ (8007978 <u8x8_d_ssd1309_128x64_noname0+0x94>)
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff fec8 	bl	80076be <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	7c9a      	ldrb	r2, [r3, #18]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	779a      	strb	r2, [r3, #30]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8007938:	e018      	b.n	800796c <u8x8_d_ssd1309_128x64_noname0+0x88>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 800793a:	4910      	ldr	r1, [pc, #64]	@ (800797c <u8x8_d_ssd1309_128x64_noname0+0x98>)
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff febe 	bl	80076be <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	7cda      	ldrb	r2, [r3, #19]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	779a      	strb	r2, [r3, #30]
      break;
 800794c:	e00e      	b.n	800796c <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f82d 	bl	80079ae <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8007954:	490a      	ldr	r1, [pc, #40]	@ (8007980 <u8x8_d_ssd1309_128x64_noname0+0x9c>)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff feb1 	bl	80076be <u8x8_cad_SendSequence>
      break;
 800795c:	e006      	b.n	800796c <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname0_display_info);
 800795e:	4909      	ldr	r1, [pc, #36]	@ (8007984 <u8x8_d_ssd1309_128x64_noname0+0xa0>)
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f811 	bl	8007988 <u8x8_d_helper_display_setup_memory>
      break;
 8007966:	e001      	b.n	800796c <u8x8_d_ssd1309_128x64_noname0+0x88>
    default:
      return 0;
 8007968:	2300      	movs	r3, #0
 800796a:	e000      	b.n	800796e <u8x8_d_ssd1309_128x64_noname0+0x8a>
  }
  return 1;
 800796c:	2301      	movs	r3, #1
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	080149f4 	.word	0x080149f4
 800797c:	080149fc 	.word	0x080149fc
 8007980:	08014a04 	.word	0x08014a04
 8007984:	08014a30 	.word	0x08014a30

08007988 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	7c9a      	ldrb	r2, [r3, #18]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	779a      	strb	r2, [r3, #30]
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80079ae:	b590      	push	{r4, r7, lr}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695c      	ldr	r4, [r3, #20]
 80079ba:	2300      	movs	r3, #0
 80079bc:	2200      	movs	r2, #0
 80079be:	2128      	movs	r1, #40	@ 0x28
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68dc      	ldr	r4, [r3, #12]
 80079c8:	2300      	movs	r3, #0
 80079ca:	2200      	movs	r2, #0
 80079cc:	2114      	movs	r1, #20
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80079d2:	2201      	movs	r2, #1
 80079d4:	214b      	movs	r1, #75	@ 0x4b
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f886 	bl	8007ae8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	791b      	ldrb	r3, [r3, #4]
 80079e2:	461a      	mov	r2, r3
 80079e4:	2129      	movs	r1, #41	@ 0x29
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f87e 	bl	8007ae8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80079ec:	2200      	movs	r2, #0
 80079ee:	214b      	movs	r1, #75	@ 0x4b
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f879 	bl	8007ae8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	461a      	mov	r2, r3
 80079fe:	2129      	movs	r1, #41	@ 0x29
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f871 	bl	8007ae8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8007a06:	2201      	movs	r2, #1
 8007a08:	214b      	movs	r1, #75	@ 0x4b
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f86c 	bl	8007ae8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	461a      	mov	r2, r3
 8007a18:	2129      	movs	r1, #41	@ 0x29
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f864 	bl	8007ae8 <u8x8_gpio_call>
}    
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd90      	pop	{r4, r7, pc}

08007a28 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007a28:	b590      	push	{r4, r7, lr}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	70fb      	strb	r3, [r7, #3]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70bb      	strb	r3, [r7, #2]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007a46:	78bb      	ldrb	r3, [r7, #2]
 8007a48:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007a4a:	787b      	ldrb	r3, [r7, #1]
 8007a4c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689c      	ldr	r4, [r3, #8]
 8007a56:	f107 0308 	add.w	r3, r7, #8
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	210f      	movs	r1, #15
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	47a0      	blx	r4
 8007a62:	4603      	mov	r3, r0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd90      	pop	{r4, r7, pc}

08007a6c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689c      	ldr	r4, [r3, #8]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2109      	movs	r1, #9
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	47a0      	blx	r4
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd90      	pop	{r4, r7, pc}

08007a8a <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007a8a:	b590      	push	{r4, r7, lr}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689c      	ldr	r4, [r3, #8]
 8007a96:	2300      	movs	r3, #0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	210a      	movs	r1, #10
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	47a0      	blx	r4
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd90      	pop	{r4, r7, pc}

08007aa8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689c      	ldr	r4, [r3, #8]
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	2300      	movs	r3, #0
 8007abc:	210b      	movs	r1, #11
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	47a0      	blx	r4
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}

08007aca <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8007aca:	b590      	push	{r4, r7, lr}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689c      	ldr	r4, [r3, #8]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2110      	movs	r1, #16
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	47a0      	blx	r4
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd90      	pop	{r4, r7, pc}

08007ae8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
 8007af4:	4613      	mov	r3, r2
 8007af6:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695c      	ldr	r4, [r3, #20]
 8007afc:	78ba      	ldrb	r2, [r7, #2]
 8007afe:	78f9      	ldrb	r1, [r7, #3]
 8007b00:	2300      	movs	r3, #0
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	47a0      	blx	r4
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd90      	pop	{r4, r7, pc}

08007b0e <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	607b      	str	r3, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	72fb      	strb	r3, [r7, #11]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a11      	ldr	r2, [pc, #68]	@ (8007b88 <u8x8_SetupDefaults+0x58>)
 8007b42:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a10      	ldr	r2, [pc, #64]	@ (8007b88 <u8x8_SetupDefaults+0x58>)
 8007b48:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8007b88 <u8x8_SetupDefaults+0x58>)
 8007b4e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a0d      	ldr	r2, [pc, #52]	@ (8007b88 <u8x8_SetupDefaults+0x58>)
 8007b54:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->i2c_address = 255;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	22ff      	movs	r2, #255	@ 0xff
 8007b70:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	22ff      	movs	r2, #255	@ 0xff
 8007b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	08007b0f 	.word	0x08007b0f

08007b8c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff ffc8 	bl	8007b30 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff ff57 	bl	8007a6c <u8x8_SetupMemory>
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007bce:	463b      	mov	r3, r7
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
 8007bd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007bda:	4b21      	ldr	r3, [pc, #132]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007bdc:	4a21      	ldr	r2, [pc, #132]	@ (8007c64 <MX_ADC1_Init+0x9c>)
 8007bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007be0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007be2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007be8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007bee:	4b1c      	ldr	r3, [pc, #112]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007bfa:	4b19      	ldr	r3, [pc, #100]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c02:	4b17      	ldr	r3, [pc, #92]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007c08:	4b15      	ldr	r3, [pc, #84]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c0a:	4a17      	ldr	r2, [pc, #92]	@ (8007c68 <MX_ADC1_Init+0xa0>)
 8007c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007c0e:	4b14      	ldr	r3, [pc, #80]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007c14:	4b12      	ldr	r3, [pc, #72]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007c1a:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c22:	4b0f      	ldr	r3, [pc, #60]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007c28:	480d      	ldr	r0, [pc, #52]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c2a:	f000 ff55 	bl	8008ad8 <HAL_ADC_Init>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007c34:	f000 fa26 	bl	8008084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8007c40:	2307      	movs	r3, #7
 8007c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c44:	463b      	mov	r3, r7
 8007c46:	4619      	mov	r1, r3
 8007c48:	4805      	ldr	r0, [pc, #20]	@ (8007c60 <MX_ADC1_Init+0x98>)
 8007c4a:	f001 fa55 	bl	80090f8 <HAL_ADC_ConfigChannel>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007c54:	f000 fa16 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20001e68 	.word	0x20001e68
 8007c64:	40012000 	.word	0x40012000
 8007c68:	0f000001 	.word	0x0f000001

08007c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	@ 0x28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c74:	f107 0314 	add.w	r3, r7, #20
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <HAL_ADC_MspInit+0x8c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d12f      	bne.n	8007cee <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007c8e:	2300      	movs	r3, #0
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	4b1a      	ldr	r3, [pc, #104]	@ (8007cfc <HAL_ADC_MspInit+0x90>)
 8007c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c96:	4a19      	ldr	r2, [pc, #100]	@ (8007cfc <HAL_ADC_MspInit+0x90>)
 8007c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c9e:	4b17      	ldr	r3, [pc, #92]	@ (8007cfc <HAL_ADC_MspInit+0x90>)
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	4b13      	ldr	r3, [pc, #76]	@ (8007cfc <HAL_ADC_MspInit+0x90>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb2:	4a12      	ldr	r2, [pc, #72]	@ (8007cfc <HAL_ADC_MspInit+0x90>)
 8007cb4:	f043 0301 	orr.w	r3, r3, #1
 8007cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cba:	4b10      	ldr	r3, [pc, #64]	@ (8007cfc <HAL_ADC_MspInit+0x90>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_0_LevelSensor_Pin;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_0_LevelSensor_GPIO_Port, &GPIO_InitStruct);
 8007cd2:	f107 0314 	add.w	r3, r7, #20
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4809      	ldr	r0, [pc, #36]	@ (8007d00 <HAL_ADC_MspInit+0x94>)
 8007cda:	f001 fd39 	bl	8009750 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2105      	movs	r1, #5
 8007ce2:	2012      	movs	r0, #18
 8007ce4:	f001 fce8 	bl	80096b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007ce8:	2012      	movs	r0, #18
 8007cea:	f001 fd01 	bl	80096f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3728      	adds	r7, #40	@ 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40012000 	.word	0x40012000
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40020000 	.word	0x40020000

08007d04 <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0


	app_mainC();
 8007d08:	f7f9 feee 	bl	8001ae8 <app_mainC>
    vTaskStartScheduler();
 8007d0c:	f007 f848 	bl	800eda0 <vTaskStartScheduler>
}
 8007d10:	bf00      	nop
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	@ 0x28
 8007d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d1a:	f107 0314 	add.w	r3, r7, #20
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	605a      	str	r2, [r3, #4]
 8007d24:	609a      	str	r2, [r3, #8]
 8007d26:	60da      	str	r2, [r3, #12]
 8007d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	4b48      	ldr	r3, [pc, #288]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d32:	4a47      	ldr	r2, [pc, #284]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d34:	f043 0304 	orr.w	r3, r3, #4
 8007d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d3a:	4b45      	ldr	r3, [pc, #276]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	4b41      	ldr	r3, [pc, #260]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	4a40      	ldr	r2, [pc, #256]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d56:	4b3e      	ldr	r3, [pc, #248]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	4b3a      	ldr	r3, [pc, #232]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6a:	4a39      	ldr	r2, [pc, #228]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d6c:	f043 0301 	orr.w	r3, r3, #1
 8007d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d72:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	60bb      	str	r3, [r7, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	4b33      	ldr	r3, [pc, #204]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d86:	4a32      	ldr	r2, [pc, #200]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d88:	f043 0302 	orr.w	r3, r3, #2
 8007d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d8e:	4b30      	ldr	r3, [pc, #192]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	607b      	str	r3, [r7, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	603b      	str	r3, [r7, #0]
 8007d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da2:	4a2b      	ldr	r2, [pc, #172]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007da4:	f043 0308 	orr.w	r3, r3, #8
 8007da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007daa:	4b29      	ldr	r3, [pc, #164]	@ (8007e50 <MX_GPIO_Init+0x13c>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2102      	movs	r1, #2
 8007dba:	4826      	ldr	r0, [pc, #152]	@ (8007e54 <MX_GPIO_Init+0x140>)
 8007dbc:	f001 fe7c 	bl	8009ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DC_Pin|DISPLAY_RES_Pin, GPIO_PIN_RESET);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8007dc6:	4824      	ldr	r0, [pc, #144]	@ (8007e58 <MX_GPIO_Init+0x144>)
 8007dc8:	f001 fe76 	bl	8009ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Relay_cont_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007dd2:	4822      	ldr	r0, [pc, #136]	@ (8007e5c <MX_GPIO_Init+0x148>)
 8007dd4:	f001 fe70 	bl	8009ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007de4:	2300      	movs	r3, #0
 8007de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 8007de8:	f107 0314 	add.w	r3, r7, #20
 8007dec:	4619      	mov	r1, r3
 8007dee:	4819      	ldr	r0, [pc, #100]	@ (8007e54 <MX_GPIO_Init+0x140>)
 8007df0:	f001 fcae 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_DC_Pin|DISPLAY_RES_Pin;
 8007df4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e02:	2300      	movs	r3, #0
 8007e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e06:	f107 0314 	add.w	r3, r7, #20
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4812      	ldr	r0, [pc, #72]	@ (8007e58 <MX_GPIO_Init+0x144>)
 8007e0e:	f001 fc9f 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Relay_cont_Pin|DISPLAY_CS_Pin;
 8007e12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e20:	2300      	movs	r3, #0
 8007e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4619      	mov	r1, r3
 8007e2a:	480c      	ldr	r0, [pc, #48]	@ (8007e5c <MX_GPIO_Init+0x148>)
 8007e2c:	f001 fc90 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_ENTR_Pin|BTN_DWN_Pin|BTN_RGT_Pin
 8007e30:	233e      	movs	r3, #62	@ 0x3e
 8007e32:	617b      	str	r3, [r7, #20]
                          |BTN_LFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e3c:	f107 0314 	add.w	r3, r7, #20
 8007e40:	4619      	mov	r1, r3
 8007e42:	4806      	ldr	r0, [pc, #24]	@ (8007e5c <MX_GPIO_Init+0x148>)
 8007e44:	f001 fc84 	bl	8009750 <HAL_GPIO_Init>

}
 8007e48:	bf00      	nop
 8007e4a:	3728      	adds	r7, #40	@ 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40023800 	.word	0x40023800
 8007e54:	40020000 	.word	0x40020000
 8007e58:	40020400 	.word	0x40020400
 8007e5c:	40020c00 	.word	0x40020c00

08007e60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007e64:	4b12      	ldr	r3, [pc, #72]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e66:	4a13      	ldr	r2, [pc, #76]	@ (8007eb4 <MX_I2C1_Init+0x54>)
 8007e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007e6a:	4b11      	ldr	r3, [pc, #68]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e6c:	4a12      	ldr	r2, [pc, #72]	@ (8007eb8 <MX_I2C1_Init+0x58>)
 8007e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e70:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007e76:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e84:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e8a:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e90:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e9c:	4804      	ldr	r0, [pc, #16]	@ (8007eb0 <MX_I2C1_Init+0x50>)
 8007e9e:	f001 fe3f 	bl	8009b20 <HAL_I2C_Init>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007ea8:	f000 f8ec 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007eac:	bf00      	nop
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20001eb0 	.word	0x20001eb0
 8007eb4:	40005400 	.word	0x40005400
 8007eb8:	000186a0 	.word	0x000186a0

08007ebc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	@ 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	609a      	str	r2, [r3, #8]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a19      	ldr	r2, [pc, #100]	@ (8007f40 <HAL_I2C_MspInit+0x84>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d12c      	bne.n	8007f38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	4b18      	ldr	r3, [pc, #96]	@ (8007f44 <HAL_I2C_MspInit+0x88>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee6:	4a17      	ldr	r2, [pc, #92]	@ (8007f44 <HAL_I2C_MspInit+0x88>)
 8007ee8:	f043 0302 	orr.w	r3, r3, #2
 8007eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8007eee:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <HAL_I2C_MspInit+0x88>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f00:	2312      	movs	r3, #18
 8007f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f10:	f107 0314 	add.w	r3, r7, #20
 8007f14:	4619      	mov	r1, r3
 8007f16:	480c      	ldr	r0, [pc, #48]	@ (8007f48 <HAL_I2C_MspInit+0x8c>)
 8007f18:	f001 fc1a 	bl	8009750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	4b08      	ldr	r3, [pc, #32]	@ (8007f44 <HAL_I2C_MspInit+0x88>)
 8007f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f24:	4a07      	ldr	r2, [pc, #28]	@ (8007f44 <HAL_I2C_MspInit+0x88>)
 8007f26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <HAL_I2C_MspInit+0x88>)
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007f38:	bf00      	nop
 8007f3a:	3728      	adds	r7, #40	@ 0x28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40005400 	.word	0x40005400
 8007f44:	40023800 	.word	0x40023800
 8007f48:	40020400 	.word	0x40020400

08007f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f50:	f000 fd5c 	bl	8008a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f54:	f000 f818 	bl	8007f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f58:	f7ff fedc 	bl	8007d14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007f5c:	f7ff fe34 	bl	8007bc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8007f60:	f7ff ff7e 	bl	8007e60 <MX_I2C1_Init>
  MX_RTC_Init();
 8007f64:	f000 f894 	bl	8008090 <MX_RTC_Init>
  MX_UART4_Init();
 8007f68:	f000 fb8e 	bl	8008688 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8007f6c:	f000 fbb6 	bl	80086dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007f70:	f000 fbde 	bl	8008730 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8007f74:	f000 fc06 	bl	8008784 <MX_USART6_UART_Init>
  MX_TIM8_Init();
 8007f78:	f000 fb14 	bl	80085a4 <MX_TIM8_Init>
  MX_SPI2_Init();
 8007f7c:	f000 f8d8 	bl	8008130 <MX_SPI2_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 8007f80:	f7ff fec0 	bl	8007d04 <MX_FREERTOS_Init>
  while (1)
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <main+0x38>

08007f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b094      	sub	sp, #80	@ 0x50
 8007f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f8e:	f107 0320 	add.w	r3, r7, #32
 8007f92:	2230      	movs	r2, #48	@ 0x30
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f009 fbc3 	bl	8011722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f9c:	f107 030c 	add.w	r3, r7, #12
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	605a      	str	r2, [r3, #4]
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	60da      	str	r2, [r3, #12]
 8007faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
 8007fb0:	4b29      	ldr	r3, [pc, #164]	@ (8008058 <SystemClock_Config+0xd0>)
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	4a28      	ldr	r2, [pc, #160]	@ (8008058 <SystemClock_Config+0xd0>)
 8007fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fbc:	4b26      	ldr	r3, [pc, #152]	@ (8008058 <SystemClock_Config+0xd0>)
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc4:	60bb      	str	r3, [r7, #8]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fc8:	2300      	movs	r3, #0
 8007fca:	607b      	str	r3, [r7, #4]
 8007fcc:	4b23      	ldr	r3, [pc, #140]	@ (800805c <SystemClock_Config+0xd4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a22      	ldr	r2, [pc, #136]	@ (800805c <SystemClock_Config+0xd4>)
 8007fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b20      	ldr	r3, [pc, #128]	@ (800805c <SystemClock_Config+0xd4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8007fe4:	2306      	movs	r3, #6
 8007fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fec:	2301      	movs	r3, #1
 8007fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008000:	23a8      	movs	r3, #168	@ 0xa8
 8008002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008004:	2302      	movs	r3, #2
 8008006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008008:	2304      	movs	r3, #4
 800800a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800800c:	f107 0320 	add.w	r3, r7, #32
 8008010:	4618      	mov	r0, r3
 8008012:	f002 fead 	bl	800ad70 <HAL_RCC_OscConfig>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800801c:	f000 f832 	bl	8008084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008020:	230f      	movs	r3, #15
 8008022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008024:	2302      	movs	r3, #2
 8008026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800802c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008038:	f107 030c 	add.w	r3, r7, #12
 800803c:	2105      	movs	r1, #5
 800803e:	4618      	mov	r0, r3
 8008040:	f003 f90e 	bl	800b260 <HAL_RCC_ClockConfig>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800804a:	f000 f81b 	bl	8008084 <Error_Handler>
  }
}
 800804e:	bf00      	nop
 8008050:	3750      	adds	r7, #80	@ 0x50
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40023800 	.word	0x40023800
 800805c:	40007000 	.word	0x40007000

08008060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a04      	ldr	r2, [pc, #16]	@ (8008080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008072:	f000 fced 	bl	8008a50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40000400 	.word	0x40000400

08008084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008088:	b672      	cpsid	i
}
 800808a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <Error_Handler+0x8>

08008090 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008094:	4b0f      	ldr	r3, [pc, #60]	@ (80080d4 <MX_RTC_Init+0x44>)
 8008096:	4a10      	ldr	r2, [pc, #64]	@ (80080d8 <MX_RTC_Init+0x48>)
 8008098:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800809a:	4b0e      	ldr	r3, [pc, #56]	@ (80080d4 <MX_RTC_Init+0x44>)
 800809c:	2200      	movs	r2, #0
 800809e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80080a0:	4b0c      	ldr	r3, [pc, #48]	@ (80080d4 <MX_RTC_Init+0x44>)
 80080a2:	227f      	movs	r2, #127	@ 0x7f
 80080a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80080a6:	4b0b      	ldr	r3, [pc, #44]	@ (80080d4 <MX_RTC_Init+0x44>)
 80080a8:	22ff      	movs	r2, #255	@ 0xff
 80080aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80080ac:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <MX_RTC_Init+0x44>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80080b2:	4b08      	ldr	r3, [pc, #32]	@ (80080d4 <MX_RTC_Init+0x44>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80080b8:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <MX_RTC_Init+0x44>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080be:	4805      	ldr	r0, [pc, #20]	@ (80080d4 <MX_RTC_Init+0x44>)
 80080c0:	f003 fbc2 	bl	800b848 <HAL_RTC_Init>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80080ca:	f7ff ffdb 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80080ce:	bf00      	nop
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20001f04 	.word	0x20001f04
 80080d8:	40002800 	.word	0x40002800

080080dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008128 <HAL_RTC_MspInit+0x4c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d111      	bne.n	8008120 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80080fc:	2302      	movs	r3, #2
 80080fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008100:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008104:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008106:	f107 0308 	add.w	r3, r7, #8
 800810a:	4618      	mov	r0, r3
 800810c:	f003 faba 	bl	800b684 <HAL_RCCEx_PeriphCLKConfig>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8008116:	f7ff ffb5 	bl	8008084 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800811a:	4b04      	ldr	r3, [pc, #16]	@ (800812c <HAL_RTC_MspInit+0x50>)
 800811c:	2201      	movs	r2, #1
 800811e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008120:	bf00      	nop
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40002800 	.word	0x40002800
 800812c:	42470e3c 	.word	0x42470e3c

08008130 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8008134:	4b17      	ldr	r3, [pc, #92]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008136:	4a18      	ldr	r2, [pc, #96]	@ (8008198 <MX_SPI2_Init+0x68>)
 8008138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800813a:	4b16      	ldr	r3, [pc, #88]	@ (8008194 <MX_SPI2_Init+0x64>)
 800813c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008142:	4b14      	ldr	r3, [pc, #80]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008144:	2200      	movs	r2, #0
 8008146:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008148:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <MX_SPI2_Init+0x64>)
 800814a:	2200      	movs	r2, #0
 800814c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800814e:	4b11      	ldr	r3, [pc, #68]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008150:	2202      	movs	r2, #2
 8008152:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008154:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008156:	2201      	movs	r2, #1
 8008158:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800815a:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <MX_SPI2_Init+0x64>)
 800815c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008160:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008162:	4b0c      	ldr	r3, [pc, #48]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008164:	2218      	movs	r2, #24
 8008166:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <MX_SPI2_Init+0x64>)
 800816a:	2200      	movs	r2, #0
 800816c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800816e:	4b09      	ldr	r3, [pc, #36]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008170:	2200      	movs	r2, #0
 8008172:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008174:	4b07      	ldr	r3, [pc, #28]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008176:	2200      	movs	r2, #0
 8008178:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <MX_SPI2_Init+0x64>)
 800817c:	220a      	movs	r2, #10
 800817e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008180:	4804      	ldr	r0, [pc, #16]	@ (8008194 <MX_SPI2_Init+0x64>)
 8008182:	f003 fe6d 	bl	800be60 <HAL_SPI_Init>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800818c:	f7ff ff7a 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008190:	bf00      	nop
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20001f24 	.word	0x20001f24
 8008198:	40003800 	.word	0x40003800

0800819c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	@ 0x28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a4:	f107 0314 	add.w	r3, r7, #20
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	609a      	str	r2, [r3, #8]
 80081b0:	60da      	str	r2, [r3, #12]
 80081b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a19      	ldr	r2, [pc, #100]	@ (8008220 <HAL_SPI_MspInit+0x84>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d12c      	bne.n	8008218 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	4b18      	ldr	r3, [pc, #96]	@ (8008224 <HAL_SPI_MspInit+0x88>)
 80081c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c6:	4a17      	ldr	r2, [pc, #92]	@ (8008224 <HAL_SPI_MspInit+0x88>)
 80081c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80081ce:	4b15      	ldr	r3, [pc, #84]	@ (8008224 <HAL_SPI_MspInit+0x88>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	4b11      	ldr	r3, [pc, #68]	@ (8008224 <HAL_SPI_MspInit+0x88>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e2:	4a10      	ldr	r2, [pc, #64]	@ (8008224 <HAL_SPI_MspInit+0x88>)
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80081ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <HAL_SPI_MspInit+0x88>)
 80081ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80081f6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80081fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081fc:	2302      	movs	r3, #2
 80081fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008204:	2303      	movs	r3, #3
 8008206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008208:	2305      	movs	r3, #5
 800820a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4619      	mov	r1, r3
 8008212:	4805      	ldr	r0, [pc, #20]	@ (8008228 <HAL_SPI_MspInit+0x8c>)
 8008214:	f001 fa9c 	bl	8009750 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008218:	bf00      	nop
 800821a:	3728      	adds	r7, #40	@ 0x28
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40003800 	.word	0x40003800
 8008224:	40023800 	.word	0x40023800
 8008228:	40020400 	.word	0x40020400

0800822c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008232:	2300      	movs	r3, #0
 8008234:	607b      	str	r3, [r7, #4]
 8008236:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <HAL_MspInit+0x54>)
 8008238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823a:	4a11      	ldr	r2, [pc, #68]	@ (8008280 <HAL_MspInit+0x54>)
 800823c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008240:	6453      	str	r3, [r2, #68]	@ 0x44
 8008242:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <HAL_MspInit+0x54>)
 8008244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800824a:	607b      	str	r3, [r7, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800824e:	2300      	movs	r3, #0
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4b0b      	ldr	r3, [pc, #44]	@ (8008280 <HAL_MspInit+0x54>)
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	4a0a      	ldr	r2, [pc, #40]	@ (8008280 <HAL_MspInit+0x54>)
 8008258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800825c:	6413      	str	r3, [r2, #64]	@ 0x40
 800825e:	4b08      	ldr	r3, [pc, #32]	@ (8008280 <HAL_MspInit+0x54>)
 8008260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800826a:	2200      	movs	r2, #0
 800826c:	210f      	movs	r1, #15
 800826e:	f06f 0001 	mvn.w	r0, #1
 8008272:	f001 fa21 	bl	80096b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40023800 	.word	0x40023800

08008284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08e      	sub	sp, #56	@ 0x38
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	4b33      	ldr	r3, [pc, #204]	@ (8008368 <HAL_InitTick+0xe4>)
 800829a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829c:	4a32      	ldr	r2, [pc, #200]	@ (8008368 <HAL_InitTick+0xe4>)
 800829e:	f043 0302 	orr.w	r3, r3, #2
 80082a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80082a4:	4b30      	ldr	r3, [pc, #192]	@ (8008368 <HAL_InitTick+0xe4>)
 80082a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80082b0:	f107 0210 	add.w	r2, r7, #16
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f003 f9b0 	bl	800b620 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80082c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d103      	bne.n	80082d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80082ca:	f003 f981 	bl	800b5d0 <HAL_RCC_GetPCLK1Freq>
 80082ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80082d0:	e004      	b.n	80082dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80082d2:	f003 f97d 	bl	800b5d0 <HAL_RCC_GetPCLK1Freq>
 80082d6:	4603      	mov	r3, r0
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80082dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082de:	4a23      	ldr	r2, [pc, #140]	@ (800836c <HAL_InitTick+0xe8>)
 80082e0:	fba2 2303 	umull	r2, r3, r2, r3
 80082e4:	0c9b      	lsrs	r3, r3, #18
 80082e6:	3b01      	subs	r3, #1
 80082e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80082ea:	4b21      	ldr	r3, [pc, #132]	@ (8008370 <HAL_InitTick+0xec>)
 80082ec:	4a21      	ldr	r2, [pc, #132]	@ (8008374 <HAL_InitTick+0xf0>)
 80082ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80082f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008370 <HAL_InitTick+0xec>)
 80082f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80082f6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80082f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008370 <HAL_InitTick+0xec>)
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80082fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008370 <HAL_InitTick+0xec>)
 8008300:	2200      	movs	r2, #0
 8008302:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008304:	4b1a      	ldr	r3, [pc, #104]	@ (8008370 <HAL_InitTick+0xec>)
 8008306:	2200      	movs	r2, #0
 8008308:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800830a:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <HAL_InitTick+0xec>)
 800830c:	2200      	movs	r2, #0
 800830e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8008310:	4817      	ldr	r0, [pc, #92]	@ (8008370 <HAL_InitTick+0xec>)
 8008312:	f004 f84f 	bl	800c3b4 <HAL_TIM_Base_Init>
 8008316:	4603      	mov	r3, r0
 8008318:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800831c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11b      	bne.n	800835c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8008324:	4812      	ldr	r0, [pc, #72]	@ (8008370 <HAL_InitTick+0xec>)
 8008326:	f004 f895 	bl	800c454 <HAL_TIM_Base_Start_IT>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8008330:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008334:	2b00      	cmp	r3, #0
 8008336:	d111      	bne.n	800835c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008338:	201d      	movs	r0, #29
 800833a:	f001 f9d9 	bl	80096f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b0f      	cmp	r3, #15
 8008342:	d808      	bhi.n	8008356 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8008344:	2200      	movs	r2, #0
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	201d      	movs	r0, #29
 800834a:	f001 f9b5 	bl	80096b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800834e:	4a0a      	ldr	r2, [pc, #40]	@ (8008378 <HAL_InitTick+0xf4>)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	e002      	b.n	800835c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800835c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8008360:	4618      	mov	r0, r3
 8008362:	3738      	adds	r7, #56	@ 0x38
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40023800 	.word	0x40023800
 800836c:	431bde83 	.word	0x431bde83
 8008370:	20001f7c 	.word	0x20001f7c
 8008374:	40000400 	.word	0x40000400
 8008378:	20000284 	.word	0x20000284

0800837c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <NMI_Handler+0x4>

08008384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <HardFault_Handler+0x4>

0800838c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <MemManage_Handler+0x4>

08008394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <BusFault_Handler+0x4>

0800839c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <UsageFault_Handler+0x4>

080083a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083a8:	bf00      	nop
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
	...

080083b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80083b8:	4802      	ldr	r0, [pc, #8]	@ (80083c4 <ADC_IRQHandler+0x10>)
 80083ba:	f000 fd61 	bl	8008e80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20001e68 	.word	0x20001e68

080083c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80083cc:	4803      	ldr	r0, [pc, #12]	@ (80083dc <TIM3_IRQHandler+0x14>)
 80083ce:	f004 f8b1 	bl	800c534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  My_Button_IRQHandlerC();
 80083d2:	f7fd fca1 	bl	8005d18 <My_Button_IRQHandlerC>
  /* USER CODE END TIM3_IRQn 1 */
}
 80083d6:	bf00      	nop
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20001f7c 	.word	0x20001f7c

080083e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 80083e4:	4802      	ldr	r0, [pc, #8]	@ (80083f0 <USART2_IRQHandler+0x10>)
 80083e6:	f7fc fa49 	bl	800487c <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 80083ea:	bf00      	nop
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200020a0 	.word	0x200020a0

080083f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  return 1;
 80083f8:	2301      	movs	r3, #1
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <_kill>:

int _kill(int pid, int sig)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800840e:	f009 fa67 	bl	80118e0 <__errno>
 8008412:	4603      	mov	r3, r0
 8008414:	2216      	movs	r2, #22
 8008416:	601a      	str	r2, [r3, #0]
  return -1;
 8008418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <_exit>:

void _exit (int status)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800842c:	f04f 31ff 	mov.w	r1, #4294967295
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff ffe7 	bl	8008404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <_exit+0x12>

0800843a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e00a      	b.n	8008462 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800844c:	f3af 8000 	nop.w
 8008450:	4601      	mov	r1, r0
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	60ba      	str	r2, [r7, #8]
 8008458:	b2ca      	uxtb	r2, r1
 800845a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	3301      	adds	r3, #1
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	dbf0      	blt.n	800844c <_read+0x12>
  }

  return len;
 800846a:	687b      	ldr	r3, [r7, #4]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	e009      	b.n	800849a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	60ba      	str	r2, [r7, #8]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3301      	adds	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	dbf1      	blt.n	8008486 <_write+0x12>
  }
  return len;
 80084a2:	687b      	ldr	r3, [r7, #4]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <_close>:

int _close(int file)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80084d4:	605a      	str	r2, [r3, #4]
  return 0;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <_isatty>:

int _isatty(int file)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80084ec:	2301      	movs	r3, #1
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800851c:	4a14      	ldr	r2, [pc, #80]	@ (8008570 <_sbrk+0x5c>)
 800851e:	4b15      	ldr	r3, [pc, #84]	@ (8008574 <_sbrk+0x60>)
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008528:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <_sbrk+0x64>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008530:	4b11      	ldr	r3, [pc, #68]	@ (8008578 <_sbrk+0x64>)
 8008532:	4a12      	ldr	r2, [pc, #72]	@ (800857c <_sbrk+0x68>)
 8008534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008536:	4b10      	ldr	r3, [pc, #64]	@ (8008578 <_sbrk+0x64>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	429a      	cmp	r2, r3
 8008542:	d207      	bcs.n	8008554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008544:	f009 f9cc 	bl	80118e0 <__errno>
 8008548:	4603      	mov	r3, r0
 800854a:	220c      	movs	r2, #12
 800854c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800854e:	f04f 33ff 	mov.w	r3, #4294967295
 8008552:	e009      	b.n	8008568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008554:	4b08      	ldr	r3, [pc, #32]	@ (8008578 <_sbrk+0x64>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800855a:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <_sbrk+0x64>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	4a05      	ldr	r2, [pc, #20]	@ (8008578 <_sbrk+0x64>)
 8008564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20020000 	.word	0x20020000
 8008574:	00000400 	.word	0x00000400
 8008578:	20001fc4 	.word	0x20001fc4
 800857c:	2000cca8 	.word	0x2000cca8

08008580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008584:	4b06      	ldr	r3, [pc, #24]	@ (80085a0 <SystemInit+0x20>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858a:	4a05      	ldr	r2, [pc, #20]	@ (80085a0 <SystemInit+0x20>)
 800858c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008594:	bf00      	nop
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	e000ed00 	.word	0xe000ed00

080085a4 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085aa:	f107 0308 	add.w	r3, r7, #8
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	609a      	str	r2, [r3, #8]
 80085b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085b8:	463b      	mov	r3, r7
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80085c0:	4b1e      	ldr	r3, [pc, #120]	@ (800863c <MX_TIM8_Init+0x98>)
 80085c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008640 <MX_TIM8_Init+0x9c>)
 80085c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80085c6:	4b1d      	ldr	r3, [pc, #116]	@ (800863c <MX_TIM8_Init+0x98>)
 80085c8:	22a7      	movs	r2, #167	@ 0xa7
 80085ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085cc:	4b1b      	ldr	r3, [pc, #108]	@ (800863c <MX_TIM8_Init+0x98>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 80085d2:	4b1a      	ldr	r3, [pc, #104]	@ (800863c <MX_TIM8_Init+0x98>)
 80085d4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80085d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085da:	4b18      	ldr	r3, [pc, #96]	@ (800863c <MX_TIM8_Init+0x98>)
 80085dc:	2200      	movs	r2, #0
 80085de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80085e0:	4b16      	ldr	r3, [pc, #88]	@ (800863c <MX_TIM8_Init+0x98>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085e6:	4b15      	ldr	r3, [pc, #84]	@ (800863c <MX_TIM8_Init+0x98>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80085ec:	4813      	ldr	r0, [pc, #76]	@ (800863c <MX_TIM8_Init+0x98>)
 80085ee:	f003 fee1 	bl	800c3b4 <HAL_TIM_Base_Init>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80085f8:	f7ff fd44 	bl	8008084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008602:	f107 0308 	add.w	r3, r7, #8
 8008606:	4619      	mov	r1, r3
 8008608:	480c      	ldr	r0, [pc, #48]	@ (800863c <MX_TIM8_Init+0x98>)
 800860a:	f004 f883 	bl	800c714 <HAL_TIM_ConfigClockSource>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8008614:	f7ff fd36 	bl	8008084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008618:	2320      	movs	r3, #32
 800861a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800861c:	2300      	movs	r3, #0
 800861e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008620:	463b      	mov	r3, r7
 8008622:	4619      	mov	r1, r3
 8008624:	4805      	ldr	r0, [pc, #20]	@ (800863c <MX_TIM8_Init+0x98>)
 8008626:	f004 faab 	bl	800cb80 <HAL_TIMEx_MasterConfigSynchronization>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8008630:	f7ff fd28 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008634:	bf00      	nop
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20001fc8 	.word	0x20001fc8
 8008640:	40010400 	.word	0x40010400

08008644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0b      	ldr	r2, [pc, #44]	@ (8008680 <HAL_TIM_Base_MspInit+0x3c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d10d      	bne.n	8008672 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <HAL_TIM_Base_MspInit+0x40>)
 800865c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865e:	4a09      	ldr	r2, [pc, #36]	@ (8008684 <HAL_TIM_Base_MspInit+0x40>)
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	6453      	str	r3, [r2, #68]	@ 0x44
 8008666:	4b07      	ldr	r3, [pc, #28]	@ (8008684 <HAL_TIM_Base_MspInit+0x40>)
 8008668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40010400 	.word	0x40010400
 8008684:	40023800 	.word	0x40023800

08008688 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800868c:	4b11      	ldr	r3, [pc, #68]	@ (80086d4 <MX_UART4_Init+0x4c>)
 800868e:	4a12      	ldr	r2, [pc, #72]	@ (80086d8 <MX_UART4_Init+0x50>)
 8008690:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <MX_UART4_Init+0x4c>)
 8008694:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008698:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800869a:	4b0e      	ldr	r3, [pc, #56]	@ (80086d4 <MX_UART4_Init+0x4c>)
 800869c:	2200      	movs	r2, #0
 800869e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80086a0:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <MX_UART4_Init+0x4c>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80086a6:	4b0b      	ldr	r3, [pc, #44]	@ (80086d4 <MX_UART4_Init+0x4c>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80086ac:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <MX_UART4_Init+0x4c>)
 80086ae:	220c      	movs	r2, #12
 80086b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086b2:	4b08      	ldr	r3, [pc, #32]	@ (80086d4 <MX_UART4_Init+0x4c>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80086b8:	4b06      	ldr	r3, [pc, #24]	@ (80086d4 <MX_UART4_Init+0x4c>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80086be:	4805      	ldr	r0, [pc, #20]	@ (80086d4 <MX_UART4_Init+0x4c>)
 80086c0:	f004 faee 	bl	800cca0 <HAL_UART_Init>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80086ca:	f7ff fcdb 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80086ce:	bf00      	nop
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20002010 	.word	0x20002010
 80086d8:	40004c00 	.word	0x40004c00

080086dc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086e0:	4b11      	ldr	r3, [pc, #68]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 80086e2:	4a12      	ldr	r2, [pc, #72]	@ (800872c <MX_USART1_UART_Init+0x50>)
 80086e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80086e6:	4b10      	ldr	r3, [pc, #64]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 80086e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80086ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008700:	4b09      	ldr	r3, [pc, #36]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 8008702:	220c      	movs	r2, #12
 8008704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008706:	4b08      	ldr	r3, [pc, #32]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 8008708:	2200      	movs	r2, #0
 800870a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800870c:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 800870e:	2200      	movs	r2, #0
 8008710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008712:	4805      	ldr	r0, [pc, #20]	@ (8008728 <MX_USART1_UART_Init+0x4c>)
 8008714:	f004 fac4 	bl	800cca0 <HAL_UART_Init>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800871e:	f7ff fcb1 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20002058 	.word	0x20002058
 800872c:	40011000 	.word	0x40011000

08008730 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008734:	4b11      	ldr	r3, [pc, #68]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 8008736:	4a12      	ldr	r2, [pc, #72]	@ (8008780 <MX_USART2_UART_Init+0x50>)
 8008738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800873a:	4b10      	ldr	r3, [pc, #64]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 800873c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008742:	4b0e      	ldr	r3, [pc, #56]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008748:	4b0c      	ldr	r3, [pc, #48]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800874e:	4b0b      	ldr	r3, [pc, #44]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 8008750:	2200      	movs	r2, #0
 8008752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008754:	4b09      	ldr	r3, [pc, #36]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 8008756:	220c      	movs	r2, #12
 8008758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800875a:	4b08      	ldr	r3, [pc, #32]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 800875c:	2200      	movs	r2, #0
 800875e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008760:	4b06      	ldr	r3, [pc, #24]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 8008762:	2200      	movs	r2, #0
 8008764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008766:	4805      	ldr	r0, [pc, #20]	@ (800877c <MX_USART2_UART_Init+0x4c>)
 8008768:	f004 fa9a 	bl	800cca0 <HAL_UART_Init>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008772:	f7ff fc87 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200020a0 	.word	0x200020a0
 8008780:	40004400 	.word	0x40004400

08008784 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008788:	4b11      	ldr	r3, [pc, #68]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 800878a:	4a12      	ldr	r2, [pc, #72]	@ (80087d4 <MX_USART6_UART_Init+0x50>)
 800878c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800878e:	4b10      	ldr	r3, [pc, #64]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 8008790:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008794:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008796:	4b0e      	ldr	r3, [pc, #56]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800879c:	4b0c      	ldr	r3, [pc, #48]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80087a8:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 80087aa:	220c      	movs	r2, #12
 80087ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087ae:	4b08      	ldr	r3, [pc, #32]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80087b4:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80087ba:	4805      	ldr	r0, [pc, #20]	@ (80087d0 <MX_USART6_UART_Init+0x4c>)
 80087bc:	f004 fa70 	bl	800cca0 <HAL_UART_Init>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80087c6:	f7ff fc5d 	bl	8008084 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80087ca:	bf00      	nop
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200020e8 	.word	0x200020e8
 80087d4:	40011400 	.word	0x40011400

080087d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b090      	sub	sp, #64	@ 0x40
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	605a      	str	r2, [r3, #4]
 80087ea:	609a      	str	r2, [r3, #8]
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a69      	ldr	r2, [pc, #420]	@ (800899c <HAL_UART_MspInit+0x1c4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d12d      	bne.n	8008856 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80087fa:	2300      	movs	r3, #0
 80087fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087fe:	4b68      	ldr	r3, [pc, #416]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	4a67      	ldr	r2, [pc, #412]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008808:	6413      	str	r3, [r2, #64]	@ 0x40
 800880a:	4b65      	ldr	r3, [pc, #404]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008812:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	@ 0x24
 800881a:	4b61      	ldr	r3, [pc, #388]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881e:	4a60      	ldr	r2, [pc, #384]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008820:	f043 0304 	orr.w	r3, r3, #4
 8008824:	6313      	str	r3, [r2, #48]	@ 0x30
 8008826:	4b5e      	ldr	r3, [pc, #376]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 8008832:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008838:	2302      	movs	r3, #2
 800883a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800883c:	2300      	movs	r3, #0
 800883e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008840:	2303      	movs	r3, #3
 8008842:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008844:	2308      	movs	r3, #8
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800884c:	4619      	mov	r1, r3
 800884e:	4855      	ldr	r0, [pc, #340]	@ (80089a4 <HAL_UART_MspInit+0x1cc>)
 8008850:	f000 ff7e 	bl	8009750 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008854:	e09d      	b.n	8008992 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART1)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a53      	ldr	r2, [pc, #332]	@ (80089a8 <HAL_UART_MspInit+0x1d0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d12d      	bne.n	80088bc <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008860:	2300      	movs	r3, #0
 8008862:	623b      	str	r3, [r7, #32]
 8008864:	4b4e      	ldr	r3, [pc, #312]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008868:	4a4d      	ldr	r2, [pc, #308]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 800886a:	f043 0310 	orr.w	r3, r3, #16
 800886e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008870:	4b4b      	ldr	r3, [pc, #300]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	623b      	str	r3, [r7, #32]
 800887a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800887c:	2300      	movs	r3, #0
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	4b47      	ldr	r3, [pc, #284]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008884:	4a46      	ldr	r2, [pc, #280]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	6313      	str	r3, [r2, #48]	@ 0x30
 800888c:	4b44      	ldr	r3, [pc, #272]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 800888e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	61fb      	str	r3, [r7, #28]
 8008896:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 8008898:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800889c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800889e:	2302      	movs	r3, #2
 80088a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a6:	2303      	movs	r3, #3
 80088a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80088aa:	2307      	movs	r3, #7
 80088ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088b2:	4619      	mov	r1, r3
 80088b4:	483d      	ldr	r0, [pc, #244]	@ (80089ac <HAL_UART_MspInit+0x1d4>)
 80088b6:	f000 ff4b 	bl	8009750 <HAL_GPIO_Init>
}
 80088ba:	e06a      	b.n	8008992 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a3b      	ldr	r2, [pc, #236]	@ (80089b0 <HAL_UART_MspInit+0x1d8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d134      	bne.n	8008930 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 80088c6:	2300      	movs	r3, #0
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	4b35      	ldr	r3, [pc, #212]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ce:	4a34      	ldr	r2, [pc, #208]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 80088d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80088d6:	4b32      	ldr	r3, [pc, #200]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088de:	61bb      	str	r3, [r7, #24]
 80088e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	4b2e      	ldr	r3, [pc, #184]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ea:	4a2d      	ldr	r2, [pc, #180]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80088f2:	4b2b      	ldr	r3, [pc, #172]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 80088fe:	230c      	movs	r3, #12
 8008900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008902:	2302      	movs	r3, #2
 8008904:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008906:	2300      	movs	r3, #0
 8008908:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800890a:	2303      	movs	r3, #3
 800890c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800890e:	2307      	movs	r3, #7
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008916:	4619      	mov	r1, r3
 8008918:	4824      	ldr	r0, [pc, #144]	@ (80089ac <HAL_UART_MspInit+0x1d4>)
 800891a:	f000 ff19 	bl	8009750 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800891e:	2200      	movs	r2, #0
 8008920:	2105      	movs	r1, #5
 8008922:	2026      	movs	r0, #38	@ 0x26
 8008924:	f000 fec8 	bl	80096b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008928:	2026      	movs	r0, #38	@ 0x26
 800892a:	f000 fee1 	bl	80096f0 <HAL_NVIC_EnableIRQ>
}
 800892e:	e030      	b.n	8008992 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART6)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1f      	ldr	r2, [pc, #124]	@ (80089b4 <HAL_UART_MspInit+0x1dc>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d12b      	bne.n	8008992 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART6_CLK_ENABLE();
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	4b18      	ldr	r3, [pc, #96]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008942:	4a17      	ldr	r2, [pc, #92]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008944:	f043 0320 	orr.w	r3, r3, #32
 8008948:	6453      	str	r3, [r2, #68]	@ 0x44
 800894a:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 800894c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	4b11      	ldr	r3, [pc, #68]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895e:	4a10      	ldr	r2, [pc, #64]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008960:	f043 0304 	orr.w	r3, r3, #4
 8008964:	6313      	str	r3, [r2, #48]	@ 0x30
 8008966:	4b0e      	ldr	r3, [pc, #56]	@ (80089a0 <HAL_UART_MspInit+0x1c8>)
 8008968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 8008972:	23c0      	movs	r3, #192	@ 0xc0
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008976:	2302      	movs	r3, #2
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897a:	2300      	movs	r3, #0
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800897e:	2303      	movs	r3, #3
 8008980:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008982:	2308      	movs	r3, #8
 8008984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800898a:	4619      	mov	r1, r3
 800898c:	4805      	ldr	r0, [pc, #20]	@ (80089a4 <HAL_UART_MspInit+0x1cc>)
 800898e:	f000 fedf 	bl	8009750 <HAL_GPIO_Init>
}
 8008992:	bf00      	nop
 8008994:	3740      	adds	r7, #64	@ 0x40
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	40004c00 	.word	0x40004c00
 80089a0:	40023800 	.word	0x40023800
 80089a4:	40020800 	.word	0x40020800
 80089a8:	40011000 	.word	0x40011000
 80089ac:	40020000 	.word	0x40020000
 80089b0:	40004400 	.word	0x40004400
 80089b4:	40011400 	.word	0x40011400

080089b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80089b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80089f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80089bc:	f7ff fde0 	bl	8008580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80089c0:	480c      	ldr	r0, [pc, #48]	@ (80089f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80089c2:	490d      	ldr	r1, [pc, #52]	@ (80089f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80089c4:	4a0d      	ldr	r2, [pc, #52]	@ (80089fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80089c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089c8:	e002      	b.n	80089d0 <LoopCopyDataInit>

080089ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089ce:	3304      	adds	r3, #4

080089d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089d4:	d3f9      	bcc.n	80089ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80089d8:	4c0a      	ldr	r4, [pc, #40]	@ (8008a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80089da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089dc:	e001      	b.n	80089e2 <LoopFillZerobss>

080089de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089e0:	3204      	adds	r2, #4

080089e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089e4:	d3fb      	bcc.n	80089de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80089e6:	f008 ff81 	bl	80118ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80089ea:	f7ff faaf 	bl	8007f4c <main>
  bx  lr    
 80089ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80089f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80089f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089f8:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 80089fc:	080155d0 	.word	0x080155d0
  ldr r2, =_sbss
 8008a00:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8008a04:	2000cca4 	.word	0x2000cca4

08008a08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a08:	e7fe      	b.n	8008a08 <CAN1_RX0_IRQHandler>
	...

08008a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a10:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <HAL_Init+0x40>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a0d      	ldr	r2, [pc, #52]	@ (8008a4c <HAL_Init+0x40>)
 8008a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <HAL_Init+0x40>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	@ (8008a4c <HAL_Init+0x40>)
 8008a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a28:	4b08      	ldr	r3, [pc, #32]	@ (8008a4c <HAL_Init+0x40>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a07      	ldr	r2, [pc, #28]	@ (8008a4c <HAL_Init+0x40>)
 8008a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a34:	2003      	movs	r0, #3
 8008a36:	f000 fe34 	bl	80096a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a3a:	200f      	movs	r0, #15
 8008a3c:	f7ff fc22 	bl	8008284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008a40:	f7ff fbf4 	bl	800822c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40023c00 	.word	0x40023c00

08008a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a54:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <HAL_IncTick+0x20>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <HAL_IncTick+0x24>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4413      	add	r3, r2
 8008a60:	4a04      	ldr	r2, [pc, #16]	@ (8008a74 <HAL_IncTick+0x24>)
 8008a62:	6013      	str	r3, [r2, #0]
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000288 	.word	0x20000288
 8008a74:	20002130 	.word	0x20002130

08008a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8008a7c:	4b03      	ldr	r3, [pc, #12]	@ (8008a8c <HAL_GetTick+0x14>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20002130 	.word	0x20002130

08008a90 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8008a94:	4b03      	ldr	r3, [pc, #12]	@ (8008aa4 <HAL_GetUIDw0+0x14>)
 8008a96:	681b      	ldr	r3, [r3, #0]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	1fff7a10 	.word	0x1fff7a10

08008aa8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8008aac:	4b03      	ldr	r3, [pc, #12]	@ (8008abc <HAL_GetUIDw1+0x14>)
 8008aae:	681b      	ldr	r3, [r3, #0]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	1fff7a14 	.word	0x1fff7a14

08008ac0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8008ac4:	4b03      	ldr	r3, [pc, #12]	@ (8008ad4 <HAL_GetUIDw2+0x14>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	1fff7a18 	.word	0x1fff7a18

08008ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e033      	b.n	8008b56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff f8b8 	bl	8007c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d118      	bne.n	8008b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008b1e:	f023 0302 	bic.w	r3, r3, #2
 8008b22:	f043 0202 	orr.w	r2, r3, #2
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fc06 	bl	800933c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	f043 0201 	orr.w	r2, r3, #1
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	641a      	str	r2, [r3, #64]	@ 0x40
 8008b46:	e001      	b.n	8008b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <HAL_ADC_Start+0x1a>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e0b2      	b.n	8008ce0 <HAL_ADC_Start+0x180>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d018      	beq.n	8008bc2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0201 	orr.w	r2, r2, #1
 8008b9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008ba0:	4b52      	ldr	r3, [pc, #328]	@ (8008cec <HAL_ADC_Start+0x18c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a52      	ldr	r2, [pc, #328]	@ (8008cf0 <HAL_ADC_Start+0x190>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	0c9a      	lsrs	r2, r3, #18
 8008bac:	4613      	mov	r3, r2
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008bb4:	e002      	b.n	8008bbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f9      	bne.n	8008bb6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d17a      	bne.n	8008cc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008bfa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c0e:	d106      	bne.n	8008c1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c14:	f023 0206 	bic.w	r2, r3, #6
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c1c:	e002      	b.n	8008c24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008c2c:	4b31      	ldr	r3, [pc, #196]	@ (8008cf4 <HAL_ADC_Start+0x194>)
 8008c2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008c38:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f003 031f 	and.w	r3, r3, #31
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d12a      	bne.n	8008c9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8008cf8 <HAL_ADC_Start+0x198>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d015      	beq.n	8008c7c <HAL_ADC_Start+0x11c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a29      	ldr	r2, [pc, #164]	@ (8008cfc <HAL_ADC_Start+0x19c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d105      	bne.n	8008c66 <HAL_ADC_Start+0x106>
 8008c5a:	4b26      	ldr	r3, [pc, #152]	@ (8008cf4 <HAL_ADC_Start+0x194>)
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a25      	ldr	r2, [pc, #148]	@ (8008d00 <HAL_ADC_Start+0x1a0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d136      	bne.n	8008cde <HAL_ADC_Start+0x17e>
 8008c70:	4b20      	ldr	r3, [pc, #128]	@ (8008cf4 <HAL_ADC_Start+0x194>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d130      	bne.n	8008cde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d129      	bne.n	8008cde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008c98:	609a      	str	r2, [r3, #8]
 8008c9a:	e020      	b.n	8008cde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a15      	ldr	r2, [pc, #84]	@ (8008cf8 <HAL_ADC_Start+0x198>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d11b      	bne.n	8008cde <HAL_ADC_Start+0x17e>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d114      	bne.n	8008cde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	e00b      	b.n	8008cde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cca:	f043 0210 	orr.w	r2, r3, #16
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd6:	f043 0201 	orr.w	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	20000280 	.word	0x20000280
 8008cf0:	431bde83 	.word	0x431bde83
 8008cf4:	40012300 	.word	0x40012300
 8008cf8:	40012000 	.word	0x40012000
 8008cfc:	40012100 	.word	0x40012100
 8008d00:	40012200 	.word	0x40012200

08008d04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_ADC_Stop+0x16>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e021      	b.n	8008d5e <HAL_ADC_Stop+0x5a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008d48:	f023 0301 	bic.w	r3, r3, #1
 8008d4c:	f043 0201 	orr.w	r2, r3, #1
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d86:	d113      	bne.n	8008db0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d96:	d10b      	bne.n	8008db0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9c:	f043 0220 	orr.w	r2, r3, #32
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e063      	b.n	8008e78 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008db0:	f7ff fe62 	bl	8008a78 <HAL_GetTick>
 8008db4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008db6:	e021      	b.n	8008dfc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbe:	d01d      	beq.n	8008dfc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <HAL_ADC_PollForConversion+0x6c>
 8008dc6:	f7ff fe57 	bl	8008a78 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d212      	bcs.n	8008dfc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d00b      	beq.n	8008dfc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de8:	f043 0204 	orr.w	r2, r3, #4
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e03d      	b.n	8008e78 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d1d6      	bne.n	8008db8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0212 	mvn.w	r2, #18
 8008e12:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d123      	bne.n	8008e76 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d11f      	bne.n	8008e76 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d006      	beq.n	8008e52 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d111      	bne.n	8008e76 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	f043 0201 	orr.w	r2, r3, #1
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d049      	beq.n	8008f4a <HAL_ADC_IRQHandler+0xca>
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d046      	beq.n	8008f4a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d105      	bne.n	8008ed4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d12b      	bne.n	8008f3a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d127      	bne.n	8008f3a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d006      	beq.n	8008f06 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d119      	bne.n	8008f3a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0220 	bic.w	r2, r2, #32
 8008f14:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	f043 0201 	orr.w	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f8bd 	bl	80090ba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0212 	mvn.w	r2, #18
 8008f48:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f58:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d057      	beq.n	8009010 <HAL_ADC_IRQHandler+0x190>
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d054      	beq.n	8009010 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d105      	bne.n	8008f7e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f76:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d139      	bne.n	8009000 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d12b      	bne.n	8009000 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d124      	bne.n	8009000 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d11d      	bne.n	8009000 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d119      	bne.n	8009000 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fda:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff8:	f043 0201 	orr.w	r2, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fa97 	bl	8009534 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f06f 020c 	mvn.w	r2, #12
 800900e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d017      	beq.n	8009056 <HAL_ADC_IRQHandler+0x1d6>
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d014      	beq.n	8009056 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b01      	cmp	r3, #1
 8009038:	d10d      	bne.n	8009056 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f841 	bl	80090ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0201 	mvn.w	r2, #1
 8009054:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009064:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d015      	beq.n	8009098 <HAL_ADC_IRQHandler+0x218>
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d012      	beq.n	8009098 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009076:	f043 0202 	orr.w	r2, r3, #2
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f06f 0220 	mvn.w	r2, #32
 8009086:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f82a 	bl	80090e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f06f 0220 	mvn.w	r2, #32
 8009096:	601a      	str	r2, [r3, #0]
  }
}
 8009098:	bf00      	nop
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_ADC_ConfigChannel+0x1c>
 8009110:	2302      	movs	r3, #2
 8009112:	e105      	b.n	8009320 <HAL_ADC_ConfigChannel+0x228>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b09      	cmp	r3, #9
 8009122:	d925      	bls.n	8009170 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68d9      	ldr	r1, [r3, #12]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	4613      	mov	r3, r2
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	4413      	add	r3, r2
 8009138:	3b1e      	subs	r3, #30
 800913a:	2207      	movs	r2, #7
 800913c:	fa02 f303 	lsl.w	r3, r2, r3
 8009140:	43da      	mvns	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	400a      	ands	r2, r1
 8009148:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68d9      	ldr	r1, [r3, #12]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	4618      	mov	r0, r3
 800915c:	4603      	mov	r3, r0
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	4403      	add	r3, r0
 8009162:	3b1e      	subs	r3, #30
 8009164:	409a      	lsls	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	60da      	str	r2, [r3, #12]
 800916e:	e022      	b.n	80091b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6919      	ldr	r1, [r3, #16]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	4613      	mov	r3, r2
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	2207      	movs	r2, #7
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	43da      	mvns	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	400a      	ands	r2, r1
 8009192:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6919      	ldr	r1, [r3, #16]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	4618      	mov	r0, r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4403      	add	r3, r0
 80091ac:	409a      	lsls	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	2b06      	cmp	r3, #6
 80091bc:	d824      	bhi.n	8009208 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	3b05      	subs	r3, #5
 80091d0:	221f      	movs	r2, #31
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	43da      	mvns	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	400a      	ands	r2, r1
 80091de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	4618      	mov	r0, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	3b05      	subs	r3, #5
 80091fa:	fa00 f203 	lsl.w	r2, r0, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	635a      	str	r2, [r3, #52]	@ 0x34
 8009206:	e04c      	b.n	80092a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2b0c      	cmp	r3, #12
 800920e:	d824      	bhi.n	800925a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	3b23      	subs	r3, #35	@ 0x23
 8009222:	221f      	movs	r2, #31
 8009224:	fa02 f303 	lsl.w	r3, r2, r3
 8009228:	43da      	mvns	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	400a      	ands	r2, r1
 8009230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	4618      	mov	r0, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	3b23      	subs	r3, #35	@ 0x23
 800924c:	fa00 f203 	lsl.w	r2, r0, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	631a      	str	r2, [r3, #48]	@ 0x30
 8009258:	e023      	b.n	80092a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	3b41      	subs	r3, #65	@ 0x41
 800926c:	221f      	movs	r2, #31
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	43da      	mvns	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	400a      	ands	r2, r1
 800927a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	4618      	mov	r0, r3
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	3b41      	subs	r3, #65	@ 0x41
 8009296:	fa00 f203 	lsl.w	r2, r0, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092a2:	4b22      	ldr	r3, [pc, #136]	@ (800932c <HAL_ADC_ConfigChannel+0x234>)
 80092a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a21      	ldr	r2, [pc, #132]	@ (8009330 <HAL_ADC_ConfigChannel+0x238>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d109      	bne.n	80092c4 <HAL_ADC_ConfigChannel+0x1cc>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b12      	cmp	r3, #18
 80092b6:	d105      	bne.n	80092c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a19      	ldr	r2, [pc, #100]	@ (8009330 <HAL_ADC_ConfigChannel+0x238>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d123      	bne.n	8009316 <HAL_ADC_ConfigChannel+0x21e>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b10      	cmp	r3, #16
 80092d4:	d003      	beq.n	80092de <HAL_ADC_ConfigChannel+0x1e6>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b11      	cmp	r3, #17
 80092dc:	d11b      	bne.n	8009316 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b10      	cmp	r3, #16
 80092f0:	d111      	bne.n	8009316 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092f2:	4b10      	ldr	r3, [pc, #64]	@ (8009334 <HAL_ADC_ConfigChannel+0x23c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a10      	ldr	r2, [pc, #64]	@ (8009338 <HAL_ADC_ConfigChannel+0x240>)
 80092f8:	fba2 2303 	umull	r2, r3, r2, r3
 80092fc:	0c9a      	lsrs	r2, r3, #18
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8009308:	e002      	b.n	8009310 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	3b01      	subs	r3, #1
 800930e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f9      	bne.n	800930a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	40012300 	.word	0x40012300
 8009330:	40012000 	.word	0x40012000
 8009334:	20000280 	.word	0x20000280
 8009338:	431bde83 	.word	0x431bde83

0800933c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009344:	4b79      	ldr	r3, [pc, #484]	@ (800952c <ADC_Init+0x1f0>)
 8009346:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	431a      	orrs	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6859      	ldr	r1, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	021a      	lsls	r2, r3, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8009394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6899      	ldr	r1, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	4a58      	ldr	r2, [pc, #352]	@ (8009530 <ADC_Init+0x1f4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d022      	beq.n	800941a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80093e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6899      	ldr	r1, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6899      	ldr	r1, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	609a      	str	r2, [r3, #8]
 8009418:	e00f      	b.n	800943a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009438:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0202 	bic.w	r2, r2, #2
 8009448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6899      	ldr	r1, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	7e1b      	ldrb	r3, [r3, #24]
 8009454:	005a      	lsls	r2, r3, #1
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01b      	beq.n	80094a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009476:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8009486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6859      	ldr	r1, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009492:	3b01      	subs	r3, #1
 8009494:	035a      	lsls	r2, r3, #13
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	e007      	b.n	80094b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80094be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	051a      	lsls	r2, r3, #20
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80094e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6899      	ldr	r1, [r3, #8]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094f2:	025a      	lsls	r2, r3, #9
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800950a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6899      	ldr	r1, [r3, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	029a      	lsls	r2, r3, #10
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	40012300 	.word	0x40012300
 8009530:	0f000001 	.word	0x0f000001

08009534 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009558:	4b0c      	ldr	r3, [pc, #48]	@ (800958c <__NVIC_SetPriorityGrouping+0x44>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009564:	4013      	ands	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800957a:	4a04      	ldr	r2, [pc, #16]	@ (800958c <__NVIC_SetPriorityGrouping+0x44>)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	60d3      	str	r3, [r2, #12]
}
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	e000ed00 	.word	0xe000ed00

08009590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009594:	4b04      	ldr	r3, [pc, #16]	@ (80095a8 <__NVIC_GetPriorityGrouping+0x18>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	f003 0307 	and.w	r3, r3, #7
}
 800959e:	4618      	mov	r0, r3
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	e000ed00 	.word	0xe000ed00

080095ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	db0b      	blt.n	80095d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	f003 021f 	and.w	r2, r3, #31
 80095c4:	4907      	ldr	r1, [pc, #28]	@ (80095e4 <__NVIC_EnableIRQ+0x38>)
 80095c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	2001      	movs	r0, #1
 80095ce:	fa00 f202 	lsl.w	r2, r0, r2
 80095d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80095d6:	bf00      	nop
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	e000e100 	.word	0xe000e100

080095e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	db0a      	blt.n	8009612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	490c      	ldr	r1, [pc, #48]	@ (8009634 <__NVIC_SetPriority+0x4c>)
 8009602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009606:	0112      	lsls	r2, r2, #4
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	440b      	add	r3, r1
 800960c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009610:	e00a      	b.n	8009628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	b2da      	uxtb	r2, r3
 8009616:	4908      	ldr	r1, [pc, #32]	@ (8009638 <__NVIC_SetPriority+0x50>)
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	3b04      	subs	r3, #4
 8009620:	0112      	lsls	r2, r2, #4
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	440b      	add	r3, r1
 8009626:	761a      	strb	r2, [r3, #24]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	e000e100 	.word	0xe000e100
 8009638:	e000ed00 	.word	0xe000ed00

0800963c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	@ 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f1c3 0307 	rsb	r3, r3, #7
 8009656:	2b04      	cmp	r3, #4
 8009658:	bf28      	it	cs
 800965a:	2304      	movcs	r3, #4
 800965c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	3304      	adds	r3, #4
 8009662:	2b06      	cmp	r3, #6
 8009664:	d902      	bls.n	800966c <NVIC_EncodePriority+0x30>
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	3b03      	subs	r3, #3
 800966a:	e000      	b.n	800966e <NVIC_EncodePriority+0x32>
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009670:	f04f 32ff 	mov.w	r2, #4294967295
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	43da      	mvns	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	401a      	ands	r2, r3
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009684:	f04f 31ff 	mov.w	r1, #4294967295
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	fa01 f303 	lsl.w	r3, r1, r3
 800968e:	43d9      	mvns	r1, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009694:	4313      	orrs	r3, r2
         );
}
 8009696:	4618      	mov	r0, r3
 8009698:	3724      	adds	r7, #36	@ 0x24
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff ff4c 	bl	8009548 <__NVIC_SetPriorityGrouping>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80096ca:	f7ff ff61 	bl	8009590 <__NVIC_GetPriorityGrouping>
 80096ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	6978      	ldr	r0, [r7, #20]
 80096d6:	f7ff ffb1 	bl	800963c <NVIC_EncodePriority>
 80096da:	4602      	mov	r2, r0
 80096dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff ff80 	bl	80095e8 <__NVIC_SetPriority>
}
 80096e8:	bf00      	nop
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff ff54 	bl	80095ac <__NVIC_EnableIRQ>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d004      	beq.n	800972a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2280      	movs	r2, #128	@ 0x80
 8009724:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e00c      	b.n	8009744 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2205      	movs	r2, #5
 800972e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009750:	b480      	push	{r7}
 8009752:	b089      	sub	sp, #36	@ 0x24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800975e:	2300      	movs	r3, #0
 8009760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009762:	2300      	movs	r3, #0
 8009764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e16b      	b.n	8009a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800976c:	2201      	movs	r2, #1
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	fa02 f303 	lsl.w	r3, r2, r3
 8009774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	4013      	ands	r3, r2
 800977e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	429a      	cmp	r2, r3
 8009786:	f040 815a 	bne.w	8009a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b01      	cmp	r3, #1
 8009794:	d005      	beq.n	80097a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d130      	bne.n	8009804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	2203      	movs	r2, #3
 80097ae:	fa02 f303 	lsl.w	r3, r2, r3
 80097b2:	43db      	mvns	r3, r3
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	4013      	ands	r3, r2
 80097b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80097d8:	2201      	movs	r2, #1
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	fa02 f303 	lsl.w	r3, r2, r3
 80097e0:	43db      	mvns	r3, r3
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	4013      	ands	r3, r2
 80097e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	091b      	lsrs	r3, r3, #4
 80097ee:	f003 0201 	and.w	r2, r3, #1
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f003 0303 	and.w	r3, r3, #3
 800980c:	2b03      	cmp	r3, #3
 800980e:	d017      	beq.n	8009840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	2203      	movs	r2, #3
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	43db      	mvns	r3, r3
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	4013      	ands	r3, r2
 8009826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	4313      	orrs	r3, r2
 8009838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f003 0303 	and.w	r3, r3, #3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d123      	bne.n	8009894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	08da      	lsrs	r2, r3, #3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3208      	adds	r2, #8
 8009854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	220f      	movs	r2, #15
 8009864:	fa02 f303 	lsl.w	r3, r2, r3
 8009868:	43db      	mvns	r3, r3
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	4013      	ands	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	691a      	ldr	r2, [r3, #16]
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	fa02 f303 	lsl.w	r3, r2, r3
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	4313      	orrs	r3, r2
 8009884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	08da      	lsrs	r2, r3, #3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3208      	adds	r2, #8
 800988e:	69b9      	ldr	r1, [r7, #24]
 8009890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	2203      	movs	r2, #3
 80098a0:	fa02 f303 	lsl.w	r3, r2, r3
 80098a4:	43db      	mvns	r3, r3
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	4013      	ands	r3, r2
 80098aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f003 0203 	and.w	r2, r3, #3
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	fa02 f303 	lsl.w	r3, r2, r3
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	4313      	orrs	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69ba      	ldr	r2, [r7, #24]
 80098c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 80b4 	beq.w	8009a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	4b60      	ldr	r3, [pc, #384]	@ (8009a5c <HAL_GPIO_Init+0x30c>)
 80098dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098de:	4a5f      	ldr	r2, [pc, #380]	@ (8009a5c <HAL_GPIO_Init+0x30c>)
 80098e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80098e6:	4b5d      	ldr	r3, [pc, #372]	@ (8009a5c <HAL_GPIO_Init+0x30c>)
 80098e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80098f2:	4a5b      	ldr	r2, [pc, #364]	@ (8009a60 <HAL_GPIO_Init+0x310>)
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	3302      	adds	r3, #2
 80098fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	220f      	movs	r2, #15
 800990a:	fa02 f303 	lsl.w	r3, r2, r3
 800990e:	43db      	mvns	r3, r3
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	4013      	ands	r3, r2
 8009914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a52      	ldr	r2, [pc, #328]	@ (8009a64 <HAL_GPIO_Init+0x314>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d02b      	beq.n	8009976 <HAL_GPIO_Init+0x226>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a51      	ldr	r2, [pc, #324]	@ (8009a68 <HAL_GPIO_Init+0x318>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d025      	beq.n	8009972 <HAL_GPIO_Init+0x222>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a50      	ldr	r2, [pc, #320]	@ (8009a6c <HAL_GPIO_Init+0x31c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d01f      	beq.n	800996e <HAL_GPIO_Init+0x21e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a4f      	ldr	r2, [pc, #316]	@ (8009a70 <HAL_GPIO_Init+0x320>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d019      	beq.n	800996a <HAL_GPIO_Init+0x21a>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a4e      	ldr	r2, [pc, #312]	@ (8009a74 <HAL_GPIO_Init+0x324>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d013      	beq.n	8009966 <HAL_GPIO_Init+0x216>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a4d      	ldr	r2, [pc, #308]	@ (8009a78 <HAL_GPIO_Init+0x328>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00d      	beq.n	8009962 <HAL_GPIO_Init+0x212>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a4c      	ldr	r2, [pc, #304]	@ (8009a7c <HAL_GPIO_Init+0x32c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d007      	beq.n	800995e <HAL_GPIO_Init+0x20e>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a4b      	ldr	r2, [pc, #300]	@ (8009a80 <HAL_GPIO_Init+0x330>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d101      	bne.n	800995a <HAL_GPIO_Init+0x20a>
 8009956:	2307      	movs	r3, #7
 8009958:	e00e      	b.n	8009978 <HAL_GPIO_Init+0x228>
 800995a:	2308      	movs	r3, #8
 800995c:	e00c      	b.n	8009978 <HAL_GPIO_Init+0x228>
 800995e:	2306      	movs	r3, #6
 8009960:	e00a      	b.n	8009978 <HAL_GPIO_Init+0x228>
 8009962:	2305      	movs	r3, #5
 8009964:	e008      	b.n	8009978 <HAL_GPIO_Init+0x228>
 8009966:	2304      	movs	r3, #4
 8009968:	e006      	b.n	8009978 <HAL_GPIO_Init+0x228>
 800996a:	2303      	movs	r3, #3
 800996c:	e004      	b.n	8009978 <HAL_GPIO_Init+0x228>
 800996e:	2302      	movs	r3, #2
 8009970:	e002      	b.n	8009978 <HAL_GPIO_Init+0x228>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <HAL_GPIO_Init+0x228>
 8009976:	2300      	movs	r3, #0
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	f002 0203 	and.w	r2, r2, #3
 800997e:	0092      	lsls	r2, r2, #2
 8009980:	4093      	lsls	r3, r2
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	4313      	orrs	r3, r2
 8009986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009988:	4935      	ldr	r1, [pc, #212]	@ (8009a60 <HAL_GPIO_Init+0x310>)
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	089b      	lsrs	r3, r3, #2
 800998e:	3302      	adds	r3, #2
 8009990:	69ba      	ldr	r2, [r7, #24]
 8009992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009996:	4b3b      	ldr	r3, [pc, #236]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	43db      	mvns	r3, r3
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	4013      	ands	r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80099ba:	4a32      	ldr	r2, [pc, #200]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80099c0:	4b30      	ldr	r3, [pc, #192]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	43db      	mvns	r3, r3
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	4013      	ands	r3, r2
 80099ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80099dc:	69ba      	ldr	r2, [r7, #24]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80099e4:	4a27      	ldr	r2, [pc, #156]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80099ea:	4b26      	ldr	r3, [pc, #152]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	43db      	mvns	r3, r3
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	4013      	ands	r3, r2
 80099f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009a14:	4b1b      	ldr	r3, [pc, #108]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	4013      	ands	r3, r2
 8009a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009a38:	4a12      	ldr	r2, [pc, #72]	@ (8009a84 <HAL_GPIO_Init+0x334>)
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	3301      	adds	r3, #1
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	f67f ae90 	bls.w	800976c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	3724      	adds	r7, #36	@ 0x24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	40023800 	.word	0x40023800
 8009a60:	40013800 	.word	0x40013800
 8009a64:	40020000 	.word	0x40020000
 8009a68:	40020400 	.word	0x40020400
 8009a6c:	40020800 	.word	0x40020800
 8009a70:	40020c00 	.word	0x40020c00
 8009a74:	40021000 	.word	0x40021000
 8009a78:	40021400 	.word	0x40021400
 8009a7c:	40021800 	.word	0x40021800
 8009a80:	40021c00 	.word	0x40021c00
 8009a84:	40013c00 	.word	0x40013c00

08009a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691a      	ldr	r2, [r3, #16]
 8009a98:	887b      	ldrh	r3, [r7, #2]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	73fb      	strb	r3, [r7, #15]
 8009aa4:	e001      	b.n	8009aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	807b      	strh	r3, [r7, #2]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009ac8:	787b      	ldrb	r3, [r7, #1]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ace:	887a      	ldrh	r2, [r7, #2]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009ad4:	e003      	b.n	8009ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	041a      	lsls	r2, r3, #16
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	619a      	str	r2, [r3, #24]
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009afc:	887a      	ldrh	r2, [r7, #2]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4013      	ands	r3, r2
 8009b02:	041a      	lsls	r2, r3, #16
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	43d9      	mvns	r1, r3
 8009b08:	887b      	ldrh	r3, [r7, #2]
 8009b0a:	400b      	ands	r3, r1
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	619a      	str	r2, [r3, #24]
}
 8009b12:	bf00      	nop
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
	...

08009b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e12b      	b.n	8009d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fe f9b8 	bl	8007ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2224      	movs	r2, #36	@ 0x24
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0201 	bic.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009b84:	f001 fd24 	bl	800b5d0 <HAL_RCC_GetPCLK1Freq>
 8009b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4a81      	ldr	r2, [pc, #516]	@ (8009d94 <HAL_I2C_Init+0x274>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d807      	bhi.n	8009ba4 <HAL_I2C_Init+0x84>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4a80      	ldr	r2, [pc, #512]	@ (8009d98 <HAL_I2C_Init+0x278>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	bf94      	ite	ls
 8009b9c:	2301      	movls	r3, #1
 8009b9e:	2300      	movhi	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	e006      	b.n	8009bb2 <HAL_I2C_Init+0x92>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8009d9c <HAL_I2C_Init+0x27c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	bf94      	ite	ls
 8009bac:	2301      	movls	r3, #1
 8009bae:	2300      	movhi	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e0e7      	b.n	8009d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4a78      	ldr	r2, [pc, #480]	@ (8009da0 <HAL_I2C_Init+0x280>)
 8009bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc2:	0c9b      	lsrs	r3, r3, #18
 8009bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4a6a      	ldr	r2, [pc, #424]	@ (8009d94 <HAL_I2C_Init+0x274>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d802      	bhi.n	8009bf4 <HAL_I2C_Init+0xd4>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	e009      	b.n	8009c08 <HAL_I2C_Init+0xe8>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009bfa:	fb02 f303 	mul.w	r3, r2, r3
 8009bfe:	4a69      	ldr	r2, [pc, #420]	@ (8009da4 <HAL_I2C_Init+0x284>)
 8009c00:	fba2 2303 	umull	r2, r3, r2, r3
 8009c04:	099b      	lsrs	r3, r3, #6
 8009c06:	3301      	adds	r3, #1
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6812      	ldr	r2, [r2, #0]
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	495c      	ldr	r1, [pc, #368]	@ (8009d94 <HAL_I2C_Init+0x274>)
 8009c24:	428b      	cmp	r3, r1
 8009c26:	d819      	bhi.n	8009c5c <HAL_I2C_Init+0x13c>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	1e59      	subs	r1, r3, #1
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c36:	1c59      	adds	r1, r3, #1
 8009c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009c3c:	400b      	ands	r3, r1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <HAL_I2C_Init+0x138>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1e59      	subs	r1, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c50:	3301      	adds	r3, #1
 8009c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c56:	e051      	b.n	8009cfc <HAL_I2C_Init+0x1dc>
 8009c58:	2304      	movs	r3, #4
 8009c5a:	e04f      	b.n	8009cfc <HAL_I2C_Init+0x1dc>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d111      	bne.n	8009c88 <HAL_I2C_Init+0x168>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	1e58      	subs	r0, r3, #1
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6859      	ldr	r1, [r3, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	440b      	add	r3, r1
 8009c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c76:	3301      	adds	r3, #1
 8009c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bf0c      	ite	eq
 8009c80:	2301      	moveq	r3, #1
 8009c82:	2300      	movne	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	e012      	b.n	8009cae <HAL_I2C_Init+0x18e>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	1e58      	subs	r0, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6859      	ldr	r1, [r3, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	0099      	lsls	r1, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bf0c      	ite	eq
 8009ca8:	2301      	moveq	r3, #1
 8009caa:	2300      	movne	r3, #0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_I2C_Init+0x196>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e022      	b.n	8009cfc <HAL_I2C_Init+0x1dc>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10e      	bne.n	8009cdc <HAL_I2C_Init+0x1bc>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	1e58      	subs	r0, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6859      	ldr	r1, [r3, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	440b      	add	r3, r1
 8009ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cda:	e00f      	b.n	8009cfc <HAL_I2C_Init+0x1dc>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	1e58      	subs	r0, r3, #1
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6859      	ldr	r1, [r3, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	0099      	lsls	r1, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	6809      	ldr	r1, [r1, #0]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69da      	ldr	r2, [r3, #28]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	6911      	ldr	r1, [r2, #16]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	68d2      	ldr	r2, [r2, #12]
 8009d36:	4311      	orrs	r1, r2
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695a      	ldr	r2, [r3, #20]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0201 	orr.w	r2, r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	000186a0 	.word	0x000186a0
 8009d98:	001e847f 	.word	0x001e847f
 8009d9c:	003d08ff 	.word	0x003d08ff
 8009da0:	431bde83 	.word	0x431bde83
 8009da4:	10624dd3 	.word	0x10624dd3

08009da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	461a      	mov	r2, r3
 8009db4:	460b      	mov	r3, r1
 8009db6:	817b      	strh	r3, [r7, #10]
 8009db8:	4613      	mov	r3, r2
 8009dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009dbc:	f7fe fe5c 	bl	8008a78 <HAL_GetTick>
 8009dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	f040 80e0 	bne.w	8009f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	2319      	movs	r3, #25
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4970      	ldr	r1, [pc, #448]	@ (8009f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fd92 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
 8009de8:	e0d3      	b.n	8009f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_I2C_Master_Transmit+0x50>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e0cc      	b.n	8009f92 <HAL_I2C_Master_Transmit+0x1ea>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d007      	beq.n	8009e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f042 0201 	orr.w	r2, r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2221      	movs	r2, #33	@ 0x21
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2210      	movs	r2, #16
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	893a      	ldrh	r2, [r7, #8]
 8009e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4a50      	ldr	r2, [pc, #320]	@ (8009fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8009e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009e60:	8979      	ldrh	r1, [r7, #10]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	6a3a      	ldr	r2, [r7, #32]
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 fbfc 	bl	800a664 <I2C_MasterRequestWrite>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e08d      	b.n	8009f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e76:	2300      	movs	r3, #0
 8009e78:	613b      	str	r3, [r7, #16]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	613b      	str	r3, [r7, #16]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	613b      	str	r3, [r7, #16]
 8009e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009e8c:	e066      	b.n	8009f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	6a39      	ldr	r1, [r7, #32]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 fe50 	bl	800ab38 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00d      	beq.n	8009eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d107      	bne.n	8009eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e06b      	b.n	8009f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d11b      	bne.n	8009f30 <HAL_I2C_Master_Transmit+0x188>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d017      	beq.n	8009f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	6a39      	ldr	r1, [r7, #32]
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fe47 	bl	800abc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00d      	beq.n	8009f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d107      	bne.n	8009f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e01a      	b.n	8009f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d194      	bne.n	8009e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e000      	b.n	8009f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009f90:	2302      	movs	r3, #2
  }
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	00100002 	.word	0x00100002
 8009fa0:	ffff0000 	.word	0xffff0000

08009fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	@ 0x30
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	607a      	str	r2, [r7, #4]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	817b      	strh	r3, [r7, #10]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fb8:	f7fe fd5e 	bl	8008a78 <HAL_GetTick>
 8009fbc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	f040 8217 	bne.w	800a3fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	2319      	movs	r3, #25
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	497c      	ldr	r1, [pc, #496]	@ (800a1c8 <HAL_I2C_Master_Receive+0x224>)
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 fc94 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	e20a      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_I2C_Master_Receive+0x50>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e203      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b01      	cmp	r3, #1
 800a008:	d007      	beq.n	800a01a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0201 	orr.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2222      	movs	r2, #34	@ 0x22
 800a02e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2210      	movs	r2, #16
 800a036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	893a      	ldrh	r2, [r7, #8]
 800a04a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a050:	b29a      	uxth	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4a5c      	ldr	r2, [pc, #368]	@ (800a1cc <HAL_I2C_Master_Receive+0x228>)
 800a05a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a05c:	8979      	ldrh	r1, [r7, #10]
 800a05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fb80 	bl	800a768 <I2C_MasterRequestRead>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e1c4      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d113      	bne.n	800a0a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a07a:	2300      	movs	r3, #0
 800a07c:	623b      	str	r3, [r7, #32]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	623b      	str	r3, [r7, #32]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	623b      	str	r3, [r7, #32]
 800a08e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	e198      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d11b      	bne.n	800a0e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61fb      	str	r3, [r7, #28]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	61fb      	str	r3, [r7, #28]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	e178      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d11b      	bne.n	800a122 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a10a:	2300      	movs	r3, #0
 800a10c:	61bb      	str	r3, [r7, #24]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	61bb      	str	r3, [r7, #24]
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	e158      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	617b      	str	r3, [r7, #20]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a148:	e144      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a14e:	2b03      	cmp	r3, #3
 800a150:	f200 80f1 	bhi.w	800a336 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d123      	bne.n	800a1a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a15c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 fd79 	bl	800ac58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e145      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691a      	ldr	r2, [r3, #16]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a18c:	3b01      	subs	r3, #1
 800a18e:	b29a      	uxth	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a1a2:	e117      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d14e      	bne.n	800a24a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	4906      	ldr	r1, [pc, #24]	@ (800a1d0 <HAL_I2C_Master_Receive+0x22c>)
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fba4 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d008      	beq.n	800a1d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e11a      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
 800a1c6:	bf00      	nop
 800a1c8:	00100002 	.word	0x00100002
 800a1cc:	ffff0000 	.word	0xffff0000
 800a1d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ee:	b2d2      	uxtb	r2, r2
 800a1f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a200:	3b01      	subs	r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	b29a      	uxth	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a23e:	b29b      	uxth	r3, r3
 800a240:	3b01      	subs	r3, #1
 800a242:	b29a      	uxth	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a248:	e0c4      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	2200      	movs	r2, #0
 800a252:	496c      	ldr	r1, [pc, #432]	@ (800a404 <HAL_I2C_Master_Receive+0x460>)
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fb55 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e0cb      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691a      	ldr	r2, [r3, #16]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a290:	3b01      	subs	r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4955      	ldr	r1, [pc, #340]	@ (800a404 <HAL_I2C_Master_Receive+0x460>)
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 fb27 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e09d      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a334:	e04e      	b.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a338:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 fc8c 	bl	800ac58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e058      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a354:	b2d2      	uxtb	r2, r2
 800a356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a366:	3b01      	subs	r3, #1
 800a368:	b29a      	uxth	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a372:	b29b      	uxth	r3, r3
 800a374:	3b01      	subs	r3, #1
 800a376:	b29a      	uxth	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b04      	cmp	r3, #4
 800a388:	d124      	bne.n	800a3d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d107      	bne.n	800a3a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	691a      	ldr	r2, [r3, #16]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ac:	b2d2      	uxtb	r2, r2
 800a3ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f47f aeb6 	bne.w	800a14a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e000      	b.n	800a3fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a3fa:	2302      	movs	r3, #2
  }
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3728      	adds	r7, #40	@ 0x28
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	00010004 	.word	0x00010004

0800a408 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	@ 0x28
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	607a      	str	r2, [r7, #4]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	460b      	mov	r3, r1
 800a416:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a418:	f7fe fb2e 	bl	8008a78 <HAL_GetTick>
 800a41c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	f040 8111 	bne.w	800a652 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2319      	movs	r3, #25
 800a436:	2201      	movs	r2, #1
 800a438:	4988      	ldr	r1, [pc, #544]	@ (800a65c <HAL_I2C_IsDeviceReady+0x254>)
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 fa62 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a446:	2302      	movs	r3, #2
 800a448:	e104      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_I2C_IsDeviceReady+0x50>
 800a454:	2302      	movs	r3, #2
 800a456:	e0fd      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d007      	beq.n	800a47e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0201 	orr.w	r2, r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a48c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2224      	movs	r2, #36	@ 0x24
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4a70      	ldr	r2, [pc, #448]	@ (800a660 <HAL_I2C_IsDeviceReady+0x258>)
 800a4a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fa20 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00d      	beq.n	800a4e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d8:	d103      	bne.n	800a4e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4e0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e0b6      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a4e6:	897b      	ldrh	r3, [r7, #10]
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a4f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a4f6:	f7fe fabf 	bl	8008a78 <HAL_GetTick>
 800a4fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b02      	cmp	r3, #2
 800a508:	bf0c      	ite	eq
 800a50a:	2301      	moveq	r3, #1
 800a50c:	2300      	movne	r3, #0
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a51c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a520:	bf0c      	ite	eq
 800a522:	2301      	moveq	r3, #1
 800a524:	2300      	movne	r3, #0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a52a:	e025      	b.n	800a578 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a52c:	f7fe faa4 	bl	8008a78 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <HAL_I2C_IsDeviceReady+0x13a>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	22a0      	movs	r2, #160	@ 0xa0
 800a546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b02      	cmp	r3, #2
 800a556:	bf0c      	ite	eq
 800a558:	2301      	moveq	r3, #1
 800a55a:	2300      	movne	r3, #0
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a56a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2ba0      	cmp	r3, #160	@ 0xa0
 800a582:	d005      	beq.n	800a590 <HAL_I2C_IsDeviceReady+0x188>
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <HAL_I2C_IsDeviceReady+0x188>
 800a58a:	7dbb      	ldrb	r3, [r7, #22]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0cd      	beq.n	800a52c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2220      	movs	r2, #32
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d129      	bne.n	800a5fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	613b      	str	r3, [r7, #16]
 800a5ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	2319      	movs	r3, #25
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	4921      	ldr	r1, [pc, #132]	@ (800a65c <HAL_I2C_IsDeviceReady+0x254>)
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 f994 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e036      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e02c      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a608:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a612:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	2319      	movs	r3, #25
 800a61a:	2201      	movs	r2, #1
 800a61c:	490f      	ldr	r1, [pc, #60]	@ (800a65c <HAL_I2C_IsDeviceReady+0x254>)
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 f970 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e012      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	3301      	adds	r3, #1
 800a632:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	429a      	cmp	r2, r3
 800a63a:	f4ff af32 	bcc.w	800a4a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2220      	movs	r2, #32
 800a642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a652:	2302      	movs	r3, #2
  }
}
 800a654:	4618      	mov	r0, r3
 800a656:	3720      	adds	r7, #32
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	00100002 	.word	0x00100002
 800a660:	ffff0000 	.word	0xffff0000

0800a664 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af02      	add	r7, sp, #8
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	603b      	str	r3, [r7, #0]
 800a670:	460b      	mov	r3, r1
 800a672:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a678:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d006      	beq.n	800a68e <I2C_MasterRequestWrite+0x2a>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d003      	beq.n	800a68e <I2C_MasterRequestWrite+0x2a>
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a68c:	d108      	bne.n	800a6a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e00b      	b.n	800a6b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a4:	2b12      	cmp	r3, #18
 800a6a6:	d107      	bne.n	800a6b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f000 f91d 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00d      	beq.n	800a6ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6de:	d103      	bne.n	800a6e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e035      	b.n	800a758 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6f4:	d108      	bne.n	800a708 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6f6:	897b      	ldrh	r3, [r7, #10]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a704:	611a      	str	r2, [r3, #16]
 800a706:	e01b      	b.n	800a740 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a708:	897b      	ldrh	r3, [r7, #10]
 800a70a:	11db      	asrs	r3, r3, #7
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0306 	and.w	r3, r3, #6
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f063 030f 	orn	r3, r3, #15
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	490e      	ldr	r1, [pc, #56]	@ (800a760 <I2C_MasterRequestWrite+0xfc>)
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 f966 	bl	800a9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e010      	b.n	800a758 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a736:	897b      	ldrh	r3, [r7, #10]
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4907      	ldr	r1, [pc, #28]	@ (800a764 <I2C_MasterRequestWrite+0x100>)
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f956 	bl	800a9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e000      	b.n	800a758 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	00010008 	.word	0x00010008
 800a764:	00010002 	.word	0x00010002

0800a768 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	607a      	str	r2, [r7, #4]
 800a772:	603b      	str	r3, [r7, #0]
 800a774:	460b      	mov	r3, r1
 800a776:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a78c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b08      	cmp	r3, #8
 800a792:	d006      	beq.n	800a7a2 <I2C_MasterRequestRead+0x3a>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d003      	beq.n	800a7a2 <I2C_MasterRequestRead+0x3a>
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a7a0:	d108      	bne.n	800a7b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e00b      	b.n	800a7cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	2b11      	cmp	r3, #17
 800a7ba:	d107      	bne.n	800a7cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 f893 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00d      	beq.n	800a800 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f2:	d103      	bne.n	800a7fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e079      	b.n	800a8f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a808:	d108      	bne.n	800a81c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a80a:	897b      	ldrh	r3, [r7, #10]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f043 0301 	orr.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	611a      	str	r2, [r3, #16]
 800a81a:	e05f      	b.n	800a8dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a81c:	897b      	ldrh	r3, [r7, #10]
 800a81e:	11db      	asrs	r3, r3, #7
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0306 	and.w	r3, r3, #6
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f063 030f 	orn	r3, r3, #15
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	4930      	ldr	r1, [pc, #192]	@ (800a8fc <I2C_MasterRequestRead+0x194>)
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 f8dc 	bl	800a9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e054      	b.n	800a8f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a84a:	897b      	ldrh	r3, [r7, #10]
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4929      	ldr	r1, [pc, #164]	@ (800a900 <I2C_MasterRequestRead+0x198>)
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 f8cc 	bl	800a9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e044      	b.n	800a8f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a86a:	2300      	movs	r3, #0
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a88e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 f831 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00d      	beq.n	800a8c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b6:	d103      	bne.n	800a8c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8be:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e017      	b.n	800a8f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a8c4:	897b      	ldrh	r3, [r7, #10]
 800a8c6:	11db      	asrs	r3, r3, #7
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 0306 	and.w	r3, r3, #6
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f063 030e 	orn	r3, r3, #14
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4907      	ldr	r1, [pc, #28]	@ (800a900 <I2C_MasterRequestRead+0x198>)
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f888 	bl	800a9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	00010008 	.word	0x00010008
 800a900:	00010002 	.word	0x00010002

0800a904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	4613      	mov	r3, r2
 800a912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a914:	e048      	b.n	800a9a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91c:	d044      	beq.n	800a9a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a91e:	f7fe f8ab 	bl	8008a78 <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d302      	bcc.n	800a934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d139      	bne.n	800a9a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	0c1b      	lsrs	r3, r3, #16
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d10d      	bne.n	800a95a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	43da      	mvns	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	4013      	ands	r3, r2
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bf0c      	ite	eq
 800a950:	2301      	moveq	r3, #1
 800a952:	2300      	movne	r3, #0
 800a954:	b2db      	uxtb	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	e00c      	b.n	800a974 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	43da      	mvns	r2, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	4013      	ands	r3, r2
 800a966:	b29b      	uxth	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bf0c      	ite	eq
 800a96c:	2301      	moveq	r3, #1
 800a96e:	2300      	movne	r3, #0
 800a970:	b2db      	uxtb	r3, r3
 800a972:	461a      	mov	r2, r3
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	429a      	cmp	r2, r3
 800a978:	d116      	bne.n	800a9a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2220      	movs	r2, #32
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a994:	f043 0220 	orr.w	r2, r3, #32
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e023      	b.n	800a9f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	0c1b      	lsrs	r3, r3, #16
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d10d      	bne.n	800a9ce <I2C_WaitOnFlagUntilTimeout+0xca>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	43da      	mvns	r2, r3
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bf0c      	ite	eq
 800a9c4:	2301      	moveq	r3, #1
 800a9c6:	2300      	movne	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	e00c      	b.n	800a9e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	43da      	mvns	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bf0c      	ite	eq
 800a9e0:	2301      	moveq	r3, #1
 800a9e2:	2300      	movne	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d093      	beq.n	800a916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa06:	e071      	b.n	800aaec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa16:	d123      	bne.n	800aa60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aa30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4c:	f043 0204 	orr.w	r2, r3, #4
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e067      	b.n	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d041      	beq.n	800aaec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa68:	f7fe f806 	bl	8008a78 <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d302      	bcc.n	800aa7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d136      	bne.n	800aaec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	0c1b      	lsrs	r3, r3, #16
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d10c      	bne.n	800aaa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	43da      	mvns	r2, r3
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4013      	ands	r3, r2
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	bf14      	ite	ne
 800aa9a:	2301      	movne	r3, #1
 800aa9c:	2300      	moveq	r3, #0
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	e00b      	b.n	800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	43da      	mvns	r2, r3
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4013      	ands	r3, r2
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bf14      	ite	ne
 800aab4:	2301      	movne	r3, #1
 800aab6:	2300      	moveq	r3, #0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d016      	beq.n	800aaec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad8:	f043 0220 	orr.w	r2, r3, #32
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e021      	b.n	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	0c1b      	lsrs	r3, r3, #16
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d10c      	bne.n	800ab10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	43da      	mvns	r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	4013      	ands	r3, r2
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bf14      	ite	ne
 800ab08:	2301      	movne	r3, #1
 800ab0a:	2300      	moveq	r3, #0
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	e00b      	b.n	800ab28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	43da      	mvns	r2, r3
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bf14      	ite	ne
 800ab22:	2301      	movne	r3, #1
 800ab24:	2300      	moveq	r3, #0
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f47f af6d 	bne.w	800aa08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab44:	e034      	b.n	800abb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 f8e3 	bl	800ad12 <I2C_IsAcknowledgeFailed>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e034      	b.n	800abc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5c:	d028      	beq.n	800abb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab5e:	f7fd ff8b 	bl	8008a78 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d302      	bcc.n	800ab74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11d      	bne.n	800abb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab7e:	2b80      	cmp	r3, #128	@ 0x80
 800ab80:	d016      	beq.n	800abb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab9c:	f043 0220 	orr.w	r2, r3, #32
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e007      	b.n	800abc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abba:	2b80      	cmp	r3, #128	@ 0x80
 800abbc:	d1c3      	bne.n	800ab46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abd4:	e034      	b.n	800ac40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 f89b 	bl	800ad12 <I2C_IsAcknowledgeFailed>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e034      	b.n	800ac50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abec:	d028      	beq.n	800ac40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abee:	f7fd ff43 	bl	8008a78 <HAL_GetTick>
 800abf2:	4602      	mov	r2, r0
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d302      	bcc.n	800ac04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d11d      	bne.n	800ac40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d016      	beq.n	800ac40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2c:	f043 0220 	orr.w	r2, r3, #32
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e007      	b.n	800ac50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b04      	cmp	r3, #4
 800ac4c:	d1c3      	bne.n	800abd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac64:	e049      	b.n	800acfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	f003 0310 	and.w	r3, r3, #16
 800ac70:	2b10      	cmp	r3, #16
 800ac72:	d119      	bne.n	800aca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f06f 0210 	mvn.w	r2, #16
 800ac7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2220      	movs	r2, #32
 800ac88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e030      	b.n	800ad0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aca8:	f7fd fee6 	bl	8008a78 <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d302      	bcc.n	800acbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d11d      	bne.n	800acfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc8:	2b40      	cmp	r3, #64	@ 0x40
 800acca:	d016      	beq.n	800acfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace6:	f043 0220 	orr.w	r2, r3, #32
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e007      	b.n	800ad0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad04:	2b40      	cmp	r3, #64	@ 0x40
 800ad06:	d1ae      	bne.n	800ac66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad28:	d11b      	bne.n	800ad62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	f043 0204 	orr.w	r2, r3, #4
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e267      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d075      	beq.n	800ae7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ad8e:	4b88      	ldr	r3, [pc, #544]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f003 030c 	and.w	r3, r3, #12
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d00c      	beq.n	800adb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad9a:	4b85      	ldr	r3, [pc, #532]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ada2:	2b08      	cmp	r3, #8
 800ada4:	d112      	bne.n	800adcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ada6:	4b82      	ldr	r3, [pc, #520]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adb2:	d10b      	bne.n	800adcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adb4:	4b7e      	ldr	r3, [pc, #504]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d05b      	beq.n	800ae78 <HAL_RCC_OscConfig+0x108>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d157      	bne.n	800ae78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e242      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add4:	d106      	bne.n	800ade4 <HAL_RCC_OscConfig+0x74>
 800add6:	4b76      	ldr	r3, [pc, #472]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a75      	ldr	r2, [pc, #468]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800addc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	e01d      	b.n	800ae20 <HAL_RCC_OscConfig+0xb0>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adec:	d10c      	bne.n	800ae08 <HAL_RCC_OscConfig+0x98>
 800adee:	4b70      	ldr	r3, [pc, #448]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a6f      	ldr	r2, [pc, #444]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800adf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	4b6d      	ldr	r3, [pc, #436]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a6c      	ldr	r2, [pc, #432]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	e00b      	b.n	800ae20 <HAL_RCC_OscConfig+0xb0>
 800ae08:	4b69      	ldr	r3, [pc, #420]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a68      	ldr	r2, [pc, #416]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae12:	6013      	str	r3, [r2, #0]
 800ae14:	4b66      	ldr	r3, [pc, #408]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a65      	ldr	r2, [pc, #404]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d013      	beq.n	800ae50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae28:	f7fd fe26 	bl	8008a78 <HAL_GetTick>
 800ae2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae30:	f7fd fe22 	bl	8008a78 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b64      	cmp	r3, #100	@ 0x64
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e207      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae42:	4b5b      	ldr	r3, [pc, #364]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f0      	beq.n	800ae30 <HAL_RCC_OscConfig+0xc0>
 800ae4e:	e014      	b.n	800ae7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae50:	f7fd fe12 	bl	8008a78 <HAL_GetTick>
 800ae54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae56:	e008      	b.n	800ae6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae58:	f7fd fe0e 	bl	8008a78 <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b64      	cmp	r3, #100	@ 0x64
 800ae64:	d901      	bls.n	800ae6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e1f3      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae6a:	4b51      	ldr	r3, [pc, #324]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1f0      	bne.n	800ae58 <HAL_RCC_OscConfig+0xe8>
 800ae76:	e000      	b.n	800ae7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d063      	beq.n	800af4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ae86:	4b4a      	ldr	r3, [pc, #296]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f003 030c 	and.w	r3, r3, #12
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00b      	beq.n	800aeaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae92:	4b47      	ldr	r3, [pc, #284]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d11c      	bne.n	800aed8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae9e:	4b44      	ldr	r3, [pc, #272]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d116      	bne.n	800aed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aeaa:	4b41      	ldr	r3, [pc, #260]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <HAL_RCC_OscConfig+0x152>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d001      	beq.n	800aec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e1c7      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aec2:	4b3b      	ldr	r3, [pc, #236]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4937      	ldr	r1, [pc, #220]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aed6:	e03a      	b.n	800af4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d020      	beq.n	800af22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aee0:	4b34      	ldr	r3, [pc, #208]	@ (800afb4 <HAL_RCC_OscConfig+0x244>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee6:	f7fd fdc7 	bl	8008a78 <HAL_GetTick>
 800aeea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeec:	e008      	b.n	800af00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aeee:	f7fd fdc3 	bl	8008a78 <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d901      	bls.n	800af00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e1a8      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af00:	4b2b      	ldr	r3, [pc, #172]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0302 	and.w	r3, r3, #2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0f0      	beq.n	800aeee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af0c:	4b28      	ldr	r3, [pc, #160]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	00db      	lsls	r3, r3, #3
 800af1a:	4925      	ldr	r1, [pc, #148]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	600b      	str	r3, [r1, #0]
 800af20:	e015      	b.n	800af4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af22:	4b24      	ldr	r3, [pc, #144]	@ (800afb4 <HAL_RCC_OscConfig+0x244>)
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af28:	f7fd fda6 	bl	8008a78 <HAL_GetTick>
 800af2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af2e:	e008      	b.n	800af42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af30:	f7fd fda2 	bl	8008a78 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d901      	bls.n	800af42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e187      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af42:	4b1b      	ldr	r3, [pc, #108]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0302 	and.w	r3, r3, #2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f0      	bne.n	800af30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0308 	and.w	r3, r3, #8
 800af56:	2b00      	cmp	r3, #0
 800af58:	d036      	beq.n	800afc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d016      	beq.n	800af90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af62:	4b15      	ldr	r3, [pc, #84]	@ (800afb8 <HAL_RCC_OscConfig+0x248>)
 800af64:	2201      	movs	r2, #1
 800af66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af68:	f7fd fd86 	bl	8008a78 <HAL_GetTick>
 800af6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af6e:	e008      	b.n	800af82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af70:	f7fd fd82 	bl	8008a78 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d901      	bls.n	800af82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e167      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af82:	4b0b      	ldr	r3, [pc, #44]	@ (800afb0 <HAL_RCC_OscConfig+0x240>)
 800af84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCC_OscConfig+0x200>
 800af8e:	e01b      	b.n	800afc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af90:	4b09      	ldr	r3, [pc, #36]	@ (800afb8 <HAL_RCC_OscConfig+0x248>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af96:	f7fd fd6f 	bl	8008a78 <HAL_GetTick>
 800af9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af9c:	e00e      	b.n	800afbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af9e:	f7fd fd6b 	bl	8008a78 <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d907      	bls.n	800afbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e150      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
 800afb0:	40023800 	.word	0x40023800
 800afb4:	42470000 	.word	0x42470000
 800afb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afbc:	4b88      	ldr	r3, [pc, #544]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800afbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1ea      	bne.n	800af9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0304 	and.w	r3, r3, #4
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 8097 	beq.w	800b104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afd6:	2300      	movs	r3, #0
 800afd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afda:	4b81      	ldr	r3, [pc, #516]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10f      	bne.n	800b006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afe6:	2300      	movs	r3, #0
 800afe8:	60bb      	str	r3, [r7, #8]
 800afea:	4b7d      	ldr	r3, [pc, #500]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800afec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afee:	4a7c      	ldr	r2, [pc, #496]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800aff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aff4:	6413      	str	r3, [r2, #64]	@ 0x40
 800aff6:	4b7a      	ldr	r3, [pc, #488]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800aff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800affa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800affe:	60bb      	str	r3, [r7, #8]
 800b000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b002:	2301      	movs	r3, #1
 800b004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b006:	4b77      	ldr	r3, [pc, #476]	@ (800b1e4 <HAL_RCC_OscConfig+0x474>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d118      	bne.n	800b044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b012:	4b74      	ldr	r3, [pc, #464]	@ (800b1e4 <HAL_RCC_OscConfig+0x474>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a73      	ldr	r2, [pc, #460]	@ (800b1e4 <HAL_RCC_OscConfig+0x474>)
 800b018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b01c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b01e:	f7fd fd2b 	bl	8008a78 <HAL_GetTick>
 800b022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b024:	e008      	b.n	800b038 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b026:	f7fd fd27 	bl	8008a78 <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	2b02      	cmp	r3, #2
 800b032:	d901      	bls.n	800b038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e10c      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b038:	4b6a      	ldr	r3, [pc, #424]	@ (800b1e4 <HAL_RCC_OscConfig+0x474>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0f0      	beq.n	800b026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d106      	bne.n	800b05a <HAL_RCC_OscConfig+0x2ea>
 800b04c:	4b64      	ldr	r3, [pc, #400]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b050:	4a63      	ldr	r2, [pc, #396]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	6713      	str	r3, [r2, #112]	@ 0x70
 800b058:	e01c      	b.n	800b094 <HAL_RCC_OscConfig+0x324>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	2b05      	cmp	r3, #5
 800b060:	d10c      	bne.n	800b07c <HAL_RCC_OscConfig+0x30c>
 800b062:	4b5f      	ldr	r3, [pc, #380]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b066:	4a5e      	ldr	r2, [pc, #376]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b068:	f043 0304 	orr.w	r3, r3, #4
 800b06c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b06e:	4b5c      	ldr	r3, [pc, #368]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b072:	4a5b      	ldr	r2, [pc, #364]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b074:	f043 0301 	orr.w	r3, r3, #1
 800b078:	6713      	str	r3, [r2, #112]	@ 0x70
 800b07a:	e00b      	b.n	800b094 <HAL_RCC_OscConfig+0x324>
 800b07c:	4b58      	ldr	r3, [pc, #352]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b07e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b080:	4a57      	ldr	r2, [pc, #348]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b082:	f023 0301 	bic.w	r3, r3, #1
 800b086:	6713      	str	r3, [r2, #112]	@ 0x70
 800b088:	4b55      	ldr	r3, [pc, #340]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b08a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b08c:	4a54      	ldr	r2, [pc, #336]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b08e:	f023 0304 	bic.w	r3, r3, #4
 800b092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d015      	beq.n	800b0c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b09c:	f7fd fcec 	bl	8008a78 <HAL_GetTick>
 800b0a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0a2:	e00a      	b.n	800b0ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0a4:	f7fd fce8 	bl	8008a78 <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d901      	bls.n	800b0ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e0cb      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0ba:	4b49      	ldr	r3, [pc, #292]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b0bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0be:	f003 0302 	and.w	r3, r3, #2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0ee      	beq.n	800b0a4 <HAL_RCC_OscConfig+0x334>
 800b0c6:	e014      	b.n	800b0f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0c8:	f7fd fcd6 	bl	8008a78 <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0ce:	e00a      	b.n	800b0e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0d0:	f7fd fcd2 	bl	8008a78 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d901      	bls.n	800b0e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e0b5      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0e6:	4b3e      	ldr	r3, [pc, #248]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1ee      	bne.n	800b0d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d105      	bne.n	800b104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0f8:	4b39      	ldr	r3, [pc, #228]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0fc:	4a38      	ldr	r2, [pc, #224]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b0fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 80a1 	beq.w	800b250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b10e:	4b34      	ldr	r3, [pc, #208]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f003 030c 	and.w	r3, r3, #12
 800b116:	2b08      	cmp	r3, #8
 800b118:	d05c      	beq.n	800b1d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d141      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b122:	4b31      	ldr	r3, [pc, #196]	@ (800b1e8 <HAL_RCC_OscConfig+0x478>)
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b128:	f7fd fca6 	bl	8008a78 <HAL_GetTick>
 800b12c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b12e:	e008      	b.n	800b142 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b130:	f7fd fca2 	bl	8008a78 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d901      	bls.n	800b142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	e087      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b142:	4b27      	ldr	r3, [pc, #156]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1f0      	bne.n	800b130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69da      	ldr	r2, [r3, #28]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	431a      	orrs	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	019b      	lsls	r3, r3, #6
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b164:	085b      	lsrs	r3, r3, #1
 800b166:	3b01      	subs	r3, #1
 800b168:	041b      	lsls	r3, r3, #16
 800b16a:	431a      	orrs	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b170:	061b      	lsls	r3, r3, #24
 800b172:	491b      	ldr	r1, [pc, #108]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b174:	4313      	orrs	r3, r2
 800b176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b178:	4b1b      	ldr	r3, [pc, #108]	@ (800b1e8 <HAL_RCC_OscConfig+0x478>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b17e:	f7fd fc7b 	bl	8008a78 <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b186:	f7fd fc77 	bl	8008a78 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e05c      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b198:	4b11      	ldr	r3, [pc, #68]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0f0      	beq.n	800b186 <HAL_RCC_OscConfig+0x416>
 800b1a4:	e054      	b.n	800b250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1a6:	4b10      	ldr	r3, [pc, #64]	@ (800b1e8 <HAL_RCC_OscConfig+0x478>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1ac:	f7fd fc64 	bl	8008a78 <HAL_GetTick>
 800b1b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1b2:	e008      	b.n	800b1c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1b4:	f7fd fc60 	bl	8008a78 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d901      	bls.n	800b1c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	e045      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1c6:	4b06      	ldr	r3, [pc, #24]	@ (800b1e0 <HAL_RCC_OscConfig+0x470>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f0      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x444>
 800b1d2:	e03d      	b.n	800b250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d107      	bne.n	800b1ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e038      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
 800b1e0:	40023800 	.word	0x40023800
 800b1e4:	40007000 	.word	0x40007000
 800b1e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b1ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b25c <HAL_RCC_OscConfig+0x4ec>)
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d028      	beq.n	800b24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b204:	429a      	cmp	r2, r3
 800b206:	d121      	bne.n	800b24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b212:	429a      	cmp	r2, r3
 800b214:	d11a      	bne.n	800b24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b21c:	4013      	ands	r3, r2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b224:	4293      	cmp	r3, r2
 800b226:	d111      	bne.n	800b24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b232:	085b      	lsrs	r3, r3, #1
 800b234:	3b01      	subs	r3, #1
 800b236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b238:	429a      	cmp	r2, r3
 800b23a:	d107      	bne.n	800b24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b248:	429a      	cmp	r2, r3
 800b24a:	d001      	beq.n	800b250 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e000      	b.n	800b252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	40023800 	.word	0x40023800

0800b260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e0cc      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b274:	4b68      	ldr	r3, [pc, #416]	@ (800b418 <HAL_RCC_ClockConfig+0x1b8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0307 	and.w	r3, r3, #7
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d90c      	bls.n	800b29c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b282:	4b65      	ldr	r3, [pc, #404]	@ (800b418 <HAL_RCC_ClockConfig+0x1b8>)
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b28a:	4b63      	ldr	r3, [pc, #396]	@ (800b418 <HAL_RCC_ClockConfig+0x1b8>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	429a      	cmp	r2, r3
 800b296:	d001      	beq.n	800b29c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e0b8      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d020      	beq.n	800b2ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d005      	beq.n	800b2c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2b4:	4b59      	ldr	r3, [pc, #356]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	4a58      	ldr	r2, [pc, #352]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b2ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b2be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0308 	and.w	r3, r3, #8
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2cc:	4b53      	ldr	r3, [pc, #332]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	4a52      	ldr	r2, [pc, #328]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b2d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b2d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2d8:	4b50      	ldr	r3, [pc, #320]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	494d      	ldr	r1, [pc, #308]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d044      	beq.n	800b380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d107      	bne.n	800b30e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2fe:	4b47      	ldr	r3, [pc, #284]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b306:	2b00      	cmp	r3, #0
 800b308:	d119      	bne.n	800b33e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e07f      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b02      	cmp	r3, #2
 800b314:	d003      	beq.n	800b31e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d107      	bne.n	800b32e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b31e:	4b3f      	ldr	r3, [pc, #252]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e06f      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b32e:	4b3b      	ldr	r3, [pc, #236]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e067      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b33e:	4b37      	ldr	r3, [pc, #220]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f023 0203 	bic.w	r2, r3, #3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	4934      	ldr	r1, [pc, #208]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b34c:	4313      	orrs	r3, r2
 800b34e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b350:	f7fd fb92 	bl	8008a78 <HAL_GetTick>
 800b354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b356:	e00a      	b.n	800b36e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b358:	f7fd fb8e 	bl	8008a78 <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b366:	4293      	cmp	r3, r2
 800b368:	d901      	bls.n	800b36e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e04f      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b36e:	4b2b      	ldr	r3, [pc, #172]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f003 020c 	and.w	r2, r3, #12
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d1eb      	bne.n	800b358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b380:	4b25      	ldr	r3, [pc, #148]	@ (800b418 <HAL_RCC_ClockConfig+0x1b8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d20c      	bcs.n	800b3a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b38e:	4b22      	ldr	r3, [pc, #136]	@ (800b418 <HAL_RCC_ClockConfig+0x1b8>)
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b396:	4b20      	ldr	r3, [pc, #128]	@ (800b418 <HAL_RCC_ClockConfig+0x1b8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d001      	beq.n	800b3a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e032      	b.n	800b40e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d008      	beq.n	800b3c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3b4:	4b19      	ldr	r3, [pc, #100]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	4916      	ldr	r1, [pc, #88]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0308 	and.w	r3, r3, #8
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3d2:	4b12      	ldr	r3, [pc, #72]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	490e      	ldr	r1, [pc, #56]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3e6:	f000 f821 	bl	800b42c <HAL_RCC_GetSysClockFreq>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b41c <HAL_RCC_ClockConfig+0x1bc>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	091b      	lsrs	r3, r3, #4
 800b3f2:	f003 030f 	and.w	r3, r3, #15
 800b3f6:	490a      	ldr	r1, [pc, #40]	@ (800b420 <HAL_RCC_ClockConfig+0x1c0>)
 800b3f8:	5ccb      	ldrb	r3, [r1, r3]
 800b3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b3fe:	4a09      	ldr	r2, [pc, #36]	@ (800b424 <HAL_RCC_ClockConfig+0x1c4>)
 800b400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b402:	4b09      	ldr	r3, [pc, #36]	@ (800b428 <HAL_RCC_ClockConfig+0x1c8>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4618      	mov	r0, r3
 800b408:	f7fc ff3c 	bl	8008284 <HAL_InitTick>

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	40023c00 	.word	0x40023c00
 800b41c:	40023800 	.word	0x40023800
 800b420:	08014a48 	.word	0x08014a48
 800b424:	20000280 	.word	0x20000280
 800b428:	20000284 	.word	0x20000284

0800b42c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b430:	b090      	sub	sp, #64	@ 0x40
 800b432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b434:	2300      	movs	r3, #0
 800b436:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800b440:	2300      	movs	r3, #0
 800b442:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b444:	4b59      	ldr	r3, [pc, #356]	@ (800b5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f003 030c 	and.w	r3, r3, #12
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d00d      	beq.n	800b46c <HAL_RCC_GetSysClockFreq+0x40>
 800b450:	2b08      	cmp	r3, #8
 800b452:	f200 80a1 	bhi.w	800b598 <HAL_RCC_GetSysClockFreq+0x16c>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <HAL_RCC_GetSysClockFreq+0x34>
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	d003      	beq.n	800b466 <HAL_RCC_GetSysClockFreq+0x3a>
 800b45e:	e09b      	b.n	800b598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b460:	4b53      	ldr	r3, [pc, #332]	@ (800b5b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800b462:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b464:	e09b      	b.n	800b59e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b466:	4b53      	ldr	r3, [pc, #332]	@ (800b5b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b468:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b46a:	e098      	b.n	800b59e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b46c:	4b4f      	ldr	r3, [pc, #316]	@ (800b5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b474:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b476:	4b4d      	ldr	r3, [pc, #308]	@ (800b5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d028      	beq.n	800b4d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b482:	4b4a      	ldr	r3, [pc, #296]	@ (800b5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	099b      	lsrs	r3, r3, #6
 800b488:	2200      	movs	r2, #0
 800b48a:	623b      	str	r3, [r7, #32]
 800b48c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b494:	2100      	movs	r1, #0
 800b496:	4b47      	ldr	r3, [pc, #284]	@ (800b5b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b498:	fb03 f201 	mul.w	r2, r3, r1
 800b49c:	2300      	movs	r3, #0
 800b49e:	fb00 f303 	mul.w	r3, r0, r3
 800b4a2:	4413      	add	r3, r2
 800b4a4:	4a43      	ldr	r2, [pc, #268]	@ (800b5b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b4a6:	fba0 1202 	umull	r1, r2, r0, r2
 800b4aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4ac:	460a      	mov	r2, r1
 800b4ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b4b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4b2:	4413      	add	r3, r2
 800b4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	61bb      	str	r3, [r7, #24]
 800b4bc:	61fa      	str	r2, [r7, #28]
 800b4be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b4c6:	f7f5 fb8f 	bl	8000be8 <__aeabi_uldivmod>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4d2:	e053      	b.n	800b57c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4d4:	4b35      	ldr	r3, [pc, #212]	@ (800b5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	099b      	lsrs	r3, r3, #6
 800b4da:	2200      	movs	r2, #0
 800b4dc:	613b      	str	r3, [r7, #16]
 800b4de:	617a      	str	r2, [r7, #20]
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b4e6:	f04f 0b00 	mov.w	fp, #0
 800b4ea:	4652      	mov	r2, sl
 800b4ec:	465b      	mov	r3, fp
 800b4ee:	f04f 0000 	mov.w	r0, #0
 800b4f2:	f04f 0100 	mov.w	r1, #0
 800b4f6:	0159      	lsls	r1, r3, #5
 800b4f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b4fc:	0150      	lsls	r0, r2, #5
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	ebb2 080a 	subs.w	r8, r2, sl
 800b506:	eb63 090b 	sbc.w	r9, r3, fp
 800b50a:	f04f 0200 	mov.w	r2, #0
 800b50e:	f04f 0300 	mov.w	r3, #0
 800b512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b51a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b51e:	ebb2 0408 	subs.w	r4, r2, r8
 800b522:	eb63 0509 	sbc.w	r5, r3, r9
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	f04f 0300 	mov.w	r3, #0
 800b52e:	00eb      	lsls	r3, r5, #3
 800b530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b534:	00e2      	lsls	r2, r4, #3
 800b536:	4614      	mov	r4, r2
 800b538:	461d      	mov	r5, r3
 800b53a:	eb14 030a 	adds.w	r3, r4, sl
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	eb45 030b 	adc.w	r3, r5, fp
 800b544:	607b      	str	r3, [r7, #4]
 800b546:	f04f 0200 	mov.w	r2, #0
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b552:	4629      	mov	r1, r5
 800b554:	028b      	lsls	r3, r1, #10
 800b556:	4621      	mov	r1, r4
 800b558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b55c:	4621      	mov	r1, r4
 800b55e:	028a      	lsls	r2, r1, #10
 800b560:	4610      	mov	r0, r2
 800b562:	4619      	mov	r1, r3
 800b564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b566:	2200      	movs	r2, #0
 800b568:	60bb      	str	r3, [r7, #8]
 800b56a:	60fa      	str	r2, [r7, #12]
 800b56c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b570:	f7f5 fb3a 	bl	8000be8 <__aeabi_uldivmod>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4613      	mov	r3, r2
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b57c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	0c1b      	lsrs	r3, r3, #16
 800b582:	f003 0303 	and.w	r3, r3, #3
 800b586:	3301      	adds	r3, #1
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b58c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	fbb2 f3f3 	udiv	r3, r2, r3
 800b594:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b596:	e002      	b.n	800b59e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b598:	4b05      	ldr	r3, [pc, #20]	@ (800b5b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800b59a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b59c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3740      	adds	r7, #64	@ 0x40
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5aa:	bf00      	nop
 800b5ac:	40023800 	.word	0x40023800
 800b5b0:	00f42400 	.word	0x00f42400
 800b5b4:	017d7840 	.word	0x017d7840

0800b5b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5bc:	4b03      	ldr	r3, [pc, #12]	@ (800b5cc <HAL_RCC_GetHCLKFreq+0x14>)
 800b5be:	681b      	ldr	r3, [r3, #0]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	20000280 	.word	0x20000280

0800b5d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b5d4:	f7ff fff0 	bl	800b5b8 <HAL_RCC_GetHCLKFreq>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	4b05      	ldr	r3, [pc, #20]	@ (800b5f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	0a9b      	lsrs	r3, r3, #10
 800b5e0:	f003 0307 	and.w	r3, r3, #7
 800b5e4:	4903      	ldr	r1, [pc, #12]	@ (800b5f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5e6:	5ccb      	ldrb	r3, [r1, r3]
 800b5e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	40023800 	.word	0x40023800
 800b5f4:	08014a58 	.word	0x08014a58

0800b5f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b5fc:	f7ff ffdc 	bl	800b5b8 <HAL_RCC_GetHCLKFreq>
 800b600:	4602      	mov	r2, r0
 800b602:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	0b5b      	lsrs	r3, r3, #13
 800b608:	f003 0307 	and.w	r3, r3, #7
 800b60c:	4903      	ldr	r1, [pc, #12]	@ (800b61c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b60e:	5ccb      	ldrb	r3, [r1, r3]
 800b610:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b614:	4618      	mov	r0, r3
 800b616:	bd80      	pop	{r7, pc}
 800b618:	40023800 	.word	0x40023800
 800b61c:	08014a58 	.word	0x08014a58

0800b620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	220f      	movs	r2, #15
 800b62e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b630:	4b12      	ldr	r3, [pc, #72]	@ (800b67c <HAL_RCC_GetClockConfig+0x5c>)
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f003 0203 	and.w	r2, r3, #3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b63c:	4b0f      	ldr	r3, [pc, #60]	@ (800b67c <HAL_RCC_GetClockConfig+0x5c>)
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b648:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <HAL_RCC_GetClockConfig+0x5c>)
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b654:	4b09      	ldr	r3, [pc, #36]	@ (800b67c <HAL_RCC_GetClockConfig+0x5c>)
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	08db      	lsrs	r3, r3, #3
 800b65a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b662:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <HAL_RCC_GetClockConfig+0x60>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0207 	and.w	r2, r3, #7
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	601a      	str	r2, [r3, #0]
}
 800b66e:	bf00      	nop
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	40023800 	.word	0x40023800
 800b680:	40023c00 	.word	0x40023c00

0800b684 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d105      	bne.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d035      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b6ac:	4b62      	ldr	r3, [pc, #392]	@ (800b838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b6b2:	f7fd f9e1 	bl	8008a78 <HAL_GetTick>
 800b6b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b6b8:	e008      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b6ba:	f7fd f9dd 	bl	8008a78 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d901      	bls.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e0b0      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b6cc:	4b5b      	ldr	r3, [pc, #364]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1f0      	bne.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	019a      	lsls	r2, r3, #6
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	071b      	lsls	r3, r3, #28
 800b6e4:	4955      	ldr	r1, [pc, #340]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b6ec:	4b52      	ldr	r3, [pc, #328]	@ (800b838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b6f2:	f7fd f9c1 	bl	8008a78 <HAL_GetTick>
 800b6f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b6f8:	e008      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b6fa:	f7fd f9bd 	bl	8008a78 <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e090      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b70c:	4b4b      	ldr	r3, [pc, #300]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0f0      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 8083 	beq.w	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b726:	2300      	movs	r3, #0
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	4b44      	ldr	r3, [pc, #272]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72e:	4a43      	ldr	r2, [pc, #268]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b734:	6413      	str	r3, [r2, #64]	@ 0x40
 800b736:	4b41      	ldr	r3, [pc, #260]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b742:	4b3f      	ldr	r3, [pc, #252]	@ (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a3e      	ldr	r2, [pc, #248]	@ (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b74c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b74e:	f7fd f993 	bl	8008a78 <HAL_GetTick>
 800b752:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b754:	e008      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b756:	f7fd f98f 	bl	8008a78 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	2b02      	cmp	r3, #2
 800b762:	d901      	bls.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e062      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b768:	4b35      	ldr	r3, [pc, #212]	@ (800b840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0f0      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b774:	4b31      	ldr	r3, [pc, #196]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b77c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d02f      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d028      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b792:	4b2a      	ldr	r3, [pc, #168]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b79a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b79c:	4b29      	ldr	r3, [pc, #164]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b7a2:	4b28      	ldr	r3, [pc, #160]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b7a8:	4a24      	ldr	r2, [pc, #144]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b7ae:	4b23      	ldr	r3, [pc, #140]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d114      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b7ba:	f7fd f95d 	bl	8008a78 <HAL_GetTick>
 800b7be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7c0:	e00a      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7c2:	f7fd f959 	bl	8008a78 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e02a      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7d8:	4b18      	ldr	r3, [pc, #96]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b7da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0ee      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7f0:	d10d      	bne.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b7f2:	4b12      	ldr	r3, [pc, #72]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b806:	490d      	ldr	r1, [pc, #52]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	608b      	str	r3, [r1, #8]
 800b80c:	e005      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b80e:	4b0b      	ldr	r3, [pc, #44]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	4a0a      	ldr	r2, [pc, #40]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b814:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b818:	6093      	str	r3, [r2, #8]
 800b81a:	4b08      	ldr	r3, [pc, #32]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b81c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b826:	4905      	ldr	r1, [pc, #20]	@ (800b83c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b828:	4313      	orrs	r3, r2
 800b82a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	42470068 	.word	0x42470068
 800b83c:	40023800 	.word	0x40023800
 800b840:	40007000 	.word	0x40007000
 800b844:	42470e40 	.word	0x42470e40

0800b848 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e073      	b.n	800b946 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	7f5b      	ldrb	r3, [r3, #29]
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b00      	cmp	r3, #0
 800b866:	d105      	bne.n	800b874 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7fc fc34 	bl	80080dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2202      	movs	r2, #2
 800b878:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0310 	and.w	r3, r3, #16
 800b884:	2b10      	cmp	r3, #16
 800b886:	d055      	beq.n	800b934 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	22ca      	movs	r2, #202	@ 0xca
 800b88e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2253      	movs	r2, #83	@ 0x53
 800b896:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fa49 	bl	800bd30 <RTC_EnterInitMode>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d12c      	bne.n	800b902 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6812      	ldr	r2, [r2, #0]
 800b8b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b8b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6899      	ldr	r1, [r3, #8]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68d2      	ldr	r2, [r2, #12]
 800b8e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6919      	ldr	r1, [r3, #16]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	041a      	lsls	r2, r3, #16
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fa50 	bl	800bd9e <RTC_ExitInitMode>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d110      	bne.n	800b92a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b916:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	699a      	ldr	r2, [r3, #24]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	22ff      	movs	r2, #255	@ 0xff
 800b930:	625a      	str	r2, [r3, #36]	@ 0x24
 800b932:	e001      	b.n	800b938 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b944:	7bfb      	ldrb	r3, [r7, #15]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b94e:	b590      	push	{r4, r7, lr}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	7f1b      	ldrb	r3, [r3, #28]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d101      	bne.n	800b96a <HAL_RTC_SetTime+0x1c>
 800b966:	2302      	movs	r3, #2
 800b968:	e087      	b.n	800ba7a <HAL_RTC_SetTime+0x12c>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2201      	movs	r2, #1
 800b96e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2202      	movs	r2, #2
 800b974:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d126      	bne.n	800b9ca <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d102      	bne.n	800b990 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2200      	movs	r2, #0
 800b98e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	4618      	mov	r0, r3
 800b996:	f000 fa27 	bl	800bde8 <RTC_ByteToBcd2>
 800b99a:	4603      	mov	r3, r0
 800b99c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fa20 	bl	800bde8 <RTC_ByteToBcd2>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b9ac:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	789b      	ldrb	r3, [r3, #2]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fa18 	bl	800bde8 <RTC_ByteToBcd2>
 800b9b8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b9ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	78db      	ldrb	r3, [r3, #3]
 800b9c2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e018      	b.n	800b9fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d102      	bne.n	800b9de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	785b      	ldrb	r3, [r3, #1]
 800b9e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b9ea:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b9f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	78db      	ldrb	r3, [r3, #3]
 800b9f6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	22ca      	movs	r2, #202	@ 0xca
 800ba02:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2253      	movs	r2, #83	@ 0x53
 800ba0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f98f 	bl	800bd30 <RTC_EnterInitMode>
 800ba12:	4603      	mov	r3, r0
 800ba14:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ba16:	7cfb      	ldrb	r3, [r7, #19]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d120      	bne.n	800ba5e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ba26:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ba2a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689a      	ldr	r2, [r3, #8]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ba3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6899      	ldr	r1, [r3, #8]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f9a2 	bl	800bd9e <RTC_ExitInitMode>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ba5e:	7cfb      	ldrb	r3, [r7, #19]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d102      	bne.n	800ba6a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2201      	movs	r2, #1
 800ba68:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	22ff      	movs	r2, #255	@ 0xff
 800ba70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	771a      	strb	r2, [r3, #28]

  return status;
 800ba78:	7cfb      	ldrb	r3, [r7, #19]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	371c      	adds	r7, #28
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd90      	pop	{r4, r7, pc}

0800ba82 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b086      	sub	sp, #24
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800bab4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bab8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	0a1b      	lsrs	r3, r3, #8
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	b2db      	uxtb	r3, r3
 800bade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	0d9b      	lsrs	r3, r3, #22
 800baec:	b2db      	uxtb	r3, r3
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d11a      	bne.n	800bb34 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 f98e 	bl	800be24 <RTC_Bcd2ToByte>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	785b      	ldrb	r3, [r3, #1]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 f985 	bl	800be24 <RTC_Bcd2ToByte>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	789b      	ldrb	r3, [r3, #2]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f97c 	bl	800be24 <RTC_Bcd2ToByte>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	461a      	mov	r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bb3e:	b590      	push	{r4, r7, lr}
 800bb40:	b087      	sub	sp, #28
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	7f1b      	ldrb	r3, [r3, #28]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <HAL_RTC_SetDate+0x1c>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e071      	b.n	800bc3e <HAL_RTC_SetDate+0x100>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2202      	movs	r2, #2
 800bb64:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10e      	bne.n	800bb8a <HAL_RTC_SetDate+0x4c>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	785b      	ldrb	r3, [r3, #1]
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d008      	beq.n	800bb8a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	785b      	ldrb	r3, [r3, #1]
 800bb7c:	f023 0310 	bic.w	r3, r3, #16
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	330a      	adds	r3, #10
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d11c      	bne.n	800bbca <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	78db      	ldrb	r3, [r3, #3]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 f927 	bl	800bde8 <RTC_ByteToBcd2>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 f920 	bl	800bde8 <RTC_ByteToBcd2>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bbac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	789b      	ldrb	r3, [r3, #2]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 f918 	bl	800bde8 <RTC_ByteToBcd2>
 800bbb8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bbba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e00e      	b.n	800bbe8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	78db      	ldrb	r3, [r3, #3]
 800bbce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	785b      	ldrb	r3, [r3, #1]
 800bbd4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bbd6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bbdc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	22ca      	movs	r2, #202	@ 0xca
 800bbee:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2253      	movs	r2, #83	@ 0x53
 800bbf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f899 	bl	800bd30 <RTC_EnterInitMode>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bc02:	7cfb      	ldrb	r3, [r7, #19]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10c      	bne.n	800bc22 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bc12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bc16:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f8c0 	bl	800bd9e <RTC_ExitInitMode>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bc22:	7cfb      	ldrb	r3, [r7, #19]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d102      	bne.n	800bc2e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	22ff      	movs	r2, #255	@ 0xff
 800bc34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	771a      	strb	r2, [r3, #28]

  return status;
 800bc3c:	7cfb      	ldrb	r3, [r7, #19]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	371c      	adds	r7, #28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd90      	pop	{r4, r7, pc}

0800bc46 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b086      	sub	sp, #24
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	60b9      	str	r1, [r7, #8]
 800bc50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bc60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bc64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	0c1b      	lsrs	r3, r3, #16
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	0a1b      	lsrs	r3, r3, #8
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	f003 031f 	and.w	r3, r3, #31
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	0b5b      	lsrs	r3, r3, #13
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	f003 0307 	and.w	r3, r3, #7
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11a      	bne.n	800bcda <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	78db      	ldrb	r3, [r3, #3]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 f8bb 	bl	800be24 <RTC_Bcd2ToByte>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	785b      	ldrb	r3, [r3, #1]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 f8b2 	bl	800be24 <RTC_Bcd2ToByte>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	789b      	ldrb	r3, [r3, #2]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 f8a9 	bl	800be24 <RTC_Bcd2ToByte>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a0d      	ldr	r2, [pc, #52]	@ (800bd2c <HAL_RTC_WaitForSynchro+0x48>)
 800bcf6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bcf8:	f7fc febe 	bl	8008a78 <HAL_GetTick>
 800bcfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bcfe:	e009      	b.n	800bd14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd00:	f7fc feba 	bl	8008a78 <HAL_GetTick>
 800bd04:	4602      	mov	r2, r0
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd0e:	d901      	bls.n	800bd14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e007      	b.n	800bd24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	f003 0320 	and.w	r3, r3, #32
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d0ee      	beq.n	800bd00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	00017f5f 	.word	0x00017f5f

0800bd30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d122      	bne.n	800bd94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bd5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd5e:	f7fc fe8b 	bl	8008a78 <HAL_GetTick>
 800bd62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd64:	e00c      	b.n	800bd80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd66:	f7fc fe87 	bl	8008a78 <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd74:	d904      	bls.n	800bd80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <RTC_EnterInitMode+0x64>
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d1e8      	bne.n	800bd66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68da      	ldr	r2, [r3, #12]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f003 0320 	and.w	r3, r3, #32
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff ff8b 	bl	800bce4 <HAL_RTC_WaitForSynchro>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d004      	beq.n	800bdde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2204      	movs	r2, #4
 800bdd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bdf6:	e005      	b.n	800be04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	3b0a      	subs	r3, #10
 800be02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800be04:	79fb      	ldrb	r3, [r7, #7]
 800be06:	2b09      	cmp	r3, #9
 800be08:	d8f6      	bhi.n	800bdf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	b2da      	uxtb	r2, r3
 800be12:	79fb      	ldrb	r3, [r7, #7]
 800be14:	4313      	orrs	r3, r2
 800be16:	b2db      	uxtb	r3, r3
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	091b      	lsrs	r3, r3, #4
 800be36:	b2db      	uxtb	r3, r3
 800be38:	461a      	mov	r2, r3
 800be3a:	4613      	mov	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	b2da      	uxtb	r2, r3
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	f003 030f 	and.w	r3, r3, #15
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	4413      	add	r3, r2
 800be52:	b2db      	uxtb	r3, r3
}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e07b      	b.n	800bf6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be76:	2b00      	cmp	r3, #0
 800be78:	d108      	bne.n	800be8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800be82:	d009      	beq.n	800be98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	61da      	str	r2, [r3, #28]
 800be8a:	e005      	b.n	800be98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7fc f972 	bl	800819c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bece:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bee0:	431a      	orrs	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800beea:	431a      	orrs	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	f003 0302 	and.w	r3, r3, #2
 800bef4:	431a      	orrs	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	431a      	orrs	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf08:	431a      	orrs	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf1c:	ea42 0103 	orr.w	r1, r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	0c1b      	lsrs	r3, r3, #16
 800bf36:	f003 0104 	and.w	r1, r3, #4
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3e:	f003 0210 	and.w	r2, r3, #16
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69da      	ldr	r2, [r3, #28]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bf58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b088      	sub	sp, #32
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	603b      	str	r3, [r7, #0]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf82:	f7fc fd79 	bl	8008a78 <HAL_GetTick>
 800bf86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800bf88:	88fb      	ldrh	r3, [r7, #6]
 800bf8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d001      	beq.n	800bf9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e12a      	b.n	800c1f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <HAL_SPI_Transmit+0x36>
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e122      	b.n	800c1f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d101      	bne.n	800bfba <HAL_SPI_Transmit+0x48>
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	e11b      	b.n	800c1f2 <HAL_SPI_Transmit+0x280>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2203      	movs	r2, #3
 800bfc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	88fa      	ldrh	r2, [r7, #6]
 800bfda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	88fa      	ldrh	r2, [r7, #6]
 800bfe0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c008:	d10f      	bne.n	800c02a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c034:	2b40      	cmp	r3, #64	@ 0x40
 800c036:	d007      	beq.n	800c048 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c050:	d152      	bne.n	800c0f8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <HAL_SPI_Transmit+0xee>
 800c05a:	8b7b      	ldrh	r3, [r7, #26]
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d145      	bne.n	800c0ec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c064:	881a      	ldrh	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c070:	1c9a      	adds	r2, r3, #2
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c084:	e032      	b.n	800c0ec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	2b02      	cmp	r3, #2
 800c092:	d112      	bne.n	800c0ba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c098:	881a      	ldrh	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a4:	1c9a      	adds	r2, r3, #2
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c0b8:	e018      	b.n	800c0ec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ba:	f7fc fcdd 	bl	8008a78 <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d803      	bhi.n	800c0d2 <HAL_SPI_Transmit+0x160>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d0:	d102      	bne.n	800c0d8 <HAL_SPI_Transmit+0x166>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d109      	bne.n	800c0ec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	e082      	b.n	800c1f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1c7      	bne.n	800c086 <HAL_SPI_Transmit+0x114>
 800c0f6:	e053      	b.n	800c1a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <HAL_SPI_Transmit+0x194>
 800c100:	8b7b      	ldrh	r3, [r7, #26]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d147      	bne.n	800c196 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	330c      	adds	r3, #12
 800c110:	7812      	ldrb	r2, [r2, #0]
 800c112:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c122:	b29b      	uxth	r3, r3
 800c124:	3b01      	subs	r3, #1
 800c126:	b29a      	uxth	r2, r3
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c12c:	e033      	b.n	800c196 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d113      	bne.n	800c164 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	330c      	adds	r3, #12
 800c146:	7812      	ldrb	r2, [r2, #0]
 800c148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c158:	b29b      	uxth	r3, r3
 800c15a:	3b01      	subs	r3, #1
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c162:	e018      	b.n	800c196 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c164:	f7fc fc88 	bl	8008a78 <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d803      	bhi.n	800c17c <HAL_SPI_Transmit+0x20a>
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17a:	d102      	bne.n	800c182 <HAL_SPI_Transmit+0x210>
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d109      	bne.n	800c196 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800c192:	2303      	movs	r3, #3
 800c194:	e02d      	b.n	800c1f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1c6      	bne.n	800c12e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f8b1 	bl	800c30c <SPI_EndRxTxTransaction>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d002      	beq.n	800c1b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1be:	2300      	movs	r3, #0
 800c1c0:	617b      	str	r3, [r7, #20]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	617b      	str	r3, [r7, #20]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	617b      	str	r3, [r7, #20]
 800c1d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e000      	b.n	800c1f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
  }
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3720      	adds	r7, #32
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
	...

0800c1fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	4613      	mov	r3, r2
 800c20a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c20c:	f7fc fc34 	bl	8008a78 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c214:	1a9b      	subs	r3, r3, r2
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	4413      	add	r3, r2
 800c21a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c21c:	f7fc fc2c 	bl	8008a78 <HAL_GetTick>
 800c220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c222:	4b39      	ldr	r3, [pc, #228]	@ (800c308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	015b      	lsls	r3, r3, #5
 800c228:	0d1b      	lsrs	r3, r3, #20
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	fb02 f303 	mul.w	r3, r2, r3
 800c230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c232:	e054      	b.n	800c2de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23a:	d050      	beq.n	800c2de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c23c:	f7fc fc1c 	bl	8008a78 <HAL_GetTick>
 800c240:	4602      	mov	r2, r0
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	69fa      	ldr	r2, [r7, #28]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d902      	bls.n	800c252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d13d      	bne.n	800c2ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	685a      	ldr	r2, [r3, #4]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c26a:	d111      	bne.n	800c290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c274:	d004      	beq.n	800c280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c27e:	d107      	bne.n	800c290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c28e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c298:	d10f      	bne.n	800c2ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c2b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e017      	b.n	800c2fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	bf0c      	ite	eq
 800c2ee:	2301      	moveq	r3, #1
 800c2f0:	2300      	movne	r3, #0
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d19b      	bne.n	800c234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3720      	adds	r7, #32
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000280 	.word	0x20000280

0800c30c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2201      	movs	r2, #1
 800c320:	2102      	movs	r1, #2
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f7ff ff6a 	bl	800c1fc <SPI_WaitFlagStateUntilTimeout>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c332:	f043 0220 	orr.w	r2, r3, #32
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e032      	b.n	800c3a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c33e:	4b1b      	ldr	r3, [pc, #108]	@ (800c3ac <SPI_EndRxTxTransaction+0xa0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b0 <SPI_EndRxTxTransaction+0xa4>)
 800c344:	fba2 2303 	umull	r2, r3, r2, r3
 800c348:	0d5b      	lsrs	r3, r3, #21
 800c34a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c34e:	fb02 f303 	mul.w	r3, r2, r3
 800c352:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c35c:	d112      	bne.n	800c384 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2200      	movs	r2, #0
 800c366:	2180      	movs	r1, #128	@ 0x80
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f7ff ff47 	bl	800c1fc <SPI_WaitFlagStateUntilTimeout>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d016      	beq.n	800c3a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c378:	f043 0220 	orr.w	r2, r3, #32
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c380:	2303      	movs	r3, #3
 800c382:	e00f      	b.n	800c3a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c39a:	2b80      	cmp	r3, #128	@ 0x80
 800c39c:	d0f2      	beq.n	800c384 <SPI_EndRxTxTransaction+0x78>
 800c39e:	e000      	b.n	800c3a2 <SPI_EndRxTxTransaction+0x96>
        break;
 800c3a0:	bf00      	nop
  }

  return HAL_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000280 	.word	0x20000280
 800c3b0:	165e9f81 	.word	0x165e9f81

0800c3b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e041      	b.n	800c44a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7fc f932 	bl	8008644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	f000 fa7e 	bl	800c8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b01      	cmp	r3, #1
 800c466:	d001      	beq.n	800c46c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e04e      	b.n	800c50a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68da      	ldr	r2, [r3, #12]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f042 0201 	orr.w	r2, r2, #1
 800c482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a23      	ldr	r2, [pc, #140]	@ (800c518 <HAL_TIM_Base_Start_IT+0xc4>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d022      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c496:	d01d      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a1f      	ldr	r2, [pc, #124]	@ (800c51c <HAL_TIM_Base_Start_IT+0xc8>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d018      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a1e      	ldr	r2, [pc, #120]	@ (800c520 <HAL_TIM_Base_Start_IT+0xcc>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d013      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c524 <HAL_TIM_Base_Start_IT+0xd0>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d00e      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c528 <HAL_TIM_Base_Start_IT+0xd4>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d009      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a19      	ldr	r2, [pc, #100]	@ (800c52c <HAL_TIM_Base_Start_IT+0xd8>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d004      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x80>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a18      	ldr	r2, [pc, #96]	@ (800c530 <HAL_TIM_Base_Start_IT+0xdc>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d111      	bne.n	800c4f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f003 0307 	and.w	r3, r3, #7
 800c4de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b06      	cmp	r3, #6
 800c4e4:	d010      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f6:	e007      	b.n	800c508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f042 0201 	orr.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	40010000 	.word	0x40010000
 800c51c:	40000400 	.word	0x40000400
 800c520:	40000800 	.word	0x40000800
 800c524:	40000c00 	.word	0x40000c00
 800c528:	40010400 	.word	0x40010400
 800c52c:	40014000 	.word	0x40014000
 800c530:	40001800 	.word	0x40001800

0800c534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f003 0302 	and.w	r3, r3, #2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d020      	beq.n	800c598 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f003 0302 	and.w	r3, r3, #2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01b      	beq.n	800c598 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f06f 0202 	mvn.w	r2, #2
 800c568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	f003 0303 	and.w	r3, r3, #3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f999 	bl	800c8b6 <HAL_TIM_IC_CaptureCallback>
 800c584:	e005      	b.n	800c592 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f98b 	bl	800c8a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f99c 	bl	800c8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	f003 0304 	and.w	r3, r3, #4
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d020      	beq.n	800c5e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01b      	beq.n	800c5e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f06f 0204 	mvn.w	r2, #4
 800c5b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f973 	bl	800c8b6 <HAL_TIM_IC_CaptureCallback>
 800c5d0:	e005      	b.n	800c5de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f965 	bl	800c8a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f976 	bl	800c8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	f003 0308 	and.w	r3, r3, #8
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d020      	beq.n	800c630 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f003 0308 	and.w	r3, r3, #8
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01b      	beq.n	800c630 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f06f 0208 	mvn.w	r2, #8
 800c600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2204      	movs	r2, #4
 800c606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	69db      	ldr	r3, [r3, #28]
 800c60e:	f003 0303 	and.w	r3, r3, #3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d003      	beq.n	800c61e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f94d 	bl	800c8b6 <HAL_TIM_IC_CaptureCallback>
 800c61c:	e005      	b.n	800c62a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f93f 	bl	800c8a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f950 	bl	800c8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	f003 0310 	and.w	r3, r3, #16
 800c636:	2b00      	cmp	r3, #0
 800c638:	d020      	beq.n	800c67c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f003 0310 	and.w	r3, r3, #16
 800c640:	2b00      	cmp	r3, #0
 800c642:	d01b      	beq.n	800c67c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f06f 0210 	mvn.w	r2, #16
 800c64c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2208      	movs	r2, #8
 800c652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f927 	bl	800c8b6 <HAL_TIM_IC_CaptureCallback>
 800c668:	e005      	b.n	800c676 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f919 	bl	800c8a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f92a 	bl	800c8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00c      	beq.n	800c6a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d007      	beq.n	800c6a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f06f 0201 	mvn.w	r2, #1
 800c698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7fb fce0 	bl	8008060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00c      	beq.n	800c6c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d007      	beq.n	800c6c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c6bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fae4 	bl	800cc8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00c      	beq.n	800c6e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d007      	beq.n	800c6e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c6e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f8fb 	bl	800c8de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	f003 0320 	and.w	r3, r3, #32
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00c      	beq.n	800c70c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f003 0320 	and.w	r3, r3, #32
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d007      	beq.n	800c70c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f06f 0220 	mvn.w	r2, #32
 800c704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fab6 	bl	800cc78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c70c:	bf00      	nop
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d101      	bne.n	800c730 <HAL_TIM_ConfigClockSource+0x1c>
 800c72c:	2302      	movs	r3, #2
 800c72e:	e0b4      	b.n	800c89a <HAL_TIM_ConfigClockSource+0x186>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c74e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c768:	d03e      	beq.n	800c7e8 <HAL_TIM_ConfigClockSource+0xd4>
 800c76a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c76e:	f200 8087 	bhi.w	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c776:	f000 8086 	beq.w	800c886 <HAL_TIM_ConfigClockSource+0x172>
 800c77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c77e:	d87f      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c780:	2b70      	cmp	r3, #112	@ 0x70
 800c782:	d01a      	beq.n	800c7ba <HAL_TIM_ConfigClockSource+0xa6>
 800c784:	2b70      	cmp	r3, #112	@ 0x70
 800c786:	d87b      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c788:	2b60      	cmp	r3, #96	@ 0x60
 800c78a:	d050      	beq.n	800c82e <HAL_TIM_ConfigClockSource+0x11a>
 800c78c:	2b60      	cmp	r3, #96	@ 0x60
 800c78e:	d877      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c790:	2b50      	cmp	r3, #80	@ 0x50
 800c792:	d03c      	beq.n	800c80e <HAL_TIM_ConfigClockSource+0xfa>
 800c794:	2b50      	cmp	r3, #80	@ 0x50
 800c796:	d873      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c798:	2b40      	cmp	r3, #64	@ 0x40
 800c79a:	d058      	beq.n	800c84e <HAL_TIM_ConfigClockSource+0x13a>
 800c79c:	2b40      	cmp	r3, #64	@ 0x40
 800c79e:	d86f      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c7a0:	2b30      	cmp	r3, #48	@ 0x30
 800c7a2:	d064      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x15a>
 800c7a4:	2b30      	cmp	r3, #48	@ 0x30
 800c7a6:	d86b      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c7a8:	2b20      	cmp	r3, #32
 800c7aa:	d060      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x15a>
 800c7ac:	2b20      	cmp	r3, #32
 800c7ae:	d867      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d05c      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x15a>
 800c7b4:	2b10      	cmp	r3, #16
 800c7b6:	d05a      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x15a>
 800c7b8:	e062      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7ca:	f000 f9b9 	bl	800cb40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c7dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	609a      	str	r2, [r3, #8]
      break;
 800c7e6:	e04f      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7f8:	f000 f9a2 	bl	800cb40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	689a      	ldr	r2, [r3, #8]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c80a:	609a      	str	r2, [r3, #8]
      break;
 800c80c:	e03c      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c81a:	461a      	mov	r2, r3
 800c81c:	f000 f916 	bl	800ca4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2150      	movs	r1, #80	@ 0x50
 800c826:	4618      	mov	r0, r3
 800c828:	f000 f96f 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c82c:	e02c      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c83a:	461a      	mov	r2, r3
 800c83c:	f000 f935 	bl	800caaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2160      	movs	r1, #96	@ 0x60
 800c846:	4618      	mov	r0, r3
 800c848:	f000 f95f 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c84c:	e01c      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c85a:	461a      	mov	r2, r3
 800c85c:	f000 f8f6 	bl	800ca4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2140      	movs	r1, #64	@ 0x40
 800c866:	4618      	mov	r0, r3
 800c868:	f000 f94f 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c86c:	e00c      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f000 f946 	bl	800cb0a <TIM_ITRx_SetConfig>
      break;
 800c87e:	e003      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	73fb      	strb	r3, [r7, #15]
      break;
 800c884:	e000      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c898:	7bfb      	ldrb	r3, [r7, #15]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b083      	sub	sp, #12
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8aa:	bf00      	nop
 800c8ac:	370c      	adds	r7, #12
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8be:	bf00      	nop
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8d2:	bf00      	nop
 800c8d4:	370c      	adds	r7, #12
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr

0800c8de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b083      	sub	sp, #12
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8e6:	bf00      	nop
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
	...

0800c8f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a46      	ldr	r2, [pc, #280]	@ (800ca20 <TIM_Base_SetConfig+0x12c>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d013      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c912:	d00f      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a43      	ldr	r2, [pc, #268]	@ (800ca24 <TIM_Base_SetConfig+0x130>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d00b      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a42      	ldr	r2, [pc, #264]	@ (800ca28 <TIM_Base_SetConfig+0x134>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d007      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a41      	ldr	r2, [pc, #260]	@ (800ca2c <TIM_Base_SetConfig+0x138>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d003      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a40      	ldr	r2, [pc, #256]	@ (800ca30 <TIM_Base_SetConfig+0x13c>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d108      	bne.n	800c946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c93a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	4313      	orrs	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a35      	ldr	r2, [pc, #212]	@ (800ca20 <TIM_Base_SetConfig+0x12c>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d02b      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c954:	d027      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a32      	ldr	r2, [pc, #200]	@ (800ca24 <TIM_Base_SetConfig+0x130>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d023      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a31      	ldr	r2, [pc, #196]	@ (800ca28 <TIM_Base_SetConfig+0x134>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d01f      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a30      	ldr	r2, [pc, #192]	@ (800ca2c <TIM_Base_SetConfig+0x138>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d01b      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a2f      	ldr	r2, [pc, #188]	@ (800ca30 <TIM_Base_SetConfig+0x13c>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d017      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a2e      	ldr	r2, [pc, #184]	@ (800ca34 <TIM_Base_SetConfig+0x140>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d013      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a2d      	ldr	r2, [pc, #180]	@ (800ca38 <TIM_Base_SetConfig+0x144>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00f      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a2c      	ldr	r2, [pc, #176]	@ (800ca3c <TIM_Base_SetConfig+0x148>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d00b      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a2b      	ldr	r2, [pc, #172]	@ (800ca40 <TIM_Base_SetConfig+0x14c>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d007      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a2a      	ldr	r2, [pc, #168]	@ (800ca44 <TIM_Base_SetConfig+0x150>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d003      	beq.n	800c9a6 <TIM_Base_SetConfig+0xb2>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a29      	ldr	r2, [pc, #164]	@ (800ca48 <TIM_Base_SetConfig+0x154>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d108      	bne.n	800c9b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	695b      	ldr	r3, [r3, #20]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	689a      	ldr	r2, [r3, #8]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a10      	ldr	r2, [pc, #64]	@ (800ca20 <TIM_Base_SetConfig+0x12c>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d003      	beq.n	800c9ec <TIM_Base_SetConfig+0xf8>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a12      	ldr	r2, [pc, #72]	@ (800ca30 <TIM_Base_SetConfig+0x13c>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d103      	bne.n	800c9f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	691a      	ldr	r2, [r3, #16]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	f003 0301 	and.w	r3, r3, #1
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d105      	bne.n	800ca12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	f023 0201 	bic.w	r2, r3, #1
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	611a      	str	r2, [r3, #16]
  }
}
 800ca12:	bf00      	nop
 800ca14:	3714      	adds	r7, #20
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	40010000 	.word	0x40010000
 800ca24:	40000400 	.word	0x40000400
 800ca28:	40000800 	.word	0x40000800
 800ca2c:	40000c00 	.word	0x40000c00
 800ca30:	40010400 	.word	0x40010400
 800ca34:	40014000 	.word	0x40014000
 800ca38:	40014400 	.word	0x40014400
 800ca3c:	40014800 	.word	0x40014800
 800ca40:	40001800 	.word	0x40001800
 800ca44:	40001c00 	.word	0x40001c00
 800ca48:	40002000 	.word	0x40002000

0800ca4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	f023 0201 	bic.w	r2, r3, #1
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f023 030a 	bic.w	r3, r3, #10
 800ca88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	621a      	str	r2, [r3, #32]
}
 800ca9e:	bf00      	nop
 800caa0:	371c      	adds	r7, #28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caaa:	b480      	push	{r7}
 800caac:	b087      	sub	sp, #28
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	f023 0210 	bic.w	r2, r3, #16
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	031b      	lsls	r3, r3, #12
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	4313      	orrs	r3, r2
 800cade:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cae6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	011b      	lsls	r3, r3, #4
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	4313      	orrs	r3, r2
 800caf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	621a      	str	r2, [r3, #32]
}
 800cafe:	bf00      	nop
 800cb00:	371c      	adds	r7, #28
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b085      	sub	sp, #20
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	f043 0307 	orr.w	r3, r3, #7
 800cb2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	609a      	str	r2, [r3, #8]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	021a      	lsls	r2, r3, #8
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	609a      	str	r2, [r3, #8]
}
 800cb74:	bf00      	nop
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb94:	2302      	movs	r3, #2
 800cb96:	e05a      	b.n	800cc4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a21      	ldr	r2, [pc, #132]	@ (800cc5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d022      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbe4:	d01d      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a1d      	ldr	r2, [pc, #116]	@ (800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d018      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a1b      	ldr	r2, [pc, #108]	@ (800cc64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d013      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a1a      	ldr	r2, [pc, #104]	@ (800cc68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d00e      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a18      	ldr	r2, [pc, #96]	@ (800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d009      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a17      	ldr	r2, [pc, #92]	@ (800cc70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d004      	beq.n	800cc22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a15      	ldr	r2, [pc, #84]	@ (800cc74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d10c      	bne.n	800cc3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	40010000 	.word	0x40010000
 800cc60:	40000400 	.word	0x40000400
 800cc64:	40000800 	.word	0x40000800
 800cc68:	40000c00 	.word	0x40000c00
 800cc6c:	40010400 	.word	0x40010400
 800cc70:	40014000 	.word	0x40014000
 800cc74:	40001800 	.word	0x40001800

0800cc78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e042      	b.n	800cd38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d106      	bne.n	800cccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7fb fd86 	bl	80087d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2224      	movs	r2, #36	@ 0x24
 800ccd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68da      	ldr	r2, [r3, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 faaf 	bl	800d248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	691a      	ldr	r2, [r3, #16]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ccf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	695a      	ldr	r2, [r3, #20]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2220      	movs	r2, #32
 800cd24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08a      	sub	sp, #40	@ 0x28
 800cd44:	af02      	add	r7, sp, #8
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cd50:	2300      	movs	r3, #0
 800cd52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	2b20      	cmp	r3, #32
 800cd5e:	d175      	bne.n	800ce4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d002      	beq.n	800cd6c <HAL_UART_Transmit+0x2c>
 800cd66:	88fb      	ldrh	r3, [r7, #6]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e06e      	b.n	800ce4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2221      	movs	r2, #33	@ 0x21
 800cd7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd7e:	f7fb fe7b 	bl	8008a78 <HAL_GetTick>
 800cd82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	88fa      	ldrh	r2, [r7, #6]
 800cd88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	88fa      	ldrh	r2, [r7, #6]
 800cd8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd98:	d108      	bne.n	800cdac <HAL_UART_Transmit+0x6c>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d104      	bne.n	800cdac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	61bb      	str	r3, [r7, #24]
 800cdaa:	e003      	b.n	800cdb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cdb4:	e02e      	b.n	800ce14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2180      	movs	r1, #128	@ 0x80
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 f933 	bl	800d02c <UART_WaitOnFlagUntilTimeout>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	e03a      	b.n	800ce4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10b      	bne.n	800cdf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	3302      	adds	r3, #2
 800cdf2:	61bb      	str	r3, [r7, #24]
 800cdf4:	e007      	b.n	800ce06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	781a      	ldrb	r2, [r3, #0]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	3301      	adds	r3, #1
 800ce04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1cb      	bne.n	800cdb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	2200      	movs	r2, #0
 800ce26:	2140      	movs	r1, #64	@ 0x40
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f000 f8ff 	bl	800d02c <UART_WaitOnFlagUntilTimeout>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d005      	beq.n	800ce40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2220      	movs	r2, #32
 800ce38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e006      	b.n	800ce4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2220      	movs	r2, #32
 800ce44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	e000      	b.n	800ce4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ce4c:	2302      	movs	r3, #2
  }
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3720      	adds	r7, #32
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	4613      	mov	r3, r2
 800ce62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b20      	cmp	r3, #32
 800ce6e:	d112      	bne.n	800ce96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <HAL_UART_Receive_IT+0x26>
 800ce76:	88fb      	ldrh	r3, [r7, #6]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e00b      	b.n	800ce98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ce86:	88fb      	ldrh	r3, [r7, #6]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	68b9      	ldr	r1, [r7, #8]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f000 f926 	bl	800d0de <UART_Start_Receive_IT>
 800ce92:	4603      	mov	r3, r0
 800ce94:	e000      	b.n	800ce98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ce96:	2302      	movs	r3, #2
  }
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b09a      	sub	sp, #104	@ 0x68
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	330c      	adds	r3, #12
 800ceae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ceb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cebe:	667b      	str	r3, [r7, #100]	@ 0x64
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	330c      	adds	r3, #12
 800cec6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cec8:	657a      	str	r2, [r7, #84]	@ 0x54
 800ceca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ced6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e5      	bne.n	800cea8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3314      	adds	r3, #20
 800cee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee6:	e853 3f00 	ldrex	r3, [r3]
 800ceea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceee:	f023 0301 	bic.w	r3, r3, #1
 800cef2:	663b      	str	r3, [r7, #96]	@ 0x60
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3314      	adds	r3, #20
 800cefa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cefc:	643a      	str	r2, [r7, #64]	@ 0x40
 800cefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e5      	bne.n	800cedc <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d119      	bne.n	800cf4c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	330c      	adds	r3, #12
 800cf1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	e853 3f00 	ldrex	r3, [r3]
 800cf26:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	f023 0310 	bic.w	r3, r3, #16
 800cf2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	330c      	adds	r3, #12
 800cf36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cf38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf40:	e841 2300 	strex	r3, r2, [r1]
 800cf44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1e5      	bne.n	800cf18 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf56:	2b40      	cmp	r3, #64	@ 0x40
 800cf58:	d13f      	bne.n	800cfda <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3314      	adds	r3, #20
 800cf60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	e853 3f00 	ldrex	r3, [r3]
 800cf68:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf70:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3314      	adds	r3, #20
 800cf78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf7a:	61ba      	str	r2, [r7, #24]
 800cf7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7e:	6979      	ldr	r1, [r7, #20]
 800cf80:	69ba      	ldr	r2, [r7, #24]
 800cf82:	e841 2300 	strex	r3, r2, [r1]
 800cf86:	613b      	str	r3, [r7, #16]
   return(result);
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e5      	bne.n	800cf5a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d013      	beq.n	800cfbe <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf9a:	4a19      	ldr	r2, [pc, #100]	@ (800d000 <HAL_UART_AbortReceive_IT+0x160>)
 800cf9c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fc fbb2 	bl	800970c <HAL_DMA_Abort_IT>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d022      	beq.n	800cff4 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4798      	blx	r3
 800cfbc:	e01a      	b.n	800cff4 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f820 	bl	800d018 <HAL_UART_AbortReceiveCpltCallback>
 800cfd8:	e00c      	b.n	800cff4 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f812 	bl	800d018 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3768      	adds	r7, #104	@ 0x68
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	0800d219 	.word	0x0800d219

0800d004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	4613      	mov	r3, r2
 800d03a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d03c:	e03b      	b.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d044:	d037      	beq.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d046:	f7fb fd17 	bl	8008a78 <HAL_GetTick>
 800d04a:	4602      	mov	r2, r0
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	6a3a      	ldr	r2, [r7, #32]
 800d052:	429a      	cmp	r2, r3
 800d054:	d302      	bcc.n	800d05c <UART_WaitOnFlagUntilTimeout+0x30>
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d101      	bne.n	800d060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e03a      	b.n	800d0d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	f003 0304 	and.w	r3, r3, #4
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d023      	beq.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b80      	cmp	r3, #128	@ 0x80
 800d072:	d020      	beq.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2b40      	cmp	r3, #64	@ 0x40
 800d078:	d01d      	beq.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 0308 	and.w	r3, r3, #8
 800d084:	2b08      	cmp	r3, #8
 800d086:	d116      	bne.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d088:	2300      	movs	r3, #0
 800d08a:	617b      	str	r3, [r7, #20]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f000 f857 	bl	800d152 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2208      	movs	r2, #8
 800d0a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e00f      	b.n	800d0d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	4013      	ands	r3, r2
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	bf0c      	ite	eq
 800d0c6:	2301      	moveq	r3, #1
 800d0c8:	2300      	movne	r3, #0
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d0b4      	beq.n	800d03e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3718      	adds	r7, #24
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	88fa      	ldrh	r2, [r7, #6]
 800d0f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	88fa      	ldrh	r2, [r7, #6]
 800d0fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2222      	movs	r2, #34	@ 0x22
 800d108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d007      	beq.n	800d124 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d122:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	695a      	ldr	r2, [r3, #20]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f042 0201 	orr.w	r2, r2, #1
 800d132:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68da      	ldr	r2, [r3, #12]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f042 0220 	orr.w	r2, r2, #32
 800d142:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d152:	b480      	push	{r7}
 800d154:	b095      	sub	sp, #84	@ 0x54
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	330c      	adds	r3, #12
 800d160:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d164:	e853 3f00 	ldrex	r3, [r3]
 800d168:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	330c      	adds	r3, #12
 800d178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d17a:	643a      	str	r2, [r7, #64]	@ 0x40
 800d17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d180:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d182:	e841 2300 	strex	r3, r2, [r1]
 800d186:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1e5      	bne.n	800d15a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3314      	adds	r3, #20
 800d194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	e853 3f00 	ldrex	r3, [r3]
 800d19c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	f023 0301 	bic.w	r3, r3, #1
 800d1a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1b6:	e841 2300 	strex	r3, r2, [r1]
 800d1ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e5      	bne.n	800d18e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d119      	bne.n	800d1fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	330c      	adds	r3, #12
 800d1d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	e853 3f00 	ldrex	r3, [r3]
 800d1d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	f023 0310 	bic.w	r3, r3, #16
 800d1e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	330c      	adds	r3, #12
 800d1e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1ea:	61ba      	str	r2, [r7, #24]
 800d1ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ee:	6979      	ldr	r1, [r7, #20]
 800d1f0:	69ba      	ldr	r2, [r7, #24]
 800d1f2:	e841 2300 	strex	r3, r2, [r1]
 800d1f6:	613b      	str	r3, [r7, #16]
   return(result);
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e5      	bne.n	800d1ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2220      	movs	r2, #32
 800d202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d20c:	bf00      	nop
 800d20e:	3754      	adds	r7, #84	@ 0x54
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d224:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2220      	movs	r2, #32
 800d230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f7ff feec 	bl	800d018 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d240:	bf00      	nop
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d24c:	b0c0      	sub	sp, #256	@ 0x100
 800d24e:	af00      	add	r7, sp, #0
 800d250:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d264:	68d9      	ldr	r1, [r3, #12]
 800d266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	ea40 0301 	orr.w	r3, r0, r1
 800d270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	431a      	orrs	r2, r3
 800d280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	431a      	orrs	r2, r3
 800d288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d28c:	69db      	ldr	r3, [r3, #28]
 800d28e:	4313      	orrs	r3, r2
 800d290:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d2a0:	f021 010c 	bic.w	r1, r1, #12
 800d2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d2ae:	430b      	orrs	r3, r1
 800d2b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c2:	6999      	ldr	r1, [r3, #24]
 800d2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	ea40 0301 	orr.w	r3, r0, r1
 800d2ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	4b8f      	ldr	r3, [pc, #572]	@ (800d514 <UART_SetConfig+0x2cc>)
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d005      	beq.n	800d2e8 <UART_SetConfig+0xa0>
 800d2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	4b8d      	ldr	r3, [pc, #564]	@ (800d518 <UART_SetConfig+0x2d0>)
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d104      	bne.n	800d2f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d2e8:	f7fe f986 	bl	800b5f8 <HAL_RCC_GetPCLK2Freq>
 800d2ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d2f0:	e003      	b.n	800d2fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d2f2:	f7fe f96d 	bl	800b5d0 <HAL_RCC_GetPCLK1Freq>
 800d2f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d304:	f040 810c 	bne.w	800d520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d31a:	4622      	mov	r2, r4
 800d31c:	462b      	mov	r3, r5
 800d31e:	1891      	adds	r1, r2, r2
 800d320:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d322:	415b      	adcs	r3, r3
 800d324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d32a:	4621      	mov	r1, r4
 800d32c:	eb12 0801 	adds.w	r8, r2, r1
 800d330:	4629      	mov	r1, r5
 800d332:	eb43 0901 	adc.w	r9, r3, r1
 800d336:	f04f 0200 	mov.w	r2, #0
 800d33a:	f04f 0300 	mov.w	r3, #0
 800d33e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d34a:	4690      	mov	r8, r2
 800d34c:	4699      	mov	r9, r3
 800d34e:	4623      	mov	r3, r4
 800d350:	eb18 0303 	adds.w	r3, r8, r3
 800d354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d358:	462b      	mov	r3, r5
 800d35a:	eb49 0303 	adc.w	r3, r9, r3
 800d35e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d36e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d376:	460b      	mov	r3, r1
 800d378:	18db      	adds	r3, r3, r3
 800d37a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d37c:	4613      	mov	r3, r2
 800d37e:	eb42 0303 	adc.w	r3, r2, r3
 800d382:	657b      	str	r3, [r7, #84]	@ 0x54
 800d384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d38c:	f7f3 fc2c 	bl	8000be8 <__aeabi_uldivmod>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4b61      	ldr	r3, [pc, #388]	@ (800d51c <UART_SetConfig+0x2d4>)
 800d396:	fba3 2302 	umull	r2, r3, r3, r2
 800d39a:	095b      	lsrs	r3, r3, #5
 800d39c:	011c      	lsls	r4, r3, #4
 800d39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d3a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d3ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d3b0:	4642      	mov	r2, r8
 800d3b2:	464b      	mov	r3, r9
 800d3b4:	1891      	adds	r1, r2, r2
 800d3b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d3b8:	415b      	adcs	r3, r3
 800d3ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d3c0:	4641      	mov	r1, r8
 800d3c2:	eb12 0a01 	adds.w	sl, r2, r1
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	eb43 0b01 	adc.w	fp, r3, r1
 800d3cc:	f04f 0200 	mov.w	r2, #0
 800d3d0:	f04f 0300 	mov.w	r3, #0
 800d3d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d3d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d3dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3e0:	4692      	mov	sl, r2
 800d3e2:	469b      	mov	fp, r3
 800d3e4:	4643      	mov	r3, r8
 800d3e6:	eb1a 0303 	adds.w	r3, sl, r3
 800d3ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d3ee:	464b      	mov	r3, r9
 800d3f0:	eb4b 0303 	adc.w	r3, fp, r3
 800d3f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d404:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d40c:	460b      	mov	r3, r1
 800d40e:	18db      	adds	r3, r3, r3
 800d410:	643b      	str	r3, [r7, #64]	@ 0x40
 800d412:	4613      	mov	r3, r2
 800d414:	eb42 0303 	adc.w	r3, r2, r3
 800d418:	647b      	str	r3, [r7, #68]	@ 0x44
 800d41a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d41e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d422:	f7f3 fbe1 	bl	8000be8 <__aeabi_uldivmod>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	4611      	mov	r1, r2
 800d42c:	4b3b      	ldr	r3, [pc, #236]	@ (800d51c <UART_SetConfig+0x2d4>)
 800d42e:	fba3 2301 	umull	r2, r3, r3, r1
 800d432:	095b      	lsrs	r3, r3, #5
 800d434:	2264      	movs	r2, #100	@ 0x64
 800d436:	fb02 f303 	mul.w	r3, r2, r3
 800d43a:	1acb      	subs	r3, r1, r3
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d442:	4b36      	ldr	r3, [pc, #216]	@ (800d51c <UART_SetConfig+0x2d4>)
 800d444:	fba3 2302 	umull	r2, r3, r3, r2
 800d448:	095b      	lsrs	r3, r3, #5
 800d44a:	005b      	lsls	r3, r3, #1
 800d44c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d450:	441c      	add	r4, r3
 800d452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d456:	2200      	movs	r2, #0
 800d458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d45c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d464:	4642      	mov	r2, r8
 800d466:	464b      	mov	r3, r9
 800d468:	1891      	adds	r1, r2, r2
 800d46a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d46c:	415b      	adcs	r3, r3
 800d46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d474:	4641      	mov	r1, r8
 800d476:	1851      	adds	r1, r2, r1
 800d478:	6339      	str	r1, [r7, #48]	@ 0x30
 800d47a:	4649      	mov	r1, r9
 800d47c:	414b      	adcs	r3, r1
 800d47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	f04f 0300 	mov.w	r3, #0
 800d488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d48c:	4659      	mov	r1, fp
 800d48e:	00cb      	lsls	r3, r1, #3
 800d490:	4651      	mov	r1, sl
 800d492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d496:	4651      	mov	r1, sl
 800d498:	00ca      	lsls	r2, r1, #3
 800d49a:	4610      	mov	r0, r2
 800d49c:	4619      	mov	r1, r3
 800d49e:	4603      	mov	r3, r0
 800d4a0:	4642      	mov	r2, r8
 800d4a2:	189b      	adds	r3, r3, r2
 800d4a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4a8:	464b      	mov	r3, r9
 800d4aa:	460a      	mov	r2, r1
 800d4ac:	eb42 0303 	adc.w	r3, r2, r3
 800d4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d4c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d4c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	18db      	adds	r3, r3, r3
 800d4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	eb42 0303 	adc.w	r3, r2, r3
 800d4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d4da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d4de:	f7f3 fb83 	bl	8000be8 <__aeabi_uldivmod>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d51c <UART_SetConfig+0x2d4>)
 800d4e8:	fba3 1302 	umull	r1, r3, r3, r2
 800d4ec:	095b      	lsrs	r3, r3, #5
 800d4ee:	2164      	movs	r1, #100	@ 0x64
 800d4f0:	fb01 f303 	mul.w	r3, r1, r3
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	3332      	adds	r3, #50	@ 0x32
 800d4fa:	4a08      	ldr	r2, [pc, #32]	@ (800d51c <UART_SetConfig+0x2d4>)
 800d4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d500:	095b      	lsrs	r3, r3, #5
 800d502:	f003 0207 	and.w	r2, r3, #7
 800d506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4422      	add	r2, r4
 800d50e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d510:	e106      	b.n	800d720 <UART_SetConfig+0x4d8>
 800d512:	bf00      	nop
 800d514:	40011000 	.word	0x40011000
 800d518:	40011400 	.word	0x40011400
 800d51c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d524:	2200      	movs	r2, #0
 800d526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d52a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d52e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d532:	4642      	mov	r2, r8
 800d534:	464b      	mov	r3, r9
 800d536:	1891      	adds	r1, r2, r2
 800d538:	6239      	str	r1, [r7, #32]
 800d53a:	415b      	adcs	r3, r3
 800d53c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d53e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d542:	4641      	mov	r1, r8
 800d544:	1854      	adds	r4, r2, r1
 800d546:	4649      	mov	r1, r9
 800d548:	eb43 0501 	adc.w	r5, r3, r1
 800d54c:	f04f 0200 	mov.w	r2, #0
 800d550:	f04f 0300 	mov.w	r3, #0
 800d554:	00eb      	lsls	r3, r5, #3
 800d556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d55a:	00e2      	lsls	r2, r4, #3
 800d55c:	4614      	mov	r4, r2
 800d55e:	461d      	mov	r5, r3
 800d560:	4643      	mov	r3, r8
 800d562:	18e3      	adds	r3, r4, r3
 800d564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d568:	464b      	mov	r3, r9
 800d56a:	eb45 0303 	adc.w	r3, r5, r3
 800d56e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d57e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d582:	f04f 0200 	mov.w	r2, #0
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d58e:	4629      	mov	r1, r5
 800d590:	008b      	lsls	r3, r1, #2
 800d592:	4621      	mov	r1, r4
 800d594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d598:	4621      	mov	r1, r4
 800d59a:	008a      	lsls	r2, r1, #2
 800d59c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d5a0:	f7f3 fb22 	bl	8000be8 <__aeabi_uldivmod>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4b60      	ldr	r3, [pc, #384]	@ (800d72c <UART_SetConfig+0x4e4>)
 800d5aa:	fba3 2302 	umull	r2, r3, r3, r2
 800d5ae:	095b      	lsrs	r3, r3, #5
 800d5b0:	011c      	lsls	r4, r3, #4
 800d5b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d5bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d5c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d5c4:	4642      	mov	r2, r8
 800d5c6:	464b      	mov	r3, r9
 800d5c8:	1891      	adds	r1, r2, r2
 800d5ca:	61b9      	str	r1, [r7, #24]
 800d5cc:	415b      	adcs	r3, r3
 800d5ce:	61fb      	str	r3, [r7, #28]
 800d5d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5d4:	4641      	mov	r1, r8
 800d5d6:	1851      	adds	r1, r2, r1
 800d5d8:	6139      	str	r1, [r7, #16]
 800d5da:	4649      	mov	r1, r9
 800d5dc:	414b      	adcs	r3, r1
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	f04f 0200 	mov.w	r2, #0
 800d5e4:	f04f 0300 	mov.w	r3, #0
 800d5e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d5ec:	4659      	mov	r1, fp
 800d5ee:	00cb      	lsls	r3, r1, #3
 800d5f0:	4651      	mov	r1, sl
 800d5f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d5f6:	4651      	mov	r1, sl
 800d5f8:	00ca      	lsls	r2, r1, #3
 800d5fa:	4610      	mov	r0, r2
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4603      	mov	r3, r0
 800d600:	4642      	mov	r2, r8
 800d602:	189b      	adds	r3, r3, r2
 800d604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d608:	464b      	mov	r3, r9
 800d60a:	460a      	mov	r2, r1
 800d60c:	eb42 0303 	adc.w	r3, r2, r3
 800d610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d61e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d620:	f04f 0200 	mov.w	r2, #0
 800d624:	f04f 0300 	mov.w	r3, #0
 800d628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d62c:	4649      	mov	r1, r9
 800d62e:	008b      	lsls	r3, r1, #2
 800d630:	4641      	mov	r1, r8
 800d632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d636:	4641      	mov	r1, r8
 800d638:	008a      	lsls	r2, r1, #2
 800d63a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d63e:	f7f3 fad3 	bl	8000be8 <__aeabi_uldivmod>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4611      	mov	r1, r2
 800d648:	4b38      	ldr	r3, [pc, #224]	@ (800d72c <UART_SetConfig+0x4e4>)
 800d64a:	fba3 2301 	umull	r2, r3, r3, r1
 800d64e:	095b      	lsrs	r3, r3, #5
 800d650:	2264      	movs	r2, #100	@ 0x64
 800d652:	fb02 f303 	mul.w	r3, r2, r3
 800d656:	1acb      	subs	r3, r1, r3
 800d658:	011b      	lsls	r3, r3, #4
 800d65a:	3332      	adds	r3, #50	@ 0x32
 800d65c:	4a33      	ldr	r2, [pc, #204]	@ (800d72c <UART_SetConfig+0x4e4>)
 800d65e:	fba2 2303 	umull	r2, r3, r2, r3
 800d662:	095b      	lsrs	r3, r3, #5
 800d664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d668:	441c      	add	r4, r3
 800d66a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d66e:	2200      	movs	r2, #0
 800d670:	673b      	str	r3, [r7, #112]	@ 0x70
 800d672:	677a      	str	r2, [r7, #116]	@ 0x74
 800d674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d678:	4642      	mov	r2, r8
 800d67a:	464b      	mov	r3, r9
 800d67c:	1891      	adds	r1, r2, r2
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	415b      	adcs	r3, r3
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d688:	4641      	mov	r1, r8
 800d68a:	1851      	adds	r1, r2, r1
 800d68c:	6039      	str	r1, [r7, #0]
 800d68e:	4649      	mov	r1, r9
 800d690:	414b      	adcs	r3, r1
 800d692:	607b      	str	r3, [r7, #4]
 800d694:	f04f 0200 	mov.w	r2, #0
 800d698:	f04f 0300 	mov.w	r3, #0
 800d69c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d6a0:	4659      	mov	r1, fp
 800d6a2:	00cb      	lsls	r3, r1, #3
 800d6a4:	4651      	mov	r1, sl
 800d6a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6aa:	4651      	mov	r1, sl
 800d6ac:	00ca      	lsls	r2, r1, #3
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	4642      	mov	r2, r8
 800d6b6:	189b      	adds	r3, r3, r2
 800d6b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d6ba:	464b      	mov	r3, r9
 800d6bc:	460a      	mov	r2, r1
 800d6be:	eb42 0303 	adc.w	r3, r2, r3
 800d6c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800d6d0:	f04f 0200 	mov.w	r2, #0
 800d6d4:	f04f 0300 	mov.w	r3, #0
 800d6d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d6dc:	4649      	mov	r1, r9
 800d6de:	008b      	lsls	r3, r1, #2
 800d6e0:	4641      	mov	r1, r8
 800d6e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d6e6:	4641      	mov	r1, r8
 800d6e8:	008a      	lsls	r2, r1, #2
 800d6ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d6ee:	f7f3 fa7b 	bl	8000be8 <__aeabi_uldivmod>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d72c <UART_SetConfig+0x4e4>)
 800d6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800d6fc:	095b      	lsrs	r3, r3, #5
 800d6fe:	2164      	movs	r1, #100	@ 0x64
 800d700:	fb01 f303 	mul.w	r3, r1, r3
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	3332      	adds	r3, #50	@ 0x32
 800d70a:	4a08      	ldr	r2, [pc, #32]	@ (800d72c <UART_SetConfig+0x4e4>)
 800d70c:	fba2 2303 	umull	r2, r3, r2, r3
 800d710:	095b      	lsrs	r3, r3, #5
 800d712:	f003 020f 	and.w	r2, r3, #15
 800d716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4422      	add	r2, r4
 800d71e:	609a      	str	r2, [r3, #8]
}
 800d720:	bf00      	nop
 800d722:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d726:	46bd      	mov	sp, r7
 800d728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d72c:	51eb851f 	.word	0x51eb851f

0800d730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d730:	b580      	push	{r7, lr}
 800d732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d734:	4b05      	ldr	r3, [pc, #20]	@ (800d74c <SysTick_Handler+0x1c>)
 800d736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d738:	f002 f838 	bl	800f7ac <xTaskGetSchedulerState>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d001      	beq.n	800d746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d742:	f002 ff69 	bl	8010618 <xPortSysTickHandler>
  }
}
 800d746:	bf00      	nop
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	e000e010 	.word	0xe000e010

0800d750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	4a07      	ldr	r2, [pc, #28]	@ (800d77c <vApplicationGetIdleTaskMemory+0x2c>)
 800d760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	4a06      	ldr	r2, [pc, #24]	@ (800d780 <vApplicationGetIdleTaskMemory+0x30>)
 800d766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2280      	movs	r2, #128	@ 0x80
 800d76c:	601a      	str	r2, [r3, #0]
}
 800d76e:	bf00      	nop
 800d770:	3714      	adds	r7, #20
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	20002134 	.word	0x20002134
 800d780:	200021dc 	.word	0x200021dc

0800d784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d784:	b480      	push	{r7}
 800d786:	b085      	sub	sp, #20
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4a07      	ldr	r2, [pc, #28]	@ (800d7b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	4a06      	ldr	r2, [pc, #24]	@ (800d7b4 <vApplicationGetTimerTaskMemory+0x30>)
 800d79a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d7a2:	601a      	str	r2, [r3, #0]
}
 800d7a4:	bf00      	nop
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr
 800d7b0:	200023dc 	.word	0x200023dc
 800d7b4:	20002484 	.word	0x20002484

0800d7b8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d7be:	2020      	movs	r0, #32
 800d7c0:	f002 ffbc 	bl	801073c <pvPortMalloc>
 800d7c4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00a      	beq.n	800d7e2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 f9aa 	bl	800db30 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d7e2:	687b      	ldr	r3, [r7, #4]
	}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b090      	sub	sp, #64	@ 0x40
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d7fe:	2300      	movs	r3, #0
 800d800:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d802:	2300      	movs	r3, #0
 800d804:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10b      	bne.n	800d824 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	e7fd      	b.n	800d820 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d82a:	d30b      	bcc.n	800d844 <xEventGroupWaitBits+0x58>
	__asm volatile
 800d82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d830:	f383 8811 	msr	BASEPRI, r3
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	61fb      	str	r3, [r7, #28]
}
 800d83e:	bf00      	nop
 800d840:	bf00      	nop
 800d842:	e7fd      	b.n	800d840 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <xEventGroupWaitBits+0x76>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	61bb      	str	r3, [r7, #24]
}
 800d85c:	bf00      	nop
 800d85e:	bf00      	nop
 800d860:	e7fd      	b.n	800d85e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d862:	f001 ffa3 	bl	800f7ac <xTaskGetSchedulerState>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <xEventGroupWaitBits+0x86>
 800d86c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <xEventGroupWaitBits+0x8a>
 800d872:	2301      	movs	r3, #1
 800d874:	e000      	b.n	800d878 <xEventGroupWaitBits+0x8c>
 800d876:	2300      	movs	r3, #0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10b      	bne.n	800d894 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800d87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	617b      	str	r3, [r7, #20]
}
 800d88e:	bf00      	nop
 800d890:	bf00      	nop
 800d892:	e7fd      	b.n	800d890 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800d894:	f001 faf4 	bl	800ee80 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	68b9      	ldr	r1, [r7, #8]
 800d8a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8a4:	f000 f90d 	bl	800dac2 <prvTestWaitCondition>
 800d8a8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800d8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00e      	beq.n	800d8ce <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d028      	beq.n	800d910 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	43db      	mvns	r3, r3
 800d8c6:	401a      	ands	r2, r3
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ca:	601a      	str	r2, [r3, #0]
 800d8cc:	e020      	b.n	800d910 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d8ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d104      	bne.n	800d8de <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8dc:	e018      	b.n	800d910 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d003      	beq.n	800d8ec <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d8ea:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d8f8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8fc:	1d18      	adds	r0, r3, #4
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d902:	4313      	orrs	r3, r2
 800d904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d906:	4619      	mov	r1, r3
 800d908:	f001 fcbc 	bl	800f284 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d910:	f001 fac4 	bl	800ee9c <xTaskResumeAll>
 800d914:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d031      	beq.n	800d980 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800d91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d107      	bne.n	800d932 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800d922:	4b1a      	ldr	r3, [pc, #104]	@ (800d98c <xEventGroupWaitBits+0x1a0>)
 800d924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d932:	f002 f8b5 	bl	800faa0 <uxTaskResetEventItemValue>
 800d936:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d93a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d11a      	bne.n	800d978 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800d942:	f002 fdd9 	bl	80104f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d952:	f000 f8b6 	bl	800dac2 <prvTestWaitCondition>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d009      	beq.n	800d970 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d006      	beq.n	800d970 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	43db      	mvns	r3, r3
 800d96a:	401a      	ands	r2, r3
 800d96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d96e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d970:	2301      	movs	r3, #1
 800d972:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800d974:	f002 fdf2 	bl	801055c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d97a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d982:	4618      	mov	r0, r3
 800d984:	3740      	adds	r7, #64	@ 0x40
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	e000ed04 	.word	0xe000ed04

0800d990 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08e      	sub	sp, #56	@ 0x38
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d99a:	2300      	movs	r3, #0
 800d99c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10b      	bne.n	800d9c4 <xEventGroupSetBits+0x34>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	613b      	str	r3, [r7, #16]
}
 800d9be:	bf00      	nop
 800d9c0:	bf00      	nop
 800d9c2:	e7fd      	b.n	800d9c0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9ca:	d30b      	bcc.n	800d9e4 <xEventGroupSetBits+0x54>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	60fb      	str	r3, [r7, #12]
}
 800d9de:	bf00      	nop
 800d9e0:	bf00      	nop
 800d9e2:	e7fd      	b.n	800d9e0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d9f0:	f001 fa46 	bl	800ee80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	431a      	orrs	r2, r3
 800da02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da04:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800da06:	e03c      	b.n	800da82 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800da08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800da0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800da14:	2300      	movs	r3, #0
 800da16:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800da1e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800da26:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d108      	bne.n	800da44 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	4013      	ands	r3, r2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00b      	beq.n	800da56 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800da3e:	2301      	movs	r3, #1
 800da40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da42:	e008      	b.n	800da56 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	4013      	ands	r3, r2
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d101      	bne.n	800da56 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800da52:	2301      	movs	r3, #1
 800da54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800da56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d010      	beq.n	800da7e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da62:	2b00      	cmp	r3, #0
 800da64:	d003      	beq.n	800da6e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800da66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800da76:	4619      	mov	r1, r3
 800da78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800da7a:	f001 fcd1 	bl	800f420 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800da82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da84:	6a3b      	ldr	r3, [r7, #32]
 800da86:	429a      	cmp	r2, r3
 800da88:	d1be      	bne.n	800da08 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	43db      	mvns	r3, r3
 800da92:	401a      	ands	r2, r3
 800da94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da96:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800da98:	f001 fa00 	bl	800ee9c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800da9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9e:	681b      	ldr	r3, [r3, #0]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3738      	adds	r7, #56	@ 0x38
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7ff ff6b 	bl	800d990 <xEventGroupSetBits>
}
 800daba:	bf00      	nop
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800dac2:	b480      	push	{r7}
 800dac4:	b087      	sub	sp, #28
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d107      	bne.n	800dae8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4013      	ands	r3, r2
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00a      	beq.n	800daf8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dae2:	2301      	movs	r3, #1
 800dae4:	617b      	str	r3, [r7, #20]
 800dae6:	e007      	b.n	800daf8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	4013      	ands	r3, r2
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d101      	bne.n	800daf8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800daf4:	2301      	movs	r3, #1
 800daf6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800daf8:	697b      	ldr	r3, [r7, #20]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	371c      	adds	r7, #28
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
	...

0800db08 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	68f9      	ldr	r1, [r7, #12]
 800db1a:	4804      	ldr	r0, [pc, #16]	@ (800db2c <xEventGroupSetBitsFromISR+0x24>)
 800db1c:	f002 fb9a 	bl	8010254 <xTimerPendFunctionCallFromISR>
 800db20:	6178      	str	r0, [r7, #20]

		return xReturn;
 800db22:	697b      	ldr	r3, [r7, #20]
	}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	0800daa9 	.word	0x0800daa9

0800db30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f103 0208 	add.w	r2, r3, #8
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f04f 32ff 	mov.w	r2, #4294967295
 800db48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f103 0208 	add.w	r2, r3, #8
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f103 0208 	add.w	r2, r3, #8
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db8a:	b480      	push	{r7}
 800db8c:	b085      	sub	sp, #20
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	689a      	ldr	r2, [r3, #8]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	601a      	str	r2, [r3, #0]
}
 800dbc6:	bf00      	nop
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b085      	sub	sp, #20
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe8:	d103      	bne.n	800dbf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e00c      	b.n	800dc0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	60fb      	str	r3, [r7, #12]
 800dbf8:	e002      	b.n	800dc00 <vListInsert+0x2e>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	60fb      	str	r3, [r7, #12]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d2f6      	bcs.n	800dbfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	601a      	str	r2, [r3, #0]
}
 800dc38:	bf00      	nop
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	6892      	ldr	r2, [r2, #8]
 800dc5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	6852      	ldr	r2, [r2, #4]
 800dc64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d103      	bne.n	800dc78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	1e5a      	subs	r2, r3, #1
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10b      	bne.n	800dcc4 <xQueueGenericReset+0x2c>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	60bb      	str	r3, [r7, #8]
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	e7fd      	b.n	800dcc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dcc4:	f002 fc18 	bl	80104f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcd0:	68f9      	ldr	r1, [r7, #12]
 800dcd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dcd4:	fb01 f303 	mul.w	r3, r1, r3
 800dcd8:	441a      	add	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	68f9      	ldr	r1, [r7, #12]
 800dcf8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dcfa:	fb01 f303 	mul.w	r3, r1, r3
 800dcfe:	441a      	add	r2, r3
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	22ff      	movs	r2, #255	@ 0xff
 800dd08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	22ff      	movs	r2, #255	@ 0xff
 800dd10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d114      	bne.n	800dd44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d01a      	beq.n	800dd58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3310      	adds	r3, #16
 800dd26:	4618      	mov	r0, r3
 800dd28:	f001 fb16 	bl	800f358 <xTaskRemoveFromEventList>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d012      	beq.n	800dd58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd32:	4b0d      	ldr	r3, [pc, #52]	@ (800dd68 <xQueueGenericReset+0xd0>)
 800dd34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	e009      	b.n	800dd58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3310      	adds	r3, #16
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fef1 	bl	800db30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3324      	adds	r3, #36	@ 0x24
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7ff feec 	bl	800db30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd58:	f002 fc00 	bl	801055c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd5c:	2301      	movs	r3, #1
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	e000ed04 	.word	0xe000ed04

0800dd6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08e      	sub	sp, #56	@ 0x38
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10b      	bne.n	800dd98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dd92:	bf00      	nop
 800dd94:	bf00      	nop
 800dd96:	e7fd      	b.n	800dd94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10b      	bne.n	800ddb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ddb0:	bf00      	nop
 800ddb2:	bf00      	nop
 800ddb4:	e7fd      	b.n	800ddb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <xQueueGenericCreateStatic+0x56>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <xQueueGenericCreateStatic+0x5a>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e000      	b.n	800ddc8 <xQueueGenericCreateStatic+0x5c>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10b      	bne.n	800dde4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	623b      	str	r3, [r7, #32]
}
 800ddde:	bf00      	nop
 800dde0:	bf00      	nop
 800dde2:	e7fd      	b.n	800dde0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <xQueueGenericCreateStatic+0x84>
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <xQueueGenericCreateStatic+0x88>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <xQueueGenericCreateStatic+0x8a>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10b      	bne.n	800de12 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	61fb      	str	r3, [r7, #28]
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	e7fd      	b.n	800de0e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800de12:	2350      	movs	r3, #80	@ 0x50
 800de14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b50      	cmp	r3, #80	@ 0x50
 800de1a:	d00b      	beq.n	800de34 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	61bb      	str	r3, [r7, #24]
}
 800de2e:	bf00      	nop
 800de30:	bf00      	nop
 800de32:	e7fd      	b.n	800de30 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800de3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00d      	beq.n	800de5c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	4613      	mov	r3, r2
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	68b9      	ldr	r1, [r7, #8]
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f000 f840 	bl	800dedc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800de5e:	4618      	mov	r0, r3
 800de60:	3730      	adds	r7, #48	@ 0x30
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800de66:	b580      	push	{r7, lr}
 800de68:	b08a      	sub	sp, #40	@ 0x28
 800de6a:	af02      	add	r7, sp, #8
 800de6c:	60f8      	str	r0, [r7, #12]
 800de6e:	60b9      	str	r1, [r7, #8]
 800de70:	4613      	mov	r3, r2
 800de72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10b      	bne.n	800de92 <xQueueGenericCreate+0x2c>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7e:	f383 8811 	msr	BASEPRI, r3
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	613b      	str	r3, [r7, #16]
}
 800de8c:	bf00      	nop
 800de8e:	bf00      	nop
 800de90:	e7fd      	b.n	800de8e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	fb02 f303 	mul.w	r3, r2, r3
 800de9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	3350      	adds	r3, #80	@ 0x50
 800dea0:	4618      	mov	r0, r3
 800dea2:	f002 fc4b 	bl	801073c <pvPortMalloc>
 800dea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d011      	beq.n	800ded2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	3350      	adds	r3, #80	@ 0x50
 800deb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dec0:	79fa      	ldrb	r2, [r7, #7]
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4613      	mov	r3, r2
 800dec8:	697a      	ldr	r2, [r7, #20]
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 f805 	bl	800dedc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ded2:	69bb      	ldr	r3, [r7, #24]
	}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3720      	adds	r7, #32
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d103      	bne.n	800def8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	69ba      	ldr	r2, [r7, #24]
 800def4:	601a      	str	r2, [r3, #0]
 800def6:	e002      	b.n	800defe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df0a:	2101      	movs	r1, #1
 800df0c:	69b8      	ldr	r0, [r7, #24]
 800df0e:	f7ff fec3 	bl	800dc98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	78fa      	ldrb	r2, [r7, #3]
 800df16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800df1a:	bf00      	nop
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800df22:	b580      	push	{r7, lr}
 800df24:	b082      	sub	sp, #8
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00e      	beq.n	800df4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800df42:	2300      	movs	r3, #0
 800df44:	2200      	movs	r2, #0
 800df46:	2100      	movs	r1, #0
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f81d 	bl	800df88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800df4e:	bf00      	nop
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800df56:	b580      	push	{r7, lr}
 800df58:	b086      	sub	sp, #24
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	4603      	mov	r3, r0
 800df5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800df60:	2301      	movs	r3, #1
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	2300      	movs	r3, #0
 800df66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800df68:	79fb      	ldrb	r3, [r7, #7]
 800df6a:	461a      	mov	r2, r3
 800df6c:	6939      	ldr	r1, [r7, #16]
 800df6e:	6978      	ldr	r0, [r7, #20]
 800df70:	f7ff ff79 	bl	800de66 <xQueueGenericCreate>
 800df74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7ff ffd3 	bl	800df22 <prvInitialiseMutex>

		return xNewQueue;
 800df7c:	68fb      	ldr	r3, [r7, #12]
	}
 800df7e:	4618      	mov	r0, r3
 800df80:	3718      	adds	r7, #24
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
	...

0800df88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b08e      	sub	sp, #56	@ 0x38
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800df96:	2300      	movs	r3, #0
 800df98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800df9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10b      	bne.n	800dfbc <xQueueGenericSend+0x34>
	__asm volatile
 800dfa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfb6:	bf00      	nop
 800dfb8:	bf00      	nop
 800dfba:	e7fd      	b.n	800dfb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d103      	bne.n	800dfca <xQueueGenericSend+0x42>
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <xQueueGenericSend+0x46>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e000      	b.n	800dfd0 <xQueueGenericSend+0x48>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10b      	bne.n	800dfec <xQueueGenericSend+0x64>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dfe6:	bf00      	nop
 800dfe8:	bf00      	nop
 800dfea:	e7fd      	b.n	800dfe8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d103      	bne.n	800dffa <xQueueGenericSend+0x72>
 800dff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d101      	bne.n	800dffe <xQueueGenericSend+0x76>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e000      	b.n	800e000 <xQueueGenericSend+0x78>
 800dffe:	2300      	movs	r3, #0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10b      	bne.n	800e01c <xQueueGenericSend+0x94>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	623b      	str	r3, [r7, #32]
}
 800e016:	bf00      	nop
 800e018:	bf00      	nop
 800e01a:	e7fd      	b.n	800e018 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e01c:	f001 fbc6 	bl	800f7ac <xTaskGetSchedulerState>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <xQueueGenericSend+0xa4>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <xQueueGenericSend+0xa8>
 800e02c:	2301      	movs	r3, #1
 800e02e:	e000      	b.n	800e032 <xQueueGenericSend+0xaa>
 800e030:	2300      	movs	r3, #0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <xQueueGenericSend+0xc6>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	61fb      	str	r3, [r7, #28]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e04e:	f002 fa53 	bl	80104f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d302      	bcc.n	800e064 <xQueueGenericSend+0xdc>
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b02      	cmp	r3, #2
 800e062:	d129      	bne.n	800e0b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	68b9      	ldr	r1, [r7, #8]
 800e068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e06a:	f000 fb37 	bl	800e6dc <prvCopyDataToQueue>
 800e06e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e074:	2b00      	cmp	r3, #0
 800e076:	d010      	beq.n	800e09a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07a:	3324      	adds	r3, #36	@ 0x24
 800e07c:	4618      	mov	r0, r3
 800e07e:	f001 f96b 	bl	800f358 <xTaskRemoveFromEventList>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d013      	beq.n	800e0b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e088:	4b3f      	ldr	r3, [pc, #252]	@ (800e188 <xQueueGenericSend+0x200>)
 800e08a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	e00a      	b.n	800e0b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d007      	beq.n	800e0b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e0a0:	4b39      	ldr	r3, [pc, #228]	@ (800e188 <xQueueGenericSend+0x200>)
 800e0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a6:	601a      	str	r2, [r3, #0]
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e0b0:	f002 fa54 	bl	801055c <vPortExitCritical>
				return pdPASS;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e063      	b.n	800e180 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d103      	bne.n	800e0c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0be:	f002 fa4d 	bl	801055c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	e05c      	b.n	800e180 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0cc:	f107 0314 	add.w	r3, r7, #20
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f001 fa09 	bl	800f4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0da:	f002 fa3f 	bl	801055c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0de:	f000 fecf 	bl	800ee80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0e2:	f002 fa09 	bl	80104f8 <vPortEnterCritical>
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0ec:	b25b      	sxtb	r3, r3
 800e0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f2:	d103      	bne.n	800e0fc <xQueueGenericSend+0x174>
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e102:	b25b      	sxtb	r3, r3
 800e104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e108:	d103      	bne.n	800e112 <xQueueGenericSend+0x18a>
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e112:	f002 fa23 	bl	801055c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e116:	1d3a      	adds	r2, r7, #4
 800e118:	f107 0314 	add.w	r3, r7, #20
 800e11c:	4611      	mov	r1, r2
 800e11e:	4618      	mov	r0, r3
 800e120:	f001 f9f8 	bl	800f514 <xTaskCheckForTimeOut>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d124      	bne.n	800e174 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e12a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e12c:	f000 fbce 	bl	800e8cc <prvIsQueueFull>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d018      	beq.n	800e168 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e138:	3310      	adds	r3, #16
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	4611      	mov	r1, r2
 800e13e:	4618      	mov	r0, r3
 800e140:	f001 f87a 	bl	800f238 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e146:	f000 fb59 	bl	800e7fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e14a:	f000 fea7 	bl	800ee9c <xTaskResumeAll>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	f47f af7c 	bne.w	800e04e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e156:	4b0c      	ldr	r3, [pc, #48]	@ (800e188 <xQueueGenericSend+0x200>)
 800e158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	e772      	b.n	800e04e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e16a:	f000 fb47 	bl	800e7fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e16e:	f000 fe95 	bl	800ee9c <xTaskResumeAll>
 800e172:	e76c      	b.n	800e04e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e176:	f000 fb41 	bl	800e7fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e17a:	f000 fe8f 	bl	800ee9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e17e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e180:	4618      	mov	r0, r3
 800e182:	3738      	adds	r7, #56	@ 0x38
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	e000ed04 	.word	0xe000ed04

0800e18c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b090      	sub	sp, #64	@ 0x40
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10b      	bne.n	800e1bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e1b6:	bf00      	nop
 800e1b8:	bf00      	nop
 800e1ba:	e7fd      	b.n	800e1b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d103      	bne.n	800e1ca <xQueueGenericSendFromISR+0x3e>
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <xQueueGenericSendFromISR+0x42>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e000      	b.n	800e1d0 <xQueueGenericSendFromISR+0x44>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10b      	bne.n	800e1ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e1e6:	bf00      	nop
 800e1e8:	bf00      	nop
 800e1ea:	e7fd      	b.n	800e1e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d103      	bne.n	800e1fa <xQueueGenericSendFromISR+0x6e>
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d101      	bne.n	800e1fe <xQueueGenericSendFromISR+0x72>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e000      	b.n	800e200 <xQueueGenericSendFromISR+0x74>
 800e1fe:	2300      	movs	r3, #0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d10b      	bne.n	800e21c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	623b      	str	r3, [r7, #32]
}
 800e216:	bf00      	nop
 800e218:	bf00      	nop
 800e21a:	e7fd      	b.n	800e218 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e21c:	f002 fa4c 	bl	80106b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e220:	f3ef 8211 	mrs	r2, BASEPRI
 800e224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	61fa      	str	r2, [r7, #28]
 800e236:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e238:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e23a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e244:	429a      	cmp	r2, r3
 800e246:	d302      	bcc.n	800e24e <xQueueGenericSendFromISR+0xc2>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b02      	cmp	r3, #2
 800e24c:	d12f      	bne.n	800e2ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e254:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	68b9      	ldr	r1, [r7, #8]
 800e262:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e264:	f000 fa3a 	bl	800e6dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e268:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e270:	d112      	bne.n	800e298 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e276:	2b00      	cmp	r3, #0
 800e278:	d016      	beq.n	800e2a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27c:	3324      	adds	r3, #36	@ 0x24
 800e27e:	4618      	mov	r0, r3
 800e280:	f001 f86a 	bl	800f358 <xTaskRemoveFromEventList>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00e      	beq.n	800e2a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00b      	beq.n	800e2a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	e007      	b.n	800e2a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e298:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e29c:	3301      	adds	r3, #1
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	b25a      	sxtb	r2, r3
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e2ac:	e001      	b.n	800e2b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e2bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3740      	adds	r7, #64	@ 0x40
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b08c      	sub	sp, #48	@ 0x30
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10b      	bne.n	800e2fa <xQueueReceive+0x32>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	623b      	str	r3, [r7, #32]
}
 800e2f4:	bf00      	nop
 800e2f6:	bf00      	nop
 800e2f8:	e7fd      	b.n	800e2f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d103      	bne.n	800e308 <xQueueReceive+0x40>
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e304:	2b00      	cmp	r3, #0
 800e306:	d101      	bne.n	800e30c <xQueueReceive+0x44>
 800e308:	2301      	movs	r3, #1
 800e30a:	e000      	b.n	800e30e <xQueueReceive+0x46>
 800e30c:	2300      	movs	r3, #0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10b      	bne.n	800e32a <xQueueReceive+0x62>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	61fb      	str	r3, [r7, #28]
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop
 800e328:	e7fd      	b.n	800e326 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e32a:	f001 fa3f 	bl	800f7ac <xTaskGetSchedulerState>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <xQueueReceive+0x72>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <xQueueReceive+0x76>
 800e33a:	2301      	movs	r3, #1
 800e33c:	e000      	b.n	800e340 <xQueueReceive+0x78>
 800e33e:	2300      	movs	r3, #0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10b      	bne.n	800e35c <xQueueReceive+0x94>
	__asm volatile
 800e344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e348:	f383 8811 	msr	BASEPRI, r3
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f3bf 8f4f 	dsb	sy
 800e354:	61bb      	str	r3, [r7, #24]
}
 800e356:	bf00      	nop
 800e358:	bf00      	nop
 800e35a:	e7fd      	b.n	800e358 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e35c:	f002 f8cc 	bl	80104f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e364:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d01f      	beq.n	800e3ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e370:	f000 fa1e 	bl	800e7b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e376:	1e5a      	subs	r2, r3, #1
 800e378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00f      	beq.n	800e3a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e386:	3310      	adds	r3, #16
 800e388:	4618      	mov	r0, r3
 800e38a:	f000 ffe5 	bl	800f358 <xTaskRemoveFromEventList>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d007      	beq.n	800e3a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e394:	4b3c      	ldr	r3, [pc, #240]	@ (800e488 <xQueueReceive+0x1c0>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e3a4:	f002 f8da 	bl	801055c <vPortExitCritical>
				return pdPASS;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e069      	b.n	800e480 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d103      	bne.n	800e3ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3b2:	f002 f8d3 	bl	801055c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e062      	b.n	800e480 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d106      	bne.n	800e3ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3c0:	f107 0310 	add.w	r3, r7, #16
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f001 f88f 	bl	800f4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3ce:	f002 f8c5 	bl	801055c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3d2:	f000 fd55 	bl	800ee80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3d6:	f002 f88f 	bl	80104f8 <vPortEnterCritical>
 800e3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3e0:	b25b      	sxtb	r3, r3
 800e3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e6:	d103      	bne.n	800e3f0 <xQueueReceive+0x128>
 800e3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3f6:	b25b      	sxtb	r3, r3
 800e3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fc:	d103      	bne.n	800e406 <xQueueReceive+0x13e>
 800e3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e400:	2200      	movs	r2, #0
 800e402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e406:	f002 f8a9 	bl	801055c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e40a:	1d3a      	adds	r2, r7, #4
 800e40c:	f107 0310 	add.w	r3, r7, #16
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f001 f87e 	bl	800f514 <xTaskCheckForTimeOut>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d123      	bne.n	800e466 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e420:	f000 fa3e 	bl	800e8a0 <prvIsQueueEmpty>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d017      	beq.n	800e45a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42c:	3324      	adds	r3, #36	@ 0x24
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4611      	mov	r1, r2
 800e432:	4618      	mov	r0, r3
 800e434:	f000 ff00 	bl	800f238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e43a:	f000 f9df 	bl	800e7fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e43e:	f000 fd2d 	bl	800ee9c <xTaskResumeAll>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d189      	bne.n	800e35c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e448:	4b0f      	ldr	r3, [pc, #60]	@ (800e488 <xQueueReceive+0x1c0>)
 800e44a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e44e:	601a      	str	r2, [r3, #0]
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	e780      	b.n	800e35c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e45a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e45c:	f000 f9ce 	bl	800e7fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e460:	f000 fd1c 	bl	800ee9c <xTaskResumeAll>
 800e464:	e77a      	b.n	800e35c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e468:	f000 f9c8 	bl	800e7fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e46c:	f000 fd16 	bl	800ee9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e472:	f000 fa15 	bl	800e8a0 <prvIsQueueEmpty>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f43f af6f 	beq.w	800e35c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e47e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e480:	4618      	mov	r0, r3
 800e482:	3730      	adds	r7, #48	@ 0x30
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08e      	sub	sp, #56	@ 0x38
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e496:	2300      	movs	r3, #0
 800e498:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10b      	bne.n	800e4c0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	623b      	str	r3, [r7, #32]
}
 800e4ba:	bf00      	nop
 800e4bc:	bf00      	nop
 800e4be:	e7fd      	b.n	800e4bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00b      	beq.n	800e4e0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	61fb      	str	r3, [r7, #28]
}
 800e4da:	bf00      	nop
 800e4dc:	bf00      	nop
 800e4de:	e7fd      	b.n	800e4dc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4e0:	f001 f964 	bl	800f7ac <xTaskGetSchedulerState>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d102      	bne.n	800e4f0 <xQueueSemaphoreTake+0x64>
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d101      	bne.n	800e4f4 <xQueueSemaphoreTake+0x68>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e000      	b.n	800e4f6 <xQueueSemaphoreTake+0x6a>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10b      	bne.n	800e512 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	61bb      	str	r3, [r7, #24]
}
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
 800e510:	e7fd      	b.n	800e50e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e512:	f001 fff1 	bl	80104f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e51a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d024      	beq.n	800e56c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e524:	1e5a      	subs	r2, r3, #1
 800e526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e528:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d104      	bne.n	800e53c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e532:	f001 facd 	bl	800fad0 <pvTaskIncrementMutexHeldCount>
 800e536:	4602      	mov	r2, r0
 800e538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53e:	691b      	ldr	r3, [r3, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00f      	beq.n	800e564 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e546:	3310      	adds	r3, #16
 800e548:	4618      	mov	r0, r3
 800e54a:	f000 ff05 	bl	800f358 <xTaskRemoveFromEventList>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d007      	beq.n	800e564 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e554:	4b54      	ldr	r3, [pc, #336]	@ (800e6a8 <xQueueSemaphoreTake+0x21c>)
 800e556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e55a:	601a      	str	r2, [r3, #0]
 800e55c:	f3bf 8f4f 	dsb	sy
 800e560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e564:	f001 fffa 	bl	801055c <vPortExitCritical>
				return pdPASS;
 800e568:	2301      	movs	r3, #1
 800e56a:	e098      	b.n	800e69e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d112      	bne.n	800e598 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00b      	beq.n	800e590 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	617b      	str	r3, [r7, #20]
}
 800e58a:	bf00      	nop
 800e58c:	bf00      	nop
 800e58e:	e7fd      	b.n	800e58c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e590:	f001 ffe4 	bl	801055c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e594:	2300      	movs	r3, #0
 800e596:	e082      	b.n	800e69e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e59e:	f107 030c 	add.w	r3, r7, #12
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 ffa0 	bl	800f4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5ac:	f001 ffd6 	bl	801055c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5b0:	f000 fc66 	bl	800ee80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5b4:	f001 ffa0 	bl	80104f8 <vPortEnterCritical>
 800e5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5be:	b25b      	sxtb	r3, r3
 800e5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c4:	d103      	bne.n	800e5ce <xQueueSemaphoreTake+0x142>
 800e5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5d4:	b25b      	sxtb	r3, r3
 800e5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5da:	d103      	bne.n	800e5e4 <xQueueSemaphoreTake+0x158>
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5e4:	f001 ffba 	bl	801055c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5e8:	463a      	mov	r2, r7
 800e5ea:	f107 030c 	add.w	r3, r7, #12
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 ff8f 	bl	800f514 <xTaskCheckForTimeOut>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d132      	bne.n	800e662 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5fe:	f000 f94f 	bl	800e8a0 <prvIsQueueEmpty>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d026      	beq.n	800e656 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d109      	bne.n	800e624 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e610:	f001 ff72 	bl	80104f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	4618      	mov	r0, r3
 800e61a:	f001 f8e5 	bl	800f7e8 <xTaskPriorityInherit>
 800e61e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e620:	f001 ff9c 	bl	801055c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e626:	3324      	adds	r3, #36	@ 0x24
 800e628:	683a      	ldr	r2, [r7, #0]
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 fe03 	bl	800f238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e632:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e634:	f000 f8e2 	bl	800e7fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e638:	f000 fc30 	bl	800ee9c <xTaskResumeAll>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f47f af67 	bne.w	800e512 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e644:	4b18      	ldr	r3, [pc, #96]	@ (800e6a8 <xQueueSemaphoreTake+0x21c>)
 800e646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e64a:	601a      	str	r2, [r3, #0]
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	e75d      	b.n	800e512 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e658:	f000 f8d0 	bl	800e7fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e65c:	f000 fc1e 	bl	800ee9c <xTaskResumeAll>
 800e660:	e757      	b.n	800e512 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e662:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e664:	f000 f8ca 	bl	800e7fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e668:	f000 fc18 	bl	800ee9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e66c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e66e:	f000 f917 	bl	800e8a0 <prvIsQueueEmpty>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	f43f af4c 	beq.w	800e512 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00d      	beq.n	800e69c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e680:	f001 ff3a 	bl	80104f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e684:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e686:	f000 f811 	bl	800e6ac <prvGetDisinheritPriorityAfterTimeout>
 800e68a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e692:	4618      	mov	r0, r3
 800e694:	f001 f980 	bl	800f998 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e698:	f001 ff60 	bl	801055c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e69c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3738      	adds	r7, #56	@ 0x38
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	e000ed04 	.word	0xe000ed04

0800e6ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d006      	beq.n	800e6ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	e001      	b.n	800e6ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
	}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10d      	bne.n	800e716 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d14d      	bne.n	800e79e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	4618      	mov	r0, r3
 800e708:	f001 f8d6 	bl	800f8b8 <xTaskPriorityDisinherit>
 800e70c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	609a      	str	r2, [r3, #8]
 800e714:	e043      	b.n	800e79e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d119      	bne.n	800e750 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6858      	ldr	r0, [r3, #4]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e724:	461a      	mov	r2, r3
 800e726:	68b9      	ldr	r1, [r7, #8]
 800e728:	f003 f90f 	bl	801194a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e734:	441a      	add	r2, r3
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	429a      	cmp	r2, r3
 800e744:	d32b      	bcc.n	800e79e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	605a      	str	r2, [r3, #4]
 800e74e:	e026      	b.n	800e79e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	68d8      	ldr	r0, [r3, #12]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e758:	461a      	mov	r2, r3
 800e75a:	68b9      	ldr	r1, [r7, #8]
 800e75c:	f003 f8f5 	bl	801194a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	68da      	ldr	r2, [r3, #12]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e768:	425b      	negs	r3, r3
 800e76a:	441a      	add	r2, r3
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	68da      	ldr	r2, [r3, #12]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d207      	bcs.n	800e78c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	689a      	ldr	r2, [r3, #8]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e784:	425b      	negs	r3, r3
 800e786:	441a      	add	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b02      	cmp	r3, #2
 800e790:	d105      	bne.n	800e79e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	3b01      	subs	r3, #1
 800e79c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	1c5a      	adds	r2, r3, #1
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e7a6:	697b      	ldr	r3, [r7, #20]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d018      	beq.n	800e7f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68da      	ldr	r2, [r3, #12]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ca:	441a      	add	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d303      	bcc.n	800e7e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	68d9      	ldr	r1, [r3, #12]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	6838      	ldr	r0, [r7, #0]
 800e7f0:	f003 f8ab 	bl	801194a <memcpy>
	}
}
 800e7f4:	bf00      	nop
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e804:	f001 fe78 	bl	80104f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e80e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e810:	e011      	b.n	800e836 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e816:	2b00      	cmp	r3, #0
 800e818:	d012      	beq.n	800e840 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3324      	adds	r3, #36	@ 0x24
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 fd9a 	bl	800f358 <xTaskRemoveFromEventList>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e82a:	f000 fed7 	bl	800f5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e82e:	7bfb      	ldrb	r3, [r7, #15]
 800e830:	3b01      	subs	r3, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dce9      	bgt.n	800e812 <prvUnlockQueue+0x16>
 800e83e:	e000      	b.n	800e842 <prvUnlockQueue+0x46>
					break;
 800e840:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	22ff      	movs	r2, #255	@ 0xff
 800e846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e84a:	f001 fe87 	bl	801055c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e84e:	f001 fe53 	bl	80104f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e858:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e85a:	e011      	b.n	800e880 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d012      	beq.n	800e88a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	3310      	adds	r3, #16
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 fd75 	bl	800f358 <xTaskRemoveFromEventList>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e874:	f000 feb2 	bl	800f5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e878:	7bbb      	ldrb	r3, [r7, #14]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dce9      	bgt.n	800e85c <prvUnlockQueue+0x60>
 800e888:	e000      	b.n	800e88c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e88a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	22ff      	movs	r2, #255	@ 0xff
 800e890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e894:	f001 fe62 	bl	801055c <vPortExitCritical>
}
 800e898:	bf00      	nop
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8a8:	f001 fe26 	bl	80104f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d102      	bne.n	800e8ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	60fb      	str	r3, [r7, #12]
 800e8b8:	e001      	b.n	800e8be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8be:	f001 fe4d 	bl	801055c <vPortExitCritical>

	return xReturn;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8d4:	f001 fe10 	bl	80104f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d102      	bne.n	800e8ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	60fb      	str	r3, [r7, #12]
 800e8e8:	e001      	b.n	800e8ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8ee:	f001 fe35 	bl	801055c <vPortExitCritical>

	return xReturn;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]
 800e90a:	e014      	b.n	800e936 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e90c:	4a0f      	ldr	r2, [pc, #60]	@ (800e94c <vQueueAddToRegistry+0x50>)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10b      	bne.n	800e930 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e918:	490c      	ldr	r1, [pc, #48]	@ (800e94c <vQueueAddToRegistry+0x50>)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e922:	4a0a      	ldr	r2, [pc, #40]	@ (800e94c <vQueueAddToRegistry+0x50>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	4413      	add	r3, r2
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e92e:	e006      	b.n	800e93e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3301      	adds	r3, #1
 800e934:	60fb      	str	r3, [r7, #12]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b07      	cmp	r3, #7
 800e93a:	d9e7      	bls.n	800e90c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e93c:	bf00      	nop
 800e93e:	bf00      	nop
 800e940:	3714      	adds	r7, #20
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	20002884 	.word	0x20002884

0800e950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e960:	f001 fdca 	bl	80104f8 <vPortEnterCritical>
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e96a:	b25b      	sxtb	r3, r3
 800e96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e970:	d103      	bne.n	800e97a <vQueueWaitForMessageRestricted+0x2a>
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e980:	b25b      	sxtb	r3, r3
 800e982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e986:	d103      	bne.n	800e990 <vQueueWaitForMessageRestricted+0x40>
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e990:	f001 fde4 	bl	801055c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d106      	bne.n	800e9aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	3324      	adds	r3, #36	@ 0x24
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	68b9      	ldr	r1, [r7, #8]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f000 fcab 	bl	800f300 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9aa:	6978      	ldr	r0, [r7, #20]
 800e9ac:	f7ff ff26 	bl	800e7fc <prvUnlockQueue>
	}
 800e9b0:	bf00      	nop
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b08e      	sub	sp, #56	@ 0x38
 800e9bc:	af04      	add	r7, sp, #16
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10b      	bne.n	800e9e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	623b      	str	r3, [r7, #32]
}
 800e9de:	bf00      	nop
 800e9e0:	bf00      	nop
 800e9e2:	e7fd      	b.n	800e9e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10b      	bne.n	800ea02 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	61fb      	str	r3, [r7, #28]
}
 800e9fc:	bf00      	nop
 800e9fe:	bf00      	nop
 800ea00:	e7fd      	b.n	800e9fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea02:	23a8      	movs	r3, #168	@ 0xa8
 800ea04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	2ba8      	cmp	r3, #168	@ 0xa8
 800ea0a:	d00b      	beq.n	800ea24 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ea0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	61bb      	str	r3, [r7, #24]
}
 800ea1e:	bf00      	nop
 800ea20:	bf00      	nop
 800ea22:	e7fd      	b.n	800ea20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d01e      	beq.n	800ea6a <xTaskCreateStatic+0xb2>
 800ea2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d01b      	beq.n	800ea6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3e:	2202      	movs	r2, #2
 800ea40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea44:	2300      	movs	r3, #0
 800ea46:	9303      	str	r3, [sp, #12]
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	9302      	str	r3, [sp, #8]
 800ea4c:	f107 0314 	add.w	r3, r7, #20
 800ea50:	9301      	str	r3, [sp, #4]
 800ea52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f000 f851 	bl	800eb04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea64:	f000 f8f6 	bl	800ec54 <prvAddNewTaskToReadyList>
 800ea68:	e001      	b.n	800ea6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ea6e:	697b      	ldr	r3, [r7, #20]
	}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3728      	adds	r7, #40	@ 0x28
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b08c      	sub	sp, #48	@ 0x30
 800ea7c:	af04      	add	r7, sp, #16
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	4613      	mov	r3, r2
 800ea86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea88:	88fb      	ldrh	r3, [r7, #6]
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f001 fe55 	bl	801073c <pvPortMalloc>
 800ea92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00e      	beq.n	800eab8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ea9a:	20a8      	movs	r0, #168	@ 0xa8
 800ea9c:	f001 fe4e 	bl	801073c <pvPortMalloc>
 800eaa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	631a      	str	r2, [r3, #48]	@ 0x30
 800eaae:	e005      	b.n	800eabc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eab0:	6978      	ldr	r0, [r7, #20]
 800eab2:	f001 ff11 	bl	80108d8 <vPortFree>
 800eab6:	e001      	b.n	800eabc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eab8:	2300      	movs	r3, #0
 800eaba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d017      	beq.n	800eaf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eaca:	88fa      	ldrh	r2, [r7, #6]
 800eacc:	2300      	movs	r3, #0
 800eace:	9303      	str	r3, [sp, #12]
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	9302      	str	r3, [sp, #8]
 800ead4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	68b9      	ldr	r1, [r7, #8]
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f000 f80f 	bl	800eb04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eae6:	69f8      	ldr	r0, [r7, #28]
 800eae8:	f000 f8b4 	bl	800ec54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eaec:	2301      	movs	r3, #1
 800eaee:	61bb      	str	r3, [r7, #24]
 800eaf0:	e002      	b.n	800eaf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eaf2:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eaf8:	69bb      	ldr	r3, [r7, #24]
	}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3720      	adds	r7, #32
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
	...

0800eb04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	21a5      	movs	r1, #165	@ 0xa5
 800eb1e:	f002 fe00 	bl	8011722 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	4413      	add	r3, r2
 800eb32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	f023 0307 	bic.w	r3, r3, #7
 800eb3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	f003 0307 	and.w	r3, r3, #7
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00b      	beq.n	800eb5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800eb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb4a:	f383 8811 	msr	BASEPRI, r3
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	617b      	str	r3, [r7, #20]
}
 800eb58:	bf00      	nop
 800eb5a:	bf00      	nop
 800eb5c:	e7fd      	b.n	800eb5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d01f      	beq.n	800eba4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb64:	2300      	movs	r3, #0
 800eb66:	61fb      	str	r3, [r7, #28]
 800eb68:	e012      	b.n	800eb90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	4413      	add	r3, r2
 800eb70:	7819      	ldrb	r1, [r3, #0]
 800eb72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	4413      	add	r3, r2
 800eb78:	3334      	adds	r3, #52	@ 0x34
 800eb7a:	460a      	mov	r2, r1
 800eb7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	4413      	add	r3, r2
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d006      	beq.n	800eb98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	61fb      	str	r3, [r7, #28]
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	2b0f      	cmp	r3, #15
 800eb94:	d9e9      	bls.n	800eb6a <prvInitialiseNewTask+0x66>
 800eb96:	e000      	b.n	800eb9a <prvInitialiseNewTask+0x96>
			{
				break;
 800eb98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eba2:	e003      	b.n	800ebac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ebac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebae:	2b37      	cmp	r3, #55	@ 0x37
 800ebb0:	d901      	bls.n	800ebb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ebb2:	2337      	movs	r3, #55	@ 0x37
 800ebb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebca:	3304      	adds	r3, #4
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fe ffcf 	bl	800db70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd4:	3318      	adds	r3, #24
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe ffca 	bl	800db70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebe0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ebec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec04:	3354      	adds	r3, #84	@ 0x54
 800ec06:	224c      	movs	r2, #76	@ 0x4c
 800ec08:	2100      	movs	r1, #0
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f002 fd89 	bl	8011722 <memset>
 800ec10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec12:	4a0d      	ldr	r2, [pc, #52]	@ (800ec48 <prvInitialiseNewTask+0x144>)
 800ec14:	659a      	str	r2, [r3, #88]	@ 0x58
 800ec16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec18:	4a0c      	ldr	r2, [pc, #48]	@ (800ec4c <prvInitialiseNewTask+0x148>)
 800ec1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ec1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ec50 <prvInitialiseNewTask+0x14c>)
 800ec20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	68f9      	ldr	r1, [r7, #12]
 800ec26:	69b8      	ldr	r0, [r7, #24]
 800ec28:	f001 fb34 	bl	8010294 <pxPortInitialiseStack>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec3e:	bf00      	nop
 800ec40:	3720      	adds	r7, #32
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	2000cb58 	.word	0x2000cb58
 800ec4c:	2000cbc0 	.word	0x2000cbc0
 800ec50:	2000cc28 	.word	0x2000cc28

0800ec54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ec5c:	f001 fc4c 	bl	80104f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ec60:	4b2d      	ldr	r3, [pc, #180]	@ (800ed18 <prvAddNewTaskToReadyList+0xc4>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	3301      	adds	r3, #1
 800ec66:	4a2c      	ldr	r2, [pc, #176]	@ (800ed18 <prvAddNewTaskToReadyList+0xc4>)
 800ec68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec6a:	4b2c      	ldr	r3, [pc, #176]	@ (800ed1c <prvAddNewTaskToReadyList+0xc8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d109      	bne.n	800ec86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec72:	4a2a      	ldr	r2, [pc, #168]	@ (800ed1c <prvAddNewTaskToReadyList+0xc8>)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec78:	4b27      	ldr	r3, [pc, #156]	@ (800ed18 <prvAddNewTaskToReadyList+0xc4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d110      	bne.n	800eca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ec80:	f000 fcd0 	bl	800f624 <prvInitialiseTaskLists>
 800ec84:	e00d      	b.n	800eca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ec86:	4b26      	ldr	r3, [pc, #152]	@ (800ed20 <prvAddNewTaskToReadyList+0xcc>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d109      	bne.n	800eca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ec8e:	4b23      	ldr	r3, [pc, #140]	@ (800ed1c <prvAddNewTaskToReadyList+0xc8>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d802      	bhi.n	800eca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ec9c:	4a1f      	ldr	r2, [pc, #124]	@ (800ed1c <prvAddNewTaskToReadyList+0xc8>)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eca2:	4b20      	ldr	r3, [pc, #128]	@ (800ed24 <prvAddNewTaskToReadyList+0xd0>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	3301      	adds	r3, #1
 800eca8:	4a1e      	ldr	r2, [pc, #120]	@ (800ed24 <prvAddNewTaskToReadyList+0xd0>)
 800ecaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ecac:	4b1d      	ldr	r3, [pc, #116]	@ (800ed24 <prvAddNewTaskToReadyList+0xd0>)
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ed28 <prvAddNewTaskToReadyList+0xd4>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d903      	bls.n	800ecc8 <prvAddNewTaskToReadyList+0x74>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc4:	4a18      	ldr	r2, [pc, #96]	@ (800ed28 <prvAddNewTaskToReadyList+0xd4>)
 800ecc6:	6013      	str	r3, [r2, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eccc:	4613      	mov	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	4a15      	ldr	r2, [pc, #84]	@ (800ed2c <prvAddNewTaskToReadyList+0xd8>)
 800ecd6:	441a      	add	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	4619      	mov	r1, r3
 800ecde:	4610      	mov	r0, r2
 800ece0:	f7fe ff53 	bl	800db8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ece4:	f001 fc3a 	bl	801055c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ece8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <prvAddNewTaskToReadyList+0xcc>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00e      	beq.n	800ed0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ecf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ed1c <prvAddNewTaskToReadyList+0xc8>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d207      	bcs.n	800ed0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ecfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ed30 <prvAddNewTaskToReadyList+0xdc>)
 800ed00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed0e:	bf00      	nop
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	20002d98 	.word	0x20002d98
 800ed1c:	200028c4 	.word	0x200028c4
 800ed20:	20002da4 	.word	0x20002da4
 800ed24:	20002db4 	.word	0x20002db4
 800ed28:	20002da0 	.word	0x20002da0
 800ed2c:	200028c8 	.word	0x200028c8
 800ed30:	e000ed04 	.word	0xe000ed04

0800ed34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d018      	beq.n	800ed78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed46:	4b14      	ldr	r3, [pc, #80]	@ (800ed98 <vTaskDelay+0x64>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00b      	beq.n	800ed66 <vTaskDelay+0x32>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	60bb      	str	r3, [r7, #8]
}
 800ed60:	bf00      	nop
 800ed62:	bf00      	nop
 800ed64:	e7fd      	b.n	800ed62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed66:	f000 f88b 	bl	800ee80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 fec3 	bl	800faf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed72:	f000 f893 	bl	800ee9c <xTaskResumeAll>
 800ed76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d107      	bne.n	800ed8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ed7e:	4b07      	ldr	r3, [pc, #28]	@ (800ed9c <vTaskDelay+0x68>)
 800ed80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed8e:	bf00      	nop
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20002dc0 	.word	0x20002dc0
 800ed9c:	e000ed04 	.word	0xe000ed04

0800eda0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08a      	sub	sp, #40	@ 0x28
 800eda4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800edaa:	2300      	movs	r3, #0
 800edac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800edae:	463a      	mov	r2, r7
 800edb0:	1d39      	adds	r1, r7, #4
 800edb2:	f107 0308 	add.w	r3, r7, #8
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fe fcca 	bl	800d750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	9202      	str	r2, [sp, #8]
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	2300      	movs	r3, #0
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	2300      	movs	r3, #0
 800edcc:	460a      	mov	r2, r1
 800edce:	4924      	ldr	r1, [pc, #144]	@ (800ee60 <vTaskStartScheduler+0xc0>)
 800edd0:	4824      	ldr	r0, [pc, #144]	@ (800ee64 <vTaskStartScheduler+0xc4>)
 800edd2:	f7ff fdf1 	bl	800e9b8 <xTaskCreateStatic>
 800edd6:	4603      	mov	r3, r0
 800edd8:	4a23      	ldr	r2, [pc, #140]	@ (800ee68 <vTaskStartScheduler+0xc8>)
 800edda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eddc:	4b22      	ldr	r3, [pc, #136]	@ (800ee68 <vTaskStartScheduler+0xc8>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d002      	beq.n	800edea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ede4:	2301      	movs	r3, #1
 800ede6:	617b      	str	r3, [r7, #20]
 800ede8:	e001      	b.n	800edee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800edea:	2300      	movs	r3, #0
 800edec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d102      	bne.n	800edfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800edf4:	f000 fed4 	bl	800fba0 <xTimerCreateTimerTask>
 800edf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d11b      	bne.n	800ee38 <vTaskStartScheduler+0x98>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	613b      	str	r3, [r7, #16]
}
 800ee12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee14:	4b15      	ldr	r3, [pc, #84]	@ (800ee6c <vTaskStartScheduler+0xcc>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	3354      	adds	r3, #84	@ 0x54
 800ee1a:	4a15      	ldr	r2, [pc, #84]	@ (800ee70 <vTaskStartScheduler+0xd0>)
 800ee1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee1e:	4b15      	ldr	r3, [pc, #84]	@ (800ee74 <vTaskStartScheduler+0xd4>)
 800ee20:	f04f 32ff 	mov.w	r2, #4294967295
 800ee24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee26:	4b14      	ldr	r3, [pc, #80]	@ (800ee78 <vTaskStartScheduler+0xd8>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee2c:	4b13      	ldr	r3, [pc, #76]	@ (800ee7c <vTaskStartScheduler+0xdc>)
 800ee2e:	2200      	movs	r2, #0
 800ee30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee32:	f001 fabd 	bl	80103b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee36:	e00f      	b.n	800ee58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d10b      	bne.n	800ee58 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	60fb      	str	r3, [r7, #12]
}
 800ee52:	bf00      	nop
 800ee54:	bf00      	nop
 800ee56:	e7fd      	b.n	800ee54 <vTaskStartScheduler+0xb4>
}
 800ee58:	bf00      	nop
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	08014210 	.word	0x08014210
 800ee64:	0800f5f5 	.word	0x0800f5f5
 800ee68:	20002dbc 	.word	0x20002dbc
 800ee6c:	200028c4 	.word	0x200028c4
 800ee70:	2000029c 	.word	0x2000029c
 800ee74:	20002db8 	.word	0x20002db8
 800ee78:	20002da4 	.word	0x20002da4
 800ee7c:	20002d9c 	.word	0x20002d9c

0800ee80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ee80:	b480      	push	{r7}
 800ee82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ee84:	4b04      	ldr	r3, [pc, #16]	@ (800ee98 <vTaskSuspendAll+0x18>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	4a03      	ldr	r2, [pc, #12]	@ (800ee98 <vTaskSuspendAll+0x18>)
 800ee8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ee8e:	bf00      	nop
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	20002dc0 	.word	0x20002dc0

0800ee9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eea6:	2300      	movs	r3, #0
 800eea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eeaa:	4b42      	ldr	r3, [pc, #264]	@ (800efb4 <xTaskResumeAll+0x118>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10b      	bne.n	800eeca <xTaskResumeAll+0x2e>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	603b      	str	r3, [r7, #0]
}
 800eec4:	bf00      	nop
 800eec6:	bf00      	nop
 800eec8:	e7fd      	b.n	800eec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eeca:	f001 fb15 	bl	80104f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eece:	4b39      	ldr	r3, [pc, #228]	@ (800efb4 <xTaskResumeAll+0x118>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	3b01      	subs	r3, #1
 800eed4:	4a37      	ldr	r2, [pc, #220]	@ (800efb4 <xTaskResumeAll+0x118>)
 800eed6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eed8:	4b36      	ldr	r3, [pc, #216]	@ (800efb4 <xTaskResumeAll+0x118>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d162      	bne.n	800efa6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eee0:	4b35      	ldr	r3, [pc, #212]	@ (800efb8 <xTaskResumeAll+0x11c>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d05e      	beq.n	800efa6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eee8:	e02f      	b.n	800ef4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeea:	4b34      	ldr	r3, [pc, #208]	@ (800efbc <xTaskResumeAll+0x120>)
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3318      	adds	r3, #24
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fe fea4 	bl	800dc44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	3304      	adds	r3, #4
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fe fe9f 	bl	800dc44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0a:	4b2d      	ldr	r3, [pc, #180]	@ (800efc0 <xTaskResumeAll+0x124>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d903      	bls.n	800ef1a <xTaskResumeAll+0x7e>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef16:	4a2a      	ldr	r2, [pc, #168]	@ (800efc0 <xTaskResumeAll+0x124>)
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef1e:	4613      	mov	r3, r2
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	4413      	add	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4a27      	ldr	r2, [pc, #156]	@ (800efc4 <xTaskResumeAll+0x128>)
 800ef28:	441a      	add	r2, r3
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4610      	mov	r0, r2
 800ef32:	f7fe fe2a 	bl	800db8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef3a:	4b23      	ldr	r3, [pc, #140]	@ (800efc8 <xTaskResumeAll+0x12c>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d302      	bcc.n	800ef4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ef44:	4b21      	ldr	r3, [pc, #132]	@ (800efcc <xTaskResumeAll+0x130>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef4a:	4b1c      	ldr	r3, [pc, #112]	@ (800efbc <xTaskResumeAll+0x120>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1cb      	bne.n	800eeea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef58:	f000 fc08 	bl	800f76c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef5c:	4b1c      	ldr	r3, [pc, #112]	@ (800efd0 <xTaskResumeAll+0x134>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d010      	beq.n	800ef8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ef68:	f000 f846 	bl	800eff8 <xTaskIncrementTick>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ef72:	4b16      	ldr	r3, [pc, #88]	@ (800efcc <xTaskResumeAll+0x130>)
 800ef74:	2201      	movs	r2, #1
 800ef76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1f1      	bne.n	800ef68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ef84:	4b12      	ldr	r3, [pc, #72]	@ (800efd0 <xTaskResumeAll+0x134>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ef8a:	4b10      	ldr	r3, [pc, #64]	@ (800efcc <xTaskResumeAll+0x130>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d009      	beq.n	800efa6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ef92:	2301      	movs	r3, #1
 800ef94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ef96:	4b0f      	ldr	r3, [pc, #60]	@ (800efd4 <xTaskResumeAll+0x138>)
 800ef98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef9c:	601a      	str	r2, [r3, #0]
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efa6:	f001 fad9 	bl	801055c <vPortExitCritical>

	return xAlreadyYielded;
 800efaa:	68bb      	ldr	r3, [r7, #8]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20002dc0 	.word	0x20002dc0
 800efb8:	20002d98 	.word	0x20002d98
 800efbc:	20002d58 	.word	0x20002d58
 800efc0:	20002da0 	.word	0x20002da0
 800efc4:	200028c8 	.word	0x200028c8
 800efc8:	200028c4 	.word	0x200028c4
 800efcc:	20002dac 	.word	0x20002dac
 800efd0:	20002da8 	.word	0x20002da8
 800efd4:	e000ed04 	.word	0xe000ed04

0800efd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800efde:	4b05      	ldr	r3, [pc, #20]	@ (800eff4 <xTaskGetTickCount+0x1c>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800efe4:	687b      	ldr	r3, [r7, #4]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	370c      	adds	r7, #12
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	20002d9c 	.word	0x20002d9c

0800eff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800effe:	2300      	movs	r3, #0
 800f000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f002:	4b4f      	ldr	r3, [pc, #316]	@ (800f140 <xTaskIncrementTick+0x148>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f040 8090 	bne.w	800f12c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f00c:	4b4d      	ldr	r3, [pc, #308]	@ (800f144 <xTaskIncrementTick+0x14c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	3301      	adds	r3, #1
 800f012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f014:	4a4b      	ldr	r2, [pc, #300]	@ (800f144 <xTaskIncrementTick+0x14c>)
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d121      	bne.n	800f064 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f020:	4b49      	ldr	r3, [pc, #292]	@ (800f148 <xTaskIncrementTick+0x150>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00b      	beq.n	800f042 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	603b      	str	r3, [r7, #0]
}
 800f03c:	bf00      	nop
 800f03e:	bf00      	nop
 800f040:	e7fd      	b.n	800f03e <xTaskIncrementTick+0x46>
 800f042:	4b41      	ldr	r3, [pc, #260]	@ (800f148 <xTaskIncrementTick+0x150>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	60fb      	str	r3, [r7, #12]
 800f048:	4b40      	ldr	r3, [pc, #256]	@ (800f14c <xTaskIncrementTick+0x154>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a3e      	ldr	r2, [pc, #248]	@ (800f148 <xTaskIncrementTick+0x150>)
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	4a3e      	ldr	r2, [pc, #248]	@ (800f14c <xTaskIncrementTick+0x154>)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6013      	str	r3, [r2, #0]
 800f056:	4b3e      	ldr	r3, [pc, #248]	@ (800f150 <xTaskIncrementTick+0x158>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	3301      	adds	r3, #1
 800f05c:	4a3c      	ldr	r2, [pc, #240]	@ (800f150 <xTaskIncrementTick+0x158>)
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	f000 fb84 	bl	800f76c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f064:	4b3b      	ldr	r3, [pc, #236]	@ (800f154 <xTaskIncrementTick+0x15c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	693a      	ldr	r2, [r7, #16]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d349      	bcc.n	800f102 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f06e:	4b36      	ldr	r3, [pc, #216]	@ (800f148 <xTaskIncrementTick+0x150>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d104      	bne.n	800f082 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f078:	4b36      	ldr	r3, [pc, #216]	@ (800f154 <xTaskIncrementTick+0x15c>)
 800f07a:	f04f 32ff 	mov.w	r2, #4294967295
 800f07e:	601a      	str	r2, [r3, #0]
					break;
 800f080:	e03f      	b.n	800f102 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f082:	4b31      	ldr	r3, [pc, #196]	@ (800f148 <xTaskIncrementTick+0x150>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f092:	693a      	ldr	r2, [r7, #16]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	429a      	cmp	r2, r3
 800f098:	d203      	bcs.n	800f0a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f09a:	4a2e      	ldr	r2, [pc, #184]	@ (800f154 <xTaskIncrementTick+0x15c>)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0a0:	e02f      	b.n	800f102 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	3304      	adds	r3, #4
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fe fdcc 	bl	800dc44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d004      	beq.n	800f0be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	3318      	adds	r3, #24
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fe fdc3 	bl	800dc44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0c2:	4b25      	ldr	r3, [pc, #148]	@ (800f158 <xTaskIncrementTick+0x160>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d903      	bls.n	800f0d2 <xTaskIncrementTick+0xda>
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ce:	4a22      	ldr	r2, [pc, #136]	@ (800f158 <xTaskIncrementTick+0x160>)
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4a1f      	ldr	r2, [pc, #124]	@ (800f15c <xTaskIncrementTick+0x164>)
 800f0e0:	441a      	add	r2, r3
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7fe fd4e 	bl	800db8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f160 <xTaskIncrementTick+0x168>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d3b8      	bcc.n	800f06e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f100:	e7b5      	b.n	800f06e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f102:	4b17      	ldr	r3, [pc, #92]	@ (800f160 <xTaskIncrementTick+0x168>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f108:	4914      	ldr	r1, [pc, #80]	@ (800f15c <xTaskIncrementTick+0x164>)
 800f10a:	4613      	mov	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4413      	add	r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	440b      	add	r3, r1
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b01      	cmp	r3, #1
 800f118:	d901      	bls.n	800f11e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f11a:	2301      	movs	r3, #1
 800f11c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f11e:	4b11      	ldr	r3, [pc, #68]	@ (800f164 <xTaskIncrementTick+0x16c>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d007      	beq.n	800f136 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f126:	2301      	movs	r3, #1
 800f128:	617b      	str	r3, [r7, #20]
 800f12a:	e004      	b.n	800f136 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f12c:	4b0e      	ldr	r3, [pc, #56]	@ (800f168 <xTaskIncrementTick+0x170>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3301      	adds	r3, #1
 800f132:	4a0d      	ldr	r2, [pc, #52]	@ (800f168 <xTaskIncrementTick+0x170>)
 800f134:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f136:	697b      	ldr	r3, [r7, #20]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20002dc0 	.word	0x20002dc0
 800f144:	20002d9c 	.word	0x20002d9c
 800f148:	20002d50 	.word	0x20002d50
 800f14c:	20002d54 	.word	0x20002d54
 800f150:	20002db0 	.word	0x20002db0
 800f154:	20002db8 	.word	0x20002db8
 800f158:	20002da0 	.word	0x20002da0
 800f15c:	200028c8 	.word	0x200028c8
 800f160:	200028c4 	.word	0x200028c4
 800f164:	20002dac 	.word	0x20002dac
 800f168:	20002da8 	.word	0x20002da8

0800f16c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f172:	4b2b      	ldr	r3, [pc, #172]	@ (800f220 <vTaskSwitchContext+0xb4>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f17a:	4b2a      	ldr	r3, [pc, #168]	@ (800f224 <vTaskSwitchContext+0xb8>)
 800f17c:	2201      	movs	r2, #1
 800f17e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f180:	e047      	b.n	800f212 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f182:	4b28      	ldr	r3, [pc, #160]	@ (800f224 <vTaskSwitchContext+0xb8>)
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f188:	4b27      	ldr	r3, [pc, #156]	@ (800f228 <vTaskSwitchContext+0xbc>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
 800f18e:	e011      	b.n	800f1b4 <vTaskSwitchContext+0x48>
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d10b      	bne.n	800f1ae <vTaskSwitchContext+0x42>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	607b      	str	r3, [r7, #4]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <vTaskSwitchContext+0x3e>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	491d      	ldr	r1, [pc, #116]	@ (800f22c <vTaskSwitchContext+0xc0>)
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4413      	add	r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	440b      	add	r3, r1
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d0e3      	beq.n	800f190 <vTaskSwitchContext+0x24>
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	4413      	add	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	4a16      	ldr	r2, [pc, #88]	@ (800f22c <vTaskSwitchContext+0xc0>)
 800f1d4:	4413      	add	r3, r2
 800f1d6:	60bb      	str	r3, [r7, #8]
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	605a      	str	r2, [r3, #4]
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	685a      	ldr	r2, [r3, #4]
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	3308      	adds	r3, #8
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d104      	bne.n	800f1f8 <vTaskSwitchContext+0x8c>
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	605a      	str	r2, [r3, #4]
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	4a0c      	ldr	r2, [pc, #48]	@ (800f230 <vTaskSwitchContext+0xc4>)
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	4a09      	ldr	r2, [pc, #36]	@ (800f228 <vTaskSwitchContext+0xbc>)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f208:	4b09      	ldr	r3, [pc, #36]	@ (800f230 <vTaskSwitchContext+0xc4>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	3354      	adds	r3, #84	@ 0x54
 800f20e:	4a09      	ldr	r2, [pc, #36]	@ (800f234 <vTaskSwitchContext+0xc8>)
 800f210:	6013      	str	r3, [r2, #0]
}
 800f212:	bf00      	nop
 800f214:	3714      	adds	r7, #20
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	20002dc0 	.word	0x20002dc0
 800f224:	20002dac 	.word	0x20002dac
 800f228:	20002da0 	.word	0x20002da0
 800f22c:	200028c8 	.word	0x200028c8
 800f230:	200028c4 	.word	0x200028c4
 800f234:	2000029c 	.word	0x2000029c

0800f238 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10b      	bne.n	800f260 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24c:	f383 8811 	msr	BASEPRI, r3
 800f250:	f3bf 8f6f 	isb	sy
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	60fb      	str	r3, [r7, #12]
}
 800f25a:	bf00      	nop
 800f25c:	bf00      	nop
 800f25e:	e7fd      	b.n	800f25c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f260:	4b07      	ldr	r3, [pc, #28]	@ (800f280 <vTaskPlaceOnEventList+0x48>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3318      	adds	r3, #24
 800f266:	4619      	mov	r1, r3
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7fe fcb2 	bl	800dbd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f26e:	2101      	movs	r1, #1
 800f270:	6838      	ldr	r0, [r7, #0]
 800f272:	f000 fc41 	bl	800faf8 <prvAddCurrentTaskToDelayedList>
}
 800f276:	bf00      	nop
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	200028c4 	.word	0x200028c4

0800f284 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d10b      	bne.n	800f2ae <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800f296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	617b      	str	r3, [r7, #20]
}
 800f2a8:	bf00      	nop
 800f2aa:	bf00      	nop
 800f2ac:	e7fd      	b.n	800f2aa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f2ae:	4b12      	ldr	r3, [pc, #72]	@ (800f2f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10b      	bne.n	800f2ce <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	613b      	str	r3, [r7, #16]
}
 800f2c8:	bf00      	nop
 800f2ca:	bf00      	nop
 800f2cc:	e7fd      	b.n	800f2ca <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800f2fc <vTaskPlaceOnUnorderedEventList+0x78>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f2d8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2da:	4b08      	ldr	r3, [pc, #32]	@ (800f2fc <vTaskPlaceOnUnorderedEventList+0x78>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3318      	adds	r3, #24
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f7fe fc51 	bl	800db8a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2e8:	2101      	movs	r1, #1
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fc04 	bl	800faf8 <prvAddCurrentTaskToDelayedList>
}
 800f2f0:	bf00      	nop
 800f2f2:	3718      	adds	r7, #24
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20002dc0 	.word	0x20002dc0
 800f2fc:	200028c4 	.word	0x200028c4

0800f300 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10b      	bne.n	800f32a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f316:	f383 8811 	msr	BASEPRI, r3
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	617b      	str	r3, [r7, #20]
}
 800f324:	bf00      	nop
 800f326:	bf00      	nop
 800f328:	e7fd      	b.n	800f326 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f32a:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <vTaskPlaceOnEventListRestricted+0x54>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3318      	adds	r3, #24
 800f330:	4619      	mov	r1, r3
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7fe fc29 	bl	800db8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f33e:	f04f 33ff 	mov.w	r3, #4294967295
 800f342:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f344:	6879      	ldr	r1, [r7, #4]
 800f346:	68b8      	ldr	r0, [r7, #8]
 800f348:	f000 fbd6 	bl	800faf8 <prvAddCurrentTaskToDelayedList>
	}
 800f34c:	bf00      	nop
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	200028c4 	.word	0x200028c4

0800f358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10b      	bne.n	800f386 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	60fb      	str	r3, [r7, #12]
}
 800f380:	bf00      	nop
 800f382:	bf00      	nop
 800f384:	e7fd      	b.n	800f382 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	3318      	adds	r3, #24
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe fc5a 	bl	800dc44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f390:	4b1d      	ldr	r3, [pc, #116]	@ (800f408 <xTaskRemoveFromEventList+0xb0>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d11d      	bne.n	800f3d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	3304      	adds	r3, #4
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fe fc51 	bl	800dc44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3a6:	4b19      	ldr	r3, [pc, #100]	@ (800f40c <xTaskRemoveFromEventList+0xb4>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d903      	bls.n	800f3b6 <xTaskRemoveFromEventList+0x5e>
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b2:	4a16      	ldr	r2, [pc, #88]	@ (800f40c <xTaskRemoveFromEventList+0xb4>)
 800f3b4:	6013      	str	r3, [r2, #0]
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	4413      	add	r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	4a13      	ldr	r2, [pc, #76]	@ (800f410 <xTaskRemoveFromEventList+0xb8>)
 800f3c4:	441a      	add	r2, r3
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	f7fe fbdc 	bl	800db8a <vListInsertEnd>
 800f3d2:	e005      	b.n	800f3e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	3318      	adds	r3, #24
 800f3d8:	4619      	mov	r1, r3
 800f3da:	480e      	ldr	r0, [pc, #56]	@ (800f414 <xTaskRemoveFromEventList+0xbc>)
 800f3dc:	f7fe fbd5 	bl	800db8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f418 <xTaskRemoveFromEventList+0xc0>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d905      	bls.n	800f3fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f41c <xTaskRemoveFromEventList+0xc4>)
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	601a      	str	r2, [r3, #0]
 800f3f8:	e001      	b.n	800f3fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3fe:	697b      	ldr	r3, [r7, #20]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	20002dc0 	.word	0x20002dc0
 800f40c:	20002da0 	.word	0x20002da0
 800f410:	200028c8 	.word	0x200028c8
 800f414:	20002d58 	.word	0x20002d58
 800f418:	200028c4 	.word	0x200028c4
 800f41c:	20002dac 	.word	0x20002dac

0800f420 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f42a:	4b2a      	ldr	r3, [pc, #168]	@ (800f4d4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10b      	bne.n	800f44a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800f432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f436:	f383 8811 	msr	BASEPRI, r3
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	613b      	str	r3, [r7, #16]
}
 800f444:	bf00      	nop
 800f446:	bf00      	nop
 800f448:	e7fd      	b.n	800f446 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10b      	bne.n	800f478 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	60fb      	str	r3, [r7, #12]
}
 800f472:	bf00      	nop
 800f474:	bf00      	nop
 800f476:	e7fd      	b.n	800f474 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7fe fbe3 	bl	800dc44 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	3304      	adds	r3, #4
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fbde 	bl	800dc44 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f48c:	4b12      	ldr	r3, [pc, #72]	@ (800f4d8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	429a      	cmp	r2, r3
 800f492:	d903      	bls.n	800f49c <vTaskRemoveFromUnorderedEventList+0x7c>
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f498:	4a0f      	ldr	r2, [pc, #60]	@ (800f4d8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f49a:	6013      	str	r3, [r2, #0]
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	4a0c      	ldr	r2, [pc, #48]	@ (800f4dc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f4aa:	441a      	add	r2, r3
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7fe fb69 	bl	800db8a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4bc:	4b08      	ldr	r3, [pc, #32]	@ (800f4e0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d902      	bls.n	800f4cc <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f4c6:	4b07      	ldr	r3, [pc, #28]	@ (800f4e4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	601a      	str	r2, [r3, #0]
	}
}
 800f4cc:	bf00      	nop
 800f4ce:	3718      	adds	r7, #24
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	20002dc0 	.word	0x20002dc0
 800f4d8:	20002da0 	.word	0x20002da0
 800f4dc:	200028c8 	.word	0x200028c8
 800f4e0:	200028c4 	.word	0x200028c4
 800f4e4:	20002dac 	.word	0x20002dac

0800f4e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4f0:	4b06      	ldr	r3, [pc, #24]	@ (800f50c <vTaskInternalSetTimeOutState+0x24>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4f8:	4b05      	ldr	r3, [pc, #20]	@ (800f510 <vTaskInternalSetTimeOutState+0x28>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	605a      	str	r2, [r3, #4]
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr
 800f50c:	20002db0 	.word	0x20002db0
 800f510:	20002d9c 	.word	0x20002d9c

0800f514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10b      	bne.n	800f53c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	613b      	str	r3, [r7, #16]
}
 800f536:	bf00      	nop
 800f538:	bf00      	nop
 800f53a:	e7fd      	b.n	800f538 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f546:	f383 8811 	msr	BASEPRI, r3
 800f54a:	f3bf 8f6f 	isb	sy
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	60fb      	str	r3, [r7, #12]
}
 800f554:	bf00      	nop
 800f556:	bf00      	nop
 800f558:	e7fd      	b.n	800f556 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f55a:	f000 ffcd 	bl	80104f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f55e:	4b1d      	ldr	r3, [pc, #116]	@ (800f5d4 <xTaskCheckForTimeOut+0xc0>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	69ba      	ldr	r2, [r7, #24]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d102      	bne.n	800f57e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f578:	2300      	movs	r3, #0
 800f57a:	61fb      	str	r3, [r7, #28]
 800f57c:	e023      	b.n	800f5c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	4b15      	ldr	r3, [pc, #84]	@ (800f5d8 <xTaskCheckForTimeOut+0xc4>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	429a      	cmp	r2, r3
 800f588:	d007      	beq.n	800f59a <xTaskCheckForTimeOut+0x86>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	69ba      	ldr	r2, [r7, #24]
 800f590:	429a      	cmp	r2, r3
 800f592:	d302      	bcc.n	800f59a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f594:	2301      	movs	r3, #1
 800f596:	61fb      	str	r3, [r7, #28]
 800f598:	e015      	b.n	800f5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d20b      	bcs.n	800f5bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	1ad2      	subs	r2, r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff ff99 	bl	800f4e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61fb      	str	r3, [r7, #28]
 800f5ba:	e004      	b.n	800f5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5c6:	f000 ffc9 	bl	801055c <vPortExitCritical>

	return xReturn;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3720      	adds	r7, #32
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	20002d9c 	.word	0x20002d9c
 800f5d8:	20002db0 	.word	0x20002db0

0800f5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5dc:	b480      	push	{r7}
 800f5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5e0:	4b03      	ldr	r3, [pc, #12]	@ (800f5f0 <vTaskMissedYield+0x14>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	601a      	str	r2, [r3, #0]
}
 800f5e6:	bf00      	nop
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr
 800f5f0:	20002dac 	.word	0x20002dac

0800f5f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5fc:	f000 f852 	bl	800f6a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f600:	4b06      	ldr	r3, [pc, #24]	@ (800f61c <prvIdleTask+0x28>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d9f9      	bls.n	800f5fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f608:	4b05      	ldr	r3, [pc, #20]	@ (800f620 <prvIdleTask+0x2c>)
 800f60a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f618:	e7f0      	b.n	800f5fc <prvIdleTask+0x8>
 800f61a:	bf00      	nop
 800f61c:	200028c8 	.word	0x200028c8
 800f620:	e000ed04 	.word	0xe000ed04

0800f624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f62a:	2300      	movs	r3, #0
 800f62c:	607b      	str	r3, [r7, #4]
 800f62e:	e00c      	b.n	800f64a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	4613      	mov	r3, r2
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	4a12      	ldr	r2, [pc, #72]	@ (800f684 <prvInitialiseTaskLists+0x60>)
 800f63c:	4413      	add	r3, r2
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fa76 	bl	800db30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3301      	adds	r3, #1
 800f648:	607b      	str	r3, [r7, #4]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b37      	cmp	r3, #55	@ 0x37
 800f64e:	d9ef      	bls.n	800f630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f650:	480d      	ldr	r0, [pc, #52]	@ (800f688 <prvInitialiseTaskLists+0x64>)
 800f652:	f7fe fa6d 	bl	800db30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f656:	480d      	ldr	r0, [pc, #52]	@ (800f68c <prvInitialiseTaskLists+0x68>)
 800f658:	f7fe fa6a 	bl	800db30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f65c:	480c      	ldr	r0, [pc, #48]	@ (800f690 <prvInitialiseTaskLists+0x6c>)
 800f65e:	f7fe fa67 	bl	800db30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f662:	480c      	ldr	r0, [pc, #48]	@ (800f694 <prvInitialiseTaskLists+0x70>)
 800f664:	f7fe fa64 	bl	800db30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f668:	480b      	ldr	r0, [pc, #44]	@ (800f698 <prvInitialiseTaskLists+0x74>)
 800f66a:	f7fe fa61 	bl	800db30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f66e:	4b0b      	ldr	r3, [pc, #44]	@ (800f69c <prvInitialiseTaskLists+0x78>)
 800f670:	4a05      	ldr	r2, [pc, #20]	@ (800f688 <prvInitialiseTaskLists+0x64>)
 800f672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f674:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a0 <prvInitialiseTaskLists+0x7c>)
 800f676:	4a05      	ldr	r2, [pc, #20]	@ (800f68c <prvInitialiseTaskLists+0x68>)
 800f678:	601a      	str	r2, [r3, #0]
}
 800f67a:	bf00      	nop
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	200028c8 	.word	0x200028c8
 800f688:	20002d28 	.word	0x20002d28
 800f68c:	20002d3c 	.word	0x20002d3c
 800f690:	20002d58 	.word	0x20002d58
 800f694:	20002d6c 	.word	0x20002d6c
 800f698:	20002d84 	.word	0x20002d84
 800f69c:	20002d50 	.word	0x20002d50
 800f6a0:	20002d54 	.word	0x20002d54

0800f6a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6aa:	e019      	b.n	800f6e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6ac:	f000 ff24 	bl	80104f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b0:	4b10      	ldr	r3, [pc, #64]	@ (800f6f4 <prvCheckTasksWaitingTermination+0x50>)
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fe fac1 	bl	800dc44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f8 <prvCheckTasksWaitingTermination+0x54>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	4a0b      	ldr	r2, [pc, #44]	@ (800f6f8 <prvCheckTasksWaitingTermination+0x54>)
 800f6ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f6fc <prvCheckTasksWaitingTermination+0x58>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	4a0a      	ldr	r2, [pc, #40]	@ (800f6fc <prvCheckTasksWaitingTermination+0x58>)
 800f6d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6d6:	f000 ff41 	bl	801055c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 f810 	bl	800f700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6e0:	4b06      	ldr	r3, [pc, #24]	@ (800f6fc <prvCheckTasksWaitingTermination+0x58>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1e1      	bne.n	800f6ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6e8:	bf00      	nop
 800f6ea:	bf00      	nop
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20002d6c 	.word	0x20002d6c
 800f6f8:	20002d98 	.word	0x20002d98
 800f6fc:	20002d80 	.word	0x20002d80

0800f700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	3354      	adds	r3, #84	@ 0x54
 800f70c:	4618      	mov	r0, r3
 800f70e:	f002 f85b 	bl	80117c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d108      	bne.n	800f72e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f720:	4618      	mov	r0, r3
 800f722:	f001 f8d9 	bl	80108d8 <vPortFree>
				vPortFree( pxTCB );
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f001 f8d6 	bl	80108d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f72c:	e019      	b.n	800f762 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f734:	2b01      	cmp	r3, #1
 800f736:	d103      	bne.n	800f740 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f001 f8cd 	bl	80108d8 <vPortFree>
	}
 800f73e:	e010      	b.n	800f762 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f746:	2b02      	cmp	r3, #2
 800f748:	d00b      	beq.n	800f762 <prvDeleteTCB+0x62>
	__asm volatile
 800f74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	60fb      	str	r3, [r7, #12]
}
 800f75c:	bf00      	nop
 800f75e:	bf00      	nop
 800f760:	e7fd      	b.n	800f75e <prvDeleteTCB+0x5e>
	}
 800f762:	bf00      	nop
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
	...

0800f76c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f772:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a4 <prvResetNextTaskUnblockTime+0x38>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d104      	bne.n	800f786 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f77c:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f77e:	f04f 32ff 	mov.w	r2, #4294967295
 800f782:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f784:	e008      	b.n	800f798 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f786:	4b07      	ldr	r3, [pc, #28]	@ (800f7a4 <prvResetNextTaskUnblockTime+0x38>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	4a04      	ldr	r2, [pc, #16]	@ (800f7a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f796:	6013      	str	r3, [r2, #0]
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr
 800f7a4:	20002d50 	.word	0x20002d50
 800f7a8:	20002db8 	.word	0x20002db8

0800f7ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f7e0 <xTaskGetSchedulerState+0x34>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d102      	bne.n	800f7c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	607b      	str	r3, [r7, #4]
 800f7be:	e008      	b.n	800f7d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7c0:	4b08      	ldr	r3, [pc, #32]	@ (800f7e4 <xTaskGetSchedulerState+0x38>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d102      	bne.n	800f7ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	607b      	str	r3, [r7, #4]
 800f7cc:	e001      	b.n	800f7d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7d2:	687b      	ldr	r3, [r7, #4]
	}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	20002da4 	.word	0x20002da4
 800f7e4:	20002dc0 	.word	0x20002dc0

0800f7e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d051      	beq.n	800f8a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f802:	4b2a      	ldr	r3, [pc, #168]	@ (800f8ac <xTaskPriorityInherit+0xc4>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f808:	429a      	cmp	r2, r3
 800f80a:	d241      	bcs.n	800f890 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	699b      	ldr	r3, [r3, #24]
 800f810:	2b00      	cmp	r3, #0
 800f812:	db06      	blt.n	800f822 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f814:	4b25      	ldr	r3, [pc, #148]	@ (800f8ac <xTaskPriorityInherit+0xc4>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f81a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6959      	ldr	r1, [r3, #20]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f82a:	4613      	mov	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4413      	add	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	4a1f      	ldr	r2, [pc, #124]	@ (800f8b0 <xTaskPriorityInherit+0xc8>)
 800f834:	4413      	add	r3, r2
 800f836:	4299      	cmp	r1, r3
 800f838:	d122      	bne.n	800f880 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	3304      	adds	r3, #4
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fe fa00 	bl	800dc44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f844:	4b19      	ldr	r3, [pc, #100]	@ (800f8ac <xTaskPriorityInherit+0xc4>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f852:	4b18      	ldr	r3, [pc, #96]	@ (800f8b4 <xTaskPriorityInherit+0xcc>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	429a      	cmp	r2, r3
 800f858:	d903      	bls.n	800f862 <xTaskPriorityInherit+0x7a>
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f85e:	4a15      	ldr	r2, [pc, #84]	@ (800f8b4 <xTaskPriorityInherit+0xcc>)
 800f860:	6013      	str	r3, [r2, #0]
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f866:	4613      	mov	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	4a10      	ldr	r2, [pc, #64]	@ (800f8b0 <xTaskPriorityInherit+0xc8>)
 800f870:	441a      	add	r2, r3
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	3304      	adds	r3, #4
 800f876:	4619      	mov	r1, r3
 800f878:	4610      	mov	r0, r2
 800f87a:	f7fe f986 	bl	800db8a <vListInsertEnd>
 800f87e:	e004      	b.n	800f88a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f880:	4b0a      	ldr	r3, [pc, #40]	@ (800f8ac <xTaskPriorityInherit+0xc4>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f88a:	2301      	movs	r3, #1
 800f88c:	60fb      	str	r3, [r7, #12]
 800f88e:	e008      	b.n	800f8a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f894:	4b05      	ldr	r3, [pc, #20]	@ (800f8ac <xTaskPriorityInherit+0xc4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d201      	bcs.n	800f8a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
	}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	200028c4 	.word	0x200028c4
 800f8b0:	200028c8 	.word	0x200028c8
 800f8b4:	20002da0 	.word	0x20002da0

0800f8b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d058      	beq.n	800f980 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f8ce:	4b2f      	ldr	r3, [pc, #188]	@ (800f98c <xTaskPriorityDisinherit+0xd4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d00b      	beq.n	800f8f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8dc:	f383 8811 	msr	BASEPRI, r3
 800f8e0:	f3bf 8f6f 	isb	sy
 800f8e4:	f3bf 8f4f 	dsb	sy
 800f8e8:	60fb      	str	r3, [r7, #12]
}
 800f8ea:	bf00      	nop
 800f8ec:	bf00      	nop
 800f8ee:	e7fd      	b.n	800f8ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d10b      	bne.n	800f910 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fc:	f383 8811 	msr	BASEPRI, r3
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	60bb      	str	r3, [r7, #8]
}
 800f90a:	bf00      	nop
 800f90c:	bf00      	nop
 800f90e:	e7fd      	b.n	800f90c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f914:	1e5a      	subs	r2, r3, #1
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f922:	429a      	cmp	r2, r3
 800f924:	d02c      	beq.n	800f980 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d128      	bne.n	800f980 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	3304      	adds	r3, #4
 800f932:	4618      	mov	r0, r3
 800f934:	f7fe f986 	bl	800dc44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f944:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f950:	4b0f      	ldr	r3, [pc, #60]	@ (800f990 <xTaskPriorityDisinherit+0xd8>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	d903      	bls.n	800f960 <xTaskPriorityDisinherit+0xa8>
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f95c:	4a0c      	ldr	r2, [pc, #48]	@ (800f990 <xTaskPriorityDisinherit+0xd8>)
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f964:	4613      	mov	r3, r2
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	4413      	add	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4a09      	ldr	r2, [pc, #36]	@ (800f994 <xTaskPriorityDisinherit+0xdc>)
 800f96e:	441a      	add	r2, r3
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	3304      	adds	r3, #4
 800f974:	4619      	mov	r1, r3
 800f976:	4610      	mov	r0, r2
 800f978:	f7fe f907 	bl	800db8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f97c:	2301      	movs	r3, #1
 800f97e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f980:	697b      	ldr	r3, [r7, #20]
	}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	200028c4 	.word	0x200028c4
 800f990:	20002da0 	.word	0x20002da0
 800f994:	200028c8 	.word	0x200028c8

0800f998 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b088      	sub	sp, #32
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d06c      	beq.n	800fa8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d10b      	bne.n	800f9d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9bc:	f383 8811 	msr	BASEPRI, r3
 800f9c0:	f3bf 8f6f 	isb	sy
 800f9c4:	f3bf 8f4f 	dsb	sy
 800f9c8:	60fb      	str	r3, [r7, #12]
}
 800f9ca:	bf00      	nop
 800f9cc:	bf00      	nop
 800f9ce:	e7fd      	b.n	800f9cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d902      	bls.n	800f9e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	61fb      	str	r3, [r7, #28]
 800f9de:	e002      	b.n	800f9e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9ea:	69fa      	ldr	r2, [r7, #28]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d04c      	beq.n	800fa8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d147      	bne.n	800fa8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f9fa:	4b26      	ldr	r3, [pc, #152]	@ (800fa94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	69ba      	ldr	r2, [r7, #24]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d10b      	bne.n	800fa1c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	60bb      	str	r3, [r7, #8]
}
 800fa16:	bf00      	nop
 800fa18:	bf00      	nop
 800fa1a:	e7fd      	b.n	800fa18 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	69fa      	ldr	r2, [r7, #28]
 800fa26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	699b      	ldr	r3, [r3, #24]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	db04      	blt.n	800fa3a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa3a:	69bb      	ldr	r3, [r7, #24]
 800fa3c:	6959      	ldr	r1, [r3, #20]
 800fa3e:	693a      	ldr	r2, [r7, #16]
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4a13      	ldr	r2, [pc, #76]	@ (800fa98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	4299      	cmp	r1, r3
 800fa4e:	d11c      	bne.n	800fa8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	3304      	adds	r3, #4
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fe f8f5 	bl	800dc44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fa9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d903      	bls.n	800fa6e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa6a:	4a0c      	ldr	r2, [pc, #48]	@ (800fa9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa6c:	6013      	str	r3, [r2, #0]
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa72:	4613      	mov	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	4413      	add	r3, r2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4a07      	ldr	r2, [pc, #28]	@ (800fa98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa7c:	441a      	add	r2, r3
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	3304      	adds	r3, #4
 800fa82:	4619      	mov	r1, r3
 800fa84:	4610      	mov	r0, r2
 800fa86:	f7fe f880 	bl	800db8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa8a:	bf00      	nop
 800fa8c:	3720      	adds	r7, #32
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	200028c4 	.word	0x200028c4
 800fa98:	200028c8 	.word	0x200028c8
 800fa9c:	20002da0 	.word	0x20002da0

0800faa0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800faa6:	4b09      	ldr	r3, [pc, #36]	@ (800facc <uxTaskResetEventItemValue+0x2c>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	699b      	ldr	r3, [r3, #24]
 800faac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800faae:	4b07      	ldr	r3, [pc, #28]	@ (800facc <uxTaskResetEventItemValue+0x2c>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fab4:	4b05      	ldr	r3, [pc, #20]	@ (800facc <uxTaskResetEventItemValue+0x2c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fabc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800fabe:	687b      	ldr	r3, [r7, #4]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	200028c4 	.word	0x200028c4

0800fad0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fad0:	b480      	push	{r7}
 800fad2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fad4:	4b07      	ldr	r3, [pc, #28]	@ (800faf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d004      	beq.n	800fae6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fadc:	4b05      	ldr	r3, [pc, #20]	@ (800faf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fae2:	3201      	adds	r2, #1
 800fae4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fae6:	4b03      	ldr	r3, [pc, #12]	@ (800faf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800fae8:	681b      	ldr	r3, [r3, #0]
	}
 800faea:	4618      	mov	r0, r3
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr
 800faf4:	200028c4 	.word	0x200028c4

0800faf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb02:	4b21      	ldr	r3, [pc, #132]	@ (800fb88 <prvAddCurrentTaskToDelayedList+0x90>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb08:	4b20      	ldr	r3, [pc, #128]	@ (800fb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fe f898 	bl	800dc44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1a:	d10a      	bne.n	800fb32 <prvAddCurrentTaskToDelayedList+0x3a>
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d007      	beq.n	800fb32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb22:	4b1a      	ldr	r3, [pc, #104]	@ (800fb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3304      	adds	r3, #4
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4819      	ldr	r0, [pc, #100]	@ (800fb90 <prvAddCurrentTaskToDelayedList+0x98>)
 800fb2c:	f7fe f82d 	bl	800db8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb30:	e026      	b.n	800fb80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4413      	add	r3, r2
 800fb38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb3a:	4b14      	ldr	r3, [pc, #80]	@ (800fb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d209      	bcs.n	800fb5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb4a:	4b12      	ldr	r3, [pc, #72]	@ (800fb94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	3304      	adds	r3, #4
 800fb54:	4619      	mov	r1, r3
 800fb56:	4610      	mov	r0, r2
 800fb58:	f7fe f83b 	bl	800dbd2 <vListInsert>
}
 800fb5c:	e010      	b.n	800fb80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	4b0a      	ldr	r3, [pc, #40]	@ (800fb8c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4610      	mov	r0, r2
 800fb6c:	f7fe f831 	bl	800dbd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb70:	4b0a      	ldr	r3, [pc, #40]	@ (800fb9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d202      	bcs.n	800fb80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb7a:	4a08      	ldr	r2, [pc, #32]	@ (800fb9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	6013      	str	r3, [r2, #0]
}
 800fb80:	bf00      	nop
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	20002d9c 	.word	0x20002d9c
 800fb8c:	200028c4 	.word	0x200028c4
 800fb90:	20002d84 	.word	0x20002d84
 800fb94:	20002d54 	.word	0x20002d54
 800fb98:	20002d50 	.word	0x20002d50
 800fb9c:	20002db8 	.word	0x20002db8

0800fba0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	@ 0x28
 800fba4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fbaa:	f000 fb13 	bl	80101d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fbae:	4b1d      	ldr	r3, [pc, #116]	@ (800fc24 <xTimerCreateTimerTask+0x84>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d021      	beq.n	800fbfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fbbe:	1d3a      	adds	r2, r7, #4
 800fbc0:	f107 0108 	add.w	r1, r7, #8
 800fbc4:	f107 030c 	add.w	r3, r7, #12
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7fd fddb 	bl	800d784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fbce:	6879      	ldr	r1, [r7, #4]
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	9202      	str	r2, [sp, #8]
 800fbd6:	9301      	str	r3, [sp, #4]
 800fbd8:	2337      	movs	r3, #55	@ 0x37
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	2300      	movs	r3, #0
 800fbde:	460a      	mov	r2, r1
 800fbe0:	4911      	ldr	r1, [pc, #68]	@ (800fc28 <xTimerCreateTimerTask+0x88>)
 800fbe2:	4812      	ldr	r0, [pc, #72]	@ (800fc2c <xTimerCreateTimerTask+0x8c>)
 800fbe4:	f7fe fee8 	bl	800e9b8 <xTaskCreateStatic>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	4a11      	ldr	r2, [pc, #68]	@ (800fc30 <xTimerCreateTimerTask+0x90>)
 800fbec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fbee:	4b10      	ldr	r3, [pc, #64]	@ (800fc30 <xTimerCreateTimerTask+0x90>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d001      	beq.n	800fbfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d10b      	bne.n	800fc18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	613b      	str	r3, [r7, #16]
}
 800fc12:	bf00      	nop
 800fc14:	bf00      	nop
 800fc16:	e7fd      	b.n	800fc14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fc18:	697b      	ldr	r3, [r7, #20]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	20002df4 	.word	0x20002df4
 800fc28:	08014218 	.word	0x08014218
 800fc2c:	0800fd6d 	.word	0x0800fd6d
 800fc30:	20002df8 	.word	0x20002df8

0800fc34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b08a      	sub	sp, #40	@ 0x28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
 800fc40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fc42:	2300      	movs	r3, #0
 800fc44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10b      	bne.n	800fc64 <xTimerGenericCommand+0x30>
	__asm volatile
 800fc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc50:	f383 8811 	msr	BASEPRI, r3
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	f3bf 8f4f 	dsb	sy
 800fc5c:	623b      	str	r3, [r7, #32]
}
 800fc5e:	bf00      	nop
 800fc60:	bf00      	nop
 800fc62:	e7fd      	b.n	800fc60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fc64:	4b19      	ldr	r3, [pc, #100]	@ (800fccc <xTimerGenericCommand+0x98>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d02a      	beq.n	800fcc2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b05      	cmp	r3, #5
 800fc7c:	dc18      	bgt.n	800fcb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc7e:	f7ff fd95 	bl	800f7ac <xTaskGetSchedulerState>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d109      	bne.n	800fc9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fc88:	4b10      	ldr	r3, [pc, #64]	@ (800fccc <xTimerGenericCommand+0x98>)
 800fc8a:	6818      	ldr	r0, [r3, #0]
 800fc8c:	f107 0110 	add.w	r1, r7, #16
 800fc90:	2300      	movs	r3, #0
 800fc92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc94:	f7fe f978 	bl	800df88 <xQueueGenericSend>
 800fc98:	6278      	str	r0, [r7, #36]	@ 0x24
 800fc9a:	e012      	b.n	800fcc2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc9c:	4b0b      	ldr	r3, [pc, #44]	@ (800fccc <xTimerGenericCommand+0x98>)
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	f107 0110 	add.w	r1, r7, #16
 800fca4:	2300      	movs	r3, #0
 800fca6:	2200      	movs	r2, #0
 800fca8:	f7fe f96e 	bl	800df88 <xQueueGenericSend>
 800fcac:	6278      	str	r0, [r7, #36]	@ 0x24
 800fcae:	e008      	b.n	800fcc2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fcb0:	4b06      	ldr	r3, [pc, #24]	@ (800fccc <xTimerGenericCommand+0x98>)
 800fcb2:	6818      	ldr	r0, [r3, #0]
 800fcb4:	f107 0110 	add.w	r1, r7, #16
 800fcb8:	2300      	movs	r3, #0
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	f7fe fa66 	bl	800e18c <xQueueGenericSendFromISR>
 800fcc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3728      	adds	r7, #40	@ 0x28
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	20002df4 	.word	0x20002df4

0800fcd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b088      	sub	sp, #32
 800fcd4:	af02      	add	r7, sp, #8
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcda:	4b23      	ldr	r3, [pc, #140]	@ (800fd68 <prvProcessExpiredTimer+0x98>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	3304      	adds	r3, #4
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fd ffab 	bl	800dc44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcf4:	f003 0304 	and.w	r3, r3, #4
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d023      	beq.n	800fd44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	699a      	ldr	r2, [r3, #24]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	18d1      	adds	r1, r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	6978      	ldr	r0, [r7, #20]
 800fd0a:	f000 f8d5 	bl	800feb8 <prvInsertTimerInActiveList>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d020      	beq.n	800fd56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd14:	2300      	movs	r3, #0
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	2300      	movs	r3, #0
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	6978      	ldr	r0, [r7, #20]
 800fd20:	f7ff ff88 	bl	800fc34 <xTimerGenericCommand>
 800fd24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d114      	bne.n	800fd56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd30:	f383 8811 	msr	BASEPRI, r3
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	60fb      	str	r3, [r7, #12]
}
 800fd3e:	bf00      	nop
 800fd40:	bf00      	nop
 800fd42:	e7fd      	b.n	800fd40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd4a:	f023 0301 	bic.w	r3, r3, #1
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	6a1b      	ldr	r3, [r3, #32]
 800fd5a:	6978      	ldr	r0, [r7, #20]
 800fd5c:	4798      	blx	r3
}
 800fd5e:	bf00      	nop
 800fd60:	3718      	adds	r7, #24
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	20002dec 	.word	0x20002dec

0800fd6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd74:	f107 0308 	add.w	r3, r7, #8
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f000 f859 	bl	800fe30 <prvGetNextExpireTime>
 800fd7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	4619      	mov	r1, r3
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f000 f805 	bl	800fd94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fd8a:	f000 f8d7 	bl	800ff3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd8e:	bf00      	nop
 800fd90:	e7f0      	b.n	800fd74 <prvTimerTask+0x8>
	...

0800fd94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fd9e:	f7ff f86f 	bl	800ee80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fda2:	f107 0308 	add.w	r3, r7, #8
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 f866 	bl	800fe78 <prvSampleTimeNow>
 800fdac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d130      	bne.n	800fe16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10a      	bne.n	800fdd0 <prvProcessTimerOrBlockTask+0x3c>
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d806      	bhi.n	800fdd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fdc2:	f7ff f86b 	bl	800ee9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fdc6:	68f9      	ldr	r1, [r7, #12]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f7ff ff81 	bl	800fcd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fdce:	e024      	b.n	800fe1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d008      	beq.n	800fde8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fdd6:	4b13      	ldr	r3, [pc, #76]	@ (800fe24 <prvProcessTimerOrBlockTask+0x90>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <prvProcessTimerOrBlockTask+0x50>
 800fde0:	2301      	movs	r3, #1
 800fde2:	e000      	b.n	800fde6 <prvProcessTimerOrBlockTask+0x52>
 800fde4:	2300      	movs	r3, #0
 800fde6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fde8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe28 <prvProcessTimerOrBlockTask+0x94>)
 800fdea:	6818      	ldr	r0, [r3, #0]
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	683a      	ldr	r2, [r7, #0]
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	f7fe fdab 	bl	800e950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fdfa:	f7ff f84f 	bl	800ee9c <xTaskResumeAll>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10a      	bne.n	800fe1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fe04:	4b09      	ldr	r3, [pc, #36]	@ (800fe2c <prvProcessTimerOrBlockTask+0x98>)
 800fe06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	f3bf 8f6f 	isb	sy
}
 800fe14:	e001      	b.n	800fe1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fe16:	f7ff f841 	bl	800ee9c <xTaskResumeAll>
}
 800fe1a:	bf00      	nop
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20002df0 	.word	0x20002df0
 800fe28:	20002df4 	.word	0x20002df4
 800fe2c:	e000ed04 	.word	0xe000ed04

0800fe30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe38:	4b0e      	ldr	r3, [pc, #56]	@ (800fe74 <prvGetNextExpireTime+0x44>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <prvGetNextExpireTime+0x16>
 800fe42:	2201      	movs	r2, #1
 800fe44:	e000      	b.n	800fe48 <prvGetNextExpireTime+0x18>
 800fe46:	2200      	movs	r2, #0
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d105      	bne.n	800fe60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe54:	4b07      	ldr	r3, [pc, #28]	@ (800fe74 <prvGetNextExpireTime+0x44>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	60fb      	str	r3, [r7, #12]
 800fe5e:	e001      	b.n	800fe64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fe60:	2300      	movs	r3, #0
 800fe62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fe64:	68fb      	ldr	r3, [r7, #12]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3714      	adds	r7, #20
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	20002dec 	.word	0x20002dec

0800fe78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fe80:	f7ff f8aa 	bl	800efd8 <xTaskGetTickCount>
 800fe84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fe86:	4b0b      	ldr	r3, [pc, #44]	@ (800feb4 <prvSampleTimeNow+0x3c>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68fa      	ldr	r2, [r7, #12]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d205      	bcs.n	800fe9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fe90:	f000 f93a 	bl	8010108 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	e002      	b.n	800fea2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fea2:	4a04      	ldr	r2, [pc, #16]	@ (800feb4 <prvSampleTimeNow+0x3c>)
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fea8:	68fb      	ldr	r3, [r7, #12]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	20002dfc 	.word	0x20002dfc

0800feb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
 800fec4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fec6:	2300      	movs	r3, #0
 800fec8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	68ba      	ldr	r2, [r7, #8]
 800fece:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d812      	bhi.n	800ff04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	1ad2      	subs	r2, r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	699b      	ldr	r3, [r3, #24]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d302      	bcc.n	800fef2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800feec:	2301      	movs	r3, #1
 800feee:	617b      	str	r3, [r7, #20]
 800fef0:	e01b      	b.n	800ff2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fef2:	4b10      	ldr	r3, [pc, #64]	@ (800ff34 <prvInsertTimerInActiveList+0x7c>)
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	3304      	adds	r3, #4
 800fefa:	4619      	mov	r1, r3
 800fefc:	4610      	mov	r0, r2
 800fefe:	f7fd fe68 	bl	800dbd2 <vListInsert>
 800ff02:	e012      	b.n	800ff2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d206      	bcs.n	800ff1a <prvInsertTimerInActiveList+0x62>
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d302      	bcc.n	800ff1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ff14:	2301      	movs	r3, #1
 800ff16:	617b      	str	r3, [r7, #20]
 800ff18:	e007      	b.n	800ff2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff1a:	4b07      	ldr	r3, [pc, #28]	@ (800ff38 <prvInsertTimerInActiveList+0x80>)
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3304      	adds	r3, #4
 800ff22:	4619      	mov	r1, r3
 800ff24:	4610      	mov	r0, r2
 800ff26:	f7fd fe54 	bl	800dbd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ff2a:	697b      	ldr	r3, [r7, #20]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3718      	adds	r7, #24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	20002df0 	.word	0x20002df0
 800ff38:	20002dec 	.word	0x20002dec

0800ff3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b08e      	sub	sp, #56	@ 0x38
 800ff40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff42:	e0ce      	b.n	80100e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	da19      	bge.n	800ff7e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ff4a:	1d3b      	adds	r3, r7, #4
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ff50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10b      	bne.n	800ff6e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	61fb      	str	r3, [r7, #28]
}
 800ff68:	bf00      	nop
 800ff6a:	bf00      	nop
 800ff6c:	e7fd      	b.n	800ff6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff74:	6850      	ldr	r0, [r2, #4]
 800ff76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff78:	6892      	ldr	r2, [r2, #8]
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f2c0 80ae 	blt.w	80100e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ff8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff8c:	695b      	ldr	r3, [r3, #20]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d004      	beq.n	800ff9c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff94:	3304      	adds	r3, #4
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd fe54 	bl	800dc44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff9c:	463b      	mov	r3, r7
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff ff6a 	bl	800fe78 <prvSampleTimeNow>
 800ffa4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2b09      	cmp	r3, #9
 800ffaa:	f200 8097 	bhi.w	80100dc <prvProcessReceivedCommands+0x1a0>
 800ffae:	a201      	add	r2, pc, #4	@ (adr r2, 800ffb4 <prvProcessReceivedCommands+0x78>)
 800ffb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb4:	0800ffdd 	.word	0x0800ffdd
 800ffb8:	0800ffdd 	.word	0x0800ffdd
 800ffbc:	0800ffdd 	.word	0x0800ffdd
 800ffc0:	08010053 	.word	0x08010053
 800ffc4:	08010067 	.word	0x08010067
 800ffc8:	080100b3 	.word	0x080100b3
 800ffcc:	0800ffdd 	.word	0x0800ffdd
 800ffd0:	0800ffdd 	.word	0x0800ffdd
 800ffd4:	08010053 	.word	0x08010053
 800ffd8:	08010067 	.word	0x08010067
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ffdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ffe2:	f043 0301 	orr.w	r3, r3, #1
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	18d1      	adds	r1, r2, r3
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fffc:	f7ff ff5c 	bl	800feb8 <prvInsertTimerInActiveList>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d06c      	beq.n	80100e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010008:	6a1b      	ldr	r3, [r3, #32]
 801000a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801000c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801000e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010014:	f003 0304 	and.w	r3, r3, #4
 8010018:	2b00      	cmp	r3, #0
 801001a:	d061      	beq.n	80100e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	441a      	add	r2, r3
 8010024:	2300      	movs	r3, #0
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	2300      	movs	r3, #0
 801002a:	2100      	movs	r1, #0
 801002c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801002e:	f7ff fe01 	bl	800fc34 <xTimerGenericCommand>
 8010032:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010034:	6a3b      	ldr	r3, [r7, #32]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d152      	bne.n	80100e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801003a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	61bb      	str	r3, [r7, #24]
}
 801004c:	bf00      	nop
 801004e:	bf00      	nop
 8010050:	e7fd      	b.n	801004e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010058:	f023 0301 	bic.w	r3, r3, #1
 801005c:	b2da      	uxtb	r2, r3
 801005e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010060:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010064:	e03d      	b.n	80100e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801006c:	f043 0301 	orr.w	r3, r3, #1
 8010070:	b2da      	uxtb	r2, r3
 8010072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010074:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801007c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801007e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010080:	699b      	ldr	r3, [r3, #24]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10b      	bne.n	801009e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	617b      	str	r3, [r7, #20]
}
 8010098:	bf00      	nop
 801009a:	bf00      	nop
 801009c:	e7fd      	b.n	801009a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801009e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a0:	699a      	ldr	r2, [r3, #24]
 80100a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a4:	18d1      	adds	r1, r2, r3
 80100a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100ac:	f7ff ff04 	bl	800feb8 <prvInsertTimerInActiveList>
					break;
 80100b0:	e017      	b.n	80100e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80100b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80100b8:	f003 0302 	and.w	r3, r3, #2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d103      	bne.n	80100c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80100c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100c2:	f000 fc09 	bl	80108d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80100c6:	e00c      	b.n	80100e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80100ce:	f023 0301 	bic.w	r3, r3, #1
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80100da:	e002      	b.n	80100e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80100dc:	bf00      	nop
 80100de:	e000      	b.n	80100e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80100e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100e2:	4b08      	ldr	r3, [pc, #32]	@ (8010104 <prvProcessReceivedCommands+0x1c8>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	1d39      	adds	r1, r7, #4
 80100e8:	2200      	movs	r2, #0
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fe f8ec 	bl	800e2c8 <xQueueReceive>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f47f af26 	bne.w	800ff44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80100f8:	bf00      	nop
 80100fa:	bf00      	nop
 80100fc:	3730      	adds	r7, #48	@ 0x30
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	20002df4 	.word	0x20002df4

08010108 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b088      	sub	sp, #32
 801010c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801010e:	e049      	b.n	80101a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010110:	4b2e      	ldr	r3, [pc, #184]	@ (80101cc <prvSwitchTimerLists+0xc4>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801011a:	4b2c      	ldr	r3, [pc, #176]	@ (80101cc <prvSwitchTimerLists+0xc4>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3304      	adds	r3, #4
 8010128:	4618      	mov	r0, r3
 801012a:	f7fd fd8b 	bl	800dc44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801013c:	f003 0304 	and.w	r3, r3, #4
 8010140:	2b00      	cmp	r3, #0
 8010142:	d02f      	beq.n	80101a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	693a      	ldr	r2, [r7, #16]
 801014a:	4413      	add	r3, r2
 801014c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	429a      	cmp	r2, r3
 8010154:	d90e      	bls.n	8010174 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	68ba      	ldr	r2, [r7, #8]
 801015a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010162:	4b1a      	ldr	r3, [pc, #104]	@ (80101cc <prvSwitchTimerLists+0xc4>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3304      	adds	r3, #4
 801016a:	4619      	mov	r1, r3
 801016c:	4610      	mov	r0, r2
 801016e:	f7fd fd30 	bl	800dbd2 <vListInsert>
 8010172:	e017      	b.n	80101a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010174:	2300      	movs	r3, #0
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	2300      	movs	r3, #0
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	2100      	movs	r1, #0
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f7ff fd58 	bl	800fc34 <xTimerGenericCommand>
 8010184:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d10b      	bne.n	80101a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801018c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010190:	f383 8811 	msr	BASEPRI, r3
 8010194:	f3bf 8f6f 	isb	sy
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	603b      	str	r3, [r7, #0]
}
 801019e:	bf00      	nop
 80101a0:	bf00      	nop
 80101a2:	e7fd      	b.n	80101a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101a4:	4b09      	ldr	r3, [pc, #36]	@ (80101cc <prvSwitchTimerLists+0xc4>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1b0      	bne.n	8010110 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80101ae:	4b07      	ldr	r3, [pc, #28]	@ (80101cc <prvSwitchTimerLists+0xc4>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80101b4:	4b06      	ldr	r3, [pc, #24]	@ (80101d0 <prvSwitchTimerLists+0xc8>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a04      	ldr	r2, [pc, #16]	@ (80101cc <prvSwitchTimerLists+0xc4>)
 80101ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80101bc:	4a04      	ldr	r2, [pc, #16]	@ (80101d0 <prvSwitchTimerLists+0xc8>)
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	6013      	str	r3, [r2, #0]
}
 80101c2:	bf00      	nop
 80101c4:	3718      	adds	r7, #24
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20002dec 	.word	0x20002dec
 80101d0:	20002df0 	.word	0x20002df0

080101d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80101da:	f000 f98d 	bl	80104f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80101de:	4b15      	ldr	r3, [pc, #84]	@ (8010234 <prvCheckForValidListAndQueue+0x60>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d120      	bne.n	8010228 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80101e6:	4814      	ldr	r0, [pc, #80]	@ (8010238 <prvCheckForValidListAndQueue+0x64>)
 80101e8:	f7fd fca2 	bl	800db30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80101ec:	4813      	ldr	r0, [pc, #76]	@ (801023c <prvCheckForValidListAndQueue+0x68>)
 80101ee:	f7fd fc9f 	bl	800db30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80101f2:	4b13      	ldr	r3, [pc, #76]	@ (8010240 <prvCheckForValidListAndQueue+0x6c>)
 80101f4:	4a10      	ldr	r2, [pc, #64]	@ (8010238 <prvCheckForValidListAndQueue+0x64>)
 80101f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80101f8:	4b12      	ldr	r3, [pc, #72]	@ (8010244 <prvCheckForValidListAndQueue+0x70>)
 80101fa:	4a10      	ldr	r2, [pc, #64]	@ (801023c <prvCheckForValidListAndQueue+0x68>)
 80101fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101fe:	2300      	movs	r3, #0
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	4b11      	ldr	r3, [pc, #68]	@ (8010248 <prvCheckForValidListAndQueue+0x74>)
 8010204:	4a11      	ldr	r2, [pc, #68]	@ (801024c <prvCheckForValidListAndQueue+0x78>)
 8010206:	2110      	movs	r1, #16
 8010208:	200a      	movs	r0, #10
 801020a:	f7fd fdaf 	bl	800dd6c <xQueueGenericCreateStatic>
 801020e:	4603      	mov	r3, r0
 8010210:	4a08      	ldr	r2, [pc, #32]	@ (8010234 <prvCheckForValidListAndQueue+0x60>)
 8010212:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010214:	4b07      	ldr	r3, [pc, #28]	@ (8010234 <prvCheckForValidListAndQueue+0x60>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d005      	beq.n	8010228 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801021c:	4b05      	ldr	r3, [pc, #20]	@ (8010234 <prvCheckForValidListAndQueue+0x60>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	490b      	ldr	r1, [pc, #44]	@ (8010250 <prvCheckForValidListAndQueue+0x7c>)
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fb6a 	bl	800e8fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010228:	f000 f998 	bl	801055c <vPortExitCritical>
}
 801022c:	bf00      	nop
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	20002df4 	.word	0x20002df4
 8010238:	20002dc4 	.word	0x20002dc4
 801023c:	20002dd8 	.word	0x20002dd8
 8010240:	20002dec 	.word	0x20002dec
 8010244:	20002df0 	.word	0x20002df0
 8010248:	20002ea0 	.word	0x20002ea0
 801024c:	20002e00 	.word	0x20002e00
 8010250:	08014220 	.word	0x08014220

08010254 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08a      	sub	sp, #40	@ 0x28
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
 8010260:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010262:	f06f 0301 	mvn.w	r3, #1
 8010266:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010274:	4b06      	ldr	r3, [pc, #24]	@ (8010290 <xTimerPendFunctionCallFromISR+0x3c>)
 8010276:	6818      	ldr	r0, [r3, #0]
 8010278:	f107 0114 	add.w	r1, r7, #20
 801027c:	2300      	movs	r3, #0
 801027e:	683a      	ldr	r2, [r7, #0]
 8010280:	f7fd ff84 	bl	800e18c <xQueueGenericSendFromISR>
 8010284:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010288:	4618      	mov	r0, r3
 801028a:	3728      	adds	r7, #40	@ 0x28
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20002df4 	.word	0x20002df4

08010294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3b04      	subs	r3, #4
 80102a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80102ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3b04      	subs	r3, #4
 80102b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	f023 0201 	bic.w	r2, r3, #1
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	3b04      	subs	r3, #4
 80102c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80102c4:	4a0c      	ldr	r2, [pc, #48]	@ (80102f8 <pxPortInitialiseStack+0x64>)
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	3b14      	subs	r3, #20
 80102ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	3b04      	subs	r3, #4
 80102da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f06f 0202 	mvn.w	r2, #2
 80102e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	3b20      	subs	r3, #32
 80102e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80102ea:	68fb      	ldr	r3, [r7, #12]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr
 80102f8:	080102fd 	.word	0x080102fd

080102fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010306:	4b13      	ldr	r3, [pc, #76]	@ (8010354 <prvTaskExitError+0x58>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030e:	d00b      	beq.n	8010328 <prvTaskExitError+0x2c>
	__asm volatile
 8010310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010314:	f383 8811 	msr	BASEPRI, r3
 8010318:	f3bf 8f6f 	isb	sy
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	60fb      	str	r3, [r7, #12]
}
 8010322:	bf00      	nop
 8010324:	bf00      	nop
 8010326:	e7fd      	b.n	8010324 <prvTaskExitError+0x28>
	__asm volatile
 8010328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801032c:	f383 8811 	msr	BASEPRI, r3
 8010330:	f3bf 8f6f 	isb	sy
 8010334:	f3bf 8f4f 	dsb	sy
 8010338:	60bb      	str	r3, [r7, #8]
}
 801033a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801033c:	bf00      	nop
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0fc      	beq.n	801033e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop
 8010348:	3714      	adds	r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	2000028c 	.word	0x2000028c
	...

08010360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010360:	4b07      	ldr	r3, [pc, #28]	@ (8010380 <pxCurrentTCBConst2>)
 8010362:	6819      	ldr	r1, [r3, #0]
 8010364:	6808      	ldr	r0, [r1, #0]
 8010366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036a:	f380 8809 	msr	PSP, r0
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f04f 0000 	mov.w	r0, #0
 8010376:	f380 8811 	msr	BASEPRI, r0
 801037a:	4770      	bx	lr
 801037c:	f3af 8000 	nop.w

08010380 <pxCurrentTCBConst2>:
 8010380:	200028c4 	.word	0x200028c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010384:	bf00      	nop
 8010386:	bf00      	nop

08010388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010388:	4808      	ldr	r0, [pc, #32]	@ (80103ac <prvPortStartFirstTask+0x24>)
 801038a:	6800      	ldr	r0, [r0, #0]
 801038c:	6800      	ldr	r0, [r0, #0]
 801038e:	f380 8808 	msr	MSP, r0
 8010392:	f04f 0000 	mov.w	r0, #0
 8010396:	f380 8814 	msr	CONTROL, r0
 801039a:	b662      	cpsie	i
 801039c:	b661      	cpsie	f
 801039e:	f3bf 8f4f 	dsb	sy
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	df00      	svc	0
 80103a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80103aa:	bf00      	nop
 80103ac:	e000ed08 	.word	0xe000ed08

080103b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80103b6:	4b47      	ldr	r3, [pc, #284]	@ (80104d4 <xPortStartScheduler+0x124>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a47      	ldr	r2, [pc, #284]	@ (80104d8 <xPortStartScheduler+0x128>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d10b      	bne.n	80103d8 <xPortStartScheduler+0x28>
	__asm volatile
 80103c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	f3bf 8f6f 	isb	sy
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	613b      	str	r3, [r7, #16]
}
 80103d2:	bf00      	nop
 80103d4:	bf00      	nop
 80103d6:	e7fd      	b.n	80103d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80103d8:	4b3e      	ldr	r3, [pc, #248]	@ (80104d4 <xPortStartScheduler+0x124>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4a3f      	ldr	r2, [pc, #252]	@ (80104dc <xPortStartScheduler+0x12c>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d10b      	bne.n	80103fa <xPortStartScheduler+0x4a>
	__asm volatile
 80103e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103e6:	f383 8811 	msr	BASEPRI, r3
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	60fb      	str	r3, [r7, #12]
}
 80103f4:	bf00      	nop
 80103f6:	bf00      	nop
 80103f8:	e7fd      	b.n	80103f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80103fa:	4b39      	ldr	r3, [pc, #228]	@ (80104e0 <xPortStartScheduler+0x130>)
 80103fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	b2db      	uxtb	r3, r3
 8010404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	22ff      	movs	r2, #255	@ 0xff
 801040a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	b2db      	uxtb	r3, r3
 8010412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010414:	78fb      	ldrb	r3, [r7, #3]
 8010416:	b2db      	uxtb	r3, r3
 8010418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801041c:	b2da      	uxtb	r2, r3
 801041e:	4b31      	ldr	r3, [pc, #196]	@ (80104e4 <xPortStartScheduler+0x134>)
 8010420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010422:	4b31      	ldr	r3, [pc, #196]	@ (80104e8 <xPortStartScheduler+0x138>)
 8010424:	2207      	movs	r2, #7
 8010426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010428:	e009      	b.n	801043e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801042a:	4b2f      	ldr	r3, [pc, #188]	@ (80104e8 <xPortStartScheduler+0x138>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3b01      	subs	r3, #1
 8010430:	4a2d      	ldr	r2, [pc, #180]	@ (80104e8 <xPortStartScheduler+0x138>)
 8010432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	b2db      	uxtb	r3, r3
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	b2db      	uxtb	r3, r3
 801043c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801043e:	78fb      	ldrb	r3, [r7, #3]
 8010440:	b2db      	uxtb	r3, r3
 8010442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010446:	2b80      	cmp	r3, #128	@ 0x80
 8010448:	d0ef      	beq.n	801042a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801044a:	4b27      	ldr	r3, [pc, #156]	@ (80104e8 <xPortStartScheduler+0x138>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f1c3 0307 	rsb	r3, r3, #7
 8010452:	2b04      	cmp	r3, #4
 8010454:	d00b      	beq.n	801046e <xPortStartScheduler+0xbe>
	__asm volatile
 8010456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	60bb      	str	r3, [r7, #8]
}
 8010468:	bf00      	nop
 801046a:	bf00      	nop
 801046c:	e7fd      	b.n	801046a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801046e:	4b1e      	ldr	r3, [pc, #120]	@ (80104e8 <xPortStartScheduler+0x138>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	021b      	lsls	r3, r3, #8
 8010474:	4a1c      	ldr	r2, [pc, #112]	@ (80104e8 <xPortStartScheduler+0x138>)
 8010476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010478:	4b1b      	ldr	r3, [pc, #108]	@ (80104e8 <xPortStartScheduler+0x138>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010480:	4a19      	ldr	r2, [pc, #100]	@ (80104e8 <xPortStartScheduler+0x138>)
 8010482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	b2da      	uxtb	r2, r3
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801048c:	4b17      	ldr	r3, [pc, #92]	@ (80104ec <xPortStartScheduler+0x13c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a16      	ldr	r2, [pc, #88]	@ (80104ec <xPortStartScheduler+0x13c>)
 8010492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010498:	4b14      	ldr	r3, [pc, #80]	@ (80104ec <xPortStartScheduler+0x13c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a13      	ldr	r2, [pc, #76]	@ (80104ec <xPortStartScheduler+0x13c>)
 801049e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80104a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104a4:	f000 f8da 	bl	801065c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104a8:	4b11      	ldr	r3, [pc, #68]	@ (80104f0 <xPortStartScheduler+0x140>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80104ae:	f000 f8f9 	bl	80106a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80104b2:	4b10      	ldr	r3, [pc, #64]	@ (80104f4 <xPortStartScheduler+0x144>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a0f      	ldr	r2, [pc, #60]	@ (80104f4 <xPortStartScheduler+0x144>)
 80104b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80104bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104be:	f7ff ff63 	bl	8010388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104c2:	f7fe fe53 	bl	800f16c <vTaskSwitchContext>
	prvTaskExitError();
 80104c6:	f7ff ff19 	bl	80102fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3718      	adds	r7, #24
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	e000ed00 	.word	0xe000ed00
 80104d8:	410fc271 	.word	0x410fc271
 80104dc:	410fc270 	.word	0x410fc270
 80104e0:	e000e400 	.word	0xe000e400
 80104e4:	20002ef0 	.word	0x20002ef0
 80104e8:	20002ef4 	.word	0x20002ef4
 80104ec:	e000ed20 	.word	0xe000ed20
 80104f0:	2000028c 	.word	0x2000028c
 80104f4:	e000ef34 	.word	0xe000ef34

080104f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
	__asm volatile
 80104fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010502:	f383 8811 	msr	BASEPRI, r3
 8010506:	f3bf 8f6f 	isb	sy
 801050a:	f3bf 8f4f 	dsb	sy
 801050e:	607b      	str	r3, [r7, #4]
}
 8010510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010512:	4b10      	ldr	r3, [pc, #64]	@ (8010554 <vPortEnterCritical+0x5c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	3301      	adds	r3, #1
 8010518:	4a0e      	ldr	r2, [pc, #56]	@ (8010554 <vPortEnterCritical+0x5c>)
 801051a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801051c:	4b0d      	ldr	r3, [pc, #52]	@ (8010554 <vPortEnterCritical+0x5c>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d110      	bne.n	8010546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010524:	4b0c      	ldr	r3, [pc, #48]	@ (8010558 <vPortEnterCritical+0x60>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00b      	beq.n	8010546 <vPortEnterCritical+0x4e>
	__asm volatile
 801052e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010532:	f383 8811 	msr	BASEPRI, r3
 8010536:	f3bf 8f6f 	isb	sy
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	603b      	str	r3, [r7, #0]
}
 8010540:	bf00      	nop
 8010542:	bf00      	nop
 8010544:	e7fd      	b.n	8010542 <vPortEnterCritical+0x4a>
	}
}
 8010546:	bf00      	nop
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	2000028c 	.word	0x2000028c
 8010558:	e000ed04 	.word	0xe000ed04

0801055c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010562:	4b12      	ldr	r3, [pc, #72]	@ (80105ac <vPortExitCritical+0x50>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10b      	bne.n	8010582 <vPortExitCritical+0x26>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	607b      	str	r3, [r7, #4]
}
 801057c:	bf00      	nop
 801057e:	bf00      	nop
 8010580:	e7fd      	b.n	801057e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010582:	4b0a      	ldr	r3, [pc, #40]	@ (80105ac <vPortExitCritical+0x50>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3b01      	subs	r3, #1
 8010588:	4a08      	ldr	r2, [pc, #32]	@ (80105ac <vPortExitCritical+0x50>)
 801058a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801058c:	4b07      	ldr	r3, [pc, #28]	@ (80105ac <vPortExitCritical+0x50>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d105      	bne.n	80105a0 <vPortExitCritical+0x44>
 8010594:	2300      	movs	r3, #0
 8010596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	f383 8811 	msr	BASEPRI, r3
}
 801059e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80105a0:	bf00      	nop
 80105a2:	370c      	adds	r7, #12
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr
 80105ac:	2000028c 	.word	0x2000028c

080105b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80105b0:	f3ef 8009 	mrs	r0, PSP
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	4b15      	ldr	r3, [pc, #84]	@ (8010610 <pxCurrentTCBConst>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	f01e 0f10 	tst.w	lr, #16
 80105c0:	bf08      	it	eq
 80105c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80105c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ca:	6010      	str	r0, [r2, #0]
 80105cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80105d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80105d4:	f380 8811 	msr	BASEPRI, r0
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	f7fe fdc4 	bl	800f16c <vTaskSwitchContext>
 80105e4:	f04f 0000 	mov.w	r0, #0
 80105e8:	f380 8811 	msr	BASEPRI, r0
 80105ec:	bc09      	pop	{r0, r3}
 80105ee:	6819      	ldr	r1, [r3, #0]
 80105f0:	6808      	ldr	r0, [r1, #0]
 80105f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f6:	f01e 0f10 	tst.w	lr, #16
 80105fa:	bf08      	it	eq
 80105fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010600:	f380 8809 	msr	PSP, r0
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	f3af 8000 	nop.w

08010610 <pxCurrentTCBConst>:
 8010610:	200028c4 	.word	0x200028c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010614:	bf00      	nop
 8010616:	bf00      	nop

08010618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
	__asm volatile
 801061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	607b      	str	r3, [r7, #4]
}
 8010630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010632:	f7fe fce1 	bl	800eff8 <xTaskIncrementTick>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d003      	beq.n	8010644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801063c:	4b06      	ldr	r3, [pc, #24]	@ (8010658 <xPortSysTickHandler+0x40>)
 801063e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010642:	601a      	str	r2, [r3, #0]
 8010644:	2300      	movs	r3, #0
 8010646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	f383 8811 	msr	BASEPRI, r3
}
 801064e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010650:	bf00      	nop
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	e000ed04 	.word	0xe000ed04

0801065c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801065c:	b480      	push	{r7}
 801065e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010660:	4b0b      	ldr	r3, [pc, #44]	@ (8010690 <vPortSetupTimerInterrupt+0x34>)
 8010662:	2200      	movs	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010666:	4b0b      	ldr	r3, [pc, #44]	@ (8010694 <vPortSetupTimerInterrupt+0x38>)
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801066c:	4b0a      	ldr	r3, [pc, #40]	@ (8010698 <vPortSetupTimerInterrupt+0x3c>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a0a      	ldr	r2, [pc, #40]	@ (801069c <vPortSetupTimerInterrupt+0x40>)
 8010672:	fba2 2303 	umull	r2, r3, r2, r3
 8010676:	099b      	lsrs	r3, r3, #6
 8010678:	4a09      	ldr	r2, [pc, #36]	@ (80106a0 <vPortSetupTimerInterrupt+0x44>)
 801067a:	3b01      	subs	r3, #1
 801067c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801067e:	4b04      	ldr	r3, [pc, #16]	@ (8010690 <vPortSetupTimerInterrupt+0x34>)
 8010680:	2207      	movs	r2, #7
 8010682:	601a      	str	r2, [r3, #0]
}
 8010684:	bf00      	nop
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	e000e010 	.word	0xe000e010
 8010694:	e000e018 	.word	0xe000e018
 8010698:	20000280 	.word	0x20000280
 801069c:	10624dd3 	.word	0x10624dd3
 80106a0:	e000e014 	.word	0xe000e014

080106a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80106a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80106b4 <vPortEnableVFP+0x10>
 80106a8:	6801      	ldr	r1, [r0, #0]
 80106aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80106ae:	6001      	str	r1, [r0, #0]
 80106b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80106b2:	bf00      	nop
 80106b4:	e000ed88 	.word	0xe000ed88

080106b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80106be:	f3ef 8305 	mrs	r3, IPSR
 80106c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b0f      	cmp	r3, #15
 80106c8:	d915      	bls.n	80106f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80106ca:	4a18      	ldr	r2, [pc, #96]	@ (801072c <vPortValidateInterruptPriority+0x74>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	4413      	add	r3, r2
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80106d4:	4b16      	ldr	r3, [pc, #88]	@ (8010730 <vPortValidateInterruptPriority+0x78>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	7afa      	ldrb	r2, [r7, #11]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d20b      	bcs.n	80106f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	607b      	str	r3, [r7, #4]
}
 80106f0:	bf00      	nop
 80106f2:	bf00      	nop
 80106f4:	e7fd      	b.n	80106f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80106f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010734 <vPortValidateInterruptPriority+0x7c>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80106fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010738 <vPortValidateInterruptPriority+0x80>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	d90b      	bls.n	801071e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801070a:	f383 8811 	msr	BASEPRI, r3
 801070e:	f3bf 8f6f 	isb	sy
 8010712:	f3bf 8f4f 	dsb	sy
 8010716:	603b      	str	r3, [r7, #0]
}
 8010718:	bf00      	nop
 801071a:	bf00      	nop
 801071c:	e7fd      	b.n	801071a <vPortValidateInterruptPriority+0x62>
	}
 801071e:	bf00      	nop
 8010720:	3714      	adds	r7, #20
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	e000e3f0 	.word	0xe000e3f0
 8010730:	20002ef0 	.word	0x20002ef0
 8010734:	e000ed0c 	.word	0xe000ed0c
 8010738:	20002ef4 	.word	0x20002ef4

0801073c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08a      	sub	sp, #40	@ 0x28
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010744:	2300      	movs	r3, #0
 8010746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010748:	f7fe fb9a 	bl	800ee80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801074c:	4b5c      	ldr	r3, [pc, #368]	@ (80108c0 <pvPortMalloc+0x184>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d101      	bne.n	8010758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010754:	f000 f924 	bl	80109a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010758:	4b5a      	ldr	r3, [pc, #360]	@ (80108c4 <pvPortMalloc+0x188>)
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4013      	ands	r3, r2
 8010760:	2b00      	cmp	r3, #0
 8010762:	f040 8095 	bne.w	8010890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d01e      	beq.n	80107aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801076c:	2208      	movs	r2, #8
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4413      	add	r3, r2
 8010772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f003 0307 	and.w	r3, r3, #7
 801077a:	2b00      	cmp	r3, #0
 801077c:	d015      	beq.n	80107aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f023 0307 	bic.w	r3, r3, #7
 8010784:	3308      	adds	r3, #8
 8010786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f003 0307 	and.w	r3, r3, #7
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00b      	beq.n	80107aa <pvPortMalloc+0x6e>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	617b      	str	r3, [r7, #20]
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop
 80107a8:	e7fd      	b.n	80107a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d06f      	beq.n	8010890 <pvPortMalloc+0x154>
 80107b0:	4b45      	ldr	r3, [pc, #276]	@ (80108c8 <pvPortMalloc+0x18c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d86a      	bhi.n	8010890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80107ba:	4b44      	ldr	r3, [pc, #272]	@ (80108cc <pvPortMalloc+0x190>)
 80107bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80107be:	4b43      	ldr	r3, [pc, #268]	@ (80108cc <pvPortMalloc+0x190>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107c4:	e004      	b.n	80107d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80107c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80107ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d903      	bls.n	80107e2 <pvPortMalloc+0xa6>
 80107da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1f1      	bne.n	80107c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80107e2:	4b37      	ldr	r3, [pc, #220]	@ (80108c0 <pvPortMalloc+0x184>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d051      	beq.n	8010890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107ec:	6a3b      	ldr	r3, [r7, #32]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	2208      	movs	r2, #8
 80107f2:	4413      	add	r3, r2
 80107f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	6a3b      	ldr	r3, [r7, #32]
 80107fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010800:	685a      	ldr	r2, [r3, #4]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	1ad2      	subs	r2, r2, r3
 8010806:	2308      	movs	r3, #8
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	429a      	cmp	r2, r3
 801080c:	d920      	bls.n	8010850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801080e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4413      	add	r3, r2
 8010814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	f003 0307 	and.w	r3, r3, #7
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00b      	beq.n	8010838 <pvPortMalloc+0xfc>
	__asm volatile
 8010820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010824:	f383 8811 	msr	BASEPRI, r3
 8010828:	f3bf 8f6f 	isb	sy
 801082c:	f3bf 8f4f 	dsb	sy
 8010830:	613b      	str	r3, [r7, #16]
}
 8010832:	bf00      	nop
 8010834:	bf00      	nop
 8010836:	e7fd      	b.n	8010834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083a:	685a      	ldr	r2, [r3, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	1ad2      	subs	r2, r2, r3
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801084a:	69b8      	ldr	r0, [r7, #24]
 801084c:	f000 f90a 	bl	8010a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010850:	4b1d      	ldr	r3, [pc, #116]	@ (80108c8 <pvPortMalloc+0x18c>)
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	4a1b      	ldr	r2, [pc, #108]	@ (80108c8 <pvPortMalloc+0x18c>)
 801085c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801085e:	4b1a      	ldr	r3, [pc, #104]	@ (80108c8 <pvPortMalloc+0x18c>)
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	4b1b      	ldr	r3, [pc, #108]	@ (80108d0 <pvPortMalloc+0x194>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	429a      	cmp	r2, r3
 8010868:	d203      	bcs.n	8010872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801086a:	4b17      	ldr	r3, [pc, #92]	@ (80108c8 <pvPortMalloc+0x18c>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a18      	ldr	r2, [pc, #96]	@ (80108d0 <pvPortMalloc+0x194>)
 8010870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010874:	685a      	ldr	r2, [r3, #4]
 8010876:	4b13      	ldr	r3, [pc, #76]	@ (80108c4 <pvPortMalloc+0x188>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	431a      	orrs	r2, r3
 801087c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801087e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010882:	2200      	movs	r2, #0
 8010884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010886:	4b13      	ldr	r3, [pc, #76]	@ (80108d4 <pvPortMalloc+0x198>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	3301      	adds	r3, #1
 801088c:	4a11      	ldr	r2, [pc, #68]	@ (80108d4 <pvPortMalloc+0x198>)
 801088e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010890:	f7fe fb04 	bl	800ee9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	f003 0307 	and.w	r3, r3, #7
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00b      	beq.n	80108b6 <pvPortMalloc+0x17a>
	__asm volatile
 801089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	60fb      	str	r3, [r7, #12]
}
 80108b0:	bf00      	nop
 80108b2:	bf00      	nop
 80108b4:	e7fd      	b.n	80108b2 <pvPortMalloc+0x176>
	return pvReturn;
 80108b6:	69fb      	ldr	r3, [r7, #28]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3728      	adds	r7, #40	@ 0x28
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	2000cb40 	.word	0x2000cb40
 80108c4:	2000cb54 	.word	0x2000cb54
 80108c8:	2000cb44 	.word	0x2000cb44
 80108cc:	2000cb38 	.word	0x2000cb38
 80108d0:	2000cb48 	.word	0x2000cb48
 80108d4:	2000cb4c 	.word	0x2000cb4c

080108d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d04f      	beq.n	801098a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80108ea:	2308      	movs	r3, #8
 80108ec:	425b      	negs	r3, r3
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	4413      	add	r3, r2
 80108f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	4b25      	ldr	r3, [pc, #148]	@ (8010994 <vPortFree+0xbc>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4013      	ands	r3, r2
 8010902:	2b00      	cmp	r3, #0
 8010904:	d10b      	bne.n	801091e <vPortFree+0x46>
	__asm volatile
 8010906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	60fb      	str	r3, [r7, #12]
}
 8010918:	bf00      	nop
 801091a:	bf00      	nop
 801091c:	e7fd      	b.n	801091a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00b      	beq.n	801093e <vPortFree+0x66>
	__asm volatile
 8010926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801092a:	f383 8811 	msr	BASEPRI, r3
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f3bf 8f4f 	dsb	sy
 8010936:	60bb      	str	r3, [r7, #8]
}
 8010938:	bf00      	nop
 801093a:	bf00      	nop
 801093c:	e7fd      	b.n	801093a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	4b14      	ldr	r3, [pc, #80]	@ (8010994 <vPortFree+0xbc>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4013      	ands	r3, r2
 8010948:	2b00      	cmp	r3, #0
 801094a:	d01e      	beq.n	801098a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d11a      	bne.n	801098a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	685a      	ldr	r2, [r3, #4]
 8010958:	4b0e      	ldr	r3, [pc, #56]	@ (8010994 <vPortFree+0xbc>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	43db      	mvns	r3, r3
 801095e:	401a      	ands	r2, r3
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010964:	f7fe fa8c 	bl	800ee80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	685a      	ldr	r2, [r3, #4]
 801096c:	4b0a      	ldr	r3, [pc, #40]	@ (8010998 <vPortFree+0xc0>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4413      	add	r3, r2
 8010972:	4a09      	ldr	r2, [pc, #36]	@ (8010998 <vPortFree+0xc0>)
 8010974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010976:	6938      	ldr	r0, [r7, #16]
 8010978:	f000 f874 	bl	8010a64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801097c:	4b07      	ldr	r3, [pc, #28]	@ (801099c <vPortFree+0xc4>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	3301      	adds	r3, #1
 8010982:	4a06      	ldr	r2, [pc, #24]	@ (801099c <vPortFree+0xc4>)
 8010984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010986:	f7fe fa89 	bl	800ee9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801098a:	bf00      	nop
 801098c:	3718      	adds	r7, #24
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	2000cb54 	.word	0x2000cb54
 8010998:	2000cb44 	.word	0x2000cb44
 801099c:	2000cb50 	.word	0x2000cb50

080109a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109a6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80109aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80109ac:	4b27      	ldr	r3, [pc, #156]	@ (8010a4c <prvHeapInit+0xac>)
 80109ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f003 0307 	and.w	r3, r3, #7
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d00c      	beq.n	80109d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	3307      	adds	r3, #7
 80109be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f023 0307 	bic.w	r3, r3, #7
 80109c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	1ad3      	subs	r3, r2, r3
 80109ce:	4a1f      	ldr	r2, [pc, #124]	@ (8010a4c <prvHeapInit+0xac>)
 80109d0:	4413      	add	r3, r2
 80109d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80109d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010a50 <prvHeapInit+0xb0>)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80109de:	4b1c      	ldr	r3, [pc, #112]	@ (8010a50 <prvHeapInit+0xb0>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	4413      	add	r3, r2
 80109ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80109ec:	2208      	movs	r2, #8
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	1a9b      	subs	r3, r3, r2
 80109f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f023 0307 	bic.w	r3, r3, #7
 80109fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	4a15      	ldr	r2, [pc, #84]	@ (8010a54 <prvHeapInit+0xb4>)
 8010a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a02:	4b14      	ldr	r3, [pc, #80]	@ (8010a54 <prvHeapInit+0xb4>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2200      	movs	r2, #0
 8010a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a0a:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <prvHeapInit+0xb4>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	1ad2      	subs	r2, r2, r3
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a20:	4b0c      	ldr	r3, [pc, #48]	@ (8010a54 <prvHeapInit+0xb4>)
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8010a58 <prvHeapInit+0xb8>)
 8010a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	4a09      	ldr	r2, [pc, #36]	@ (8010a5c <prvHeapInit+0xbc>)
 8010a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a38:	4b09      	ldr	r3, [pc, #36]	@ (8010a60 <prvHeapInit+0xc0>)
 8010a3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010a3e:	601a      	str	r2, [r3, #0]
}
 8010a40:	bf00      	nop
 8010a42:	3714      	adds	r7, #20
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr
 8010a4c:	20002ef8 	.word	0x20002ef8
 8010a50:	2000cb38 	.word	0x2000cb38
 8010a54:	2000cb40 	.word	0x2000cb40
 8010a58:	2000cb48 	.word	0x2000cb48
 8010a5c:	2000cb44 	.word	0x2000cb44
 8010a60:	2000cb54 	.word	0x2000cb54

08010a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010a64:	b480      	push	{r7}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a6c:	4b28      	ldr	r3, [pc, #160]	@ (8010b10 <prvInsertBlockIntoFreeList+0xac>)
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	e002      	b.n	8010a78 <prvInsertBlockIntoFreeList+0x14>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	60fb      	str	r3, [r7, #12]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d8f7      	bhi.n	8010a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d108      	bne.n	8010aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	685a      	ldr	r2, [r3, #4]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	441a      	add	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	441a      	add	r2, r3
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d118      	bne.n	8010aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	4b15      	ldr	r3, [pc, #84]	@ (8010b14 <prvInsertBlockIntoFreeList+0xb0>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d00d      	beq.n	8010ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	685a      	ldr	r2, [r3, #4]
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	441a      	add	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	e008      	b.n	8010af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8010b14 <prvInsertBlockIntoFreeList+0xb0>)
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	601a      	str	r2, [r3, #0]
 8010aea:	e003      	b.n	8010af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d002      	beq.n	8010b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b02:	bf00      	nop
 8010b04:	3714      	adds	r7, #20
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop
 8010b10:	2000cb38 	.word	0x2000cb38
 8010b14:	2000cb40 	.word	0x2000cb40

08010b18 <atoi>:
 8010b18:	220a      	movs	r2, #10
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	f000 b87a 	b.w	8010c14 <strtol>

08010b20 <_strtol_l.constprop.0>:
 8010b20:	2b24      	cmp	r3, #36	@ 0x24
 8010b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b26:	4686      	mov	lr, r0
 8010b28:	4690      	mov	r8, r2
 8010b2a:	d801      	bhi.n	8010b30 <_strtol_l.constprop.0+0x10>
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d106      	bne.n	8010b3e <_strtol_l.constprop.0+0x1e>
 8010b30:	f000 fed6 	bl	80118e0 <__errno>
 8010b34:	2316      	movs	r3, #22
 8010b36:	6003      	str	r3, [r0, #0]
 8010b38:	2000      	movs	r0, #0
 8010b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b3e:	4834      	ldr	r0, [pc, #208]	@ (8010c10 <_strtol_l.constprop.0+0xf0>)
 8010b40:	460d      	mov	r5, r1
 8010b42:	462a      	mov	r2, r5
 8010b44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b48:	5d06      	ldrb	r6, [r0, r4]
 8010b4a:	f016 0608 	ands.w	r6, r6, #8
 8010b4e:	d1f8      	bne.n	8010b42 <_strtol_l.constprop.0+0x22>
 8010b50:	2c2d      	cmp	r4, #45	@ 0x2d
 8010b52:	d12d      	bne.n	8010bb0 <_strtol_l.constprop.0+0x90>
 8010b54:	782c      	ldrb	r4, [r5, #0]
 8010b56:	2601      	movs	r6, #1
 8010b58:	1c95      	adds	r5, r2, #2
 8010b5a:	f033 0210 	bics.w	r2, r3, #16
 8010b5e:	d109      	bne.n	8010b74 <_strtol_l.constprop.0+0x54>
 8010b60:	2c30      	cmp	r4, #48	@ 0x30
 8010b62:	d12a      	bne.n	8010bba <_strtol_l.constprop.0+0x9a>
 8010b64:	782a      	ldrb	r2, [r5, #0]
 8010b66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b6a:	2a58      	cmp	r2, #88	@ 0x58
 8010b6c:	d125      	bne.n	8010bba <_strtol_l.constprop.0+0x9a>
 8010b6e:	786c      	ldrb	r4, [r5, #1]
 8010b70:	2310      	movs	r3, #16
 8010b72:	3502      	adds	r5, #2
 8010b74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	fbbc f9f3 	udiv	r9, ip, r3
 8010b82:	4610      	mov	r0, r2
 8010b84:	fb03 ca19 	mls	sl, r3, r9, ip
 8010b88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010b8c:	2f09      	cmp	r7, #9
 8010b8e:	d81b      	bhi.n	8010bc8 <_strtol_l.constprop.0+0xa8>
 8010b90:	463c      	mov	r4, r7
 8010b92:	42a3      	cmp	r3, r4
 8010b94:	dd27      	ble.n	8010be6 <_strtol_l.constprop.0+0xc6>
 8010b96:	1c57      	adds	r7, r2, #1
 8010b98:	d007      	beq.n	8010baa <_strtol_l.constprop.0+0x8a>
 8010b9a:	4581      	cmp	r9, r0
 8010b9c:	d320      	bcc.n	8010be0 <_strtol_l.constprop.0+0xc0>
 8010b9e:	d101      	bne.n	8010ba4 <_strtol_l.constprop.0+0x84>
 8010ba0:	45a2      	cmp	sl, r4
 8010ba2:	db1d      	blt.n	8010be0 <_strtol_l.constprop.0+0xc0>
 8010ba4:	fb00 4003 	mla	r0, r0, r3, r4
 8010ba8:	2201      	movs	r2, #1
 8010baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bae:	e7eb      	b.n	8010b88 <_strtol_l.constprop.0+0x68>
 8010bb0:	2c2b      	cmp	r4, #43	@ 0x2b
 8010bb2:	bf04      	itt	eq
 8010bb4:	782c      	ldrbeq	r4, [r5, #0]
 8010bb6:	1c95      	addeq	r5, r2, #2
 8010bb8:	e7cf      	b.n	8010b5a <_strtol_l.constprop.0+0x3a>
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1da      	bne.n	8010b74 <_strtol_l.constprop.0+0x54>
 8010bbe:	2c30      	cmp	r4, #48	@ 0x30
 8010bc0:	bf0c      	ite	eq
 8010bc2:	2308      	moveq	r3, #8
 8010bc4:	230a      	movne	r3, #10
 8010bc6:	e7d5      	b.n	8010b74 <_strtol_l.constprop.0+0x54>
 8010bc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010bcc:	2f19      	cmp	r7, #25
 8010bce:	d801      	bhi.n	8010bd4 <_strtol_l.constprop.0+0xb4>
 8010bd0:	3c37      	subs	r4, #55	@ 0x37
 8010bd2:	e7de      	b.n	8010b92 <_strtol_l.constprop.0+0x72>
 8010bd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010bd8:	2f19      	cmp	r7, #25
 8010bda:	d804      	bhi.n	8010be6 <_strtol_l.constprop.0+0xc6>
 8010bdc:	3c57      	subs	r4, #87	@ 0x57
 8010bde:	e7d8      	b.n	8010b92 <_strtol_l.constprop.0+0x72>
 8010be0:	f04f 32ff 	mov.w	r2, #4294967295
 8010be4:	e7e1      	b.n	8010baa <_strtol_l.constprop.0+0x8a>
 8010be6:	1c53      	adds	r3, r2, #1
 8010be8:	d108      	bne.n	8010bfc <_strtol_l.constprop.0+0xdc>
 8010bea:	2322      	movs	r3, #34	@ 0x22
 8010bec:	f8ce 3000 	str.w	r3, [lr]
 8010bf0:	4660      	mov	r0, ip
 8010bf2:	f1b8 0f00 	cmp.w	r8, #0
 8010bf6:	d0a0      	beq.n	8010b3a <_strtol_l.constprop.0+0x1a>
 8010bf8:	1e69      	subs	r1, r5, #1
 8010bfa:	e006      	b.n	8010c0a <_strtol_l.constprop.0+0xea>
 8010bfc:	b106      	cbz	r6, 8010c00 <_strtol_l.constprop.0+0xe0>
 8010bfe:	4240      	negs	r0, r0
 8010c00:	f1b8 0f00 	cmp.w	r8, #0
 8010c04:	d099      	beq.n	8010b3a <_strtol_l.constprop.0+0x1a>
 8010c06:	2a00      	cmp	r2, #0
 8010c08:	d1f6      	bne.n	8010bf8 <_strtol_l.constprop.0+0xd8>
 8010c0a:	f8c8 1000 	str.w	r1, [r8]
 8010c0e:	e794      	b.n	8010b3a <_strtol_l.constprop.0+0x1a>
 8010c10:	08014a61 	.word	0x08014a61

08010c14 <strtol>:
 8010c14:	4613      	mov	r3, r2
 8010c16:	460a      	mov	r2, r1
 8010c18:	4601      	mov	r1, r0
 8010c1a:	4802      	ldr	r0, [pc, #8]	@ (8010c24 <strtol+0x10>)
 8010c1c:	6800      	ldr	r0, [r0, #0]
 8010c1e:	f7ff bf7f 	b.w	8010b20 <_strtol_l.constprop.0>
 8010c22:	bf00      	nop
 8010c24:	2000029c 	.word	0x2000029c

08010c28 <__cvt>:
 8010c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c2c:	ec57 6b10 	vmov	r6, r7, d0
 8010c30:	2f00      	cmp	r7, #0
 8010c32:	460c      	mov	r4, r1
 8010c34:	4619      	mov	r1, r3
 8010c36:	463b      	mov	r3, r7
 8010c38:	bfbb      	ittet	lt
 8010c3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010c3e:	461f      	movlt	r7, r3
 8010c40:	2300      	movge	r3, #0
 8010c42:	232d      	movlt	r3, #45	@ 0x2d
 8010c44:	700b      	strb	r3, [r1, #0]
 8010c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010c4c:	4691      	mov	r9, r2
 8010c4e:	f023 0820 	bic.w	r8, r3, #32
 8010c52:	bfbc      	itt	lt
 8010c54:	4632      	movlt	r2, r6
 8010c56:	4616      	movlt	r6, r2
 8010c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010c5c:	d005      	beq.n	8010c6a <__cvt+0x42>
 8010c5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010c62:	d100      	bne.n	8010c66 <__cvt+0x3e>
 8010c64:	3401      	adds	r4, #1
 8010c66:	2102      	movs	r1, #2
 8010c68:	e000      	b.n	8010c6c <__cvt+0x44>
 8010c6a:	2103      	movs	r1, #3
 8010c6c:	ab03      	add	r3, sp, #12
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	ab02      	add	r3, sp, #8
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	ec47 6b10 	vmov	d0, r6, r7
 8010c78:	4653      	mov	r3, sl
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	f000 ff1c 	bl	8011ab8 <_dtoa_r>
 8010c80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010c84:	4605      	mov	r5, r0
 8010c86:	d119      	bne.n	8010cbc <__cvt+0x94>
 8010c88:	f019 0f01 	tst.w	r9, #1
 8010c8c:	d00e      	beq.n	8010cac <__cvt+0x84>
 8010c8e:	eb00 0904 	add.w	r9, r0, r4
 8010c92:	2200      	movs	r2, #0
 8010c94:	2300      	movs	r3, #0
 8010c96:	4630      	mov	r0, r6
 8010c98:	4639      	mov	r1, r7
 8010c9a:	f7ef ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c9e:	b108      	cbz	r0, 8010ca4 <__cvt+0x7c>
 8010ca0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ca4:	2230      	movs	r2, #48	@ 0x30
 8010ca6:	9b03      	ldr	r3, [sp, #12]
 8010ca8:	454b      	cmp	r3, r9
 8010caa:	d31e      	bcc.n	8010cea <__cvt+0xc2>
 8010cac:	9b03      	ldr	r3, [sp, #12]
 8010cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cb0:	1b5b      	subs	r3, r3, r5
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	6013      	str	r3, [r2, #0]
 8010cb6:	b004      	add	sp, #16
 8010cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010cc0:	eb00 0904 	add.w	r9, r0, r4
 8010cc4:	d1e5      	bne.n	8010c92 <__cvt+0x6a>
 8010cc6:	7803      	ldrb	r3, [r0, #0]
 8010cc8:	2b30      	cmp	r3, #48	@ 0x30
 8010cca:	d10a      	bne.n	8010ce2 <__cvt+0xba>
 8010ccc:	2200      	movs	r2, #0
 8010cce:	2300      	movs	r3, #0
 8010cd0:	4630      	mov	r0, r6
 8010cd2:	4639      	mov	r1, r7
 8010cd4:	f7ef fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cd8:	b918      	cbnz	r0, 8010ce2 <__cvt+0xba>
 8010cda:	f1c4 0401 	rsb	r4, r4, #1
 8010cde:	f8ca 4000 	str.w	r4, [sl]
 8010ce2:	f8da 3000 	ldr.w	r3, [sl]
 8010ce6:	4499      	add	r9, r3
 8010ce8:	e7d3      	b.n	8010c92 <__cvt+0x6a>
 8010cea:	1c59      	adds	r1, r3, #1
 8010cec:	9103      	str	r1, [sp, #12]
 8010cee:	701a      	strb	r2, [r3, #0]
 8010cf0:	e7d9      	b.n	8010ca6 <__cvt+0x7e>

08010cf2 <__exponent>:
 8010cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cf4:	2900      	cmp	r1, #0
 8010cf6:	bfba      	itte	lt
 8010cf8:	4249      	neglt	r1, r1
 8010cfa:	232d      	movlt	r3, #45	@ 0x2d
 8010cfc:	232b      	movge	r3, #43	@ 0x2b
 8010cfe:	2909      	cmp	r1, #9
 8010d00:	7002      	strb	r2, [r0, #0]
 8010d02:	7043      	strb	r3, [r0, #1]
 8010d04:	dd29      	ble.n	8010d5a <__exponent+0x68>
 8010d06:	f10d 0307 	add.w	r3, sp, #7
 8010d0a:	461d      	mov	r5, r3
 8010d0c:	270a      	movs	r7, #10
 8010d0e:	461a      	mov	r2, r3
 8010d10:	fbb1 f6f7 	udiv	r6, r1, r7
 8010d14:	fb07 1416 	mls	r4, r7, r6, r1
 8010d18:	3430      	adds	r4, #48	@ 0x30
 8010d1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010d1e:	460c      	mov	r4, r1
 8010d20:	2c63      	cmp	r4, #99	@ 0x63
 8010d22:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d26:	4631      	mov	r1, r6
 8010d28:	dcf1      	bgt.n	8010d0e <__exponent+0x1c>
 8010d2a:	3130      	adds	r1, #48	@ 0x30
 8010d2c:	1e94      	subs	r4, r2, #2
 8010d2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010d32:	1c41      	adds	r1, r0, #1
 8010d34:	4623      	mov	r3, r4
 8010d36:	42ab      	cmp	r3, r5
 8010d38:	d30a      	bcc.n	8010d50 <__exponent+0x5e>
 8010d3a:	f10d 0309 	add.w	r3, sp, #9
 8010d3e:	1a9b      	subs	r3, r3, r2
 8010d40:	42ac      	cmp	r4, r5
 8010d42:	bf88      	it	hi
 8010d44:	2300      	movhi	r3, #0
 8010d46:	3302      	adds	r3, #2
 8010d48:	4403      	add	r3, r0
 8010d4a:	1a18      	subs	r0, r3, r0
 8010d4c:	b003      	add	sp, #12
 8010d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010d54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010d58:	e7ed      	b.n	8010d36 <__exponent+0x44>
 8010d5a:	2330      	movs	r3, #48	@ 0x30
 8010d5c:	3130      	adds	r1, #48	@ 0x30
 8010d5e:	7083      	strb	r3, [r0, #2]
 8010d60:	70c1      	strb	r1, [r0, #3]
 8010d62:	1d03      	adds	r3, r0, #4
 8010d64:	e7f1      	b.n	8010d4a <__exponent+0x58>
	...

08010d68 <_printf_float>:
 8010d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d6c:	b08d      	sub	sp, #52	@ 0x34
 8010d6e:	460c      	mov	r4, r1
 8010d70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010d74:	4616      	mov	r6, r2
 8010d76:	461f      	mov	r7, r3
 8010d78:	4605      	mov	r5, r0
 8010d7a:	f000 fd11 	bl	80117a0 <_localeconv_r>
 8010d7e:	6803      	ldr	r3, [r0, #0]
 8010d80:	9304      	str	r3, [sp, #16]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ef fa74 	bl	8000270 <strlen>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8010d90:	9005      	str	r0, [sp, #20]
 8010d92:	3307      	adds	r3, #7
 8010d94:	f023 0307 	bic.w	r3, r3, #7
 8010d98:	f103 0208 	add.w	r2, r3, #8
 8010d9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010da0:	f8d4 b000 	ldr.w	fp, [r4]
 8010da4:	f8c8 2000 	str.w	r2, [r8]
 8010da8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010dac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010db0:	9307      	str	r3, [sp, #28]
 8010db2:	f8cd 8018 	str.w	r8, [sp, #24]
 8010db6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8011030 <_printf_float+0x2c8>)
 8010dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc4:	f7ef feb2 	bl	8000b2c <__aeabi_dcmpun>
 8010dc8:	bb70      	cbnz	r0, 8010e28 <_printf_float+0xc0>
 8010dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dce:	4b98      	ldr	r3, [pc, #608]	@ (8011030 <_printf_float+0x2c8>)
 8010dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd4:	f7ef fe8c 	bl	8000af0 <__aeabi_dcmple>
 8010dd8:	bb30      	cbnz	r0, 8010e28 <_printf_float+0xc0>
 8010dda:	2200      	movs	r2, #0
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4640      	mov	r0, r8
 8010de0:	4649      	mov	r1, r9
 8010de2:	f7ef fe7b 	bl	8000adc <__aeabi_dcmplt>
 8010de6:	b110      	cbz	r0, 8010dee <_printf_float+0x86>
 8010de8:	232d      	movs	r3, #45	@ 0x2d
 8010dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010dee:	4a91      	ldr	r2, [pc, #580]	@ (8011034 <_printf_float+0x2cc>)
 8010df0:	4b91      	ldr	r3, [pc, #580]	@ (8011038 <_printf_float+0x2d0>)
 8010df2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010df6:	bf94      	ite	ls
 8010df8:	4690      	movls	r8, r2
 8010dfa:	4698      	movhi	r8, r3
 8010dfc:	2303      	movs	r3, #3
 8010dfe:	6123      	str	r3, [r4, #16]
 8010e00:	f02b 0304 	bic.w	r3, fp, #4
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	f04f 0900 	mov.w	r9, #0
 8010e0a:	9700      	str	r7, [sp, #0]
 8010e0c:	4633      	mov	r3, r6
 8010e0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010e10:	4621      	mov	r1, r4
 8010e12:	4628      	mov	r0, r5
 8010e14:	f000 f9d2 	bl	80111bc <_printf_common>
 8010e18:	3001      	adds	r0, #1
 8010e1a:	f040 808d 	bne.w	8010f38 <_printf_float+0x1d0>
 8010e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e22:	b00d      	add	sp, #52	@ 0x34
 8010e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e28:	4642      	mov	r2, r8
 8010e2a:	464b      	mov	r3, r9
 8010e2c:	4640      	mov	r0, r8
 8010e2e:	4649      	mov	r1, r9
 8010e30:	f7ef fe7c 	bl	8000b2c <__aeabi_dcmpun>
 8010e34:	b140      	cbz	r0, 8010e48 <_printf_float+0xe0>
 8010e36:	464b      	mov	r3, r9
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	bfbc      	itt	lt
 8010e3c:	232d      	movlt	r3, #45	@ 0x2d
 8010e3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010e42:	4a7e      	ldr	r2, [pc, #504]	@ (801103c <_printf_float+0x2d4>)
 8010e44:	4b7e      	ldr	r3, [pc, #504]	@ (8011040 <_printf_float+0x2d8>)
 8010e46:	e7d4      	b.n	8010df2 <_printf_float+0x8a>
 8010e48:	6863      	ldr	r3, [r4, #4]
 8010e4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010e4e:	9206      	str	r2, [sp, #24]
 8010e50:	1c5a      	adds	r2, r3, #1
 8010e52:	d13b      	bne.n	8010ecc <_printf_float+0x164>
 8010e54:	2306      	movs	r3, #6
 8010e56:	6063      	str	r3, [r4, #4]
 8010e58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	6022      	str	r2, [r4, #0]
 8010e60:	9303      	str	r3, [sp, #12]
 8010e62:	ab0a      	add	r3, sp, #40	@ 0x28
 8010e64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010e68:	ab09      	add	r3, sp, #36	@ 0x24
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	6861      	ldr	r1, [r4, #4]
 8010e6e:	ec49 8b10 	vmov	d0, r8, r9
 8010e72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7ff fed6 	bl	8010c28 <__cvt>
 8010e7c:	9b06      	ldr	r3, [sp, #24]
 8010e7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e80:	2b47      	cmp	r3, #71	@ 0x47
 8010e82:	4680      	mov	r8, r0
 8010e84:	d129      	bne.n	8010eda <_printf_float+0x172>
 8010e86:	1cc8      	adds	r0, r1, #3
 8010e88:	db02      	blt.n	8010e90 <_printf_float+0x128>
 8010e8a:	6863      	ldr	r3, [r4, #4]
 8010e8c:	4299      	cmp	r1, r3
 8010e8e:	dd41      	ble.n	8010f14 <_printf_float+0x1ac>
 8010e90:	f1aa 0a02 	sub.w	sl, sl, #2
 8010e94:	fa5f fa8a 	uxtb.w	sl, sl
 8010e98:	3901      	subs	r1, #1
 8010e9a:	4652      	mov	r2, sl
 8010e9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010ea0:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ea2:	f7ff ff26 	bl	8010cf2 <__exponent>
 8010ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ea8:	1813      	adds	r3, r2, r0
 8010eaa:	2a01      	cmp	r2, #1
 8010eac:	4681      	mov	r9, r0
 8010eae:	6123      	str	r3, [r4, #16]
 8010eb0:	dc02      	bgt.n	8010eb8 <_printf_float+0x150>
 8010eb2:	6822      	ldr	r2, [r4, #0]
 8010eb4:	07d2      	lsls	r2, r2, #31
 8010eb6:	d501      	bpl.n	8010ebc <_printf_float+0x154>
 8010eb8:	3301      	adds	r3, #1
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d0a2      	beq.n	8010e0a <_printf_float+0xa2>
 8010ec4:	232d      	movs	r3, #45	@ 0x2d
 8010ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010eca:	e79e      	b.n	8010e0a <_printf_float+0xa2>
 8010ecc:	9a06      	ldr	r2, [sp, #24]
 8010ece:	2a47      	cmp	r2, #71	@ 0x47
 8010ed0:	d1c2      	bne.n	8010e58 <_printf_float+0xf0>
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1c0      	bne.n	8010e58 <_printf_float+0xf0>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e7bd      	b.n	8010e56 <_printf_float+0xee>
 8010eda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010ede:	d9db      	bls.n	8010e98 <_printf_float+0x130>
 8010ee0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010ee4:	d118      	bne.n	8010f18 <_printf_float+0x1b0>
 8010ee6:	2900      	cmp	r1, #0
 8010ee8:	6863      	ldr	r3, [r4, #4]
 8010eea:	dd0b      	ble.n	8010f04 <_printf_float+0x19c>
 8010eec:	6121      	str	r1, [r4, #16]
 8010eee:	b913      	cbnz	r3, 8010ef6 <_printf_float+0x18e>
 8010ef0:	6822      	ldr	r2, [r4, #0]
 8010ef2:	07d0      	lsls	r0, r2, #31
 8010ef4:	d502      	bpl.n	8010efc <_printf_float+0x194>
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	440b      	add	r3, r1
 8010efa:	6123      	str	r3, [r4, #16]
 8010efc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010efe:	f04f 0900 	mov.w	r9, #0
 8010f02:	e7db      	b.n	8010ebc <_printf_float+0x154>
 8010f04:	b913      	cbnz	r3, 8010f0c <_printf_float+0x1a4>
 8010f06:	6822      	ldr	r2, [r4, #0]
 8010f08:	07d2      	lsls	r2, r2, #31
 8010f0a:	d501      	bpl.n	8010f10 <_printf_float+0x1a8>
 8010f0c:	3302      	adds	r3, #2
 8010f0e:	e7f4      	b.n	8010efa <_printf_float+0x192>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e7f2      	b.n	8010efa <_printf_float+0x192>
 8010f14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f1a:	4299      	cmp	r1, r3
 8010f1c:	db05      	blt.n	8010f2a <_printf_float+0x1c2>
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	6121      	str	r1, [r4, #16]
 8010f22:	07d8      	lsls	r0, r3, #31
 8010f24:	d5ea      	bpl.n	8010efc <_printf_float+0x194>
 8010f26:	1c4b      	adds	r3, r1, #1
 8010f28:	e7e7      	b.n	8010efa <_printf_float+0x192>
 8010f2a:	2900      	cmp	r1, #0
 8010f2c:	bfd4      	ite	le
 8010f2e:	f1c1 0202 	rsble	r2, r1, #2
 8010f32:	2201      	movgt	r2, #1
 8010f34:	4413      	add	r3, r2
 8010f36:	e7e0      	b.n	8010efa <_printf_float+0x192>
 8010f38:	6823      	ldr	r3, [r4, #0]
 8010f3a:	055a      	lsls	r2, r3, #21
 8010f3c:	d407      	bmi.n	8010f4e <_printf_float+0x1e6>
 8010f3e:	6923      	ldr	r3, [r4, #16]
 8010f40:	4642      	mov	r2, r8
 8010f42:	4631      	mov	r1, r6
 8010f44:	4628      	mov	r0, r5
 8010f46:	47b8      	blx	r7
 8010f48:	3001      	adds	r0, #1
 8010f4a:	d12b      	bne.n	8010fa4 <_printf_float+0x23c>
 8010f4c:	e767      	b.n	8010e1e <_printf_float+0xb6>
 8010f4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010f52:	f240 80dd 	bls.w	8011110 <_printf_float+0x3a8>
 8010f56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f7ef fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f62:	2800      	cmp	r0, #0
 8010f64:	d033      	beq.n	8010fce <_printf_float+0x266>
 8010f66:	4a37      	ldr	r2, [pc, #220]	@ (8011044 <_printf_float+0x2dc>)
 8010f68:	2301      	movs	r3, #1
 8010f6a:	4631      	mov	r1, r6
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	47b8      	blx	r7
 8010f70:	3001      	adds	r0, #1
 8010f72:	f43f af54 	beq.w	8010e1e <_printf_float+0xb6>
 8010f76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010f7a:	4543      	cmp	r3, r8
 8010f7c:	db02      	blt.n	8010f84 <_printf_float+0x21c>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	07d8      	lsls	r0, r3, #31
 8010f82:	d50f      	bpl.n	8010fa4 <_printf_float+0x23c>
 8010f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f88:	4631      	mov	r1, r6
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	47b8      	blx	r7
 8010f8e:	3001      	adds	r0, #1
 8010f90:	f43f af45 	beq.w	8010e1e <_printf_float+0xb6>
 8010f94:	f04f 0900 	mov.w	r9, #0
 8010f98:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f9c:	f104 0a1a 	add.w	sl, r4, #26
 8010fa0:	45c8      	cmp	r8, r9
 8010fa2:	dc09      	bgt.n	8010fb8 <_printf_float+0x250>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	079b      	lsls	r3, r3, #30
 8010fa8:	f100 8103 	bmi.w	80111b2 <_printf_float+0x44a>
 8010fac:	68e0      	ldr	r0, [r4, #12]
 8010fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fb0:	4298      	cmp	r0, r3
 8010fb2:	bfb8      	it	lt
 8010fb4:	4618      	movlt	r0, r3
 8010fb6:	e734      	b.n	8010e22 <_printf_float+0xba>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	4652      	mov	r2, sl
 8010fbc:	4631      	mov	r1, r6
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	47b8      	blx	r7
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	f43f af2b 	beq.w	8010e1e <_printf_float+0xb6>
 8010fc8:	f109 0901 	add.w	r9, r9, #1
 8010fcc:	e7e8      	b.n	8010fa0 <_printf_float+0x238>
 8010fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	dc39      	bgt.n	8011048 <_printf_float+0x2e0>
 8010fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8011044 <_printf_float+0x2dc>)
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	4631      	mov	r1, r6
 8010fda:	4628      	mov	r0, r5
 8010fdc:	47b8      	blx	r7
 8010fde:	3001      	adds	r0, #1
 8010fe0:	f43f af1d 	beq.w	8010e1e <_printf_float+0xb6>
 8010fe4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010fe8:	ea59 0303 	orrs.w	r3, r9, r3
 8010fec:	d102      	bne.n	8010ff4 <_printf_float+0x28c>
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	07d9      	lsls	r1, r3, #31
 8010ff2:	d5d7      	bpl.n	8010fa4 <_printf_float+0x23c>
 8010ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ff8:	4631      	mov	r1, r6
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	47b8      	blx	r7
 8010ffe:	3001      	adds	r0, #1
 8011000:	f43f af0d 	beq.w	8010e1e <_printf_float+0xb6>
 8011004:	f04f 0a00 	mov.w	sl, #0
 8011008:	f104 0b1a 	add.w	fp, r4, #26
 801100c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801100e:	425b      	negs	r3, r3
 8011010:	4553      	cmp	r3, sl
 8011012:	dc01      	bgt.n	8011018 <_printf_float+0x2b0>
 8011014:	464b      	mov	r3, r9
 8011016:	e793      	b.n	8010f40 <_printf_float+0x1d8>
 8011018:	2301      	movs	r3, #1
 801101a:	465a      	mov	r2, fp
 801101c:	4631      	mov	r1, r6
 801101e:	4628      	mov	r0, r5
 8011020:	47b8      	blx	r7
 8011022:	3001      	adds	r0, #1
 8011024:	f43f aefb 	beq.w	8010e1e <_printf_float+0xb6>
 8011028:	f10a 0a01 	add.w	sl, sl, #1
 801102c:	e7ee      	b.n	801100c <_printf_float+0x2a4>
 801102e:	bf00      	nop
 8011030:	7fefffff 	.word	0x7fefffff
 8011034:	08014b61 	.word	0x08014b61
 8011038:	08014b65 	.word	0x08014b65
 801103c:	08014b69 	.word	0x08014b69
 8011040:	08014b6d 	.word	0x08014b6d
 8011044:	08014b71 	.word	0x08014b71
 8011048:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801104a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801104e:	4553      	cmp	r3, sl
 8011050:	bfa8      	it	ge
 8011052:	4653      	movge	r3, sl
 8011054:	2b00      	cmp	r3, #0
 8011056:	4699      	mov	r9, r3
 8011058:	dc36      	bgt.n	80110c8 <_printf_float+0x360>
 801105a:	f04f 0b00 	mov.w	fp, #0
 801105e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011062:	f104 021a 	add.w	r2, r4, #26
 8011066:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011068:	9306      	str	r3, [sp, #24]
 801106a:	eba3 0309 	sub.w	r3, r3, r9
 801106e:	455b      	cmp	r3, fp
 8011070:	dc31      	bgt.n	80110d6 <_printf_float+0x36e>
 8011072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011074:	459a      	cmp	sl, r3
 8011076:	dc3a      	bgt.n	80110ee <_printf_float+0x386>
 8011078:	6823      	ldr	r3, [r4, #0]
 801107a:	07da      	lsls	r2, r3, #31
 801107c:	d437      	bmi.n	80110ee <_printf_float+0x386>
 801107e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011080:	ebaa 0903 	sub.w	r9, sl, r3
 8011084:	9b06      	ldr	r3, [sp, #24]
 8011086:	ebaa 0303 	sub.w	r3, sl, r3
 801108a:	4599      	cmp	r9, r3
 801108c:	bfa8      	it	ge
 801108e:	4699      	movge	r9, r3
 8011090:	f1b9 0f00 	cmp.w	r9, #0
 8011094:	dc33      	bgt.n	80110fe <_printf_float+0x396>
 8011096:	f04f 0800 	mov.w	r8, #0
 801109a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801109e:	f104 0b1a 	add.w	fp, r4, #26
 80110a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110a4:	ebaa 0303 	sub.w	r3, sl, r3
 80110a8:	eba3 0309 	sub.w	r3, r3, r9
 80110ac:	4543      	cmp	r3, r8
 80110ae:	f77f af79 	ble.w	8010fa4 <_printf_float+0x23c>
 80110b2:	2301      	movs	r3, #1
 80110b4:	465a      	mov	r2, fp
 80110b6:	4631      	mov	r1, r6
 80110b8:	4628      	mov	r0, r5
 80110ba:	47b8      	blx	r7
 80110bc:	3001      	adds	r0, #1
 80110be:	f43f aeae 	beq.w	8010e1e <_printf_float+0xb6>
 80110c2:	f108 0801 	add.w	r8, r8, #1
 80110c6:	e7ec      	b.n	80110a2 <_printf_float+0x33a>
 80110c8:	4642      	mov	r2, r8
 80110ca:	4631      	mov	r1, r6
 80110cc:	4628      	mov	r0, r5
 80110ce:	47b8      	blx	r7
 80110d0:	3001      	adds	r0, #1
 80110d2:	d1c2      	bne.n	801105a <_printf_float+0x2f2>
 80110d4:	e6a3      	b.n	8010e1e <_printf_float+0xb6>
 80110d6:	2301      	movs	r3, #1
 80110d8:	4631      	mov	r1, r6
 80110da:	4628      	mov	r0, r5
 80110dc:	9206      	str	r2, [sp, #24]
 80110de:	47b8      	blx	r7
 80110e0:	3001      	adds	r0, #1
 80110e2:	f43f ae9c 	beq.w	8010e1e <_printf_float+0xb6>
 80110e6:	9a06      	ldr	r2, [sp, #24]
 80110e8:	f10b 0b01 	add.w	fp, fp, #1
 80110ec:	e7bb      	b.n	8011066 <_printf_float+0x2fe>
 80110ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110f2:	4631      	mov	r1, r6
 80110f4:	4628      	mov	r0, r5
 80110f6:	47b8      	blx	r7
 80110f8:	3001      	adds	r0, #1
 80110fa:	d1c0      	bne.n	801107e <_printf_float+0x316>
 80110fc:	e68f      	b.n	8010e1e <_printf_float+0xb6>
 80110fe:	9a06      	ldr	r2, [sp, #24]
 8011100:	464b      	mov	r3, r9
 8011102:	4442      	add	r2, r8
 8011104:	4631      	mov	r1, r6
 8011106:	4628      	mov	r0, r5
 8011108:	47b8      	blx	r7
 801110a:	3001      	adds	r0, #1
 801110c:	d1c3      	bne.n	8011096 <_printf_float+0x32e>
 801110e:	e686      	b.n	8010e1e <_printf_float+0xb6>
 8011110:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011114:	f1ba 0f01 	cmp.w	sl, #1
 8011118:	dc01      	bgt.n	801111e <_printf_float+0x3b6>
 801111a:	07db      	lsls	r3, r3, #31
 801111c:	d536      	bpl.n	801118c <_printf_float+0x424>
 801111e:	2301      	movs	r3, #1
 8011120:	4642      	mov	r2, r8
 8011122:	4631      	mov	r1, r6
 8011124:	4628      	mov	r0, r5
 8011126:	47b8      	blx	r7
 8011128:	3001      	adds	r0, #1
 801112a:	f43f ae78 	beq.w	8010e1e <_printf_float+0xb6>
 801112e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011132:	4631      	mov	r1, r6
 8011134:	4628      	mov	r0, r5
 8011136:	47b8      	blx	r7
 8011138:	3001      	adds	r0, #1
 801113a:	f43f ae70 	beq.w	8010e1e <_printf_float+0xb6>
 801113e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011142:	2200      	movs	r2, #0
 8011144:	2300      	movs	r3, #0
 8011146:	f10a 3aff 	add.w	sl, sl, #4294967295
 801114a:	f7ef fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 801114e:	b9c0      	cbnz	r0, 8011182 <_printf_float+0x41a>
 8011150:	4653      	mov	r3, sl
 8011152:	f108 0201 	add.w	r2, r8, #1
 8011156:	4631      	mov	r1, r6
 8011158:	4628      	mov	r0, r5
 801115a:	47b8      	blx	r7
 801115c:	3001      	adds	r0, #1
 801115e:	d10c      	bne.n	801117a <_printf_float+0x412>
 8011160:	e65d      	b.n	8010e1e <_printf_float+0xb6>
 8011162:	2301      	movs	r3, #1
 8011164:	465a      	mov	r2, fp
 8011166:	4631      	mov	r1, r6
 8011168:	4628      	mov	r0, r5
 801116a:	47b8      	blx	r7
 801116c:	3001      	adds	r0, #1
 801116e:	f43f ae56 	beq.w	8010e1e <_printf_float+0xb6>
 8011172:	f108 0801 	add.w	r8, r8, #1
 8011176:	45d0      	cmp	r8, sl
 8011178:	dbf3      	blt.n	8011162 <_printf_float+0x3fa>
 801117a:	464b      	mov	r3, r9
 801117c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011180:	e6df      	b.n	8010f42 <_printf_float+0x1da>
 8011182:	f04f 0800 	mov.w	r8, #0
 8011186:	f104 0b1a 	add.w	fp, r4, #26
 801118a:	e7f4      	b.n	8011176 <_printf_float+0x40e>
 801118c:	2301      	movs	r3, #1
 801118e:	4642      	mov	r2, r8
 8011190:	e7e1      	b.n	8011156 <_printf_float+0x3ee>
 8011192:	2301      	movs	r3, #1
 8011194:	464a      	mov	r2, r9
 8011196:	4631      	mov	r1, r6
 8011198:	4628      	mov	r0, r5
 801119a:	47b8      	blx	r7
 801119c:	3001      	adds	r0, #1
 801119e:	f43f ae3e 	beq.w	8010e1e <_printf_float+0xb6>
 80111a2:	f108 0801 	add.w	r8, r8, #1
 80111a6:	68e3      	ldr	r3, [r4, #12]
 80111a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80111aa:	1a5b      	subs	r3, r3, r1
 80111ac:	4543      	cmp	r3, r8
 80111ae:	dcf0      	bgt.n	8011192 <_printf_float+0x42a>
 80111b0:	e6fc      	b.n	8010fac <_printf_float+0x244>
 80111b2:	f04f 0800 	mov.w	r8, #0
 80111b6:	f104 0919 	add.w	r9, r4, #25
 80111ba:	e7f4      	b.n	80111a6 <_printf_float+0x43e>

080111bc <_printf_common>:
 80111bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c0:	4616      	mov	r6, r2
 80111c2:	4698      	mov	r8, r3
 80111c4:	688a      	ldr	r2, [r1, #8]
 80111c6:	690b      	ldr	r3, [r1, #16]
 80111c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80111cc:	4293      	cmp	r3, r2
 80111ce:	bfb8      	it	lt
 80111d0:	4613      	movlt	r3, r2
 80111d2:	6033      	str	r3, [r6, #0]
 80111d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80111d8:	4607      	mov	r7, r0
 80111da:	460c      	mov	r4, r1
 80111dc:	b10a      	cbz	r2, 80111e2 <_printf_common+0x26>
 80111de:	3301      	adds	r3, #1
 80111e0:	6033      	str	r3, [r6, #0]
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	0699      	lsls	r1, r3, #26
 80111e6:	bf42      	ittt	mi
 80111e8:	6833      	ldrmi	r3, [r6, #0]
 80111ea:	3302      	addmi	r3, #2
 80111ec:	6033      	strmi	r3, [r6, #0]
 80111ee:	6825      	ldr	r5, [r4, #0]
 80111f0:	f015 0506 	ands.w	r5, r5, #6
 80111f4:	d106      	bne.n	8011204 <_printf_common+0x48>
 80111f6:	f104 0a19 	add.w	sl, r4, #25
 80111fa:	68e3      	ldr	r3, [r4, #12]
 80111fc:	6832      	ldr	r2, [r6, #0]
 80111fe:	1a9b      	subs	r3, r3, r2
 8011200:	42ab      	cmp	r3, r5
 8011202:	dc26      	bgt.n	8011252 <_printf_common+0x96>
 8011204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011208:	6822      	ldr	r2, [r4, #0]
 801120a:	3b00      	subs	r3, #0
 801120c:	bf18      	it	ne
 801120e:	2301      	movne	r3, #1
 8011210:	0692      	lsls	r2, r2, #26
 8011212:	d42b      	bmi.n	801126c <_printf_common+0xb0>
 8011214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011218:	4641      	mov	r1, r8
 801121a:	4638      	mov	r0, r7
 801121c:	47c8      	blx	r9
 801121e:	3001      	adds	r0, #1
 8011220:	d01e      	beq.n	8011260 <_printf_common+0xa4>
 8011222:	6823      	ldr	r3, [r4, #0]
 8011224:	6922      	ldr	r2, [r4, #16]
 8011226:	f003 0306 	and.w	r3, r3, #6
 801122a:	2b04      	cmp	r3, #4
 801122c:	bf02      	ittt	eq
 801122e:	68e5      	ldreq	r5, [r4, #12]
 8011230:	6833      	ldreq	r3, [r6, #0]
 8011232:	1aed      	subeq	r5, r5, r3
 8011234:	68a3      	ldr	r3, [r4, #8]
 8011236:	bf0c      	ite	eq
 8011238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801123c:	2500      	movne	r5, #0
 801123e:	4293      	cmp	r3, r2
 8011240:	bfc4      	itt	gt
 8011242:	1a9b      	subgt	r3, r3, r2
 8011244:	18ed      	addgt	r5, r5, r3
 8011246:	2600      	movs	r6, #0
 8011248:	341a      	adds	r4, #26
 801124a:	42b5      	cmp	r5, r6
 801124c:	d11a      	bne.n	8011284 <_printf_common+0xc8>
 801124e:	2000      	movs	r0, #0
 8011250:	e008      	b.n	8011264 <_printf_common+0xa8>
 8011252:	2301      	movs	r3, #1
 8011254:	4652      	mov	r2, sl
 8011256:	4641      	mov	r1, r8
 8011258:	4638      	mov	r0, r7
 801125a:	47c8      	blx	r9
 801125c:	3001      	adds	r0, #1
 801125e:	d103      	bne.n	8011268 <_printf_common+0xac>
 8011260:	f04f 30ff 	mov.w	r0, #4294967295
 8011264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011268:	3501      	adds	r5, #1
 801126a:	e7c6      	b.n	80111fa <_printf_common+0x3e>
 801126c:	18e1      	adds	r1, r4, r3
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	2030      	movs	r0, #48	@ 0x30
 8011272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011276:	4422      	add	r2, r4
 8011278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801127c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011280:	3302      	adds	r3, #2
 8011282:	e7c7      	b.n	8011214 <_printf_common+0x58>
 8011284:	2301      	movs	r3, #1
 8011286:	4622      	mov	r2, r4
 8011288:	4641      	mov	r1, r8
 801128a:	4638      	mov	r0, r7
 801128c:	47c8      	blx	r9
 801128e:	3001      	adds	r0, #1
 8011290:	d0e6      	beq.n	8011260 <_printf_common+0xa4>
 8011292:	3601      	adds	r6, #1
 8011294:	e7d9      	b.n	801124a <_printf_common+0x8e>
	...

08011298 <_printf_i>:
 8011298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801129c:	7e0f      	ldrb	r7, [r1, #24]
 801129e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80112a0:	2f78      	cmp	r7, #120	@ 0x78
 80112a2:	4691      	mov	r9, r2
 80112a4:	4680      	mov	r8, r0
 80112a6:	460c      	mov	r4, r1
 80112a8:	469a      	mov	sl, r3
 80112aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80112ae:	d807      	bhi.n	80112c0 <_printf_i+0x28>
 80112b0:	2f62      	cmp	r7, #98	@ 0x62
 80112b2:	d80a      	bhi.n	80112ca <_printf_i+0x32>
 80112b4:	2f00      	cmp	r7, #0
 80112b6:	f000 80d2 	beq.w	801145e <_printf_i+0x1c6>
 80112ba:	2f58      	cmp	r7, #88	@ 0x58
 80112bc:	f000 80b9 	beq.w	8011432 <_printf_i+0x19a>
 80112c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80112c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80112c8:	e03a      	b.n	8011340 <_printf_i+0xa8>
 80112ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80112ce:	2b15      	cmp	r3, #21
 80112d0:	d8f6      	bhi.n	80112c0 <_printf_i+0x28>
 80112d2:	a101      	add	r1, pc, #4	@ (adr r1, 80112d8 <_printf_i+0x40>)
 80112d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80112d8:	08011331 	.word	0x08011331
 80112dc:	08011345 	.word	0x08011345
 80112e0:	080112c1 	.word	0x080112c1
 80112e4:	080112c1 	.word	0x080112c1
 80112e8:	080112c1 	.word	0x080112c1
 80112ec:	080112c1 	.word	0x080112c1
 80112f0:	08011345 	.word	0x08011345
 80112f4:	080112c1 	.word	0x080112c1
 80112f8:	080112c1 	.word	0x080112c1
 80112fc:	080112c1 	.word	0x080112c1
 8011300:	080112c1 	.word	0x080112c1
 8011304:	08011445 	.word	0x08011445
 8011308:	0801136f 	.word	0x0801136f
 801130c:	080113ff 	.word	0x080113ff
 8011310:	080112c1 	.word	0x080112c1
 8011314:	080112c1 	.word	0x080112c1
 8011318:	08011467 	.word	0x08011467
 801131c:	080112c1 	.word	0x080112c1
 8011320:	0801136f 	.word	0x0801136f
 8011324:	080112c1 	.word	0x080112c1
 8011328:	080112c1 	.word	0x080112c1
 801132c:	08011407 	.word	0x08011407
 8011330:	6833      	ldr	r3, [r6, #0]
 8011332:	1d1a      	adds	r2, r3, #4
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6032      	str	r2, [r6, #0]
 8011338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801133c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011340:	2301      	movs	r3, #1
 8011342:	e09d      	b.n	8011480 <_printf_i+0x1e8>
 8011344:	6833      	ldr	r3, [r6, #0]
 8011346:	6820      	ldr	r0, [r4, #0]
 8011348:	1d19      	adds	r1, r3, #4
 801134a:	6031      	str	r1, [r6, #0]
 801134c:	0606      	lsls	r6, r0, #24
 801134e:	d501      	bpl.n	8011354 <_printf_i+0xbc>
 8011350:	681d      	ldr	r5, [r3, #0]
 8011352:	e003      	b.n	801135c <_printf_i+0xc4>
 8011354:	0645      	lsls	r5, r0, #25
 8011356:	d5fb      	bpl.n	8011350 <_printf_i+0xb8>
 8011358:	f9b3 5000 	ldrsh.w	r5, [r3]
 801135c:	2d00      	cmp	r5, #0
 801135e:	da03      	bge.n	8011368 <_printf_i+0xd0>
 8011360:	232d      	movs	r3, #45	@ 0x2d
 8011362:	426d      	negs	r5, r5
 8011364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011368:	4859      	ldr	r0, [pc, #356]	@ (80114d0 <_printf_i+0x238>)
 801136a:	230a      	movs	r3, #10
 801136c:	e011      	b.n	8011392 <_printf_i+0xfa>
 801136e:	6821      	ldr	r1, [r4, #0]
 8011370:	6833      	ldr	r3, [r6, #0]
 8011372:	0608      	lsls	r0, r1, #24
 8011374:	f853 5b04 	ldr.w	r5, [r3], #4
 8011378:	d402      	bmi.n	8011380 <_printf_i+0xe8>
 801137a:	0649      	lsls	r1, r1, #25
 801137c:	bf48      	it	mi
 801137e:	b2ad      	uxthmi	r5, r5
 8011380:	2f6f      	cmp	r7, #111	@ 0x6f
 8011382:	4853      	ldr	r0, [pc, #332]	@ (80114d0 <_printf_i+0x238>)
 8011384:	6033      	str	r3, [r6, #0]
 8011386:	bf14      	ite	ne
 8011388:	230a      	movne	r3, #10
 801138a:	2308      	moveq	r3, #8
 801138c:	2100      	movs	r1, #0
 801138e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011392:	6866      	ldr	r6, [r4, #4]
 8011394:	60a6      	str	r6, [r4, #8]
 8011396:	2e00      	cmp	r6, #0
 8011398:	bfa2      	ittt	ge
 801139a:	6821      	ldrge	r1, [r4, #0]
 801139c:	f021 0104 	bicge.w	r1, r1, #4
 80113a0:	6021      	strge	r1, [r4, #0]
 80113a2:	b90d      	cbnz	r5, 80113a8 <_printf_i+0x110>
 80113a4:	2e00      	cmp	r6, #0
 80113a6:	d04b      	beq.n	8011440 <_printf_i+0x1a8>
 80113a8:	4616      	mov	r6, r2
 80113aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80113ae:	fb03 5711 	mls	r7, r3, r1, r5
 80113b2:	5dc7      	ldrb	r7, [r0, r7]
 80113b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80113b8:	462f      	mov	r7, r5
 80113ba:	42bb      	cmp	r3, r7
 80113bc:	460d      	mov	r5, r1
 80113be:	d9f4      	bls.n	80113aa <_printf_i+0x112>
 80113c0:	2b08      	cmp	r3, #8
 80113c2:	d10b      	bne.n	80113dc <_printf_i+0x144>
 80113c4:	6823      	ldr	r3, [r4, #0]
 80113c6:	07df      	lsls	r7, r3, #31
 80113c8:	d508      	bpl.n	80113dc <_printf_i+0x144>
 80113ca:	6923      	ldr	r3, [r4, #16]
 80113cc:	6861      	ldr	r1, [r4, #4]
 80113ce:	4299      	cmp	r1, r3
 80113d0:	bfde      	ittt	le
 80113d2:	2330      	movle	r3, #48	@ 0x30
 80113d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80113d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80113dc:	1b92      	subs	r2, r2, r6
 80113de:	6122      	str	r2, [r4, #16]
 80113e0:	f8cd a000 	str.w	sl, [sp]
 80113e4:	464b      	mov	r3, r9
 80113e6:	aa03      	add	r2, sp, #12
 80113e8:	4621      	mov	r1, r4
 80113ea:	4640      	mov	r0, r8
 80113ec:	f7ff fee6 	bl	80111bc <_printf_common>
 80113f0:	3001      	adds	r0, #1
 80113f2:	d14a      	bne.n	801148a <_printf_i+0x1f2>
 80113f4:	f04f 30ff 	mov.w	r0, #4294967295
 80113f8:	b004      	add	sp, #16
 80113fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113fe:	6823      	ldr	r3, [r4, #0]
 8011400:	f043 0320 	orr.w	r3, r3, #32
 8011404:	6023      	str	r3, [r4, #0]
 8011406:	4833      	ldr	r0, [pc, #204]	@ (80114d4 <_printf_i+0x23c>)
 8011408:	2778      	movs	r7, #120	@ 0x78
 801140a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801140e:	6823      	ldr	r3, [r4, #0]
 8011410:	6831      	ldr	r1, [r6, #0]
 8011412:	061f      	lsls	r7, r3, #24
 8011414:	f851 5b04 	ldr.w	r5, [r1], #4
 8011418:	d402      	bmi.n	8011420 <_printf_i+0x188>
 801141a:	065f      	lsls	r7, r3, #25
 801141c:	bf48      	it	mi
 801141e:	b2ad      	uxthmi	r5, r5
 8011420:	6031      	str	r1, [r6, #0]
 8011422:	07d9      	lsls	r1, r3, #31
 8011424:	bf44      	itt	mi
 8011426:	f043 0320 	orrmi.w	r3, r3, #32
 801142a:	6023      	strmi	r3, [r4, #0]
 801142c:	b11d      	cbz	r5, 8011436 <_printf_i+0x19e>
 801142e:	2310      	movs	r3, #16
 8011430:	e7ac      	b.n	801138c <_printf_i+0xf4>
 8011432:	4827      	ldr	r0, [pc, #156]	@ (80114d0 <_printf_i+0x238>)
 8011434:	e7e9      	b.n	801140a <_printf_i+0x172>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	f023 0320 	bic.w	r3, r3, #32
 801143c:	6023      	str	r3, [r4, #0]
 801143e:	e7f6      	b.n	801142e <_printf_i+0x196>
 8011440:	4616      	mov	r6, r2
 8011442:	e7bd      	b.n	80113c0 <_printf_i+0x128>
 8011444:	6833      	ldr	r3, [r6, #0]
 8011446:	6825      	ldr	r5, [r4, #0]
 8011448:	6961      	ldr	r1, [r4, #20]
 801144a:	1d18      	adds	r0, r3, #4
 801144c:	6030      	str	r0, [r6, #0]
 801144e:	062e      	lsls	r6, r5, #24
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	d501      	bpl.n	8011458 <_printf_i+0x1c0>
 8011454:	6019      	str	r1, [r3, #0]
 8011456:	e002      	b.n	801145e <_printf_i+0x1c6>
 8011458:	0668      	lsls	r0, r5, #25
 801145a:	d5fb      	bpl.n	8011454 <_printf_i+0x1bc>
 801145c:	8019      	strh	r1, [r3, #0]
 801145e:	2300      	movs	r3, #0
 8011460:	6123      	str	r3, [r4, #16]
 8011462:	4616      	mov	r6, r2
 8011464:	e7bc      	b.n	80113e0 <_printf_i+0x148>
 8011466:	6833      	ldr	r3, [r6, #0]
 8011468:	1d1a      	adds	r2, r3, #4
 801146a:	6032      	str	r2, [r6, #0]
 801146c:	681e      	ldr	r6, [r3, #0]
 801146e:	6862      	ldr	r2, [r4, #4]
 8011470:	2100      	movs	r1, #0
 8011472:	4630      	mov	r0, r6
 8011474:	f7ee feac 	bl	80001d0 <memchr>
 8011478:	b108      	cbz	r0, 801147e <_printf_i+0x1e6>
 801147a:	1b80      	subs	r0, r0, r6
 801147c:	6060      	str	r0, [r4, #4]
 801147e:	6863      	ldr	r3, [r4, #4]
 8011480:	6123      	str	r3, [r4, #16]
 8011482:	2300      	movs	r3, #0
 8011484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011488:	e7aa      	b.n	80113e0 <_printf_i+0x148>
 801148a:	6923      	ldr	r3, [r4, #16]
 801148c:	4632      	mov	r2, r6
 801148e:	4649      	mov	r1, r9
 8011490:	4640      	mov	r0, r8
 8011492:	47d0      	blx	sl
 8011494:	3001      	adds	r0, #1
 8011496:	d0ad      	beq.n	80113f4 <_printf_i+0x15c>
 8011498:	6823      	ldr	r3, [r4, #0]
 801149a:	079b      	lsls	r3, r3, #30
 801149c:	d413      	bmi.n	80114c6 <_printf_i+0x22e>
 801149e:	68e0      	ldr	r0, [r4, #12]
 80114a0:	9b03      	ldr	r3, [sp, #12]
 80114a2:	4298      	cmp	r0, r3
 80114a4:	bfb8      	it	lt
 80114a6:	4618      	movlt	r0, r3
 80114a8:	e7a6      	b.n	80113f8 <_printf_i+0x160>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4632      	mov	r2, r6
 80114ae:	4649      	mov	r1, r9
 80114b0:	4640      	mov	r0, r8
 80114b2:	47d0      	blx	sl
 80114b4:	3001      	adds	r0, #1
 80114b6:	d09d      	beq.n	80113f4 <_printf_i+0x15c>
 80114b8:	3501      	adds	r5, #1
 80114ba:	68e3      	ldr	r3, [r4, #12]
 80114bc:	9903      	ldr	r1, [sp, #12]
 80114be:	1a5b      	subs	r3, r3, r1
 80114c0:	42ab      	cmp	r3, r5
 80114c2:	dcf2      	bgt.n	80114aa <_printf_i+0x212>
 80114c4:	e7eb      	b.n	801149e <_printf_i+0x206>
 80114c6:	2500      	movs	r5, #0
 80114c8:	f104 0619 	add.w	r6, r4, #25
 80114cc:	e7f5      	b.n	80114ba <_printf_i+0x222>
 80114ce:	bf00      	nop
 80114d0:	08014b73 	.word	0x08014b73
 80114d4:	08014b84 	.word	0x08014b84

080114d8 <std>:
 80114d8:	2300      	movs	r3, #0
 80114da:	b510      	push	{r4, lr}
 80114dc:	4604      	mov	r4, r0
 80114de:	e9c0 3300 	strd	r3, r3, [r0]
 80114e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114e6:	6083      	str	r3, [r0, #8]
 80114e8:	8181      	strh	r1, [r0, #12]
 80114ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80114ec:	81c2      	strh	r2, [r0, #14]
 80114ee:	6183      	str	r3, [r0, #24]
 80114f0:	4619      	mov	r1, r3
 80114f2:	2208      	movs	r2, #8
 80114f4:	305c      	adds	r0, #92	@ 0x5c
 80114f6:	f000 f914 	bl	8011722 <memset>
 80114fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011530 <std+0x58>)
 80114fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80114fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011534 <std+0x5c>)
 8011500:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011502:	4b0d      	ldr	r3, [pc, #52]	@ (8011538 <std+0x60>)
 8011504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011506:	4b0d      	ldr	r3, [pc, #52]	@ (801153c <std+0x64>)
 8011508:	6323      	str	r3, [r4, #48]	@ 0x30
 801150a:	4b0d      	ldr	r3, [pc, #52]	@ (8011540 <std+0x68>)
 801150c:	6224      	str	r4, [r4, #32]
 801150e:	429c      	cmp	r4, r3
 8011510:	d006      	beq.n	8011520 <std+0x48>
 8011512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011516:	4294      	cmp	r4, r2
 8011518:	d002      	beq.n	8011520 <std+0x48>
 801151a:	33d0      	adds	r3, #208	@ 0xd0
 801151c:	429c      	cmp	r4, r3
 801151e:	d105      	bne.n	801152c <std+0x54>
 8011520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011528:	f000 ba04 	b.w	8011934 <__retarget_lock_init_recursive>
 801152c:	bd10      	pop	{r4, pc}
 801152e:	bf00      	nop
 8011530:	0801169d 	.word	0x0801169d
 8011534:	080116bf 	.word	0x080116bf
 8011538:	080116f7 	.word	0x080116f7
 801153c:	0801171b 	.word	0x0801171b
 8011540:	2000cb58 	.word	0x2000cb58

08011544 <stdio_exit_handler>:
 8011544:	4a02      	ldr	r2, [pc, #8]	@ (8011550 <stdio_exit_handler+0xc>)
 8011546:	4903      	ldr	r1, [pc, #12]	@ (8011554 <stdio_exit_handler+0x10>)
 8011548:	4803      	ldr	r0, [pc, #12]	@ (8011558 <stdio_exit_handler+0x14>)
 801154a:	f000 b869 	b.w	8011620 <_fwalk_sglue>
 801154e:	bf00      	nop
 8011550:	20000290 	.word	0x20000290
 8011554:	080132fd 	.word	0x080132fd
 8011558:	200002a0 	.word	0x200002a0

0801155c <cleanup_stdio>:
 801155c:	6841      	ldr	r1, [r0, #4]
 801155e:	4b0c      	ldr	r3, [pc, #48]	@ (8011590 <cleanup_stdio+0x34>)
 8011560:	4299      	cmp	r1, r3
 8011562:	b510      	push	{r4, lr}
 8011564:	4604      	mov	r4, r0
 8011566:	d001      	beq.n	801156c <cleanup_stdio+0x10>
 8011568:	f001 fec8 	bl	80132fc <_fflush_r>
 801156c:	68a1      	ldr	r1, [r4, #8]
 801156e:	4b09      	ldr	r3, [pc, #36]	@ (8011594 <cleanup_stdio+0x38>)
 8011570:	4299      	cmp	r1, r3
 8011572:	d002      	beq.n	801157a <cleanup_stdio+0x1e>
 8011574:	4620      	mov	r0, r4
 8011576:	f001 fec1 	bl	80132fc <_fflush_r>
 801157a:	68e1      	ldr	r1, [r4, #12]
 801157c:	4b06      	ldr	r3, [pc, #24]	@ (8011598 <cleanup_stdio+0x3c>)
 801157e:	4299      	cmp	r1, r3
 8011580:	d004      	beq.n	801158c <cleanup_stdio+0x30>
 8011582:	4620      	mov	r0, r4
 8011584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011588:	f001 beb8 	b.w	80132fc <_fflush_r>
 801158c:	bd10      	pop	{r4, pc}
 801158e:	bf00      	nop
 8011590:	2000cb58 	.word	0x2000cb58
 8011594:	2000cbc0 	.word	0x2000cbc0
 8011598:	2000cc28 	.word	0x2000cc28

0801159c <global_stdio_init.part.0>:
 801159c:	b510      	push	{r4, lr}
 801159e:	4b0b      	ldr	r3, [pc, #44]	@ (80115cc <global_stdio_init.part.0+0x30>)
 80115a0:	4c0b      	ldr	r4, [pc, #44]	@ (80115d0 <global_stdio_init.part.0+0x34>)
 80115a2:	4a0c      	ldr	r2, [pc, #48]	@ (80115d4 <global_stdio_init.part.0+0x38>)
 80115a4:	601a      	str	r2, [r3, #0]
 80115a6:	4620      	mov	r0, r4
 80115a8:	2200      	movs	r2, #0
 80115aa:	2104      	movs	r1, #4
 80115ac:	f7ff ff94 	bl	80114d8 <std>
 80115b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80115b4:	2201      	movs	r2, #1
 80115b6:	2109      	movs	r1, #9
 80115b8:	f7ff ff8e 	bl	80114d8 <std>
 80115bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80115c0:	2202      	movs	r2, #2
 80115c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115c6:	2112      	movs	r1, #18
 80115c8:	f7ff bf86 	b.w	80114d8 <std>
 80115cc:	2000cc90 	.word	0x2000cc90
 80115d0:	2000cb58 	.word	0x2000cb58
 80115d4:	08011545 	.word	0x08011545

080115d8 <__sfp_lock_acquire>:
 80115d8:	4801      	ldr	r0, [pc, #4]	@ (80115e0 <__sfp_lock_acquire+0x8>)
 80115da:	f000 b9ac 	b.w	8011936 <__retarget_lock_acquire_recursive>
 80115de:	bf00      	nop
 80115e0:	2000cc99 	.word	0x2000cc99

080115e4 <__sfp_lock_release>:
 80115e4:	4801      	ldr	r0, [pc, #4]	@ (80115ec <__sfp_lock_release+0x8>)
 80115e6:	f000 b9a7 	b.w	8011938 <__retarget_lock_release_recursive>
 80115ea:	bf00      	nop
 80115ec:	2000cc99 	.word	0x2000cc99

080115f0 <__sinit>:
 80115f0:	b510      	push	{r4, lr}
 80115f2:	4604      	mov	r4, r0
 80115f4:	f7ff fff0 	bl	80115d8 <__sfp_lock_acquire>
 80115f8:	6a23      	ldr	r3, [r4, #32]
 80115fa:	b11b      	cbz	r3, 8011604 <__sinit+0x14>
 80115fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011600:	f7ff bff0 	b.w	80115e4 <__sfp_lock_release>
 8011604:	4b04      	ldr	r3, [pc, #16]	@ (8011618 <__sinit+0x28>)
 8011606:	6223      	str	r3, [r4, #32]
 8011608:	4b04      	ldr	r3, [pc, #16]	@ (801161c <__sinit+0x2c>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d1f5      	bne.n	80115fc <__sinit+0xc>
 8011610:	f7ff ffc4 	bl	801159c <global_stdio_init.part.0>
 8011614:	e7f2      	b.n	80115fc <__sinit+0xc>
 8011616:	bf00      	nop
 8011618:	0801155d 	.word	0x0801155d
 801161c:	2000cc90 	.word	0x2000cc90

08011620 <_fwalk_sglue>:
 8011620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011624:	4607      	mov	r7, r0
 8011626:	4688      	mov	r8, r1
 8011628:	4614      	mov	r4, r2
 801162a:	2600      	movs	r6, #0
 801162c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011630:	f1b9 0901 	subs.w	r9, r9, #1
 8011634:	d505      	bpl.n	8011642 <_fwalk_sglue+0x22>
 8011636:	6824      	ldr	r4, [r4, #0]
 8011638:	2c00      	cmp	r4, #0
 801163a:	d1f7      	bne.n	801162c <_fwalk_sglue+0xc>
 801163c:	4630      	mov	r0, r6
 801163e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011642:	89ab      	ldrh	r3, [r5, #12]
 8011644:	2b01      	cmp	r3, #1
 8011646:	d907      	bls.n	8011658 <_fwalk_sglue+0x38>
 8011648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801164c:	3301      	adds	r3, #1
 801164e:	d003      	beq.n	8011658 <_fwalk_sglue+0x38>
 8011650:	4629      	mov	r1, r5
 8011652:	4638      	mov	r0, r7
 8011654:	47c0      	blx	r8
 8011656:	4306      	orrs	r6, r0
 8011658:	3568      	adds	r5, #104	@ 0x68
 801165a:	e7e9      	b.n	8011630 <_fwalk_sglue+0x10>

0801165c <siprintf>:
 801165c:	b40e      	push	{r1, r2, r3}
 801165e:	b500      	push	{lr}
 8011660:	b09c      	sub	sp, #112	@ 0x70
 8011662:	ab1d      	add	r3, sp, #116	@ 0x74
 8011664:	9002      	str	r0, [sp, #8]
 8011666:	9006      	str	r0, [sp, #24]
 8011668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801166c:	4809      	ldr	r0, [pc, #36]	@ (8011694 <siprintf+0x38>)
 801166e:	9107      	str	r1, [sp, #28]
 8011670:	9104      	str	r1, [sp, #16]
 8011672:	4909      	ldr	r1, [pc, #36]	@ (8011698 <siprintf+0x3c>)
 8011674:	f853 2b04 	ldr.w	r2, [r3], #4
 8011678:	9105      	str	r1, [sp, #20]
 801167a:	6800      	ldr	r0, [r0, #0]
 801167c:	9301      	str	r3, [sp, #4]
 801167e:	a902      	add	r1, sp, #8
 8011680:	f001 fcbc 	bl	8012ffc <_svfiprintf_r>
 8011684:	9b02      	ldr	r3, [sp, #8]
 8011686:	2200      	movs	r2, #0
 8011688:	701a      	strb	r2, [r3, #0]
 801168a:	b01c      	add	sp, #112	@ 0x70
 801168c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011690:	b003      	add	sp, #12
 8011692:	4770      	bx	lr
 8011694:	2000029c 	.word	0x2000029c
 8011698:	ffff0208 	.word	0xffff0208

0801169c <__sread>:
 801169c:	b510      	push	{r4, lr}
 801169e:	460c      	mov	r4, r1
 80116a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a4:	f000 f8f8 	bl	8011898 <_read_r>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	bfab      	itete	ge
 80116ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80116ae:	89a3      	ldrhlt	r3, [r4, #12]
 80116b0:	181b      	addge	r3, r3, r0
 80116b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80116b6:	bfac      	ite	ge
 80116b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80116ba:	81a3      	strhlt	r3, [r4, #12]
 80116bc:	bd10      	pop	{r4, pc}

080116be <__swrite>:
 80116be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c2:	461f      	mov	r7, r3
 80116c4:	898b      	ldrh	r3, [r1, #12]
 80116c6:	05db      	lsls	r3, r3, #23
 80116c8:	4605      	mov	r5, r0
 80116ca:	460c      	mov	r4, r1
 80116cc:	4616      	mov	r6, r2
 80116ce:	d505      	bpl.n	80116dc <__swrite+0x1e>
 80116d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116d4:	2302      	movs	r3, #2
 80116d6:	2200      	movs	r2, #0
 80116d8:	f000 f8cc 	bl	8011874 <_lseek_r>
 80116dc:	89a3      	ldrh	r3, [r4, #12]
 80116de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80116e6:	81a3      	strh	r3, [r4, #12]
 80116e8:	4632      	mov	r2, r6
 80116ea:	463b      	mov	r3, r7
 80116ec:	4628      	mov	r0, r5
 80116ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116f2:	f000 b8e3 	b.w	80118bc <_write_r>

080116f6 <__sseek>:
 80116f6:	b510      	push	{r4, lr}
 80116f8:	460c      	mov	r4, r1
 80116fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116fe:	f000 f8b9 	bl	8011874 <_lseek_r>
 8011702:	1c43      	adds	r3, r0, #1
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	bf15      	itete	ne
 8011708:	6560      	strne	r0, [r4, #84]	@ 0x54
 801170a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801170e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011712:	81a3      	strheq	r3, [r4, #12]
 8011714:	bf18      	it	ne
 8011716:	81a3      	strhne	r3, [r4, #12]
 8011718:	bd10      	pop	{r4, pc}

0801171a <__sclose>:
 801171a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801171e:	f000 b843 	b.w	80117a8 <_close_r>

08011722 <memset>:
 8011722:	4402      	add	r2, r0
 8011724:	4603      	mov	r3, r0
 8011726:	4293      	cmp	r3, r2
 8011728:	d100      	bne.n	801172c <memset+0xa>
 801172a:	4770      	bx	lr
 801172c:	f803 1b01 	strb.w	r1, [r3], #1
 8011730:	e7f9      	b.n	8011726 <memset+0x4>

08011732 <strchr>:
 8011732:	b2c9      	uxtb	r1, r1
 8011734:	4603      	mov	r3, r0
 8011736:	4618      	mov	r0, r3
 8011738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801173c:	b112      	cbz	r2, 8011744 <strchr+0x12>
 801173e:	428a      	cmp	r2, r1
 8011740:	d1f9      	bne.n	8011736 <strchr+0x4>
 8011742:	4770      	bx	lr
 8011744:	2900      	cmp	r1, #0
 8011746:	bf18      	it	ne
 8011748:	2000      	movne	r0, #0
 801174a:	4770      	bx	lr

0801174c <strncpy>:
 801174c:	b510      	push	{r4, lr}
 801174e:	3901      	subs	r1, #1
 8011750:	4603      	mov	r3, r0
 8011752:	b132      	cbz	r2, 8011762 <strncpy+0x16>
 8011754:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011758:	f803 4b01 	strb.w	r4, [r3], #1
 801175c:	3a01      	subs	r2, #1
 801175e:	2c00      	cmp	r4, #0
 8011760:	d1f7      	bne.n	8011752 <strncpy+0x6>
 8011762:	441a      	add	r2, r3
 8011764:	2100      	movs	r1, #0
 8011766:	4293      	cmp	r3, r2
 8011768:	d100      	bne.n	801176c <strncpy+0x20>
 801176a:	bd10      	pop	{r4, pc}
 801176c:	f803 1b01 	strb.w	r1, [r3], #1
 8011770:	e7f9      	b.n	8011766 <strncpy+0x1a>

08011772 <strstr>:
 8011772:	780a      	ldrb	r2, [r1, #0]
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	b96a      	cbnz	r2, 8011794 <strstr+0x22>
 8011778:	bd70      	pop	{r4, r5, r6, pc}
 801177a:	429a      	cmp	r2, r3
 801177c:	d109      	bne.n	8011792 <strstr+0x20>
 801177e:	460c      	mov	r4, r1
 8011780:	4605      	mov	r5, r0
 8011782:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0f6      	beq.n	8011778 <strstr+0x6>
 801178a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801178e:	429e      	cmp	r6, r3
 8011790:	d0f7      	beq.n	8011782 <strstr+0x10>
 8011792:	3001      	adds	r0, #1
 8011794:	7803      	ldrb	r3, [r0, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1ef      	bne.n	801177a <strstr+0x8>
 801179a:	4618      	mov	r0, r3
 801179c:	e7ec      	b.n	8011778 <strstr+0x6>
	...

080117a0 <_localeconv_r>:
 80117a0:	4800      	ldr	r0, [pc, #0]	@ (80117a4 <_localeconv_r+0x4>)
 80117a2:	4770      	bx	lr
 80117a4:	200003dc 	.word	0x200003dc

080117a8 <_close_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d06      	ldr	r5, [pc, #24]	@ (80117c4 <_close_r+0x1c>)
 80117ac:	2300      	movs	r3, #0
 80117ae:	4604      	mov	r4, r0
 80117b0:	4608      	mov	r0, r1
 80117b2:	602b      	str	r3, [r5, #0]
 80117b4:	f7f6 fe7a 	bl	80084ac <_close>
 80117b8:	1c43      	adds	r3, r0, #1
 80117ba:	d102      	bne.n	80117c2 <_close_r+0x1a>
 80117bc:	682b      	ldr	r3, [r5, #0]
 80117be:	b103      	cbz	r3, 80117c2 <_close_r+0x1a>
 80117c0:	6023      	str	r3, [r4, #0]
 80117c2:	bd38      	pop	{r3, r4, r5, pc}
 80117c4:	2000cc94 	.word	0x2000cc94

080117c8 <_reclaim_reent>:
 80117c8:	4b29      	ldr	r3, [pc, #164]	@ (8011870 <_reclaim_reent+0xa8>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4283      	cmp	r3, r0
 80117ce:	b570      	push	{r4, r5, r6, lr}
 80117d0:	4604      	mov	r4, r0
 80117d2:	d04b      	beq.n	801186c <_reclaim_reent+0xa4>
 80117d4:	69c3      	ldr	r3, [r0, #28]
 80117d6:	b1ab      	cbz	r3, 8011804 <_reclaim_reent+0x3c>
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	b16b      	cbz	r3, 80117f8 <_reclaim_reent+0x30>
 80117dc:	2500      	movs	r5, #0
 80117de:	69e3      	ldr	r3, [r4, #28]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	5959      	ldr	r1, [r3, r5]
 80117e4:	2900      	cmp	r1, #0
 80117e6:	d13b      	bne.n	8011860 <_reclaim_reent+0x98>
 80117e8:	3504      	adds	r5, #4
 80117ea:	2d80      	cmp	r5, #128	@ 0x80
 80117ec:	d1f7      	bne.n	80117de <_reclaim_reent+0x16>
 80117ee:	69e3      	ldr	r3, [r4, #28]
 80117f0:	4620      	mov	r0, r4
 80117f2:	68d9      	ldr	r1, [r3, #12]
 80117f4:	f000 ff24 	bl	8012640 <_free_r>
 80117f8:	69e3      	ldr	r3, [r4, #28]
 80117fa:	6819      	ldr	r1, [r3, #0]
 80117fc:	b111      	cbz	r1, 8011804 <_reclaim_reent+0x3c>
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 ff1e 	bl	8012640 <_free_r>
 8011804:	6961      	ldr	r1, [r4, #20]
 8011806:	b111      	cbz	r1, 801180e <_reclaim_reent+0x46>
 8011808:	4620      	mov	r0, r4
 801180a:	f000 ff19 	bl	8012640 <_free_r>
 801180e:	69e1      	ldr	r1, [r4, #28]
 8011810:	b111      	cbz	r1, 8011818 <_reclaim_reent+0x50>
 8011812:	4620      	mov	r0, r4
 8011814:	f000 ff14 	bl	8012640 <_free_r>
 8011818:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801181a:	b111      	cbz	r1, 8011822 <_reclaim_reent+0x5a>
 801181c:	4620      	mov	r0, r4
 801181e:	f000 ff0f 	bl	8012640 <_free_r>
 8011822:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011824:	b111      	cbz	r1, 801182c <_reclaim_reent+0x64>
 8011826:	4620      	mov	r0, r4
 8011828:	f000 ff0a 	bl	8012640 <_free_r>
 801182c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801182e:	b111      	cbz	r1, 8011836 <_reclaim_reent+0x6e>
 8011830:	4620      	mov	r0, r4
 8011832:	f000 ff05 	bl	8012640 <_free_r>
 8011836:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011838:	b111      	cbz	r1, 8011840 <_reclaim_reent+0x78>
 801183a:	4620      	mov	r0, r4
 801183c:	f000 ff00 	bl	8012640 <_free_r>
 8011840:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011842:	b111      	cbz	r1, 801184a <_reclaim_reent+0x82>
 8011844:	4620      	mov	r0, r4
 8011846:	f000 fefb 	bl	8012640 <_free_r>
 801184a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801184c:	b111      	cbz	r1, 8011854 <_reclaim_reent+0x8c>
 801184e:	4620      	mov	r0, r4
 8011850:	f000 fef6 	bl	8012640 <_free_r>
 8011854:	6a23      	ldr	r3, [r4, #32]
 8011856:	b14b      	cbz	r3, 801186c <_reclaim_reent+0xa4>
 8011858:	4620      	mov	r0, r4
 801185a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801185e:	4718      	bx	r3
 8011860:	680e      	ldr	r6, [r1, #0]
 8011862:	4620      	mov	r0, r4
 8011864:	f000 feec 	bl	8012640 <_free_r>
 8011868:	4631      	mov	r1, r6
 801186a:	e7bb      	b.n	80117e4 <_reclaim_reent+0x1c>
 801186c:	bd70      	pop	{r4, r5, r6, pc}
 801186e:	bf00      	nop
 8011870:	2000029c 	.word	0x2000029c

08011874 <_lseek_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4d07      	ldr	r5, [pc, #28]	@ (8011894 <_lseek_r+0x20>)
 8011878:	4604      	mov	r4, r0
 801187a:	4608      	mov	r0, r1
 801187c:	4611      	mov	r1, r2
 801187e:	2200      	movs	r2, #0
 8011880:	602a      	str	r2, [r5, #0]
 8011882:	461a      	mov	r2, r3
 8011884:	f7f6 fe39 	bl	80084fa <_lseek>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d102      	bne.n	8011892 <_lseek_r+0x1e>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	b103      	cbz	r3, 8011892 <_lseek_r+0x1e>
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	2000cc94 	.word	0x2000cc94

08011898 <_read_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4d07      	ldr	r5, [pc, #28]	@ (80118b8 <_read_r+0x20>)
 801189c:	4604      	mov	r4, r0
 801189e:	4608      	mov	r0, r1
 80118a0:	4611      	mov	r1, r2
 80118a2:	2200      	movs	r2, #0
 80118a4:	602a      	str	r2, [r5, #0]
 80118a6:	461a      	mov	r2, r3
 80118a8:	f7f6 fdc7 	bl	800843a <_read>
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	d102      	bne.n	80118b6 <_read_r+0x1e>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	b103      	cbz	r3, 80118b6 <_read_r+0x1e>
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	2000cc94 	.word	0x2000cc94

080118bc <_write_r>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	4d07      	ldr	r5, [pc, #28]	@ (80118dc <_write_r+0x20>)
 80118c0:	4604      	mov	r4, r0
 80118c2:	4608      	mov	r0, r1
 80118c4:	4611      	mov	r1, r2
 80118c6:	2200      	movs	r2, #0
 80118c8:	602a      	str	r2, [r5, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	f7f6 fdd2 	bl	8008474 <_write>
 80118d0:	1c43      	adds	r3, r0, #1
 80118d2:	d102      	bne.n	80118da <_write_r+0x1e>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	b103      	cbz	r3, 80118da <_write_r+0x1e>
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	bd38      	pop	{r3, r4, r5, pc}
 80118dc:	2000cc94 	.word	0x2000cc94

080118e0 <__errno>:
 80118e0:	4b01      	ldr	r3, [pc, #4]	@ (80118e8 <__errno+0x8>)
 80118e2:	6818      	ldr	r0, [r3, #0]
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	2000029c 	.word	0x2000029c

080118ec <__libc_init_array>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	4d0d      	ldr	r5, [pc, #52]	@ (8011924 <__libc_init_array+0x38>)
 80118f0:	4c0d      	ldr	r4, [pc, #52]	@ (8011928 <__libc_init_array+0x3c>)
 80118f2:	1b64      	subs	r4, r4, r5
 80118f4:	10a4      	asrs	r4, r4, #2
 80118f6:	2600      	movs	r6, #0
 80118f8:	42a6      	cmp	r6, r4
 80118fa:	d109      	bne.n	8011910 <__libc_init_array+0x24>
 80118fc:	4d0b      	ldr	r5, [pc, #44]	@ (801192c <__libc_init_array+0x40>)
 80118fe:	4c0c      	ldr	r4, [pc, #48]	@ (8011930 <__libc_init_array+0x44>)
 8011900:	f002 f86e 	bl	80139e0 <_init>
 8011904:	1b64      	subs	r4, r4, r5
 8011906:	10a4      	asrs	r4, r4, #2
 8011908:	2600      	movs	r6, #0
 801190a:	42a6      	cmp	r6, r4
 801190c:	d105      	bne.n	801191a <__libc_init_array+0x2e>
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	f855 3b04 	ldr.w	r3, [r5], #4
 8011914:	4798      	blx	r3
 8011916:	3601      	adds	r6, #1
 8011918:	e7ee      	b.n	80118f8 <__libc_init_array+0xc>
 801191a:	f855 3b04 	ldr.w	r3, [r5], #4
 801191e:	4798      	blx	r3
 8011920:	3601      	adds	r6, #1
 8011922:	e7f2      	b.n	801190a <__libc_init_array+0x1e>
 8011924:	080155b8 	.word	0x080155b8
 8011928:	080155b8 	.word	0x080155b8
 801192c:	080155b8 	.word	0x080155b8
 8011930:	080155cc 	.word	0x080155cc

08011934 <__retarget_lock_init_recursive>:
 8011934:	4770      	bx	lr

08011936 <__retarget_lock_acquire_recursive>:
 8011936:	4770      	bx	lr

08011938 <__retarget_lock_release_recursive>:
 8011938:	4770      	bx	lr

0801193a <strcpy>:
 801193a:	4603      	mov	r3, r0
 801193c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011940:	f803 2b01 	strb.w	r2, [r3], #1
 8011944:	2a00      	cmp	r2, #0
 8011946:	d1f9      	bne.n	801193c <strcpy+0x2>
 8011948:	4770      	bx	lr

0801194a <memcpy>:
 801194a:	440a      	add	r2, r1
 801194c:	4291      	cmp	r1, r2
 801194e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011952:	d100      	bne.n	8011956 <memcpy+0xc>
 8011954:	4770      	bx	lr
 8011956:	b510      	push	{r4, lr}
 8011958:	f811 4b01 	ldrb.w	r4, [r1], #1
 801195c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011960:	4291      	cmp	r1, r2
 8011962:	d1f9      	bne.n	8011958 <memcpy+0xe>
 8011964:	bd10      	pop	{r4, pc}
	...

08011968 <__assert_func>:
 8011968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801196a:	4614      	mov	r4, r2
 801196c:	461a      	mov	r2, r3
 801196e:	4b09      	ldr	r3, [pc, #36]	@ (8011994 <__assert_func+0x2c>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	4605      	mov	r5, r0
 8011974:	68d8      	ldr	r0, [r3, #12]
 8011976:	b954      	cbnz	r4, 801198e <__assert_func+0x26>
 8011978:	4b07      	ldr	r3, [pc, #28]	@ (8011998 <__assert_func+0x30>)
 801197a:	461c      	mov	r4, r3
 801197c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011980:	9100      	str	r1, [sp, #0]
 8011982:	462b      	mov	r3, r5
 8011984:	4905      	ldr	r1, [pc, #20]	@ (801199c <__assert_func+0x34>)
 8011986:	f001 fce1 	bl	801334c <fiprintf>
 801198a:	f001 fdaf 	bl	80134ec <abort>
 801198e:	4b04      	ldr	r3, [pc, #16]	@ (80119a0 <__assert_func+0x38>)
 8011990:	e7f4      	b.n	801197c <__assert_func+0x14>
 8011992:	bf00      	nop
 8011994:	2000029c 	.word	0x2000029c
 8011998:	08014bd0 	.word	0x08014bd0
 801199c:	08014ba2 	.word	0x08014ba2
 80119a0:	08014b95 	.word	0x08014b95

080119a4 <quorem>:
 80119a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a8:	6903      	ldr	r3, [r0, #16]
 80119aa:	690c      	ldr	r4, [r1, #16]
 80119ac:	42a3      	cmp	r3, r4
 80119ae:	4607      	mov	r7, r0
 80119b0:	db7e      	blt.n	8011ab0 <quorem+0x10c>
 80119b2:	3c01      	subs	r4, #1
 80119b4:	f101 0814 	add.w	r8, r1, #20
 80119b8:	00a3      	lsls	r3, r4, #2
 80119ba:	f100 0514 	add.w	r5, r0, #20
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119ce:	3301      	adds	r3, #1
 80119d0:	429a      	cmp	r2, r3
 80119d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80119d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80119da:	d32e      	bcc.n	8011a3a <quorem+0x96>
 80119dc:	f04f 0a00 	mov.w	sl, #0
 80119e0:	46c4      	mov	ip, r8
 80119e2:	46ae      	mov	lr, r5
 80119e4:	46d3      	mov	fp, sl
 80119e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80119ea:	b298      	uxth	r0, r3
 80119ec:	fb06 a000 	mla	r0, r6, r0, sl
 80119f0:	0c02      	lsrs	r2, r0, #16
 80119f2:	0c1b      	lsrs	r3, r3, #16
 80119f4:	fb06 2303 	mla	r3, r6, r3, r2
 80119f8:	f8de 2000 	ldr.w	r2, [lr]
 80119fc:	b280      	uxth	r0, r0
 80119fe:	b292      	uxth	r2, r2
 8011a00:	1a12      	subs	r2, r2, r0
 8011a02:	445a      	add	r2, fp
 8011a04:	f8de 0000 	ldr.w	r0, [lr]
 8011a08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011a12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011a16:	b292      	uxth	r2, r2
 8011a18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011a1c:	45e1      	cmp	r9, ip
 8011a1e:	f84e 2b04 	str.w	r2, [lr], #4
 8011a22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011a26:	d2de      	bcs.n	80119e6 <quorem+0x42>
 8011a28:	9b00      	ldr	r3, [sp, #0]
 8011a2a:	58eb      	ldr	r3, [r5, r3]
 8011a2c:	b92b      	cbnz	r3, 8011a3a <quorem+0x96>
 8011a2e:	9b01      	ldr	r3, [sp, #4]
 8011a30:	3b04      	subs	r3, #4
 8011a32:	429d      	cmp	r5, r3
 8011a34:	461a      	mov	r2, r3
 8011a36:	d32f      	bcc.n	8011a98 <quorem+0xf4>
 8011a38:	613c      	str	r4, [r7, #16]
 8011a3a:	4638      	mov	r0, r7
 8011a3c:	f001 f97a 	bl	8012d34 <__mcmp>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	db25      	blt.n	8011a90 <quorem+0xec>
 8011a44:	4629      	mov	r1, r5
 8011a46:	2000      	movs	r0, #0
 8011a48:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a4c:	f8d1 c000 	ldr.w	ip, [r1]
 8011a50:	fa1f fe82 	uxth.w	lr, r2
 8011a54:	fa1f f38c 	uxth.w	r3, ip
 8011a58:	eba3 030e 	sub.w	r3, r3, lr
 8011a5c:	4403      	add	r3, r0
 8011a5e:	0c12      	lsrs	r2, r2, #16
 8011a60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011a64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a6e:	45c1      	cmp	r9, r8
 8011a70:	f841 3b04 	str.w	r3, [r1], #4
 8011a74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011a78:	d2e6      	bcs.n	8011a48 <quorem+0xa4>
 8011a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a82:	b922      	cbnz	r2, 8011a8e <quorem+0xea>
 8011a84:	3b04      	subs	r3, #4
 8011a86:	429d      	cmp	r5, r3
 8011a88:	461a      	mov	r2, r3
 8011a8a:	d30b      	bcc.n	8011aa4 <quorem+0x100>
 8011a8c:	613c      	str	r4, [r7, #16]
 8011a8e:	3601      	adds	r6, #1
 8011a90:	4630      	mov	r0, r6
 8011a92:	b003      	add	sp, #12
 8011a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a98:	6812      	ldr	r2, [r2, #0]
 8011a9a:	3b04      	subs	r3, #4
 8011a9c:	2a00      	cmp	r2, #0
 8011a9e:	d1cb      	bne.n	8011a38 <quorem+0x94>
 8011aa0:	3c01      	subs	r4, #1
 8011aa2:	e7c6      	b.n	8011a32 <quorem+0x8e>
 8011aa4:	6812      	ldr	r2, [r2, #0]
 8011aa6:	3b04      	subs	r3, #4
 8011aa8:	2a00      	cmp	r2, #0
 8011aaa:	d1ef      	bne.n	8011a8c <quorem+0xe8>
 8011aac:	3c01      	subs	r4, #1
 8011aae:	e7ea      	b.n	8011a86 <quorem+0xe2>
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	e7ee      	b.n	8011a92 <quorem+0xee>
 8011ab4:	0000      	movs	r0, r0
	...

08011ab8 <_dtoa_r>:
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	69c7      	ldr	r7, [r0, #28]
 8011abe:	b099      	sub	sp, #100	@ 0x64
 8011ac0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011ac4:	ec55 4b10 	vmov	r4, r5, d0
 8011ac8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8011acc:	4683      	mov	fp, r0
 8011ace:	920e      	str	r2, [sp, #56]	@ 0x38
 8011ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011ad2:	b97f      	cbnz	r7, 8011af4 <_dtoa_r+0x3c>
 8011ad4:	2010      	movs	r0, #16
 8011ad6:	f000 fdfd 	bl	80126d4 <malloc>
 8011ada:	4602      	mov	r2, r0
 8011adc:	f8cb 001c 	str.w	r0, [fp, #28]
 8011ae0:	b920      	cbnz	r0, 8011aec <_dtoa_r+0x34>
 8011ae2:	4ba7      	ldr	r3, [pc, #668]	@ (8011d80 <_dtoa_r+0x2c8>)
 8011ae4:	21ef      	movs	r1, #239	@ 0xef
 8011ae6:	48a7      	ldr	r0, [pc, #668]	@ (8011d84 <_dtoa_r+0x2cc>)
 8011ae8:	f7ff ff3e 	bl	8011968 <__assert_func>
 8011aec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011af0:	6007      	str	r7, [r0, #0]
 8011af2:	60c7      	str	r7, [r0, #12]
 8011af4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011af8:	6819      	ldr	r1, [r3, #0]
 8011afa:	b159      	cbz	r1, 8011b14 <_dtoa_r+0x5c>
 8011afc:	685a      	ldr	r2, [r3, #4]
 8011afe:	604a      	str	r2, [r1, #4]
 8011b00:	2301      	movs	r3, #1
 8011b02:	4093      	lsls	r3, r2
 8011b04:	608b      	str	r3, [r1, #8]
 8011b06:	4658      	mov	r0, fp
 8011b08:	f000 feda 	bl	80128c0 <_Bfree>
 8011b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b10:	2200      	movs	r2, #0
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	1e2b      	subs	r3, r5, #0
 8011b16:	bfb9      	ittee	lt
 8011b18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011b1c:	9303      	strlt	r3, [sp, #12]
 8011b1e:	2300      	movge	r3, #0
 8011b20:	6033      	strge	r3, [r6, #0]
 8011b22:	9f03      	ldr	r7, [sp, #12]
 8011b24:	4b98      	ldr	r3, [pc, #608]	@ (8011d88 <_dtoa_r+0x2d0>)
 8011b26:	bfbc      	itt	lt
 8011b28:	2201      	movlt	r2, #1
 8011b2a:	6032      	strlt	r2, [r6, #0]
 8011b2c:	43bb      	bics	r3, r7
 8011b2e:	d112      	bne.n	8011b56 <_dtoa_r+0x9e>
 8011b30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011b32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011b36:	6013      	str	r3, [r2, #0]
 8011b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b3c:	4323      	orrs	r3, r4
 8011b3e:	f000 854d 	beq.w	80125dc <_dtoa_r+0xb24>
 8011b42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011b44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011d9c <_dtoa_r+0x2e4>
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f000 854f 	beq.w	80125ec <_dtoa_r+0xb34>
 8011b4e:	f10a 0303 	add.w	r3, sl, #3
 8011b52:	f000 bd49 	b.w	80125e8 <_dtoa_r+0xb30>
 8011b56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	ec51 0b17 	vmov	r0, r1, d7
 8011b60:	2300      	movs	r3, #0
 8011b62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011b66:	f7ee ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b6a:	4680      	mov	r8, r0
 8011b6c:	b158      	cbz	r0, 8011b86 <_dtoa_r+0xce>
 8011b6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011b70:	2301      	movs	r3, #1
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011b76:	b113      	cbz	r3, 8011b7e <_dtoa_r+0xc6>
 8011b78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011b7a:	4b84      	ldr	r3, [pc, #528]	@ (8011d8c <_dtoa_r+0x2d4>)
 8011b7c:	6013      	str	r3, [r2, #0]
 8011b7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011da0 <_dtoa_r+0x2e8>
 8011b82:	f000 bd33 	b.w	80125ec <_dtoa_r+0xb34>
 8011b86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011b8a:	aa16      	add	r2, sp, #88	@ 0x58
 8011b8c:	a917      	add	r1, sp, #92	@ 0x5c
 8011b8e:	4658      	mov	r0, fp
 8011b90:	f001 f980 	bl	8012e94 <__d2b>
 8011b94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011b98:	4681      	mov	r9, r0
 8011b9a:	2e00      	cmp	r6, #0
 8011b9c:	d077      	beq.n	8011c8e <_dtoa_r+0x1d6>
 8011b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ba0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011bac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011bb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011bb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011bb8:	4619      	mov	r1, r3
 8011bba:	2200      	movs	r2, #0
 8011bbc:	4b74      	ldr	r3, [pc, #464]	@ (8011d90 <_dtoa_r+0x2d8>)
 8011bbe:	f7ee fb63 	bl	8000288 <__aeabi_dsub>
 8011bc2:	a369      	add	r3, pc, #420	@ (adr r3, 8011d68 <_dtoa_r+0x2b0>)
 8011bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc8:	f7ee fd16 	bl	80005f8 <__aeabi_dmul>
 8011bcc:	a368      	add	r3, pc, #416	@ (adr r3, 8011d70 <_dtoa_r+0x2b8>)
 8011bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd2:	f7ee fb5b 	bl	800028c <__adddf3>
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	4630      	mov	r0, r6
 8011bda:	460d      	mov	r5, r1
 8011bdc:	f7ee fca2 	bl	8000524 <__aeabi_i2d>
 8011be0:	a365      	add	r3, pc, #404	@ (adr r3, 8011d78 <_dtoa_r+0x2c0>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	f7ee fd07 	bl	80005f8 <__aeabi_dmul>
 8011bea:	4602      	mov	r2, r0
 8011bec:	460b      	mov	r3, r1
 8011bee:	4620      	mov	r0, r4
 8011bf0:	4629      	mov	r1, r5
 8011bf2:	f7ee fb4b 	bl	800028c <__adddf3>
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	460d      	mov	r5, r1
 8011bfa:	f7ee ffad 	bl	8000b58 <__aeabi_d2iz>
 8011bfe:	2200      	movs	r2, #0
 8011c00:	4607      	mov	r7, r0
 8011c02:	2300      	movs	r3, #0
 8011c04:	4620      	mov	r0, r4
 8011c06:	4629      	mov	r1, r5
 8011c08:	f7ee ff68 	bl	8000adc <__aeabi_dcmplt>
 8011c0c:	b140      	cbz	r0, 8011c20 <_dtoa_r+0x168>
 8011c0e:	4638      	mov	r0, r7
 8011c10:	f7ee fc88 	bl	8000524 <__aeabi_i2d>
 8011c14:	4622      	mov	r2, r4
 8011c16:	462b      	mov	r3, r5
 8011c18:	f7ee ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c1c:	b900      	cbnz	r0, 8011c20 <_dtoa_r+0x168>
 8011c1e:	3f01      	subs	r7, #1
 8011c20:	2f16      	cmp	r7, #22
 8011c22:	d851      	bhi.n	8011cc8 <_dtoa_r+0x210>
 8011c24:	4b5b      	ldr	r3, [pc, #364]	@ (8011d94 <_dtoa_r+0x2dc>)
 8011c26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c32:	f7ee ff53 	bl	8000adc <__aeabi_dcmplt>
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d048      	beq.n	8011ccc <_dtoa_r+0x214>
 8011c3a:	3f01      	subs	r7, #1
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011c40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011c42:	1b9b      	subs	r3, r3, r6
 8011c44:	1e5a      	subs	r2, r3, #1
 8011c46:	bf44      	itt	mi
 8011c48:	f1c3 0801 	rsbmi	r8, r3, #1
 8011c4c:	2300      	movmi	r3, #0
 8011c4e:	9208      	str	r2, [sp, #32]
 8011c50:	bf54      	ite	pl
 8011c52:	f04f 0800 	movpl.w	r8, #0
 8011c56:	9308      	strmi	r3, [sp, #32]
 8011c58:	2f00      	cmp	r7, #0
 8011c5a:	db39      	blt.n	8011cd0 <_dtoa_r+0x218>
 8011c5c:	9b08      	ldr	r3, [sp, #32]
 8011c5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011c60:	443b      	add	r3, r7
 8011c62:	9308      	str	r3, [sp, #32]
 8011c64:	2300      	movs	r3, #0
 8011c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c6a:	2b09      	cmp	r3, #9
 8011c6c:	d864      	bhi.n	8011d38 <_dtoa_r+0x280>
 8011c6e:	2b05      	cmp	r3, #5
 8011c70:	bfc4      	itt	gt
 8011c72:	3b04      	subgt	r3, #4
 8011c74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c78:	f1a3 0302 	sub.w	r3, r3, #2
 8011c7c:	bfcc      	ite	gt
 8011c7e:	2400      	movgt	r4, #0
 8011c80:	2401      	movle	r4, #1
 8011c82:	2b03      	cmp	r3, #3
 8011c84:	d863      	bhi.n	8011d4e <_dtoa_r+0x296>
 8011c86:	e8df f003 	tbb	[pc, r3]
 8011c8a:	372a      	.short	0x372a
 8011c8c:	5535      	.short	0x5535
 8011c8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011c92:	441e      	add	r6, r3
 8011c94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011c98:	2b20      	cmp	r3, #32
 8011c9a:	bfc1      	itttt	gt
 8011c9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011ca0:	409f      	lslgt	r7, r3
 8011ca2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011ca6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011caa:	bfd6      	itet	le
 8011cac:	f1c3 0320 	rsble	r3, r3, #32
 8011cb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8011cb4:	fa04 f003 	lslle.w	r0, r4, r3
 8011cb8:	f7ee fc24 	bl	8000504 <__aeabi_ui2d>
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011cc2:	3e01      	subs	r6, #1
 8011cc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8011cc6:	e777      	b.n	8011bb8 <_dtoa_r+0x100>
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e7b8      	b.n	8011c3e <_dtoa_r+0x186>
 8011ccc:	9012      	str	r0, [sp, #72]	@ 0x48
 8011cce:	e7b7      	b.n	8011c40 <_dtoa_r+0x188>
 8011cd0:	427b      	negs	r3, r7
 8011cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	eba8 0807 	sub.w	r8, r8, r7
 8011cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cdc:	e7c4      	b.n	8011c68 <_dtoa_r+0x1b0>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	dc35      	bgt.n	8011d54 <_dtoa_r+0x29c>
 8011ce8:	2301      	movs	r3, #1
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	9307      	str	r3, [sp, #28]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011cf2:	e00b      	b.n	8011d0c <_dtoa_r+0x254>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e7f3      	b.n	8011ce0 <_dtoa_r+0x228>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cfe:	18fb      	adds	r3, r7, r3
 8011d00:	9300      	str	r3, [sp, #0]
 8011d02:	3301      	adds	r3, #1
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	9307      	str	r3, [sp, #28]
 8011d08:	bfb8      	it	lt
 8011d0a:	2301      	movlt	r3, #1
 8011d0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011d10:	2100      	movs	r1, #0
 8011d12:	2204      	movs	r2, #4
 8011d14:	f102 0514 	add.w	r5, r2, #20
 8011d18:	429d      	cmp	r5, r3
 8011d1a:	d91f      	bls.n	8011d5c <_dtoa_r+0x2a4>
 8011d1c:	6041      	str	r1, [r0, #4]
 8011d1e:	4658      	mov	r0, fp
 8011d20:	f000 fd8e 	bl	8012840 <_Balloc>
 8011d24:	4682      	mov	sl, r0
 8011d26:	2800      	cmp	r0, #0
 8011d28:	d13c      	bne.n	8011da4 <_dtoa_r+0x2ec>
 8011d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8011d98 <_dtoa_r+0x2e0>)
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011d32:	e6d8      	b.n	8011ae6 <_dtoa_r+0x2e>
 8011d34:	2301      	movs	r3, #1
 8011d36:	e7e0      	b.n	8011cfa <_dtoa_r+0x242>
 8011d38:	2401      	movs	r4, #1
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011d40:	f04f 33ff 	mov.w	r3, #4294967295
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	9307      	str	r3, [sp, #28]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	2312      	movs	r3, #18
 8011d4c:	e7d0      	b.n	8011cf0 <_dtoa_r+0x238>
 8011d4e:	2301      	movs	r3, #1
 8011d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d52:	e7f5      	b.n	8011d40 <_dtoa_r+0x288>
 8011d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d56:	9300      	str	r3, [sp, #0]
 8011d58:	9307      	str	r3, [sp, #28]
 8011d5a:	e7d7      	b.n	8011d0c <_dtoa_r+0x254>
 8011d5c:	3101      	adds	r1, #1
 8011d5e:	0052      	lsls	r2, r2, #1
 8011d60:	e7d8      	b.n	8011d14 <_dtoa_r+0x25c>
 8011d62:	bf00      	nop
 8011d64:	f3af 8000 	nop.w
 8011d68:	636f4361 	.word	0x636f4361
 8011d6c:	3fd287a7 	.word	0x3fd287a7
 8011d70:	8b60c8b3 	.word	0x8b60c8b3
 8011d74:	3fc68a28 	.word	0x3fc68a28
 8011d78:	509f79fb 	.word	0x509f79fb
 8011d7c:	3fd34413 	.word	0x3fd34413
 8011d80:	08014bde 	.word	0x08014bde
 8011d84:	08014bf5 	.word	0x08014bf5
 8011d88:	7ff00000 	.word	0x7ff00000
 8011d8c:	08014b72 	.word	0x08014b72
 8011d90:	3ff80000 	.word	0x3ff80000
 8011d94:	08014cf0 	.word	0x08014cf0
 8011d98:	08014c4d 	.word	0x08014c4d
 8011d9c:	08014bda 	.word	0x08014bda
 8011da0:	08014b71 	.word	0x08014b71
 8011da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011da8:	6018      	str	r0, [r3, #0]
 8011daa:	9b07      	ldr	r3, [sp, #28]
 8011dac:	2b0e      	cmp	r3, #14
 8011dae:	f200 80a4 	bhi.w	8011efa <_dtoa_r+0x442>
 8011db2:	2c00      	cmp	r4, #0
 8011db4:	f000 80a1 	beq.w	8011efa <_dtoa_r+0x442>
 8011db8:	2f00      	cmp	r7, #0
 8011dba:	dd33      	ble.n	8011e24 <_dtoa_r+0x36c>
 8011dbc:	4bad      	ldr	r3, [pc, #692]	@ (8012074 <_dtoa_r+0x5bc>)
 8011dbe:	f007 020f 	and.w	r2, r7, #15
 8011dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011dc6:	ed93 7b00 	vldr	d7, [r3]
 8011dca:	05f8      	lsls	r0, r7, #23
 8011dcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011dd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011dd4:	d516      	bpl.n	8011e04 <_dtoa_r+0x34c>
 8011dd6:	4ba8      	ldr	r3, [pc, #672]	@ (8012078 <_dtoa_r+0x5c0>)
 8011dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011de0:	f7ee fd34 	bl	800084c <__aeabi_ddiv>
 8011de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011de8:	f004 040f 	and.w	r4, r4, #15
 8011dec:	2603      	movs	r6, #3
 8011dee:	4da2      	ldr	r5, [pc, #648]	@ (8012078 <_dtoa_r+0x5c0>)
 8011df0:	b954      	cbnz	r4, 8011e08 <_dtoa_r+0x350>
 8011df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dfa:	f7ee fd27 	bl	800084c <__aeabi_ddiv>
 8011dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e02:	e028      	b.n	8011e56 <_dtoa_r+0x39e>
 8011e04:	2602      	movs	r6, #2
 8011e06:	e7f2      	b.n	8011dee <_dtoa_r+0x336>
 8011e08:	07e1      	lsls	r1, r4, #31
 8011e0a:	d508      	bpl.n	8011e1e <_dtoa_r+0x366>
 8011e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e14:	f7ee fbf0 	bl	80005f8 <__aeabi_dmul>
 8011e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e1c:	3601      	adds	r6, #1
 8011e1e:	1064      	asrs	r4, r4, #1
 8011e20:	3508      	adds	r5, #8
 8011e22:	e7e5      	b.n	8011df0 <_dtoa_r+0x338>
 8011e24:	f000 80d2 	beq.w	8011fcc <_dtoa_r+0x514>
 8011e28:	427c      	negs	r4, r7
 8011e2a:	4b92      	ldr	r3, [pc, #584]	@ (8012074 <_dtoa_r+0x5bc>)
 8011e2c:	4d92      	ldr	r5, [pc, #584]	@ (8012078 <_dtoa_r+0x5c0>)
 8011e2e:	f004 020f 	and.w	r2, r4, #15
 8011e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e3e:	f7ee fbdb 	bl	80005f8 <__aeabi_dmul>
 8011e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e46:	1124      	asrs	r4, r4, #4
 8011e48:	2300      	movs	r3, #0
 8011e4a:	2602      	movs	r6, #2
 8011e4c:	2c00      	cmp	r4, #0
 8011e4e:	f040 80b2 	bne.w	8011fb6 <_dtoa_r+0x4fe>
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1d3      	bne.n	8011dfe <_dtoa_r+0x346>
 8011e56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011e58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	f000 80b7 	beq.w	8011fd0 <_dtoa_r+0x518>
 8011e62:	4b86      	ldr	r3, [pc, #536]	@ (801207c <_dtoa_r+0x5c4>)
 8011e64:	2200      	movs	r2, #0
 8011e66:	4620      	mov	r0, r4
 8011e68:	4629      	mov	r1, r5
 8011e6a:	f7ee fe37 	bl	8000adc <__aeabi_dcmplt>
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	f000 80ae 	beq.w	8011fd0 <_dtoa_r+0x518>
 8011e74:	9b07      	ldr	r3, [sp, #28]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f000 80aa 	beq.w	8011fd0 <_dtoa_r+0x518>
 8011e7c:	9b00      	ldr	r3, [sp, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	dd37      	ble.n	8011ef2 <_dtoa_r+0x43a>
 8011e82:	1e7b      	subs	r3, r7, #1
 8011e84:	9304      	str	r3, [sp, #16]
 8011e86:	4620      	mov	r0, r4
 8011e88:	4b7d      	ldr	r3, [pc, #500]	@ (8012080 <_dtoa_r+0x5c8>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	f7ee fbb3 	bl	80005f8 <__aeabi_dmul>
 8011e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e96:	9c00      	ldr	r4, [sp, #0]
 8011e98:	3601      	adds	r6, #1
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	f7ee fb42 	bl	8000524 <__aeabi_i2d>
 8011ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ea4:	f7ee fba8 	bl	80005f8 <__aeabi_dmul>
 8011ea8:	4b76      	ldr	r3, [pc, #472]	@ (8012084 <_dtoa_r+0x5cc>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f7ee f9ee 	bl	800028c <__adddf3>
 8011eb0:	4605      	mov	r5, r0
 8011eb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011eb6:	2c00      	cmp	r4, #0
 8011eb8:	f040 808d 	bne.w	8011fd6 <_dtoa_r+0x51e>
 8011ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ec0:	4b71      	ldr	r3, [pc, #452]	@ (8012088 <_dtoa_r+0x5d0>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f7ee f9e0 	bl	8000288 <__aeabi_dsub>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011ed0:	462a      	mov	r2, r5
 8011ed2:	4633      	mov	r3, r6
 8011ed4:	f7ee fe20 	bl	8000b18 <__aeabi_dcmpgt>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	f040 828b 	bne.w	80123f4 <_dtoa_r+0x93c>
 8011ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ee2:	462a      	mov	r2, r5
 8011ee4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011ee8:	f7ee fdf8 	bl	8000adc <__aeabi_dcmplt>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	f040 8128 	bne.w	8012142 <_dtoa_r+0x68a>
 8011ef2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011ef6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011efa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f2c0 815a 	blt.w	80121b6 <_dtoa_r+0x6fe>
 8011f02:	2f0e      	cmp	r7, #14
 8011f04:	f300 8157 	bgt.w	80121b6 <_dtoa_r+0x6fe>
 8011f08:	4b5a      	ldr	r3, [pc, #360]	@ (8012074 <_dtoa_r+0x5bc>)
 8011f0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011f0e:	ed93 7b00 	vldr	d7, [r3]
 8011f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	ed8d 7b00 	vstr	d7, [sp]
 8011f1a:	da03      	bge.n	8011f24 <_dtoa_r+0x46c>
 8011f1c:	9b07      	ldr	r3, [sp, #28]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f340 8101 	ble.w	8012126 <_dtoa_r+0x66e>
 8011f24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011f28:	4656      	mov	r6, sl
 8011f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f2e:	4620      	mov	r0, r4
 8011f30:	4629      	mov	r1, r5
 8011f32:	f7ee fc8b 	bl	800084c <__aeabi_ddiv>
 8011f36:	f7ee fe0f 	bl	8000b58 <__aeabi_d2iz>
 8011f3a:	4680      	mov	r8, r0
 8011f3c:	f7ee faf2 	bl	8000524 <__aeabi_i2d>
 8011f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f44:	f7ee fb58 	bl	80005f8 <__aeabi_dmul>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	4629      	mov	r1, r5
 8011f50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011f54:	f7ee f998 	bl	8000288 <__aeabi_dsub>
 8011f58:	f806 4b01 	strb.w	r4, [r6], #1
 8011f5c:	9d07      	ldr	r5, [sp, #28]
 8011f5e:	eba6 040a 	sub.w	r4, r6, sl
 8011f62:	42a5      	cmp	r5, r4
 8011f64:	4602      	mov	r2, r0
 8011f66:	460b      	mov	r3, r1
 8011f68:	f040 8117 	bne.w	801219a <_dtoa_r+0x6e2>
 8011f6c:	f7ee f98e 	bl	800028c <__adddf3>
 8011f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f74:	4604      	mov	r4, r0
 8011f76:	460d      	mov	r5, r1
 8011f78:	f7ee fdce 	bl	8000b18 <__aeabi_dcmpgt>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	f040 80f9 	bne.w	8012174 <_dtoa_r+0x6bc>
 8011f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f86:	4620      	mov	r0, r4
 8011f88:	4629      	mov	r1, r5
 8011f8a:	f7ee fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f8e:	b118      	cbz	r0, 8011f98 <_dtoa_r+0x4e0>
 8011f90:	f018 0f01 	tst.w	r8, #1
 8011f94:	f040 80ee 	bne.w	8012174 <_dtoa_r+0x6bc>
 8011f98:	4649      	mov	r1, r9
 8011f9a:	4658      	mov	r0, fp
 8011f9c:	f000 fc90 	bl	80128c0 <_Bfree>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	7033      	strb	r3, [r6, #0]
 8011fa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011fa6:	3701      	adds	r7, #1
 8011fa8:	601f      	str	r7, [r3, #0]
 8011faa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	f000 831d 	beq.w	80125ec <_dtoa_r+0xb34>
 8011fb2:	601e      	str	r6, [r3, #0]
 8011fb4:	e31a      	b.n	80125ec <_dtoa_r+0xb34>
 8011fb6:	07e2      	lsls	r2, r4, #31
 8011fb8:	d505      	bpl.n	8011fc6 <_dtoa_r+0x50e>
 8011fba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011fbe:	f7ee fb1b 	bl	80005f8 <__aeabi_dmul>
 8011fc2:	3601      	adds	r6, #1
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	1064      	asrs	r4, r4, #1
 8011fc8:	3508      	adds	r5, #8
 8011fca:	e73f      	b.n	8011e4c <_dtoa_r+0x394>
 8011fcc:	2602      	movs	r6, #2
 8011fce:	e742      	b.n	8011e56 <_dtoa_r+0x39e>
 8011fd0:	9c07      	ldr	r4, [sp, #28]
 8011fd2:	9704      	str	r7, [sp, #16]
 8011fd4:	e761      	b.n	8011e9a <_dtoa_r+0x3e2>
 8011fd6:	4b27      	ldr	r3, [pc, #156]	@ (8012074 <_dtoa_r+0x5bc>)
 8011fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011fde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011fe2:	4454      	add	r4, sl
 8011fe4:	2900      	cmp	r1, #0
 8011fe6:	d053      	beq.n	8012090 <_dtoa_r+0x5d8>
 8011fe8:	4928      	ldr	r1, [pc, #160]	@ (801208c <_dtoa_r+0x5d4>)
 8011fea:	2000      	movs	r0, #0
 8011fec:	f7ee fc2e 	bl	800084c <__aeabi_ddiv>
 8011ff0:	4633      	mov	r3, r6
 8011ff2:	462a      	mov	r2, r5
 8011ff4:	f7ee f948 	bl	8000288 <__aeabi_dsub>
 8011ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011ffc:	4656      	mov	r6, sl
 8011ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012002:	f7ee fda9 	bl	8000b58 <__aeabi_d2iz>
 8012006:	4605      	mov	r5, r0
 8012008:	f7ee fa8c 	bl	8000524 <__aeabi_i2d>
 801200c:	4602      	mov	r2, r0
 801200e:	460b      	mov	r3, r1
 8012010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012014:	f7ee f938 	bl	8000288 <__aeabi_dsub>
 8012018:	3530      	adds	r5, #48	@ 0x30
 801201a:	4602      	mov	r2, r0
 801201c:	460b      	mov	r3, r1
 801201e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012022:	f806 5b01 	strb.w	r5, [r6], #1
 8012026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801202a:	f7ee fd57 	bl	8000adc <__aeabi_dcmplt>
 801202e:	2800      	cmp	r0, #0
 8012030:	d171      	bne.n	8012116 <_dtoa_r+0x65e>
 8012032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012036:	4911      	ldr	r1, [pc, #68]	@ (801207c <_dtoa_r+0x5c4>)
 8012038:	2000      	movs	r0, #0
 801203a:	f7ee f925 	bl	8000288 <__aeabi_dsub>
 801203e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012042:	f7ee fd4b 	bl	8000adc <__aeabi_dcmplt>
 8012046:	2800      	cmp	r0, #0
 8012048:	f040 8095 	bne.w	8012176 <_dtoa_r+0x6be>
 801204c:	42a6      	cmp	r6, r4
 801204e:	f43f af50 	beq.w	8011ef2 <_dtoa_r+0x43a>
 8012052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012056:	4b0a      	ldr	r3, [pc, #40]	@ (8012080 <_dtoa_r+0x5c8>)
 8012058:	2200      	movs	r2, #0
 801205a:	f7ee facd 	bl	80005f8 <__aeabi_dmul>
 801205e:	4b08      	ldr	r3, [pc, #32]	@ (8012080 <_dtoa_r+0x5c8>)
 8012060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012064:	2200      	movs	r2, #0
 8012066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801206a:	f7ee fac5 	bl	80005f8 <__aeabi_dmul>
 801206e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012072:	e7c4      	b.n	8011ffe <_dtoa_r+0x546>
 8012074:	08014cf0 	.word	0x08014cf0
 8012078:	08014cc8 	.word	0x08014cc8
 801207c:	3ff00000 	.word	0x3ff00000
 8012080:	40240000 	.word	0x40240000
 8012084:	401c0000 	.word	0x401c0000
 8012088:	40140000 	.word	0x40140000
 801208c:	3fe00000 	.word	0x3fe00000
 8012090:	4631      	mov	r1, r6
 8012092:	4628      	mov	r0, r5
 8012094:	f7ee fab0 	bl	80005f8 <__aeabi_dmul>
 8012098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801209c:	9415      	str	r4, [sp, #84]	@ 0x54
 801209e:	4656      	mov	r6, sl
 80120a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120a4:	f7ee fd58 	bl	8000b58 <__aeabi_d2iz>
 80120a8:	4605      	mov	r5, r0
 80120aa:	f7ee fa3b 	bl	8000524 <__aeabi_i2d>
 80120ae:	4602      	mov	r2, r0
 80120b0:	460b      	mov	r3, r1
 80120b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120b6:	f7ee f8e7 	bl	8000288 <__aeabi_dsub>
 80120ba:	3530      	adds	r5, #48	@ 0x30
 80120bc:	f806 5b01 	strb.w	r5, [r6], #1
 80120c0:	4602      	mov	r2, r0
 80120c2:	460b      	mov	r3, r1
 80120c4:	42a6      	cmp	r6, r4
 80120c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120ca:	f04f 0200 	mov.w	r2, #0
 80120ce:	d124      	bne.n	801211a <_dtoa_r+0x662>
 80120d0:	4bac      	ldr	r3, [pc, #688]	@ (8012384 <_dtoa_r+0x8cc>)
 80120d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80120d6:	f7ee f8d9 	bl	800028c <__adddf3>
 80120da:	4602      	mov	r2, r0
 80120dc:	460b      	mov	r3, r1
 80120de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120e2:	f7ee fd19 	bl	8000b18 <__aeabi_dcmpgt>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d145      	bne.n	8012176 <_dtoa_r+0x6be>
 80120ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80120ee:	49a5      	ldr	r1, [pc, #660]	@ (8012384 <_dtoa_r+0x8cc>)
 80120f0:	2000      	movs	r0, #0
 80120f2:	f7ee f8c9 	bl	8000288 <__aeabi_dsub>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120fe:	f7ee fced 	bl	8000adc <__aeabi_dcmplt>
 8012102:	2800      	cmp	r0, #0
 8012104:	f43f aef5 	beq.w	8011ef2 <_dtoa_r+0x43a>
 8012108:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801210a:	1e73      	subs	r3, r6, #1
 801210c:	9315      	str	r3, [sp, #84]	@ 0x54
 801210e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012112:	2b30      	cmp	r3, #48	@ 0x30
 8012114:	d0f8      	beq.n	8012108 <_dtoa_r+0x650>
 8012116:	9f04      	ldr	r7, [sp, #16]
 8012118:	e73e      	b.n	8011f98 <_dtoa_r+0x4e0>
 801211a:	4b9b      	ldr	r3, [pc, #620]	@ (8012388 <_dtoa_r+0x8d0>)
 801211c:	f7ee fa6c 	bl	80005f8 <__aeabi_dmul>
 8012120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012124:	e7bc      	b.n	80120a0 <_dtoa_r+0x5e8>
 8012126:	d10c      	bne.n	8012142 <_dtoa_r+0x68a>
 8012128:	4b98      	ldr	r3, [pc, #608]	@ (801238c <_dtoa_r+0x8d4>)
 801212a:	2200      	movs	r2, #0
 801212c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012130:	f7ee fa62 	bl	80005f8 <__aeabi_dmul>
 8012134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012138:	f7ee fce4 	bl	8000b04 <__aeabi_dcmpge>
 801213c:	2800      	cmp	r0, #0
 801213e:	f000 8157 	beq.w	80123f0 <_dtoa_r+0x938>
 8012142:	2400      	movs	r4, #0
 8012144:	4625      	mov	r5, r4
 8012146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012148:	43db      	mvns	r3, r3
 801214a:	9304      	str	r3, [sp, #16]
 801214c:	4656      	mov	r6, sl
 801214e:	2700      	movs	r7, #0
 8012150:	4621      	mov	r1, r4
 8012152:	4658      	mov	r0, fp
 8012154:	f000 fbb4 	bl	80128c0 <_Bfree>
 8012158:	2d00      	cmp	r5, #0
 801215a:	d0dc      	beq.n	8012116 <_dtoa_r+0x65e>
 801215c:	b12f      	cbz	r7, 801216a <_dtoa_r+0x6b2>
 801215e:	42af      	cmp	r7, r5
 8012160:	d003      	beq.n	801216a <_dtoa_r+0x6b2>
 8012162:	4639      	mov	r1, r7
 8012164:	4658      	mov	r0, fp
 8012166:	f000 fbab 	bl	80128c0 <_Bfree>
 801216a:	4629      	mov	r1, r5
 801216c:	4658      	mov	r0, fp
 801216e:	f000 fba7 	bl	80128c0 <_Bfree>
 8012172:	e7d0      	b.n	8012116 <_dtoa_r+0x65e>
 8012174:	9704      	str	r7, [sp, #16]
 8012176:	4633      	mov	r3, r6
 8012178:	461e      	mov	r6, r3
 801217a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801217e:	2a39      	cmp	r2, #57	@ 0x39
 8012180:	d107      	bne.n	8012192 <_dtoa_r+0x6da>
 8012182:	459a      	cmp	sl, r3
 8012184:	d1f8      	bne.n	8012178 <_dtoa_r+0x6c0>
 8012186:	9a04      	ldr	r2, [sp, #16]
 8012188:	3201      	adds	r2, #1
 801218a:	9204      	str	r2, [sp, #16]
 801218c:	2230      	movs	r2, #48	@ 0x30
 801218e:	f88a 2000 	strb.w	r2, [sl]
 8012192:	781a      	ldrb	r2, [r3, #0]
 8012194:	3201      	adds	r2, #1
 8012196:	701a      	strb	r2, [r3, #0]
 8012198:	e7bd      	b.n	8012116 <_dtoa_r+0x65e>
 801219a:	4b7b      	ldr	r3, [pc, #492]	@ (8012388 <_dtoa_r+0x8d0>)
 801219c:	2200      	movs	r2, #0
 801219e:	f7ee fa2b 	bl	80005f8 <__aeabi_dmul>
 80121a2:	2200      	movs	r2, #0
 80121a4:	2300      	movs	r3, #0
 80121a6:	4604      	mov	r4, r0
 80121a8:	460d      	mov	r5, r1
 80121aa:	f7ee fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80121ae:	2800      	cmp	r0, #0
 80121b0:	f43f aebb 	beq.w	8011f2a <_dtoa_r+0x472>
 80121b4:	e6f0      	b.n	8011f98 <_dtoa_r+0x4e0>
 80121b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80121b8:	2a00      	cmp	r2, #0
 80121ba:	f000 80db 	beq.w	8012374 <_dtoa_r+0x8bc>
 80121be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121c0:	2a01      	cmp	r2, #1
 80121c2:	f300 80bf 	bgt.w	8012344 <_dtoa_r+0x88c>
 80121c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80121c8:	2a00      	cmp	r2, #0
 80121ca:	f000 80b7 	beq.w	801233c <_dtoa_r+0x884>
 80121ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80121d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80121d4:	4646      	mov	r6, r8
 80121d6:	9a08      	ldr	r2, [sp, #32]
 80121d8:	2101      	movs	r1, #1
 80121da:	441a      	add	r2, r3
 80121dc:	4658      	mov	r0, fp
 80121de:	4498      	add	r8, r3
 80121e0:	9208      	str	r2, [sp, #32]
 80121e2:	f000 fc21 	bl	8012a28 <__i2b>
 80121e6:	4605      	mov	r5, r0
 80121e8:	b15e      	cbz	r6, 8012202 <_dtoa_r+0x74a>
 80121ea:	9b08      	ldr	r3, [sp, #32]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	dd08      	ble.n	8012202 <_dtoa_r+0x74a>
 80121f0:	42b3      	cmp	r3, r6
 80121f2:	9a08      	ldr	r2, [sp, #32]
 80121f4:	bfa8      	it	ge
 80121f6:	4633      	movge	r3, r6
 80121f8:	eba8 0803 	sub.w	r8, r8, r3
 80121fc:	1af6      	subs	r6, r6, r3
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012204:	b1f3      	cbz	r3, 8012244 <_dtoa_r+0x78c>
 8012206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012208:	2b00      	cmp	r3, #0
 801220a:	f000 80b7 	beq.w	801237c <_dtoa_r+0x8c4>
 801220e:	b18c      	cbz	r4, 8012234 <_dtoa_r+0x77c>
 8012210:	4629      	mov	r1, r5
 8012212:	4622      	mov	r2, r4
 8012214:	4658      	mov	r0, fp
 8012216:	f000 fcc7 	bl	8012ba8 <__pow5mult>
 801221a:	464a      	mov	r2, r9
 801221c:	4601      	mov	r1, r0
 801221e:	4605      	mov	r5, r0
 8012220:	4658      	mov	r0, fp
 8012222:	f000 fc17 	bl	8012a54 <__multiply>
 8012226:	4649      	mov	r1, r9
 8012228:	9004      	str	r0, [sp, #16]
 801222a:	4658      	mov	r0, fp
 801222c:	f000 fb48 	bl	80128c0 <_Bfree>
 8012230:	9b04      	ldr	r3, [sp, #16]
 8012232:	4699      	mov	r9, r3
 8012234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012236:	1b1a      	subs	r2, r3, r4
 8012238:	d004      	beq.n	8012244 <_dtoa_r+0x78c>
 801223a:	4649      	mov	r1, r9
 801223c:	4658      	mov	r0, fp
 801223e:	f000 fcb3 	bl	8012ba8 <__pow5mult>
 8012242:	4681      	mov	r9, r0
 8012244:	2101      	movs	r1, #1
 8012246:	4658      	mov	r0, fp
 8012248:	f000 fbee 	bl	8012a28 <__i2b>
 801224c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801224e:	4604      	mov	r4, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	f000 81cf 	beq.w	80125f4 <_dtoa_r+0xb3c>
 8012256:	461a      	mov	r2, r3
 8012258:	4601      	mov	r1, r0
 801225a:	4658      	mov	r0, fp
 801225c:	f000 fca4 	bl	8012ba8 <__pow5mult>
 8012260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012262:	2b01      	cmp	r3, #1
 8012264:	4604      	mov	r4, r0
 8012266:	f300 8095 	bgt.w	8012394 <_dtoa_r+0x8dc>
 801226a:	9b02      	ldr	r3, [sp, #8]
 801226c:	2b00      	cmp	r3, #0
 801226e:	f040 8087 	bne.w	8012380 <_dtoa_r+0x8c8>
 8012272:	9b03      	ldr	r3, [sp, #12]
 8012274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012278:	2b00      	cmp	r3, #0
 801227a:	f040 8089 	bne.w	8012390 <_dtoa_r+0x8d8>
 801227e:	9b03      	ldr	r3, [sp, #12]
 8012280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012284:	0d1b      	lsrs	r3, r3, #20
 8012286:	051b      	lsls	r3, r3, #20
 8012288:	b12b      	cbz	r3, 8012296 <_dtoa_r+0x7de>
 801228a:	9b08      	ldr	r3, [sp, #32]
 801228c:	3301      	adds	r3, #1
 801228e:	9308      	str	r3, [sp, #32]
 8012290:	f108 0801 	add.w	r8, r8, #1
 8012294:	2301      	movs	r3, #1
 8012296:	930a      	str	r3, [sp, #40]	@ 0x28
 8012298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801229a:	2b00      	cmp	r3, #0
 801229c:	f000 81b0 	beq.w	8012600 <_dtoa_r+0xb48>
 80122a0:	6923      	ldr	r3, [r4, #16]
 80122a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80122a6:	6918      	ldr	r0, [r3, #16]
 80122a8:	f000 fb72 	bl	8012990 <__hi0bits>
 80122ac:	f1c0 0020 	rsb	r0, r0, #32
 80122b0:	9b08      	ldr	r3, [sp, #32]
 80122b2:	4418      	add	r0, r3
 80122b4:	f010 001f 	ands.w	r0, r0, #31
 80122b8:	d077      	beq.n	80123aa <_dtoa_r+0x8f2>
 80122ba:	f1c0 0320 	rsb	r3, r0, #32
 80122be:	2b04      	cmp	r3, #4
 80122c0:	dd6b      	ble.n	801239a <_dtoa_r+0x8e2>
 80122c2:	9b08      	ldr	r3, [sp, #32]
 80122c4:	f1c0 001c 	rsb	r0, r0, #28
 80122c8:	4403      	add	r3, r0
 80122ca:	4480      	add	r8, r0
 80122cc:	4406      	add	r6, r0
 80122ce:	9308      	str	r3, [sp, #32]
 80122d0:	f1b8 0f00 	cmp.w	r8, #0
 80122d4:	dd05      	ble.n	80122e2 <_dtoa_r+0x82a>
 80122d6:	4649      	mov	r1, r9
 80122d8:	4642      	mov	r2, r8
 80122da:	4658      	mov	r0, fp
 80122dc:	f000 fcbe 	bl	8012c5c <__lshift>
 80122e0:	4681      	mov	r9, r0
 80122e2:	9b08      	ldr	r3, [sp, #32]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	dd05      	ble.n	80122f4 <_dtoa_r+0x83c>
 80122e8:	4621      	mov	r1, r4
 80122ea:	461a      	mov	r2, r3
 80122ec:	4658      	mov	r0, fp
 80122ee:	f000 fcb5 	bl	8012c5c <__lshift>
 80122f2:	4604      	mov	r4, r0
 80122f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d059      	beq.n	80123ae <_dtoa_r+0x8f6>
 80122fa:	4621      	mov	r1, r4
 80122fc:	4648      	mov	r0, r9
 80122fe:	f000 fd19 	bl	8012d34 <__mcmp>
 8012302:	2800      	cmp	r0, #0
 8012304:	da53      	bge.n	80123ae <_dtoa_r+0x8f6>
 8012306:	1e7b      	subs	r3, r7, #1
 8012308:	9304      	str	r3, [sp, #16]
 801230a:	4649      	mov	r1, r9
 801230c:	2300      	movs	r3, #0
 801230e:	220a      	movs	r2, #10
 8012310:	4658      	mov	r0, fp
 8012312:	f000 faf7 	bl	8012904 <__multadd>
 8012316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012318:	4681      	mov	r9, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	f000 8172 	beq.w	8012604 <_dtoa_r+0xb4c>
 8012320:	2300      	movs	r3, #0
 8012322:	4629      	mov	r1, r5
 8012324:	220a      	movs	r2, #10
 8012326:	4658      	mov	r0, fp
 8012328:	f000 faec 	bl	8012904 <__multadd>
 801232c:	9b00      	ldr	r3, [sp, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	4605      	mov	r5, r0
 8012332:	dc67      	bgt.n	8012404 <_dtoa_r+0x94c>
 8012334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012336:	2b02      	cmp	r3, #2
 8012338:	dc41      	bgt.n	80123be <_dtoa_r+0x906>
 801233a:	e063      	b.n	8012404 <_dtoa_r+0x94c>
 801233c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801233e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012342:	e746      	b.n	80121d2 <_dtoa_r+0x71a>
 8012344:	9b07      	ldr	r3, [sp, #28]
 8012346:	1e5c      	subs	r4, r3, #1
 8012348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801234a:	42a3      	cmp	r3, r4
 801234c:	bfbf      	itttt	lt
 801234e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012350:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012352:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012354:	1ae3      	sublt	r3, r4, r3
 8012356:	bfb4      	ite	lt
 8012358:	18d2      	addlt	r2, r2, r3
 801235a:	1b1c      	subge	r4, r3, r4
 801235c:	9b07      	ldr	r3, [sp, #28]
 801235e:	bfbc      	itt	lt
 8012360:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012362:	2400      	movlt	r4, #0
 8012364:	2b00      	cmp	r3, #0
 8012366:	bfb5      	itete	lt
 8012368:	eba8 0603 	sublt.w	r6, r8, r3
 801236c:	9b07      	ldrge	r3, [sp, #28]
 801236e:	2300      	movlt	r3, #0
 8012370:	4646      	movge	r6, r8
 8012372:	e730      	b.n	80121d6 <_dtoa_r+0x71e>
 8012374:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012376:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012378:	4646      	mov	r6, r8
 801237a:	e735      	b.n	80121e8 <_dtoa_r+0x730>
 801237c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801237e:	e75c      	b.n	801223a <_dtoa_r+0x782>
 8012380:	2300      	movs	r3, #0
 8012382:	e788      	b.n	8012296 <_dtoa_r+0x7de>
 8012384:	3fe00000 	.word	0x3fe00000
 8012388:	40240000 	.word	0x40240000
 801238c:	40140000 	.word	0x40140000
 8012390:	9b02      	ldr	r3, [sp, #8]
 8012392:	e780      	b.n	8012296 <_dtoa_r+0x7de>
 8012394:	2300      	movs	r3, #0
 8012396:	930a      	str	r3, [sp, #40]	@ 0x28
 8012398:	e782      	b.n	80122a0 <_dtoa_r+0x7e8>
 801239a:	d099      	beq.n	80122d0 <_dtoa_r+0x818>
 801239c:	9a08      	ldr	r2, [sp, #32]
 801239e:	331c      	adds	r3, #28
 80123a0:	441a      	add	r2, r3
 80123a2:	4498      	add	r8, r3
 80123a4:	441e      	add	r6, r3
 80123a6:	9208      	str	r2, [sp, #32]
 80123a8:	e792      	b.n	80122d0 <_dtoa_r+0x818>
 80123aa:	4603      	mov	r3, r0
 80123ac:	e7f6      	b.n	801239c <_dtoa_r+0x8e4>
 80123ae:	9b07      	ldr	r3, [sp, #28]
 80123b0:	9704      	str	r7, [sp, #16]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	dc20      	bgt.n	80123f8 <_dtoa_r+0x940>
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	dd1e      	ble.n	80123fc <_dtoa_r+0x944>
 80123be:	9b00      	ldr	r3, [sp, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	f47f aec0 	bne.w	8012146 <_dtoa_r+0x68e>
 80123c6:	4621      	mov	r1, r4
 80123c8:	2205      	movs	r2, #5
 80123ca:	4658      	mov	r0, fp
 80123cc:	f000 fa9a 	bl	8012904 <__multadd>
 80123d0:	4601      	mov	r1, r0
 80123d2:	4604      	mov	r4, r0
 80123d4:	4648      	mov	r0, r9
 80123d6:	f000 fcad 	bl	8012d34 <__mcmp>
 80123da:	2800      	cmp	r0, #0
 80123dc:	f77f aeb3 	ble.w	8012146 <_dtoa_r+0x68e>
 80123e0:	4656      	mov	r6, sl
 80123e2:	2331      	movs	r3, #49	@ 0x31
 80123e4:	f806 3b01 	strb.w	r3, [r6], #1
 80123e8:	9b04      	ldr	r3, [sp, #16]
 80123ea:	3301      	adds	r3, #1
 80123ec:	9304      	str	r3, [sp, #16]
 80123ee:	e6ae      	b.n	801214e <_dtoa_r+0x696>
 80123f0:	9c07      	ldr	r4, [sp, #28]
 80123f2:	9704      	str	r7, [sp, #16]
 80123f4:	4625      	mov	r5, r4
 80123f6:	e7f3      	b.n	80123e0 <_dtoa_r+0x928>
 80123f8:	9b07      	ldr	r3, [sp, #28]
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f000 8104 	beq.w	801260c <_dtoa_r+0xb54>
 8012404:	2e00      	cmp	r6, #0
 8012406:	dd05      	ble.n	8012414 <_dtoa_r+0x95c>
 8012408:	4629      	mov	r1, r5
 801240a:	4632      	mov	r2, r6
 801240c:	4658      	mov	r0, fp
 801240e:	f000 fc25 	bl	8012c5c <__lshift>
 8012412:	4605      	mov	r5, r0
 8012414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012416:	2b00      	cmp	r3, #0
 8012418:	d05a      	beq.n	80124d0 <_dtoa_r+0xa18>
 801241a:	6869      	ldr	r1, [r5, #4]
 801241c:	4658      	mov	r0, fp
 801241e:	f000 fa0f 	bl	8012840 <_Balloc>
 8012422:	4606      	mov	r6, r0
 8012424:	b928      	cbnz	r0, 8012432 <_dtoa_r+0x97a>
 8012426:	4b84      	ldr	r3, [pc, #528]	@ (8012638 <_dtoa_r+0xb80>)
 8012428:	4602      	mov	r2, r0
 801242a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801242e:	f7ff bb5a 	b.w	8011ae6 <_dtoa_r+0x2e>
 8012432:	692a      	ldr	r2, [r5, #16]
 8012434:	3202      	adds	r2, #2
 8012436:	0092      	lsls	r2, r2, #2
 8012438:	f105 010c 	add.w	r1, r5, #12
 801243c:	300c      	adds	r0, #12
 801243e:	f7ff fa84 	bl	801194a <memcpy>
 8012442:	2201      	movs	r2, #1
 8012444:	4631      	mov	r1, r6
 8012446:	4658      	mov	r0, fp
 8012448:	f000 fc08 	bl	8012c5c <__lshift>
 801244c:	f10a 0301 	add.w	r3, sl, #1
 8012450:	9307      	str	r3, [sp, #28]
 8012452:	9b00      	ldr	r3, [sp, #0]
 8012454:	4453      	add	r3, sl
 8012456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012458:	9b02      	ldr	r3, [sp, #8]
 801245a:	f003 0301 	and.w	r3, r3, #1
 801245e:	462f      	mov	r7, r5
 8012460:	930a      	str	r3, [sp, #40]	@ 0x28
 8012462:	4605      	mov	r5, r0
 8012464:	9b07      	ldr	r3, [sp, #28]
 8012466:	4621      	mov	r1, r4
 8012468:	3b01      	subs	r3, #1
 801246a:	4648      	mov	r0, r9
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	f7ff fa99 	bl	80119a4 <quorem>
 8012472:	4639      	mov	r1, r7
 8012474:	9002      	str	r0, [sp, #8]
 8012476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801247a:	4648      	mov	r0, r9
 801247c:	f000 fc5a 	bl	8012d34 <__mcmp>
 8012480:	462a      	mov	r2, r5
 8012482:	9008      	str	r0, [sp, #32]
 8012484:	4621      	mov	r1, r4
 8012486:	4658      	mov	r0, fp
 8012488:	f000 fc70 	bl	8012d6c <__mdiff>
 801248c:	68c2      	ldr	r2, [r0, #12]
 801248e:	4606      	mov	r6, r0
 8012490:	bb02      	cbnz	r2, 80124d4 <_dtoa_r+0xa1c>
 8012492:	4601      	mov	r1, r0
 8012494:	4648      	mov	r0, r9
 8012496:	f000 fc4d 	bl	8012d34 <__mcmp>
 801249a:	4602      	mov	r2, r0
 801249c:	4631      	mov	r1, r6
 801249e:	4658      	mov	r0, fp
 80124a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80124a2:	f000 fa0d 	bl	80128c0 <_Bfree>
 80124a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124aa:	9e07      	ldr	r6, [sp, #28]
 80124ac:	ea43 0102 	orr.w	r1, r3, r2
 80124b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124b2:	4319      	orrs	r1, r3
 80124b4:	d110      	bne.n	80124d8 <_dtoa_r+0xa20>
 80124b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80124ba:	d029      	beq.n	8012510 <_dtoa_r+0xa58>
 80124bc:	9b08      	ldr	r3, [sp, #32]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	dd02      	ble.n	80124c8 <_dtoa_r+0xa10>
 80124c2:	9b02      	ldr	r3, [sp, #8]
 80124c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80124c8:	9b00      	ldr	r3, [sp, #0]
 80124ca:	f883 8000 	strb.w	r8, [r3]
 80124ce:	e63f      	b.n	8012150 <_dtoa_r+0x698>
 80124d0:	4628      	mov	r0, r5
 80124d2:	e7bb      	b.n	801244c <_dtoa_r+0x994>
 80124d4:	2201      	movs	r2, #1
 80124d6:	e7e1      	b.n	801249c <_dtoa_r+0x9e4>
 80124d8:	9b08      	ldr	r3, [sp, #32]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	db04      	blt.n	80124e8 <_dtoa_r+0xa30>
 80124de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80124e0:	430b      	orrs	r3, r1
 80124e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80124e4:	430b      	orrs	r3, r1
 80124e6:	d120      	bne.n	801252a <_dtoa_r+0xa72>
 80124e8:	2a00      	cmp	r2, #0
 80124ea:	dded      	ble.n	80124c8 <_dtoa_r+0xa10>
 80124ec:	4649      	mov	r1, r9
 80124ee:	2201      	movs	r2, #1
 80124f0:	4658      	mov	r0, fp
 80124f2:	f000 fbb3 	bl	8012c5c <__lshift>
 80124f6:	4621      	mov	r1, r4
 80124f8:	4681      	mov	r9, r0
 80124fa:	f000 fc1b 	bl	8012d34 <__mcmp>
 80124fe:	2800      	cmp	r0, #0
 8012500:	dc03      	bgt.n	801250a <_dtoa_r+0xa52>
 8012502:	d1e1      	bne.n	80124c8 <_dtoa_r+0xa10>
 8012504:	f018 0f01 	tst.w	r8, #1
 8012508:	d0de      	beq.n	80124c8 <_dtoa_r+0xa10>
 801250a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801250e:	d1d8      	bne.n	80124c2 <_dtoa_r+0xa0a>
 8012510:	9a00      	ldr	r2, [sp, #0]
 8012512:	2339      	movs	r3, #57	@ 0x39
 8012514:	7013      	strb	r3, [r2, #0]
 8012516:	4633      	mov	r3, r6
 8012518:	461e      	mov	r6, r3
 801251a:	3b01      	subs	r3, #1
 801251c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012520:	2a39      	cmp	r2, #57	@ 0x39
 8012522:	d052      	beq.n	80125ca <_dtoa_r+0xb12>
 8012524:	3201      	adds	r2, #1
 8012526:	701a      	strb	r2, [r3, #0]
 8012528:	e612      	b.n	8012150 <_dtoa_r+0x698>
 801252a:	2a00      	cmp	r2, #0
 801252c:	dd07      	ble.n	801253e <_dtoa_r+0xa86>
 801252e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012532:	d0ed      	beq.n	8012510 <_dtoa_r+0xa58>
 8012534:	9a00      	ldr	r2, [sp, #0]
 8012536:	f108 0301 	add.w	r3, r8, #1
 801253a:	7013      	strb	r3, [r2, #0]
 801253c:	e608      	b.n	8012150 <_dtoa_r+0x698>
 801253e:	9b07      	ldr	r3, [sp, #28]
 8012540:	9a07      	ldr	r2, [sp, #28]
 8012542:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012548:	4293      	cmp	r3, r2
 801254a:	d028      	beq.n	801259e <_dtoa_r+0xae6>
 801254c:	4649      	mov	r1, r9
 801254e:	2300      	movs	r3, #0
 8012550:	220a      	movs	r2, #10
 8012552:	4658      	mov	r0, fp
 8012554:	f000 f9d6 	bl	8012904 <__multadd>
 8012558:	42af      	cmp	r7, r5
 801255a:	4681      	mov	r9, r0
 801255c:	f04f 0300 	mov.w	r3, #0
 8012560:	f04f 020a 	mov.w	r2, #10
 8012564:	4639      	mov	r1, r7
 8012566:	4658      	mov	r0, fp
 8012568:	d107      	bne.n	801257a <_dtoa_r+0xac2>
 801256a:	f000 f9cb 	bl	8012904 <__multadd>
 801256e:	4607      	mov	r7, r0
 8012570:	4605      	mov	r5, r0
 8012572:	9b07      	ldr	r3, [sp, #28]
 8012574:	3301      	adds	r3, #1
 8012576:	9307      	str	r3, [sp, #28]
 8012578:	e774      	b.n	8012464 <_dtoa_r+0x9ac>
 801257a:	f000 f9c3 	bl	8012904 <__multadd>
 801257e:	4629      	mov	r1, r5
 8012580:	4607      	mov	r7, r0
 8012582:	2300      	movs	r3, #0
 8012584:	220a      	movs	r2, #10
 8012586:	4658      	mov	r0, fp
 8012588:	f000 f9bc 	bl	8012904 <__multadd>
 801258c:	4605      	mov	r5, r0
 801258e:	e7f0      	b.n	8012572 <_dtoa_r+0xaba>
 8012590:	9b00      	ldr	r3, [sp, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	bfcc      	ite	gt
 8012596:	461e      	movgt	r6, r3
 8012598:	2601      	movle	r6, #1
 801259a:	4456      	add	r6, sl
 801259c:	2700      	movs	r7, #0
 801259e:	4649      	mov	r1, r9
 80125a0:	2201      	movs	r2, #1
 80125a2:	4658      	mov	r0, fp
 80125a4:	f000 fb5a 	bl	8012c5c <__lshift>
 80125a8:	4621      	mov	r1, r4
 80125aa:	4681      	mov	r9, r0
 80125ac:	f000 fbc2 	bl	8012d34 <__mcmp>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	dcb0      	bgt.n	8012516 <_dtoa_r+0xa5e>
 80125b4:	d102      	bne.n	80125bc <_dtoa_r+0xb04>
 80125b6:	f018 0f01 	tst.w	r8, #1
 80125ba:	d1ac      	bne.n	8012516 <_dtoa_r+0xa5e>
 80125bc:	4633      	mov	r3, r6
 80125be:	461e      	mov	r6, r3
 80125c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125c4:	2a30      	cmp	r2, #48	@ 0x30
 80125c6:	d0fa      	beq.n	80125be <_dtoa_r+0xb06>
 80125c8:	e5c2      	b.n	8012150 <_dtoa_r+0x698>
 80125ca:	459a      	cmp	sl, r3
 80125cc:	d1a4      	bne.n	8012518 <_dtoa_r+0xa60>
 80125ce:	9b04      	ldr	r3, [sp, #16]
 80125d0:	3301      	adds	r3, #1
 80125d2:	9304      	str	r3, [sp, #16]
 80125d4:	2331      	movs	r3, #49	@ 0x31
 80125d6:	f88a 3000 	strb.w	r3, [sl]
 80125da:	e5b9      	b.n	8012150 <_dtoa_r+0x698>
 80125dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80125de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801263c <_dtoa_r+0xb84>
 80125e2:	b11b      	cbz	r3, 80125ec <_dtoa_r+0xb34>
 80125e4:	f10a 0308 	add.w	r3, sl, #8
 80125e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	4650      	mov	r0, sl
 80125ee:	b019      	add	sp, #100	@ 0x64
 80125f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	f77f ae37 	ble.w	801226a <_dtoa_r+0x7b2>
 80125fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012600:	2001      	movs	r0, #1
 8012602:	e655      	b.n	80122b0 <_dtoa_r+0x7f8>
 8012604:	9b00      	ldr	r3, [sp, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	f77f aed6 	ble.w	80123b8 <_dtoa_r+0x900>
 801260c:	4656      	mov	r6, sl
 801260e:	4621      	mov	r1, r4
 8012610:	4648      	mov	r0, r9
 8012612:	f7ff f9c7 	bl	80119a4 <quorem>
 8012616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801261a:	f806 8b01 	strb.w	r8, [r6], #1
 801261e:	9b00      	ldr	r3, [sp, #0]
 8012620:	eba6 020a 	sub.w	r2, r6, sl
 8012624:	4293      	cmp	r3, r2
 8012626:	ddb3      	ble.n	8012590 <_dtoa_r+0xad8>
 8012628:	4649      	mov	r1, r9
 801262a:	2300      	movs	r3, #0
 801262c:	220a      	movs	r2, #10
 801262e:	4658      	mov	r0, fp
 8012630:	f000 f968 	bl	8012904 <__multadd>
 8012634:	4681      	mov	r9, r0
 8012636:	e7ea      	b.n	801260e <_dtoa_r+0xb56>
 8012638:	08014c4d 	.word	0x08014c4d
 801263c:	08014bd1 	.word	0x08014bd1

08012640 <_free_r>:
 8012640:	b538      	push	{r3, r4, r5, lr}
 8012642:	4605      	mov	r5, r0
 8012644:	2900      	cmp	r1, #0
 8012646:	d041      	beq.n	80126cc <_free_r+0x8c>
 8012648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801264c:	1f0c      	subs	r4, r1, #4
 801264e:	2b00      	cmp	r3, #0
 8012650:	bfb8      	it	lt
 8012652:	18e4      	addlt	r4, r4, r3
 8012654:	f000 f8e8 	bl	8012828 <__malloc_lock>
 8012658:	4a1d      	ldr	r2, [pc, #116]	@ (80126d0 <_free_r+0x90>)
 801265a:	6813      	ldr	r3, [r2, #0]
 801265c:	b933      	cbnz	r3, 801266c <_free_r+0x2c>
 801265e:	6063      	str	r3, [r4, #4]
 8012660:	6014      	str	r4, [r2, #0]
 8012662:	4628      	mov	r0, r5
 8012664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012668:	f000 b8e4 	b.w	8012834 <__malloc_unlock>
 801266c:	42a3      	cmp	r3, r4
 801266e:	d908      	bls.n	8012682 <_free_r+0x42>
 8012670:	6820      	ldr	r0, [r4, #0]
 8012672:	1821      	adds	r1, r4, r0
 8012674:	428b      	cmp	r3, r1
 8012676:	bf01      	itttt	eq
 8012678:	6819      	ldreq	r1, [r3, #0]
 801267a:	685b      	ldreq	r3, [r3, #4]
 801267c:	1809      	addeq	r1, r1, r0
 801267e:	6021      	streq	r1, [r4, #0]
 8012680:	e7ed      	b.n	801265e <_free_r+0x1e>
 8012682:	461a      	mov	r2, r3
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	b10b      	cbz	r3, 801268c <_free_r+0x4c>
 8012688:	42a3      	cmp	r3, r4
 801268a:	d9fa      	bls.n	8012682 <_free_r+0x42>
 801268c:	6811      	ldr	r1, [r2, #0]
 801268e:	1850      	adds	r0, r2, r1
 8012690:	42a0      	cmp	r0, r4
 8012692:	d10b      	bne.n	80126ac <_free_r+0x6c>
 8012694:	6820      	ldr	r0, [r4, #0]
 8012696:	4401      	add	r1, r0
 8012698:	1850      	adds	r0, r2, r1
 801269a:	4283      	cmp	r3, r0
 801269c:	6011      	str	r1, [r2, #0]
 801269e:	d1e0      	bne.n	8012662 <_free_r+0x22>
 80126a0:	6818      	ldr	r0, [r3, #0]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	6053      	str	r3, [r2, #4]
 80126a6:	4408      	add	r0, r1
 80126a8:	6010      	str	r0, [r2, #0]
 80126aa:	e7da      	b.n	8012662 <_free_r+0x22>
 80126ac:	d902      	bls.n	80126b4 <_free_r+0x74>
 80126ae:	230c      	movs	r3, #12
 80126b0:	602b      	str	r3, [r5, #0]
 80126b2:	e7d6      	b.n	8012662 <_free_r+0x22>
 80126b4:	6820      	ldr	r0, [r4, #0]
 80126b6:	1821      	adds	r1, r4, r0
 80126b8:	428b      	cmp	r3, r1
 80126ba:	bf04      	itt	eq
 80126bc:	6819      	ldreq	r1, [r3, #0]
 80126be:	685b      	ldreq	r3, [r3, #4]
 80126c0:	6063      	str	r3, [r4, #4]
 80126c2:	bf04      	itt	eq
 80126c4:	1809      	addeq	r1, r1, r0
 80126c6:	6021      	streq	r1, [r4, #0]
 80126c8:	6054      	str	r4, [r2, #4]
 80126ca:	e7ca      	b.n	8012662 <_free_r+0x22>
 80126cc:	bd38      	pop	{r3, r4, r5, pc}
 80126ce:	bf00      	nop
 80126d0:	2000cca0 	.word	0x2000cca0

080126d4 <malloc>:
 80126d4:	4b02      	ldr	r3, [pc, #8]	@ (80126e0 <malloc+0xc>)
 80126d6:	4601      	mov	r1, r0
 80126d8:	6818      	ldr	r0, [r3, #0]
 80126da:	f000 b825 	b.w	8012728 <_malloc_r>
 80126de:	bf00      	nop
 80126e0:	2000029c 	.word	0x2000029c

080126e4 <sbrk_aligned>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	4e0f      	ldr	r6, [pc, #60]	@ (8012724 <sbrk_aligned+0x40>)
 80126e8:	460c      	mov	r4, r1
 80126ea:	6831      	ldr	r1, [r6, #0]
 80126ec:	4605      	mov	r5, r0
 80126ee:	b911      	cbnz	r1, 80126f6 <sbrk_aligned+0x12>
 80126f0:	f000 feec 	bl	80134cc <_sbrk_r>
 80126f4:	6030      	str	r0, [r6, #0]
 80126f6:	4621      	mov	r1, r4
 80126f8:	4628      	mov	r0, r5
 80126fa:	f000 fee7 	bl	80134cc <_sbrk_r>
 80126fe:	1c43      	adds	r3, r0, #1
 8012700:	d103      	bne.n	801270a <sbrk_aligned+0x26>
 8012702:	f04f 34ff 	mov.w	r4, #4294967295
 8012706:	4620      	mov	r0, r4
 8012708:	bd70      	pop	{r4, r5, r6, pc}
 801270a:	1cc4      	adds	r4, r0, #3
 801270c:	f024 0403 	bic.w	r4, r4, #3
 8012710:	42a0      	cmp	r0, r4
 8012712:	d0f8      	beq.n	8012706 <sbrk_aligned+0x22>
 8012714:	1a21      	subs	r1, r4, r0
 8012716:	4628      	mov	r0, r5
 8012718:	f000 fed8 	bl	80134cc <_sbrk_r>
 801271c:	3001      	adds	r0, #1
 801271e:	d1f2      	bne.n	8012706 <sbrk_aligned+0x22>
 8012720:	e7ef      	b.n	8012702 <sbrk_aligned+0x1e>
 8012722:	bf00      	nop
 8012724:	2000cc9c 	.word	0x2000cc9c

08012728 <_malloc_r>:
 8012728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801272c:	1ccd      	adds	r5, r1, #3
 801272e:	f025 0503 	bic.w	r5, r5, #3
 8012732:	3508      	adds	r5, #8
 8012734:	2d0c      	cmp	r5, #12
 8012736:	bf38      	it	cc
 8012738:	250c      	movcc	r5, #12
 801273a:	2d00      	cmp	r5, #0
 801273c:	4606      	mov	r6, r0
 801273e:	db01      	blt.n	8012744 <_malloc_r+0x1c>
 8012740:	42a9      	cmp	r1, r5
 8012742:	d904      	bls.n	801274e <_malloc_r+0x26>
 8012744:	230c      	movs	r3, #12
 8012746:	6033      	str	r3, [r6, #0]
 8012748:	2000      	movs	r0, #0
 801274a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801274e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012824 <_malloc_r+0xfc>
 8012752:	f000 f869 	bl	8012828 <__malloc_lock>
 8012756:	f8d8 3000 	ldr.w	r3, [r8]
 801275a:	461c      	mov	r4, r3
 801275c:	bb44      	cbnz	r4, 80127b0 <_malloc_r+0x88>
 801275e:	4629      	mov	r1, r5
 8012760:	4630      	mov	r0, r6
 8012762:	f7ff ffbf 	bl	80126e4 <sbrk_aligned>
 8012766:	1c43      	adds	r3, r0, #1
 8012768:	4604      	mov	r4, r0
 801276a:	d158      	bne.n	801281e <_malloc_r+0xf6>
 801276c:	f8d8 4000 	ldr.w	r4, [r8]
 8012770:	4627      	mov	r7, r4
 8012772:	2f00      	cmp	r7, #0
 8012774:	d143      	bne.n	80127fe <_malloc_r+0xd6>
 8012776:	2c00      	cmp	r4, #0
 8012778:	d04b      	beq.n	8012812 <_malloc_r+0xea>
 801277a:	6823      	ldr	r3, [r4, #0]
 801277c:	4639      	mov	r1, r7
 801277e:	4630      	mov	r0, r6
 8012780:	eb04 0903 	add.w	r9, r4, r3
 8012784:	f000 fea2 	bl	80134cc <_sbrk_r>
 8012788:	4581      	cmp	r9, r0
 801278a:	d142      	bne.n	8012812 <_malloc_r+0xea>
 801278c:	6821      	ldr	r1, [r4, #0]
 801278e:	1a6d      	subs	r5, r5, r1
 8012790:	4629      	mov	r1, r5
 8012792:	4630      	mov	r0, r6
 8012794:	f7ff ffa6 	bl	80126e4 <sbrk_aligned>
 8012798:	3001      	adds	r0, #1
 801279a:	d03a      	beq.n	8012812 <_malloc_r+0xea>
 801279c:	6823      	ldr	r3, [r4, #0]
 801279e:	442b      	add	r3, r5
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	f8d8 3000 	ldr.w	r3, [r8]
 80127a6:	685a      	ldr	r2, [r3, #4]
 80127a8:	bb62      	cbnz	r2, 8012804 <_malloc_r+0xdc>
 80127aa:	f8c8 7000 	str.w	r7, [r8]
 80127ae:	e00f      	b.n	80127d0 <_malloc_r+0xa8>
 80127b0:	6822      	ldr	r2, [r4, #0]
 80127b2:	1b52      	subs	r2, r2, r5
 80127b4:	d420      	bmi.n	80127f8 <_malloc_r+0xd0>
 80127b6:	2a0b      	cmp	r2, #11
 80127b8:	d917      	bls.n	80127ea <_malloc_r+0xc2>
 80127ba:	1961      	adds	r1, r4, r5
 80127bc:	42a3      	cmp	r3, r4
 80127be:	6025      	str	r5, [r4, #0]
 80127c0:	bf18      	it	ne
 80127c2:	6059      	strne	r1, [r3, #4]
 80127c4:	6863      	ldr	r3, [r4, #4]
 80127c6:	bf08      	it	eq
 80127c8:	f8c8 1000 	streq.w	r1, [r8]
 80127cc:	5162      	str	r2, [r4, r5]
 80127ce:	604b      	str	r3, [r1, #4]
 80127d0:	4630      	mov	r0, r6
 80127d2:	f000 f82f 	bl	8012834 <__malloc_unlock>
 80127d6:	f104 000b 	add.w	r0, r4, #11
 80127da:	1d23      	adds	r3, r4, #4
 80127dc:	f020 0007 	bic.w	r0, r0, #7
 80127e0:	1ac2      	subs	r2, r0, r3
 80127e2:	bf1c      	itt	ne
 80127e4:	1a1b      	subne	r3, r3, r0
 80127e6:	50a3      	strne	r3, [r4, r2]
 80127e8:	e7af      	b.n	801274a <_malloc_r+0x22>
 80127ea:	6862      	ldr	r2, [r4, #4]
 80127ec:	42a3      	cmp	r3, r4
 80127ee:	bf0c      	ite	eq
 80127f0:	f8c8 2000 	streq.w	r2, [r8]
 80127f4:	605a      	strne	r2, [r3, #4]
 80127f6:	e7eb      	b.n	80127d0 <_malloc_r+0xa8>
 80127f8:	4623      	mov	r3, r4
 80127fa:	6864      	ldr	r4, [r4, #4]
 80127fc:	e7ae      	b.n	801275c <_malloc_r+0x34>
 80127fe:	463c      	mov	r4, r7
 8012800:	687f      	ldr	r7, [r7, #4]
 8012802:	e7b6      	b.n	8012772 <_malloc_r+0x4a>
 8012804:	461a      	mov	r2, r3
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	42a3      	cmp	r3, r4
 801280a:	d1fb      	bne.n	8012804 <_malloc_r+0xdc>
 801280c:	2300      	movs	r3, #0
 801280e:	6053      	str	r3, [r2, #4]
 8012810:	e7de      	b.n	80127d0 <_malloc_r+0xa8>
 8012812:	230c      	movs	r3, #12
 8012814:	6033      	str	r3, [r6, #0]
 8012816:	4630      	mov	r0, r6
 8012818:	f000 f80c 	bl	8012834 <__malloc_unlock>
 801281c:	e794      	b.n	8012748 <_malloc_r+0x20>
 801281e:	6005      	str	r5, [r0, #0]
 8012820:	e7d6      	b.n	80127d0 <_malloc_r+0xa8>
 8012822:	bf00      	nop
 8012824:	2000cca0 	.word	0x2000cca0

08012828 <__malloc_lock>:
 8012828:	4801      	ldr	r0, [pc, #4]	@ (8012830 <__malloc_lock+0x8>)
 801282a:	f7ff b884 	b.w	8011936 <__retarget_lock_acquire_recursive>
 801282e:	bf00      	nop
 8012830:	2000cc98 	.word	0x2000cc98

08012834 <__malloc_unlock>:
 8012834:	4801      	ldr	r0, [pc, #4]	@ (801283c <__malloc_unlock+0x8>)
 8012836:	f7ff b87f 	b.w	8011938 <__retarget_lock_release_recursive>
 801283a:	bf00      	nop
 801283c:	2000cc98 	.word	0x2000cc98

08012840 <_Balloc>:
 8012840:	b570      	push	{r4, r5, r6, lr}
 8012842:	69c6      	ldr	r6, [r0, #28]
 8012844:	4604      	mov	r4, r0
 8012846:	460d      	mov	r5, r1
 8012848:	b976      	cbnz	r6, 8012868 <_Balloc+0x28>
 801284a:	2010      	movs	r0, #16
 801284c:	f7ff ff42 	bl	80126d4 <malloc>
 8012850:	4602      	mov	r2, r0
 8012852:	61e0      	str	r0, [r4, #28]
 8012854:	b920      	cbnz	r0, 8012860 <_Balloc+0x20>
 8012856:	4b18      	ldr	r3, [pc, #96]	@ (80128b8 <_Balloc+0x78>)
 8012858:	4818      	ldr	r0, [pc, #96]	@ (80128bc <_Balloc+0x7c>)
 801285a:	216b      	movs	r1, #107	@ 0x6b
 801285c:	f7ff f884 	bl	8011968 <__assert_func>
 8012860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012864:	6006      	str	r6, [r0, #0]
 8012866:	60c6      	str	r6, [r0, #12]
 8012868:	69e6      	ldr	r6, [r4, #28]
 801286a:	68f3      	ldr	r3, [r6, #12]
 801286c:	b183      	cbz	r3, 8012890 <_Balloc+0x50>
 801286e:	69e3      	ldr	r3, [r4, #28]
 8012870:	68db      	ldr	r3, [r3, #12]
 8012872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012876:	b9b8      	cbnz	r0, 80128a8 <_Balloc+0x68>
 8012878:	2101      	movs	r1, #1
 801287a:	fa01 f605 	lsl.w	r6, r1, r5
 801287e:	1d72      	adds	r2, r6, #5
 8012880:	0092      	lsls	r2, r2, #2
 8012882:	4620      	mov	r0, r4
 8012884:	f000 fe39 	bl	80134fa <_calloc_r>
 8012888:	b160      	cbz	r0, 80128a4 <_Balloc+0x64>
 801288a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801288e:	e00e      	b.n	80128ae <_Balloc+0x6e>
 8012890:	2221      	movs	r2, #33	@ 0x21
 8012892:	2104      	movs	r1, #4
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fe30 	bl	80134fa <_calloc_r>
 801289a:	69e3      	ldr	r3, [r4, #28]
 801289c:	60f0      	str	r0, [r6, #12]
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d1e4      	bne.n	801286e <_Balloc+0x2e>
 80128a4:	2000      	movs	r0, #0
 80128a6:	bd70      	pop	{r4, r5, r6, pc}
 80128a8:	6802      	ldr	r2, [r0, #0]
 80128aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80128ae:	2300      	movs	r3, #0
 80128b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80128b4:	e7f7      	b.n	80128a6 <_Balloc+0x66>
 80128b6:	bf00      	nop
 80128b8:	08014bde 	.word	0x08014bde
 80128bc:	08014c5e 	.word	0x08014c5e

080128c0 <_Bfree>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	69c6      	ldr	r6, [r0, #28]
 80128c4:	4605      	mov	r5, r0
 80128c6:	460c      	mov	r4, r1
 80128c8:	b976      	cbnz	r6, 80128e8 <_Bfree+0x28>
 80128ca:	2010      	movs	r0, #16
 80128cc:	f7ff ff02 	bl	80126d4 <malloc>
 80128d0:	4602      	mov	r2, r0
 80128d2:	61e8      	str	r0, [r5, #28]
 80128d4:	b920      	cbnz	r0, 80128e0 <_Bfree+0x20>
 80128d6:	4b09      	ldr	r3, [pc, #36]	@ (80128fc <_Bfree+0x3c>)
 80128d8:	4809      	ldr	r0, [pc, #36]	@ (8012900 <_Bfree+0x40>)
 80128da:	218f      	movs	r1, #143	@ 0x8f
 80128dc:	f7ff f844 	bl	8011968 <__assert_func>
 80128e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128e4:	6006      	str	r6, [r0, #0]
 80128e6:	60c6      	str	r6, [r0, #12]
 80128e8:	b13c      	cbz	r4, 80128fa <_Bfree+0x3a>
 80128ea:	69eb      	ldr	r3, [r5, #28]
 80128ec:	6862      	ldr	r2, [r4, #4]
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128f4:	6021      	str	r1, [r4, #0]
 80128f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80128fa:	bd70      	pop	{r4, r5, r6, pc}
 80128fc:	08014bde 	.word	0x08014bde
 8012900:	08014c5e 	.word	0x08014c5e

08012904 <__multadd>:
 8012904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012908:	690d      	ldr	r5, [r1, #16]
 801290a:	4607      	mov	r7, r0
 801290c:	460c      	mov	r4, r1
 801290e:	461e      	mov	r6, r3
 8012910:	f101 0c14 	add.w	ip, r1, #20
 8012914:	2000      	movs	r0, #0
 8012916:	f8dc 3000 	ldr.w	r3, [ip]
 801291a:	b299      	uxth	r1, r3
 801291c:	fb02 6101 	mla	r1, r2, r1, r6
 8012920:	0c1e      	lsrs	r6, r3, #16
 8012922:	0c0b      	lsrs	r3, r1, #16
 8012924:	fb02 3306 	mla	r3, r2, r6, r3
 8012928:	b289      	uxth	r1, r1
 801292a:	3001      	adds	r0, #1
 801292c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012930:	4285      	cmp	r5, r0
 8012932:	f84c 1b04 	str.w	r1, [ip], #4
 8012936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801293a:	dcec      	bgt.n	8012916 <__multadd+0x12>
 801293c:	b30e      	cbz	r6, 8012982 <__multadd+0x7e>
 801293e:	68a3      	ldr	r3, [r4, #8]
 8012940:	42ab      	cmp	r3, r5
 8012942:	dc19      	bgt.n	8012978 <__multadd+0x74>
 8012944:	6861      	ldr	r1, [r4, #4]
 8012946:	4638      	mov	r0, r7
 8012948:	3101      	adds	r1, #1
 801294a:	f7ff ff79 	bl	8012840 <_Balloc>
 801294e:	4680      	mov	r8, r0
 8012950:	b928      	cbnz	r0, 801295e <__multadd+0x5a>
 8012952:	4602      	mov	r2, r0
 8012954:	4b0c      	ldr	r3, [pc, #48]	@ (8012988 <__multadd+0x84>)
 8012956:	480d      	ldr	r0, [pc, #52]	@ (801298c <__multadd+0x88>)
 8012958:	21ba      	movs	r1, #186	@ 0xba
 801295a:	f7ff f805 	bl	8011968 <__assert_func>
 801295e:	6922      	ldr	r2, [r4, #16]
 8012960:	3202      	adds	r2, #2
 8012962:	f104 010c 	add.w	r1, r4, #12
 8012966:	0092      	lsls	r2, r2, #2
 8012968:	300c      	adds	r0, #12
 801296a:	f7fe ffee 	bl	801194a <memcpy>
 801296e:	4621      	mov	r1, r4
 8012970:	4638      	mov	r0, r7
 8012972:	f7ff ffa5 	bl	80128c0 <_Bfree>
 8012976:	4644      	mov	r4, r8
 8012978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801297c:	3501      	adds	r5, #1
 801297e:	615e      	str	r6, [r3, #20]
 8012980:	6125      	str	r5, [r4, #16]
 8012982:	4620      	mov	r0, r4
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012988:	08014c4d 	.word	0x08014c4d
 801298c:	08014c5e 	.word	0x08014c5e

08012990 <__hi0bits>:
 8012990:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012994:	4603      	mov	r3, r0
 8012996:	bf36      	itet	cc
 8012998:	0403      	lslcc	r3, r0, #16
 801299a:	2000      	movcs	r0, #0
 801299c:	2010      	movcc	r0, #16
 801299e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129a2:	bf3c      	itt	cc
 80129a4:	021b      	lslcc	r3, r3, #8
 80129a6:	3008      	addcc	r0, #8
 80129a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129ac:	bf3c      	itt	cc
 80129ae:	011b      	lslcc	r3, r3, #4
 80129b0:	3004      	addcc	r0, #4
 80129b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129b6:	bf3c      	itt	cc
 80129b8:	009b      	lslcc	r3, r3, #2
 80129ba:	3002      	addcc	r0, #2
 80129bc:	2b00      	cmp	r3, #0
 80129be:	db05      	blt.n	80129cc <__hi0bits+0x3c>
 80129c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80129c4:	f100 0001 	add.w	r0, r0, #1
 80129c8:	bf08      	it	eq
 80129ca:	2020      	moveq	r0, #32
 80129cc:	4770      	bx	lr

080129ce <__lo0bits>:
 80129ce:	6803      	ldr	r3, [r0, #0]
 80129d0:	4602      	mov	r2, r0
 80129d2:	f013 0007 	ands.w	r0, r3, #7
 80129d6:	d00b      	beq.n	80129f0 <__lo0bits+0x22>
 80129d8:	07d9      	lsls	r1, r3, #31
 80129da:	d421      	bmi.n	8012a20 <__lo0bits+0x52>
 80129dc:	0798      	lsls	r0, r3, #30
 80129de:	bf49      	itett	mi
 80129e0:	085b      	lsrmi	r3, r3, #1
 80129e2:	089b      	lsrpl	r3, r3, #2
 80129e4:	2001      	movmi	r0, #1
 80129e6:	6013      	strmi	r3, [r2, #0]
 80129e8:	bf5c      	itt	pl
 80129ea:	6013      	strpl	r3, [r2, #0]
 80129ec:	2002      	movpl	r0, #2
 80129ee:	4770      	bx	lr
 80129f0:	b299      	uxth	r1, r3
 80129f2:	b909      	cbnz	r1, 80129f8 <__lo0bits+0x2a>
 80129f4:	0c1b      	lsrs	r3, r3, #16
 80129f6:	2010      	movs	r0, #16
 80129f8:	b2d9      	uxtb	r1, r3
 80129fa:	b909      	cbnz	r1, 8012a00 <__lo0bits+0x32>
 80129fc:	3008      	adds	r0, #8
 80129fe:	0a1b      	lsrs	r3, r3, #8
 8012a00:	0719      	lsls	r1, r3, #28
 8012a02:	bf04      	itt	eq
 8012a04:	091b      	lsreq	r3, r3, #4
 8012a06:	3004      	addeq	r0, #4
 8012a08:	0799      	lsls	r1, r3, #30
 8012a0a:	bf04      	itt	eq
 8012a0c:	089b      	lsreq	r3, r3, #2
 8012a0e:	3002      	addeq	r0, #2
 8012a10:	07d9      	lsls	r1, r3, #31
 8012a12:	d403      	bmi.n	8012a1c <__lo0bits+0x4e>
 8012a14:	085b      	lsrs	r3, r3, #1
 8012a16:	f100 0001 	add.w	r0, r0, #1
 8012a1a:	d003      	beq.n	8012a24 <__lo0bits+0x56>
 8012a1c:	6013      	str	r3, [r2, #0]
 8012a1e:	4770      	bx	lr
 8012a20:	2000      	movs	r0, #0
 8012a22:	4770      	bx	lr
 8012a24:	2020      	movs	r0, #32
 8012a26:	4770      	bx	lr

08012a28 <__i2b>:
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	f7ff ff07 	bl	8012840 <_Balloc>
 8012a32:	4602      	mov	r2, r0
 8012a34:	b928      	cbnz	r0, 8012a42 <__i2b+0x1a>
 8012a36:	4b05      	ldr	r3, [pc, #20]	@ (8012a4c <__i2b+0x24>)
 8012a38:	4805      	ldr	r0, [pc, #20]	@ (8012a50 <__i2b+0x28>)
 8012a3a:	f240 1145 	movw	r1, #325	@ 0x145
 8012a3e:	f7fe ff93 	bl	8011968 <__assert_func>
 8012a42:	2301      	movs	r3, #1
 8012a44:	6144      	str	r4, [r0, #20]
 8012a46:	6103      	str	r3, [r0, #16]
 8012a48:	bd10      	pop	{r4, pc}
 8012a4a:	bf00      	nop
 8012a4c:	08014c4d 	.word	0x08014c4d
 8012a50:	08014c5e 	.word	0x08014c5e

08012a54 <__multiply>:
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	4614      	mov	r4, r2
 8012a5a:	690a      	ldr	r2, [r1, #16]
 8012a5c:	6923      	ldr	r3, [r4, #16]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	bfa8      	it	ge
 8012a62:	4623      	movge	r3, r4
 8012a64:	460f      	mov	r7, r1
 8012a66:	bfa4      	itt	ge
 8012a68:	460c      	movge	r4, r1
 8012a6a:	461f      	movge	r7, r3
 8012a6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012a70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012a74:	68a3      	ldr	r3, [r4, #8]
 8012a76:	6861      	ldr	r1, [r4, #4]
 8012a78:	eb0a 0609 	add.w	r6, sl, r9
 8012a7c:	42b3      	cmp	r3, r6
 8012a7e:	b085      	sub	sp, #20
 8012a80:	bfb8      	it	lt
 8012a82:	3101      	addlt	r1, #1
 8012a84:	f7ff fedc 	bl	8012840 <_Balloc>
 8012a88:	b930      	cbnz	r0, 8012a98 <__multiply+0x44>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	4b44      	ldr	r3, [pc, #272]	@ (8012ba0 <__multiply+0x14c>)
 8012a8e:	4845      	ldr	r0, [pc, #276]	@ (8012ba4 <__multiply+0x150>)
 8012a90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a94:	f7fe ff68 	bl	8011968 <__assert_func>
 8012a98:	f100 0514 	add.w	r5, r0, #20
 8012a9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012aa0:	462b      	mov	r3, r5
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	4543      	cmp	r3, r8
 8012aa6:	d321      	bcc.n	8012aec <__multiply+0x98>
 8012aa8:	f107 0114 	add.w	r1, r7, #20
 8012aac:	f104 0214 	add.w	r2, r4, #20
 8012ab0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012ab4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012ab8:	9302      	str	r3, [sp, #8]
 8012aba:	1b13      	subs	r3, r2, r4
 8012abc:	3b15      	subs	r3, #21
 8012abe:	f023 0303 	bic.w	r3, r3, #3
 8012ac2:	3304      	adds	r3, #4
 8012ac4:	f104 0715 	add.w	r7, r4, #21
 8012ac8:	42ba      	cmp	r2, r7
 8012aca:	bf38      	it	cc
 8012acc:	2304      	movcc	r3, #4
 8012ace:	9301      	str	r3, [sp, #4]
 8012ad0:	9b02      	ldr	r3, [sp, #8]
 8012ad2:	9103      	str	r1, [sp, #12]
 8012ad4:	428b      	cmp	r3, r1
 8012ad6:	d80c      	bhi.n	8012af2 <__multiply+0x9e>
 8012ad8:	2e00      	cmp	r6, #0
 8012ada:	dd03      	ble.n	8012ae4 <__multiply+0x90>
 8012adc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d05b      	beq.n	8012b9c <__multiply+0x148>
 8012ae4:	6106      	str	r6, [r0, #16]
 8012ae6:	b005      	add	sp, #20
 8012ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aec:	f843 2b04 	str.w	r2, [r3], #4
 8012af0:	e7d8      	b.n	8012aa4 <__multiply+0x50>
 8012af2:	f8b1 a000 	ldrh.w	sl, [r1]
 8012af6:	f1ba 0f00 	cmp.w	sl, #0
 8012afa:	d024      	beq.n	8012b46 <__multiply+0xf2>
 8012afc:	f104 0e14 	add.w	lr, r4, #20
 8012b00:	46a9      	mov	r9, r5
 8012b02:	f04f 0c00 	mov.w	ip, #0
 8012b06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012b0a:	f8d9 3000 	ldr.w	r3, [r9]
 8012b0e:	fa1f fb87 	uxth.w	fp, r7
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	fb0a 330b 	mla	r3, sl, fp, r3
 8012b18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012b1c:	f8d9 7000 	ldr.w	r7, [r9]
 8012b20:	4463      	add	r3, ip
 8012b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b26:	fb0a c70b 	mla	r7, sl, fp, ip
 8012b2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b34:	4572      	cmp	r2, lr
 8012b36:	f849 3b04 	str.w	r3, [r9], #4
 8012b3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b3e:	d8e2      	bhi.n	8012b06 <__multiply+0xb2>
 8012b40:	9b01      	ldr	r3, [sp, #4]
 8012b42:	f845 c003 	str.w	ip, [r5, r3]
 8012b46:	9b03      	ldr	r3, [sp, #12]
 8012b48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012b4c:	3104      	adds	r1, #4
 8012b4e:	f1b9 0f00 	cmp.w	r9, #0
 8012b52:	d021      	beq.n	8012b98 <__multiply+0x144>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	f104 0c14 	add.w	ip, r4, #20
 8012b5a:	46ae      	mov	lr, r5
 8012b5c:	f04f 0a00 	mov.w	sl, #0
 8012b60:	f8bc b000 	ldrh.w	fp, [ip]
 8012b64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012b68:	fb09 770b 	mla	r7, r9, fp, r7
 8012b6c:	4457      	add	r7, sl
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b74:	f84e 3b04 	str.w	r3, [lr], #4
 8012b78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b80:	f8be 3000 	ldrh.w	r3, [lr]
 8012b84:	fb09 330a 	mla	r3, r9, sl, r3
 8012b88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012b8c:	4562      	cmp	r2, ip
 8012b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b92:	d8e5      	bhi.n	8012b60 <__multiply+0x10c>
 8012b94:	9f01      	ldr	r7, [sp, #4]
 8012b96:	51eb      	str	r3, [r5, r7]
 8012b98:	3504      	adds	r5, #4
 8012b9a:	e799      	b.n	8012ad0 <__multiply+0x7c>
 8012b9c:	3e01      	subs	r6, #1
 8012b9e:	e79b      	b.n	8012ad8 <__multiply+0x84>
 8012ba0:	08014c4d 	.word	0x08014c4d
 8012ba4:	08014c5e 	.word	0x08014c5e

08012ba8 <__pow5mult>:
 8012ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bac:	4615      	mov	r5, r2
 8012bae:	f012 0203 	ands.w	r2, r2, #3
 8012bb2:	4607      	mov	r7, r0
 8012bb4:	460e      	mov	r6, r1
 8012bb6:	d007      	beq.n	8012bc8 <__pow5mult+0x20>
 8012bb8:	4c25      	ldr	r4, [pc, #148]	@ (8012c50 <__pow5mult+0xa8>)
 8012bba:	3a01      	subs	r2, #1
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012bc2:	f7ff fe9f 	bl	8012904 <__multadd>
 8012bc6:	4606      	mov	r6, r0
 8012bc8:	10ad      	asrs	r5, r5, #2
 8012bca:	d03d      	beq.n	8012c48 <__pow5mult+0xa0>
 8012bcc:	69fc      	ldr	r4, [r7, #28]
 8012bce:	b97c      	cbnz	r4, 8012bf0 <__pow5mult+0x48>
 8012bd0:	2010      	movs	r0, #16
 8012bd2:	f7ff fd7f 	bl	80126d4 <malloc>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	61f8      	str	r0, [r7, #28]
 8012bda:	b928      	cbnz	r0, 8012be8 <__pow5mult+0x40>
 8012bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8012c54 <__pow5mult+0xac>)
 8012bde:	481e      	ldr	r0, [pc, #120]	@ (8012c58 <__pow5mult+0xb0>)
 8012be0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012be4:	f7fe fec0 	bl	8011968 <__assert_func>
 8012be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012bec:	6004      	str	r4, [r0, #0]
 8012bee:	60c4      	str	r4, [r0, #12]
 8012bf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012bf8:	b94c      	cbnz	r4, 8012c0e <__pow5mult+0x66>
 8012bfa:	f240 2171 	movw	r1, #625	@ 0x271
 8012bfe:	4638      	mov	r0, r7
 8012c00:	f7ff ff12 	bl	8012a28 <__i2b>
 8012c04:	2300      	movs	r3, #0
 8012c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	6003      	str	r3, [r0, #0]
 8012c0e:	f04f 0900 	mov.w	r9, #0
 8012c12:	07eb      	lsls	r3, r5, #31
 8012c14:	d50a      	bpl.n	8012c2c <__pow5mult+0x84>
 8012c16:	4631      	mov	r1, r6
 8012c18:	4622      	mov	r2, r4
 8012c1a:	4638      	mov	r0, r7
 8012c1c:	f7ff ff1a 	bl	8012a54 <__multiply>
 8012c20:	4631      	mov	r1, r6
 8012c22:	4680      	mov	r8, r0
 8012c24:	4638      	mov	r0, r7
 8012c26:	f7ff fe4b 	bl	80128c0 <_Bfree>
 8012c2a:	4646      	mov	r6, r8
 8012c2c:	106d      	asrs	r5, r5, #1
 8012c2e:	d00b      	beq.n	8012c48 <__pow5mult+0xa0>
 8012c30:	6820      	ldr	r0, [r4, #0]
 8012c32:	b938      	cbnz	r0, 8012c44 <__pow5mult+0x9c>
 8012c34:	4622      	mov	r2, r4
 8012c36:	4621      	mov	r1, r4
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f7ff ff0b 	bl	8012a54 <__multiply>
 8012c3e:	6020      	str	r0, [r4, #0]
 8012c40:	f8c0 9000 	str.w	r9, [r0]
 8012c44:	4604      	mov	r4, r0
 8012c46:	e7e4      	b.n	8012c12 <__pow5mult+0x6a>
 8012c48:	4630      	mov	r0, r6
 8012c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c4e:	bf00      	nop
 8012c50:	08014cb8 	.word	0x08014cb8
 8012c54:	08014bde 	.word	0x08014bde
 8012c58:	08014c5e 	.word	0x08014c5e

08012c5c <__lshift>:
 8012c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c60:	460c      	mov	r4, r1
 8012c62:	6849      	ldr	r1, [r1, #4]
 8012c64:	6923      	ldr	r3, [r4, #16]
 8012c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c6a:	68a3      	ldr	r3, [r4, #8]
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	4691      	mov	r9, r2
 8012c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c74:	f108 0601 	add.w	r6, r8, #1
 8012c78:	42b3      	cmp	r3, r6
 8012c7a:	db0b      	blt.n	8012c94 <__lshift+0x38>
 8012c7c:	4638      	mov	r0, r7
 8012c7e:	f7ff fddf 	bl	8012840 <_Balloc>
 8012c82:	4605      	mov	r5, r0
 8012c84:	b948      	cbnz	r0, 8012c9a <__lshift+0x3e>
 8012c86:	4602      	mov	r2, r0
 8012c88:	4b28      	ldr	r3, [pc, #160]	@ (8012d2c <__lshift+0xd0>)
 8012c8a:	4829      	ldr	r0, [pc, #164]	@ (8012d30 <__lshift+0xd4>)
 8012c8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c90:	f7fe fe6a 	bl	8011968 <__assert_func>
 8012c94:	3101      	adds	r1, #1
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	e7ee      	b.n	8012c78 <__lshift+0x1c>
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	f100 0114 	add.w	r1, r0, #20
 8012ca0:	f100 0210 	add.w	r2, r0, #16
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	4553      	cmp	r3, sl
 8012ca8:	db33      	blt.n	8012d12 <__lshift+0xb6>
 8012caa:	6920      	ldr	r0, [r4, #16]
 8012cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cb0:	f104 0314 	add.w	r3, r4, #20
 8012cb4:	f019 091f 	ands.w	r9, r9, #31
 8012cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012cc0:	d02b      	beq.n	8012d1a <__lshift+0xbe>
 8012cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8012cc6:	468a      	mov	sl, r1
 8012cc8:	2200      	movs	r2, #0
 8012cca:	6818      	ldr	r0, [r3, #0]
 8012ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8012cd0:	4310      	orrs	r0, r2
 8012cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8012cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cda:	459c      	cmp	ip, r3
 8012cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ce0:	d8f3      	bhi.n	8012cca <__lshift+0x6e>
 8012ce2:	ebac 0304 	sub.w	r3, ip, r4
 8012ce6:	3b15      	subs	r3, #21
 8012ce8:	f023 0303 	bic.w	r3, r3, #3
 8012cec:	3304      	adds	r3, #4
 8012cee:	f104 0015 	add.w	r0, r4, #21
 8012cf2:	4584      	cmp	ip, r0
 8012cf4:	bf38      	it	cc
 8012cf6:	2304      	movcc	r3, #4
 8012cf8:	50ca      	str	r2, [r1, r3]
 8012cfa:	b10a      	cbz	r2, 8012d00 <__lshift+0xa4>
 8012cfc:	f108 0602 	add.w	r6, r8, #2
 8012d00:	3e01      	subs	r6, #1
 8012d02:	4638      	mov	r0, r7
 8012d04:	612e      	str	r6, [r5, #16]
 8012d06:	4621      	mov	r1, r4
 8012d08:	f7ff fdda 	bl	80128c0 <_Bfree>
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d16:	3301      	adds	r3, #1
 8012d18:	e7c5      	b.n	8012ca6 <__lshift+0x4a>
 8012d1a:	3904      	subs	r1, #4
 8012d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d24:	459c      	cmp	ip, r3
 8012d26:	d8f9      	bhi.n	8012d1c <__lshift+0xc0>
 8012d28:	e7ea      	b.n	8012d00 <__lshift+0xa4>
 8012d2a:	bf00      	nop
 8012d2c:	08014c4d 	.word	0x08014c4d
 8012d30:	08014c5e 	.word	0x08014c5e

08012d34 <__mcmp>:
 8012d34:	690a      	ldr	r2, [r1, #16]
 8012d36:	4603      	mov	r3, r0
 8012d38:	6900      	ldr	r0, [r0, #16]
 8012d3a:	1a80      	subs	r0, r0, r2
 8012d3c:	b530      	push	{r4, r5, lr}
 8012d3e:	d10e      	bne.n	8012d5e <__mcmp+0x2a>
 8012d40:	3314      	adds	r3, #20
 8012d42:	3114      	adds	r1, #20
 8012d44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012d48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d54:	4295      	cmp	r5, r2
 8012d56:	d003      	beq.n	8012d60 <__mcmp+0x2c>
 8012d58:	d205      	bcs.n	8012d66 <__mcmp+0x32>
 8012d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5e:	bd30      	pop	{r4, r5, pc}
 8012d60:	42a3      	cmp	r3, r4
 8012d62:	d3f3      	bcc.n	8012d4c <__mcmp+0x18>
 8012d64:	e7fb      	b.n	8012d5e <__mcmp+0x2a>
 8012d66:	2001      	movs	r0, #1
 8012d68:	e7f9      	b.n	8012d5e <__mcmp+0x2a>
	...

08012d6c <__mdiff>:
 8012d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d70:	4689      	mov	r9, r1
 8012d72:	4606      	mov	r6, r0
 8012d74:	4611      	mov	r1, r2
 8012d76:	4648      	mov	r0, r9
 8012d78:	4614      	mov	r4, r2
 8012d7a:	f7ff ffdb 	bl	8012d34 <__mcmp>
 8012d7e:	1e05      	subs	r5, r0, #0
 8012d80:	d112      	bne.n	8012da8 <__mdiff+0x3c>
 8012d82:	4629      	mov	r1, r5
 8012d84:	4630      	mov	r0, r6
 8012d86:	f7ff fd5b 	bl	8012840 <_Balloc>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	b928      	cbnz	r0, 8012d9a <__mdiff+0x2e>
 8012d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8012e8c <__mdiff+0x120>)
 8012d90:	f240 2137 	movw	r1, #567	@ 0x237
 8012d94:	483e      	ldr	r0, [pc, #248]	@ (8012e90 <__mdiff+0x124>)
 8012d96:	f7fe fde7 	bl	8011968 <__assert_func>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012da0:	4610      	mov	r0, r2
 8012da2:	b003      	add	sp, #12
 8012da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da8:	bfbc      	itt	lt
 8012daa:	464b      	movlt	r3, r9
 8012dac:	46a1      	movlt	r9, r4
 8012dae:	4630      	mov	r0, r6
 8012db0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012db4:	bfba      	itte	lt
 8012db6:	461c      	movlt	r4, r3
 8012db8:	2501      	movlt	r5, #1
 8012dba:	2500      	movge	r5, #0
 8012dbc:	f7ff fd40 	bl	8012840 <_Balloc>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	b918      	cbnz	r0, 8012dcc <__mdiff+0x60>
 8012dc4:	4b31      	ldr	r3, [pc, #196]	@ (8012e8c <__mdiff+0x120>)
 8012dc6:	f240 2145 	movw	r1, #581	@ 0x245
 8012dca:	e7e3      	b.n	8012d94 <__mdiff+0x28>
 8012dcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012dd0:	6926      	ldr	r6, [r4, #16]
 8012dd2:	60c5      	str	r5, [r0, #12]
 8012dd4:	f109 0310 	add.w	r3, r9, #16
 8012dd8:	f109 0514 	add.w	r5, r9, #20
 8012ddc:	f104 0e14 	add.w	lr, r4, #20
 8012de0:	f100 0b14 	add.w	fp, r0, #20
 8012de4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012de8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012dec:	9301      	str	r3, [sp, #4]
 8012dee:	46d9      	mov	r9, fp
 8012df0:	f04f 0c00 	mov.w	ip, #0
 8012df4:	9b01      	ldr	r3, [sp, #4]
 8012df6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012dfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	fa1f f38a 	uxth.w	r3, sl
 8012e04:	4619      	mov	r1, r3
 8012e06:	b283      	uxth	r3, r0
 8012e08:	1acb      	subs	r3, r1, r3
 8012e0a:	0c00      	lsrs	r0, r0, #16
 8012e0c:	4463      	add	r3, ip
 8012e0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012e12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012e1c:	4576      	cmp	r6, lr
 8012e1e:	f849 3b04 	str.w	r3, [r9], #4
 8012e22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e26:	d8e5      	bhi.n	8012df4 <__mdiff+0x88>
 8012e28:	1b33      	subs	r3, r6, r4
 8012e2a:	3b15      	subs	r3, #21
 8012e2c:	f023 0303 	bic.w	r3, r3, #3
 8012e30:	3415      	adds	r4, #21
 8012e32:	3304      	adds	r3, #4
 8012e34:	42a6      	cmp	r6, r4
 8012e36:	bf38      	it	cc
 8012e38:	2304      	movcc	r3, #4
 8012e3a:	441d      	add	r5, r3
 8012e3c:	445b      	add	r3, fp
 8012e3e:	461e      	mov	r6, r3
 8012e40:	462c      	mov	r4, r5
 8012e42:	4544      	cmp	r4, r8
 8012e44:	d30e      	bcc.n	8012e64 <__mdiff+0xf8>
 8012e46:	f108 0103 	add.w	r1, r8, #3
 8012e4a:	1b49      	subs	r1, r1, r5
 8012e4c:	f021 0103 	bic.w	r1, r1, #3
 8012e50:	3d03      	subs	r5, #3
 8012e52:	45a8      	cmp	r8, r5
 8012e54:	bf38      	it	cc
 8012e56:	2100      	movcc	r1, #0
 8012e58:	440b      	add	r3, r1
 8012e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e5e:	b191      	cbz	r1, 8012e86 <__mdiff+0x11a>
 8012e60:	6117      	str	r7, [r2, #16]
 8012e62:	e79d      	b.n	8012da0 <__mdiff+0x34>
 8012e64:	f854 1b04 	ldr.w	r1, [r4], #4
 8012e68:	46e6      	mov	lr, ip
 8012e6a:	0c08      	lsrs	r0, r1, #16
 8012e6c:	fa1c fc81 	uxtah	ip, ip, r1
 8012e70:	4471      	add	r1, lr
 8012e72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012e76:	b289      	uxth	r1, r1
 8012e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e7c:	f846 1b04 	str.w	r1, [r6], #4
 8012e80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e84:	e7dd      	b.n	8012e42 <__mdiff+0xd6>
 8012e86:	3f01      	subs	r7, #1
 8012e88:	e7e7      	b.n	8012e5a <__mdiff+0xee>
 8012e8a:	bf00      	nop
 8012e8c:	08014c4d 	.word	0x08014c4d
 8012e90:	08014c5e 	.word	0x08014c5e

08012e94 <__d2b>:
 8012e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e98:	460f      	mov	r7, r1
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	ec59 8b10 	vmov	r8, r9, d0
 8012ea0:	4616      	mov	r6, r2
 8012ea2:	f7ff fccd 	bl	8012840 <_Balloc>
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	b930      	cbnz	r0, 8012eb8 <__d2b+0x24>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	4b23      	ldr	r3, [pc, #140]	@ (8012f3c <__d2b+0xa8>)
 8012eae:	4824      	ldr	r0, [pc, #144]	@ (8012f40 <__d2b+0xac>)
 8012eb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8012eb4:	f7fe fd58 	bl	8011968 <__assert_func>
 8012eb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ec0:	b10d      	cbz	r5, 8012ec6 <__d2b+0x32>
 8012ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012ec6:	9301      	str	r3, [sp, #4]
 8012ec8:	f1b8 0300 	subs.w	r3, r8, #0
 8012ecc:	d023      	beq.n	8012f16 <__d2b+0x82>
 8012ece:	4668      	mov	r0, sp
 8012ed0:	9300      	str	r3, [sp, #0]
 8012ed2:	f7ff fd7c 	bl	80129ce <__lo0bits>
 8012ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012eda:	b1d0      	cbz	r0, 8012f12 <__d2b+0x7e>
 8012edc:	f1c0 0320 	rsb	r3, r0, #32
 8012ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ee4:	430b      	orrs	r3, r1
 8012ee6:	40c2      	lsrs	r2, r0
 8012ee8:	6163      	str	r3, [r4, #20]
 8012eea:	9201      	str	r2, [sp, #4]
 8012eec:	9b01      	ldr	r3, [sp, #4]
 8012eee:	61a3      	str	r3, [r4, #24]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	bf0c      	ite	eq
 8012ef4:	2201      	moveq	r2, #1
 8012ef6:	2202      	movne	r2, #2
 8012ef8:	6122      	str	r2, [r4, #16]
 8012efa:	b1a5      	cbz	r5, 8012f26 <__d2b+0x92>
 8012efc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012f00:	4405      	add	r5, r0
 8012f02:	603d      	str	r5, [r7, #0]
 8012f04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012f08:	6030      	str	r0, [r6, #0]
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	b003      	add	sp, #12
 8012f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f12:	6161      	str	r1, [r4, #20]
 8012f14:	e7ea      	b.n	8012eec <__d2b+0x58>
 8012f16:	a801      	add	r0, sp, #4
 8012f18:	f7ff fd59 	bl	80129ce <__lo0bits>
 8012f1c:	9b01      	ldr	r3, [sp, #4]
 8012f1e:	6163      	str	r3, [r4, #20]
 8012f20:	3020      	adds	r0, #32
 8012f22:	2201      	movs	r2, #1
 8012f24:	e7e8      	b.n	8012ef8 <__d2b+0x64>
 8012f26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012f2e:	6038      	str	r0, [r7, #0]
 8012f30:	6918      	ldr	r0, [r3, #16]
 8012f32:	f7ff fd2d 	bl	8012990 <__hi0bits>
 8012f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f3a:	e7e5      	b.n	8012f08 <__d2b+0x74>
 8012f3c:	08014c4d 	.word	0x08014c4d
 8012f40:	08014c5e 	.word	0x08014c5e

08012f44 <__ssputs_r>:
 8012f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f48:	688e      	ldr	r6, [r1, #8]
 8012f4a:	461f      	mov	r7, r3
 8012f4c:	42be      	cmp	r6, r7
 8012f4e:	680b      	ldr	r3, [r1, #0]
 8012f50:	4682      	mov	sl, r0
 8012f52:	460c      	mov	r4, r1
 8012f54:	4690      	mov	r8, r2
 8012f56:	d82d      	bhi.n	8012fb4 <__ssputs_r+0x70>
 8012f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012f60:	d026      	beq.n	8012fb0 <__ssputs_r+0x6c>
 8012f62:	6965      	ldr	r5, [r4, #20]
 8012f64:	6909      	ldr	r1, [r1, #16]
 8012f66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f6a:	eba3 0901 	sub.w	r9, r3, r1
 8012f6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f72:	1c7b      	adds	r3, r7, #1
 8012f74:	444b      	add	r3, r9
 8012f76:	106d      	asrs	r5, r5, #1
 8012f78:	429d      	cmp	r5, r3
 8012f7a:	bf38      	it	cc
 8012f7c:	461d      	movcc	r5, r3
 8012f7e:	0553      	lsls	r3, r2, #21
 8012f80:	d527      	bpl.n	8012fd2 <__ssputs_r+0x8e>
 8012f82:	4629      	mov	r1, r5
 8012f84:	f7ff fbd0 	bl	8012728 <_malloc_r>
 8012f88:	4606      	mov	r6, r0
 8012f8a:	b360      	cbz	r0, 8012fe6 <__ssputs_r+0xa2>
 8012f8c:	6921      	ldr	r1, [r4, #16]
 8012f8e:	464a      	mov	r2, r9
 8012f90:	f7fe fcdb 	bl	801194a <memcpy>
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f9e:	81a3      	strh	r3, [r4, #12]
 8012fa0:	6126      	str	r6, [r4, #16]
 8012fa2:	6165      	str	r5, [r4, #20]
 8012fa4:	444e      	add	r6, r9
 8012fa6:	eba5 0509 	sub.w	r5, r5, r9
 8012faa:	6026      	str	r6, [r4, #0]
 8012fac:	60a5      	str	r5, [r4, #8]
 8012fae:	463e      	mov	r6, r7
 8012fb0:	42be      	cmp	r6, r7
 8012fb2:	d900      	bls.n	8012fb6 <__ssputs_r+0x72>
 8012fb4:	463e      	mov	r6, r7
 8012fb6:	6820      	ldr	r0, [r4, #0]
 8012fb8:	4632      	mov	r2, r6
 8012fba:	4641      	mov	r1, r8
 8012fbc:	f000 fa6c 	bl	8013498 <memmove>
 8012fc0:	68a3      	ldr	r3, [r4, #8]
 8012fc2:	1b9b      	subs	r3, r3, r6
 8012fc4:	60a3      	str	r3, [r4, #8]
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	4433      	add	r3, r6
 8012fca:	6023      	str	r3, [r4, #0]
 8012fcc:	2000      	movs	r0, #0
 8012fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd2:	462a      	mov	r2, r5
 8012fd4:	f000 fab7 	bl	8013546 <_realloc_r>
 8012fd8:	4606      	mov	r6, r0
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d1e0      	bne.n	8012fa0 <__ssputs_r+0x5c>
 8012fde:	6921      	ldr	r1, [r4, #16]
 8012fe0:	4650      	mov	r0, sl
 8012fe2:	f7ff fb2d 	bl	8012640 <_free_r>
 8012fe6:	230c      	movs	r3, #12
 8012fe8:	f8ca 3000 	str.w	r3, [sl]
 8012fec:	89a3      	ldrh	r3, [r4, #12]
 8012fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ff2:	81a3      	strh	r3, [r4, #12]
 8012ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ff8:	e7e9      	b.n	8012fce <__ssputs_r+0x8a>
	...

08012ffc <_svfiprintf_r>:
 8012ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013000:	4698      	mov	r8, r3
 8013002:	898b      	ldrh	r3, [r1, #12]
 8013004:	061b      	lsls	r3, r3, #24
 8013006:	b09d      	sub	sp, #116	@ 0x74
 8013008:	4607      	mov	r7, r0
 801300a:	460d      	mov	r5, r1
 801300c:	4614      	mov	r4, r2
 801300e:	d510      	bpl.n	8013032 <_svfiprintf_r+0x36>
 8013010:	690b      	ldr	r3, [r1, #16]
 8013012:	b973      	cbnz	r3, 8013032 <_svfiprintf_r+0x36>
 8013014:	2140      	movs	r1, #64	@ 0x40
 8013016:	f7ff fb87 	bl	8012728 <_malloc_r>
 801301a:	6028      	str	r0, [r5, #0]
 801301c:	6128      	str	r0, [r5, #16]
 801301e:	b930      	cbnz	r0, 801302e <_svfiprintf_r+0x32>
 8013020:	230c      	movs	r3, #12
 8013022:	603b      	str	r3, [r7, #0]
 8013024:	f04f 30ff 	mov.w	r0, #4294967295
 8013028:	b01d      	add	sp, #116	@ 0x74
 801302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302e:	2340      	movs	r3, #64	@ 0x40
 8013030:	616b      	str	r3, [r5, #20]
 8013032:	2300      	movs	r3, #0
 8013034:	9309      	str	r3, [sp, #36]	@ 0x24
 8013036:	2320      	movs	r3, #32
 8013038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801303c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013040:	2330      	movs	r3, #48	@ 0x30
 8013042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80131e0 <_svfiprintf_r+0x1e4>
 8013046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801304a:	f04f 0901 	mov.w	r9, #1
 801304e:	4623      	mov	r3, r4
 8013050:	469a      	mov	sl, r3
 8013052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013056:	b10a      	cbz	r2, 801305c <_svfiprintf_r+0x60>
 8013058:	2a25      	cmp	r2, #37	@ 0x25
 801305a:	d1f9      	bne.n	8013050 <_svfiprintf_r+0x54>
 801305c:	ebba 0b04 	subs.w	fp, sl, r4
 8013060:	d00b      	beq.n	801307a <_svfiprintf_r+0x7e>
 8013062:	465b      	mov	r3, fp
 8013064:	4622      	mov	r2, r4
 8013066:	4629      	mov	r1, r5
 8013068:	4638      	mov	r0, r7
 801306a:	f7ff ff6b 	bl	8012f44 <__ssputs_r>
 801306e:	3001      	adds	r0, #1
 8013070:	f000 80a7 	beq.w	80131c2 <_svfiprintf_r+0x1c6>
 8013074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013076:	445a      	add	r2, fp
 8013078:	9209      	str	r2, [sp, #36]	@ 0x24
 801307a:	f89a 3000 	ldrb.w	r3, [sl]
 801307e:	2b00      	cmp	r3, #0
 8013080:	f000 809f 	beq.w	80131c2 <_svfiprintf_r+0x1c6>
 8013084:	2300      	movs	r3, #0
 8013086:	f04f 32ff 	mov.w	r2, #4294967295
 801308a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801308e:	f10a 0a01 	add.w	sl, sl, #1
 8013092:	9304      	str	r3, [sp, #16]
 8013094:	9307      	str	r3, [sp, #28]
 8013096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801309a:	931a      	str	r3, [sp, #104]	@ 0x68
 801309c:	4654      	mov	r4, sl
 801309e:	2205      	movs	r2, #5
 80130a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130a4:	484e      	ldr	r0, [pc, #312]	@ (80131e0 <_svfiprintf_r+0x1e4>)
 80130a6:	f7ed f893 	bl	80001d0 <memchr>
 80130aa:	9a04      	ldr	r2, [sp, #16]
 80130ac:	b9d8      	cbnz	r0, 80130e6 <_svfiprintf_r+0xea>
 80130ae:	06d0      	lsls	r0, r2, #27
 80130b0:	bf44      	itt	mi
 80130b2:	2320      	movmi	r3, #32
 80130b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80130b8:	0711      	lsls	r1, r2, #28
 80130ba:	bf44      	itt	mi
 80130bc:	232b      	movmi	r3, #43	@ 0x2b
 80130be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80130c2:	f89a 3000 	ldrb.w	r3, [sl]
 80130c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80130c8:	d015      	beq.n	80130f6 <_svfiprintf_r+0xfa>
 80130ca:	9a07      	ldr	r2, [sp, #28]
 80130cc:	4654      	mov	r4, sl
 80130ce:	2000      	movs	r0, #0
 80130d0:	f04f 0c0a 	mov.w	ip, #10
 80130d4:	4621      	mov	r1, r4
 80130d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130da:	3b30      	subs	r3, #48	@ 0x30
 80130dc:	2b09      	cmp	r3, #9
 80130de:	d94b      	bls.n	8013178 <_svfiprintf_r+0x17c>
 80130e0:	b1b0      	cbz	r0, 8013110 <_svfiprintf_r+0x114>
 80130e2:	9207      	str	r2, [sp, #28]
 80130e4:	e014      	b.n	8013110 <_svfiprintf_r+0x114>
 80130e6:	eba0 0308 	sub.w	r3, r0, r8
 80130ea:	fa09 f303 	lsl.w	r3, r9, r3
 80130ee:	4313      	orrs	r3, r2
 80130f0:	9304      	str	r3, [sp, #16]
 80130f2:	46a2      	mov	sl, r4
 80130f4:	e7d2      	b.n	801309c <_svfiprintf_r+0xa0>
 80130f6:	9b03      	ldr	r3, [sp, #12]
 80130f8:	1d19      	adds	r1, r3, #4
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	9103      	str	r1, [sp, #12]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	bfbb      	ittet	lt
 8013102:	425b      	neglt	r3, r3
 8013104:	f042 0202 	orrlt.w	r2, r2, #2
 8013108:	9307      	strge	r3, [sp, #28]
 801310a:	9307      	strlt	r3, [sp, #28]
 801310c:	bfb8      	it	lt
 801310e:	9204      	strlt	r2, [sp, #16]
 8013110:	7823      	ldrb	r3, [r4, #0]
 8013112:	2b2e      	cmp	r3, #46	@ 0x2e
 8013114:	d10a      	bne.n	801312c <_svfiprintf_r+0x130>
 8013116:	7863      	ldrb	r3, [r4, #1]
 8013118:	2b2a      	cmp	r3, #42	@ 0x2a
 801311a:	d132      	bne.n	8013182 <_svfiprintf_r+0x186>
 801311c:	9b03      	ldr	r3, [sp, #12]
 801311e:	1d1a      	adds	r2, r3, #4
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	9203      	str	r2, [sp, #12]
 8013124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013128:	3402      	adds	r4, #2
 801312a:	9305      	str	r3, [sp, #20]
 801312c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80131f0 <_svfiprintf_r+0x1f4>
 8013130:	7821      	ldrb	r1, [r4, #0]
 8013132:	2203      	movs	r2, #3
 8013134:	4650      	mov	r0, sl
 8013136:	f7ed f84b 	bl	80001d0 <memchr>
 801313a:	b138      	cbz	r0, 801314c <_svfiprintf_r+0x150>
 801313c:	9b04      	ldr	r3, [sp, #16]
 801313e:	eba0 000a 	sub.w	r0, r0, sl
 8013142:	2240      	movs	r2, #64	@ 0x40
 8013144:	4082      	lsls	r2, r0
 8013146:	4313      	orrs	r3, r2
 8013148:	3401      	adds	r4, #1
 801314a:	9304      	str	r3, [sp, #16]
 801314c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013150:	4824      	ldr	r0, [pc, #144]	@ (80131e4 <_svfiprintf_r+0x1e8>)
 8013152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013156:	2206      	movs	r2, #6
 8013158:	f7ed f83a 	bl	80001d0 <memchr>
 801315c:	2800      	cmp	r0, #0
 801315e:	d036      	beq.n	80131ce <_svfiprintf_r+0x1d2>
 8013160:	4b21      	ldr	r3, [pc, #132]	@ (80131e8 <_svfiprintf_r+0x1ec>)
 8013162:	bb1b      	cbnz	r3, 80131ac <_svfiprintf_r+0x1b0>
 8013164:	9b03      	ldr	r3, [sp, #12]
 8013166:	3307      	adds	r3, #7
 8013168:	f023 0307 	bic.w	r3, r3, #7
 801316c:	3308      	adds	r3, #8
 801316e:	9303      	str	r3, [sp, #12]
 8013170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013172:	4433      	add	r3, r6
 8013174:	9309      	str	r3, [sp, #36]	@ 0x24
 8013176:	e76a      	b.n	801304e <_svfiprintf_r+0x52>
 8013178:	fb0c 3202 	mla	r2, ip, r2, r3
 801317c:	460c      	mov	r4, r1
 801317e:	2001      	movs	r0, #1
 8013180:	e7a8      	b.n	80130d4 <_svfiprintf_r+0xd8>
 8013182:	2300      	movs	r3, #0
 8013184:	3401      	adds	r4, #1
 8013186:	9305      	str	r3, [sp, #20]
 8013188:	4619      	mov	r1, r3
 801318a:	f04f 0c0a 	mov.w	ip, #10
 801318e:	4620      	mov	r0, r4
 8013190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013194:	3a30      	subs	r2, #48	@ 0x30
 8013196:	2a09      	cmp	r2, #9
 8013198:	d903      	bls.n	80131a2 <_svfiprintf_r+0x1a6>
 801319a:	2b00      	cmp	r3, #0
 801319c:	d0c6      	beq.n	801312c <_svfiprintf_r+0x130>
 801319e:	9105      	str	r1, [sp, #20]
 80131a0:	e7c4      	b.n	801312c <_svfiprintf_r+0x130>
 80131a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80131a6:	4604      	mov	r4, r0
 80131a8:	2301      	movs	r3, #1
 80131aa:	e7f0      	b.n	801318e <_svfiprintf_r+0x192>
 80131ac:	ab03      	add	r3, sp, #12
 80131ae:	9300      	str	r3, [sp, #0]
 80131b0:	462a      	mov	r2, r5
 80131b2:	4b0e      	ldr	r3, [pc, #56]	@ (80131ec <_svfiprintf_r+0x1f0>)
 80131b4:	a904      	add	r1, sp, #16
 80131b6:	4638      	mov	r0, r7
 80131b8:	f7fd fdd6 	bl	8010d68 <_printf_float>
 80131bc:	1c42      	adds	r2, r0, #1
 80131be:	4606      	mov	r6, r0
 80131c0:	d1d6      	bne.n	8013170 <_svfiprintf_r+0x174>
 80131c2:	89ab      	ldrh	r3, [r5, #12]
 80131c4:	065b      	lsls	r3, r3, #25
 80131c6:	f53f af2d 	bmi.w	8013024 <_svfiprintf_r+0x28>
 80131ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131cc:	e72c      	b.n	8013028 <_svfiprintf_r+0x2c>
 80131ce:	ab03      	add	r3, sp, #12
 80131d0:	9300      	str	r3, [sp, #0]
 80131d2:	462a      	mov	r2, r5
 80131d4:	4b05      	ldr	r3, [pc, #20]	@ (80131ec <_svfiprintf_r+0x1f0>)
 80131d6:	a904      	add	r1, sp, #16
 80131d8:	4638      	mov	r0, r7
 80131da:	f7fe f85d 	bl	8011298 <_printf_i>
 80131de:	e7ed      	b.n	80131bc <_svfiprintf_r+0x1c0>
 80131e0:	08014db8 	.word	0x08014db8
 80131e4:	08014dc2 	.word	0x08014dc2
 80131e8:	08010d69 	.word	0x08010d69
 80131ec:	08012f45 	.word	0x08012f45
 80131f0:	08014dbe 	.word	0x08014dbe

080131f4 <__sflush_r>:
 80131f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80131f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fc:	0716      	lsls	r6, r2, #28
 80131fe:	4605      	mov	r5, r0
 8013200:	460c      	mov	r4, r1
 8013202:	d454      	bmi.n	80132ae <__sflush_r+0xba>
 8013204:	684b      	ldr	r3, [r1, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	dc02      	bgt.n	8013210 <__sflush_r+0x1c>
 801320a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801320c:	2b00      	cmp	r3, #0
 801320e:	dd48      	ble.n	80132a2 <__sflush_r+0xae>
 8013210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013212:	2e00      	cmp	r6, #0
 8013214:	d045      	beq.n	80132a2 <__sflush_r+0xae>
 8013216:	2300      	movs	r3, #0
 8013218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801321c:	682f      	ldr	r7, [r5, #0]
 801321e:	6a21      	ldr	r1, [r4, #32]
 8013220:	602b      	str	r3, [r5, #0]
 8013222:	d030      	beq.n	8013286 <__sflush_r+0x92>
 8013224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013226:	89a3      	ldrh	r3, [r4, #12]
 8013228:	0759      	lsls	r1, r3, #29
 801322a:	d505      	bpl.n	8013238 <__sflush_r+0x44>
 801322c:	6863      	ldr	r3, [r4, #4]
 801322e:	1ad2      	subs	r2, r2, r3
 8013230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013232:	b10b      	cbz	r3, 8013238 <__sflush_r+0x44>
 8013234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013236:	1ad2      	subs	r2, r2, r3
 8013238:	2300      	movs	r3, #0
 801323a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801323c:	6a21      	ldr	r1, [r4, #32]
 801323e:	4628      	mov	r0, r5
 8013240:	47b0      	blx	r6
 8013242:	1c43      	adds	r3, r0, #1
 8013244:	89a3      	ldrh	r3, [r4, #12]
 8013246:	d106      	bne.n	8013256 <__sflush_r+0x62>
 8013248:	6829      	ldr	r1, [r5, #0]
 801324a:	291d      	cmp	r1, #29
 801324c:	d82b      	bhi.n	80132a6 <__sflush_r+0xb2>
 801324e:	4a2a      	ldr	r2, [pc, #168]	@ (80132f8 <__sflush_r+0x104>)
 8013250:	410a      	asrs	r2, r1
 8013252:	07d6      	lsls	r6, r2, #31
 8013254:	d427      	bmi.n	80132a6 <__sflush_r+0xb2>
 8013256:	2200      	movs	r2, #0
 8013258:	6062      	str	r2, [r4, #4]
 801325a:	04d9      	lsls	r1, r3, #19
 801325c:	6922      	ldr	r2, [r4, #16]
 801325e:	6022      	str	r2, [r4, #0]
 8013260:	d504      	bpl.n	801326c <__sflush_r+0x78>
 8013262:	1c42      	adds	r2, r0, #1
 8013264:	d101      	bne.n	801326a <__sflush_r+0x76>
 8013266:	682b      	ldr	r3, [r5, #0]
 8013268:	b903      	cbnz	r3, 801326c <__sflush_r+0x78>
 801326a:	6560      	str	r0, [r4, #84]	@ 0x54
 801326c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801326e:	602f      	str	r7, [r5, #0]
 8013270:	b1b9      	cbz	r1, 80132a2 <__sflush_r+0xae>
 8013272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013276:	4299      	cmp	r1, r3
 8013278:	d002      	beq.n	8013280 <__sflush_r+0x8c>
 801327a:	4628      	mov	r0, r5
 801327c:	f7ff f9e0 	bl	8012640 <_free_r>
 8013280:	2300      	movs	r3, #0
 8013282:	6363      	str	r3, [r4, #52]	@ 0x34
 8013284:	e00d      	b.n	80132a2 <__sflush_r+0xae>
 8013286:	2301      	movs	r3, #1
 8013288:	4628      	mov	r0, r5
 801328a:	47b0      	blx	r6
 801328c:	4602      	mov	r2, r0
 801328e:	1c50      	adds	r0, r2, #1
 8013290:	d1c9      	bne.n	8013226 <__sflush_r+0x32>
 8013292:	682b      	ldr	r3, [r5, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d0c6      	beq.n	8013226 <__sflush_r+0x32>
 8013298:	2b1d      	cmp	r3, #29
 801329a:	d001      	beq.n	80132a0 <__sflush_r+0xac>
 801329c:	2b16      	cmp	r3, #22
 801329e:	d11e      	bne.n	80132de <__sflush_r+0xea>
 80132a0:	602f      	str	r7, [r5, #0]
 80132a2:	2000      	movs	r0, #0
 80132a4:	e022      	b.n	80132ec <__sflush_r+0xf8>
 80132a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132aa:	b21b      	sxth	r3, r3
 80132ac:	e01b      	b.n	80132e6 <__sflush_r+0xf2>
 80132ae:	690f      	ldr	r7, [r1, #16]
 80132b0:	2f00      	cmp	r7, #0
 80132b2:	d0f6      	beq.n	80132a2 <__sflush_r+0xae>
 80132b4:	0793      	lsls	r3, r2, #30
 80132b6:	680e      	ldr	r6, [r1, #0]
 80132b8:	bf08      	it	eq
 80132ba:	694b      	ldreq	r3, [r1, #20]
 80132bc:	600f      	str	r7, [r1, #0]
 80132be:	bf18      	it	ne
 80132c0:	2300      	movne	r3, #0
 80132c2:	eba6 0807 	sub.w	r8, r6, r7
 80132c6:	608b      	str	r3, [r1, #8]
 80132c8:	f1b8 0f00 	cmp.w	r8, #0
 80132cc:	dde9      	ble.n	80132a2 <__sflush_r+0xae>
 80132ce:	6a21      	ldr	r1, [r4, #32]
 80132d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80132d2:	4643      	mov	r3, r8
 80132d4:	463a      	mov	r2, r7
 80132d6:	4628      	mov	r0, r5
 80132d8:	47b0      	blx	r6
 80132da:	2800      	cmp	r0, #0
 80132dc:	dc08      	bgt.n	80132f0 <__sflush_r+0xfc>
 80132de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132e6:	81a3      	strh	r3, [r4, #12]
 80132e8:	f04f 30ff 	mov.w	r0, #4294967295
 80132ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f0:	4407      	add	r7, r0
 80132f2:	eba8 0800 	sub.w	r8, r8, r0
 80132f6:	e7e7      	b.n	80132c8 <__sflush_r+0xd4>
 80132f8:	dfbffffe 	.word	0xdfbffffe

080132fc <_fflush_r>:
 80132fc:	b538      	push	{r3, r4, r5, lr}
 80132fe:	690b      	ldr	r3, [r1, #16]
 8013300:	4605      	mov	r5, r0
 8013302:	460c      	mov	r4, r1
 8013304:	b913      	cbnz	r3, 801330c <_fflush_r+0x10>
 8013306:	2500      	movs	r5, #0
 8013308:	4628      	mov	r0, r5
 801330a:	bd38      	pop	{r3, r4, r5, pc}
 801330c:	b118      	cbz	r0, 8013316 <_fflush_r+0x1a>
 801330e:	6a03      	ldr	r3, [r0, #32]
 8013310:	b90b      	cbnz	r3, 8013316 <_fflush_r+0x1a>
 8013312:	f7fe f96d 	bl	80115f0 <__sinit>
 8013316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d0f3      	beq.n	8013306 <_fflush_r+0xa>
 801331e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013320:	07d0      	lsls	r0, r2, #31
 8013322:	d404      	bmi.n	801332e <_fflush_r+0x32>
 8013324:	0599      	lsls	r1, r3, #22
 8013326:	d402      	bmi.n	801332e <_fflush_r+0x32>
 8013328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801332a:	f7fe fb04 	bl	8011936 <__retarget_lock_acquire_recursive>
 801332e:	4628      	mov	r0, r5
 8013330:	4621      	mov	r1, r4
 8013332:	f7ff ff5f 	bl	80131f4 <__sflush_r>
 8013336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013338:	07da      	lsls	r2, r3, #31
 801333a:	4605      	mov	r5, r0
 801333c:	d4e4      	bmi.n	8013308 <_fflush_r+0xc>
 801333e:	89a3      	ldrh	r3, [r4, #12]
 8013340:	059b      	lsls	r3, r3, #22
 8013342:	d4e1      	bmi.n	8013308 <_fflush_r+0xc>
 8013344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013346:	f7fe faf7 	bl	8011938 <__retarget_lock_release_recursive>
 801334a:	e7dd      	b.n	8013308 <_fflush_r+0xc>

0801334c <fiprintf>:
 801334c:	b40e      	push	{r1, r2, r3}
 801334e:	b503      	push	{r0, r1, lr}
 8013350:	4601      	mov	r1, r0
 8013352:	ab03      	add	r3, sp, #12
 8013354:	4805      	ldr	r0, [pc, #20]	@ (801336c <fiprintf+0x20>)
 8013356:	f853 2b04 	ldr.w	r2, [r3], #4
 801335a:	6800      	ldr	r0, [r0, #0]
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	f000 f957 	bl	8013610 <_vfiprintf_r>
 8013362:	b002      	add	sp, #8
 8013364:	f85d eb04 	ldr.w	lr, [sp], #4
 8013368:	b003      	add	sp, #12
 801336a:	4770      	bx	lr
 801336c:	2000029c 	.word	0x2000029c

08013370 <__swbuf_r>:
 8013370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013372:	460e      	mov	r6, r1
 8013374:	4614      	mov	r4, r2
 8013376:	4605      	mov	r5, r0
 8013378:	b118      	cbz	r0, 8013382 <__swbuf_r+0x12>
 801337a:	6a03      	ldr	r3, [r0, #32]
 801337c:	b90b      	cbnz	r3, 8013382 <__swbuf_r+0x12>
 801337e:	f7fe f937 	bl	80115f0 <__sinit>
 8013382:	69a3      	ldr	r3, [r4, #24]
 8013384:	60a3      	str	r3, [r4, #8]
 8013386:	89a3      	ldrh	r3, [r4, #12]
 8013388:	071a      	lsls	r2, r3, #28
 801338a:	d501      	bpl.n	8013390 <__swbuf_r+0x20>
 801338c:	6923      	ldr	r3, [r4, #16]
 801338e:	b943      	cbnz	r3, 80133a2 <__swbuf_r+0x32>
 8013390:	4621      	mov	r1, r4
 8013392:	4628      	mov	r0, r5
 8013394:	f000 f82a 	bl	80133ec <__swsetup_r>
 8013398:	b118      	cbz	r0, 80133a2 <__swbuf_r+0x32>
 801339a:	f04f 37ff 	mov.w	r7, #4294967295
 801339e:	4638      	mov	r0, r7
 80133a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	6922      	ldr	r2, [r4, #16]
 80133a6:	1a98      	subs	r0, r3, r2
 80133a8:	6963      	ldr	r3, [r4, #20]
 80133aa:	b2f6      	uxtb	r6, r6
 80133ac:	4283      	cmp	r3, r0
 80133ae:	4637      	mov	r7, r6
 80133b0:	dc05      	bgt.n	80133be <__swbuf_r+0x4e>
 80133b2:	4621      	mov	r1, r4
 80133b4:	4628      	mov	r0, r5
 80133b6:	f7ff ffa1 	bl	80132fc <_fflush_r>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d1ed      	bne.n	801339a <__swbuf_r+0x2a>
 80133be:	68a3      	ldr	r3, [r4, #8]
 80133c0:	3b01      	subs	r3, #1
 80133c2:	60a3      	str	r3, [r4, #8]
 80133c4:	6823      	ldr	r3, [r4, #0]
 80133c6:	1c5a      	adds	r2, r3, #1
 80133c8:	6022      	str	r2, [r4, #0]
 80133ca:	701e      	strb	r6, [r3, #0]
 80133cc:	6962      	ldr	r2, [r4, #20]
 80133ce:	1c43      	adds	r3, r0, #1
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d004      	beq.n	80133de <__swbuf_r+0x6e>
 80133d4:	89a3      	ldrh	r3, [r4, #12]
 80133d6:	07db      	lsls	r3, r3, #31
 80133d8:	d5e1      	bpl.n	801339e <__swbuf_r+0x2e>
 80133da:	2e0a      	cmp	r6, #10
 80133dc:	d1df      	bne.n	801339e <__swbuf_r+0x2e>
 80133de:	4621      	mov	r1, r4
 80133e0:	4628      	mov	r0, r5
 80133e2:	f7ff ff8b 	bl	80132fc <_fflush_r>
 80133e6:	2800      	cmp	r0, #0
 80133e8:	d0d9      	beq.n	801339e <__swbuf_r+0x2e>
 80133ea:	e7d6      	b.n	801339a <__swbuf_r+0x2a>

080133ec <__swsetup_r>:
 80133ec:	b538      	push	{r3, r4, r5, lr}
 80133ee:	4b29      	ldr	r3, [pc, #164]	@ (8013494 <__swsetup_r+0xa8>)
 80133f0:	4605      	mov	r5, r0
 80133f2:	6818      	ldr	r0, [r3, #0]
 80133f4:	460c      	mov	r4, r1
 80133f6:	b118      	cbz	r0, 8013400 <__swsetup_r+0x14>
 80133f8:	6a03      	ldr	r3, [r0, #32]
 80133fa:	b90b      	cbnz	r3, 8013400 <__swsetup_r+0x14>
 80133fc:	f7fe f8f8 	bl	80115f0 <__sinit>
 8013400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013404:	0719      	lsls	r1, r3, #28
 8013406:	d422      	bmi.n	801344e <__swsetup_r+0x62>
 8013408:	06da      	lsls	r2, r3, #27
 801340a:	d407      	bmi.n	801341c <__swsetup_r+0x30>
 801340c:	2209      	movs	r2, #9
 801340e:	602a      	str	r2, [r5, #0]
 8013410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013414:	81a3      	strh	r3, [r4, #12]
 8013416:	f04f 30ff 	mov.w	r0, #4294967295
 801341a:	e033      	b.n	8013484 <__swsetup_r+0x98>
 801341c:	0758      	lsls	r0, r3, #29
 801341e:	d512      	bpl.n	8013446 <__swsetup_r+0x5a>
 8013420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013422:	b141      	cbz	r1, 8013436 <__swsetup_r+0x4a>
 8013424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013428:	4299      	cmp	r1, r3
 801342a:	d002      	beq.n	8013432 <__swsetup_r+0x46>
 801342c:	4628      	mov	r0, r5
 801342e:	f7ff f907 	bl	8012640 <_free_r>
 8013432:	2300      	movs	r3, #0
 8013434:	6363      	str	r3, [r4, #52]	@ 0x34
 8013436:	89a3      	ldrh	r3, [r4, #12]
 8013438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801343c:	81a3      	strh	r3, [r4, #12]
 801343e:	2300      	movs	r3, #0
 8013440:	6063      	str	r3, [r4, #4]
 8013442:	6923      	ldr	r3, [r4, #16]
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	f043 0308 	orr.w	r3, r3, #8
 801344c:	81a3      	strh	r3, [r4, #12]
 801344e:	6923      	ldr	r3, [r4, #16]
 8013450:	b94b      	cbnz	r3, 8013466 <__swsetup_r+0x7a>
 8013452:	89a3      	ldrh	r3, [r4, #12]
 8013454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801345c:	d003      	beq.n	8013466 <__swsetup_r+0x7a>
 801345e:	4621      	mov	r1, r4
 8013460:	4628      	mov	r0, r5
 8013462:	f000 fa13 	bl	801388c <__smakebuf_r>
 8013466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801346a:	f013 0201 	ands.w	r2, r3, #1
 801346e:	d00a      	beq.n	8013486 <__swsetup_r+0x9a>
 8013470:	2200      	movs	r2, #0
 8013472:	60a2      	str	r2, [r4, #8]
 8013474:	6962      	ldr	r2, [r4, #20]
 8013476:	4252      	negs	r2, r2
 8013478:	61a2      	str	r2, [r4, #24]
 801347a:	6922      	ldr	r2, [r4, #16]
 801347c:	b942      	cbnz	r2, 8013490 <__swsetup_r+0xa4>
 801347e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013482:	d1c5      	bne.n	8013410 <__swsetup_r+0x24>
 8013484:	bd38      	pop	{r3, r4, r5, pc}
 8013486:	0799      	lsls	r1, r3, #30
 8013488:	bf58      	it	pl
 801348a:	6962      	ldrpl	r2, [r4, #20]
 801348c:	60a2      	str	r2, [r4, #8]
 801348e:	e7f4      	b.n	801347a <__swsetup_r+0x8e>
 8013490:	2000      	movs	r0, #0
 8013492:	e7f7      	b.n	8013484 <__swsetup_r+0x98>
 8013494:	2000029c 	.word	0x2000029c

08013498 <memmove>:
 8013498:	4288      	cmp	r0, r1
 801349a:	b510      	push	{r4, lr}
 801349c:	eb01 0402 	add.w	r4, r1, r2
 80134a0:	d902      	bls.n	80134a8 <memmove+0x10>
 80134a2:	4284      	cmp	r4, r0
 80134a4:	4623      	mov	r3, r4
 80134a6:	d807      	bhi.n	80134b8 <memmove+0x20>
 80134a8:	1e43      	subs	r3, r0, #1
 80134aa:	42a1      	cmp	r1, r4
 80134ac:	d008      	beq.n	80134c0 <memmove+0x28>
 80134ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134b6:	e7f8      	b.n	80134aa <memmove+0x12>
 80134b8:	4402      	add	r2, r0
 80134ba:	4601      	mov	r1, r0
 80134bc:	428a      	cmp	r2, r1
 80134be:	d100      	bne.n	80134c2 <memmove+0x2a>
 80134c0:	bd10      	pop	{r4, pc}
 80134c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134ca:	e7f7      	b.n	80134bc <memmove+0x24>

080134cc <_sbrk_r>:
 80134cc:	b538      	push	{r3, r4, r5, lr}
 80134ce:	4d06      	ldr	r5, [pc, #24]	@ (80134e8 <_sbrk_r+0x1c>)
 80134d0:	2300      	movs	r3, #0
 80134d2:	4604      	mov	r4, r0
 80134d4:	4608      	mov	r0, r1
 80134d6:	602b      	str	r3, [r5, #0]
 80134d8:	f7f5 f81c 	bl	8008514 <_sbrk>
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d102      	bne.n	80134e6 <_sbrk_r+0x1a>
 80134e0:	682b      	ldr	r3, [r5, #0]
 80134e2:	b103      	cbz	r3, 80134e6 <_sbrk_r+0x1a>
 80134e4:	6023      	str	r3, [r4, #0]
 80134e6:	bd38      	pop	{r3, r4, r5, pc}
 80134e8:	2000cc94 	.word	0x2000cc94

080134ec <abort>:
 80134ec:	b508      	push	{r3, lr}
 80134ee:	2006      	movs	r0, #6
 80134f0:	f000 fa30 	bl	8013954 <raise>
 80134f4:	2001      	movs	r0, #1
 80134f6:	f7f4 ff95 	bl	8008424 <_exit>

080134fa <_calloc_r>:
 80134fa:	b570      	push	{r4, r5, r6, lr}
 80134fc:	fba1 5402 	umull	r5, r4, r1, r2
 8013500:	b93c      	cbnz	r4, 8013512 <_calloc_r+0x18>
 8013502:	4629      	mov	r1, r5
 8013504:	f7ff f910 	bl	8012728 <_malloc_r>
 8013508:	4606      	mov	r6, r0
 801350a:	b928      	cbnz	r0, 8013518 <_calloc_r+0x1e>
 801350c:	2600      	movs	r6, #0
 801350e:	4630      	mov	r0, r6
 8013510:	bd70      	pop	{r4, r5, r6, pc}
 8013512:	220c      	movs	r2, #12
 8013514:	6002      	str	r2, [r0, #0]
 8013516:	e7f9      	b.n	801350c <_calloc_r+0x12>
 8013518:	462a      	mov	r2, r5
 801351a:	4621      	mov	r1, r4
 801351c:	f7fe f901 	bl	8011722 <memset>
 8013520:	e7f5      	b.n	801350e <_calloc_r+0x14>

08013522 <__ascii_mbtowc>:
 8013522:	b082      	sub	sp, #8
 8013524:	b901      	cbnz	r1, 8013528 <__ascii_mbtowc+0x6>
 8013526:	a901      	add	r1, sp, #4
 8013528:	b142      	cbz	r2, 801353c <__ascii_mbtowc+0x1a>
 801352a:	b14b      	cbz	r3, 8013540 <__ascii_mbtowc+0x1e>
 801352c:	7813      	ldrb	r3, [r2, #0]
 801352e:	600b      	str	r3, [r1, #0]
 8013530:	7812      	ldrb	r2, [r2, #0]
 8013532:	1e10      	subs	r0, r2, #0
 8013534:	bf18      	it	ne
 8013536:	2001      	movne	r0, #1
 8013538:	b002      	add	sp, #8
 801353a:	4770      	bx	lr
 801353c:	4610      	mov	r0, r2
 801353e:	e7fb      	b.n	8013538 <__ascii_mbtowc+0x16>
 8013540:	f06f 0001 	mvn.w	r0, #1
 8013544:	e7f8      	b.n	8013538 <__ascii_mbtowc+0x16>

08013546 <_realloc_r>:
 8013546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801354a:	4680      	mov	r8, r0
 801354c:	4615      	mov	r5, r2
 801354e:	460c      	mov	r4, r1
 8013550:	b921      	cbnz	r1, 801355c <_realloc_r+0x16>
 8013552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013556:	4611      	mov	r1, r2
 8013558:	f7ff b8e6 	b.w	8012728 <_malloc_r>
 801355c:	b92a      	cbnz	r2, 801356a <_realloc_r+0x24>
 801355e:	f7ff f86f 	bl	8012640 <_free_r>
 8013562:	2400      	movs	r4, #0
 8013564:	4620      	mov	r0, r4
 8013566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801356a:	f000 fa31 	bl	80139d0 <_malloc_usable_size_r>
 801356e:	4285      	cmp	r5, r0
 8013570:	4606      	mov	r6, r0
 8013572:	d802      	bhi.n	801357a <_realloc_r+0x34>
 8013574:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013578:	d8f4      	bhi.n	8013564 <_realloc_r+0x1e>
 801357a:	4629      	mov	r1, r5
 801357c:	4640      	mov	r0, r8
 801357e:	f7ff f8d3 	bl	8012728 <_malloc_r>
 8013582:	4607      	mov	r7, r0
 8013584:	2800      	cmp	r0, #0
 8013586:	d0ec      	beq.n	8013562 <_realloc_r+0x1c>
 8013588:	42b5      	cmp	r5, r6
 801358a:	462a      	mov	r2, r5
 801358c:	4621      	mov	r1, r4
 801358e:	bf28      	it	cs
 8013590:	4632      	movcs	r2, r6
 8013592:	f7fe f9da 	bl	801194a <memcpy>
 8013596:	4621      	mov	r1, r4
 8013598:	4640      	mov	r0, r8
 801359a:	f7ff f851 	bl	8012640 <_free_r>
 801359e:	463c      	mov	r4, r7
 80135a0:	e7e0      	b.n	8013564 <_realloc_r+0x1e>

080135a2 <__ascii_wctomb>:
 80135a2:	4603      	mov	r3, r0
 80135a4:	4608      	mov	r0, r1
 80135a6:	b141      	cbz	r1, 80135ba <__ascii_wctomb+0x18>
 80135a8:	2aff      	cmp	r2, #255	@ 0xff
 80135aa:	d904      	bls.n	80135b6 <__ascii_wctomb+0x14>
 80135ac:	228a      	movs	r2, #138	@ 0x8a
 80135ae:	601a      	str	r2, [r3, #0]
 80135b0:	f04f 30ff 	mov.w	r0, #4294967295
 80135b4:	4770      	bx	lr
 80135b6:	700a      	strb	r2, [r1, #0]
 80135b8:	2001      	movs	r0, #1
 80135ba:	4770      	bx	lr

080135bc <__sfputc_r>:
 80135bc:	6893      	ldr	r3, [r2, #8]
 80135be:	3b01      	subs	r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	b410      	push	{r4}
 80135c4:	6093      	str	r3, [r2, #8]
 80135c6:	da08      	bge.n	80135da <__sfputc_r+0x1e>
 80135c8:	6994      	ldr	r4, [r2, #24]
 80135ca:	42a3      	cmp	r3, r4
 80135cc:	db01      	blt.n	80135d2 <__sfputc_r+0x16>
 80135ce:	290a      	cmp	r1, #10
 80135d0:	d103      	bne.n	80135da <__sfputc_r+0x1e>
 80135d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135d6:	f7ff becb 	b.w	8013370 <__swbuf_r>
 80135da:	6813      	ldr	r3, [r2, #0]
 80135dc:	1c58      	adds	r0, r3, #1
 80135de:	6010      	str	r0, [r2, #0]
 80135e0:	7019      	strb	r1, [r3, #0]
 80135e2:	4608      	mov	r0, r1
 80135e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <__sfputs_r>:
 80135ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ec:	4606      	mov	r6, r0
 80135ee:	460f      	mov	r7, r1
 80135f0:	4614      	mov	r4, r2
 80135f2:	18d5      	adds	r5, r2, r3
 80135f4:	42ac      	cmp	r4, r5
 80135f6:	d101      	bne.n	80135fc <__sfputs_r+0x12>
 80135f8:	2000      	movs	r0, #0
 80135fa:	e007      	b.n	801360c <__sfputs_r+0x22>
 80135fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013600:	463a      	mov	r2, r7
 8013602:	4630      	mov	r0, r6
 8013604:	f7ff ffda 	bl	80135bc <__sfputc_r>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d1f3      	bne.n	80135f4 <__sfputs_r+0xa>
 801360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013610 <_vfiprintf_r>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	460d      	mov	r5, r1
 8013616:	b09d      	sub	sp, #116	@ 0x74
 8013618:	4614      	mov	r4, r2
 801361a:	4698      	mov	r8, r3
 801361c:	4606      	mov	r6, r0
 801361e:	b118      	cbz	r0, 8013628 <_vfiprintf_r+0x18>
 8013620:	6a03      	ldr	r3, [r0, #32]
 8013622:	b90b      	cbnz	r3, 8013628 <_vfiprintf_r+0x18>
 8013624:	f7fd ffe4 	bl	80115f0 <__sinit>
 8013628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801362a:	07d9      	lsls	r1, r3, #31
 801362c:	d405      	bmi.n	801363a <_vfiprintf_r+0x2a>
 801362e:	89ab      	ldrh	r3, [r5, #12]
 8013630:	059a      	lsls	r2, r3, #22
 8013632:	d402      	bmi.n	801363a <_vfiprintf_r+0x2a>
 8013634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013636:	f7fe f97e 	bl	8011936 <__retarget_lock_acquire_recursive>
 801363a:	89ab      	ldrh	r3, [r5, #12]
 801363c:	071b      	lsls	r3, r3, #28
 801363e:	d501      	bpl.n	8013644 <_vfiprintf_r+0x34>
 8013640:	692b      	ldr	r3, [r5, #16]
 8013642:	b99b      	cbnz	r3, 801366c <_vfiprintf_r+0x5c>
 8013644:	4629      	mov	r1, r5
 8013646:	4630      	mov	r0, r6
 8013648:	f7ff fed0 	bl	80133ec <__swsetup_r>
 801364c:	b170      	cbz	r0, 801366c <_vfiprintf_r+0x5c>
 801364e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013650:	07dc      	lsls	r4, r3, #31
 8013652:	d504      	bpl.n	801365e <_vfiprintf_r+0x4e>
 8013654:	f04f 30ff 	mov.w	r0, #4294967295
 8013658:	b01d      	add	sp, #116	@ 0x74
 801365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365e:	89ab      	ldrh	r3, [r5, #12]
 8013660:	0598      	lsls	r0, r3, #22
 8013662:	d4f7      	bmi.n	8013654 <_vfiprintf_r+0x44>
 8013664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013666:	f7fe f967 	bl	8011938 <__retarget_lock_release_recursive>
 801366a:	e7f3      	b.n	8013654 <_vfiprintf_r+0x44>
 801366c:	2300      	movs	r3, #0
 801366e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013670:	2320      	movs	r3, #32
 8013672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013676:	f8cd 800c 	str.w	r8, [sp, #12]
 801367a:	2330      	movs	r3, #48	@ 0x30
 801367c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801382c <_vfiprintf_r+0x21c>
 8013680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013684:	f04f 0901 	mov.w	r9, #1
 8013688:	4623      	mov	r3, r4
 801368a:	469a      	mov	sl, r3
 801368c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013690:	b10a      	cbz	r2, 8013696 <_vfiprintf_r+0x86>
 8013692:	2a25      	cmp	r2, #37	@ 0x25
 8013694:	d1f9      	bne.n	801368a <_vfiprintf_r+0x7a>
 8013696:	ebba 0b04 	subs.w	fp, sl, r4
 801369a:	d00b      	beq.n	80136b4 <_vfiprintf_r+0xa4>
 801369c:	465b      	mov	r3, fp
 801369e:	4622      	mov	r2, r4
 80136a0:	4629      	mov	r1, r5
 80136a2:	4630      	mov	r0, r6
 80136a4:	f7ff ffa1 	bl	80135ea <__sfputs_r>
 80136a8:	3001      	adds	r0, #1
 80136aa:	f000 80a7 	beq.w	80137fc <_vfiprintf_r+0x1ec>
 80136ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136b0:	445a      	add	r2, fp
 80136b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80136b4:	f89a 3000 	ldrb.w	r3, [sl]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f000 809f 	beq.w	80137fc <_vfiprintf_r+0x1ec>
 80136be:	2300      	movs	r3, #0
 80136c0:	f04f 32ff 	mov.w	r2, #4294967295
 80136c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136c8:	f10a 0a01 	add.w	sl, sl, #1
 80136cc:	9304      	str	r3, [sp, #16]
 80136ce:	9307      	str	r3, [sp, #28]
 80136d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80136d6:	4654      	mov	r4, sl
 80136d8:	2205      	movs	r2, #5
 80136da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136de:	4853      	ldr	r0, [pc, #332]	@ (801382c <_vfiprintf_r+0x21c>)
 80136e0:	f7ec fd76 	bl	80001d0 <memchr>
 80136e4:	9a04      	ldr	r2, [sp, #16]
 80136e6:	b9d8      	cbnz	r0, 8013720 <_vfiprintf_r+0x110>
 80136e8:	06d1      	lsls	r1, r2, #27
 80136ea:	bf44      	itt	mi
 80136ec:	2320      	movmi	r3, #32
 80136ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136f2:	0713      	lsls	r3, r2, #28
 80136f4:	bf44      	itt	mi
 80136f6:	232b      	movmi	r3, #43	@ 0x2b
 80136f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013700:	2b2a      	cmp	r3, #42	@ 0x2a
 8013702:	d015      	beq.n	8013730 <_vfiprintf_r+0x120>
 8013704:	9a07      	ldr	r2, [sp, #28]
 8013706:	4654      	mov	r4, sl
 8013708:	2000      	movs	r0, #0
 801370a:	f04f 0c0a 	mov.w	ip, #10
 801370e:	4621      	mov	r1, r4
 8013710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013714:	3b30      	subs	r3, #48	@ 0x30
 8013716:	2b09      	cmp	r3, #9
 8013718:	d94b      	bls.n	80137b2 <_vfiprintf_r+0x1a2>
 801371a:	b1b0      	cbz	r0, 801374a <_vfiprintf_r+0x13a>
 801371c:	9207      	str	r2, [sp, #28]
 801371e:	e014      	b.n	801374a <_vfiprintf_r+0x13a>
 8013720:	eba0 0308 	sub.w	r3, r0, r8
 8013724:	fa09 f303 	lsl.w	r3, r9, r3
 8013728:	4313      	orrs	r3, r2
 801372a:	9304      	str	r3, [sp, #16]
 801372c:	46a2      	mov	sl, r4
 801372e:	e7d2      	b.n	80136d6 <_vfiprintf_r+0xc6>
 8013730:	9b03      	ldr	r3, [sp, #12]
 8013732:	1d19      	adds	r1, r3, #4
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	9103      	str	r1, [sp, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	bfbb      	ittet	lt
 801373c:	425b      	neglt	r3, r3
 801373e:	f042 0202 	orrlt.w	r2, r2, #2
 8013742:	9307      	strge	r3, [sp, #28]
 8013744:	9307      	strlt	r3, [sp, #28]
 8013746:	bfb8      	it	lt
 8013748:	9204      	strlt	r2, [sp, #16]
 801374a:	7823      	ldrb	r3, [r4, #0]
 801374c:	2b2e      	cmp	r3, #46	@ 0x2e
 801374e:	d10a      	bne.n	8013766 <_vfiprintf_r+0x156>
 8013750:	7863      	ldrb	r3, [r4, #1]
 8013752:	2b2a      	cmp	r3, #42	@ 0x2a
 8013754:	d132      	bne.n	80137bc <_vfiprintf_r+0x1ac>
 8013756:	9b03      	ldr	r3, [sp, #12]
 8013758:	1d1a      	adds	r2, r3, #4
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	9203      	str	r2, [sp, #12]
 801375e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013762:	3402      	adds	r4, #2
 8013764:	9305      	str	r3, [sp, #20]
 8013766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801383c <_vfiprintf_r+0x22c>
 801376a:	7821      	ldrb	r1, [r4, #0]
 801376c:	2203      	movs	r2, #3
 801376e:	4650      	mov	r0, sl
 8013770:	f7ec fd2e 	bl	80001d0 <memchr>
 8013774:	b138      	cbz	r0, 8013786 <_vfiprintf_r+0x176>
 8013776:	9b04      	ldr	r3, [sp, #16]
 8013778:	eba0 000a 	sub.w	r0, r0, sl
 801377c:	2240      	movs	r2, #64	@ 0x40
 801377e:	4082      	lsls	r2, r0
 8013780:	4313      	orrs	r3, r2
 8013782:	3401      	adds	r4, #1
 8013784:	9304      	str	r3, [sp, #16]
 8013786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801378a:	4829      	ldr	r0, [pc, #164]	@ (8013830 <_vfiprintf_r+0x220>)
 801378c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013790:	2206      	movs	r2, #6
 8013792:	f7ec fd1d 	bl	80001d0 <memchr>
 8013796:	2800      	cmp	r0, #0
 8013798:	d03f      	beq.n	801381a <_vfiprintf_r+0x20a>
 801379a:	4b26      	ldr	r3, [pc, #152]	@ (8013834 <_vfiprintf_r+0x224>)
 801379c:	bb1b      	cbnz	r3, 80137e6 <_vfiprintf_r+0x1d6>
 801379e:	9b03      	ldr	r3, [sp, #12]
 80137a0:	3307      	adds	r3, #7
 80137a2:	f023 0307 	bic.w	r3, r3, #7
 80137a6:	3308      	adds	r3, #8
 80137a8:	9303      	str	r3, [sp, #12]
 80137aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ac:	443b      	add	r3, r7
 80137ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80137b0:	e76a      	b.n	8013688 <_vfiprintf_r+0x78>
 80137b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80137b6:	460c      	mov	r4, r1
 80137b8:	2001      	movs	r0, #1
 80137ba:	e7a8      	b.n	801370e <_vfiprintf_r+0xfe>
 80137bc:	2300      	movs	r3, #0
 80137be:	3401      	adds	r4, #1
 80137c0:	9305      	str	r3, [sp, #20]
 80137c2:	4619      	mov	r1, r3
 80137c4:	f04f 0c0a 	mov.w	ip, #10
 80137c8:	4620      	mov	r0, r4
 80137ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137ce:	3a30      	subs	r2, #48	@ 0x30
 80137d0:	2a09      	cmp	r2, #9
 80137d2:	d903      	bls.n	80137dc <_vfiprintf_r+0x1cc>
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d0c6      	beq.n	8013766 <_vfiprintf_r+0x156>
 80137d8:	9105      	str	r1, [sp, #20]
 80137da:	e7c4      	b.n	8013766 <_vfiprintf_r+0x156>
 80137dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80137e0:	4604      	mov	r4, r0
 80137e2:	2301      	movs	r3, #1
 80137e4:	e7f0      	b.n	80137c8 <_vfiprintf_r+0x1b8>
 80137e6:	ab03      	add	r3, sp, #12
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	462a      	mov	r2, r5
 80137ec:	4b12      	ldr	r3, [pc, #72]	@ (8013838 <_vfiprintf_r+0x228>)
 80137ee:	a904      	add	r1, sp, #16
 80137f0:	4630      	mov	r0, r6
 80137f2:	f7fd fab9 	bl	8010d68 <_printf_float>
 80137f6:	4607      	mov	r7, r0
 80137f8:	1c78      	adds	r0, r7, #1
 80137fa:	d1d6      	bne.n	80137aa <_vfiprintf_r+0x19a>
 80137fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137fe:	07d9      	lsls	r1, r3, #31
 8013800:	d405      	bmi.n	801380e <_vfiprintf_r+0x1fe>
 8013802:	89ab      	ldrh	r3, [r5, #12]
 8013804:	059a      	lsls	r2, r3, #22
 8013806:	d402      	bmi.n	801380e <_vfiprintf_r+0x1fe>
 8013808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801380a:	f7fe f895 	bl	8011938 <__retarget_lock_release_recursive>
 801380e:	89ab      	ldrh	r3, [r5, #12]
 8013810:	065b      	lsls	r3, r3, #25
 8013812:	f53f af1f 	bmi.w	8013654 <_vfiprintf_r+0x44>
 8013816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013818:	e71e      	b.n	8013658 <_vfiprintf_r+0x48>
 801381a:	ab03      	add	r3, sp, #12
 801381c:	9300      	str	r3, [sp, #0]
 801381e:	462a      	mov	r2, r5
 8013820:	4b05      	ldr	r3, [pc, #20]	@ (8013838 <_vfiprintf_r+0x228>)
 8013822:	a904      	add	r1, sp, #16
 8013824:	4630      	mov	r0, r6
 8013826:	f7fd fd37 	bl	8011298 <_printf_i>
 801382a:	e7e4      	b.n	80137f6 <_vfiprintf_r+0x1e6>
 801382c:	08014db8 	.word	0x08014db8
 8013830:	08014dc2 	.word	0x08014dc2
 8013834:	08010d69 	.word	0x08010d69
 8013838:	080135eb 	.word	0x080135eb
 801383c:	08014dbe 	.word	0x08014dbe

08013840 <__swhatbuf_r>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	460c      	mov	r4, r1
 8013844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013848:	2900      	cmp	r1, #0
 801384a:	b096      	sub	sp, #88	@ 0x58
 801384c:	4615      	mov	r5, r2
 801384e:	461e      	mov	r6, r3
 8013850:	da0d      	bge.n	801386e <__swhatbuf_r+0x2e>
 8013852:	89a3      	ldrh	r3, [r4, #12]
 8013854:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013858:	f04f 0100 	mov.w	r1, #0
 801385c:	bf14      	ite	ne
 801385e:	2340      	movne	r3, #64	@ 0x40
 8013860:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013864:	2000      	movs	r0, #0
 8013866:	6031      	str	r1, [r6, #0]
 8013868:	602b      	str	r3, [r5, #0]
 801386a:	b016      	add	sp, #88	@ 0x58
 801386c:	bd70      	pop	{r4, r5, r6, pc}
 801386e:	466a      	mov	r2, sp
 8013870:	f000 f878 	bl	8013964 <_fstat_r>
 8013874:	2800      	cmp	r0, #0
 8013876:	dbec      	blt.n	8013852 <__swhatbuf_r+0x12>
 8013878:	9901      	ldr	r1, [sp, #4]
 801387a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801387e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013882:	4259      	negs	r1, r3
 8013884:	4159      	adcs	r1, r3
 8013886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801388a:	e7eb      	b.n	8013864 <__swhatbuf_r+0x24>

0801388c <__smakebuf_r>:
 801388c:	898b      	ldrh	r3, [r1, #12]
 801388e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013890:	079d      	lsls	r5, r3, #30
 8013892:	4606      	mov	r6, r0
 8013894:	460c      	mov	r4, r1
 8013896:	d507      	bpl.n	80138a8 <__smakebuf_r+0x1c>
 8013898:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801389c:	6023      	str	r3, [r4, #0]
 801389e:	6123      	str	r3, [r4, #16]
 80138a0:	2301      	movs	r3, #1
 80138a2:	6163      	str	r3, [r4, #20]
 80138a4:	b003      	add	sp, #12
 80138a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138a8:	ab01      	add	r3, sp, #4
 80138aa:	466a      	mov	r2, sp
 80138ac:	f7ff ffc8 	bl	8013840 <__swhatbuf_r>
 80138b0:	9f00      	ldr	r7, [sp, #0]
 80138b2:	4605      	mov	r5, r0
 80138b4:	4639      	mov	r1, r7
 80138b6:	4630      	mov	r0, r6
 80138b8:	f7fe ff36 	bl	8012728 <_malloc_r>
 80138bc:	b948      	cbnz	r0, 80138d2 <__smakebuf_r+0x46>
 80138be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138c2:	059a      	lsls	r2, r3, #22
 80138c4:	d4ee      	bmi.n	80138a4 <__smakebuf_r+0x18>
 80138c6:	f023 0303 	bic.w	r3, r3, #3
 80138ca:	f043 0302 	orr.w	r3, r3, #2
 80138ce:	81a3      	strh	r3, [r4, #12]
 80138d0:	e7e2      	b.n	8013898 <__smakebuf_r+0xc>
 80138d2:	89a3      	ldrh	r3, [r4, #12]
 80138d4:	6020      	str	r0, [r4, #0]
 80138d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138da:	81a3      	strh	r3, [r4, #12]
 80138dc:	9b01      	ldr	r3, [sp, #4]
 80138de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80138e2:	b15b      	cbz	r3, 80138fc <__smakebuf_r+0x70>
 80138e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138e8:	4630      	mov	r0, r6
 80138ea:	f000 f84d 	bl	8013988 <_isatty_r>
 80138ee:	b128      	cbz	r0, 80138fc <__smakebuf_r+0x70>
 80138f0:	89a3      	ldrh	r3, [r4, #12]
 80138f2:	f023 0303 	bic.w	r3, r3, #3
 80138f6:	f043 0301 	orr.w	r3, r3, #1
 80138fa:	81a3      	strh	r3, [r4, #12]
 80138fc:	89a3      	ldrh	r3, [r4, #12]
 80138fe:	431d      	orrs	r5, r3
 8013900:	81a5      	strh	r5, [r4, #12]
 8013902:	e7cf      	b.n	80138a4 <__smakebuf_r+0x18>

08013904 <_raise_r>:
 8013904:	291f      	cmp	r1, #31
 8013906:	b538      	push	{r3, r4, r5, lr}
 8013908:	4605      	mov	r5, r0
 801390a:	460c      	mov	r4, r1
 801390c:	d904      	bls.n	8013918 <_raise_r+0x14>
 801390e:	2316      	movs	r3, #22
 8013910:	6003      	str	r3, [r0, #0]
 8013912:	f04f 30ff 	mov.w	r0, #4294967295
 8013916:	bd38      	pop	{r3, r4, r5, pc}
 8013918:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801391a:	b112      	cbz	r2, 8013922 <_raise_r+0x1e>
 801391c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013920:	b94b      	cbnz	r3, 8013936 <_raise_r+0x32>
 8013922:	4628      	mov	r0, r5
 8013924:	f000 f852 	bl	80139cc <_getpid_r>
 8013928:	4622      	mov	r2, r4
 801392a:	4601      	mov	r1, r0
 801392c:	4628      	mov	r0, r5
 801392e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013932:	f000 b839 	b.w	80139a8 <_kill_r>
 8013936:	2b01      	cmp	r3, #1
 8013938:	d00a      	beq.n	8013950 <_raise_r+0x4c>
 801393a:	1c59      	adds	r1, r3, #1
 801393c:	d103      	bne.n	8013946 <_raise_r+0x42>
 801393e:	2316      	movs	r3, #22
 8013940:	6003      	str	r3, [r0, #0]
 8013942:	2001      	movs	r0, #1
 8013944:	e7e7      	b.n	8013916 <_raise_r+0x12>
 8013946:	2100      	movs	r1, #0
 8013948:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801394c:	4620      	mov	r0, r4
 801394e:	4798      	blx	r3
 8013950:	2000      	movs	r0, #0
 8013952:	e7e0      	b.n	8013916 <_raise_r+0x12>

08013954 <raise>:
 8013954:	4b02      	ldr	r3, [pc, #8]	@ (8013960 <raise+0xc>)
 8013956:	4601      	mov	r1, r0
 8013958:	6818      	ldr	r0, [r3, #0]
 801395a:	f7ff bfd3 	b.w	8013904 <_raise_r>
 801395e:	bf00      	nop
 8013960:	2000029c 	.word	0x2000029c

08013964 <_fstat_r>:
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	4d07      	ldr	r5, [pc, #28]	@ (8013984 <_fstat_r+0x20>)
 8013968:	2300      	movs	r3, #0
 801396a:	4604      	mov	r4, r0
 801396c:	4608      	mov	r0, r1
 801396e:	4611      	mov	r1, r2
 8013970:	602b      	str	r3, [r5, #0]
 8013972:	f7f4 fda7 	bl	80084c4 <_fstat>
 8013976:	1c43      	adds	r3, r0, #1
 8013978:	d102      	bne.n	8013980 <_fstat_r+0x1c>
 801397a:	682b      	ldr	r3, [r5, #0]
 801397c:	b103      	cbz	r3, 8013980 <_fstat_r+0x1c>
 801397e:	6023      	str	r3, [r4, #0]
 8013980:	bd38      	pop	{r3, r4, r5, pc}
 8013982:	bf00      	nop
 8013984:	2000cc94 	.word	0x2000cc94

08013988 <_isatty_r>:
 8013988:	b538      	push	{r3, r4, r5, lr}
 801398a:	4d06      	ldr	r5, [pc, #24]	@ (80139a4 <_isatty_r+0x1c>)
 801398c:	2300      	movs	r3, #0
 801398e:	4604      	mov	r4, r0
 8013990:	4608      	mov	r0, r1
 8013992:	602b      	str	r3, [r5, #0]
 8013994:	f7f4 fda6 	bl	80084e4 <_isatty>
 8013998:	1c43      	adds	r3, r0, #1
 801399a:	d102      	bne.n	80139a2 <_isatty_r+0x1a>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	b103      	cbz	r3, 80139a2 <_isatty_r+0x1a>
 80139a0:	6023      	str	r3, [r4, #0]
 80139a2:	bd38      	pop	{r3, r4, r5, pc}
 80139a4:	2000cc94 	.word	0x2000cc94

080139a8 <_kill_r>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	4d07      	ldr	r5, [pc, #28]	@ (80139c8 <_kill_r+0x20>)
 80139ac:	2300      	movs	r3, #0
 80139ae:	4604      	mov	r4, r0
 80139b0:	4608      	mov	r0, r1
 80139b2:	4611      	mov	r1, r2
 80139b4:	602b      	str	r3, [r5, #0]
 80139b6:	f7f4 fd25 	bl	8008404 <_kill>
 80139ba:	1c43      	adds	r3, r0, #1
 80139bc:	d102      	bne.n	80139c4 <_kill_r+0x1c>
 80139be:	682b      	ldr	r3, [r5, #0]
 80139c0:	b103      	cbz	r3, 80139c4 <_kill_r+0x1c>
 80139c2:	6023      	str	r3, [r4, #0]
 80139c4:	bd38      	pop	{r3, r4, r5, pc}
 80139c6:	bf00      	nop
 80139c8:	2000cc94 	.word	0x2000cc94

080139cc <_getpid_r>:
 80139cc:	f7f4 bd12 	b.w	80083f4 <_getpid>

080139d0 <_malloc_usable_size_r>:
 80139d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139d4:	1f18      	subs	r0, r3, #4
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	bfbc      	itt	lt
 80139da:	580b      	ldrlt	r3, [r1, r0]
 80139dc:	18c0      	addlt	r0, r0, r3
 80139de:	4770      	bx	lr

080139e0 <_init>:
 80139e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e2:	bf00      	nop
 80139e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139e6:	bc08      	pop	{r3}
 80139e8:	469e      	mov	lr, r3
 80139ea:	4770      	bx	lr

080139ec <_fini>:
 80139ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ee:	bf00      	nop
 80139f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139f2:	bc08      	pop	{r3}
 80139f4:	469e      	mov	lr, r3
 80139f6:	4770      	bx	lr
