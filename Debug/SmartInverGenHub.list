
SmartInverGenHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ca0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001504  08014e30  08014e30  00015e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_5x8_mf 000007db  08016334  08016334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  08016b0f  08016b0f  00017b0f  2**0
                  ALLOC
  5 .ARM          00000008  08016b10  08016b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08016b18  08016b18  00018470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08016b18  08016b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08016b2c  08016b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000470  20000000  08016b30  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00018470  2**0
                  CONTENTS
 11 .bss          00011858  20000470  20000470  00018470  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011cc8  20011cc8  00018470  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00018470  2**0
                  CONTENTS, READONLY
 14 .debug_info   000692f4  00000000  00000000  000184a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c0fb  00000000  00000000  00081794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003640  00000000  00000000  0008d890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002940  00000000  00000000  00090ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003635b  00000000  00000000  00093810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c637  00000000  00000000  000c9b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001098f4  00000000  00000000  001161a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021fa96  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f240  00000000  00000000  0021fadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0022ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000470 	.word	0x20000470
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014e18 	.word	0x08014e18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000474 	.word	0x20000474
 80001cc:	08014e18 	.word	0x08014e18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b5 	b.w	8001014 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96a 	b.w	8001014 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <_ZL16TurnOffGeneratorv>:
uint32_t DisplayChargeStartTime = 0;
uint32_t DisplayChargeEndTime = 0;


static void TurnOffGenerator()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(RelayCont_GPIO_Port, RelayCont_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2108      	movs	r1, #8
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <_ZL16TurnOffGeneratorv+0x14>)
 8001022:	f009 fe0d 	bl	800ac40 <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020800 	.word	0x40020800

08001030 <_ZL15TurnOnGeneratorv>:

static void TurnOnGenerator()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(RelayCont_GPIO_Port, RelayCont_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <_ZL15TurnOnGeneratorv+0x14>)
 800103a:	f009 fe01 	bl	800ac40 <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020800 	.word	0x40020800

08001048 <_ZL18SwitchingLoadLogicP17ControlData_Queue>:

static void SwitchingLoadLogic(struct ControlData_Queue *ControlData)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]


//also track charging time here then

	if(ControlData->SoC <= SOC_LOW)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001056:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800105a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d810      	bhi.n	8001086 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x3e>
	{
		TurnOnGenerator();
 8001064:	f7ff ffe4 	bl	8001030 <_ZL15TurnOnGeneratorv>
		ControlData->SelectedSource = static_cast<uint8_t>(sources::Generator);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		ControlData->batteryChargeDischargeStartTime[0] = ControlData->timestamp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		DisplayChargeStartTime = ControlData->batteryChargeDischargeStartTime[0];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001080:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x7c>)
 8001082:	6013      	str	r3, [r2, #0]





}
 8001084:	e01a      	b.n	80010bc <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x74>
	else if(ControlData->SoC <= SOC_HIGH)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800108c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80010c8 <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x80>
 8001090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d900      	bls.n	800109c <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x54>
}
 800109a:	e00f      	b.n	80010bc <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x74>
		TurnOffGenerator();
 800109c:	f7ff ffbc 	bl	8001018 <_ZL16TurnOffGeneratorv>
		ControlData->SelectedSource = static_cast<uint8_t>(sources::Battery);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		ControlData->batteryChargeDischargeEndTime[0] = ControlData->timestamp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
		DisplayChargeEndTime = ControlData->batteryChargeDischargeEndTime[0];
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <_ZL18SwitchingLoadLogicP17ControlData_Queue+0x84>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000490 	.word	0x20000490
 80010c8:	42be0000 	.word	0x42be0000
 80010cc:	20000494 	.word	0x20000494

080010d0 <_Z18getChargeTimestampv>:
{
	return sourceStatus;
}

uint32_t getChargeTimestamp()
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
   return DisplayChargeStartTime;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <_Z18getChargeTimestampv+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000490 	.word	0x20000490

080010e8 <_Z21getDischargeTimestampv>:

uint32_t getDischargeTimestamp()
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	  return DisplayChargeEndTime;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <_Z21getDischargeTimestampv+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000494 	.word	0x20000494

08001100 <_Z11ControlTaskPv>:


void ControlTask(void *pvParameters) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b0c6      	sub	sp, #280	@ 0x118
 8001104:	af02      	add	r7, sp, #8
 8001106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800110a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800110e:	6018      	str	r0, [r3, #0]



	struct ControlData_Queue ControlData = { 0 };
 8001110:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001114:	22a4      	movs	r2, #164	@ 0xa4
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f011 fc5a 	bl	80129d2 <memset>

	struct SoCData_Queue SoCData = { 0 };
 800111e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]

	std::strcpy(ControlData.uniqueID, UniqueID::GetUid());
 800112a:	f000 fd9b 	bl	8001c64 <_ZN8UniqueID6GetUidEv>
 800112e:	4602      	mov	r2, r0
 8001130:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f011 fe1b 	bl	8012d72 <strcpy>

	ControlData.SelectedSource = static_cast<uint8_t>(sources::Battery);
 800113c:	2300      	movs	r3, #0
 800113e:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8

	sourceStatus = ControlData.SelectedSource;
 8001142:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8001146:	4b46      	ldr	r3, [pc, #280]	@ (8001260 <_Z11ControlTaskPv+0x160>)
 8001148:	701a      	strb	r2, [r3, #0]
	sensor_pzem::PZEM_004T::PZEM PZEM1_Data;
	sensor_pzem::PZEM_004T::PZEM PZEM2_Data;
	sensor_pzem::PZEM_004T::PZEM PZEM3_Data;

	TurnOffGenerator();
 800114a:	f7ff ff65 	bl	8001018 <_ZL16TurnOffGeneratorv>



	while (1) {

		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 800114e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001152:	3310      	adds	r3, #16
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	4842      	ldr	r0, [pc, #264]	@ (8001264 <_Z11ControlTaskPv+0x164>)
 800115a:	f003 fea4 	bl	8004ea6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>

		liquidSensor.Measurement_loop(&ControlData.fuelPer,
 800115e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001160:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001164:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001168:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800116c:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 8001170:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001174:	3378      	adds	r3, #120	@ 0x78
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800117c:	3374      	adds	r3, #116	@ 0x74
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4603      	mov	r3, r0
 8001182:	4839      	ldr	r0, [pc, #228]	@ (8001268 <_Z11ControlTaskPv+0x168>)
 8001184:	f003 f9a2 	bl	80044cc <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopEPhPfmPmS3_>
				&ControlData.fuelConsp, ControlData.timestamp,
				&ControlData.refuelingStartTime, &ControlData.refuelingEndTime);

		PZEM1.read(&PZEM1_Data);
 8001188:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800118c:	4619      	mov	r1, r3
 800118e:	4837      	ldr	r0, [pc, #220]	@ (800126c <_Z11ControlTaskPv+0x16c>)
 8001190:	f003 fbe6 	bl	8004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
		PZEM2.read(&PZEM2_Data);
 8001194:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001198:	4619      	mov	r1, r3
 800119a:	4835      	ldr	r0, [pc, #212]	@ (8001270 <_Z11ControlTaskPv+0x170>)
 800119c:	f003 fbe0 	bl	8004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
		PZEM3.read(&PZEM3_Data);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4619      	mov	r1, r3
 80011a6:	4833      	ldr	r0, [pc, #204]	@ (8001274 <_Z11ControlTaskPv+0x174>)
 80011a8:	f003 fbda 	bl	8004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>

		ControlData.V_1 = PZEM1_Data.voltage;
 80011ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		ControlData.I_1 = PZEM1_Data.current;
 80011b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		ControlData.P_1 = PZEM1_Data.power;
 80011b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		ControlData.V_2 = PZEM2_Data.voltage;
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		ControlData.I_2 = PZEM2_Data.current;
 80011c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		ControlData.P_2 = PZEM2_Data.power;
 80011ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		ControlData.V_3 = PZEM3_Data.voltage;
 80011d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		ControlData.I_3 = PZEM3_Data.current;
 80011de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		ControlData.P_3 = PZEM3_Data.power;
 80011ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		ControlData.Freq = PZEM1_Data.frequency;
 80011fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8



		ControlDataQueue.queueSend(reinterpret_cast<void*>(&ControlData));
 8001200:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001204:	4619      	mov	r1, r3
 8001206:	481c      	ldr	r0, [pc, #112]	@ (8001278 <_Z11ControlTaskPv+0x178>)
 8001208:	f003 fd1e 	bl	8004c48 <_ZN11System_Rtos15freertos_queues9queueSendEPv>

		if(SoCDataQueue.queueReceive((void *)&SoCData) == SoCDataQueue.queues_recived)
 800120c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001210:	4619      	mov	r1, r3
 8001212:	481a      	ldr	r0, [pc, #104]	@ (800127c <_Z11ControlTaskPv+0x17c>)
 8001214:	f003 fd35 	bl	8004c82 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <_Z11ControlTaskPv+0x13a>
			{
             /*Do something here when you want to receive something*/
			ControlData.DcVolt = SoCData.BattVolt;
 8001228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800122a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			ControlData.DcCurrent = SoCData.BattCurr;
 800122e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001230:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			ControlData.SoC = SoCData.BattSoC;
 8001234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			}


		SwitchingLoadLogic(&ControlData);
 800123a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff02 	bl	8001048 <_ZL18SwitchingLoadLogicP17ControlData_Queue>
		sourceStatus = ControlData.SelectedSource;
 8001244:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <_Z11ControlTaskPv+0x160>)
 800124a:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 800124c:	2102      	movs	r1, #2
 800124e:	480c      	ldr	r0, [pc, #48]	@ (8001280 <_Z11ControlTaskPv+0x180>)
 8001250:	f009 fd0f 	bl	800ac72 <HAL_GPIO_TogglePin>
		System_Rtos::delay(2000);
 8001254:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001258:	f003 fc6e 	bl	8004b38 <_ZN11System_Rtos5delayEm>
		stmRTC.getTime(nullptr, nullptr, &ControlData.timestamp);
 800125c:	e777      	b.n	800114e <_Z11ControlTaskPv+0x4e>
 800125e:	bf00      	nop
 8001260:	2000048d 	.word	0x2000048d
 8001264:	20001978 	.word	0x20001978
 8001268:	20001988 	.word	0x20001988
 800126c:	200019dc 	.word	0x200019dc
 8001270:	20001a04 	.word	0x20001a04
 8001274:	20001a2c 	.word	0x20001a2c
 8001278:	200018b4 	.word	0x200018b4
 800127c:	2000191c 	.word	0x2000191c
 8001280:	40020000 	.word	0x40020000

08001284 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129a:	4293      	cmp	r3, r2
 800129c:	d102      	bne.n	80012a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
System_sys::Parsing_Checking parsing;
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80012a0:	f004 f8ff 	bl	80054a2 <_ZN10System_sys16Parsing_CheckingC1Ev>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000048c 	.word	0x2000048c

080012b0 <_GLOBAL__sub_I_sDate>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff ffe3 	bl	8001284 <_Z41__static_initialization_and_destruction_0ii>
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv>:

u8g2_t u8g2_M;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	72fb      	strb	r3, [r7, #11]
 80012ce:	4613      	mov	r3, r2
 80012d0:	72bb      	strb	r3, [r7, #10]
      /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
      switch(msg)
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	3b28      	subs	r3, #40	@ 0x28
 80012d6:	2b23      	cmp	r3, #35	@ 0x23
 80012d8:	d866      	bhi.n	80013a8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
 80012da:	a201      	add	r2, pc, #4	@ (adr r2, 80012e0 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x20>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080013a9 	.word	0x080013a9
 80012e4:	08001371 	.word	0x08001371
 80012e8:	080013a9 	.word	0x080013a9
 80012ec:	080013a9 	.word	0x080013a9
 80012f0:	080013a9 	.word	0x080013a9
 80012f4:	080013a9 	.word	0x080013a9
 80012f8:	080013a9 	.word	0x080013a9
 80012fc:	080013a9 	.word	0x080013a9
 8001300:	080013a9 	.word	0x080013a9
 8001304:	080013a9 	.word	0x080013a9
 8001308:	080013a9 	.word	0x080013a9
 800130c:	080013a9 	.word	0x080013a9
 8001310:	080013a9 	.word	0x080013a9
 8001314:	080013a9 	.word	0x080013a9
 8001318:	080013a9 	.word	0x080013a9
 800131c:	080013a9 	.word	0x080013a9
 8001320:	080013a9 	.word	0x080013a9
 8001324:	080013a9 	.word	0x080013a9
 8001328:	080013a9 	.word	0x080013a9
 800132c:	080013a9 	.word	0x080013a9
 8001330:	080013a9 	.word	0x080013a9
 8001334:	080013a9 	.word	0x080013a9
 8001338:	080013a9 	.word	0x080013a9
 800133c:	080013a9 	.word	0x080013a9
 8001340:	080013a9 	.word	0x080013a9
 8001344:	080013a9 	.word	0x080013a9
 8001348:	080013a9 	.word	0x080013a9
 800134c:	080013a9 	.word	0x080013a9
 8001350:	080013a9 	.word	0x080013a9
 8001354:	080013a9 	.word	0x080013a9
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013a9 	.word	0x080013a9
 8001360:	080013a9 	.word	0x080013a9
 8001364:	0800137b 	.word	0x0800137b
 8001368:	08001389 	.word	0x08001389
 800136c:	08001399 	.word	0x08001399
      case U8X8_MSG_GPIO_AND_DELAY_INIT:
          /* Insert codes for initialization */
          break;
      case U8X8_MSG_DELAY_MILLI:
          /* ms Delay */
       	System_Rtos::delay(arg_int);
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fbe0 	bl	8004b38 <_ZN11System_Rtos5delayEm>
          break;
 8001378:	e016      	b.n	80013a8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
      case U8X8_MSG_GPIO_CS:
          /* Insert codes for SS pin control */
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, (GPIO_PinState)arg_int);
 800137a:	7abb      	ldrb	r3, [r7, #10]
 800137c:	461a      	mov	r2, r3
 800137e:	2120      	movs	r1, #32
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 8001382:	f009 fc5d 	bl	800ac40 <HAL_GPIO_WritePin>

          break;
 8001386:	e00f      	b.n	80013a8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
      case U8X8_MSG_GPIO_DC:
          /* Insert codes for DC pin control */
            HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, (GPIO_PinState)arg_int);
 8001388:	7abb      	ldrb	r3, [r7, #10]
 800138a:	461a      	mov	r2, r3
 800138c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001390:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 8001392:	f009 fc55 	bl	800ac40 <HAL_GPIO_WritePin>

          break;
 8001396:	e007      	b.n	80013a8 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xe8>
      case U8X8_MSG_GPIO_RESET:
          /* Insert codes for RST pin control */
           HAL_GPIO_WritePin(DISPLAY_RES_GPIO_Port, DISPLAY_RES_Pin,  (GPIO_PinState)arg_int);
 8001398:	7abb      	ldrb	r3, [r7, #10]
 800139a:	461a      	mov	r2, r3
 800139c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0xf4>)
 80013a2:	f009 fc4d 	bl	800ac40 <HAL_GPIO_WritePin>

          break;
 80013a6:	bf00      	nop
      }
      return 1;
 80013a8:	2301      	movs	r3, #1
  }
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40020400 	.word	0x40020400

080013b8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	72bb      	strb	r3, [r7, #10]
      switch(msg) {
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	3b14      	subs	r3, #20
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d844      	bhi.n	800145c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa4>
 80013d2:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	08001461 	.word	0x08001461
 80013dc:	0800145d 	.word	0x0800145d
 80013e0:	0800145d 	.word	0x0800145d
 80013e4:	0800140d 	.word	0x0800140d
 80013e8:	0800142d 	.word	0x0800142d
 80013ec:	08001445 	.word	0x08001445
 80013f0:	0800145d 	.word	0x0800145d
 80013f4:	0800145d 	.word	0x0800145d
 80013f8:	0800145d 	.word	0x0800145d
 80013fc:	0800145d 	.word	0x0800145d
 8001400:	0800145d 	.word	0x0800145d
 8001404:	0800145d 	.word	0x0800145d
 8001408:	0800141f 	.word	0x0800141f
      case U8X8_MSG_BYTE_SEND:
          /* Insert codes to transmit data */
          HAL_SPI_Transmit(&OLEDSpi,(uint8_t *)arg_ptr, arg_int, 5000);
 800140c:	7abb      	ldrb	r3, [r7, #10]
 800140e:	b29a      	uxth	r2, r3
 8001410:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4815      	ldr	r0, [pc, #84]	@ (800146c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb4>)
 8001418:	f00b fe6f 	bl	800d0fa <HAL_SPI_Transmit>
           break;
 800141c:	e021      	b.n	8001462 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
          /* Insert codes to begin SPI transmission */

          break;
      case U8X8_MSG_BYTE_SET_DC:
          /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
          u8x8_gpio_SetDC(u8x8, arg_int);
 800141e:	7abb      	ldrb	r3, [r7, #10]
 8001420:	461a      	mov	r2, r3
 8001422:	214a      	movs	r1, #74	@ 0x4a
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f007 fc4d 	bl	8008cc4 <u8x8_gpio_call>
          break;
 800142a:	e01a      	b.n	8001462 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_START_TRANSFER:
          /* Select slave, U8X8_MSG_GPIO_CS will be called */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	2149      	movs	r1, #73	@ 0x49
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f007 fc44 	bl	8008cc4 <u8x8_gpio_call>
        	System_Rtos::delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f003 fb7b 	bl	8004b38 <_ZN11System_Rtos5delayEm>

          break;
 8001442:	e00e      	b.n	8001462 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      case U8X8_MSG_BYTE_END_TRANSFER:
    	  	System_Rtos::delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f003 fb77 	bl	8004b38 <_ZN11System_Rtos5delayEm>
          /* Insert codes to end SPI transmission */
          u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	785b      	ldrb	r3, [r3, #1]
 8001450:	461a      	mov	r2, r3
 8001452:	2149      	movs	r1, #73	@ 0x49
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f007 fc35 	bl	8008cc4 <u8x8_gpio_call>
          break;
 800145a:	e002      	b.n	8001462 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xaa>
      default:
          return 0;
 800145c:	2300      	movs	r3, #0
 800145e:	e001      	b.n	8001464 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
          break;
 8001460:	bf00      	nop
      }
      return 1;
 8001462:	2301      	movs	r3, #1
  }
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20002128 	.word	0x20002128

08001470 <_Z11DisplayTaskPv>:


void DisplayTask(void *pvParameters)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]

  u8g2_Setup_ssd1309_128x64_noname0_f(&u8g2_M, U8G2_R0, u8x8_byte_stm32_hw_spi,u8x8_stm32_gpio_and_delay);
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <_Z11DisplayTaskPv+0x64>)
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <_Z11DisplayTaskPv+0x68>)
 800147c:	4917      	ldr	r1, [pc, #92]	@ (80014dc <_Z11DisplayTaskPv+0x6c>)
 800147e:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 8001480:	f006 f89a 	bl	80075b8 <u8g2_Setup_ssd1309_128x64_noname0_f>
  u8g2_InitDisplay(&u8g2_M);
 8001484:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 8001486:	f007 fbee 	bl	8008c66 <u8x8_InitDisplay>
  u8g2_ClearBuffer(&u8g2_M);
 800148a:	4815      	ldr	r0, [pc, #84]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 800148c:	f006 f803 	bl	8007496 <u8g2_ClearBuffer>
  u8g2_SetPowerSave(&u8g2_M, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 8001494:	f007 fbf6 	bl	8008c84 <u8x8_SetPowerSave>
  u8g2_DrawXBM(&u8g2_M,32,0,imgcont::smartgrid.w,imgcont::smartgrid.h,imgcont::smartgrid.img);
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <_Z11DisplayTaskPv+0x74>)
 800149a:	7919      	ldrb	r1, [r3, #4]
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_Z11DisplayTaskPv+0x74>)
 800149e:	795b      	ldrb	r3, [r3, #5]
 80014a0:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <_Z11DisplayTaskPv+0x74>)
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	460b      	mov	r3, r1
 80014aa:	2200      	movs	r2, #0
 80014ac:	2120      	movs	r1, #32
 80014ae:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 80014b0:	f005 ff78 	bl	80073a4 <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2_M);
 80014b4:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 80014b6:	f006 f861 	bl	800757c <u8g2_SendBuffer>
  System_Rtos::delay(2000);
 80014ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014be:	f003 fb3b 	bl	8004b38 <_ZN11System_Rtos5delayEm>


	while(1)
	{

		UI::loop(&u8g2_M);
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <_Z11DisplayTaskPv+0x70>)
 80014c4:	f004 ff98 	bl	80063f8 <_ZN2UI4loopEP11u8g2_struct>
		System_Rtos::delay(500);
 80014c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014cc:	f003 fb34 	bl	8004b38 <_ZN11System_Rtos5delayEm>
		UI::loop(&u8g2_M);
 80014d0:	bf00      	nop
 80014d2:	e7f6      	b.n	80014c2 <_Z11DisplayTaskPv+0x52>
 80014d4:	080012c1 	.word	0x080012c1
 80014d8:	080013b9 	.word	0x080013b9
 80014dc:	08015ee8 	.word	0x08015ee8
 80014e0:	20000498 	.word	0x20000498
 80014e4:	08015e90 	.word	0x08015e90

080014e8 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f011 fa94 	bl	8012a22 <strstr>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_Z9ModemTaskPv>:


char command_buffer[255] = {0};


void ModemTask(void *pvParameters) {
 8001504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001508:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
 800150c:	af22      	add	r7, sp, #136	@ 0x88
 800150e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001512:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001516:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8001518:	48c9      	ldr	r0, [pc, #804]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 800151a:	f000 fd4f 	bl	8001fbc <_ZN5Modem8simA76724initEv>

	struct ModemData_Queue ModemData = { 0 };
 800151e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001522:	22d9      	movs	r2, #217	@ 0xd9
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f011 fa53 	bl	80129d2 <memset>

	struct ControlData_Queue ControlData = {0};
 800152c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001530:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001534:	4618      	mov	r0, r3
 8001536:	23a4      	movs	r3, #164	@ 0xa4
 8001538:	461a      	mov	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f011 fa49 	bl	80129d2 <memset>

	Modem::simA7672::UE_systemInfo cpsiInfo;
	Modem::simA7672::pdp_stat pdpinfo;
	Modem::simA7672::status modeminfo;
	Modem::simA7672::mqtt_flags mqttstartinfo = Modem::simA7672::mqtt_ERR;
 8001540:	2301      	movs	r3, #1
 8001542:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	Modem::simA7672::mqtt_flags mqttserverinfo = Modem::simA7672::mqtt_ERR;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee

	enum routine mqtt_routine = net_enable;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed


	std::strcpy(ModemData.serverAddr, "tcp://apfp7i6y92d6b-ats.iot.us-east-1.amazonaws.com:8883");
 8001552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001556:	334b      	adds	r3, #75	@ 0x4b
 8001558:	4aba      	ldr	r2, [pc, #744]	@ (8001844 <_Z9ModemTaskPv+0x340>)
 800155a:	4614      	mov	r4, r2
 800155c:	469c      	mov	ip, r3
 800155e:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001562:	4665      	mov	r5, ip
 8001564:	4626      	mov	r6, r4
 8001566:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001568:	6028      	str	r0, [r5, #0]
 800156a:	6069      	str	r1, [r5, #4]
 800156c:	60aa      	str	r2, [r5, #8]
 800156e:	60eb      	str	r3, [r5, #12]
 8001570:	3410      	adds	r4, #16
 8001572:	f10c 0c10 	add.w	ip, ip, #16
 8001576:	4574      	cmp	r4, lr
 8001578:	d1f3      	bne.n	8001562 <_Z9ModemTaskPv+0x5e>
 800157a:	4662      	mov	r2, ip
 800157c:	4623      	mov	r3, r4
 800157e:	cb03      	ldmia	r3!, {r0, r1}
 8001580:	6010      	str	r0, [r2, #0]
 8001582:	6051      	str	r1, [r2, #4]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	7213      	strb	r3, [r2, #8]
	std::strcpy(ModemData.apn, "zonginternet");
 8001588:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158c:	3337      	adds	r3, #55	@ 0x37
 800158e:	4aae      	ldr	r2, [pc, #696]	@ (8001848 <_Z9ModemTaskPv+0x344>)
 8001590:	461c      	mov	r4, r3
 8001592:	4613      	mov	r3, r2
 8001594:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001596:	6020      	str	r0, [r4, #0]
 8001598:	6061      	str	r1, [r4, #4]
 800159a:	60a2      	str	r2, [r4, #8]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	7323      	strb	r3, [r4, #12]
	std::strcpy(ModemData.mqttSubTopic, "TEST1");
 80015a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015a4:	33c3      	adds	r3, #195	@ 0xc3
 80015a6:	4aa9      	ldr	r2, [pc, #676]	@ (800184c <_Z9ModemTaskPv+0x348>)
 80015a8:	6810      	ldr	r0, [r2, #0]
 80015aa:	6018      	str	r0, [r3, #0]
 80015ac:	8892      	ldrh	r2, [r2, #4]
 80015ae:	809a      	strh	r2, [r3, #4]
	std::strcpy(ModemData.mqttPubTopic, "devicedata");
 80015b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b4:	33af      	adds	r3, #175	@ 0xaf
 80015b6:	49a6      	ldr	r1, [pc, #664]	@ (8001850 <_Z9ModemTaskPv+0x34c>)
 80015b8:	461a      	mov	r2, r3
 80015ba:	460b      	mov	r3, r1
 80015bc:	cb03      	ldmia	r3!, {r0, r1}
 80015be:	6010      	str	r0, [r2, #0]
 80015c0:	6051      	str	r1, [r2, #4]
 80015c2:	8819      	ldrh	r1, [r3, #0]
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	8111      	strh	r1, [r2, #8]
 80015c8:	7293      	strb	r3, [r2, #10]


	uint8_t mqtt_counter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

		//simA7672.getTimeDate(ModemData.time, ModemData.date,
		//		ModemData.timezone);

		//ModemData.timestamp = parsing.convertToEpoch(ModemData.date, ModemData.time, ModemData.timezone);
		simA7672.getSim(ModemData.pin);
 80015d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d4:	4619      	mov	r1, r3
 80015d6:	489a      	ldr	r0, [pc, #616]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80015d8:	f000 fedc 	bl	8002394 <_ZN5Modem8simA76726getSimEPc>
		simA7672.getNetwork(ModemData.networkStat);
 80015dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e0:	330f      	adds	r3, #15
 80015e2:	4619      	mov	r1, r3
 80015e4:	4896      	ldr	r0, [pc, #600]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80015e6:	f000 ff3f 	bl	8002468 <_ZN5Modem8simA767210getNetworkEPc>
		simA7672.getNetworkPDP(ModemData.networkStatpdp);
 80015ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ee:	331e      	adds	r3, #30
 80015f0:	4619      	mov	r1, r3
 80015f2:	4893      	ldr	r0, [pc, #588]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80015f4:	f001 f81e 	bl	8002634 <_ZN5Modem8simA767213getNetworkPDPEPc>
		simA7672.getSignalQ(ModemData.quality);
 80015f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015fc:	332d      	adds	r3, #45	@ 0x2d
 80015fe:	4619      	mov	r1, r3
 8001600:	488f      	ldr	r0, [pc, #572]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001602:	f001 fa0b 	bl	8002a1c <_ZN5Modem8simA767210getSignalQEPc>
		simA7672.getUEsystemInfo(&cpsiInfo);
 8001606:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800160a:	4619      	mov	r1, r3
 800160c:	488c      	ldr	r0, [pc, #560]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 800160e:	f001 f955 	bl	80028bc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>
		simA7672.getPDPstatus(&pdpinfo);
 8001612:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8001616:	4619      	mov	r1, r3
 8001618:	4889      	ldr	r0, [pc, #548]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 800161a:	f001 f8e3 	bl	80027e4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>





		ModemDataQueue.queueSend(reinterpret_cast<void*>(&ModemData));
 800161e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001622:	4619      	mov	r1, r3
 8001624:	488b      	ldr	r0, [pc, #556]	@ (8001854 <_Z9ModemTaskPv+0x350>)
 8001626:	f003 fb0f 	bl	8004c48 <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(50);
 800162a:	2032      	movs	r0, #50	@ 0x32
 800162c:	f003 fa84 	bl	8004b38 <_ZN11System_Rtos5delayEm>


		if(ControlDataQueue.queueReceive((void *)&ControlData) == ControlDataQueue.queues_recived)
 8001630:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001634:	4619      	mov	r1, r3
 8001636:	4888      	ldr	r0, [pc, #544]	@ (8001858 <_Z9ModemTaskPv+0x354>)
 8001638:	f003 fb23 	bl	8004c82 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0





		switch (mqtt_routine) {
 8001640:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 8001644:	2b03      	cmp	r3, #3
 8001646:	f200 8274 	bhi.w	8001b32 <_Z9ModemTaskPv+0x62e>
 800164a:	a201      	add	r2, pc, #4	@ (adr r2, 8001650 <_Z9ModemTaskPv+0x14c>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	08001661 	.word	0x08001661
 8001654:	08001749 	.word	0x08001749
 8001658:	08001869 	.word	0x08001869
 800165c:	080018b9 	.word	0x080018b9

		case net_enable: {

			/*Enable Net support*/

			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001664:	330f      	adds	r3, #15
 8001666:	497d      	ldr	r1, [pc, #500]	@ (800185c <_Z9ModemTaskPv+0x358>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff3d 	bl	80014e8 <_ZSt6strstrPcPKc>
 800166e:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service) {
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <_Z9ModemTaskPv+0x184>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 8001674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001678:	330f      	adds	r3, #15
 800167a:	4979      	ldr	r1, [pc, #484]	@ (8001860 <_Z9ModemTaskPv+0x35c>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff33 	bl	80014e8 <_ZSt6strstrPcPKc>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <_Z9ModemTaskPv+0x1be>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001688:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800168c:	331e      	adds	r3, #30
 800168e:	4973      	ldr	r1, [pc, #460]	@ (800185c <_Z9ModemTaskPv+0x358>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff29 	bl	80014e8 <_ZSt6strstrPcPKc>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <_Z9ModemTaskPv+0x1ac>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 800169c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a0:	331e      	adds	r3, #30
 80016a2:	496f      	ldr	r1, [pc, #444]	@ (8001860 <_Z9ModemTaskPv+0x35c>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff1f 	bl	80014e8 <_ZSt6strstrPcPKc>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <_Z9ModemTaskPv+0x1be>
					&& cpsiInfo != Modem::simA7672::no_service) {
 80016b0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80016b4:	f2a3 1385 	subw	r3, r3, #389	@ 0x185
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <_Z9ModemTaskPv+0x1be>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <_Z9ModemTaskPv+0x1c0>
 80016c2:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8236 	beq.w	8001b36 <_Z9ModemTaskPv+0x632>


				modeminfo = simA7672.setAPN(ModemData.apn);
 80016ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ce:	3337      	adds	r3, #55	@ 0x37
 80016d0:	4619      	mov	r1, r3
 80016d2:	485b      	ldr	r0, [pc, #364]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80016d4:	f000 fdb2 	bl	800223c <_ZN5Modem8simA76726setAPNEPc>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb

				simA7672.sslversionset();
 80016de:	4858      	ldr	r0, [pc, #352]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80016e0:	f001 ff04 	bl	80034ec <_ZN5Modem8simA767213sslversionsetEv>
				simA7672.sslauthset();
 80016e4:	4856      	ldr	r0, [pc, #344]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80016e6:	f001 ff3d 	bl	8003564 <_ZN5Modem8simA767210sslauthsetEv>
				simA7672.sslcacertset();
 80016ea:	4855      	ldr	r0, [pc, #340]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80016ec:	f001 ff76 	bl	80035dc <_ZN5Modem8simA767212sslcacertsetEv>
				simA7672.ssldevicecertset();
 80016f0:	4853      	ldr	r0, [pc, #332]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80016f2:	f001 ffaf 	bl	8003654 <_ZN5Modem8simA767216ssldevicecertsetEv>
				simA7672.ssldevicekeyset();
 80016f6:	4852      	ldr	r0, [pc, #328]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80016f8:	f001 ffe8 	bl	80036cc <_ZN5Modem8simA767215ssldevicekeysetEv>


				if (modeminfo == Modem::simA7672::simA7672_OK) {
 80016fc:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 8218 	bne.w	8001b36 <_Z9ModemTaskPv+0x632>
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
	//				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);

					if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001706:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 800170a:	2b02      	cmp	r3, #2
 800170c:	d108      	bne.n	8001720 <_Z9ModemTaskPv+0x21c>

						simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 800170e:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 8001712:	4619      	mov	r1, r3
 8001714:	484a      	ldr	r0, [pc, #296]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001716:	f001 fc9b 	bl	8003050 <_ZN5Modem8simA767220mqttDisconnectServerEh>
						mqttserverinfo = Modem::simA7672::mqtt_ERR;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
					}

					if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 8001720:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10b      	bne.n	8001740 <_Z9ModemTaskPv+0x23c>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001728:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 800172c:	4619      	mov	r1, r3
 800172e:	4844      	ldr	r0, [pc, #272]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001730:	f001 fbb4 	bl	8002e9c <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001734:	4842      	ldr	r0, [pc, #264]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001736:	f001 fae9 	bl	8002d0c <_ZN5Modem8simA76728mqttStopEv>
						mqttstartinfo = Modem::simA7672::mqtt_ERR;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
					}

					mqtt_routine = mqtt_enable;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed

				}

			}

			break;
 8001746:	e1f6      	b.n	8001b36 <_Z9ModemTaskPv+0x632>
		}

		case mqtt_enable: {

			/*Enable MQTT*/
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 8001748:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800174c:	330f      	adds	r3, #15
 800174e:	4943      	ldr	r1, [pc, #268]	@ (800185c <_Z9ModemTaskPv+0x358>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fec9 	bl	80014e8 <_ZSt6strstrPcPKc>
 8001756:	4603      	mov	r3, r0
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
					&& cpsiInfo != Modem::simA7672::no_service
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <_Z9ModemTaskPv+0x26c>
					|| std::strstr(ModemData.networkStat, networkInfo[1]))
 800175c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001760:	330f      	adds	r3, #15
 8001762:	493f      	ldr	r1, [pc, #252]	@ (8001860 <_Z9ModemTaskPv+0x35c>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff febf 	bl	80014e8 <_ZSt6strstrPcPKc>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <_Z9ModemTaskPv+0x2ae>
					&& (std::strstr(ModemData.networkStatpdp, networkInfo[0])
 8001770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001774:	331e      	adds	r3, #30
 8001776:	4939      	ldr	r1, [pc, #228]	@ (800185c <_Z9ModemTaskPv+0x358>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff feb5 	bl	80014e8 <_ZSt6strstrPcPKc>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <_Z9ModemTaskPv+0x294>
							|| std::strstr(ModemData.networkStatpdp, networkInfo[1]))
 8001784:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001788:	331e      	adds	r3, #30
 800178a:	4935      	ldr	r1, [pc, #212]	@ (8001860 <_Z9ModemTaskPv+0x35c>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff feab 	bl	80014e8 <_ZSt6strstrPcPKc>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00c      	beq.n	80017b2 <_Z9ModemTaskPv+0x2ae>
					&& cpsiInfo != Modem::simA7672::no_service
 8001798:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800179c:	f2a3 1385 	subw	r3, r3, #389	@ 0x185
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <_Z9ModemTaskPv+0x2ae>
					&& mqttstartinfo != Modem::simA7672::mqtt_OK) {
 80017a6:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <_Z9ModemTaskPv+0x2ae>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <_Z9ModemTaskPv+0x2b0>
 80017b2:	2300      	movs	r3, #0
			if ((std::strstr(ModemData.networkStat, networkInfo[0])
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 81c0 	beq.w	8001b3a <_Z9ModemTaskPv+0x636>

				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_deactivated);
 80017ba:	2100      	movs	r1, #0
 80017bc:	4820      	ldr	r0, [pc, #128]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80017be:	f000 fd95 	bl	80022ec <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				simA7672.activate_deactivatePDP(Modem::simA7672::pdp_activate);
 80017c2:	2101      	movs	r1, #1
 80017c4:	481e      	ldr	r0, [pc, #120]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80017c6:	f000 fd91 	bl	80022ec <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>
				mqttstartinfo = simA7672.mqttStart(&ModemData.mqtt_client_index);
 80017ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017ce:	33d8      	adds	r3, #216	@ 0xd8
 80017d0:	4619      	mov	r1, r3
 80017d2:	481b      	ldr	r0, [pc, #108]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80017d4:	f001 fa2a 	bl	8002c2c <_ZN5Modem8simA76729mqttStartEPh>
 80017d8:	4603      	mov	r3, r0
 80017da:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
				if (mqttstartinfo == Modem::simA7672::mqtt_OK) {
 80017de:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d121      	bne.n	800182a <_Z9ModemTaskPv+0x326>

					mqttstartinfo = simA7672.mqttSetClient(
 80017e6:	f897 11e8 	ldrb.w	r1, [r7, #488]	@ 0x1e8
 80017ea:	2301      	movs	r3, #1
 80017ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <_Z9ModemTaskPv+0x360>)
 80017ee:	4814      	ldr	r0, [pc, #80]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 80017f0:	f001 faf2 	bl	8002dd8 <_ZN5Modem8simA767213mqttSetClientEhPch>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
							ModemData.mqtt_client_index,
							const_cast<char*>("STM32"),1);

					if(mqttstartinfo == Modem::simA7672::mqtt_OK)
 80017fa:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <_Z9ModemTaskPv+0x312>
					{

						simA7672.mqttsslenable(ModemData.mqtt_client_index);
 8001802:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 8001806:	4619      	mov	r1, r3
 8001808:	480d      	ldr	r0, [pc, #52]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 800180a:	f001 fe13 	bl	8003434 <_ZN5Modem8simA767213mqttsslenableEh>
						mqtt_routine = mqtt_connect;
 800180e:	2302      	movs	r3, #2
 8001810:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
					simA7672.mqttStop();
				}

			}

			break;
 8001814:	e191      	b.n	8001b3a <_Z9ModemTaskPv+0x636>
						simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 8001816:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 800181a:	4619      	mov	r1, r3
 800181c:	4808      	ldr	r0, [pc, #32]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 800181e:	f001 fb3d 	bl	8002e9c <_ZN5Modem8simA767217mqttReleaseClientEh>
						simA7672.mqttStop();
 8001822:	4807      	ldr	r0, [pc, #28]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001824:	f001 fa72 	bl	8002d0c <_ZN5Modem8simA76728mqttStopEv>
			break;
 8001828:	e187      	b.n	8001b3a <_Z9ModemTaskPv+0x636>
					simA7672.mqttReleaseClient(ModemData.mqtt_client_index);
 800182a:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 800182e:	4619      	mov	r1, r3
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001832:	f001 fb33 	bl	8002e9c <_ZN5Modem8simA767217mqttReleaseClientEh>
					simA7672.mqttStop();
 8001836:	4802      	ldr	r0, [pc, #8]	@ (8001840 <_Z9ModemTaskPv+0x33c>)
 8001838:	f001 fa68 	bl	8002d0c <_ZN5Modem8simA76728mqttStopEv>
			break;
 800183c:	e17d      	b.n	8001b3a <_Z9ModemTaskPv+0x636>
 800183e:	bf00      	nop
 8001840:	20000518 	.word	0x20000518
 8001844:	08014e30 	.word	0x08014e30
 8001848:	08014e6c 	.word	0x08014e6c
 800184c:	08014e7c 	.word	0x08014e7c
 8001850:	08014e84 	.word	0x08014e84
 8001854:	200017b4 	.word	0x200017b4
 8001858:	200018b4 	.word	0x200018b4
 800185c:	080156d8 	.word	0x080156d8
 8001860:	080156e4 	.word	0x080156e4
 8001864:	08014e90 	.word	0x08014e90
		case mqtt_connect: {



			/*Connect to Mqtt Server*/
			if (mqttstartinfo == Modem::simA7672::mqtt_OK
 8001868:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 8166 	bne.w	8001b3e <_Z9ModemTaskPv+0x63a>
					&& mqttserverinfo != Modem::simA7672::mqtt_serverConnected) {
 8001872:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001876:	2b02      	cmp	r3, #2
 8001878:	f000 8161 	beq.w	8001b3e <_Z9ModemTaskPv+0x63a>

				mqttserverinfo = simA7672.mqttConnectServer(
 800187c:	f897 11e8 	ldrb.w	r1, [r7, #488]	@ 0x1e8
 8001880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001884:	334b      	adds	r3, #75	@ 0x4b
 8001886:	461a      	mov	r2, r3
 8001888:	48b1      	ldr	r0, [pc, #708]	@ (8001b50 <_Z9ModemTaskPv+0x64c>)
 800188a:	f001 fb63 	bl	8002f54 <_ZN5Modem8simA767217mqttConnectServerEhPc>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
						ModemData.mqtt_client_index, ModemData.serverAddr);

				if (mqttserverinfo == Modem::simA7672::mqtt_serverConnected) {
 8001894:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001898:	2b02      	cmp	r3, #2
 800189a:	d103      	bne.n	80018a4 <_Z9ModemTaskPv+0x3a0>

					mqtt_routine = mqtt_loop;
 800189c:	2303      	movs	r3, #3
 800189e:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
					mqtt_routine = net_enable;
				}

			}

			break;
 80018a2:	e14c      	b.n	8001b3e <_Z9ModemTaskPv+0x63a>
					simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80018a4:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 80018a8:	4619      	mov	r1, r3
 80018aa:	48a9      	ldr	r0, [pc, #676]	@ (8001b50 <_Z9ModemTaskPv+0x64c>)
 80018ac:	f001 fbd0 	bl	8003050 <_ZN5Modem8simA767220mqttDisconnectServerEh>
					mqtt_routine = net_enable;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
			break;
 80018b6:	e142      	b.n	8001b3e <_Z9ModemTaskPv+0x63a>
		}

		case mqtt_loop: {

			mqttserverinfo = simA7672.getmqttconnectionstatus(ModemData.serverAddr);
 80018b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018bc:	334b      	adds	r3, #75	@ 0x4b
 80018be:	4619      	mov	r1, r3
 80018c0:	48a3      	ldr	r0, [pc, #652]	@ (8001b50 <_Z9ModemTaskPv+0x64c>)
 80018c2:	f001 f93b 	bl	8002b3c <_ZN5Modem8simA767223getmqttconnectionstatusEPc>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
			mqtt_counter++;
 80018cc:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 80018d0:	3301      	adds	r3, #1
 80018d2:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
			/*get retries as well as sometimes we can get some issue */
			if (mqttserverinfo != Modem::simA7672::mqtt_serverConnected && mqtt_counter > 3) {
 80018d6:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d010      	beq.n	8001900 <_Z9ModemTaskPv+0x3fc>
 80018de:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d90c      	bls.n	8001900 <_Z9ModemTaskPv+0x3fc>
				ModemData.internet = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
				simA7672.mqttDisconnectServer(ModemData.mqtt_client_index);
 80018ec:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 80018f0:	4619      	mov	r1, r3
 80018f2:	4897      	ldr	r0, [pc, #604]	@ (8001b50 <_Z9ModemTaskPv+0x64c>)
 80018f4:	f001 fbac 	bl	8003050 <_ZN5Modem8simA767220mqttDisconnectServerEh>
				mqtt_routine = net_enable;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
                      /*take flag to do something*/
				}
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
			}

			break;
 80018fe:	e120      	b.n	8001b42 <_Z9ModemTaskPv+0x63e>
			else if(mqttserverinfo == Modem::simA7672::mqtt_serverConnected )
 8001900:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001904:	2b02      	cmp	r3, #2
 8001906:	f040 811c 	bne.w	8001b42 <_Z9ModemTaskPv+0x63e>
				ModemData.internet = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
				mqtt_counter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001916:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800191a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	663b      	str	r3, [r7, #96]	@ 0x60
						 ,ControlData.V_1
 8001922:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001926:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800192a:	695b      	ldr	r3, [r3, #20]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe0b 	bl	8000548 <__aeabi_f2d>
 8001932:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						 ,ControlData.V_2
 8001936:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800193a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800193e:	699b      	ldr	r3, [r3, #24]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe01 	bl	8000548 <__aeabi_f2d>
 8001946:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						 ,ControlData.V_3
 800194a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800194e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001952:	69db      	ldr	r3, [r3, #28]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fdf7 	bl	8000548 <__aeabi_f2d>
 800195a:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						 ,ControlData.I_1
 800195e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001962:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001966:	6a1b      	ldr	r3, [r3, #32]
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fded 	bl	8000548 <__aeabi_f2d>
 800196e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						 ,ControlData.I_2
 8001972:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001976:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fde3 	bl	8000548 <__aeabi_f2d>
 8001982:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						 ,ControlData.I_3
 8001986:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800198a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdd9 	bl	8000548 <__aeabi_f2d>
 8001996:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						 ,ControlData.P_1
 800199a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800199e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdcf 	bl	8000548 <__aeabi_f2d>
 80019aa:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						 ,ControlData.P_2
 80019ae:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80019b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdc5 	bl	8000548 <__aeabi_f2d>
 80019be:	e9c7 0108 	strd	r0, r1, [r7, #32]
						 ,ControlData.P_3
 80019c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80019c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	e9c7 0106 	strd	r0, r1, [r7, #24]
						 ,ControlData.Energy
 80019d6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80019da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb1 	bl	8000548 <__aeabi_f2d>
 80019e6:	4682      	mov	sl, r0
 80019e8:	468b      	mov	fp, r1
						 ,ControlData.Freq
 80019ea:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80019ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda7 	bl	8000548 <__aeabi_f2d>
 80019fa:	4680      	mov	r8, r0
 80019fc:	4689      	mov	r9, r1
						 ,ControlData.SelectedSource
 80019fe:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a02:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a06:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a0a:	617b      	str	r3, [r7, #20]
						 ,ControlData.fuelPer
 8001a0c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a10:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a14:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a18:	613b      	str	r3, [r7, #16]
						 ,ControlData.fuelConsp
 8001a1a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a1e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
				std::sprintf(reinterpret_cast<char *>(simA7672.Txbuffer),sendbufMQTT
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd8f 	bl	8000548 <__aeabi_f2d>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	460d      	mov	r5, r1
 8001a2e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a32:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a36:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001a38:	60fa      	str	r2, [r7, #12]
 8001a3a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a3e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a42:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a4a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a4e:	6fde      	ldr	r6, [r3, #124]	@ 0x7c
 8001a50:	607e      	str	r6, [r7, #4]
 8001a52:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a56:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a5a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8001a5e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a62:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a66:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8001a6a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a6e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a72:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001a76:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a7a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a82:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 8001a86:	9320      	str	r3, [sp, #128]	@ 0x80
 8001a88:	921f      	str	r2, [sp, #124]	@ 0x7c
 8001a8a:	911e      	str	r1, [sp, #120]	@ 0x78
 8001a8c:	901d      	str	r0, [sp, #116]	@ 0x74
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	921c      	str	r2, [sp, #112]	@ 0x70
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	911b      	str	r1, [sp, #108]	@ 0x6c
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	921a      	str	r2, [sp, #104]	@ 0x68
 8001a9a:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	9216      	str	r2, [sp, #88]	@ 0x58
 8001aa6:	e9cd 8914 	strd	r8, r9, [sp, #80]	@ 0x50
 8001aaa:	e9cd ab12 	strd	sl, fp, [sp, #72]	@ 0x48
 8001aae:	ed97 7b06 	vldr	d7, [r7, #24]
 8001ab2:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8001ab6:	ed97 7b08 	vldr	d7, [r7, #32]
 8001aba:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001abe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001ac2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001ac6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001aca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001ace:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001ad2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001ad6:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001ada:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ade:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001ae2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ae6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001aea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001aee:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001af2:	ed8d 7b00 	vstr	d7, [sp]
 8001af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001af8:	4632      	mov	r2, r6
 8001afa:	4916      	ldr	r1, [pc, #88]	@ (8001b54 <_Z9ModemTaskPv+0x650>)
 8001afc:	4816      	ldr	r0, [pc, #88]	@ (8001b58 <_Z9ModemTaskPv+0x654>)
 8001afe:	f010 ff05 	bl	801290c <siprintf>
				if(simA7672.mqttsubTopicAndRead(ModemData.mqtt_client_index, ModemData.mqttSubTopic, command_buffer,255) == Modem::simA7672::mqtt_msgrecv)
 8001b02:	f897 11e8 	ldrb.w	r1, [r7, #488]	@ 0x1e8
 8001b06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b0a:	f103 02c3 	add.w	r2, r3, #195	@ 0xc3
 8001b0e:	23ff      	movs	r3, #255	@ 0xff
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <_Z9ModemTaskPv+0x658>)
 8001b14:	480e      	ldr	r0, [pc, #56]	@ (8001b50 <_Z9ModemTaskPv+0x64c>)
 8001b16:	f001 fb17 	bl	8003148 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b05      	cmp	r3, #5
				simA7672.mqttunsubTopic(ModemData.mqtt_client_index,  ModemData.mqttSubTopic);
 8001b1e:	f897 11e8 	ldrb.w	r1, [r7, #488]	@ 0x1e8
 8001b22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b26:	33c3      	adds	r3, #195	@ 0xc3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4809      	ldr	r0, [pc, #36]	@ (8001b50 <_Z9ModemTaskPv+0x64c>)
 8001b2c:	f001 fbc8 	bl	80032c0 <_ZN5Modem8simA767214mqttunsubTopicEhPc>
			break;
 8001b30:	e007      	b.n	8001b42 <_Z9ModemTaskPv+0x63e>
		}

		default:
			break;
 8001b32:	bf00      	nop
 8001b34:	e006      	b.n	8001b44 <_Z9ModemTaskPv+0x640>
			break;
 8001b36:	bf00      	nop
 8001b38:	e004      	b.n	8001b44 <_Z9ModemTaskPv+0x640>
			break;
 8001b3a:	bf00      	nop
 8001b3c:	e002      	b.n	8001b44 <_Z9ModemTaskPv+0x640>
			break;
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <_Z9ModemTaskPv+0x640>
			break;
 8001b42:	bf00      	nop

		}



		System_Rtos::delay(1000);
 8001b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b48:	f002 fff6 	bl	8004b38 <_ZN11System_Rtos5delayEm>
		simA7672.getSim(ModemData.pin);
 8001b4c:	e540      	b.n	80015d0 <_Z9ModemTaskPv+0xcc>
 8001b4e:	bf00      	nop
 8001b50:	20000518 	.word	0x20000518
 8001b54:	08014e98 	.word	0x08014e98
 8001b58:	20000d18 	.word	0x20000d18
 8001b5c:	20001548 	.word	0x20001548

08001b60 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d103      	bne.n	8001b82 <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_U);
 8001b7a:	4904      	ldr	r1, [pc, #16]	@ (8001b8c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001b7c:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001b7e:	f000 f9b9 	bl	8001ef4 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200022a4 	.word	0x200022a4
 8001b90:	20000518 	.word	0x20000518

08001b94 <_GLOBAL__sub_I_simA7672>:
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff ffdf 	bl	8001b60 <_Z41__static_initialization_and_destruction_0ii>
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_Z7SoCTaskPv>:

/*
 * Battery state of charge task
 *
 * */
void SoCTask(void *pvParameters) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]


	struct SoCData_Queue SoCData = { 0 };
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

	SOC::CC_Init(100.0f, 1);
 8001bb8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001bbc:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001c14 <_Z7SoCTaskPv+0x70>
 8001bc0:	f002 f96a 	bl	8003e98 <_ZN3SOC7CC_InitEff>
	while (1) {


		DCCurrentSensor.getCurrent(&SoCData.BattCurr);
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	3304      	adds	r3, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <_Z7SoCTaskPv+0x74>)
 8001bce:	f002 f9a7 	bl	8003f20 <_ZN13sensor_DcHall6DcHall10getCurrentEPf>
		DCVoltageMeasurement.getVoltage(&SoCData.BattVolt);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4810      	ldr	r0, [pc, #64]	@ (8001c1c <_Z7SoCTaskPv+0x78>)
 8001bda:	f002 fa61 	bl	80040a0 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf>


		SOC::CC_Loop(&SoCData.BattSoC,SoCData.BattCurr,SoCData.BattVolt);
 8001bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	3308      	adds	r3, #8
 8001bec:	eef0 0a47 	vmov.f32	s1, s14
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 f8eb 	bl	8003dd0 <_ZN3SOC7CC_LoopEPfff>



		SoCDataQueue.queueSend(reinterpret_cast<void*>(&SoCData));
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <_Z7SoCTaskPv+0x7c>)
 8001c02:	f003 f821 	bl	8004c48 <_ZN11System_Rtos15freertos_queues9queueSendEPv>
		System_Rtos::delay(1000);
 8001c06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c0a:	f002 ff95 	bl	8004b38 <_ZN11System_Rtos5delayEm>
		DCCurrentSensor.getCurrent(&SoCData.BattCurr);
 8001c0e:	bf00      	nop
 8001c10:	e7d8      	b.n	8001bc4 <_Z7SoCTaskPv+0x20>
 8001c12:	bf00      	nop
 8001c14:	42c80000 	.word	0x42c80000
 8001c18:	20001a54 	.word	0x20001a54
 8001c1c:	20001a64 	.word	0x20001a64
 8001c20:	2000191c 	.word	0x2000191c

08001c24 <_ZN8UniqueID12CharToHexascEPhh>:


const char kaHexAsc[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

void UniqueID::CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
     *pPos++ = kaHexAsc[Wert >> 4];
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 8001c3a:	5c99      	ldrb	r1, [r3, r2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	460a      	mov	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
     *pPos = kaHexAsc[Wert & 0x0f];
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <_ZN8UniqueID12CharToHexascEPhh+0x3c>)
 8001c4e:	5cd2      	ldrb	r2, [r2, r3]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	701a      	strb	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	080156f0 	.word	0x080156f0

08001c64 <_ZN8UniqueID6GetUidEv>:

char *UniqueID::GetUid()
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
	static uint8_t sUid[13];
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001c6a:	f008 f919 	bl	8009ea0 <HAL_GetUIDw1>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001c74:	f008 f914 	bl	8009ea0 <HAL_GetUIDw1>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001c80:	4c1c      	ldr	r4, [pc, #112]	@ (8001cf4 <_ZN8UniqueID6GetUidEv+0x90>)
 8001c82:	f008 f919 	bl	8009eb8 <HAL_GetUIDw2>
 8001c86:	4603      	mov	r3, r0
 8001c88:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b23      	cmp	r3, #35	@ 0x23
 8001c8e:	d909      	bls.n	8001ca4 <_ZN8UniqueID6GetUidEv+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b3d      	cmp	r3, #61	@ 0x3d
 8001c94:	bf28      	it	cs
 8001c96:	233d      	movcs	r3, #61	@ 0x3d
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	333d      	adds	r3, #61	@ 0x3d
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001ca0:	71da      	strb	r2, [r3, #7]
 8001ca2:	e00b      	b.n	8001cbc <_ZN8UniqueID6GetUidEv+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	d901      	bls.n	8001cae <_ZN8UniqueID6GetUidEv+0x4a>
 8001caa:	2241      	movs	r2, #65	@ 0x41
 8001cac:	e000      	b.n	8001cb0 <_ZN8UniqueID6GetUidEv+0x4c>
 8001cae:	2230      	movs	r2, #48	@ 0x30
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001cba:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001cbc:	f008 f8e4 	bl	8009e88 <HAL_GetUIDw0>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <_ZN8UniqueID6GetUidEv+0x94>)
 8001cca:	f7ff ffab 	bl	8001c24 <_ZN8UniqueID12CharToHexascEPhh>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001cce:	f008 f8db 	bl	8009e88 <HAL_GetUIDw0>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <_ZN8UniqueID6GetUidEv+0x98>)
 8001cda:	f7ff ffa3 	bl	8001c24 <_ZN8UniqueID12CharToHexascEPhh>
	sUid[12] = 0;
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <_ZN8UniqueID6GetUidEv+0x8c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001ce4:	4b02      	ldr	r3, [pc, #8]	@ (8001cf0 <_ZN8UniqueID6GetUidEv+0x8c>)
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20001a6c 	.word	0x20001a6c
 8001cf4:	20001a6f 	.word	0x20001a6f
 8001cf8:	20001a74 	.word	0x20001a74
 8001cfc:	20001a76 	.word	0x20001a76

08001d00 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <_Z11app_mainCppv+0x38>)
 8001d06:	f002 ff4e 	bl	8004ba6 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    ControlTaskHandler.createTask();
 8001d0a:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <_Z11app_mainCppv+0x3c>)
 8001d0c:	f002 ff4b 	bl	8004ba6 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    DisplayTaskHandler.createTask();
 8001d10:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <_Z11app_mainCppv+0x40>)
 8001d12:	f002 ff48 	bl	8004ba6 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
    SoCTaskHandler.createTask();
 8001d16:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <_Z11app_mainCppv+0x44>)
 8001d18:	f002 ff45 	bl	8004ba6 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>

    ModemDataQueue.queueCreate();
 8001d1c:	480a      	ldr	r0, [pc, #40]	@ (8001d48 <_Z11app_mainCppv+0x48>)
 8001d1e:	f002 ff77 	bl	8004c10 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    ControlDataQueue.queueCreate();
 8001d22:	480a      	ldr	r0, [pc, #40]	@ (8001d4c <_Z11app_mainCppv+0x4c>)
 8001d24:	f002 ff74 	bl	8004c10 <_ZN11System_Rtos15freertos_queues11queueCreateEv>
    SoCDataQueue.queueCreate();
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <_Z11app_mainCppv+0x50>)
 8001d2a:	f002 ff71 	bl	8004c10 <_ZN11System_Rtos15freertos_queues11queueCreateEv>



    button::btn_init();
 8001d2e:	f005 f90d 	bl	8006f4c <_ZN6button8btn_initEv>


}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20001648 	.word	0x20001648
 8001d3c:	2000166c 	.word	0x2000166c
 8001d40:	20001690 	.word	0x20001690
 8001d44:	200016b4 	.word	0x200016b4
 8001d48:	200017b4 	.word	0x200017b4
 8001d4c:	200018b4 	.word	0x200018b4
 8001d50:	2000191c 	.word	0x2000191c

08001d54 <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    	app_mainCpp();
 8001d58:	f7ff ffd2 	bl	8001d00 <_Z11app_mainCppv>
    }
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_Z41__static_initialization_and_destruction_0ii>:


}
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d16c      	bne.n	8001e4a <_Z41__static_initialization_and_destruction_0ii+0xea>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d167      	bne.n	8001e4a <_Z41__static_initialization_and_destruction_0ii+0xea>
System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 8001d7a:	2318      	movs	r3, #24
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d86:	4a33      	ldr	r2, [pc, #204]	@ (8001e54 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001d88:	4933      	ldr	r1, [pc, #204]	@ (8001e58 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001d8a:	4834      	ldr	r0, [pc, #208]	@ (8001e5c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001d8c:	f002 feea 	bl	8004b64 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlTaskHandler(ControlTask,"Control",_StackSize_Control, (void*) 1,24);
 8001d90:	2318      	movs	r3, #24
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	2301      	movs	r3, #1
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d9c:	4a30      	ldr	r2, [pc, #192]	@ (8001e60 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001d9e:	4931      	ldr	r1, [pc, #196]	@ (8001e64 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001da0:	4831      	ldr	r0, [pc, #196]	@ (8001e68 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001da2:	f002 fedf 	bl	8004b64 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks DisplayTaskHandler(DisplayTask,"Display",_StackSize_Display, (void*) 1,24);
 8001da6:	2318      	movs	r3, #24
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001db2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e6c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001db4:	492e      	ldr	r1, [pc, #184]	@ (8001e70 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001db6:	482f      	ldr	r0, [pc, #188]	@ (8001e74 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001db8:	f002 fed4 	bl	8004b64 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks SoCTaskHandler(SoCTask,"SoC",_StackSize_SoC, (void*) 1,24);
 8001dbc:	2318      	movs	r3, #24
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e78 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001dca:	492c      	ldr	r1, [pc, #176]	@ (8001e7c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001dcc:	482c      	ldr	r0, [pc, #176]	@ (8001e80 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001dce:	f002 fec9 	bl	8004b64 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_queues ModemDataQueue(1,sizeof(struct ModemData_Queue),	queuebuffer);
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001dd4:	22d9      	movs	r2, #217	@ 0xd9
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	482b      	ldr	r0, [pc, #172]	@ (8001e88 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001dda:	f002 fefe 	bl	8004bda <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues ControlDataQueue(1,sizeof(struct ControlData_Queue),	queuebuffer_1);
 8001dde:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001de0:	22a4      	movs	r2, #164	@ 0xa4
 8001de2:	2101      	movs	r1, #1
 8001de4:	482a      	ldr	r0, [pc, #168]	@ (8001e90 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001de6:	f002 fef8 	bl	8004bda <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_Rtos::freertos_queues SoCDataQueue(1,sizeof(struct SoCData_Queue),	queuebuffer_2);
 8001dea:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001dec:	220c      	movs	r2, #12
 8001dee:	2101      	movs	r1, #1
 8001df0:	4829      	ldr	r0, [pc, #164]	@ (8001e98 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001df2:	f002 fef2 	bl	8004bda <_ZN11System_Rtos15freertos_queuesC1EttPh>
System_rtc::stmRTC stmRTC(&hrtc,5);
 8001df6:	2205      	movs	r2, #5
 8001df8:	4928      	ldr	r1, [pc, #160]	@ (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8001dfa:	4829      	ldr	r0, [pc, #164]	@ (8001ea0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001dfc:	f003 f832 	bl	8004e64 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1,0.0, 10.0, 3.3);
 8001e00:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 8001ea4 <_Z41__static_initialization_and_destruction_0ii+0x144>
 8001e04:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001e08:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001ea8 <_Z41__static_initialization_and_destruction_0ii+0x148>
 8001e0c:	4927      	ldr	r1, [pc, #156]	@ (8001eac <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001e0e:	4828      	ldr	r0, [pc, #160]	@ (8001eb0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001e10:	f002 fb1a 	bl	8004448 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff>
sensor_TempHumd::AHT20 AHT20(&hi2c1, 0x38);
 8001e14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e18:	2238      	movs	r2, #56	@ 0x38
 8001e1a:	4926      	ldr	r1, [pc, #152]	@ (8001eb4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001e1c:	4826      	ldr	r0, [pc, #152]	@ (8001eb8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001e1e:	f002 f9c7 	bl	80041b0 <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>
sensor_pzem::PZEM_004T PZEM1(&PZEM1_U);
 8001e22:	4926      	ldr	r1, [pc, #152]	@ (8001ebc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8001e24:	4826      	ldr	r0, [pc, #152]	@ (8001ec0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001e26:	f002 fd7e 	bl	8004926 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM2(&PZEM2_U);
 8001e2a:	4926      	ldr	r1, [pc, #152]	@ (8001ec4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8001e2c:	4826      	ldr	r0, [pc, #152]	@ (8001ec8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8001e2e:	f002 fd7a 	bl	8004926 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_pzem::PZEM_004T PZEM3(&PZEM3_U);
 8001e32:	4926      	ldr	r1, [pc, #152]	@ (8001ecc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8001e34:	4826      	ldr	r0, [pc, #152]	@ (8001ed0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8001e36:	f002 fd76 	bl	8004926 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>
sensor_DcHall::DcHall DCCurrentSensor(&hadc2);
 8001e3a:	4926      	ldr	r1, [pc, #152]	@ (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8001e3c:	4826      	ldr	r0, [pc, #152]	@ (8001ed8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8001e3e:	f002 f851 	bl	8003ee4 <_ZN13sensor_DcHall6DcHallC1EP17ADC_HandleTypeDef>
sensor_DcVolt::DcVolt DCVoltageMeasurement(&hadc3);
 8001e42:	4926      	ldr	r1, [pc, #152]	@ (8001edc <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8001e44:	4826      	ldr	r0, [pc, #152]	@ (8001ee0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8001e46:	f002 f913 	bl	8004070 <_ZN13sensor_DcVolt6DcVoltC1EP17ADC_HandleTypeDef>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08015174 	.word	0x08015174
 8001e58:	08001505 	.word	0x08001505
 8001e5c:	20001648 	.word	0x20001648
 8001e60:	0801517c 	.word	0x0801517c
 8001e64:	08001101 	.word	0x08001101
 8001e68:	2000166c 	.word	0x2000166c
 8001e6c:	08015184 	.word	0x08015184
 8001e70:	08001471 	.word	0x08001471
 8001e74:	20001690 	.word	0x20001690
 8001e78:	0801518c 	.word	0x0801518c
 8001e7c:	08001ba5 	.word	0x08001ba5
 8001e80:	200016b4 	.word	0x200016b4
 8001e84:	200016d8 	.word	0x200016d8
 8001e88:	200017b4 	.word	0x200017b4
 8001e8c:	20001810 	.word	0x20001810
 8001e90:	200018b4 	.word	0x200018b4
 8001e94:	20001910 	.word	0x20001910
 8001e98:	2000191c 	.word	0x2000191c
 8001e9c:	20002108 	.word	0x20002108
 8001ea0:	20001978 	.word	0x20001978
 8001ea4:	40533333 	.word	0x40533333
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	20001fdc 	.word	0x20001fdc
 8001eb0:	20001988 	.word	0x20001988
 8001eb4:	200020b4 	.word	0x200020b4
 8001eb8:	200019c4 	.word	0x200019c4
 8001ebc:	2000225c 	.word	0x2000225c
 8001ec0:	200019dc 	.word	0x200019dc
 8001ec4:	200022ec 	.word	0x200022ec
 8001ec8:	20001a04 	.word	0x20001a04
 8001ecc:	20002214 	.word	0x20002214
 8001ed0:	20001a2c 	.word	0x20001a2c
 8001ed4:	20002024 	.word	0x20002024
 8001ed8:	20001a54 	.word	0x20001a54
 8001edc:	2000206c 	.word	0x2000206c
 8001ee0:	20001a64 	.word	0x20001a64

08001ee4 <_GLOBAL__sub_I_ModemTaskHandler>:
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ff37 	bl	8001d60 <_Z41__static_initialization_and_destruction_0ii>
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f06:	461a      	mov	r2, r3
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f010 fd62 	bl	80129d2 <memset>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f010 fd59 	bl	80129d2 <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f36:	6053      	str	r3, [r2, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001f3e:	3304      	adds	r3, #4
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fa4b 	bl	80053de <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001f4e:	3308      	adds	r3, #8
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 faa6 	bl	80054a2 <_ZN10System_sys16Parsing_CheckingC1Ev>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xbc>)
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001f88:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d902      	bls.n	8001f98 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xa4>
		simA7672::ClassInstanceIncrementer = 0;
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 8001f98:	4906      	ldr	r1, [pc, #24]	@ (8001fb4 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc0>)
 8001f9a:	4807      	ldr	r0, [pc, #28]	@ (8001fb8 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xc4>)
 8001f9c:	f003 f8ea 	bl	8005174 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20001a94 	.word	0x20001a94
 8001fb0:	20001a7c 	.word	0x20001a7c
 8001fb4:	08003d95 	.word	0x08003d95
 8001fb8:	08003d31 	.word	0x08003d31

08001fbc <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	230a      	movs	r3, #10
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	498f      	ldr	r1, [pc, #572]	@ (8002214 <_ZN5Modem8simA76724initEv+0x258>)
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f001 fbb3 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 fcda 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4985      	ldr	r1, [pc, #532]	@ (8002214 <_ZN5Modem8simA76724initEv+0x258>)
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f001 fba0 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002008:	2100      	movs	r1, #0
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f001 fcc7 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002014:	2301      	movs	r3, #1
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	230a      	movs	r3, #10
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002020:	2204      	movs	r2, #4
 8002022:	497c      	ldr	r1, [pc, #496]	@ (8002214 <_ZN5Modem8simA76724initEv+0x258>)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f001 fb8d 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 fcb4 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 800203a:	2301      	movs	r3, #1
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	230a      	movs	r3, #10
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	220b      	movs	r2, #11
 8002048:	4973      	ldr	r1, [pc, #460]	@ (8002218 <_ZN5Modem8simA76724initEv+0x25c>)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f001 fb7a 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f001 fca1 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(15000);
 8002060:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002064:	f002 fd68 	bl	8004b38 <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8002068:	2301      	movs	r3, #1
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	230a      	movs	r3, #10
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002074:	2204      	movs	r2, #4
 8002076:	4967      	ldr	r1, [pc, #412]	@ (8002214 <_ZN5Modem8simA76724initEv+0x258>)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f001 fb63 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 fc8a 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 800208e:	2301      	movs	r3, #1
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	230a      	movs	r3, #10
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	2204      	movs	r2, #4
 800209c:	495d      	ldr	r1, [pc, #372]	@ (8002214 <_ZN5Modem8simA76724initEv+0x258>)
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f001 fb50 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80020a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f001 fc77 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80020b4:	2301      	movs	r3, #1
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	230a      	movs	r3, #10
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c0:	2204      	movs	r2, #4
 80020c2:	4954      	ldr	r1, [pc, #336]	@ (8002214 <_ZN5Modem8simA76724initEv+0x258>)
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f001 fb3d 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80020ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f001 fc64 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 80020da:	2301      	movs	r3, #1
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	230a      	movs	r3, #10
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e6:	2207      	movs	r2, #7
 80020e8:	494c      	ldr	r1, [pc, #304]	@ (800221c <_ZN5Modem8simA76724initEv+0x260>)
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f001 fb2a 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80020f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f4:	2100      	movs	r1, #0
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f001 fc51 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	230a      	movs	r3, #10
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210c:	2206      	movs	r2, #6
 800210e:	4944      	ldr	r1, [pc, #272]	@ (8002220 <_ZN5Modem8simA76724initEv+0x264>)
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 fb17 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	2100      	movs	r1, #0
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f001 fc3e 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002122:	4603      	mov	r3, r0
 8002124:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	230a      	movs	r3, #10
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002132:	220b      	movs	r2, #11
 8002134:	493b      	ldr	r1, [pc, #236]	@ (8002224 <_ZN5Modem8simA76724initEv+0x268>)
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f001 fb04 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800213c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 fc2b 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGREG, sizeof(atcmd_ATCGREG) - 1, 1000, _LF, CMD_mode);
 800214c:	2301      	movs	r3, #1
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	230a      	movs	r3, #10
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002158:	220c      	movs	r2, #12
 800215a:	4933      	ldr	r1, [pc, #204]	@ (8002228 <_ZN5Modem8simA76724initEv+0x26c>)
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f001 faf1 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f001 fc18 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	230a      	movs	r3, #10
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	2218      	movs	r2, #24
 8002180:	492a      	ldr	r1, [pc, #168]	@ (800222c <_ZN5Modem8simA76724initEv+0x270>)
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f001 fade 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218c:	2100      	movs	r1, #0
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f001 fc05 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 8002198:	2301      	movs	r3, #1
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	230a      	movs	r3, #10
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a4:	220b      	movs	r2, #11
 80021a6:	4922      	ldr	r1, [pc, #136]	@ (8002230 <_ZN5Modem8simA76724initEv+0x274>)
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f001 facb 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80021ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b2:	2100      	movs	r1, #0
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f001 fbf2 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 80021be:	2301      	movs	r3, #1
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	230a      	movs	r3, #10
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	220b      	movs	r2, #11
 80021cc:	4919      	ldr	r1, [pc, #100]	@ (8002234 <_ZN5Modem8simA76724initEv+0x278>)
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f001 fab8 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	2100      	movs	r1, #0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f001 fbdf 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 80021e4:	2301      	movs	r3, #1
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	230a      	movs	r3, #10
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f0:	220c      	movs	r2, #12
 80021f2:	4911      	ldr	r1, [pc, #68]	@ (8002238 <_ZN5Modem8simA76724initEv+0x27c>)
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f001 faa5 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80021fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fe:	2100      	movs	r1, #0
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 fbcc 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]

	return stat;
 800220a:	7bfb      	ldrb	r3, [r7, #15]

}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08015700 	.word	0x08015700
 8002218:	08015708 	.word	0x08015708
 800221c:	080157bc 	.word	0x080157bc
 8002220:	080157c4 	.word	0x080157c4
 8002224:	08015714 	.word	0x08015714
 8002228:	08015720 	.word	0x08015720
 800222c:	08015730 	.word	0x08015730
 8002230:	0801574c 	.word	0x0801574c
 8002234:	08015758 	.word	0x08015758
 8002238:	08015764 	.word	0x08015764

0800223c <_ZN5Modem8simA76726setAPNEPc>:

	}
	return stat;
}

enum simA7672::status simA7672::setAPN(char *apn) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b092      	sub	sp, #72	@ 0x48
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]

	status stat = simA7672_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char buf[50] = { 0 };
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	222e      	movs	r2, #46	@ 0x2e
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f010 fbba 	bl	80129d2 <memset>

	std::sprintf(buf, "AT+CGDCONT=1,\"ip\",\"%s\"\r\n", apn);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4920      	ldr	r1, [pc, #128]	@ (80022e8 <_ZN5Modem8simA76726setAPNEPc+0xac>)
 8002266:	4618      	mov	r0, r3
 8002268:	f010 fb50 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd fffd 	bl	8000270 <strlen>
 8002276:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002278:	b29a      	uxth	r2, r3
 800227a:	f107 010c 	add.w	r1, r7, #12
 800227e:	2301      	movs	r3, #1
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	230a      	movs	r3, #10
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f001 fa5a 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002290:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002294:	2100      	movs	r1, #0
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f001 fb81 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80022a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <_ZN5Modem8simA76726setAPNEPc+0x8e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80022b0:	3308      	adds	r3, #8
 80022b2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022ba:	8a92      	ldrh	r2, [r2, #20]
 80022bc:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 f8fa 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <_ZN5Modem8simA76726setAPNEPc+0x92>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <_ZN5Modem8simA76726setAPNEPc+0x94>
 80022ce:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <_ZN5Modem8simA76726setAPNEPc+0x9e>

		stat = simA7672_ERR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	}

	return stat;
 80022da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 80022de:	4618      	mov	r0, r3
 80022e0:	3740      	adds	r7, #64	@ 0x40
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	080151a0 	.word	0x080151a0

080022ec <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE>:
enum simA7672::status simA7672::activate_deactivatePDP(
		enum pdp_stat activate_deactivate) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	77fb      	strb	r3, [r7, #31]
	char buf[20] = { 0 };
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]

	std::sprintf(buf, "AT+CGACT=%d,1\r\n", activate_deactivate);
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	491e      	ldr	r1, [pc, #120]	@ (8002390 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0xa4>)
 8002316:	4618      	mov	r0, r3
 8002318:	f010 faf8 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ffa5 	bl	8000270 <strlen>
 8002326:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002328:	b29a      	uxth	r2, r3
 800232a:	f107 0108 	add.w	r1, r7, #8
 800232e:	2301      	movs	r3, #1
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	230a      	movs	r3, #10
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f001 fa02 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	2100      	movs	r1, #0
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 fb29 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800234c:	4603      	mov	r3, r0
 800234e:	77fb      	strb	r3, [r7, #31]

	if (stat != simA7672_OK
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002350:	7ffb      	ldrb	r3, [r7, #31]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800235c:	3308      	adds	r3, #8
 800235e:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) != checking.sys_ok) {
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002366:	8a92      	ldrh	r2, [r2, #20]
 8002368:	b292      	uxth	r2, r2
			|| checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800236a:	4618      	mov	r0, r3
 800236c:	f003 f8a4 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x8e>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x90>
 800237a:	2300      	movs	r3, #0
	if (stat != simA7672_OK
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <_ZN5Modem8simA767222activate_deactivatePDPENS0_8pdp_statE+0x98>

		stat = simA7672_ERR;
 8002380:	2301      	movs	r3, #1
 8002382:	77fb      	strb	r3, [r7, #31]

	}

	return stat;
 8002384:	7ffb      	ldrb	r3, [r7, #31]

}
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	080151bc 	.word	0x080151bc

08002394 <_ZN5Modem8simA76726getSimEPc>:

/*Get Functions*/
void simA7672::getSim(char *pin) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af04      	add	r7, sp, #16
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 800239e:	2301      	movs	r3, #1
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	230a      	movs	r3, #10
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023aa:	220a      	movs	r2, #10
 80023ac:	492b      	ldr	r1, [pc, #172]	@ (800245c <_ZN5Modem8simA76726getSimEPc+0xc8>)
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f001 f9c8 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80023b4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f001 faef 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d111      	bne.n	80023ee <_ZN5Modem8simA76726getSimEPc+0x5a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80023d0:	3308      	adds	r3, #8
 80023d2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023da:	8a92      	ldrh	r2, [r2, #20]
 80023dc:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 f86a 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <_ZN5Modem8simA76726getSimEPc+0x5a>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <_ZN5Modem8simA76726getSimEPc+0x5c>
 80023ee:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d024      	beq.n	800243e <_ZN5Modem8simA76726getSimEPc+0xaa>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80023fa:	3008      	adds	r0, #8
 80023fc:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002404:	8a9b      	ldrh	r3, [r3, #20]
 8002406:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	230d      	movs	r3, #13
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	233a      	movs	r3, #58	@ 0x3a
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <_ZN5Modem8simA76726getSimEPc+0xcc>)
 8002416:	f003 f875 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800241a:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <_ZN5Modem8simA76726getSimEPc+0xbe>
			return;
		} else {
			std::strcpy(pin, "--------");
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	490d      	ldr	r1, [pc, #52]	@ (8002464 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	cb03      	ldmia	r3!, {r0, r1}
 8002434:	6010      	str	r0, [r2, #0]
 8002436:	6051      	str	r1, [r2, #4]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	7213      	strb	r3, [r2, #8]
 800243c:	e00a      	b.n	8002454 <_ZN5Modem8simA76726getSimEPc+0xc0>
		}

	} else {
		std::strcpy(pin, "--------");
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	4908      	ldr	r1, [pc, #32]	@ (8002464 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 8002442:	461a      	mov	r2, r3
 8002444:	460b      	mov	r3, r1
 8002446:	cb03      	ldmia	r3!, {r0, r1}
 8002448:	6010      	str	r0, [r2, #0]
 800244a:	6051      	str	r1, [r2, #4]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	7213      	strb	r3, [r2, #8]
 8002450:	e000      	b.n	8002454 <_ZN5Modem8simA76726getSimEPc+0xc0>
			return;
 8002452:	bf00      	nop
	}

}
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	08015774 	.word	0x08015774
 8002460:	080151cc 	.word	0x080151cc
 8002464:	080151d4 	.word	0x080151d4

08002468 <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b089      	sub	sp, #36	@ 0x24
 800246c:	af04      	add	r7, sp, #16
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 8002472:	2301      	movs	r3, #1
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	230a      	movs	r3, #10
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247e:	220a      	movs	r2, #10
 8002480:	4961      	ldr	r1, [pc, #388]	@ (8002608 <_ZN5Modem8simA767210getNetworkEPc+0x1a0>)
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 f95e 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002488:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800248c:	2100      	movs	r1, #0
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f001 fa85 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d111      	bne.n	80024c2 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80024a4:	3308      	adds	r3, #8
 80024a6:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ae:	8a92      	ldrh	r2, [r2, #20]
 80024b0:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 f800 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <_ZN5Modem8simA767210getNetworkEPc+0x5a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 80024c2:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8093 	beq.w	80025f0 <_ZN5Modem8simA767210getNetworkEPc+0x188>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80024d0:	3008      	adds	r0, #8
 80024d2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024da:	8a9b      	ldrh	r3, [r3, #20]
 80024dc:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	230d      	movs	r3, #13
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	232c      	movs	r3, #44	@ 0x2c
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4b48      	ldr	r3, [pc, #288]	@ (800260c <_ZN5Modem8simA767210getNetworkEPc+0x1a4>)
 80024ec:	f003 f80a 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80024f0:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06d      	beq.n	80025dc <_ZN5Modem8simA767210getNetworkEPc+0x174>
			switch (*networkStat) {
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	3b30      	subs	r3, #48	@ 0x30
 8002506:	2b07      	cmp	r3, #7
 8002508:	d85d      	bhi.n	80025c6 <_ZN5Modem8simA767210getNetworkEPc+0x15e>
 800250a:	a201      	add	r2, pc, #4	@ (adr r2, 8002510 <_ZN5Modem8simA767210getNetworkEPc+0xa8>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002531 	.word	0x08002531
 8002514:	08002541 	.word	0x08002541
 8002518:	08002555 	.word	0x08002555
 800251c:	08002569 	.word	0x08002569
 8002520:	08002581 	.word	0x08002581
 8002524:	08002591 	.word	0x08002591
 8002528:	080025a3 	.word	0x080025a3
 800252c:	080025b3 	.word	0x080025b3
			case '0': {
				std::strcpy(networkStat, "Not-Reg");
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4937      	ldr	r1, [pc, #220]	@ (8002610 <_ZN5Modem8simA767210getNetworkEPc+0x1a8>)
 8002534:	461a      	mov	r2, r3
 8002536:	460b      	mov	r3, r1
 8002538:	cb03      	ldmia	r3!, {r0, r1}
 800253a:	6010      	str	r0, [r2, #0]
 800253c:	6051      	str	r1, [r2, #4]

				break;
 800253e:	e04c      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '1': {
				std::strcpy(networkStat, "Reg-Home");
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4934      	ldr	r1, [pc, #208]	@ (8002614 <_ZN5Modem8simA767210getNetworkEPc+0x1ac>)
 8002544:	461a      	mov	r2, r3
 8002546:	460b      	mov	r3, r1
 8002548:	cb03      	ldmia	r3!, {r0, r1}
 800254a:	6010      	str	r0, [r2, #0]
 800254c:	6051      	str	r1, [r2, #4]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	7213      	strb	r3, [r2, #8]

				break;
 8002552:	e042      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '2': {
				std::strcpy(networkStat, "Searching");
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4930      	ldr	r1, [pc, #192]	@ (8002618 <_ZN5Modem8simA767210getNetworkEPc+0x1b0>)
 8002558:	461a      	mov	r2, r3
 800255a:	460b      	mov	r3, r1
 800255c:	cb03      	ldmia	r3!, {r0, r1}
 800255e:	6010      	str	r0, [r2, #0]
 8002560:	6051      	str	r1, [r2, #4]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	8113      	strh	r3, [r2, #8]

				break;
 8002566:	e038      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '3': {
				std::strcpy(networkStat, "Reg-denied");
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	492c      	ldr	r1, [pc, #176]	@ (800261c <_ZN5Modem8simA767210getNetworkEPc+0x1b4>)
 800256c:	461a      	mov	r2, r3
 800256e:	460b      	mov	r3, r1
 8002570:	cb03      	ldmia	r3!, {r0, r1}
 8002572:	6010      	str	r0, [r2, #0]
 8002574:	6051      	str	r1, [r2, #4]
 8002576:	8819      	ldrh	r1, [r3, #0]
 8002578:	789b      	ldrb	r3, [r3, #2]
 800257a:	8111      	strh	r1, [r2, #8]
 800257c:	7293      	strb	r3, [r2, #10]

				break;
 800257e:	e02c      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4927      	ldr	r1, [pc, #156]	@ (8002620 <_ZN5Modem8simA767210getNetworkEPc+0x1b8>)
 8002584:	461a      	mov	r2, r3
 8002586:	460b      	mov	r3, r1
 8002588:	cb03      	ldmia	r3!, {r0, r1}
 800258a:	6010      	str	r0, [r2, #0]
 800258c:	6051      	str	r1, [r2, #4]

				break;
 800258e:	e024      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '5': {
				std::strcpy(networkStat, "Reg-Roaming");
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4a24      	ldr	r2, [pc, #144]	@ (8002624 <_ZN5Modem8simA767210getNetworkEPc+0x1bc>)
 8002594:	461c      	mov	r4, r3
 8002596:	4613      	mov	r3, r2
 8002598:	cb07      	ldmia	r3!, {r0, r1, r2}
 800259a:	6020      	str	r0, [r4, #0]
 800259c:	6061      	str	r1, [r4, #4]
 800259e:	60a2      	str	r2, [r4, #8]

				break;
 80025a0:	e01b      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '6': {
				std::strcpy(networkStat, "Reg-SMS");
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4920      	ldr	r1, [pc, #128]	@ (8002628 <_ZN5Modem8simA767210getNetworkEPc+0x1c0>)
 80025a6:	461a      	mov	r2, r3
 80025a8:	460b      	mov	r3, r1
 80025aa:	cb03      	ldmia	r3!, {r0, r1}
 80025ac:	6010      	str	r0, [r2, #0]
 80025ae:	6051      	str	r1, [r2, #4]

				break;
 80025b0:	e013      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			case '7': {
				std::strcpy(networkStat, "Reg-SMSR");
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	491d      	ldr	r1, [pc, #116]	@ (800262c <_ZN5Modem8simA767210getNetworkEPc+0x1c4>)
 80025b6:	461a      	mov	r2, r3
 80025b8:	460b      	mov	r3, r1
 80025ba:	cb03      	ldmia	r3!, {r0, r1}
 80025bc:	6010      	str	r0, [r2, #0]
 80025be:	6051      	str	r1, [r2, #4]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	7213      	strb	r3, [r2, #8]

				break;
 80025c4:	e009      	b.n	80025da <_ZN5Modem8simA767210getNetworkEPc+0x172>
			}
			default: {
				std::strcpy(networkStat, "--------");
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	4919      	ldr	r1, [pc, #100]	@ (8002630 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80025ca:	461a      	mov	r2, r3
 80025cc:	460b      	mov	r3, r1
 80025ce:	cb03      	ldmia	r3!, {r0, r1}
 80025d0:	6010      	str	r0, [r2, #0]
 80025d2:	6051      	str	r1, [r2, #4]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	7213      	strb	r3, [r2, #8]

				break;
 80025d8:	bf00      	nop
			}
			}
			return;
 80025da:	e012      	b.n	8002602 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		} else {
			std::strcpy(networkStat, "--------");
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4914      	ldr	r1, [pc, #80]	@ (8002630 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80025e0:	461a      	mov	r2, r3
 80025e2:	460b      	mov	r3, r1
 80025e4:	cb03      	ldmia	r3!, {r0, r1}
 80025e6:	6010      	str	r0, [r2, #0]
 80025e8:	6051      	str	r1, [r2, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	7213      	strb	r3, [r2, #8]
 80025ee:	e008      	b.n	8002602 <_ZN5Modem8simA767210getNetworkEPc+0x19a>
		}

	} else {
		std::strcpy(networkStat, "--------");
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	490f      	ldr	r1, [pc, #60]	@ (8002630 <_ZN5Modem8simA767210getNetworkEPc+0x1c8>)
 80025f4:	461a      	mov	r2, r3
 80025f6:	460b      	mov	r3, r1
 80025f8:	cb03      	ldmia	r3!, {r0, r1}
 80025fa:	6010      	str	r0, [r2, #0]
 80025fc:	6051      	str	r1, [r2, #4]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	7213      	strb	r3, [r2, #8]
	}

}
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	08015780 	.word	0x08015780
 800260c:	080151e0 	.word	0x080151e0
 8002610:	080151e8 	.word	0x080151e8
 8002614:	080151f0 	.word	0x080151f0
 8002618:	080151fc 	.word	0x080151fc
 800261c:	08015208 	.word	0x08015208
 8002620:	08015214 	.word	0x08015214
 8002624:	0801521c 	.word	0x0801521c
 8002628:	08015228 	.word	0x08015228
 800262c:	08015230 	.word	0x08015230
 8002630:	080151d4 	.word	0x080151d4

08002634 <_ZN5Modem8simA767213getNetworkPDPEPc>:

void simA7672::getNetworkPDP(char *networkStatpdp) {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b089      	sub	sp, #36	@ 0x24
 8002638:	af04      	add	r7, sp, #16
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCGREG, sizeof(atcmd_GATCGREG) - 1, 1000, _LF, CMD_mode);
 800263e:	2301      	movs	r3, #1
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	230a      	movs	r3, #10
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264a:	220b      	movs	r2, #11
 800264c:	495b      	ldr	r1, [pc, #364]	@ (80027bc <_ZN5Modem8simA767213getNetworkPDPEPc+0x188>)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f001 f878 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002654:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002658:	2100      	movs	r1, #0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f001 f99f 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d111      	bne.n	800268e <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002670:	3308      	adds	r3, #8
 8002672:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800267a:	8a92      	ldrh	r2, [r2, #20]
 800267c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800267e:	4618      	mov	r0, r3
 8002680:	f002 ff1a 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <_ZN5Modem8simA767213getNetworkPDPEPc+0x5a>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <_ZN5Modem8simA767213getNetworkPDPEPc+0x5c>
 800268e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8087 	beq.w	80027a4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x170>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800269c:	3008      	adds	r0, #8
 800269e:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGREG:", ',', _CR, networkStatpdp)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a6:	8a9b      	ldrh	r3, [r3, #20]
 80026a8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	230d      	movs	r3, #13
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	232c      	movs	r3, #44	@ 0x2c
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4b42      	ldr	r3, [pc, #264]	@ (80027c0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x18c>)
 80026b8:	f002 ff24 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80026bc:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d061      	beq.n	8002790 <_ZN5Modem8simA767213getNetworkPDPEPc+0x15c>
			switch (*networkStatpdp) {
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	3b30      	subs	r3, #48	@ 0x30
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d851      	bhi.n	800277a <_ZN5Modem8simA767213getNetworkPDPEPc+0x146>
 80026d6:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <_ZN5Modem8simA767213getNetworkPDPEPc+0xa8>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080026f9 	.word	0x080026f9
 80026e0:	08002709 	.word	0x08002709
 80026e4:	0800271d 	.word	0x0800271d
 80026e8:	08002731 	.word	0x08002731
 80026ec:	08002749 	.word	0x08002749
 80026f0:	08002759 	.word	0x08002759
 80026f4:	0800276b 	.word	0x0800276b
			case '0': {
				std::strcpy(networkStatpdp, "Not-Reg");
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4932      	ldr	r1, [pc, #200]	@ (80027c4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x190>)
 80026fc:	461a      	mov	r2, r3
 80026fe:	460b      	mov	r3, r1
 8002700:	cb03      	ldmia	r3!, {r0, r1}
 8002702:	6010      	str	r0, [r2, #0]
 8002704:	6051      	str	r1, [r2, #4]

				break;
 8002706:	e042      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '1': {
				std::strcpy(networkStatpdp, "Reg-Home");
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	492f      	ldr	r1, [pc, #188]	@ (80027c8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x194>)
 800270c:	461a      	mov	r2, r3
 800270e:	460b      	mov	r3, r1
 8002710:	cb03      	ldmia	r3!, {r0, r1}
 8002712:	6010      	str	r0, [r2, #0]
 8002714:	6051      	str	r1, [r2, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	7213      	strb	r3, [r2, #8]

				break;
 800271a:	e038      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '2': {
				std::strcpy(networkStatpdp, "Searching");
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	492b      	ldr	r1, [pc, #172]	@ (80027cc <_ZN5Modem8simA767213getNetworkPDPEPc+0x198>)
 8002720:	461a      	mov	r2, r3
 8002722:	460b      	mov	r3, r1
 8002724:	cb03      	ldmia	r3!, {r0, r1}
 8002726:	6010      	str	r0, [r2, #0]
 8002728:	6051      	str	r1, [r2, #4]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	8113      	strh	r3, [r2, #8]

				break;
 800272e:	e02e      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '3': {
				std::strcpy(networkStatpdp, "Reg-denied");
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4927      	ldr	r1, [pc, #156]	@ (80027d0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x19c>)
 8002734:	461a      	mov	r2, r3
 8002736:	460b      	mov	r3, r1
 8002738:	cb03      	ldmia	r3!, {r0, r1}
 800273a:	6010      	str	r0, [r2, #0]
 800273c:	6051      	str	r1, [r2, #4]
 800273e:	8819      	ldrh	r1, [r3, #0]
 8002740:	789b      	ldrb	r3, [r3, #2]
 8002742:	8111      	strh	r1, [r2, #8]
 8002744:	7293      	strb	r3, [r2, #10]

				break;
 8002746:	e022      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '4': {
				std::strcpy(networkStatpdp, "Unknown");
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4922      	ldr	r1, [pc, #136]	@ (80027d4 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a0>)
 800274c:	461a      	mov	r2, r3
 800274e:	460b      	mov	r3, r1
 8002750:	cb03      	ldmia	r3!, {r0, r1}
 8002752:	6010      	str	r0, [r2, #0]
 8002754:	6051      	str	r1, [r2, #4]

				break;
 8002756:	e01a      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '5': {
				std::strcpy(networkStatpdp, "Reg-Roaming");
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	@ (80027d8 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a4>)
 800275c:	461c      	mov	r4, r3
 800275e:	4613      	mov	r3, r2
 8002760:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002762:	6020      	str	r0, [r4, #0]
 8002764:	6061      	str	r1, [r4, #4]
 8002766:	60a2      	str	r2, [r4, #8]

				break;
 8002768:	e011      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			case '6': {
				std::strcpy(networkStatpdp, "Reg-SMS");
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	491b      	ldr	r1, [pc, #108]	@ (80027dc <_ZN5Modem8simA767213getNetworkPDPEPc+0x1a8>)
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	cb03      	ldmia	r3!, {r0, r1}
 8002774:	6010      	str	r0, [r2, #0]
 8002776:	6051      	str	r1, [r2, #4]

				break;
 8002778:	e009      	b.n	800278e <_ZN5Modem8simA767213getNetworkPDPEPc+0x15a>
			}
			default: {
				std::strcpy(networkStatpdp, "--------");
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	4918      	ldr	r1, [pc, #96]	@ (80027e0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 800277e:	461a      	mov	r2, r3
 8002780:	460b      	mov	r3, r1
 8002782:	cb03      	ldmia	r3!, {r0, r1}
 8002784:	6010      	str	r0, [r2, #0]
 8002786:	6051      	str	r1, [r2, #4]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	7213      	strb	r3, [r2, #8]

				break;
 800278c:	bf00      	nop
			}
			}
			return;
 800278e:	e012      	b.n	80027b6 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		} else {
			std::strcpy(networkStatpdp, "--------");
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4913      	ldr	r1, [pc, #76]	@ (80027e0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 8002794:	461a      	mov	r2, r3
 8002796:	460b      	mov	r3, r1
 8002798:	cb03      	ldmia	r3!, {r0, r1}
 800279a:	6010      	str	r0, [r2, #0]
 800279c:	6051      	str	r1, [r2, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	7213      	strb	r3, [r2, #8]
 80027a2:	e008      	b.n	80027b6 <_ZN5Modem8simA767213getNetworkPDPEPc+0x182>
		}

	} else {
		std::strcpy(networkStatpdp, "--------");
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	490e      	ldr	r1, [pc, #56]	@ (80027e0 <_ZN5Modem8simA767213getNetworkPDPEPc+0x1ac>)
 80027a8:	461a      	mov	r2, r3
 80027aa:	460b      	mov	r3, r1
 80027ac:	cb03      	ldmia	r3!, {r0, r1}
 80027ae:	6010      	str	r0, [r2, #0]
 80027b0:	6051      	str	r1, [r2, #4]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	7213      	strb	r3, [r2, #8]
	}

}
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	0801578c 	.word	0x0801578c
 80027c0:	0801523c 	.word	0x0801523c
 80027c4:	080151e8 	.word	0x080151e8
 80027c8:	080151f0 	.word	0x080151f0
 80027cc:	080151fc 	.word	0x080151fc
 80027d0:	08015208 	.word	0x08015208
 80027d4:	08015214 	.word	0x08015214
 80027d8:	0801521c 	.word	0x0801521c
 80027dc:	08015228 	.word	0x08015228
 80027e0:	080151d4 	.word	0x080151d4

080027e4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE>:

void simA7672::getPDPstatus(enum pdp_stat *status_pdp) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af04      	add	r7, sp, #16
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[10] = { 0 };
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	809a      	strh	r2, [r3, #4]

	*status_pdp = pdp_noReply;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2202      	movs	r2, #2
 8002800:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCGACT, sizeof(atcmd_GATCGACT) - 1, 1000, _LF, CMD_mode);
 8002802:	2301      	movs	r3, #1
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	230a      	movs	r3, #10
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800280e:	220b      	movs	r2, #11
 8002810:	4928      	ldr	r1, [pc, #160]	@ (80028b4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd0>)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 ff96 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002818:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800281c:	2100      	movs	r1, #0
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 f8bd 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d111      	bne.n	8002852 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002834:	3308      	adds	r3, #8
 8002836:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800283e:	8a92      	ldrh	r2, [r2, #20]
 8002840:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fe38 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x6e>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0x70>
 8002852:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002854:	2b00      	cmp	r3, #0
 8002856:	d029      	beq.n	80028ac <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800285e:	3008      	adds	r0, #8
 8002860:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CGACT:", ':', ',', buf)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002868:	8a9b      	ldrh	r3, [r3, #20]
 800286a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	232c      	movs	r3, #44	@ 0x2c
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	233a      	movs	r3, #58	@ 0x3a
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xd4>)
 800287c:	f002 fe42 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002880:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
			switch (*buf) {
 8002890:	7b3b      	ldrb	r3, [r7, #12]
 8002892:	2b30      	cmp	r3, #48	@ 0x30
 8002894:	d002      	beq.n	800289c <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xb8>
 8002896:	2b31      	cmp	r3, #49	@ 0x31
 8002898:	d004      	beq.n	80028a4 <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc0>

		}

	}

}
 800289a:	e007      	b.n	80028ac <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_deactivated;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
				break;
 80028a2:	e003      	b.n	80028ac <_ZN5Modem8simA767212getPDPstatusEPNS0_8pdp_statE+0xc8>
				*status_pdp = pdp_activate;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
				break;
 80028aa:	bf00      	nop
}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	08015798 	.word	0x08015798
 80028b8:	08015244 	.word	0x08015244

080028bc <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE>:

void simA7672::getUEsystemInfo(enum UE_systemInfo *status_ue) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]

	status stat;

	char buf[15] = { 0 };
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	f8c3 2007 	str.w	r2, [r3, #7]

	*status_ue = no_service;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]

	PrepRxTx(atcmd_GATCPSI, sizeof(atcmd_GATCPSI) - 1, 1000, _LF, CMD_mode);
 80028de:	2301      	movs	r3, #1
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	230a      	movs	r3, #10
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ea:	220a      	movs	r2, #10
 80028ec:	4945      	ldr	r1, [pc, #276]	@ (8002a04 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x148>)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 ff28 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80028f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f001 f84f 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002900:	4603      	mov	r3, r0
 8002902:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d111      	bne.n	800292e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002910:	3308      	adds	r3, #8
 8002912:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800291a:	8a92      	ldrh	r2, [r2, #20]
 800291c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fdca 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x72>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x74>
 800292e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002930:	2b00      	cmp	r3, #0
 8002932:	d062      	beq.n	80029fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>

		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800293a:	3008      	adds	r0, #8
 800293c:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPSI:", ':', ',', buf)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002944:	8a9b      	ldrh	r3, [r3, #20]
 8002946:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	232c      	movs	r3, #44	@ 0x2c
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	233a      	movs	r3, #58	@ 0x3a
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x14c>)
 8002958:	f002 fdd4 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800295c:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002968:	2b00      	cmp	r3, #0
 800296a:	d046      	beq.n	80029fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			if (std::strstr(buf, "NO SERVICE")) {
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	4926      	ldr	r1, [pc, #152]	@ (8002a0c <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x150>)
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fdb8 	bl	80014e8 <_ZSt6strstrPcPKc>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xd4>
				*status_ue = no_service;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800298e:	e034      	b.n	80029fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "GSM")) {
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	491e      	ldr	r1, [pc, #120]	@ (8002a10 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x154>)
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fda6 	bl	80014e8 <_ZSt6strstrPcPKc>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0xf8>
				*status_ue = gsm;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
}
 80029b2:	e022      	b.n	80029fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "WCDMA")) {
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	4916      	ldr	r1, [pc, #88]	@ (8002a14 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x158>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fd94 	bl	80014e8 <_ZSt6strstrPcPKc>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x11c>
				*status_ue = wcdma;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	701a      	strb	r2, [r3, #0]
}
 80029d6:	e010      	b.n	80029fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
			} else if (std::strstr(buf, "LTE")) {
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	490e      	ldr	r1, [pc, #56]	@ (8002a18 <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x15c>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fd82 	bl	80014e8 <_ZSt6strstrPcPKc>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf14      	ite	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	2300      	moveq	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <_ZN5Modem8simA767215getUEsystemInfoEPNS0_13UE_systemInfoE+0x13e>
				*status_ue = lte;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2203      	movs	r2, #3
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	080157a4 	.word	0x080157a4
 8002a08:	0801524c 	.word	0x0801524c
 8002a0c:	08015254 	.word	0x08015254
 8002a10:	08015260 	.word	0x08015260
 8002a14:	08015264 	.word	0x08015264
 8002a18:	0801526c 	.word	0x0801526c

08002a1c <_ZN5Modem8simA767210getSignalQEPc>:

void simA7672::getSignalQ(char *quality) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af04      	add	r7, sp, #16
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10] = { 0 };
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	f107 0310 	add.w	r3, r7, #16
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	809a      	strh	r2, [r3, #4]
	int8_t csq = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 8002a38:	2301      	movs	r3, #1
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	230a      	movs	r3, #10
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a44:	2208      	movs	r2, #8
 8002a46:	4939      	ldr	r1, [pc, #228]	@ (8002b2c <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fe7b 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8002a4e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a52:	2100      	movs	r1, #0
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 ffa2 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a5e:	7dbb      	ldrb	r3, [r7, #22]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a74:	8a92      	ldrh	r2, [r2, #20]
 8002a76:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fd1d 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <_ZN5Modem8simA767210getSignalQEPc+0x6c>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <_ZN5Modem8simA767210getSignalQEPc+0x6e>
 8002a88:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d041      	beq.n	8002b12 <_ZN5Modem8simA767210getSignalQEPc+0xf6>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002a94:	3008      	adds	r0, #8
 8002a96:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9e:	8a9b      	ldrh	r3, [r3, #20]
 8002aa0:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	232c      	movs	r3, #44	@ 0x2c
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	233a      	movs	r3, #58	@ 0x3a
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b30 <_ZN5Modem8simA767210getSignalQEPc+0x114>)
 8002ab2:	f002 fd27 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002ab6:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01b      	beq.n	8002afe <_ZN5Modem8simA767210getSignalQEPc+0xe2>

			csq = std::atoi(buffer);
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	4618      	mov	r0, r3
 8002acc:	f00f f97c 	bl	8011dc8 <atoi>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 8002ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ad8:	2b62      	cmp	r3, #98	@ 0x62
 8002ada:	dd02      	ble.n	8002ae2 <_ZN5Modem8simA767210getSignalQEPc+0xc6>
				csq = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]
 8002ae0:	e005      	b.n	8002aee <_ZN5Modem8simA767210getSignalQEPc+0xd2>

			} else {
				csq = (2 * (csq)) - 113;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3b71      	subs	r3, #113	@ 0x71
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 8002aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002af2:	461a      	mov	r2, r3
 8002af4:	490f      	ldr	r1, [pc, #60]	@ (8002b34 <_ZN5Modem8simA767210getSignalQEPc+0x118>)
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f00f ff08 	bl	801290c <siprintf>
 8002afc:	e012      	b.n	8002b24 <_ZN5Modem8simA767210getSignalQEPc+0x108>

			return;
		} else {
			std::strcpy(quality, "--------");
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	490d      	ldr	r1, [pc, #52]	@ (8002b38 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8002b02:	461a      	mov	r2, r3
 8002b04:	460b      	mov	r3, r1
 8002b06:	cb03      	ldmia	r3!, {r0, r1}
 8002b08:	6010      	str	r0, [r2, #0]
 8002b0a:	6051      	str	r1, [r2, #4]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	7213      	strb	r3, [r2, #8]
 8002b10:	e008      	b.n	8002b24 <_ZN5Modem8simA767210getSignalQEPc+0x108>
		}

	} else {
		std::strcpy(quality, "--------");
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	4908      	ldr	r1, [pc, #32]	@ (8002b38 <_ZN5Modem8simA767210getSignalQEPc+0x11c>)
 8002b16:	461a      	mov	r2, r3
 8002b18:	460b      	mov	r3, r1
 8002b1a:	cb03      	ldmia	r3!, {r0, r1}
 8002b1c:	6010      	str	r0, [r2, #0]
 8002b1e:	6051      	str	r1, [r2, #4]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	7213      	strb	r3, [r2, #8]
	}

}
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	080157b0 	.word	0x080157b0
 8002b30:	08015270 	.word	0x08015270
 8002b34:	08015278 	.word	0x08015278
 8002b38:	080151d4 	.word	0x080151d4

08002b3c <_ZN5Modem8simA767223getmqttconnectionstatusEPc>:
		/*ToDo*/
	}

}

enum simA7672::mqtt_flags simA7672::getmqttconnectionstatus(char *serverAddr) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0a0      	sub	sp, #128	@ 0x80
 8002b40:	af04      	add	r7, sp, #16
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	status stat = simA7672_ERR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	mqtt_flags statMqtt = mqtt_serverDisconnected;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	char buf[100] = { 0 };
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	2260      	movs	r2, #96	@ 0x60
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00f ff37 	bl	80129d2 <memset>

	PrepRxTx(atcmd_GATCMQTTCONNECT, sizeof(atcmd_GATCMQTTCONNECT) - 1, 1000,
 8002b64:	2301      	movs	r3, #1
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	230a      	movs	r3, #10
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b70:	2212      	movs	r2, #18
 8002b72:	492c      	ldr	r1, [pc, #176]	@ (8002c24 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xe8>)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fde5 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
			_LF, CMD_mode);
	stat = check_eventTimeout(rx_evt, 8000);
 8002b7a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002b7e:	2100      	movs	r1, #0
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 ff0c 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002b8c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ba4:	8a92      	ldrh	r2, [r2, #20]
 8002ba6:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fc85 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7c>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0x7e>
 8002bb8:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02c      	beq.n	8002c18 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002bc4:	3008      	adds	r0, #8
 8002bc6:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", '"', '"', buf)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bce:	8a9b      	ldrh	r3, [r3, #20]
 8002bd0:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	2322      	movs	r3, #34	@ 0x22
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2322      	movs	r3, #34	@ 0x22
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xec>)
 8002be2:	f002 fc8f 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002be6:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>

			if (std::strstr(serverAddr, const_cast<const char*>(buf))) {
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6838      	ldr	r0, [r7, #0]
 8002bfe:	f7fe fc73 	bl	80014e8 <_ZSt6strstrPcPKc>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <_ZN5Modem8simA767223getmqttconnectionstatusEPc+0xdc>
				statMqtt = mqtt_serverConnected;
 8002c12:	2302      	movs	r3, #2
 8002c14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		}

	}

	return statMqtt;
 8002c18:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3770      	adds	r7, #112	@ 0x70
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	080157ec 	.word	0x080157ec
 8002c28:	080152a0 	.word	0x080152a0

08002c2c <_ZN5Modem8simA76729mqttStartEPh>:

enum simA7672::mqtt_flags simA7672::mqttStart(uint8_t *mqtt_index) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	@ 0x28
 8002c30:	af04      	add	r7, sp, #16
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]

	status stat = simA7672_ERR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	809a      	strh	r2, [r3, #4]

	PrepRxTx(atmcd_ATCMQTTSTART, sizeof(atmcd_ATCMQTTSTART) - 1, 1000, '+', 2,_LF,
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	230a      	movs	r3, #10
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	2302      	movs	r3, #2
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	232b      	movs	r3, #43	@ 0x2b
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c60:	220f      	movs	r2, #15
 8002c62:	4928      	ldr	r1, [pc, #160]	@ (8002d04 <_ZN5Modem8simA76729mqttStartEPh+0xd8>)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fdcf 	bl	8003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002c6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002c6e:	2100      	movs	r1, #0
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fe94 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002c7a:	7dbb      	ldrb	r3, [r7, #22]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d111      	bne.n	8002ca4 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002c86:	3308      	adds	r3, #8
 8002c88:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c90:	8a92      	ldrh	r2, [r2, #20]
 8002c92:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fc0f 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <_ZN5Modem8simA76729mqttStartEPh+0x78>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <_ZN5Modem8simA76729mqttStartEPh+0x7a>
 8002ca4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d026      	beq.n	8002cf8 <_ZN5Modem8simA76729mqttStartEPh+0xcc>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002cb0:	3008      	adds	r0, #8
 8002cb2:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTART:", ':', _LF, buf)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cba:	8a9b      	ldrh	r3, [r3, #20]
 8002cbc:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	233a      	movs	r3, #58	@ 0x3a
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <_ZN5Modem8simA76729mqttStartEPh+0xdc>)
 8002cce:	f002 fc19 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002cd2:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <_ZN5Modem8simA76729mqttStartEPh+0xcc>

			statMqtt = mqtt_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]

			*mqtt_index = std::atoi(buf);
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f00f f86c 	bl	8011dc8 <atoi>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	701a      	strb	r2, [r3, #0]

		}

	}

	return statMqtt;
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]

}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	080157cc 	.word	0x080157cc
 8002d08:	080152b0 	.word	0x080152b0

08002d0c <_ZN5Modem8simA76728mqttStopEv>:

enum simA7672::mqtt_flags simA7672::mqttStop() {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75bb      	strb	r3, [r7, #22]
	mqtt_flags statMqtt = mqtt_ERR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
	char buf[10] = { 0 };
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	f107 0310 	add.w	r3, r7, #16
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	809a      	strh	r2, [r3, #4]
	PrepRxTx(atcmd_ATCMQTTSTOP, sizeof(atcmd_ATCMQTTSTOP) - 1, 1000, '+',2, _LF,
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	9303      	str	r3, [sp, #12]
 8002d2e:	230a      	movs	r3, #10
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	2302      	movs	r3, #2
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	232b      	movs	r3, #43	@ 0x2b
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d3e:	220e      	movs	r2, #14
 8002d40:	4923      	ldr	r1, [pc, #140]	@ (8002dd0 <_ZN5Modem8simA76728mqttStopEv+0xc4>)
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fd60 	bl	8003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 8002d48:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fe25 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002d58:	7dbb      	ldrb	r3, [r7, #22]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d111      	bne.n	8002d82 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d64:	3308      	adds	r3, #8
 8002d66:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d6e:	8a92      	ldrh	r2, [r2, #20]
 8002d70:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fba0 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <_ZN5Modem8simA76728mqttStopEv+0x76>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <_ZN5Modem8simA76728mqttStopEv+0x78>
 8002d82:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01d      	beq.n	8002dc4 <_ZN5Modem8simA76728mqttStopEv+0xb8>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002d8e:	3008      	adds	r0, #8
 8002d90:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTSTOP:", ':', _LF, buf)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d98:	8a9b      	ldrh	r3, [r3, #20]
 8002d9a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	230a      	movs	r3, #10
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	233a      	movs	r3, #58	@ 0x3a
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <_ZN5Modem8simA76728mqttStopEv+0xc8>)
 8002dac:	f002 fbaa 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8002db0:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <_ZN5Modem8simA76728mqttStopEv+0xb8>

			statMqtt = mqtt_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	75fb      	strb	r3, [r7, #23]

		}

	}

	return statMqtt;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	080157dc 	.word	0x080157dc
 8002dd4:	080152c0 	.word	0x080152c0

08002dd8 <_ZN5Modem8simA767213mqttSetClientEhPch>:

enum simA7672::mqtt_flags simA7672::mqttSetClient(uint8_t mqtt_index,
		char *client,uint8_t activate_ssl) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b09c      	sub	sp, #112	@ 0x70
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	460b      	mov	r3, r1
 8002de6:	72fb      	strb	r3, [r7, #11]
 8002de8:	4613      	mov	r3, r2
 8002dea:	72bb      	strb	r3, [r7, #10]
	status stat = simA7672_ERR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	mqtt_flags statMqtt = mqtt_ERR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	char buf[80] = { 0 };
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	224c      	movs	r2, #76	@ 0x4c
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00f fde4 	bl	80129d2 <memset>

	std::sprintf(buf, "AT+CMQTTACCQ=%d,\"%s\",%d\r\n", mqtt_index, client,activate_ssl);
 8002e0a:	7afa      	ldrb	r2, [r7, #11]
 8002e0c:	7abb      	ldrb	r3, [r7, #10]
 8002e0e:	f107 0014 	add.w	r0, r7, #20
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4920      	ldr	r1, [pc, #128]	@ (8002e98 <_ZN5Modem8simA767213mqttSetClientEhPch+0xc0>)
 8002e18:	f00f fd78 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fa25 	bl	8000270 <strlen>
 8002e26:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	f107 0114 	add.w	r1, r7, #20
 8002e2e:	2301      	movs	r3, #1
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	230a      	movs	r3, #10
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fc82 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002e40:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002e44:	2100      	movs	r1, #0
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fda9 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e52:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d111      	bne.n	8002e7e <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e60:	3308      	adds	r3, #8
 8002e62:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e6a:	8a92      	ldrh	r2, [r2, #20]
 8002e6c:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 fb22 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <_ZN5Modem8simA767213mqttSetClientEhPch+0xa6>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <_ZN5Modem8simA767213mqttSetClientEhPch+0xa8>
 8002e7e:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <_ZN5Modem8simA767213mqttSetClientEhPch+0xb2>

		statMqtt = mqtt_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	}

	return statMqtt;
 8002e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3768      	adds	r7, #104	@ 0x68
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	080152cc 	.word	0x080152cc

08002e9c <_ZN5Modem8simA767217mqttReleaseClientEh>:

enum simA7672::mqtt_flags simA7672::mqttReleaseClient(uint8_t mqtt_index) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b09a      	sub	sp, #104	@ 0x68
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	mqtt_flags statMqtt = mqtt_ERR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	224c      	movs	r2, #76	@ 0x4c
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f00f fd86 	bl	80129d2 <memset>

	std::sprintf(buf, "AT+CMQTTREL=%d\r\n", mqtt_index);
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	4920      	ldr	r1, [pc, #128]	@ (8002f50 <_ZN5Modem8simA767217mqttReleaseClientEh+0xb4>)
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f00f fd1c 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd f9c9 	bl	8000270 <strlen>
 8002ede:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	f107 010c 	add.w	r1, r7, #12
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	230a      	movs	r3, #10
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fc26 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8002ef8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002efc:	2100      	movs	r1, #0
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fd4d 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f0a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d111      	bne.n	8002f36 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002f18:	3308      	adds	r3, #8
 8002f1a:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f22:	8a92      	ldrh	r2, [r2, #20]
 8002f24:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fac6 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9a>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <_ZN5Modem8simA767217mqttReleaseClientEh+0x9c>
 8002f36:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <_ZN5Modem8simA767217mqttReleaseClientEh+0xa6>
		statMqtt = mqtt_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return statMqtt;
 8002f42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3760      	adds	r7, #96	@ 0x60
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	080152e8 	.word	0x080152e8

08002f54 <_ZN5Modem8simA767217mqttConnectServerEhPc>:

enum simA7672::mqtt_flags simA7672::mqttConnectServer(uint8_t mqtt_index,
		char *url) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0b0      	sub	sp, #192	@ 0xc0
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	72fb      	strb	r3, [r7, #11]

	status stat = simA7672_ERR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	char buf[150] = { 0 };
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	2292      	movs	r2, #146	@ 0x92
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f00f fd29 	bl	80129d2 <memset>
	char recv_buf[5] = { 0 };
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	2300      	movs	r3, #0
 8002f86:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTCONNECT=%d,\"%s\",60,1\r\n", mqtt_index, url);
 8002f88:	7afa      	ldrb	r2, [r7, #11]
 8002f8a:	f107 0018 	add.w	r0, r7, #24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	492c      	ldr	r1, [pc, #176]	@ (8003044 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf0>)
 8002f92:	f00f fcbb 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8002f96:	f107 0318 	add.w	r3, r7, #24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd f968 	bl	8000270 <strlen>
 8002fa0:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	f107 0118 	add.w	r1, r7, #24
 8002fa8:	2303      	movs	r3, #3
 8002faa:	9303      	str	r3, [sp, #12]
 8002fac:	230a      	movs	r3, #10
 8002fae:	9302      	str	r3, [sp, #8]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	232b      	movs	r3, #43	@ 0x2b
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fc23 	bl	8003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 30000); //more delay as this commands take sometimes to generate notification
 8002fc2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fce8 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if (stat == simA7672_OK) {
 8002fd4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d12c      	bne.n	8003036 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8002fe2:	3008      	adds	r0, #8
 8002fe4:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) "+CMQTTCONNECT:", ',', _LF, recv_buf)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fec:	8a9b      	ldrh	r3, [r3, #20]
 8002fee:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	232c      	movs	r3, #44	@ 0x2c
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf4>)
 8003000:	f002 fa80 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8003004:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>

			if (std::strstr(recv_buf, "0")) {
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	490c      	ldr	r1, [pc, #48]	@ (800304c <_ZN5Modem8simA767217mqttConnectServerEhPc+0xf8>)
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fa64 	bl	80014e8 <_ZSt6strstrPcPKc>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <_ZN5Modem8simA767217mqttConnectServerEhPc+0xe2>
				statMqtt = mqtt_serverConnected;
 8003030:	2302      	movs	r3, #2
 8003032:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

		}

	}

	return statMqtt;
 8003036:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800303a:	4618      	mov	r0, r3
 800303c:	37b0      	adds	r7, #176	@ 0xb0
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	080152fc 	.word	0x080152fc
 8003048:	080152a0 	.word	0x080152a0
 800304c:	0801531c 	.word	0x0801531c

08003050 <_ZN5Modem8simA767220mqttDisconnectServerEh>:

enum simA7672::mqtt_flags simA7672::mqttDisconnectServer(uint8_t mqtt_index) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b0ae      	sub	sp, #184	@ 0xb8
 8003054:	af04      	add	r7, sp, #16
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_ERR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	char buf[150] = { 0 };
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	2292      	movs	r2, #146	@ 0x92
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f00f fcac 	bl	80129d2 <memset>
	char recv_buf[5] = { 0 };
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	2300      	movs	r3, #0
 8003080:	733b      	strb	r3, [r7, #12]

	std::sprintf(buf, "AT+CMQTTDISC=%d,120\r\n", mqtt_index);
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	f107 0310 	add.w	r3, r7, #16
 8003088:	492c      	ldr	r1, [pc, #176]	@ (800313c <_ZN5Modem8simA767220mqttDisconnectServerEh+0xec>)
 800308a:	4618      	mov	r0, r3
 800308c:	f00f fc3e 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '+',2, _LF,
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f8eb 	bl	8000270 <strlen>
 800309a:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 800309c:	b29a      	uxth	r2, r3
 800309e:	f107 0110 	add.w	r1, r7, #16
 80030a2:	2303      	movs	r3, #3
 80030a4:	9303      	str	r3, [sp, #12]
 80030a6:	230a      	movs	r3, #10
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	2302      	movs	r3, #2
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	232b      	movs	r3, #43	@ 0x2b
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fba6 	bl	8003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
			Notification_mode);
	stat = check_eventTimeout(rx_evt, 10000);
 80030bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80030c0:	2100      	movs	r1, #0
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fc6b 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (stat == simA7672_OK) {
 80030ce:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d12c      	bne.n	8003130 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80030dc:	3008      	adds	r0, #8
 80030de:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CMQTTDISC:", ',', _LF, recv_buf)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e6:	8a9b      	ldrh	r3, [r3, #20]
 80030e8:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	9302      	str	r3, [sp, #8]
 80030f0:	230a      	movs	r3, #10
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	232c      	movs	r3, #44	@ 0x2c
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf0>)
 80030fa:	f002 fa03 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80030fe:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>

			if (std::strstr(recv_buf, "0")) {
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	490c      	ldr	r1, [pc, #48]	@ (8003144 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xf4>)
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe f9e7 	bl	80014e8 <_ZSt6strstrPcPKc>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <_ZN5Modem8simA767220mqttDisconnectServerEh+0xe0>
				statMqtt = mqtt_serverDisconnected;
 800312a:	2303      	movs	r3, #3
 800312c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}

	return statMqtt;
 8003130:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7

}
 8003134:	4618      	mov	r0, r3
 8003136:	37a8      	adds	r7, #168	@ 0xa8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	08015320 	.word	0x08015320
 8003140:	08015338 	.word	0x08015338
 8003144:	0801531c 	.word	0x0801531c

08003148 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t>:

	return statMqtt;

}
enum simA7672::mqtt_flags simA7672::mqttsubTopicAndRead(uint8_t mqtt_index,
		char *subTopic, char *Message,uint16_t msgbufferSize) {
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b0af      	sub	sp, #188	@ 0xbc
 800314c:	af04      	add	r7, sp, #16
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	460b      	mov	r3, r1
 8003156:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	mqtt_flags statMqtt = mqtt_ERR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	char buf[150] = { 0 };
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2292      	movs	r2, #146	@ 0x92
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f00f fc2e 	bl	80129d2 <memset>


	std::sprintf(buf, "AT+CMQTTSUB=%d,%d,1\r\n", mqtt_index,
 8003176:	7afc      	ldrb	r4, [r7, #11]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd f879 	bl	8000270 <strlen>
 800317e:	4603      	mov	r3, r0
 8003180:	f107 0010 	add.w	r0, r7, #16
 8003184:	4622      	mov	r2, r4
 8003186:	494b      	ldr	r1, [pc, #300]	@ (80032b4 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x16c>)
 8003188:	f00f fbc0 	bl	801290c <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f86d 	bl	8000270 <strlen>
 8003196:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003198:	b29a      	uxth	r2, r3
 800319a:	f107 0110 	add.w	r1, r7, #16
 800319e:	2302      	movs	r3, #2
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	233e      	movs	r3, #62	@ 0x3e
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 faca 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 80031b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031b4:	2100      	movs	r1, #0
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fbf1 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	//Rx_info.reset_timeout =1;
	if (stat == simA7672_OK) {
 80031c2:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d16e      	bne.n	80032a8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80031d0:	3008      	adds	r0, #8
 80031d2:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031da:	8a9b      	ldrh	r3, [r3, #20]
 80031dc:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80031de:	2300      	movs	r3, #0
 80031e0:	9302      	str	r3, [sp, #8]
 80031e2:	230a      	movs	r3, #10
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	232c      	movs	r3, #44	@ 0x2c
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	4b33      	ldr	r3, [pc, #204]	@ (80032b8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x170>)
 80031ec:	f002 f98a 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80031f0:	4603      	mov	r3, r0
				== checking.sys_ok) {
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d053      	beq.n	80032a8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000,'+' ,5,_LF,
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd f835 	bl	8000270 <strlen>
 8003206:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003208:	b29a      	uxth	r2, r3
 800320a:	2303      	movs	r3, #3
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	230a      	movs	r3, #10
 8003210:	9302      	str	r3, [sp, #8]
 8003212:	2305      	movs	r3, #5
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	232b      	movs	r3, #43	@ 0x2b
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 faf1 	bl	8003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt,1000);
 8003226:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800322a:	2100      	movs	r1, #0
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fbb6 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

			if (stat == simA7672_OK
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003238:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800323c:	2b00      	cmp	r3, #0
 800323e:	d111      	bne.n	8003264 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003246:	3308      	adds	r3, #8
 8003248:	68f9      	ldr	r1, [r7, #12]
							Rx_info.Rxcount) == checking.sys_ok) {
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003250:	8a92      	ldrh	r2, [r2, #20]
 8003252:	b292      	uxth	r2, r2
					&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003254:	4618      	mov	r0, r3
 8003256:	f002 f92f 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11c>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x11e>
 8003264:	2300      	movs	r3, #0
			if (stat == simA7672_OK
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01e      	beq.n	80032a8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>

				if(checking.extractData((const char*) Rxbuffer, "+CMQTTRXPAYLOAD:", '\n', '\r', Message, msgbufferSize) == checking.sys_ok)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8003270:	3008      	adds	r0, #8
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003278:	9302      	str	r3, [sp, #8]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	230d      	movs	r3, #13
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	230a      	movs	r3, #10
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x174>)
 8003286:	f002 fa05 	bl	8005694 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x15a>
				{

					statMqtt = mqtt_msgrecv;
 800329a:	2305      	movs	r3, #5
 800329c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80032a0:	e002      	b.n	80032a8 <_ZN5Modem8simA767219mqttsubTopicAndReadEhPcS1_t+0x160>
				}
				else
				{
					statMqtt = mqtt_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

		}

	}
	//Rx_info.reset_timeout =0;
	return statMqtt;
 80032a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	37ac      	adds	r7, #172	@ 0xac
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	08015344 	.word	0x08015344
 80032b8:	0801535c 	.word	0x0801535c
 80032bc:	08015360 	.word	0x08015360

080032c0 <_ZN5Modem8simA767214mqttunsubTopicEhPc>:
enum simA7672::mqtt_flags simA7672::mqttunsubTopic(uint8_t mqtt_index,
		char *subTopic) {
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b0b1      	sub	sp, #196	@ 0xc4
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	460b      	mov	r3, r1
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	72fb      	strb	r3, [r7, #11]
	status stat = simA7672_ERR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	mqtt_flags statMqtt = mqtt_ERR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	char buf[150] = { 0 };
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	2292      	movs	r2, #146	@ 0x92
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f00f fb73 	bl	80129d2 <memset>
	char recv_buf[5] = { 0 };
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	2300      	movs	r3, #0
 80032f2:	753b      	strb	r3, [r7, #20]

	std::sprintf(buf, "AT+CMQTTUNSUB=%d,%d,0\r\n", mqtt_index,
 80032f4:	7afc      	ldrb	r4, [r7, #11]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fc ffba 	bl	8000270 <strlen>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f107 0018 	add.w	r0, r7, #24
 8003302:	4622      	mov	r2, r4
 8003304:	4947      	ldr	r1, [pc, #284]	@ (8003424 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x164>)
 8003306:	f00f fb01 	bl	801290c <siprintf>
			std::strlen(const_cast<const char*>(subTopic)));
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, '>', MSG_mode);
 800330a:	f107 0318 	add.w	r3, r7, #24
 800330e:	4618      	mov	r0, r3
 8003310:	f7fc ffae 	bl	8000270 <strlen>
 8003314:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003316:	b29a      	uxth	r2, r3
 8003318:	f107 0118 	add.w	r1, r7, #24
 800331c:	2302      	movs	r3, #2
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	233e      	movs	r3, #62	@ 0x3e
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa0b 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 1000);
 800332e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003332:	2100      	movs	r1, #0
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fb32 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	if (stat == simA7672_OK) {
 8003340:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003344:	2b00      	cmp	r3, #0
 8003346:	d167      	bne.n	8003418 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 800334e:	3008      	adds	r0, #8
 8003350:	68f9      	ldr	r1, [r7, #12]
				Rx_info.Rxcount, (char*) ">", ',', _LF, nullptr)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003358:	8a9b      	ldrh	r3, [r3, #20]
 800335a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800335c:	2300      	movs	r3, #0
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	230a      	movs	r3, #10
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	232c      	movs	r3, #44	@ 0x2c
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4b2f      	ldr	r3, [pc, #188]	@ (8003428 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x168>)
 800336a:	f002 f8cb 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800336e:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04c      	beq.n	8003418 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
					std::strlen(const_cast<const char*>(subTopic)), 1000, '+',1, _LF,
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fc ff76 	bl	8000270 <strlen>
 8003384:	4603      	mov	r3, r0
			PrepRxTx(reinterpret_cast<const uint8_t*>(subTopic),
 8003386:	b29a      	uxth	r2, r3
 8003388:	2303      	movs	r3, #3
 800338a:	9303      	str	r3, [sp, #12]
 800338c:	230a      	movs	r3, #10
 800338e:	9302      	str	r3, [sp, #8]
 8003390:	2301      	movs	r3, #1
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	232b      	movs	r3, #43	@ 0x2b
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa32 	bl	8003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>
					Notification_mode);
			stat = check_eventTimeout(rx_evt, 10000);
 80033a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80033a8:	2100      	movs	r1, #0
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 faf7 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

			if (stat == simA7672_OK) {
 80033b6:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d12c      	bne.n	8003418 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80033c4:	3008      	adds	r0, #8
 80033c6:	68f9      	ldr	r1, [r7, #12]
						Rx_info.Rxcount, (char*) "+CMQTTUNSUB:", ',', _LF,
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ce:	8a9b      	ldrh	r3, [r3, #20]
 80033d0:	b29a      	uxth	r2, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033d2:	f107 0310 	add.w	r3, r7, #16
 80033d6:	9302      	str	r3, [sp, #8]
 80033d8:	230a      	movs	r3, #10
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	232c      	movs	r3, #44	@ 0x2c
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4b12      	ldr	r3, [pc, #72]	@ (800342c <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x16c>)
 80033e2:	f002 f88f 	bl	8005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 80033e6:	4603      	mov	r3, r0
						recv_buf) == checking.sys_ok) {
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
				if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>

					if (std::strstr(recv_buf, "0")) {
 80033f6:	f107 0310 	add.w	r3, r7, #16
 80033fa:	490d      	ldr	r1, [pc, #52]	@ (8003430 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x170>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe f873 	bl	80014e8 <_ZSt6strstrPcPKc>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <_ZN5Modem8simA767214mqttunsubTopicEhPc+0x158>
						statMqtt = mqtt_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

			}
		}
	}

	return statMqtt;
 8003418:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800341c:	4618      	mov	r0, r3
 800341e:	37b4      	adds	r7, #180	@ 0xb4
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}
 8003424:	08015374 	.word	0x08015374
 8003428:	0801535c 	.word	0x0801535c
 800342c:	0801538c 	.word	0x0801538c
 8003430:	0801531c 	.word	0x0801531c

08003434 <_ZN5Modem8simA767213mqttsslenableEh>:

enum simA7672::ssl_flags simA7672::mqttsslenable(uint8_t mqtt_index)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b09a      	sub	sp, #104	@ 0x68
 8003438:	af02      	add	r7, sp, #8
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
	status stat = simA7672_ERR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	ssl_flags sslstat = ssl_ERR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	char buf[80] = { 0 };
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	224c      	movs	r2, #76	@ 0x4c
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f00f faba 	bl	80129d2 <memset>

	std::sprintf(buf, "AT+CMQTTSSLCFG=%d,0\r\n", mqtt_index);
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	4920      	ldr	r1, [pc, #128]	@ (80034e8 <_ZN5Modem8simA767213mqttsslenableEh+0xb4>)
 8003466:	4618      	mov	r0, r3
 8003468:	f00f fa50 	bl	801290c <siprintf>
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
			std::strlen(const_cast<const char*>(buf)), 1000, _LF, CMD_mode);
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	4618      	mov	r0, r3
 8003472:	f7fc fefd 	bl	8000270 <strlen>
 8003476:	4603      	mov	r3, r0
	PrepRxTx(reinterpret_cast<const uint8_t*>(buf),
 8003478:	b29a      	uxth	r2, r3
 800347a:	f107 010c 	add.w	r1, r7, #12
 800347e:	2301      	movs	r3, #1
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	230a      	movs	r3, #10
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f95a 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 8000);
 8003490:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa81 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80034a2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d111      	bne.n	80034ce <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80034b0:	3308      	adds	r3, #8
 80034b2:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034ba:	8a92      	ldrh	r2, [r2, #20]
 80034bc:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fffa 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <_ZN5Modem8simA767213mqttsslenableEh+0x9a>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <_ZN5Modem8simA767213mqttsslenableEh+0x9c>
 80034ce:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <_ZN5Modem8simA767213mqttsslenableEh+0xa6>

		sslstat = ssl_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	}

	return sslstat;
 80034da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3760      	adds	r7, #96	@ 0x60
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	0801539c 	.word	0x0801539c

080034ec <_ZN5Modem8simA767213sslversionsetEv>:
enum simA7672::ssl_flags simA7672::sslversionset()
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ver, sizeof(atcmd_ATCSSLCFG_ver) - 1,1000, _LF, CMD_mode);
 80034fc:	2301      	movs	r3, #1
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	230a      	movs	r3, #10
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003508:	221d      	movs	r2, #29
 800350a:	4915      	ldr	r1, [pc, #84]	@ (8003560 <_ZN5Modem8simA767213sslversionsetEv+0x74>)
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f919 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003512:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003516:	2100      	movs	r1, #0
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa40 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800351e:	4603      	mov	r3, r0
 8003520:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003522:	7bbb      	ldrb	r3, [r7, #14]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d111      	bne.n	800354c <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800352e:	3308      	adds	r3, #8
 8003530:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003538:	8a92      	ldrh	r2, [r2, #20]
 800353a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800353c:	4618      	mov	r0, r3
 800353e:	f001 ffbb 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <_ZN5Modem8simA767213sslversionsetEv+0x60>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <_ZN5Modem8simA767213sslversionsetEv+0x62>
 800354c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <_ZN5Modem8simA767213sslversionsetEv+0x6a>

		sslstat = ssl_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	08015800 	.word	0x08015800

08003564 <_ZN5Modem8simA767210sslauthsetEv>:
enum simA7672::ssl_flags simA7672::sslauthset()
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 800356c:	2301      	movs	r3, #1
 800356e:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_auth, sizeof(atcmd_ATCSSLCFG_auth) - 1,1000, _LF, CMD_mode);
 8003574:	2301      	movs	r3, #1
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	230a      	movs	r3, #10
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003580:	221b      	movs	r2, #27
 8003582:	4915      	ldr	r1, [pc, #84]	@ (80035d8 <_ZN5Modem8simA767210sslauthsetEv+0x74>)
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8dd 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800358a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800358e:	2100      	movs	r1, #0
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa04 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003596:	4603      	mov	r3, r0
 8003598:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800359a:	7bbb      	ldrb	r3, [r7, #14]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80035a6:	3308      	adds	r3, #8
 80035a8:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035b0:	8a92      	ldrh	r2, [r2, #20]
 80035b2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 ff7f 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <_ZN5Modem8simA767210sslauthsetEv+0x60>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <_ZN5Modem8simA767210sslauthsetEv+0x62>
 80035c4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <_ZN5Modem8simA767210sslauthsetEv+0x6a>

		sslstat = ssl_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	08015820 	.word	0x08015820

080035dc <_ZN5Modem8simA767212sslcacertsetEv>:
enum simA7672::ssl_flags simA7672::sslcacertset()
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_ca, sizeof(atcmd_ATCSSLCFG_ca) - 1,1000, _LF, CMD_mode);
 80035ec:	2301      	movs	r3, #1
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	230a      	movs	r3, #10
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035f8:	2220      	movs	r2, #32
 80035fa:	4915      	ldr	r1, [pc, #84]	@ (8003650 <_ZN5Modem8simA767212sslcacertsetEv+0x74>)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f8a1 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 8003602:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003606:	2100      	movs	r1, #0
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f9c8 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800360e:	4603      	mov	r3, r0
 8003610:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800361e:	3308      	adds	r3, #8
 8003620:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003628:	8a92      	ldrh	r2, [r2, #20]
 800362a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800362c:	4618      	mov	r0, r3
 800362e:	f001 ff43 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <_ZN5Modem8simA767212sslcacertsetEv+0x60>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <_ZN5Modem8simA767212sslcacertsetEv+0x62>
 800363c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <_ZN5Modem8simA767212sslcacertsetEv+0x6a>

		sslstat = ssl_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	0801583c 	.word	0x0801583c

08003654 <_ZN5Modem8simA767216ssldevicecertsetEv>:
enum simA7672::ssl_flags simA7672::ssldevicecertset()
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 800365c:	2301      	movs	r3, #1
 800365e:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_device, sizeof(atcmd_ATCSSLCFG_device) - 1,1000, _LF, CMD_mode);
 8003664:	2301      	movs	r3, #1
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	230a      	movs	r3, #10
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003670:	222c      	movs	r2, #44	@ 0x2c
 8003672:	4915      	ldr	r1, [pc, #84]	@ (80036c8 <_ZN5Modem8simA767216ssldevicecertsetEv+0x74>)
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f865 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 800367a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800367e:	2100      	movs	r1, #0
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f98c 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8003686:	4603      	mov	r3, r0
 8003688:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d111      	bne.n	80036b4 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003696:	3308      	adds	r3, #8
 8003698:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036a0:	8a92      	ldrh	r2, [r2, #20]
 80036a2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 ff07 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <_ZN5Modem8simA767216ssldevicecertsetEv+0x60>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <_ZN5Modem8simA767216ssldevicecertsetEv+0x62>
 80036b4:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <_ZN5Modem8simA767216ssldevicecertsetEv+0x6a>

		sslstat = ssl_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08015860 	.word	0x08015860

080036cc <_ZN5Modem8simA767215ssldevicekeysetEv>:
enum simA7672::ssl_flags simA7672::ssldevicekeyset()
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
	status stat = simA7672_ERR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73bb      	strb	r3, [r7, #14]
	ssl_flags sslstat = ssl_ERR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]


	PrepRxTx(atcmd_ATCSSLCFG_key, sizeof(atcmd_ATCSSLCFG_key) - 1,1000, _LF, CMD_mode);
 80036dc:	2301      	movs	r3, #1
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	230a      	movs	r3, #10
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036e8:	222a      	movs	r2, #42	@ 0x2a
 80036ea:	4915      	ldr	r1, [pc, #84]	@ (8003740 <_ZN5Modem8simA767215ssldevicekeysetEv+0x74>)
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f829 	bl	8003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 2000);
 80036f2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f950 	bl	800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80036fe:	4603      	mov	r3, r0
 8003700:	73bb      	strb	r3, [r7, #14]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800370e:	3308      	adds	r3, #8
 8003710:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003718:	8a92      	ldrh	r2, [r2, #20]
 800371a:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fecb 	bl	80054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <_ZN5Modem8simA767215ssldevicekeysetEv+0x60>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <_ZN5Modem8simA767215ssldevicekeysetEv+0x62>
 800372c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <_ZN5Modem8simA767215ssldevicekeysetEv+0x6a>

		sslstat = ssl_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]

	}

	return sslstat;
 8003736:	7bfb      	ldrb	r3, [r7, #15]

}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08015890 	.word	0x08015890

08003744 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	4611      	mov	r1, r2
 8003750:	461a      	mov	r2, r3
 8003752:	460b      	mov	r3, r1
 8003754:	80fb      	strh	r3, [r7, #6]
 8003756:	4613      	mov	r3, r2
 8003758:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f00f f935 	bl	80129d2 <memset>
	memset(Txbuffer, 0, BufferLen);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f00f f92c 	bl	80129d2 <memset>
	rst_event(rx_evt);
 800377a:	2100      	movs	r1, #0
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f8c8 	bl	8003912 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8003782:	2101      	movs	r1, #1
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f8c4 	bl	8003912 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003790:	461a      	mov	r2, r3
 8003792:	7e3b      	ldrb	r3, [r7, #24]
 8003794:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800379c:	461a      	mov	r2, r3
 800379e:	7f3b      	ldrb	r3, [r7, #28]
 80037a0:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a8:	2200      	movs	r2, #0
 80037aa:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b2:	2200      	movs	r2, #0
 80037b4:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037bc:	22ff      	movs	r2, #255	@ 0xff
 80037be:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037c8:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037d0:	2200      	movs	r2, #0
 80037d2:	829a      	strh	r2, [r3, #20]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80037da:	3304      	adds	r3, #4
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037e2:	6911      	ldr	r1, [r2, #16]
 80037e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fe2d 	bl	8005448 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80037f4:	3004      	adds	r0, #4
 80037f6:	88bb      	ldrh	r3, [r7, #4]
 80037f8:	88fa      	ldrh	r2, [r7, #6]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	f001 fe11 	bl	8005422 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZN5Modem8simA76728PrepRxTxEPKhtthhhNS0_6RxmodeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);
}

void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t start_char_notiMode,uint8_t start_char_notiModeCount,uint8_t end_char, enum Rxmode Rxmode) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	460b      	mov	r3, r1
 8003818:	80fb      	strh	r3, [r7, #6]
 800381a:	4613      	mov	r3, r2
 800381c:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f00f f8d3 	bl	80129d2 <memset>
	memset(Txbuffer, 0, BufferLen);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f00f f8ca 	bl	80129d2 <memset>
	rst_event(rx_evt);
 800383e:	2100      	movs	r1, #0
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f866 	bl	8003912 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8003846:	2101      	movs	r1, #1
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f862 	bl	8003912 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003854:	461a      	mov	r2, r3
 8003856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800385a:	7213      	strb	r3, [r2, #8]
	Rx_info.rx_mode = Rxmode;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003862:	461a      	mov	r2, r3
 8003864:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003868:	72d3      	strb	r3, [r2, #11]
	Rx_info.detect_endchar = 0;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003870:	2200      	movs	r2, #0
 8003872:	725a      	strb	r2, [r3, #9]
	Rx_info.end_char_count = 0;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800387a:	2200      	movs	r2, #0
 800387c:	731a      	strb	r2, [r3, #12]
	Rx_info.release_event = -1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003884:	22ff      	movs	r2, #255	@ 0xff
 8003886:	739a      	strb	r2, [r3, #14]
	Rx_info.Rx = Rxbuffer;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003890:	6113      	str	r3, [r2, #16]
	Rx_info.Rxcount = 0;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003898:	2200      	movs	r2, #0
 800389a:	829a      	strh	r2, [r3, #20]
	Rx_info.start_char_notiMode = start_char_notiMode;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038a2:	461a      	mov	r2, r3
 80038a4:	7e3b      	ldrb	r3, [r7, #24]
 80038a6:	7793      	strb	r3, [r2, #30]
	Rx_info.start_char_notiModeCount = start_char_notiModeCount-1;
 80038a8:	7f3b      	ldrb	r3, [r7, #28]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b4:	77da      	strb	r2, [r3, #31]
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80038bc:	3304      	adds	r3, #4
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038c4:	6911      	ldr	r1, [r2, #16]
 80038c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fdbc 	bl	8005448 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 80038d6:	3004      	adds	r0, #4
 80038d8:	88bb      	ldrh	r3, [r7, #4]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	f001 fda0 	bl	8005422 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
	serial_.RxintEn(Rx_info.Rx, BufferLen);
	serial_.TransmitData(Txbuf, len, timeout);

}

inline void simA7672::set_event(enum eventType event) {
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003900:	3309      	adds	r3, #9
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003928:	3309      	adds	r3, #9
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003954:	3309      	adds	r3, #9
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e010      	b.n	8003990 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003978:	3309      	adds	r3, #9
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf0c      	ite	eq
 8003982:	2301      	moveq	r3, #1
 8003984:	2300      	movne	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8003990:	7bfb      	ldrb	r3, [r7, #15]

}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	70fb      	strb	r3, [r7, #3]
 80039aa:	4613      	mov	r3, r2
 80039ac:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
	 prev_time = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b8:	461a      	mov	r2, r3
 80039ba:	2300      	movs	r3, #0
 80039bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

	prev_time = HAL_GetTick(); //we get new time before going into while
 80039be:	f006 fa57 	bl	8009e70 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	while ((check_event(event) != simA7672_OK)
 80039cc:	e002      	b.n	80039d4 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x36>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 80039ce:	200a      	movs	r0, #10
 80039d0:	f001 f8b2 	bl	8004b38 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffae 	bl	800393a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 80039de:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00c      	beq.n	80039fe <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80039e4:	f006 fa44 	bl	8009e70 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	883b      	ldrh	r3, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d201      	bcs.n	80039fe <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x60>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x62>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e4      	bne.n	80039ce <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x30>
	}

	if (check_event(event) != simA7672_OK) {
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff96 	bl	800393a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x84>
		stat = simA7672::simA7672_ERR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]

}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a3e:	7adb      	ldrb	r3, [r3, #11]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 808a 	beq.w	8003b66 <_ZN5Modem8simA76724RxCBEh+0x13a>
		*Rx_info.Rx++ = data;
 8003a52:	78f8      	ldrb	r0, [r7, #3]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003a64:	610a      	str	r2, [r1, #16]
 8003a66:	4602      	mov	r2, r0
 8003a68:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a70:	8a9b      	ldrh	r3, [r3, #20]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7e:	829a      	strh	r2, [r3, #20]

		if (Rx_info.end_char_count == 1) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a86:	7b1b      	ldrb	r3, [r3, #12]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <_ZN5Modem8simA76724RxCBEh+0x86>
			Rx_info.release_event++;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a9e:	7b9b      	ldrb	r3, [r3, #14]
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	b25a      	sxtb	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ab0:	739a      	strb	r2, [r3, #14]

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ab8:	7a9b      	ldrb	r3, [r3, #10]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	2b4f      	cmp	r3, #79	@ 0x4f
 8003ac4:	d002      	beq.n	8003acc <_ZN5Modem8simA76724RxCBEh+0xa0>
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	2b45      	cmp	r3, #69	@ 0x45
 8003aca:	d101      	bne.n	8003ad0 <_ZN5Modem8simA76724RxCBEh+0xa4>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <_ZN5Modem8simA76724RxCBEh+0xa6>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01b      	beq.n	8003b0e <_ZN5Modem8simA76724RxCBEh+0xe2>
			Rx_info.detect_nextlinechar = 0; //reset it
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003adc:	2200      	movs	r2, #0
 8003ade:	729a      	strb	r2, [r3, #10]
			Rx_info.end_char_count = 1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	731a      	strb	r2, [r3, #12]
			if (data == 'O') {
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	2b4f      	cmp	r3, #79	@ 0x4f
 8003aee:	d105      	bne.n	8003afc <_ZN5Modem8simA76724RxCBEh+0xd0>
				Rx_info.total_char = 2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003af6:	2202      	movs	r2, #2
 8003af8:	735a      	strb	r2, [r3, #13]
 8003afa:	e00d      	b.n	8003b18 <_ZN5Modem8simA76724RxCBEh+0xec>
			} else if (data == 'E') {
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	2b45      	cmp	r3, #69	@ 0x45
 8003b00:	d10a      	bne.n	8003b18 <_ZN5Modem8simA76724RxCBEh+0xec>
				Rx_info.total_char = 5;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b08:	2205      	movs	r2, #5
 8003b0a:	735a      	strb	r2, [r3, #13]
 8003b0c:	e004      	b.n	8003b18 <_ZN5Modem8simA76724RxCBEh+0xec>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b14:	2200      	movs	r2, #0
 8003b16:	729a      	strb	r2, [r3, #10]

		}

		if (data == simA7672::_LF) {
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	2b0a      	cmp	r3, #10
 8003b1c:	d104      	bne.n	8003b28 <_ZN5Modem8simA76724RxCBEh+0xfc>
			Rx_info.detect_nextlinechar = 1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b24:	2201      	movs	r2, #1
 8003b26:	729a      	strb	r2, [r3, #10]

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b2e:	7b9b      	ldrb	r3, [r3, #14]
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b3a:	7b5b      	ldrb	r3, [r3, #13]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bfac      	ite	ge
 8003b42:	2301      	movge	r3, #1
 8003b44:	2300      	movlt	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80ed 	beq.w	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff feca 	bl	80038ea <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fc84 	bl	800546c <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8003b64:	e0e0      	b.n	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == MSG_mode) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b6c:	7adb      	ldrb	r3, [r3, #11]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d072      	beq.n	8003c64 <_ZN5Modem8simA76724RxCBEh+0x238>
		*Rx_info.Rx++ = data;
 8003b7e:	78f8      	ldrb	r0, [r7, #3]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003b90:	610a      	str	r2, [r1, #16]
 8003b92:	4602      	mov	r2, r0
 8003b94:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9c:	8a9b      	ldrh	r3, [r3, #20]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003baa:	829a      	strh	r2, [r3, #20]
		if (Rx_info.end_char != _LF) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb2:	7a1b      	ldrb	r3, [r3, #8]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b0a      	cmp	r3, #10
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00f      	beq.n	8003be4 <_ZN5Modem8simA76724RxCBEh+0x1b8>
			if (data == '>') {
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bc8:	f040 80ae 	bne.w	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003bcc:	2100      	movs	r1, #0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff fe8b 	bl	80038ea <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 fc45 	bl	800546c <_ZN13System_serial6serial8RxintDisEv>
}
 8003be2:	e0a1      	b.n	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			if (Rx_info.end_char_count == 1 && data == 'E') {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bea:	7b1b      	ldrb	r3, [r3, #12]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d104      	bne.n	8003bfc <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	2b45      	cmp	r3, #69	@ 0x45
 8003bf6:	d101      	bne.n	8003bfc <_ZN5Modem8simA76724RxCBEh+0x1d0>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <_ZN5Modem8simA76724RxCBEh+0x1d2>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <_ZN5Modem8simA76724RxCBEh+0x1e0>
				Rx_info.release_event = 2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c08:	2202      	movs	r2, #2
 8003c0a:	739a      	strb	r2, [r3, #14]
			if (data == _LF) {
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	2b0a      	cmp	r3, #10
 8003c10:	d10a      	bne.n	8003c28 <_ZN5Modem8simA76724RxCBEh+0x1fc>
				Rx_info.end_char_count++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c18:	7b1b      	ldrb	r3, [r3, #12]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c26:	731a      	strb	r2, [r3, #12]
			if (Rx_info.end_char_count == Rx_info.release_event) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2e:	7b1b      	ldrb	r3, [r3, #12]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	7b9b      	ldrb	r3, [r3, #14]
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d06d      	beq.n	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
				set_event(rx_evt);
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fe4b 	bl	80038ea <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
				serial_.RxintDis();
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fc05 	bl	800546c <_ZN13System_serial6serial8RxintDisEv>
}
 8003c62:	e061      	b.n	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
	} else if (Rx_info.rx_mode == Notification_mode) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6a:	7adb      	ldrb	r3, [r3, #11]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d055      	beq.n	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
		*Rx_info.Rx++ = data;
 8003c7c:	78f8      	ldrb	r0, [r7, #3]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003c8e:	610a      	str	r2, [r1, #16]
 8003c90:	4602      	mov	r2, r0
 8003c92:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9a:	8a9b      	ldrh	r3, [r3, #20]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca8:	829a      	strh	r2, [r3, #20]
		if (data == Rx_info.start_char_notiMode) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb0:	7f9b      	ldrb	r3, [r3, #30]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <_ZN5Modem8simA76724RxCBEh+0x2b2>
			Rx_info.release_event++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cca:	7b9b      	ldrb	r3, [r3, #14]
 8003ccc:	b25b      	sxtb	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	b25a      	sxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cdc:	739a      	strb	r2, [r3, #14]
		if (data == Rx_info.end_char && Rx_info.release_event >= Rx_info.start_char_notiModeCount) {
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce4:	7a1b      	ldrb	r3, [r3, #8]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d10e      	bne.n	8003d0c <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf4:	7b9b      	ldrb	r3, [r3, #14]
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d00:	7fdb      	ldrb	r3, [r3, #31]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	429a      	cmp	r2, r3
 8003d06:	db01      	blt.n	8003d0c <_ZN5Modem8simA76724RxCBEh+0x2e0>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <_ZN5Modem8simA76724RxCBEh+0x2e2>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <_ZN5Modem8simA76724RxCBEh+0x2fc>
			set_event(rx_evt);
 8003d12:	2100      	movs	r1, #0
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fde8 	bl	80038ea <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 fba2 	bl	800546c <_ZN13System_serial6serial8RxintDisEv>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e009      	b.n	8003d5a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003d4a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d006      	beq.n	8003d62 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	3301      	adds	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d9f2      	bls.n	8003d46 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8003d60:	e000      	b.n	8003d64 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8003d62:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	@ (8003d90 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	4a06      	ldr	r2, [pc, #24]	@ (8003d90 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fe53 	bl	8003a2c <_ZN5Modem8simA76724RxCBEh>
	}

}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20001a7c 	.word	0x20001a7c

08003d94 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_ZN3SOC9getSoCValEv>:




uint8_t getSoCVal()
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
	return g_SoC;
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <_ZN3SOC9getSoCValEv+0x24>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dbc:	793b      	ldrb	r3, [r7, #4]
 8003dbe:	b2db      	uxtb	r3, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20001a98 	.word	0x20001a98

08003dd0 <_ZN3SOC7CC_LoopEPfff>:




void CC_Loop(float *SoC,float BattCurrent, float BattVoltage)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ddc:	edc7 0a01 	vstr	s1, [r7, #4]

    uint32_t currentTime = HAL_GetTick();
 8003de0:	f006 f846 	bl	8009e70 <HAL_GetTick>
 8003de4:	61f8      	str	r0, [r7, #28]
    uint32_t elapsedMs   = currentTime - previousTime;
 8003de6:	4b27      	ldr	r3, [pc, #156]	@ (8003e84 <_ZN3SOC7CC_LoopEPfff+0xb4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	61bb      	str	r3, [r7, #24]
    previousTime         = currentTime;
 8003df0:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <_ZN3SOC7CC_LoopEPfff+0xb4>)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	6013      	str	r3, [r2, #0]

    float deltaT_hours = (float)elapsedMs / 3600000.0f; // 1000 ms/s, 3600 s/hr
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	ee07 3a90 	vmov	s15, r3
 8003dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e00:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003e88 <_ZN3SOC7CC_LoopEPfff+0xb8>
 8003e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e08:	edc7 7a05 	vstr	s15, [r7, #20]

	 // Calculate deltaSoC in %
	    float deltaSoC = (BattCurrent * deltaT_hours / BATTERYCAPACITY) * 100.0f;
 8003e0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e10:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e18:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8003e8c <_ZN3SOC7CC_LoopEPfff+0xbc>
 8003e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e20:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003e8c <_ZN3SOC7CC_LoopEPfff+0xbc>
 8003e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e28:	edc7 7a04 	vstr	s15, [r7, #16]


	    // Update SoC
	    // Positive I => discharge => SoC goes DOWN => subtract deltaSoC
	     g_SoC = g_SoC - deltaSoC;
 8003e2c:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e2e:	ed93 7a00 	vldr	s14, [r3]
 8003e32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e3c:	edc3 7a00 	vstr	s15, [r3]



	     // Clamp SoC
	     if (g_SoC > 100.0f) {
 8003e40:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e42:	edd3 7a00 	vldr	s15, [r3]
 8003e46:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003e8c <_ZN3SOC7CC_LoopEPfff+0xbc>
 8003e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e52:	dd02      	ble.n	8003e5a <_ZN3SOC7CC_LoopEPfff+0x8a>
	    	 g_SoC = 100.0f;
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e56:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <_ZN3SOC7CC_LoopEPfff+0xc4>)
 8003e58:	601a      	str	r2, [r3, #0]
	     }
	     if (g_SoC < 0.0f)  {
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e5c:	edd3 7a00 	vldr	s15, [r3]
 8003e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e68:	d503      	bpl.n	8003e72 <_ZN3SOC7CC_LoopEPfff+0xa2>
	    	 g_SoC = 0.0f;
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
	     }

	     *SoC = g_SoC;
 8003e72:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <_ZN3SOC7CC_LoopEPfff+0xc0>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	601a      	str	r2, [r3, #0]

}
 8003e7a:	bf00      	nop
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20001aa4 	.word	0x20001aa4
 8003e88:	4a5bba00 	.word	0x4a5bba00
 8003e8c:	42c80000 	.word	0x42c80000
 8003e90:	20001a98 	.word	0x20001a98
 8003e94:	42c80000 	.word	0x42c80000

08003e98 <_ZN3SOC7CC_InitEff>:

void CC_Init(float BattSoC,float IntervalSec)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ea2:	edc7 0a00 	vstr	s1, [r7]
	g_SoC = BattSoC;
 8003ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed4 <_ZN3SOC7CC_InitEff+0x3c>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6013      	str	r3, [r2, #0]
	sampleIntervalSec = IntervalSec;
 8003eac:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <_ZN3SOC7CC_InitEff+0x40>)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6013      	str	r3, [r2, #0]

	sampleIntervalHr  = sampleIntervalSec / 3600.0f;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <_ZN3SOC7CC_InitEff+0x40>)
 8003eb4:	ed93 7a00 	vldr	s14, [r3]
 8003eb8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003edc <_ZN3SOC7CC_InitEff+0x44>
 8003ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec0:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <_ZN3SOC7CC_InitEff+0x48>)
 8003ec2:	edc3 7a00 	vstr	s15, [r3]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20001a98 	.word	0x20001a98
 8003ed8:	20001a9c 	.word	0x20001a9c
 8003edc:	45610000 	.word	0x45610000
 8003ee0:	20001aa0 	.word	0x20001aa0

08003ee4 <_ZN13sensor_DcHall6DcHallC1EP17ADC_HandleTypeDef>:





DcHall::DcHall(ADC_HandleTypeDef *hadc) : DcHallSemaphore()
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fee2 	bl	8004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{

	hadc_sensor = hadc;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	609a      	str	r2, [r3, #8]
	DcHallSemaphore.semaphoreCreate();
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	330c      	adds	r3, #12
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fee5 	bl	8004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
	  float RawCurrent = 0.0;
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
		   float emaCurrent= 0.0;
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]

}
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <_ZN13sensor_DcHall6DcHall10getCurrentEPf>:


DcHall::status DcHall::getCurrent(float *DcCurrent)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
	const uint32_t samples = 1000;
 8003f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f2e:	617b      	str	r3, [r7, #20]
	enum status stat = DcHall_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	74fb      	strb	r3, [r7, #19]
	//uint32_t adcaverage[samples] = {0};
	uint32_t adcValue = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]

	if (DcHallSemaphore.semaphoreTake(1000)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fed5 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8003f46:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
	if (DcHallSemaphore.semaphoreTake(1000)
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d07a      	beq.n	800404c <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12c>
		if(hadc_sensor == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x42>
		{
			return DcHall_ERR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e075      	b.n	800404e <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12e>
		}
	    for(uint32_t i = 0; i< samples; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e035      	b.n	8003fd4 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0xb4>
	    {
	        CheckError(HAL_ADC_Start(hadc_sensor),DcHall_ERR,HAL_OK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f005 fff3 	bl	8009f58 <HAL_ADC_Start>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d006      	beq.n	8003f90 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x70>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	330c      	adds	r3, #12
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 feda 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e05e      	b.n	800404e <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12e>
	        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 15000),DcHall_ERR,HAL_OK); //take the value
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f006 f8e2 	bl	800a162 <HAL_ADC_PollForConversion>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x9c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fec4 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e048      	b.n	800404e <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x12e>
	        adcValue += HAL_ADC_GetValue(hadc_sensor);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f006 f959 	bl	800a278 <HAL_ADC_GetValue>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	61fb      	str	r3, [r7, #28]
	    for(uint32_t i = 0; i< samples; i++)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fda:	d3c5      	bcc.n	8003f68 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x48>
	    }
	    HAL_ADC_Stop(hadc_sensor);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f006 f88b 	bl	800a0fc <HAL_ADC_Stop>


	    adcValue = adcValue/samples;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x138>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	61fb      	str	r3, [r7, #28]

	    float voltage = ((adcValue / Resolution) * Vref)- offset_system ;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ffc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800405c <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x13c>
 8004000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004004:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004060 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x140>
 8004008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800400c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004064 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x144>
 8004010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004014:	edc7 7a03 	vstr	s15, [r7, #12]


	    float voltageOffset = voltage - midpoint;   // relative to midpoint
 8004018:	edd7 7a03 	vldr	s15, [r7, #12]
 800401c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004068 <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x148>
 8004020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004024:	edc7 7a02 	vstr	s15, [r7, #8]
	    RawCurrent = voltageOffset / sensitivity;  // I = dV / sensitivity
 8004028:	ed97 7a02 	vldr	s14, [r7, #8]
 800402c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800406c <_ZN13sensor_DcHall6DcHall10getCurrentEPf+0x14c>
 8004030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	edc3 7a00 	vstr	s15, [r3]

//	    /emaCurrent = alpha * RawCurrent + (1.0f - alpha) * emaCurrent;
	    *DcCurrent = RawCurrent;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	601a      	str	r2, [r3, #0]

		DcHallSemaphore.semaphoreGive();
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	330c      	adds	r3, #12
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe7a 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

	}


	  return stat;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	10624dd3 	.word	0x10624dd3
 800405c:	45800000 	.word	0x45800000
 8004060:	40533333 	.word	0x40533333
 8004064:	3b03126f 	.word	0x3b03126f
 8004068:	3fd33333 	.word	0x3fd33333
 800406c:	3b9d4952 	.word	0x3b9d4952

08004070 <_ZN13sensor_DcVolt6DcVoltC1EP17ADC_HandleTypeDef>:

namespace sensor_DcVolt
{


DcVolt::DcVolt(ADC_HandleTypeDef *hadc) : DcVoltSemaphore()
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fe1c 	bl	8004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{

	hadc_sensor = hadc;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	601a      	str	r2, [r3, #0]
	DcVoltSemaphore.semaphoreCreate();
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fe1f 	bl	8004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>

}
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf>:


DcVolt::status DcVolt::getVoltage(float *DcVolt)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	const uint32_t samples = 50;
 80040aa:	2332      	movs	r3, #50	@ 0x32
 80040ac:	60fb      	str	r3, [r7, #12]
	enum status stat = DcVolt_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	72fb      	strb	r3, [r7, #11]
	uint32_t adcValue = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]

	if (DcVoltSemaphore.semaphoreTake(1000)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fe16 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80040c4:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
	if (DcVoltSemaphore.semaphoreTake(1000)
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d060      	beq.n	8004196 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf6>

		if(hadc_sensor == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x40>
		{
			return DcVolt_ERR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e05b      	b.n	8004198 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf8>
		}
	    for(uint32_t i = 0; i< samples; i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	e035      	b.n	8004152 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xb2>
	    {
	        CheckError(HAL_ADC_Start(hadc_sensor),DcVolt_ERR,HAL_OK);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f005 ff34 	bl	8009f58 <HAL_ADC_Start>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x6e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fe1b 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 800410a:	2301      	movs	r3, #1
 800410c:	e044      	b.n	8004198 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf8>
	        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 15000),DcVolt_ERR,HAL_OK); //take the value
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8004116:	4618      	mov	r0, r3
 8004118:	f006 f823 	bl	800a162 <HAL_ADC_PollForConversion>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d006      	beq.n	800413a <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x9a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fe05 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 8004136:	2301      	movs	r3, #1
 8004138:	e02e      	b.n	8004198 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0xf8>
	        adcValue += HAL_ADC_GetValue(hadc_sensor);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f006 f89a 	bl	800a278 <HAL_ADC_GetValue>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
	    for(uint32_t i = 0; i< samples; i++)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3301      	adds	r3, #1
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b31      	cmp	r3, #49	@ 0x31
 8004156:	d9c6      	bls.n	80040e6 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x46>
	    }

	    adcValue = adcValue/samples;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x100>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	617b      	str	r3, [r7, #20]


	    *DcVolt = (float)(( adcValue * (Vref / Resolution))*ratio) - offset_system ;	// 12 bit
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80041a4 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x104>
 8004172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004176:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80041a8 <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x108>
 800417a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800417e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80041ac <_ZN13sensor_DcVolt6DcVolt10getVoltageEPf+0x10c>
 8004182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	edc3 7a00 	vstr	s15, [r3]

		DcVoltSemaphore.semaphoreGive();
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fdd5 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>





	return stat;
 8004196:	7afb      	ldrb	r3, [r7, #11]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	51eb851f 	.word	0x51eb851f
 80041a4:	3a533333 	.word	0x3a533333
 80041a8:	4176b852 	.word	0x4176b852
 80041ac:	3e051eb8 	.word	0x3e051eb8

080041b0 <_ZN15sensor_TempHumd5AHT20C1EP17I2C_HandleTypeDefhm>:
}




AHT20::AHT20( I2C_HandleTypeDef *ui2c,uint8_t devAddr,uint32_t timeout) : AHT20Semaphore()
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3314      	adds	r3, #20
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fd79 	bl	8004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{
	_aht20_ui2c=ui2c;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	605a      	str	r2, [r3, #4]
	devAddr_=devAddr;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	79fa      	ldrb	r2, [r7, #7]
 80041d4:	721a      	strb	r2, [r3, #8]
	timeout_ = timeout;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	601a      	str	r2, [r3, #0]
	AHT20Semaphore.semaphoreCreate();
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3314      	adds	r3, #20
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fd76 	bl	8004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZN15sensor_TempHumd5AHT207measureEPmS1_>:
	}
	AHT20Semaphore.semaphoreGive();
	}
}
void AHT20::measure(uint32_t *temp_,uint32_t *humid_)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	if (AHT20Semaphore.semaphoreTake(1000)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3314      	adds	r3, #20
 8004200:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fd73 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 800420a:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
	if (AHT20Semaphore.semaphoreTake(1000)
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8084 	beq.w	8004324 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x134>
	uint16_t counter = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	83fb      	strh	r3, [r7, #30]
	System_Rtos::delay(50);
 8004220:	2032      	movs	r0, #50	@ 0x32
 8004222:	f000 fc89 	bl	8004b38 <_ZN11System_Rtos5delayEm>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8004226:	23ac      	movs	r3, #172	@ 0xac
 8004228:	763b      	strb	r3, [r7, #24]
	ahtTData[1]=0x33;
 800422a:	2333      	movs	r3, #51	@ 0x33
 800422c:	767b      	strb	r3, [r7, #25]
	ahtTData[2]=0x00;
 800422e:	2300      	movs	r3, #0
 8004230:	76bb      	strb	r3, [r7, #26]

	if(check_Device() == AHT_OK)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f87a 	bl	800432c <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d068      	beq.n	800431a <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x12a>
	{

	HAL_I2C_Master_Transmit(_aht20_ui2c, devAddr_<<1, ahtTData, 3, timeout_);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6858      	ldr	r0, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	7a1b      	ldrb	r3, [r3, #8]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	b299      	uxth	r1, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f107 0218 	add.w	r2, r7, #24
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2303      	movs	r3, #3
 8004260:	f006 fe66 	bl	800af30 <HAL_I2C_Master_Transmit>
	System_Rtos::delay(100);
 8004264:	2064      	movs	r0, #100	@ 0x64
 8004266:	f000 fc67 	bl	8004b38 <_ZN11System_Rtos5delayEm>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6858      	ldr	r0, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	7a1b      	ldrb	r3, [r3, #8]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	b299      	uxth	r1, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f107 0210 	add.w	r2, r7, #16
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2307      	movs	r3, #7
 8004282:	f006 ff53 	bl	800b12c <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 8004286:	7c3a      	ldrb	r2, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	725a      	strb	r2, [r3, #9]
    	if((DATA_State&(1<<7))==0)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	7a5b      	ldrb	r3, [r3, #9]
 8004290:	b25b      	sxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	db36      	blt.n	8004304 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x114>
    		{
    	    DATA_Humi=ahtRData[1];
 8004296:	7c7b      	ldrb	r3, [r7, #17]
 8004298:	461a      	mov	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	7cba      	ldrb	r2, [r7, #18]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	611a      	str	r2, [r3, #16]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	7cfa      	ldrb	r2, [r7, #19]
 80042b4:	0912      	lsrs	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	611a      	str	r2, [r3, #16]
    	    DATA_Temp=ahtRData[3]&0x0F;
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	f003 020f 	and.w	r2, r3, #15
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	7d3a      	ldrb	r2, [r7, #20]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60da      	str	r2, [r3, #12]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	7d7a      	ldrb	r2, [r7, #21]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	60da      	str	r2, [r3, #12]
    	    DATA_CRCreg= ahtRData[6];
 80042e4:	7dba      	ldrb	r2, [r7, #22]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	729a      	strb	r2, [r3, #10]

    	    *temp_ = temp();
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f83e 	bl	800436c <_ZN15sensor_TempHumd5AHT204tempEv>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	601a      	str	r2, [r3, #0]
    	    *humid_ = humid();
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f874 	bl	80043e4 <_ZN15sensor_TempHumd5AHT205humidEv>
 80042fc:	4602      	mov	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
    		break;
 8004302:	e00a      	b.n	800431a <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x12a>
    		}
    	else {
    		counter++;
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	3301      	adds	r3, #1
 8004308:	83fb      	strh	r3, [r7, #30]
    		System_Rtos::delay(10);
 800430a:	200a      	movs	r0, #10
 800430c:	f000 fc14 	bl	8004b38 <_ZN11System_Rtos5delayEm>

    		if(counter > 50)
 8004310:	8bfb      	ldrh	r3, [r7, #30]
 8004312:	2b32      	cmp	r3, #50	@ 0x32
 8004314:	d800      	bhi.n	8004318 <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x128>
    	HAL_I2C_Master_Receive(_aht20_ui2c, devAddr_<<1, ahtRData, 7, timeout_);
 8004316:	e7a8      	b.n	800426a <_ZN15sensor_TempHumd5AHT207measureEPmS1_+0x7a>
    		{
    			break;
 8004318:	bf00      	nop
    		}
    	}
    }
	}

	AHT20Semaphore.semaphoreGive();
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3314      	adds	r3, #20
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fd0e 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 8004324:	bf00      	nop
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <_ZN15sensor_TempHumd5AHT2012check_DeviceEv>:

enum AHT20::status AHT20::check_Device()
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

	status stat = AHT_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_IsDeviceReady(_aht20_ui2c, devAddr_ << 1, 3, 1000) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	7a1b      	ldrb	r3, [r3, #8]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	b299      	uxth	r1, r3
 8004344:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004348:	2203      	movs	r2, #3
 800434a:	f007 f921 	bl	800b590 <HAL_I2C_IsDeviceReady>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf14      	ite	ne
 8004354:	2301      	movne	r3, #1
 8004356:	2300      	moveq	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x36>
	{
		return AHT_ERR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <_ZN15sensor_TempHumd5AHT2012check_DeviceEv+0x38>
	}

	return stat;
 8004362:	7bfb      	ldrb	r3, [r7, #15]

}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_ZN15sensor_TempHumd5AHT204tempEv>:


uint32_t AHT20::temp()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc f8c3 	bl	8000504 <__aeabi_ui2d>
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8004384:	f7fc fa62 	bl	800084c <__aeabi_ddiv>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	4b10      	ldr	r3, [pc, #64]	@ (80043d8 <_ZN15sensor_TempHumd5AHT204tempEv+0x6c>)
 8004396:	f7fc fa59 	bl	800084c <__aeabi_ddiv>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <_ZN15sensor_TempHumd5AHT204tempEv+0x70>)
 80043a8:	f7fc f926 	bl	80005f8 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <_ZN15sensor_TempHumd5AHT204tempEv+0x74>)
 80043ba:	f7fb ff65 	bl	8000288 <__aeabi_dsub>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	f7fc fbef 	bl	8000ba8 <__aeabi_d2uiz>
 80043ca:	4603      	mov	r3, r0
 80043cc:	60fb      	str	r3, [r7, #12]
	return TEMP_CALC;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40900000 	.word	0x40900000
 80043dc:	40690000 	.word	0x40690000
 80043e0:	40490000 	.word	0x40490000

080043e4 <_ZN15sensor_TempHumd5AHT205humidEv>:



uint32_t AHT20::humid()
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fc f887 	bl	8000504 <__aeabi_ui2d>
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 80043fc:	f7fc fa26 	bl	800084c <__aeabi_ddiv>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <_ZN15sensor_TempHumd5AHT205humidEv+0x5c>)
 800440e:	f7fc fa1d 	bl	800084c <__aeabi_ddiv>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <_ZN15sensor_TempHumd5AHT205humidEv+0x60>)
 8004420:	f7fc f8ea 	bl	80005f8 <__aeabi_dmul>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	f7fc fbbc 	bl	8000ba8 <__aeabi_d2uiz>
 8004430:	4603      	mov	r3, r0
 8004432:	60fb      	str	r3, [r7, #12]
	return HUMID_CALC;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40900000 	.word	0x40900000
 8004444:	40590000 	.word	0x40590000

08004448 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc,float LowSpan,float FullSpan,float VoltOut) : LiquidMeasSemaphore()
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6178      	str	r0, [r7, #20]
 8004450:	6139      	str	r1, [r7, #16]
 8004452:	ed87 0a03 	vstr	s0, [r7, #12]
 8004456:	edc7 0a02 	vstr	s1, [r7, #8]
 800445a:	ed87 1a01 	vstr	s2, [r7, #4]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a19      	ldr	r2, [pc, #100]	@ (80044c8 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff+0x80>)
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	611a      	str	r2, [r3, #16]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4a14      	ldr	r2, [pc, #80]	@ (80044c8 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDeffff+0x80>)
 8004476:	615a      	str	r2, [r3, #20]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2200      	movs	r2, #0
 800447c:	761a      	strb	r2, [r3, #24]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	61da      	str	r2, [r3, #28]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2200      	movs	r2, #0
 8004488:	621a      	str	r2, [r3, #32]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3338      	adds	r3, #56	@ 0x38
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fc11 	bl	8004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>
{
	hadc_sensor = hadc;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	635a      	str	r2, [r3, #52]	@ 0x34
	LiquidMeasSemaphore.semaphoreCreate();
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3338      	adds	r3, #56	@ 0x38
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fc14 	bl	8004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>

    InternalLowSpan = LowSpan;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28
    InternalFullSpan = FullSpan;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    InternalVoltOut = VoltOut;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	bf800000 	.word	0xbf800000

080044cc <_ZN17sensor_liquidMeas12liquidSensor16Measurement_loopEPhPfmPmS3_>:

void liquidSensor::Measurement_loop(uint8_t *getlevel,float *consumption,uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
	getLevel(getlevel);
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f80f 	bl	8004500 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>
	consumptionliters(consumption);
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f907 	bl	80046f8 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>
	refuelingDetection(curEpochTime,startEpochtime,endEpochtime);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f953 	bl	800479c <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>:

liquidSensor::status liquidSensor::getLevel(uint8_t *getlevel)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b096      	sub	sp, #88	@ 0x58
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]


	enum status stat = liquidSensor_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3338      	adds	r3, #56	@ 0x38
 8004514:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fbe9 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 800451e:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80d1 	beq.w	80046d2 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1d2>
	float totalSpan = InternalFullSpan - InternalLowSpan;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800453c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004540:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	float current_mA;

	  uint32_t adcaverage[10] = {0};
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	2228      	movs	r2, #40	@ 0x28
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f00e fa40 	bl	80129d2 <memset>
	  uint32_t adcValue = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	653b      	str	r3, [r7, #80]	@ 0x50




	if(hadc_sensor == NULL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x62>
	{
		return liquidSensor_ERR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0bc      	b.n	80046dc <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
	}
    for(int i = 0; i< 10; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004566:	e03a      	b.n	80045de <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xde>
    {
        CheckError(HAL_ADC_Start(hadc_sensor),liquidSensor_ERR,HAL_OK);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456c:	4618      	mov	r0, r3
 800456e:	f005 fcf3 	bl	8009f58 <HAL_ADC_Start>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x90>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3338      	adds	r3, #56	@ 0x38
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fbda 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 800458c:	2301      	movs	r3, #1
 800458e:	e0a5      	b.n	80046dc <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
        CheckError(HAL_ADC_PollForConversion(hadc_sensor, 10000),liquidSensor_ERR,HAL_OK); //take the value
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004594:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004598:	4618      	mov	r0, r3
 800459a:	f005 fde2 	bl	800a162 <HAL_ADC_PollForConversion>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d006      	beq.n	80045bc <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xbc>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3338      	adds	r3, #56	@ 0x38
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fbc4 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e08f      	b.n	80046dc <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1dc>
        adcaverage[i] = HAL_ADC_GetValue(hadc_sensor);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c0:	4618      	mov	r0, r3
 80045c2:	f005 fe59 	bl	800a278 <HAL_ADC_GetValue>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	3350      	adds	r3, #80	@ 0x50
 80045ce:	f107 0108 	add.w	r1, r7, #8
 80045d2:	440b      	add	r3, r1
 80045d4:	f843 2c44 	str.w	r2, [r3, #-68]
    for(int i = 0; i< 10; i++)
 80045d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045da:	3301      	adds	r3, #1
 80045dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e0:	2b09      	cmp	r3, #9
 80045e2:	ddc1      	ble.n	8004568 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x68>
    }
    HAL_ADC_Stop(hadc_sensor);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e8:	4618      	mov	r0, r3
 80045ea:	f005 fd87 	bl	800a0fc <HAL_ADC_Stop>
    for(int i = 0; i< 10; i++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f2:	e00d      	b.n	8004610 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x110>
    {
    	adcValue = adcValue +  adcaverage[i];
 80045f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	3350      	adds	r3, #80	@ 0x50
 80045fa:	f107 0208 	add.w	r2, r7, #8
 80045fe:	4413      	add	r3, r2
 8004600:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004604:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004606:	4413      	add	r3, r2
 8004608:	653b      	str	r3, [r7, #80]	@ 0x50
    for(int i = 0; i< 10; i++)
 800460a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800460c:	3301      	adds	r3, #1
 800460e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004612:	2b09      	cmp	r3, #9
 8004614:	ddee      	ble.n	80045f4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0xf4>
    }
    adcValue = adcValue/10;
 8004616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004618:	4a32      	ldr	r2, [pc, #200]	@ (80046e4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1e4>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	653b      	str	r3, [r7, #80]	@ 0x50
    float voltage = (adcValue / Resolution) * Vref;
 8004622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800462c:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80046e8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1e8>
 8004630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004634:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80046ec <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1ec>
 8004638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    current_mA = ((voltage/InternalVoltOut) *  (max_cur - min_cur)) + min_cur;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8004646:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800464a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8004652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004656:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800465a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800465e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    fuel_level = (current_mA - min_cur) / (max_cur - min_cur) * totalSpan;
 8004662:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004666:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800466a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800466e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004672:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004676:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	edc3 7a01 	vstr	s15, [r3, #4]
    tank_volumeLiters = (fuel_level/totalSpan) * max_liters;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	edd3 6a01 	vldr	s13, [r3, #4]
 800468a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80046f0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f0>
 8004696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	edc3 7a00 	vstr	s15, [r3]
	*getlevel = (tank_volumeLiters/max_liters) * 100; //get percentage
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	ed93 7a00 	vldr	s14, [r3]
 80046a6:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80046f0 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f0>
 80046aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ae:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80046f4 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1f4>
 80046b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80046be:	793b      	ldrb	r3, [r7, #4]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	701a      	strb	r2, [r3, #0]

	LiquidMeasSemaphore.semaphoreGive();
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3338      	adds	r3, #56	@ 0x38
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fb38 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
 80046d0:	e002      	b.n	80046d8 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh+0x1d8>
	}
	else
	{
		stat = liquidSensor_ERR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}

	  return stat;
 80046d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3758      	adds	r7, #88	@ 0x58
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	cccccccd 	.word	0xcccccccd
 80046e8:	45800000 	.word	0x45800000
 80046ec:	40533333 	.word	0x40533333
 80046f0:	43fa0000 	.word	0x43fa0000
 80046f4:	42c80000 	.word	0x42c80000

080046f8 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf>:

void liquidSensor::consumptionliters(float *consumption)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3338      	adds	r3, #56	@ 0x38
 8004706:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800470a:	4618      	mov	r0, r3
 800470c:	f000 faf0 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004710:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004712:	2b00      	cmp	r3, #0
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 800471c:	2b00      	cmp	r3, #0
 800471e:	d038      	beq.n	8004792 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x9a>
    uint32_t current_time = HAL_GetTick();
 8004720:	f005 fba6 	bl	8009e70 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    if(prev_volumeLiters < tank_volumeLiters)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	ed93 7a02 	vldr	s14, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	edd3 7a00 	vldr	s15, [r3]
 8004732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473a:	d50c      	bpl.n	8004756 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x5e>
    {
        prev_volumeLiters = tank_volumeLiters;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	61da      	str	r2, [r3, #28]
    	LiquidMeasSemaphore.semaphoreGive();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3338      	adds	r3, #56	@ 0x38
 800474e:	4618      	mov	r0, r3
 8004750:	f000 faf6 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
        return;
 8004754:	e01d      	b.n	8004792 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x9a>
    }

    if (current_time - last_consumption_time >= 3600000) { // 1hour
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0xa0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d311      	bcc.n	8004788 <_ZN17sensor_liquidMeas12liquidSensor17consumptionlitersEPf+0x90>
    	*consumption = prev_volumeLiters - tank_volumeLiters;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	ed93 7a02 	vldr	s14, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	edd3 7a00 	vldr	s15, [r3]
 8004770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	edc3 7a00 	vstr	s15, [r3]

        // Update for next interval
        prev_volumeLiters = tank_volumeLiters;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
        last_consumption_time = current_time;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	61da      	str	r2, [r3, #28]
    }

	LiquidMeasSemaphore.semaphoreGive();
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3338      	adds	r3, #56	@ 0x38
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fad7 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

	}

}
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	0036ee80 	.word	0x0036ee80

0800479c <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_>:

void liquidSensor::refuelingDetection(uint32_t curEpochTime,uint32_t *startEpochtime,uint32_t *endEpochtime)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3338      	adds	r3, #56	@ 0x38
 80047ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fa9c 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80047b8:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(1000)
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05f      	beq.n	8004888 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xec>
	current_volume_change = tank_volumeLiters;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	611a      	str	r2, [r3, #16]
    if(prev_volume_change < 0)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80047d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047de:	d509      	bpl.n	80047f4 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0x58>
    {
    	prev_volume_change = current_volume_change;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	615a      	str	r2, [r3, #20]
    	LiquidMeasSemaphore.semaphoreGive();
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3338      	adds	r3, #56	@ 0x38
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 faa7 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
        return;
 80047f2:	e049      	b.n	8004888 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xec>
    }

    // Calculate the change in volume
  volume_change = current_volume_change - prev_volume_change;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004808:	ee17 2a90 	vmov	r2, s15
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	60da      	str	r2, [r3, #12]

     refueling_start_time = HAL_GetTick();
 8004810:	f005 fb2e 	bl	8009e70 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]


  if (!refueling_active) {
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	7e1b      	ldrb	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d111      	bne.n	8004846 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xaa>
	    // Detect start of refueling
      if (volume_change > refueling_threshold) {
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b05      	cmp	r3, #5
 8004828:	dd25      	ble.n	8004876 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>
    	  refueling_active = 1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	761a      	strb	r2, [r3, #24]
    	  refueling_prev_time = refueling_start_time;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24
    	  *startEpochtime = curEpochTime;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	601a      	str	r2, [r3, #0]
    	  *endEpochtime = 0; //make it zero so we know we are refueling now to erase previous end time so user dont get confused
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e017      	b.n	8004876 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>
      }
  }
  else
  {
	  if (volume_change <= 0) {
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	dc0f      	bgt.n	800486e <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xd2>
		  if ((refueling_start_time - refueling_prev_time) >= refuel_stabilize_time) {
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1a      	ldr	r2, [r3, #32]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3287 	movw	r2, #4999	@ 0x1387
 800485c:	4293      	cmp	r3, r2
 800485e:	d90a      	bls.n	8004876 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>

			  refueling_active = 0;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	761a      	strb	r2, [r3, #24]
			  *endEpochtime = curEpochTime;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e003      	b.n	8004876 <_ZN17sensor_liquidMeas12liquidSensor18refuelingDetectionEmPmS1_+0xda>

		  }
	  }
	  else
	  {
    	  refueling_prev_time = refueling_start_time;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
  }

  // Update prev_volume for the next iteration
	prev_volume_change = current_volume_change;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	615a      	str	r2, [r3, #20]

	LiquidMeasSemaphore.semaphoreGive();
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3338      	adds	r3, #56	@ 0x38
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa5c 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}

}
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>:


void liquidSensor::setParameters(float LowSpan,float FullSpan)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	ed87 0a02 	vstr	s0, [r7, #8]
 800489a:	edc7 0a01 	vstr	s1, [r7, #4]
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3338      	adds	r3, #56	@ 0x38
 80048a2:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa22 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80048ac:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff+0x44>
    InternalLowSpan = LowSpan;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28
    InternalFullSpan = FullSpan;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	LiquidMeasSemaphore.semaphoreGive();
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3338      	adds	r3, #56	@ 0x38
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fa37 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_>:

void liquidSensor::getParameters(float *LowSpan,float *FullSpan)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3338      	adds	r3, #56	@ 0x38
 80048ea:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f9fe 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80048f4:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
	if (LiquidMeasSemaphore.semaphoreTake(8000)
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_+0x44>
	 *LowSpan   =  InternalLowSpan  ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	601a      	str	r2, [r3, #0]
     *FullSpan  =  InternalFullSpan ;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
 	LiquidMeasSemaphore.semaphoreGive();
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3338      	adds	r3, #56	@ 0x38
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fa11 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	}
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <_ZN11sensor_pzem9PZEM_004TC1EP20__UART_HandleTypeDef>:
#include "cstdio"
#include "cstring"
#include "cstdlib"
namespace sensor_pzem {

PZEM_004T::PZEM_004T(UART_HandleTypeDef *huart) :
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
		serial_(huart), PzemSemaphore() {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fd51 	bl	80053de <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3324      	adds	r3, #36	@ 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f9bb 	bl	8004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	huart_ = huart;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	601a      	str	r2, [r3, #0]
	PzemSemaphore.semaphoreCreate();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3324      	adds	r3, #36	@ 0x24
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f9be 	bl	8004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>:
	serial_.TransmitData(rst_buf, 4, 1000);
	serial_.ReceiveData(res_buf, 25, 500);
	PzemSemaphore.semaphoreGive();
	}
}
void PZEM_004T::read(PZEM *pzemhandle) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]

	if (PzemSemaphore.semaphoreTake(1000)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3324      	adds	r3, #36	@ 0x24
 800496e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f9bc 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004978:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
	if (PzemSemaphore.semaphoreTake(1000)
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80c6 	beq.w	8004b16 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1b6>
	serial_.TransmitData(rst_buf, 4, 1000);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	1d18      	adds	r0, r3, #4
 800498e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004992:	2204      	movs	r2, #4
 8004994:	4964      	ldr	r1, [pc, #400]	@ (8004b28 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1c8>)
 8004996:	f000 fd44 	bl	8005422 <_ZN13System_serial6serial12TransmitDataEPKhtm>
	serial_.ReceiveData(res_buf, 25, 500);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	1d18      	adds	r0, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f103 0108 	add.w	r1, r3, #8
 80049a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80049a8:	2219      	movs	r2, #25
 80049aa:	f000 fd27 	bl	80053fc <_ZN13System_serial6serial11ReceiveDataEPhtm>


	System_Rtos::delay(1000);
 80049ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80049b2:	f000 f8c1 	bl	8004b38 <_ZN11System_Rtos5delayEm>

	serial_.TransmitData(buf, 8, 1000);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1d18      	adds	r0, r3, #4
 80049ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049be:	2208      	movs	r2, #8
 80049c0:	495a      	ldr	r1, [pc, #360]	@ (8004b2c <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1cc>)
 80049c2:	f000 fd2e 	bl	8005422 <_ZN13System_serial6serial12TransmitDataEPKhtm>
	serial_.ReceiveData(res_buf, 25, 1000);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	1d18      	adds	r0, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0108 	add.w	r1, r3, #8
 80049d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049d4:	2219      	movs	r2, #25
 80049d6:	f000 fd11 	bl	80053fc <_ZN13System_serial6serial11ReceiveDataEPhtm>


	pzemhandle->voltage = ((uint32_t)res_buf[3] << 8 | (uint32_t)res_buf[4]) / 10.0;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7adb      	ldrb	r3, [r3, #11]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	7b12      	ldrb	r2, [r2, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fb fd8c 	bl	8000504 <__aeabi_ui2d>
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004b30 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d0>)
 80049f2:	f7fb ff2b 	bl	800084c <__aeabi_ddiv>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	f7fc f8f3 	bl	8000be8 <__aeabi_d2f>
 8004a02:	4602      	mov	r2, r0
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	601a      	str	r2, [r3, #0]
	pzemhandle->current = ((uint32_t)res_buf[5] << 8 | (uint32_t)res_buf[6]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7b5b      	ldrb	r3, [r3, #13]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	7b92      	ldrb	r2, [r2, #14]
 8004a12:	431a      	orrs	r2, r3
			| (uint32_t)res_buf[7] << 24 | (uint32_t)res_buf[8] << 16) / 100.0;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	7bdb      	ldrb	r3, [r3, #15]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7c1b      	ldrb	r3, [r3, #16]
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	4313      	orrs	r3, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fd6d 	bl	8000504 <__aeabi_ui2d>
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d4>)
 8004a30:	f7fb ff0c 	bl	800084c <__aeabi_ddiv>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f8d4 	bl	8000be8 <__aeabi_d2f>
 8004a40:	4602      	mov	r2, r0
	pzemhandle->current = ((uint32_t)res_buf[5] << 8 | (uint32_t)res_buf[6]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	605a      	str	r2, [r3, #4]
	pzemhandle->power = ((uint32_t)res_buf[9] << 8 | (uint32_t)res_buf[10]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7c5b      	ldrb	r3, [r3, #17]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	7c92      	ldrb	r2, [r2, #18]
 8004a50:	431a      	orrs	r2, r3
			| (uint32_t)res_buf[11] << 24 | (uint32_t)res_buf[12] << 16);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7cdb      	ldrb	r3, [r3, #19]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7d1b      	ldrb	r3, [r3, #20]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	4313      	orrs	r3, r2
	pzemhandle->power = ((uint32_t)res_buf[9] << 8 | (uint32_t)res_buf[10]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	edc3 7a02 	vstr	s15, [r3, #8]
	pzemhandle->energy = ((uint32_t)res_buf[13] << 8 | (uint32_t)res_buf[14]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7d5b      	ldrb	r3, [r3, #21]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	7d92      	ldrb	r2, [r2, #22]
 8004a7a:	431a      	orrs	r2, r3
			| (uint32_t)res_buf[15] << 24 | (uint32_t)res_buf[16] << 16);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7ddb      	ldrb	r3, [r3, #23]
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7e1b      	ldrb	r3, [r3, #24]
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	4313      	orrs	r3, r2
	pzemhandle->energy = ((uint32_t)res_buf[13] << 8 | (uint32_t)res_buf[14]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	edc3 7a03 	vstr	s15, [r3, #12]
	pzemhandle->frequency = ((uint32_t)res_buf[17] << 8 | (uint32_t)res_buf[18]) / 10.0;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7e5b      	ldrb	r3, [r3, #25]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	7e92      	ldrb	r2, [r2, #26]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fd2c 	bl	8000504 <__aeabi_ui2d>
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b30 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d0>)
 8004ab2:	f7fb fecb 	bl	800084c <__aeabi_ddiv>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	f7fc f893 	bl	8000be8 <__aeabi_d2f>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	611a      	str	r2, [r3, #16]
	pzemhandle->pf = ((uint32_t)res_buf[19] << 8 | (uint32_t)res_buf[20]) / 100.0;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	7edb      	ldrb	r3, [r3, #27]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	7f12      	ldrb	r2, [r2, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fb fd15 	bl	8000504 <__aeabi_ui2d>
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1d4>)
 8004ae0:	f7fb feb4 	bl	800084c <__aeabi_ddiv>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	f7fc f87c 	bl	8000be8 <__aeabi_d2f>
 8004af0:	4602      	mov	r2, r0
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	615a      	str	r2, [r3, #20]
	pzemhandle->alarms = ((uint32_t)res_buf[21] << 8 | (uint32_t)res_buf[22]);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7f5b      	ldrb	r3, [r3, #29]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	7f92      	ldrb	r2, [r2, #30]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	831a      	strh	r2, [r3, #24]

	PzemSemaphore.semaphoreGive();
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	@ 0x24
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f916 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
	else
	{
		memset(pzemhandle,0,sizeof(PZEM));
	}

}
 8004b14:	e004      	b.n	8004b20 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME+0x1c0>
		memset(pzemhandle,0,sizeof(PZEM));
 8004b16:	221c      	movs	r2, #28
 8004b18:	2100      	movs	r1, #0
 8004b1a:	6838      	ldr	r0, [r7, #0]
 8004b1c:	f00d ff59 	bl	80129d2 <memset>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	080158c4 	.word	0x080158c4
 8004b2c:	080158bc 	.word	0x080158bc
 8004b30:	40240000 	.word	0x40240000
 8004b34:	40590000 	.word	0x40590000

08004b38 <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	4a05      	ldr	r2, [pc, #20]	@ (8004b60 <_ZN11System_Rtos5delayEm+0x28>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00b fa4a 	bl	800ffec <vTaskDelay>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	10624dd3 	.word	0x10624dd3

08004b64 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3304      	adds	r3, #4
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f00e f8f4 	bl	8012d72 <strcpy>
	usStackDepth = usStackDepth_;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	887a      	ldrh	r2, [r7, #2]
 8004b8e:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	61da      	str	r2, [r3, #28]


}
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 8004ba6:	b5b0      	push	{r4, r5, r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af02      	add	r7, sp, #8
 8004bac:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	1d19      	adds	r1, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8a9c      	ldrh	r4, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699d      	ldr	r5, [r3, #24]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	3220      	adds	r2, #32
 8004bc6:	9201      	str	r2, [sp, #4]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	462b      	mov	r3, r5
 8004bcc:	4622      	mov	r2, r4
 8004bce:	f00b f8af 	bl	800fd30 <xTaskCreate>
			&taskHandle);
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bdb0      	pop	{r4, r5, r7, pc}

08004bda <_ZN11System_Rtos15freertos_queuesC1EttPh>:
}




freertos_queues::freertos_queues(uint16_t queLen_,uint16_t itemsize_, uint8_t *pucQueueStorage_)
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	817b      	strh	r3, [r7, #10]
 8004be8:	4613      	mov	r3, r2
 8004bea:	813b      	strh	r3, [r7, #8]
{
	 queLen = queLen_;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	897a      	ldrh	r2, [r7, #10]
 8004bf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	 itemsize = itemsize_;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	893a      	ldrh	r2, [r7, #8]
 8004bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	 pucQueueStorage = pucQueueStorage_;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	659a      	str	r2, [r3, #88]	@ 0x58

}
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_ZN11System_Rtos15freertos_queues11queueCreateEv>:

void freertos_queues::queueCreate()
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	6078      	str	r0, [r7, #4]
	xQueue = xQueueCreateStatic(queLen,itemsize,pucQueueStorage,&xStaticQueue);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004c1e:	4618      	mov	r0, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c26:	461c      	mov	r4, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	2100      	movs	r1, #0
 8004c32:	9100      	str	r1, [sp, #0]
 8004c34:	4621      	mov	r1, r4
 8004c36:	f00a f9f5 	bl	800f024 <xQueueGenericCreateStatic>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}

08004c48 <_ZN11System_Rtos15freertos_queues9queueSendEPv>:


enum freertos_queues::queues_stat freertos_queues::queueSend(void *SendBuf)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_sent;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]

	if(xQueueSend(xQueue,SendBuf,pdMS_TO_TICKS(200)) != pdPASS)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	22c8      	movs	r2, #200	@ 0xc8
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	f00a faee 	bl	800f240 <xQueueGenericSend>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	bf14      	ite	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	2300      	moveq	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x30>
	{
       return queues_err;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e000      	b.n	8004c7a <_ZN11System_Rtos15freertos_queues9queueSendEPv+0x32>
	}


	return stat;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]

}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv>:
enum freertos_queues::queues_stat freertos_queues::queueReceive(void *RecvBuf)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
	enum queues_stat stat = queues_nothing;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	73fb      	strb	r3, [r7, #15]

    if( xQueueReceive( xQueue,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2232      	movs	r2, #50	@ 0x32
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f00a fc71 	bl	800f580 <xQueueReceive>
 8004c9e:	4603      	mov	r3, r0
    		           RecvBuf,
					   pdMS_TO_TICKS(50)) == pdPASS )
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
    if( xQueueReceive( xQueue,
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x30>
      {
    	 return queues_recived;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <_ZN11System_Rtos15freertos_queues12queueReceiveEPv+0x32>
      }


	return stat;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>:


freertos_semaphore::freertos_semaphore()
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
{

}
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>:

void freertos_semaphore::semaphoreCreate()
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
	xSemaphor = xSemaphoreCreateMutex();
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f00a fa97 	bl	800f20e <xQueueCreateMutex>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>:

	return stat;
}

enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreTake(uint32_t timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	enum semaphore_stat stat = senaphore_nothing;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]

    if( xSemaphoreTake(xSemaphor,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	490b      	ldr	r1, [pc, #44]	@ (8004d3c <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x4c>)
 8004d0e:	fba1 1303 	umull	r1, r3, r1, r3
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f00a fd14 	bl	800f744 <xQueueSemaphoreTake>
 8004d1c:	4603      	mov	r3, r0
					   pdMS_TO_TICKS(timeout)) == pdPASS )
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
    if( xSemaphoreTake(xSemaphor,
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x40>
      {
    	 return semaphore_recived;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm+0x42>
      }


	return stat;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	10624dd3 	.word	0x10624dd3

08004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>:



enum freertos_semaphore::semaphore_stat freertos_semaphore::semaphoreGive()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	enum semaphore_stat stat = senaphore_nothing;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(xSemaphor);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	2200      	movs	r2, #0
 8004d54:	2100      	movs	r1, #0
 8004d56:	f00a fa73 	bl	800f240 <xQueueGenericSend>

	return stat;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZN11System_Rtos15freertos_eventsC1Ev>:




freertos_events::freertos_events() {
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

}
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <_ZN11System_Rtos15freertos_events11eventCreateEv>:

void freertos_events::eventCreate()
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
	xeventgroup = xEventGroupCreate();
 8004d82:	f009 fe75 	bl	800ea70 <xEventGroupCreate>
 8004d86:	4602      	mov	r2, r0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_ZN11System_Rtos15freertos_events9eventGiveEv>:

void freertos_events::eventGive()
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d9c:	f3ef 8305 	mrs	r3, IPSR
 8004da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004da2:	68fb      	ldr	r3, [r7, #12]
	if( (__get_IPSR() != 0U))
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01e      	beq.n	8004df0 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x5c>
     {
		 xHigherPriorityTaskWoken = pdFALSE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]
		 xResult = xEventGroupSetBitsFromISR(xeventgroup,  1, &xHigherPriorityTaskWoken );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	f009 fffc 	bl	800edc0 <xEventGroupSetBitsFromISR>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
		 if( xResult != pdFAIL )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d012      	beq.n	8004dfc <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
          {
			 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00e      	beq.n	8004dfc <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
 8004dde:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <_ZN11System_Rtos15freertos_events9eventGiveEv+0x70>)
 8004de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
     else
     {
    	 xEventGroupSetBits( xeventgroup, 1);
     }

}
 8004dee:	e005      	b.n	8004dfc <_ZN11System_Rtos15freertos_events9eventGiveEv+0x68>
    	 xEventGroupSetBits( xeventgroup, 1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2101      	movs	r1, #1
 8004df6:	4618      	mov	r0, r3
 8004df8:	f009 ff26 	bl	800ec48 <xEventGroupSetBits>
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <_ZN11System_Rtos15freertos_events9eventTakeEv>:
void freertos_events::eventTake()
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	6078      	str	r0, [r7, #4]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, portMAX_DELAY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2101      	movs	r1, #1
 8004e20:	f009 fe40 	bl	800eaa4 <xEventGroupWaitBits>
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>:
void freertos_events::eventTakeTimed(uint32_t time)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	 xEventGroupWaitBits(xeventgroup, 1 , pdTRUE,pdFALSE, pdMS_TO_TICKS(time));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	4a06      	ldr	r2, [pc, #24]	@ (8004e60 <_ZN11System_Rtos15freertos_events14eventTakeTimedEm+0x34>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2201      	movs	r2, #1
 8004e52:	2101      	movs	r1, #1
 8004e54:	f009 fe26 	bl	800eaa4 <xEventGroupWaitBits>
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	10624dd3 	.word	0x10624dd3

08004e64 <_ZN10System_rtc6stmRTCC1EP17RTC_HandleTypeDefa>:
#include "cstring"
#include "cstdlib"

namespace System_rtc {

stmRTC::stmRTC(RTC_HandleTypeDef *hrtc, int8_t timezone) :
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	71fb      	strb	r3, [r7, #7]
		checking(), rtcSemaphore() {
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3308      	adds	r3, #8
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fb13 	bl	80054a2 <_ZN10System_sys16Parsing_CheckingC1Ev>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff1b 	bl	8004cbc <_ZN11System_Rtos18freertos_semaphoreC1Ev>
	Internal_handler = hrtc;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	605a      	str	r2, [r3, #4]
	zone = timezone;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	79fa      	ldrb	r2, [r7, #7]
 8004e90:	701a      	strb	r2, [r3, #0]
	rtcSemaphore.semaphoreCreate();
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	330c      	adds	r3, #12
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff ff1b 	bl	8004cd2 <_ZN11System_Rtos18freertos_semaphore15semaphoreCreateEv>
}
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>:

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp) {
 8004ea6:	b5b0      	push	{r4, r5, r7, lr}
 8004ea8:	b090      	sub	sp, #64	@ 0x40
 8004eaa:	af04      	add	r7, sp, #16
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	603b      	str	r3, [r7, #0]
	int err = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff15 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004ec6:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d042      	beq.n	8004f5c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xb6>
		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f107 0114 	add.w	r1, r7, #20
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f007 fe92 	bl	800cc0a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f007 ff6c 	bl	800cdce <HAL_RTC_GetDate>

		if (timestamp != nullptr) {
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x86>
			*timestamp = checking.convertToEpoch(Date, Time, zone);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f103 0508 	add.w	r5, r3, #8
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f993 3000 	ldrsb.w	r3, [r3]
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	466c      	mov	r4, sp
 8004f0c:	f107 031c 	add.w	r3, r7, #28
 8004f10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	cb0c      	ldmia	r3, {r2, r3}
 8004f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fc0b 	bl	800573c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 8004f26:	4602      	mov	r2, r0
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0x92>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 8004f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xa6>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	2214      	movs	r2, #20
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00d ff1b 	bl	8012d82 <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fef5 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f5a:	e014      	b.n	8004f86 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xe0>
	} else {
		if (timestamp != nullptr) {
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xc2>
			*timestamp = 0;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xd0>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 8004f6e:	2300      	movs	r3, #0
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm+0xe0>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 8004f7c:	2214      	movs	r2, #20
 8004f7e:	2100      	movs	r1, #0
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f00d fefe 	bl	8012d82 <memcpy>
		}

	}

	return err;
 8004f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f88:	b2db      	uxtb	r3, r3

}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	@ 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bdb0      	pop	{r4, r5, r7, pc}

08004f92 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>:

uint8_t stmRTC::getTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		uint32_t *timestamp, int8_t *timezone) {
 8004f92:	b5b0      	push	{r4, r5, r7, lr}
 8004f94:	b090      	sub	sp, #64	@ 0x40
 8004f96:	af04      	add	r7, sp, #16
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]
	int err = 1;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fe9f 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8004fb2:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d047      	beq.n	8005052 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xc0>

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f107 0114 	add.w	r1, r7, #20
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f007 fe1c 	bl	800cc0a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f007 fef6 	bl	800cdce <HAL_RTC_GetDate>

		*timezone = zone;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f993 2000 	ldrsb.w	r2, [r3]
 8004fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fea:	701a      	strb	r2, [r3, #0]

		if (timestamp != nullptr) {
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x90>
			*timestamp = checking.convertToEpoch(Date, Time, zone);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f103 0508 	add.w	r5, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	466c      	mov	r4, sp
 8005002:	f107 031c 	add.w	r3, r7, #28
 8005006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800500a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800500e:	f107 0314 	add.w	r3, r7, #20
 8005012:	cb0c      	ldmia	r3, {r2, r3}
 8005014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005016:	4628      	mov	r0, r5
 8005018:	f000 fb90 	bl	800573c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>
 800501c:	4602      	mov	r2, r0
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0x9c>
			std::memcpy(DDate, &Date, sizeof(RTC_DateTypeDef));
 8005028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xb0>
			std::memcpy(DTime, &Time, sizeof(RTC_TimeTypeDef));
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	2214      	movs	r2, #20
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f00d fea0 	bl	8012d82 <memcpy>
		}

		rtcSemaphore.semaphoreGive();
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	330c      	adds	r3, #12
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fe7a 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>

		err = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005050:	e014      	b.n	800507c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xea>
	} else {
		if (timestamp != nullptr) {
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xcc>
			*timestamp = 0;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]

		}
		if (DDate != nullptr) {
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xda>
			std::memcpy(DDate, 0, sizeof(RTC_DateTypeDef));
 8005064:	2300      	movs	r3, #0
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	601a      	str	r2, [r3, #0]
		}

		if (DTime != nullptr) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa+0xea>
			std::memcpy(DTime, 0, sizeof(RTC_TimeTypeDef));
 8005072:	2214      	movs	r2, #20
 8005074:	2100      	movs	r1, #0
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f00d fe83 	bl	8012d82 <memcpy>
		}

	}

	return err;
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	b2db      	uxtb	r3, r3

}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	@ 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bdb0      	pop	{r4, r5, r7, pc}

08005088 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>:
	return err;

}

uint8_t stmRTC::setTime(RTC_DateTypeDef *DDate, RTC_TimeTypeDef *DTime,
		int8_t timezone) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	@ 0x30
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	70fb      	strb	r3, [r7, #3]
	int err = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (rtcSemaphore.semaphoreTake(1000)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	330c      	adds	r3, #12
 800509e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fe24 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 80050a8:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d027      	beq.n	8005108 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa+0x80>
		HAL_RTC_SetTime(Internal_handler, DTime, RTC_FORMAT_BIN);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f007 fd08 	bl	800cad6 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(Internal_handler, DDate, RTC_FORMAT_BIN);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f007 fdf9 	bl	800ccc6 <HAL_RTC_SetDate>
		zone = timezone;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	701a      	strb	r2, [r3, #0]

		RTC_DateTypeDef Date;
		RTC_TimeTypeDef Time;
		HAL_RTC_GetTime(Internal_handler, &Time, RTC_FORMAT_BIN);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f107 0114 	add.w	r1, r7, #20
 80050e2:	2200      	movs	r2, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 fd90 	bl	800cc0a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(Internal_handler, &Date, RTC_FORMAT_BIN);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80050f2:	2200      	movs	r2, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f007 fe6a 	bl	800cdce <HAL_RTC_GetDate>

		rtcSemaphore.semaphoreGive();
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	330c      	adds	r3, #12
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fe1e 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
		err = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	return err;
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	b2db      	uxtb	r3, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	3730      	adds	r7, #48	@ 0x30
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <_ZN10System_rtc6stmRTC17epochToTimeStringEmaPc>:

uint8_t stmRTC::epochToTimeString(uint32_t epoch, int8_t timezone,
		char *Timestring) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
	int err = 1;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
	if (rtcSemaphore.semaphoreTake(1000)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	330c      	adds	r3, #12
 800512c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fddd 	bl	8004cf0 <_ZN11System_Rtos18freertos_semaphore13semaphoreTakeEm>
 8005136:	4603      	mov	r3, r0
			== System_Rtos::freertos_semaphore::semaphore_recived) {
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
	if (rtcSemaphore.semaphoreTake(1000)
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00f      	beq.n	8005166 <_ZN10System_rtc6stmRTC17epochToTimeStringEmaPc+0x52>
		checking.convertEpochToTimeString(epoch, timezone, Timestring);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f103 0008 	add.w	r0, r3, #8
 800514c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	f000 fb88 	bl	8005868 <_ZN10System_sys16Parsing_Checking24convertEpochToTimeStringEmiPc>
		rtcSemaphore.semaphoreGive();
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	330c      	adds	r3, #12
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fdef 	bl	8004d40 <_ZN11System_Rtos18freertos_semaphore13semaphoreGiveEv>
		err = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
	}

	return err;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	b2db      	uxtb	r3, r3
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

 ModemTxCB LocalModemTxCB = nullptr ;
 InverterTxCB LocalInverterTxCB = nullptr ;


void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 800517e:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 8005184:	4a05      	ldr	r2, [pc, #20]	@ (800519c <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6013      	str	r3, [r2, #0]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20001aa8 	.word	0x20001aa8
 800519c:	20001aac 	.word	0x20001aac

080051a0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
	LocalInverterRxCB = Rxcb;
	LocalInverterTxCB = TxCB;
}

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ac:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b22      	cmp	r3, #34	@ 0x22
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d021      	beq.n	8005208 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x68>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 80051d0:	89bb      	ldrh	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 80051d6:	89bb      	ldrh	r3, [r7, #12]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	b21a      	sxth	r2, r3
 80051dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	b21b      	sxth	r3, r3
 80051e4:	81fb      	strh	r3, [r7, #14]




		if (huart == &GSM_U) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005218 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x78>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10a      	bne.n	8005204 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			if(LocalModemRxCB)
 80051ee:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 80051f6:	4b09      	ldr	r3, [pc, #36]	@ (800521c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x7c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	89fa      	ldrh	r2, [r7, #14]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	4611      	mov	r1, r2
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
			}

		}


		return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e003      	b.n	8005210 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x70>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 800520e:	2302      	movs	r3, #2
	}
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200022a4 	.word	0x200022a4
 800521c:	20001aa8 	.word	0x20001aa8

08005220 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff ff9a 	bl	80051a0 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 800526c:	e0a4      	b.n	80053b8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8083 	beq.w	8005384 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800528e:	2b00      	cmp	r3, #0
 8005290:	d078      	beq.n	8005384 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00f      	beq.n	80052bc <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f06f 0201 	mvn.w	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b4:	f043 0201 	orr.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00f      	beq.n	80052e6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0202 	mvn.w	r2, #2
 80052d8:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	f043 0204 	orr.w	r2, r3, #4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00f      	beq.n	8005310 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0204 	mvn.w	r2, #4
 8005302:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005308:	f043 0202 	orr.w	r2, r3, #2
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d014      	beq.n	8005344 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0208 	mvn.w	r2, #8
 8005336:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	f043 0208 	orr.w	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02d      	beq.n	80053b2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f008 ffa0 	bl	800e2bc <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 8005382:	e016      	b.n	80053b2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x192>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d014      	beq.n	80053b8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	  {


			if (huart == &GSM_U) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				if(LocalModemTxCB)
 80053a0:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
				{
					LocalModemTxCB(huart);
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
				}

			}


	    return;
 80053b0:	e001      	b.n	80053b6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x196>
	    return;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x198>
	    return;
 80053b6:	bf00      	nop
	  }



}
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200022a4 	.word	0x200022a4
 80053c4:	20001aac 	.word	0x20001aac

080053c8 <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff25 	bl	8005220 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <_ZN13System_serial6serial11ReceiveDataEPhtm>:

void serial::ReceiveData(uint8_t *data,uint16_t size,uint32_t timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive(Internal_UartHandler, data, size, timeout);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	f008 fde2 	bl	800dfde <HAL_UART_Receive>

}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <_ZN13System_serial6serial12TransmitDataEPKhtm>:

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	f008 fd44 	bl	800dec8 <HAL_UART_Transmit>


}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	//buffer and length can be dummy as this function is just used to enable interrupts for specific uart
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f008 fe54 	bl	800e10c <HAL_UART_Receive_IT>
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f008 fe6d 	bl	800e158 <HAL_UART_AbortReceive_IT>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_ZSt6strchrPci>:
  { return __builtin_strchr(__s, __n); }
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f00d faa5 	bl	80129e2 <strchr>
 8005498:	4603      	mov	r3, r0
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_ZN10System_sys16Parsing_CheckingC1Ev>:
//TODO
//Put receiving buffer check as well due to overflow check its length as well

namespace System_sys {

Parsing_Checking::Parsing_Checking()
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
{

}
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 80054c6:	2302      	movs	r3, #2
 80054c8:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 80054ca:	490c      	ldr	r1, [pc, #48]	@ (80054fc <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 80054cc:	68b8      	ldr	r0, [r7, #8]
 80054ce:	f00d faa8 	bl	8012a22 <strstr>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
 80054dc:	e008      	b.n	80054f0 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 80054de:	4908      	ldr	r1, [pc, #32]	@ (8005500 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 80054e0:	68b8      	ldr	r0, [r7, #8]
 80054e2:	f00d fa9e 	bl	8012a22 <strstr>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]


}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08015408 	.word	0x08015408
 8005500:	0801540c 	.word	0x0801540c

08005504 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

}

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800550a:	af00      	add	r7, sp, #0
 800550c:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8005510:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8005514:	6020      	str	r0, [r4, #0]
 8005516:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 800551a:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 800551e:	6001      	str	r1, [r0, #0]
 8005520:	4611      	mov	r1, r2
 8005522:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005526:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005530:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005534:	460a      	mov	r2, r1
 8005536:	801a      	strh	r2, [r3, #0]


	enum status stat = sys_notFound;
 8005538:	2302      	movs	r3, #2
 800553a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint16_t len = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	char temp[500];

	std::strncpy(temp,buffer,bufferLen);
 8005544:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005548:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005552:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8005556:	f107 0014 	add.w	r0, r7, #20
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	f00d fa4e 	bl	80129fc <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 8005560:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005564:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005568:	f107 0214 	add.w	r2, r7, #20
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	4610      	mov	r0, r2
 8005570:	f00d fa57 	bl	8012a22 <strstr>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x7a>
	{

		return sys_notFound;
 800557a:	2302      	movs	r3, #2
 800557c:	e085      	b.n	800568a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>

	}

	//this means we dont want to check anything below just need to check checkstring
	if(databuf == nullptr )
 800557e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x86>
	{
		return sys_ok;
 8005586:	2300      	movs	r3, #0
 8005588:	e07f      	b.n	800568a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 800558a:	f897 2228 	ldrb.w	r2, [r7, #552]	@ 0x228
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff76 	bl	8005486 <_ZSt6strchrPci>
 800559a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208


	if(Scolonpos != nullptr)
 800559e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd0>
	{
		Ncolonpos = Scolonpos - temp;
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		if(skipChar == ':')
 80055b4:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 80055b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80055ba:	d105      	bne.n	80055c8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xc4>
        {
			Ncolonpos = Ncolonpos + 2;
 80055bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80055c0:	3302      	adds	r3, #2
 80055c2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80055c6:	e007      	b.n	80055d8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 80055c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80055cc:	3301      	adds	r3, #1
 80055ce:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80055d2:	e001      	b.n	80055d8 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xd4>
		}
	}
	else
	{
		return sys_notFound;
 80055d4:	2302      	movs	r3, #2
 80055d6:	e058      	b.n	800568a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
	}


	uint16_t buf_index = Ncolonpos;
 80055d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80055dc:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 80055e0:	e03c      	b.n	800565c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x158>
	{

		if(buffer[buf_index] != endChar)
 80055e2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80055e6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80055ea:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d00f      	beq.n	800561c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x118>
		{
			databuf[len] = buffer[buf_index];
 80055fc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005600:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005604:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	441a      	add	r2, r3
 800560c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005610:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8005614:	440b      	add	r3, r1
 8005616:	7812      	ldrb	r2, [r2, #0]
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e015      	b.n	8005648 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>

		}else if(buffer[buf_index] == endChar)
 800561c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8005620:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005624:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f897 222c 	ldrb.w	r2, [r7, #556]	@ 0x22c
 8005632:	429a      	cmp	r2, r3
 8005634:	d108      	bne.n	8005648 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x144>
		{
			databuf[len] = 0x00;
 8005636:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800563a:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 800563e:	4413      	add	r3, r2
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8005644:	2300      	movs	r3, #0
 8005646:	e020      	b.n	800568a <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x186>
		}


		buf_index++;
 8005648:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800564c:	3301      	adds	r3, #1
 800564e:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
		len++;
 8005652:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8005656:	3301      	adds	r3, #1
 8005658:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 800565c:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 8005660:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005664:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005668:	8819      	ldrh	r1, [r3, #0]
 800566a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800566e:	1acb      	subs	r3, r1, r3
 8005670:	429a      	cmp	r2, r3
 8005672:	da08      	bge.n	8005686 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x182>
 8005674:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005678:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800567c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3ad      	bcc.n	80055e2 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xde>

	}


	  return stat;
 8005686:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
}
 800568a:	4618      	mov	r0, r3
 800568c:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}

08005694 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct>:



enum Parsing_Checking::status Parsing_Checking::extractData(const char *buffer,const char *cmd,char midchar,char endchar,char *outputbuf,uint16_t outputSize)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	70fb      	strb	r3, [r7, #3]
	enum status stat = sys_ok;
 80056a2:	2300      	movs	r3, #0
 80056a4:	767b      	strb	r3, [r7, #25]


	//if buffer is null dont run as it does not make sense to run after this
	if(outputbuf == nullptr)
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x1c>
	{
		return sys_err;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e040      	b.n	8005732 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
	}

     char* commandStart = std::strstr(buffer, cmd);
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	68b8      	ldr	r0, [r7, #8]
 80056b4:	f00d f9b5 	bl	8012a22 <strstr>
 80056b8:	61f8      	str	r0, [r7, #28]
    if (!commandStart) {
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x30>
        // Command not found
        return sys_notFound;
 80056c0:	2302      	movs	r3, #2
 80056c2:	e036      	b.n	8005732 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }



    // Move the pointer to the end of the command
    commandStart += std::strlen(cmd);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fa fdd3 	bl	8000270 <strlen>
 80056ca:	4602      	mov	r2, r0
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	61fb      	str	r3, [r7, #28]
    commandStart++; //to skip space
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]


     //Check for the mid character and skip it
     char* midCharPos = std::strchr(commandStart, midchar);
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	4619      	mov	r1, r3
 80056dc:	69f8      	ldr	r0, [r7, #28]
 80056de:	f7ff fed2 	bl	8005486 <_ZSt6strchrPci>
 80056e2:	6178      	str	r0, [r7, #20]
    if (!midCharPos) {
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x5a>
        // Mid character not found
        return sys_notFound;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e021      	b.n	8005732 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x9e>
    }
    commandStart = midCharPos + 1;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	3301      	adds	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]



    // Copy the remaining part until the end character or end of string
    uint16_t i = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	837b      	strh	r3, [r7, #26]
    while (*commandStart != endchar && i < outputSize - 1) {
 80056f8:	e00a      	b.n	8005710 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x7c>
    	outputbuf[i++] = *commandStart++;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	61fa      	str	r2, [r7, #28]
 8005700:	7819      	ldrb	r1, [r3, #0]
 8005702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005704:	8b7b      	ldrh	r3, [r7, #26]
 8005706:	1c58      	adds	r0, r3, #1
 8005708:	8378      	strh	r0, [r7, #26]
 800570a:	4413      	add	r3, r2
 800570c:	460a      	mov	r2, r1
 800570e:	701a      	strb	r2, [r3, #0]
    while (*commandStart != endchar && i < outputSize - 1) {
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005718:	429a      	cmp	r2, r3
 800571a:	d004      	beq.n	8005726 <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x92>
 800571c:	8b7a      	ldrh	r2, [r7, #26]
 800571e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005720:	3b01      	subs	r3, #1
 8005722:	429a      	cmp	r2, r3
 8005724:	dbe9      	blt.n	80056fa <_ZN10System_sys16Parsing_Checking11extractDataEPKcS2_ccPct+0x66>
    }
    outputbuf[i] = '\0'; // Null-terminate the output buffer
 8005726:	8b7b      	ldrh	r3, [r7, #26]
 8005728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800572a:	4413      	add	r3, r2
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]


    return stat;
 8005730:	7e7b      	ldrb	r3, [r7, #25]

}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa>:

	    return epoch;
}

uint32_t Parsing_Checking::convertToEpoch(RTC_DateTypeDef sDate,RTC_TimeTypeDef sTime,int8_t zone)
{
 800573c:	b082      	sub	sp, #8
 800573e:	b580      	push	{r7, lr}
 8005740:	b08c      	sub	sp, #48	@ 0x30
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
 8005748:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800574c:	e881 000c 	stmia.w	r1, {r2, r3}
	 int day,month ,year, hour, minute, second, timezoneOffset;


	    day = sDate.Date;
 8005750:	78bb      	ldrb	r3, [r7, #2]
 8005752:	623b      	str	r3, [r7, #32]
		month = sDate.Month;
 8005754:	787b      	ldrb	r3, [r7, #1]
 8005756:	61fb      	str	r3, [r7, #28]
	    year = sDate.Year;
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	61bb      	str	r3, [r7, #24]

	    year += (year < 70) ? 2000 : 1900; // Convert year to full format
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b45      	cmp	r3, #69	@ 0x45
 8005760:	dc02      	bgt.n	8005768 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x2c>
 8005762:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005766:	e001      	b.n	800576c <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x30>
 8005768:	f240 736c 	movw	r3, #1900	@ 0x76c
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4413      	add	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]

	    hour = sTime.Hours;
 8005772:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005776:	617b      	str	r3, [r7, #20]
		minute = sTime.Minutes;
 8005778:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800577c:	613b      	str	r3, [r7, #16]
		second = sTime.Seconds;
 800577e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005782:	60fb      	str	r3, [r7, #12]

	    timezoneOffset = zone * 60; // Convert offset hours to minutes
 8005784:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 8005788:	4613      	mov	r3, r2
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	60bb      	str	r3, [r7, #8]


	    // Convert date and time to seconds since 1970-01-01 (UTC)
	    uint32_t epoch = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete year
	    for (int y = 1970; y < year; y++) {
 8005796:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579c:	e012      	b.n	80057c4 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x88>
	        epoch += isLeapYear(y) ? DAYS_IN_LEAP_YEAR : DAYS_IN_YEAR;
 800579e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f89b 	bl	80058dc <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x76>
 80057ac:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80057b0:	e001      	b.n	80057b6 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x7a>
 80057b2:	f240 136d 	movw	r3, #365	@ 0x16d
 80057b6:	461a      	mov	r2, r3
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ba:	4413      	add	r3, r2
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int y = 1970; y < year; y++) {
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	3301      	adds	r3, #1
 80057c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	dbe8      	blt.n	800579e <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x62>
	    }
	    epoch *= SECONDS_IN_DAY;
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	4a25      	ldr	r2, [pc, #148]	@ (8005864 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 80057d0:	fb02 f303 	mul.w	r3, r2, r3
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Add seconds for each complete month in the current year
	    for (int m = 1; m < month; m++) {
 80057d6:	2301      	movs	r3, #1
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057da:	e00f      	b.n	80057fc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xc0>
	        epoch += daysInMonth(year, m) * SECONDS_IN_DAY;
 80057dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057de:	69b9      	ldr	r1, [r7, #24]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8ab 	bl	800593c <_ZN10System_sys16Parsing_Checking11daysInMonthEii>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005864 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f2:	4413      	add	r3, r2
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    for (int m = 1; m < month; m++) {
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	3301      	adds	r3, #1
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	429a      	cmp	r2, r3
 8005802:	dbeb      	blt.n	80057dc <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0xa0>
	    }

	    // Add seconds for the days, hours, minutes, and seconds
	    epoch += (day - 1) * SECONDS_IN_DAY;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	3b01      	subs	r3, #1
 8005808:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <_ZN10System_sys16Parsing_Checking14convertToEpochE15RTC_DateTypeDef15RTC_TimeTypeDefa+0x128>)
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	4413      	add	r3, r2
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += hour * SECONDS_IN_HOUR;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	461a      	mov	r2, r3
 8005822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005824:	4413      	add	r3, r2
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += minute * SECONDS_IN_MINUTE;
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4613      	mov	r3, r2
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	461a      	mov	r2, r3
 8005834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005836:	4413      	add	r3, r2
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    epoch += second;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800583e:	4413      	add	r3, r2
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // Adjust for the timezone offset
	    epoch -= timezoneOffset * SECONDS_IN_MINUTE;
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	461a      	mov	r2, r3
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    return epoch;
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005856:	4618      	mov	r0, r3
 8005858:	3730      	adds	r7, #48	@ 0x30
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005860:	b002      	add	sp, #8
 8005862:	4770      	bx	lr
 8005864:	00015180 	.word	0x00015180

08005868 <_ZN10System_sys16Parsing_Checking24convertEpochToTimeStringEmiPc>:
		}

}

void Parsing_Checking::convertEpochToTimeString(uint32_t epoch,int timezone,char *Timestring)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b08c      	sub	sp, #48	@ 0x30
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
	uint8_t prevYear;

		int TimezoneQuaters;
		int TimezoneOffsetMinutes;

		TimezoneQuaters = timezone*4;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TimezoneOffsetMinutes = TimezoneQuaters*15;
 800587c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800587e:	4613      	mov	r3, r2
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
		int min;
		int sec;


		 // Adjust epoch time by adding the default timezone offset to convert UTC to local time
		    epoch += TimezoneOffsetMinutes * SECONDS_IN_MINUTE;
 8005886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005888:	4613      	mov	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	461a      	mov	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

		    // Convert adjusted epoch time to a UTC tm structure
		    time_t rawTime = epoch;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	461c      	mov	r4, r3
 800589e:	4615      	mov	r5, r2
 80058a0:	e9c7 4504 	strd	r4, r5, [r7, #16]
		    struct tm* timeinfo = gmtime(&rawTime);  // gmtime gives us the time in UTC
 80058a4:	f107 0310 	add.w	r3, r7, #16
 80058a8:	4618      	mov	r0, r3
 80058aa:	f00d f8d1 	bl	8012a50 <gmtime>
 80058ae:	6278      	str	r0, [r7, #36]	@ 0x24

		    // Extract date and time components

		    hour = timeinfo->tm_hour;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	623b      	str	r3, [r7, #32]
		    min = timeinfo->tm_min;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	61fb      	str	r3, [r7, #28]
		    sec = timeinfo->tm_sec;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	61bb      	str	r3, [r7, #24]

		    std::sprintf(Timestring,"%02d:%02d:%02d", hour, sec);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	4904      	ldr	r1, [pc, #16]	@ (80058d8 <_ZN10System_sys16Parsing_Checking24convertEpochToTimeStringEmiPc+0x70>)
 80058c8:	6838      	ldr	r0, [r7, #0]
 80058ca:	f00d f81f 	bl	801290c <siprintf>



}
 80058ce:	bf00      	nop
 80058d0:	3730      	adds	r7, #48	@ 0x30
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bdb0      	pop	{r4, r5, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	080154cc 	.word	0x080154cc

080058dc <_ZN10System_sys16Parsing_Checking10isLeapYearEi>:

bool Parsing_Checking::isLeapYear(int year)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
	  return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10c      	bne.n	800590a <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x2e>
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	4b11      	ldr	r3, [pc, #68]	@ (8005938 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 80058f4:	fb83 1302 	smull	r1, r3, r3, r2
 80058f8:	1159      	asrs	r1, r3, #5
 80058fa:	17d3      	asrs	r3, r2, #31
 80058fc:	1acb      	subs	r3, r1, r3
 80058fe:	2164      	movs	r1, #100	@ 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4a>
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x5c>)
 800590e:	fb83 1302 	smull	r1, r3, r3, r2
 8005912:	11d9      	asrs	r1, r3, #7
 8005914:	17d3      	asrs	r3, r2, #31
 8005916:	1acb      	subs	r3, r1, r3
 8005918:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x4e>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <_ZN10System_sys16Parsing_Checking10isLeapYearEi+0x50>
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	51eb851f 	.word	0x51eb851f

0800593c <_ZN10System_sys16Parsing_Checking11daysInMonthEii>:
int Parsing_Checking::daysInMonth(int year, int month)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
    if (month == 2 && isLeapYear(year)) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d108      	bne.n	8005960 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ffc3 	bl	80058dc <_ZN10System_sys16Parsing_Checking10isLeapYearEi>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x24>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x26>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x2e>
        return 29;
 8005966:	231d      	movs	r3, #29
 8005968:	e004      	b.n	8005974 <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x38>
    }
    return monthDays[month - 1];
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3b01      	subs	r3, #1
 800596e:	4a03      	ldr	r2, [pc, #12]	@ (800597c <_ZN10System_sys16Parsing_Checking11daysInMonthEii+0x40>)
 8005970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	080158c8 	.word	0x080158c8

08005980 <_ZN2UI8SettingsEP11u8g2_struct>:

};


void Settings(u8g2_t *u8g2)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af02      	add	r7, sp, #8
 8005986:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	int8_t sel_sub = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	75fb      	strb	r3, [r7, #23]
do {

	button::resetCode(button::btncodes::cNONE);
 800598c:	2000      	movs	r0, #0
 800598e:	f001 fb33 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	do {
		u8g2_ClearBuffer(u8g2);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 fd7f 	bl	8007496 <u8g2_ClearBuffer>

		u8g2_DrawXBM(u8g2, 104, 0, imgcont::Settings.w, imgcont::Settings.h,imgcont::Settings.img);
 8005998:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac8 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 800599a:	7919      	ldrb	r1, [r3, #4]
 800599c:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac8 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 800599e:	795b      	ldrb	r3, [r3, #5]
 80059a0:	4a49      	ldr	r2, [pc, #292]	@ (8005ac8 <_ZN2UI8SettingsEP11u8g2_struct+0x148>)
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	9201      	str	r2, [sp, #4]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	460b      	mov	r3, r1
 80059aa:	2200      	movs	r2, #0
 80059ac:	2168      	movs	r1, #104	@ 0x68
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 fcf8 	bl	80073a4 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 80059b4:	2101      	movs	r1, #1
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f002 fa2d 	bl	8007e16 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 80059bc:	2102      	movs	r1, #2
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f002 fcb7 	bl	8008332 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80059c4:	4941      	ldr	r1, [pc, #260]	@ (8005acc <_ZN2UI8SettingsEP11u8g2_struct+0x14c>)
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f002 fb86 	bl	80080d8 <u8g2_SetFont>

		uint8_t strSize = std::strlen( UI_txts::Settings[sel_sub]);
 80059cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ad0 <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 80059da:	4413      	add	r3, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fa fc47 	bl	8000270 <strlen>
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]


		u8g2_DrawBox(u8g2, 2, 3 + (8*sel_sub) , (strSize * 5) + 1 , 9);
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	3303      	adds	r3, #3
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	4619      	mov	r1, r3
 80059f4:	0089      	lsls	r1, r1, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	3301      	adds	r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2109      	movs	r1, #9
 8005a00:	9100      	str	r1, [sp, #0]
 8005a02:	2102      	movs	r1, #2
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fd10 	bl	800742a <u8g2_DrawBox>




		for(int i=0; i < TotalSettingsSub;i++)
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e014      	b.n	8005a3a <_ZN2UI8SettingsEP11u8g2_struct+0xba>
		{
			u8g2_DrawStr(u8g2, 3, 10 + (8*i), UI_txts::Settings[i]);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	330a      	adds	r3, #10
 8005a1a:	b2d9      	uxtb	r1, r3
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad0 <_ZN2UI8SettingsEP11u8g2_struct+0x150>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	2103      	movs	r1, #3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f002 fab0 	bl	8007f94 <u8g2_DrawStr>
		for(int i=0; i < TotalSettingsSub;i++)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	dde7      	ble.n	8005a10 <_ZN2UI8SettingsEP11u8g2_struct+0x90>





		u8g2_SendBuffer(u8g2);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fd9b 	bl	800757c <u8g2_SendBuffer>

		btncodes = button::get_event();
 8005a46:	f001 faab 	bl	8006fa0 <_ZN6button9get_eventEv>
 8005a4a:	60b8      	str	r0, [r7, #8]
	}while (btncodes == button::btncodes::cNONE);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d09f      	beq.n	8005992 <_ZN2UI8SettingsEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cDWN_BT)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b28      	cmp	r3, #40	@ 0x28
 8005a56:	d106      	bne.n	8005a66 <_ZN2UI8SettingsEP11u8g2_struct+0xe6>
	{
		sel_sub++;
 8005a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	75fb      	strb	r3, [r7, #23]
 8005a64:	e01a      	b.n	8005a9c <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	}
	else if(btncodes == button::btncodes::cUP_BT)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b1e      	cmp	r3, #30
 8005a6a:	d10c      	bne.n	8005a86 <_ZN2UI8SettingsEP11u8g2_struct+0x106>
	{
		sel_sub--;
 8005a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	75fb      	strb	r3, [r7, #23]
        if(sel_sub < 0)
 8005a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da0d      	bge.n	8005a9c <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        {
        	sel_sub = TotalSettingsSub - 1;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
 8005a84:	e00a      	b.n	8005a9c <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
        }
	}
	else if(btncodes == button::btncodes::cEnter_BT)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b0a      	cmp	r3, #10
 8005a8a:	d107      	bne.n	8005a9c <_ZN2UI8SettingsEP11u8g2_struct+0x11c>
	{
		UI::UI_helper::set_UIcode(SettingsMenuCodes[sel_sub].code);
 8005a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a90:	4a10      	ldr	r2, [pc, #64]	@ (8005ad4 <_ZN2UI8SettingsEP11u8g2_struct+0x154>)
 8005a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f980 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}


	sel_sub = sel_sub % TotalSettingsSub;
 8005a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	bfb8      	it	lt
 8005aa8:	425b      	neglt	r3, r3
 8005aaa:	75fb      	strb	r3, [r7, #23]

}while (btncodes != button::btncodes::cRGHT_BT && btncodes != button::btncodes::cLFT_BT &&  btncodes != button::btncodes::cEnter_BT);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b32      	cmp	r3, #50	@ 0x32
 8005ab0:	d006      	beq.n	8005ac0 <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b3c      	cmp	r3, #60	@ 0x3c
 8005ab6:	d003      	beq.n	8005ac0 <_ZN2UI8SettingsEP11u8g2_struct+0x140>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b0a      	cmp	r3, #10
 8005abc:	f47f af66 	bne.w	800598c <_ZN2UI8SettingsEP11u8g2_struct+0xc>

}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	08015ed8 	.word	0x08015ed8
 8005acc:	08016334 	.word	0x08016334
 8005ad0:	080158f8 	.word	0x080158f8
 8005ad4:	20000000 	.word	0x20000000

08005ad8 <_ZN2UI14fuel_temp_humdEP11u8g2_struct>:

void fuel_temp_humd(u8g2_t *u8g2) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08e      	sub	sp, #56	@ 0x38
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	f001 fa89 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	char buffer[3][10];
	do {
		u8g2_ClearBuffer(u8g2);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fcd2 	bl	8007496 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 f96e 	bl	8006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 8005af8:	4b55      	ldr	r3, [pc, #340]	@ (8005c50 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x178>)
 8005afa:	7919      	ldrb	r1, [r3, #4]
 8005afc:	4b54      	ldr	r3, [pc, #336]	@ (8005c50 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x178>)
 8005afe:	795b      	ldrb	r3, [r3, #5]
				imgcont::SensorInfo.img);
 8005b00:	4a53      	ldr	r2, [pc, #332]	@ (8005c50 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x178>)
 8005b02:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::SensorInfo.w, imgcont::SensorInfo.h,
 8005b04:	9201      	str	r2, [sp, #4]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	2130      	movs	r1, #48	@ 0x30
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fc48 	bl	80073a4 <u8g2_DrawXBM>

		liquidSensor.getLevel(&FuelPercent);
 8005b14:	494f      	ldr	r1, [pc, #316]	@ (8005c54 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x17c>)
 8005b16:	4850      	ldr	r0, [pc, #320]	@ (8005c58 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x180>)
 8005b18:	f7fe fcf2 	bl	8004500 <_ZN17sensor_liquidMeas12liquidSensor8getLevelEPh>
		AHT20.measure(&temp, &humid);
 8005b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8005c5c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x184>)
 8005b1e:	4950      	ldr	r1, [pc, #320]	@ (8005c60 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x188>)
 8005b20:	4850      	ldr	r0, [pc, #320]	@ (8005c64 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x18c>)
 8005b22:	f7fe fb65 	bl	80041f0 <_ZN15sensor_TempHumd5AHT207measureEPmS1_>

		u8g2_SetFontMode(u8g2, 1);
 8005b26:	2101      	movs	r1, #1
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 f974 	bl	8007e16 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005b2e:	2102      	movs	r1, #2
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f002 fbfe 	bl	8008332 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005b36:	494c      	ldr	r1, [pc, #304]	@ (8005c68 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x190>)
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f002 facd 	bl	80080d8 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 26, 9);
 8005b3e:	2309      	movs	r3, #9
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	231a      	movs	r3, #26
 8005b44:	2211      	movs	r2, #17
 8005b46:	2102      	movs	r1, #2
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 fc6e 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Fuel:");
 8005b4e:	4b47      	ldr	r3, [pc, #284]	@ (8005c6c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x194>)
 8005b50:	2219      	movs	r2, #25
 8005b52:	2103      	movs	r1, #3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 fa1d 	bl	8007f94 <u8g2_DrawStr>
		std::sprintf(buffer[0],"%d%%",FuelPercent);
 8005b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c54 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x17c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f107 0308 	add.w	r3, r7, #8
 8005b64:	4942      	ldr	r1, [pc, #264]	@ (8005c70 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x198>)
 8005b66:	4618      	mov	r0, r3
 8005b68:	f00c fed0 	bl	801290c <siprintf>
		u8g2_DrawStr(u8g2, 5, 35, buffer[0]);
 8005b6c:	f107 0308 	add.w	r3, r7, #8
 8005b70:	2223      	movs	r2, #35	@ 0x23
 8005b72:	2105      	movs	r1, #5
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f002 fa0d 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 26, 9);
 8005b7a:	2309      	movs	r3, #9
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	231a      	movs	r3, #26
 8005b80:	2228      	movs	r2, #40	@ 0x28
 8005b82:	2102      	movs	r1, #2
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fc50 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Temp:");
 8005b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c74 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x19c>)
 8005b8c:	2230      	movs	r2, #48	@ 0x30
 8005b8e:	2103      	movs	r1, #3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f002 f9ff 	bl	8007f94 <u8g2_DrawStr>
		std::sprintf(buffer[1],"%ldC",temp);
 8005b96:	4b32      	ldr	r3, [pc, #200]	@ (8005c60 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x188>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	330a      	adds	r3, #10
 8005ba0:	4935      	ldr	r1, [pc, #212]	@ (8005c78 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x1a0>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f00c feb2 	bl	801290c <siprintf>
		u8g2_DrawStr(u8g2, 5, 58, buffer[1]);
 8005ba8:	f107 0308 	add.w	r3, r7, #8
 8005bac:	330a      	adds	r3, #10
 8005bae:	223a      	movs	r2, #58	@ 0x3a
 8005bb0:	2105      	movs	r1, #5
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f002 f9ee 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 86, 17, 31, 9);
 8005bb8:	2309      	movs	r3, #9
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	231f      	movs	r3, #31
 8005bbe:	2211      	movs	r2, #17
 8005bc0:	2156      	movs	r1, #86	@ 0x56
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 fc31 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 88, 25, "Humid:");
 8005bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x1a4>)
 8005bca:	2219      	movs	r2, #25
 8005bcc:	2158      	movs	r1, #88	@ 0x58
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 f9e0 	bl	8007f94 <u8g2_DrawStr>
		std::sprintf(buffer[2],"%ld%%",humid);
 8005bd4:	4b21      	ldr	r3, [pc, #132]	@ (8005c5c <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x184>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	f107 0308 	add.w	r3, r7, #8
 8005bdc:	3314      	adds	r3, #20
 8005bde:	4928      	ldr	r1, [pc, #160]	@ (8005c80 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x1a8>)
 8005be0:	4618      	mov	r0, r3
 8005be2:	f00c fe93 	bl	801290c <siprintf>
		u8g2_DrawStr(u8g2, 88, 35, buffer[2]);
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	3314      	adds	r3, #20
 8005bec:	2223      	movs	r2, #35	@ 0x23
 8005bee:	2158      	movs	r1, #88	@ 0x58
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f002 f9cf 	bl	8007f94 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fcc0 	bl	800757c <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 8005bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c00:	f001 f9dc 	bl	8006fbc <_ZN6button14get_eventTimedEm>
 8005c04:	62b8      	str	r0, [r7, #40]	@ 0x28
		if(btncodes == button::btncodes::cNONE )
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x140>
		  {
			scroll++;
 8005c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c10:	3301      	adds	r3, #1
 8005c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c16:	e002      	b.n	8005c1e <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x146>
		  }
		else
		{
			scroll = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 8005c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x156>
 8005c24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f67f af5f 	bls.w	8005aec <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT)
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	2b0a      	cmp	r3, #10
 8005c32:	d102      	bne.n	8005c3a <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x162>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005c34:	2006      	movs	r0, #6
 8005c36:	f001 f8b1 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8005c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d902      	bls.n	8005c48 <_ZN2UI14fuel_temp_humdEP11u8g2_struct+0x170>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 8005c42:	2032      	movs	r0, #50	@ 0x32
 8005c44:	f001 f9d8 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	}


}
 8005c48:	bf00      	nop
 8005c4a:	3730      	adds	r7, #48	@ 0x30
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08015ed0 	.word	0x08015ed0
 8005c54:	20001ab0 	.word	0x20001ab0
 8005c58:	20001988 	.word	0x20001988
 8005c5c:	20001ab8 	.word	0x20001ab8
 8005c60:	20001ab4 	.word	0x20001ab4
 8005c64:	200019c4 	.word	0x200019c4
 8005c68:	08016334 	.word	0x08016334
 8005c6c:	080154dc 	.word	0x080154dc
 8005c70:	080154e4 	.word	0x080154e4
 8005c74:	080154ec 	.word	0x080154ec
 8005c78:	080154f4 	.word	0x080154f4
 8005c7c:	080154fc 	.word	0x080154fc
 8005c80:	08015504 	.word	0x08015504

08005c84 <_ZN2UI6AlarmsEP11u8g2_struct>:
void Alarms(u8g2_t *u8g2) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f001 f9b3 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]
	do {

		u8g2_ClearBuffer(u8g2);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fbfd 	bl	8007496 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f899 	bl	8006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 8005ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8005d9c <_ZN2UI6AlarmsEP11u8g2_struct+0x118>)
 8005ca4:	7919      	ldrb	r1, [r3, #4]
 8005ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8005d9c <_ZN2UI6AlarmsEP11u8g2_struct+0x118>)
 8005ca8:	795b      	ldrb	r3, [r3, #5]
				imgcont::Alarms.img);
 8005caa:	4a3c      	ldr	r2, [pc, #240]	@ (8005d9c <_ZN2UI6AlarmsEP11u8g2_struct+0x118>)
 8005cac:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Alarms.w, imgcont::Alarms.h,
 8005cae:	9201      	str	r2, [sp, #4]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	2130      	movs	r1, #48	@ 0x30
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fb73 	bl	80073a4 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f002 f8a8 	bl	8007e16 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f002 fb32 	bl	8008332 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005cce:	4934      	ldr	r1, [pc, #208]	@ (8005da0 <_ZN2UI6AlarmsEP11u8g2_struct+0x11c>)
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f002 fa01 	bl	80080d8 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 51, 9);
 8005cd6:	2309      	movs	r3, #9
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	2333      	movs	r3, #51	@ 0x33
 8005cdc:	2211      	movs	r2, #17
 8005cde:	2102      	movs	r1, #2
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fba2 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Frequency:");
 8005ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8005da4 <_ZN2UI6AlarmsEP11u8g2_struct+0x120>)
 8005ce8:	2219      	movs	r2, #25
 8005cea:	2103      	movs	r1, #3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f002 f951 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 35, "Normal"); //Over // under
 8005cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8005da8 <_ZN2UI6AlarmsEP11u8g2_struct+0x124>)
 8005cf4:	2223      	movs	r2, #35	@ 0x23
 8005cf6:	2105      	movs	r1, #5
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f002 f94b 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8005cfe:	2309      	movs	r3, #9
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	232e      	movs	r3, #46	@ 0x2e
 8005d04:	2228      	movs	r2, #40	@ 0x28
 8005d06:	2102      	movs	r1, #2
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fb8e 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Overload:");
 8005d0e:	4b27      	ldr	r3, [pc, #156]	@ (8005dac <_ZN2UI6AlarmsEP11u8g2_struct+0x128>)
 8005d10:	2230      	movs	r2, #48	@ 0x30
 8005d12:	2103      	movs	r1, #3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f002 f93d 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Normal"); //Over under
 8005d1a:	4b23      	ldr	r3, [pc, #140]	@ (8005da8 <_ZN2UI6AlarmsEP11u8g2_struct+0x124>)
 8005d1c:	223a      	movs	r2, #58	@ 0x3a
 8005d1e:	2105      	movs	r1, #5
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f002 f937 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 8005d26:	2309      	movs	r3, #9
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	2333      	movs	r3, #51	@ 0x33
 8005d2c:	2211      	movs	r2, #17
 8005d2e:	2151      	movs	r1, #81	@ 0x51
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 fb7a 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "Phaseload:");
 8005d36:	4b1e      	ldr	r3, [pc, #120]	@ (8005db0 <_ZN2UI6AlarmsEP11u8g2_struct+0x12c>)
 8005d38:	2219      	movs	r2, #25
 8005d3a:	2152      	movs	r1, #82	@ 0x52
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 f929 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Normal"); //Over under
 8005d42:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <_ZN2UI6AlarmsEP11u8g2_struct+0x124>)
 8005d44:	2223      	movs	r2, #35	@ 0x23
 8005d46:	2152      	movs	r1, #82	@ 0x52
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f002 f923 	bl	8007f94 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fc14 	bl	800757c <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005d54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d58:	f001 f930 	bl	8006fbc <_ZN6button14get_eventTimedEm>
 8005d5c:	60b8      	str	r0, [r7, #8]
		if(btncodes == button::btncodes::cNONE )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <_ZN2UI6AlarmsEP11u8g2_struct+0xe8>
		  {
			scroll++;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	3301      	adds	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]
 8005d6a:	e001      	b.n	8005d70 <_ZN2UI6AlarmsEP11u8g2_struct+0xec>
		  }
		else
		{
			scroll = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <_ZN2UI6AlarmsEP11u8g2_struct+0xf8>
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d98c      	bls.n	8005c96 <_ZN2UI6AlarmsEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cEnter_BT)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b0a      	cmp	r3, #10
 8005d80:	d102      	bne.n	8005d88 <_ZN2UI6AlarmsEP11u8g2_struct+0x104>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005d82:	2006      	movs	r0, #6
 8005d84:	f001 f80a 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d902      	bls.n	8005d94 <_ZN2UI6AlarmsEP11u8g2_struct+0x110>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 8005d8e:	2032      	movs	r0, #50	@ 0x32
 8005d90:	f001 f932 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	}

}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08015ec8 	.word	0x08015ec8
 8005da0:	08016334 	.word	0x08016334
 8005da4:	0801550c 	.word	0x0801550c
 8005da8:	08015518 	.word	0x08015518
 8005dac:	08015520 	.word	0x08015520
 8005db0:	0801552c 	.word	0x0801552c

08005db4 <_ZN2UI7BatteryEP11u8g2_struct>:
void Battery(u8g2_t *u8g2) {
 8005db4:	b5b0      	push	{r4, r5, r7, lr}
 8005db6:	b098      	sub	sp, #96	@ 0x60
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f001 f91b 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	do {
		float soc;
		float curr;
		uint32_t startTime = getChargeTimestamp();
 8005dc8:	f7fb f982 	bl	80010d0 <_Z18getChargeTimestampv>
 8005dcc:	6538      	str	r0, [r7, #80]	@ 0x50
		uint32_t endTime = getDischargeTimestamp();
 8005dce:	f7fb f98b 	bl	80010e8 <_Z21getDischargeTimestampv>
 8005dd2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		char StringStartTime[20];
		char StringEndTime[20];

		if(startTime == 0)
 8005dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <_ZN2UI7BatteryEP11u8g2_struct+0x34>
		{
           std::sprintf(StringStartTime,"Null");
 8005dda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dde:	4963      	ldr	r1, [pc, #396]	@ (8005f6c <_ZN2UI7BatteryEP11u8g2_struct+0x1b8>)
 8005de0:	4618      	mov	r0, r3
 8005de2:	f00c fd93 	bl	801290c <siprintf>
 8005de6:	e006      	b.n	8005df6 <_ZN2UI7BatteryEP11u8g2_struct+0x42>
		}
		else
		{
			stmRTC.epochToTimeString(startTime, +5, StringStartTime);
 8005de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dec:	2205      	movs	r2, #5
 8005dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005df0:	485f      	ldr	r0, [pc, #380]	@ (8005f70 <_ZN2UI7BatteryEP11u8g2_struct+0x1bc>)
 8005df2:	f7ff f98f 	bl	8005114 <_ZN10System_rtc6stmRTC17epochToTimeStringEmaPc>
		}

		if(endTime == 0)
 8005df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <_ZN2UI7BatteryEP11u8g2_struct+0x56>
		{
			  std::sprintf(StringEndTime,"Null");
 8005dfc:	f107 0318 	add.w	r3, r7, #24
 8005e00:	495a      	ldr	r1, [pc, #360]	@ (8005f6c <_ZN2UI7BatteryEP11u8g2_struct+0x1b8>)
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00c fd82 	bl	801290c <siprintf>
 8005e08:	e006      	b.n	8005e18 <_ZN2UI7BatteryEP11u8g2_struct+0x64>
		}
		else
		{
			stmRTC.epochToTimeString(startTime, +5, StringEndTime);
 8005e0a:	f107 0318 	add.w	r3, r7, #24
 8005e0e:	2205      	movs	r2, #5
 8005e10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e12:	4857      	ldr	r0, [pc, #348]	@ (8005f70 <_ZN2UI7BatteryEP11u8g2_struct+0x1bc>)
 8005e14:	f7ff f97e 	bl	8005114 <_ZN10System_rtc6stmRTC17epochToTimeStringEmaPc>
		}

		DCCurrentSensor.getCurrent(&curr);
 8005e18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4855      	ldr	r0, [pc, #340]	@ (8005f74 <_ZN2UI7BatteryEP11u8g2_struct+0x1c0>)
 8005e20:	f7fe f87e 	bl	8003f20 <_ZN13sensor_DcHall6DcHall10getCurrentEPf>


		u8g2_ClearBuffer(u8g2);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fb36 	bl	8007496 <u8g2_ClearBuffer>

		soc = SOC::getSoCVal();
 8005e2a:	f7fd ffbd 	bl	8003da8 <_ZN3SOC9getSoCValEv>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e38:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

		char currentA[10];

		std::sprintf(currentA,"%.01f%%/%.02f",soc,curr);
 8005e3c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005e3e:	f7fa fb83 	bl	8000548 <__aeabi_f2d>
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fa fb7d 	bl	8000548 <__aeabi_f2d>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	f107 000c 	add.w	r0, r7, #12
 8005e56:	e9cd 2300 	strd	r2, r3, [sp]
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	4946      	ldr	r1, [pc, #280]	@ (8005f78 <_ZN2UI7BatteryEP11u8g2_struct+0x1c4>)
 8005e60:	f00c fd54 	bl	801290c <siprintf>


		UI::UI_helper::common_iconsMain(u8g2);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 ffb5 	bl	8006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 8005e6a:	4b44      	ldr	r3, [pc, #272]	@ (8005f7c <_ZN2UI7BatteryEP11u8g2_struct+0x1c8>)
 8005e6c:	7919      	ldrb	r1, [r3, #4]
 8005e6e:	4b43      	ldr	r3, [pc, #268]	@ (8005f7c <_ZN2UI7BatteryEP11u8g2_struct+0x1c8>)
 8005e70:	795b      	ldrb	r3, [r3, #5]
				imgcont::Battery.img);
 8005e72:	4a42      	ldr	r2, [pc, #264]	@ (8005f7c <_ZN2UI7BatteryEP11u8g2_struct+0x1c8>)
 8005e74:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Battery.w, imgcont::Battery.h,
 8005e76:	9201      	str	r2, [sp, #4]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	2130      	movs	r1, #48	@ 0x30
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 fa8f 	bl	80073a4 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005e86:	2101      	movs	r1, #1
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 ffc4 	bl	8007e16 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005e8e:	2102      	movs	r1, #2
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 fa4e 	bl	8008332 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005e96:	493a      	ldr	r1, [pc, #232]	@ (8005f80 <_ZN2UI7BatteryEP11u8g2_struct+0x1cc>)
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f002 f91d 	bl	80080d8 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 8005e9e:	2309      	movs	r3, #9
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2329      	movs	r3, #41	@ 0x29
 8005ea4:	2211      	movs	r2, #17
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 fabe 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Percent:");
 8005eae:	4b35      	ldr	r3, [pc, #212]	@ (8005f84 <_ZN2UI7BatteryEP11u8g2_struct+0x1d0>)
 8005eb0:	2219      	movs	r2, #25
 8005eb2:	2103      	movs	r1, #3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f002 f86d 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 1, 35, currentA);
 8005eba:	f107 030c 	add.w	r3, r7, #12
 8005ebe:	2223      	movs	r2, #35	@ 0x23
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f002 f866 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8005ec8:	2309      	movs	r3, #9
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	232e      	movs	r3, #46	@ 0x2e
 8005ece:	2228      	movs	r2, #40	@ 0x28
 8005ed0:	2102      	movs	r1, #2
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 faa9 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "ChrgTime:");
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f88 <_ZN2UI7BatteryEP11u8g2_struct+0x1d4>)
 8005eda:	2230      	movs	r2, #48	@ 0x30
 8005edc:	2103      	movs	r1, #3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f002 f858 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, StringStartTime);
 8005ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ee8:	223a      	movs	r2, #58	@ 0x3a
 8005eea:	2105      	movs	r1, #5
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f002 f851 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 81, 17, 51, 9);
 8005ef2:	2309      	movs	r3, #9
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2333      	movs	r3, #51	@ 0x33
 8005ef8:	2211      	movs	r2, #17
 8005efa:	2151      	movs	r1, #81	@ 0x51
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 fa94 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 82, 25, "DchrgTime:");
 8005f02:	4b22      	ldr	r3, [pc, #136]	@ (8005f8c <_ZN2UI7BatteryEP11u8g2_struct+0x1d8>)
 8005f04:	2219      	movs	r2, #25
 8005f06:	2152      	movs	r1, #82	@ 0x52
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 f843 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, StringEndTime);
 8005f0e:	f107 0318 	add.w	r3, r7, #24
 8005f12:	2223      	movs	r2, #35	@ 0x23
 8005f14:	2152      	movs	r1, #82	@ 0x52
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 f83c 	bl	8007f94 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fb2d 	bl	800757c <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8005f22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f26:	f001 f849 	bl	8006fbc <_ZN6button14get_eventTimedEm>
 8005f2a:	6478      	str	r0, [r7, #68]	@ 0x44

		if(btncodes == button::btncodes::cNONE )
 8005f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <_ZN2UI7BatteryEP11u8g2_struct+0x184>
		  {
			//scroll++;
		  }
		else
		{
			scroll = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 8005f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <_ZN2UI7BatteryEP11u8g2_struct+0x194>
 8005f3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	f67f af40 	bls.w	8005dc8 <_ZN2UI7BatteryEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT)
 8005f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f4a:	2b0a      	cmp	r3, #10
 8005f4c:	d102      	bne.n	8005f54 <_ZN2UI7BatteryEP11u8g2_struct+0x1a0>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 8005f4e:	2006      	movs	r0, #6
 8005f50:	f000 ff24 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8005f54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d902      	bls.n	8005f62 <_ZN2UI7BatteryEP11u8g2_struct+0x1ae>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 8005f5c:	2032      	movs	r0, #50	@ 0x32
 8005f5e:	f001 f84b 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	}

}
 8005f62:	bf00      	nop
 8005f64:	3758      	adds	r7, #88	@ 0x58
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bdb0      	pop	{r4, r5, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08015538 	.word	0x08015538
 8005f70:	20001978 	.word	0x20001978
 8005f74:	20001a54 	.word	0x20001a54
 8005f78:	08015540 	.word	0x08015540
 8005f7c:	08015ec0 	.word	0x08015ec0
 8005f80:	08016334 	.word	0x08016334
 8005f84:	08015550 	.word	0x08015550
 8005f88:	0801555c 	.word	0x0801555c
 8005f8c:	08015568 	.word	0x08015568

08005f90 <_ZN2UI6sourceEP11u8g2_struct>:
void source(u8g2_t *u8g2) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f001 f82d 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
	do {
		u8g2_ClearBuffer(u8g2);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fa77 	bl	8007496 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 ff13 	bl	8006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 8005fae:	4b3e      	ldr	r3, [pc, #248]	@ (80060a8 <_ZN2UI6sourceEP11u8g2_struct+0x118>)
 8005fb0:	7919      	ldrb	r1, [r3, #4]
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80060a8 <_ZN2UI6sourceEP11u8g2_struct+0x118>)
 8005fb4:	795b      	ldrb	r3, [r3, #5]
				imgcont::Source.img);
 8005fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80060a8 <_ZN2UI6sourceEP11u8g2_struct+0x118>)
 8005fb8:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Source.w, imgcont::Source.h,
 8005fba:	9201      	str	r2, [sp, #4]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	2130      	movs	r1, #48	@ 0x30
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 f9ed 	bl	80073a4 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8005fca:	2101      	movs	r1, #1
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 ff22 	bl	8007e16 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f002 f9ac 	bl	8008332 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8005fda:	4934      	ldr	r1, [pc, #208]	@ (80060ac <_ZN2UI6sourceEP11u8g2_struct+0x11c>)
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f002 f87b 	bl	80080d8 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 8005fe2:	2309      	movs	r3, #9
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2329      	movs	r3, #41	@ 0x29
 8005fe8:	2211      	movs	r2, #17
 8005fea:	2102      	movs	r1, #2
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 fa1c 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Battery:");
 8005ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80060b0 <_ZN2UI6sourceEP11u8g2_struct+0x120>)
 8005ff4:	2219      	movs	r2, #25
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 ffcb 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, "Active");  //Off
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80060b4 <_ZN2UI6sourceEP11u8g2_struct+0x124>)
 8006000:	2223      	movs	r2, #35	@ 0x23
 8006002:	2102      	movs	r1, #2
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 ffc5 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 51, 9);
 800600a:	2309      	movs	r3, #9
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	2333      	movs	r3, #51	@ 0x33
 8006010:	2228      	movs	r2, #40	@ 0x28
 8006012:	2102      	movs	r1, #2
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fa08 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Generator:");
 800601a:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <_ZN2UI6sourceEP11u8g2_struct+0x128>)
 800601c:	2230      	movs	r2, #48	@ 0x30
 800601e:	2103      	movs	r1, #3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 ffb7 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "Idle"); //running
 8006026:	4b25      	ldr	r3, [pc, #148]	@ (80060bc <_ZN2UI6sourceEP11u8g2_struct+0x12c>)
 8006028:	223a      	movs	r2, #58	@ 0x3a
 800602a:	2105      	movs	r1, #5
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 ffb1 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 31, 9);
 8006032:	2309      	movs	r3, #9
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	231f      	movs	r3, #31
 8006038:	2211      	movs	r2, #17
 800603a:	2154      	movs	r1, #84	@ 0x54
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f9f4 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Solar:");
 8006042:	4b1f      	ldr	r3, [pc, #124]	@ (80060c0 <_ZN2UI6sourceEP11u8g2_struct+0x130>)
 8006044:	2219      	movs	r2, #25
 8006046:	2155      	movs	r1, #85	@ 0x55
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 ffa3 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 82, 35, "Standby"); //Online
 800604e:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <_ZN2UI6sourceEP11u8g2_struct+0x134>)
 8006050:	2223      	movs	r2, #35	@ 0x23
 8006052:	2152      	movs	r1, #82	@ 0x52
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 ff9d 	bl	8007f94 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fa8e 	bl	800757c <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8006060:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006064:	f000 ffaa 	bl	8006fbc <_ZN6button14get_eventTimedEm>
 8006068:	60b8      	str	r0, [r7, #8]
		if(btncodes == button::btncodes::cNONE )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <_ZN2UI6sourceEP11u8g2_struct+0xe8>
		  {
			scroll++;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	3301      	adds	r3, #1
 8006074:	73fb      	strb	r3, [r7, #15]
 8006076:	e001      	b.n	800607c <_ZN2UI6sourceEP11u8g2_struct+0xec>
		  }
		else
		{
			scroll = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
		}


	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <_ZN2UI6sourceEP11u8g2_struct+0xf8>
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d98c      	bls.n	8005fa2 <_ZN2UI6sourceEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cEnter_BT)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b0a      	cmp	r3, #10
 800608c:	d102      	bne.n	8006094 <_ZN2UI6sourceEP11u8g2_struct+0x104>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 800608e:	2006      	movs	r0, #6
 8006090:	f000 fe84 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d902      	bls.n	80060a0 <_ZN2UI6sourceEP11u8g2_struct+0x110>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 800609a:	2032      	movs	r0, #50	@ 0x32
 800609c:	f000 ffac 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	}

}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	08015eb8 	.word	0x08015eb8
 80060ac:	08016334 	.word	0x08016334
 80060b0:	08015574 	.word	0x08015574
 80060b4:	08015580 	.word	0x08015580
 80060b8:	08015588 	.word	0x08015588
 80060bc:	08015594 	.word	0x08015594
 80060c0:	0801559c 	.word	0x0801559c
 80060c4:	080155a4 	.word	0x080155a4

080060c8 <_ZN2UI7networkEP11u8g2_struct>:
void network(u8g2_t *u8g2) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 80060d0:	2000      	movs	r0, #0
 80060d2:	f000 ff91 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
	do {

		u8g2_ClearBuffer(u8g2);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 f9db 	bl	8007496 <u8g2_ClearBuffer>
		UI::UI_helper::common_iconsMain(u8g2);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fe77 	bl	8006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>

		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 80060e6:	4b3e      	ldr	r3, [pc, #248]	@ (80061e0 <_ZN2UI7networkEP11u8g2_struct+0x118>)
 80060e8:	7919      	ldrb	r1, [r3, #4]
 80060ea:	4b3d      	ldr	r3, [pc, #244]	@ (80061e0 <_ZN2UI7networkEP11u8g2_struct+0x118>)
 80060ec:	795b      	ldrb	r3, [r3, #5]
				imgcont::Network.img);
 80060ee:	4a3c      	ldr	r2, [pc, #240]	@ (80061e0 <_ZN2UI7networkEP11u8g2_struct+0x118>)
 80060f0:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 48, 2, imgcont::Network.w, imgcont::Network.h,
 80060f2:	9201      	str	r2, [sp, #4]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	460b      	mov	r3, r1
 80060f8:	2202      	movs	r2, #2
 80060fa:	2130      	movs	r1, #48	@ 0x30
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f951 	bl	80073a4 <u8g2_DrawXBM>

		u8g2_SetFontMode(u8g2, 1);
 8006102:	2101      	movs	r1, #1
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fe86 	bl	8007e16 <u8g2_SetFontMode>
		u8g2_SetDrawColor(u8g2, 2);
 800610a:	2102      	movs	r1, #2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f002 f910 	bl	8008332 <u8g2_SetDrawColor>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006112:	4934      	ldr	r1, [pc, #208]	@ (80061e4 <_ZN2UI7networkEP11u8g2_struct+0x11c>)
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 ffdf 	bl	80080d8 <u8g2_SetFont>

		u8g2_DrawBox(u8g2, 2, 17, 41, 9);
 800611a:	2309      	movs	r3, #9
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2329      	movs	r3, #41	@ 0x29
 8006120:	2211      	movs	r2, #17
 8006122:	2102      	movs	r1, #2
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 f980 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 25, "Network:");
 800612a:	4b2f      	ldr	r3, [pc, #188]	@ (80061e8 <_ZN2UI7networkEP11u8g2_struct+0x120>)
 800612c:	2219      	movs	r2, #25
 800612e:	2103      	movs	r1, #3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 ff2f 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 2, 35, "Connected");
 8006136:	4b2d      	ldr	r3, [pc, #180]	@ (80061ec <_ZN2UI7networkEP11u8g2_struct+0x124>)
 8006138:	2223      	movs	r2, #35	@ 0x23
 800613a:	2102      	movs	r1, #2
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 ff29 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 2, 40, 46, 9);
 8006142:	2309      	movs	r3, #9
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	232e      	movs	r3, #46	@ 0x2e
 8006148:	2228      	movs	r2, #40	@ 0x28
 800614a:	2102      	movs	r1, #2
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f96c 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 3, 48, "Signal-Q:");
 8006152:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <_ZN2UI7networkEP11u8g2_struct+0x128>)
 8006154:	2230      	movs	r2, #48	@ 0x30
 8006156:	2103      	movs	r1, #3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 ff1b 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 58, "-50dBm");
 800615e:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <_ZN2UI7networkEP11u8g2_struct+0x12c>)
 8006160:	223a      	movs	r2, #58	@ 0x3a
 8006162:	2105      	movs	r1, #5
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 ff15 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawBox(u8g2, 84, 17, 26, 9);
 800616a:	2309      	movs	r3, #9
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	231a      	movs	r3, #26
 8006170:	2211      	movs	r2, #17
 8006172:	2154      	movs	r1, #84	@ 0x54
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 f958 	bl	800742a <u8g2_DrawBox>
		u8g2_DrawStr(u8g2, 85, 25, "Data:");
 800617a:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <_ZN2UI7networkEP11u8g2_struct+0x130>)
 800617c:	2219      	movs	r2, #25
 800617e:	2155      	movs	r1, #85	@ 0x55
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 ff07 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 83, 35, "Discon");
 8006186:	4b1d      	ldr	r3, [pc, #116]	@ (80061fc <_ZN2UI7networkEP11u8g2_struct+0x134>)
 8006188:	2223      	movs	r2, #35	@ 0x23
 800618a:	2153      	movs	r1, #83	@ 0x53
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 ff01 	bl	8007f94 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f9f2 	bl	800757c <u8g2_SendBuffer>
		btncodes = button::get_eventTimed(1000);
 8006198:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800619c:	f000 ff0e 	bl	8006fbc <_ZN6button14get_eventTimedEm>
 80061a0:	60b8      	str	r0, [r7, #8]
		if(btncodes == button::btncodes::cNONE )
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <_ZN2UI7networkEP11u8g2_struct+0xe8>
		  {
			scroll++;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3301      	adds	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e001      	b.n	80061b4 <_ZN2UI7networkEP11u8g2_struct+0xec>
		  }
		else
		{
			scroll = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]
		}

	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <_ZN2UI7networkEP11u8g2_struct+0xf8>
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d98c      	bls.n	80060da <_ZN2UI7networkEP11u8g2_struct+0x12>

	if(btncodes == button::btncodes::cEnter_BT)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b0a      	cmp	r3, #10
 80061c4:	d102      	bne.n	80061cc <_ZN2UI7networkEP11u8g2_struct+0x104>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80061c6:	2006      	movs	r0, #6
 80061c8:	f000 fde8 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d902      	bls.n	80061d8 <_ZN2UI7networkEP11u8g2_struct+0x110>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 80061d2:	2032      	movs	r0, #50	@ 0x32
 80061d4:	f000 ff10 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	}
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	08015eb0 	.word	0x08015eb0
 80061e4:	08016334 	.word	0x08016334
 80061e8:	080155ac 	.word	0x080155ac
 80061ec:	080155b8 	.word	0x080155b8
 80061f0:	080155c4 	.word	0x080155c4
 80061f4:	080155d0 	.word	0x080155d0
 80061f8:	080155d8 	.word	0x080155d8
 80061fc:	080155e0 	.word	0x080155e0

08006200 <_ZN2UI5powerEP11u8g2_struct>:

void power(u8g2_t *u8g2) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b0ae      	sub	sp, #184	@ 0xb8
 8006204:	af02      	add	r7, sp, #8
 8006206:	6078      	str	r0, [r7, #4]

	enum button::btncodes btncodes;
	button::resetCode(button::btncodes::cNONE);
 8006208:	2000      	movs	r0, #0
 800620a:	f000 fef5 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	uint8_t scroll = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	sensor_pzem::PZEM_004T::PZEM PZEM2_Data;
	sensor_pzem::PZEM_004T::PZEM PZEM3_Data;

	do {

		u8g2_ClearBuffer(u8g2);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f93e 	bl	8007496 <u8g2_ClearBuffer>

		PZEM1.read(&PZEM1_Data);
 800621a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800621e:	4619      	mov	r1, r3
 8006220:	486f      	ldr	r0, [pc, #444]	@ (80063e0 <_ZN2UI5powerEP11u8g2_struct+0x1e0>)
 8006222:	f7fe fb9d 	bl	8004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
		PZEM2.read(&PZEM2_Data);
 8006226:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800622a:	4619      	mov	r1, r3
 800622c:	486d      	ldr	r0, [pc, #436]	@ (80063e4 <_ZN2UI5powerEP11u8g2_struct+0x1e4>)
 800622e:	f7fe fb97 	bl	8004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
		PZEM3.read(&PZEM3_Data);
 8006232:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006236:	4619      	mov	r1, r3
 8006238:	486b      	ldr	r0, [pc, #428]	@ (80063e8 <_ZN2UI5powerEP11u8g2_struct+0x1e8>)
 800623a:	f7fe fb91 	bl	8004960 <_ZN11sensor_pzem9PZEM_004T4readEPNS0_4PZEME>
        char V_2[10];
        char I_2[10];
        char V_3[10];
        char I_3[10];

        std::sprintf(V_1,"%.1f",PZEM1_Data.voltage);
 800623e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006242:	4618      	mov	r0, r3
 8006244:	f7fa f980 	bl	8000548 <__aeabi_f2d>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8006250:	4966      	ldr	r1, [pc, #408]	@ (80063ec <_ZN2UI5powerEP11u8g2_struct+0x1ec>)
 8006252:	f00c fb5b 	bl	801290c <siprintf>
        std::sprintf(I_1,"%.1f",PZEM1_Data.current);
 8006256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800625a:	4618      	mov	r0, r3
 800625c:	f7fa f974 	bl	8000548 <__aeabi_f2d>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8006268:	4960      	ldr	r1, [pc, #384]	@ (80063ec <_ZN2UI5powerEP11u8g2_struct+0x1ec>)
 800626a:	f00c fb4f 	bl	801290c <siprintf>
        std::sprintf(V_2,"%.1f",PZEM2_Data.power);
 800626e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa f969 	bl	8000548 <__aeabi_f2d>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800627e:	495b      	ldr	r1, [pc, #364]	@ (80063ec <_ZN2UI5powerEP11u8g2_struct+0x1ec>)
 8006280:	f00c fb44 	bl	801290c <siprintf>
        std::sprintf(I_2,"%.1f",PZEM2_Data.current);
 8006284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa f95e 	bl	8000548 <__aeabi_f2d>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006294:	4955      	ldr	r1, [pc, #340]	@ (80063ec <_ZN2UI5powerEP11u8g2_struct+0x1ec>)
 8006296:	f00c fb39 	bl	801290c <siprintf>
        std::sprintf(V_3,"%.1f",PZEM3_Data.voltage);
 800629a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f953 	bl	8000548 <__aeabi_f2d>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	f107 0018 	add.w	r0, r7, #24
 80062aa:	4950      	ldr	r1, [pc, #320]	@ (80063ec <_ZN2UI5powerEP11u8g2_struct+0x1ec>)
 80062ac:	f00c fb2e 	bl	801290c <siprintf>
        std::sprintf(I_3,"%.1f",PZEM3_Data.current);
 80062b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fa f948 	bl	8000548 <__aeabi_f2d>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	f107 000c 	add.w	r0, r7, #12
 80062c0:	494a      	ldr	r1, [pc, #296]	@ (80063ec <_ZN2UI5powerEP11u8g2_struct+0x1ec>)
 80062c2:	f00c fb23 	bl	801290c <siprintf>


		UI::UI_helper::common_iconsMain(u8g2);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fd84 	bl	8006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>
		u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 80062cc:	4948      	ldr	r1, [pc, #288]	@ (80063f0 <_ZN2UI5powerEP11u8g2_struct+0x1f0>)
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f001 ff02 	bl	80080d8 <u8g2_SetFont>

		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 80062d4:	4b47      	ldr	r3, [pc, #284]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 80062d6:	7919      	ldrb	r1, [r3, #4]
 80062d8:	4b46      	ldr	r3, [pc, #280]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 80062da:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 80062dc:	4a45      	ldr	r2, [pc, #276]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 80062de:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 10, 16, imgcont::Phase.w, imgcont::Phase.h,
 80062e0:	9201      	str	r2, [sp, #4]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	460b      	mov	r3, r1
 80062e6:	2210      	movs	r2, #16
 80062e8:	210a      	movs	r1, #10
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 f85a 	bl	80073a4 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 5, 38, V_1);
 80062f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80062f4:	2226      	movs	r2, #38	@ 0x26
 80062f6:	2105      	movs	r1, #5
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fe4b 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 5, 46, I_1);
 80062fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006302:	222e      	movs	r2, #46	@ 0x2e
 8006304:	2105      	movs	r1, #5
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fe44 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 800630c:	4b39      	ldr	r3, [pc, #228]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 800630e:	7919      	ldrb	r1, [r3, #4]
 8006310:	4b38      	ldr	r3, [pc, #224]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 8006312:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 8006314:	4a37      	ldr	r2, [pc, #220]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 8006316:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 54, 10, imgcont::Phase.w, imgcont::Phase.h,
 8006318:	9201      	str	r2, [sp, #4]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	460b      	mov	r3, r1
 800631e:	220a      	movs	r2, #10
 8006320:	2136      	movs	r1, #54	@ 0x36
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f83e 	bl	80073a4 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 50, 32, V_2);
 8006328:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800632c:	2220      	movs	r2, #32
 800632e:	2132      	movs	r1, #50	@ 0x32
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fe2f 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 50, 40, I_2);
 8006336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800633a:	2228      	movs	r2, #40	@ 0x28
 800633c:	2132      	movs	r1, #50	@ 0x32
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fe28 	bl	8007f94 <u8g2_DrawStr>

		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 8006344:	4b2b      	ldr	r3, [pc, #172]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 8006346:	7919      	ldrb	r1, [r3, #4]
 8006348:	4b2a      	ldr	r3, [pc, #168]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 800634a:	795b      	ldrb	r3, [r3, #5]
				imgcont::Phase.img);
 800634c:	4a29      	ldr	r2, [pc, #164]	@ (80063f4 <_ZN2UI5powerEP11u8g2_struct+0x1f4>)
 800634e:	6812      	ldr	r2, [r2, #0]
		u8g2_DrawXBM(u8g2, 100, 16, imgcont::Phase.w, imgcont::Phase.h,
 8006350:	9201      	str	r2, [sp, #4]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	460b      	mov	r3, r1
 8006356:	2210      	movs	r2, #16
 8006358:	2164      	movs	r1, #100	@ 0x64
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 f822 	bl	80073a4 <u8g2_DrawXBM>
		u8g2_DrawStr(u8g2, 96, 38, V_3);
 8006360:	f107 0318 	add.w	r3, r7, #24
 8006364:	2226      	movs	r2, #38	@ 0x26
 8006366:	2160      	movs	r1, #96	@ 0x60
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fe13 	bl	8007f94 <u8g2_DrawStr>
		u8g2_DrawStr(u8g2, 96, 46, I_3);
 800636e:	f107 030c 	add.w	r3, r7, #12
 8006372:	222e      	movs	r2, #46	@ 0x2e
 8006374:	2160      	movs	r1, #96	@ 0x60
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fe0c 	bl	8007f94 <u8g2_DrawStr>

		u8g2_SendBuffer(u8g2);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f8fd 	bl	800757c <u8g2_SendBuffer>

		btncodes = button::get_eventTimed(1000);
 8006382:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006386:	f000 fe19 	bl	8006fbc <_ZN6button14get_eventTimedEm>
 800638a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
		if(btncodes == button::btncodes::cNONE )
 800638e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d105      	bne.n	80063a2 <_ZN2UI5powerEP11u8g2_struct+0x1a2>
		  {
			scroll++;
 8006396:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800639a:	3301      	adds	r3, #1
 800639c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80063a0:	e002      	b.n	80063a8 <_ZN2UI5powerEP11u8g2_struct+0x1a8>
		  }
		else
		{
			scroll = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		}

	} while (btncodes == button::btncodes::cNONE && scroll < scrollTiming);
 80063a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <_ZN2UI5powerEP11u8g2_struct+0x1ba>
 80063b0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f67f af2d 	bls.w	8006214 <_ZN2UI5powerEP11u8g2_struct+0x14>

	if(btncodes == button::btncodes::cEnter_BT )
 80063ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063be:	2b0a      	cmp	r3, #10
 80063c0:	d102      	bne.n	80063c8 <_ZN2UI5powerEP11u8g2_struct+0x1c8>
	{
		UI::UI_helper::set_UIcode(MenuNo::Settings);
 80063c2:	2006      	movs	r0, #6
 80063c4:	f000 fcea 	bl	8006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>
	}

	if(scroll >= scrollTiming)
 80063c8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d902      	bls.n	80063d6 <_ZN2UI5powerEP11u8g2_struct+0x1d6>
	{


		button::resetCode( button::btncodes::cRGHT_BT);
 80063d0:	2032      	movs	r0, #50	@ 0x32
 80063d2:	f000 fe11 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
	}


}
 80063d6:	bf00      	nop
 80063d8:	37b0      	adds	r7, #176	@ 0xb0
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200019dc 	.word	0x200019dc
 80063e4:	20001a04 	.word	0x20001a04
 80063e8:	20001a2c 	.word	0x20001a2c
 80063ec:	080155e8 	.word	0x080155e8
 80063f0:	08016334 	.word	0x08016334
 80063f4:	08015ea8 	.word	0x08015ea8

080063f8 <_ZN2UI4loopEP11u8g2_struct>:

void loop(u8g2_t *u8g2) {
 80063f8:	b590      	push	{r4, r7, lr}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	uint16_t index;
	if (CurrMenu == MenuNo::None) {
 8006400:	4b81      	ldr	r3, [pc, #516]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b09      	cmp	r3, #9
 8006406:	d102      	bne.n	800640e <_ZN2UI4loopEP11u8g2_struct+0x16>
		CurrMenu =  MenuNo::Battery;
 8006408:	4b7f      	ldr	r3, [pc, #508]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 800640a:	2203      	movs	r2, #3
 800640c:	601a      	str	r2, [r3, #0]
	}

	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 800640e:	2300      	movs	r3, #0
 8006410:	81fb      	strh	r3, [r7, #14]
 8006412:	e00e      	b.n	8006432 <_ZN2UI4loopEP11u8g2_struct+0x3a>
			index++) {
		if (CurrMenu == MenuArray[index].MenuNo) // check if this menu is found ?
 8006414:	89fa      	ldrh	r2, [r7, #14]
 8006416:	497d      	ldr	r1, [pc, #500]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006418:	4613      	mov	r3, r2
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b78      	ldr	r3, [pc, #480]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d006      	beq.n	800643a <_ZN2UI4loopEP11u8g2_struct+0x42>
	for (index = 0; index < (sizeof(MenuArray) / sizeof(MenuArray[0]));
 800642c:	89fb      	ldrh	r3, [r7, #14]
 800642e:	3301      	adds	r3, #1
 8006430:	81fb      	strh	r3, [r7, #14]
 8006432:	89fb      	ldrh	r3, [r7, #14]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d9ed      	bls.n	8006414 <_ZN2UI4loopEP11u8g2_struct+0x1c>
 8006438:	e000      	b.n	800643c <_ZN2UI4loopEP11u8g2_struct+0x44>
				{
			break;
 800643a:	bf00      	nop
		}
	}

	if (index < (sizeof(MenuArray) / sizeof(MenuArray[0]))) {
 800643c:	89fb      	ldrh	r3, [r7, #14]
 800643e:	2b08      	cmp	r3, #8
 8006440:	f200 80d9 	bhi.w	80065f6 <_ZN2UI4loopEP11u8g2_struct+0x1fe>
		std::memset(UI::display_buffer, 0, sizeof(UI::display_buffer));
 8006444:	22ff      	movs	r2, #255	@ 0xff
 8006446:	2100      	movs	r1, #0
 8006448:	4871      	ldr	r0, [pc, #452]	@ (8006610 <_ZN2UI4loopEP11u8g2_struct+0x218>)
 800644a:	f00c fac2 	bl	80129d2 <memset>
		MenuArray[index].function(u8g2);
 800644e:	89fa      	ldrh	r2, [r7, #14]
 8006450:	496e      	ldr	r1, [pc, #440]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006452:	4613      	mov	r3, r2
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	3304      	adds	r3, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3

		/*Add buttons related logic*/

		switch (button::get_code()) {
 8006464:	f000 fdbc 	bl	8006fe0 <_ZN6button8get_codeEv>
 8006468:	4603      	mov	r3, r0
 800646a:	2b0a      	cmp	r3, #10
 800646c:	d04e      	beq.n	800650c <_ZN2UI4loopEP11u8g2_struct+0x114>
 800646e:	2b0a      	cmp	r3, #10
 8006470:	f2c0 80c5 	blt.w	80065fe <_ZN2UI4loopEP11u8g2_struct+0x206>
 8006474:	2b3c      	cmp	r3, #60	@ 0x3c
 8006476:	f300 80c2 	bgt.w	80065fe <_ZN2UI4loopEP11u8g2_struct+0x206>
 800647a:	2b1e      	cmp	r3, #30
 800647c:	f2c0 80bf 	blt.w	80065fe <_ZN2UI4loopEP11u8g2_struct+0x206>
 8006480:	3b1e      	subs	r3, #30
 8006482:	2b1e      	cmp	r3, #30
 8006484:	f200 80bb 	bhi.w	80065fe <_ZN2UI4loopEP11u8g2_struct+0x206>
 8006488:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <_ZN2UI4loopEP11u8g2_struct+0x98>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	08006597 	.word	0x08006597
 8006494:	080065ff 	.word	0x080065ff
 8006498:	080065ff 	.word	0x080065ff
 800649c:	080065ff 	.word	0x080065ff
 80064a0:	080065ff 	.word	0x080065ff
 80064a4:	080065ff 	.word	0x080065ff
 80064a8:	080065ff 	.word	0x080065ff
 80064ac:	080065ff 	.word	0x080065ff
 80064b0:	080065ff 	.word	0x080065ff
 80064b4:	080065ff 	.word	0x080065ff
 80064b8:	080065af 	.word	0x080065af
 80064bc:	080065ff 	.word	0x080065ff
 80064c0:	080065ff 	.word	0x080065ff
 80064c4:	080065ff 	.word	0x080065ff
 80064c8:	080065ff 	.word	0x080065ff
 80064cc:	080065ff 	.word	0x080065ff
 80064d0:	080065ff 	.word	0x080065ff
 80064d4:	080065ff 	.word	0x080065ff
 80064d8:	080065ff 	.word	0x080065ff
 80064dc:	080065ff 	.word	0x080065ff
 80064e0:	080065c7 	.word	0x080065c7
 80064e4:	080065ff 	.word	0x080065ff
 80064e8:	080065ff 	.word	0x080065ff
 80064ec:	080065ff 	.word	0x080065ff
 80064f0:	080065ff 	.word	0x080065ff
 80064f4:	080065ff 	.word	0x080065ff
 80064f8:	080065ff 	.word	0x080065ff
 80064fc:	080065ff 	.word	0x080065ff
 8006500:	080065ff 	.word	0x080065ff
 8006504:	080065ff 	.word	0x080065ff
 8006508:	080065df 	.word	0x080065df
		case button::btncodes::cEnter_BT: {
			int i = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	60bb      	str	r3, [r7, #8]
			for (i = 0; i < TotalEnterIndexes; i++) {
 8006510:	2300      	movs	r3, #0
 8006512:	60bb      	str	r3, [r7, #8]
 8006514:	e03a      	b.n	800658c <_ZN2UI4loopEP11u8g2_struct+0x194>

				if (MenuArray[index].Enter[i] == MenuNo::None) {
 8006516:	89fa      	ldrh	r2, [r7, #14]
 8006518:	493c      	ldr	r1, [pc, #240]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	4413      	add	r3, r2
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	3302      	adds	r3, #2
 8006526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800652a:	2b09      	cmp	r3, #9
 800652c:	d10a      	bne.n	8006544 <_ZN2UI4loopEP11u8g2_struct+0x14c>
					CurrMenu = MenuArray[index].MenuNo; //stay in our own menu
 800652e:	89fa      	ldrh	r2, [r7, #14]
 8006530:	4936      	ldr	r1, [pc, #216]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006532:	4613      	mov	r3, r2
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a32      	ldr	r2, [pc, #200]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006540:	6013      	str	r3, [r2, #0]
					break;
 8006542:	e027      	b.n	8006594 <_ZN2UI4loopEP11u8g2_struct+0x19c>
				}

				if (MenuArray[index].Enter[i] == UI::UI_helper::get_UIcode())
 8006544:	89fa      	ldrh	r2, [r7, #14]
 8006546:	4931      	ldr	r1, [pc, #196]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006548:	4613      	mov	r3, r2
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	4413      	add	r3, r2
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	3302      	adds	r3, #2
 8006554:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8006558:	f000 fc30 	bl	8006dbc <_ZN2UI9UI_helper10get_UIcodeEv>
 800655c:	4603      	mov	r3, r0
 800655e:	429c      	cmp	r4, r3
 8006560:	bf0c      	ite	eq
 8006562:	2301      	moveq	r3, #1
 8006564:	2300      	movne	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <_ZN2UI4loopEP11u8g2_struct+0x18e>
				{
					CurrMenu = MenuArray[index].Enter[i];
 800656c:	89fa      	ldrh	r2, [r7, #14]
 800656e:	4927      	ldr	r1, [pc, #156]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 8006570:	4613      	mov	r3, r2
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	4413      	add	r3, r2
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4413      	add	r3, r2
 800657a:	3302      	adds	r3, #2
 800657c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006580:	4a21      	ldr	r2, [pc, #132]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 8006582:	6013      	str	r3, [r2, #0]
					break;
 8006584:	e006      	b.n	8006594 <_ZN2UI4loopEP11u8g2_struct+0x19c>
			for (i = 0; i < TotalEnterIndexes; i++) {
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	3301      	adds	r3, #1
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b09      	cmp	r3, #9
 8006590:	ddc1      	ble.n	8006516 <_ZN2UI4loopEP11u8g2_struct+0x11e>
				}

			}

			break;
 8006592:	e035      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
 8006594:	e034      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cUP_BT: {
			CurrMenu = MenuArray[index].UP;
 8006596:	89fa      	ldrh	r2, [r7, #14]
 8006598:	491c      	ldr	r1, [pc, #112]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 800659a:	4613      	mov	r3, r2
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	3338      	adds	r3, #56	@ 0x38
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a17      	ldr	r2, [pc, #92]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80065aa:	6013      	str	r3, [r2, #0]
			break;
 80065ac:	e028      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cDWN_BT: {
			CurrMenu = MenuArray[index].DN;
 80065ae:	89fa      	ldrh	r2, [r7, #14]
 80065b0:	4916      	ldr	r1, [pc, #88]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80065b2:	4613      	mov	r3, r2
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	3334      	adds	r3, #52	@ 0x34
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80065c2:	6013      	str	r3, [r2, #0]
			break;
 80065c4:	e01c      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cRGHT_BT: {
			CurrMenu = MenuArray[index].RGT;
 80065c6:	89fa      	ldrh	r2, [r7, #14]
 80065c8:	4910      	ldr	r1, [pc, #64]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80065ca:	4613      	mov	r3, r2
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3340      	adds	r3, #64	@ 0x40
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80065da:	6013      	str	r3, [r2, #0]
			break;
 80065dc:	e010      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
		}
		case button::btncodes::cLFT_BT: {
			CurrMenu = MenuArray[index].LFT;
 80065de:	89fa      	ldrh	r2, [r7, #14]
 80065e0:	490a      	ldr	r1, [pc, #40]	@ (800660c <_ZN2UI4loopEP11u8g2_struct+0x214>)
 80065e2:	4613      	mov	r3, r2
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	333c      	adds	r3, #60	@ 0x3c
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a05      	ldr	r2, [pc, #20]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80065f2:	6013      	str	r3, [r2, #0]
			break;
 80065f4:	e004      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;

		}

	} else {
		CurrMenu = MenuNo::None;
 80065f6:	4b04      	ldr	r3, [pc, #16]	@ (8006608 <_ZN2UI4loopEP11u8g2_struct+0x210>)
 80065f8:	2209      	movs	r2, #9
 80065fa:	601a      	str	r2, [r3, #0]
	}

}
 80065fc:	e000      	b.n	8006600 <_ZN2UI4loopEP11u8g2_struct+0x208>
			break;
 80065fe:	bf00      	nop
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bd90      	pop	{r4, r7, pc}
 8006608:	20000008 	.word	0x20000008
 800660c:	2000000c 	.word	0x2000000c
 8006610:	20001abc 	.word	0x20001abc

08006614 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct>:
		10.0,
		01.0,
		0.1,
};

void UI::UI_Subs::SetTimeDate(u8g2_t *u8g2) {
 8006614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006616:	b0a1      	sub	sp, #132	@ 0x84
 8006618:	af06      	add	r7, sp, #24
 800661a:	6078      	str	r0, [r7, #4]
	uint32_t epochTime;
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;

	int8_t timezone;
	stmRTC.getTime(&DDate, &DTime, &epochTime, &timezone);
 800661c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006620:	f107 0210 	add.w	r2, r7, #16
 8006624:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006628:	f107 030f 	add.w	r3, r7, #15
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4603      	mov	r3, r0
 8006630:	48ba      	ldr	r0, [pc, #744]	@ (800691c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x308>)
 8006632:	f7fe fcae 	bl	8004f92 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPmPa>

	int8_t selEpochPos = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	int8_t prevselPos = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	do {
		button::resetCode(button::btncodes::cNONE);
 8006642:	2000      	movs	r0, #0
 8006644:	f000 fcd8 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>

		do {
			u8g2_ClearBuffer(u8g2);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ff24 	bl	8007496 <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 800664e:	2101      	movs	r1, #1
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 fbe0 	bl	8007e16 <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8006656:	2102      	movs	r1, #2
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fe6a 	bl	8008332 <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 800665e:	49b0      	ldr	r1, [pc, #704]	@ (8006920 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x30c>)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fd39 	bl	80080d8 <u8g2_SetFont>

			u8g2_DrawStr(u8g2, 3, 10, "Set Time 24hr Format");
 8006666:	4baf      	ldr	r3, [pc, #700]	@ (8006924 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x310>)
 8006668:	220a      	movs	r2, #10
 800666a:	2103      	movs	r1, #3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fc91 	bl	8007f94 <u8g2_DrawStr>

			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8006672:	7c3b      	ldrb	r3, [r7, #16]
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8006674:	461e      	mov	r6, r3
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 8006676:	7c7b      	ldrb	r3, [r7, #17]
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8006678:	469c      	mov	ip, r3
					DTime.Hours, DTime.Minutes, DTime.Seconds, DDate.Date,
 800667a:	7cbb      	ldrb	r3, [r7, #18]
 800667c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
					DDate.Month, DDate.Year, timezone);
 8006680:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8006684:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
			std::sprintf(epochtimeStr, "%02d:%02d:%02d|%02d/%02d/%02d %02d",
 8006688:	4604      	mov	r4, r0
 800668a:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800668e:	4605      	mov	r5, r0
 8006690:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006694:	9504      	str	r5, [sp, #16]
 8006696:	9403      	str	r4, [sp, #12]
 8006698:	9102      	str	r1, [sp, #8]
 800669a:	9201      	str	r2, [sp, #4]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4663      	mov	r3, ip
 80066a0:	4632      	mov	r2, r6
 80066a2:	49a1      	ldr	r1, [pc, #644]	@ (8006928 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x314>)
 80066a4:	f00c f932 	bl	801290c <siprintf>

			u8g2_DrawStr(u8g2, 5, 20, epochtimeStr);
 80066a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80066ac:	2214      	movs	r2, #20
 80066ae:	2105      	movs	r1, #5
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fc6f 	bl	8007f94 <u8g2_DrawStr>

			if (timezone < -9 && selEpochPos >= 12) {
 80066b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ba:	f113 0f09 	cmn.w	r3, #9
 80066be:	da13      	bge.n	80066e8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xd4>
 80066c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80066c4:	2b0b      	cmp	r3, #11
 80066c6:	dd0f      	ble.n	80066e8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xd4>
				u8g2_DrawBox(u8g2, 5 + (5 * (prevselPos + 1)), 12, 5, 9);
 80066c8:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80066cc:	3302      	adds	r3, #2
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	0092      	lsls	r2, r2, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	b2d9      	uxtb	r1, r3
 80066d8:	2309      	movs	r3, #9
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	2305      	movs	r3, #5
 80066de:	220c      	movs	r2, #12
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fea2 	bl	800742a <u8g2_DrawBox>
 80066e6:	e00e      	b.n	8006706 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0xf2>
			} else {
				u8g2_DrawBox(u8g2, 5 + (5 * prevselPos), 12, 5, 9);
 80066e8:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80066ec:	3301      	adds	r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	0092      	lsls	r2, r2, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	b2d9      	uxtb	r1, r3
 80066f8:	2309      	movs	r3, #9
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	2305      	movs	r3, #5
 80066fe:	220c      	movs	r2, #12
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fe92 	bl	800742a <u8g2_DrawBox>
			}

			UI::UI_helper::SubMenuControlInfo(u8g2);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fbc6 	bl	8006e98 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>

			u8g2_SendBuffer(u8g2);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 ff35 	bl	800757c <u8g2_SendBuffer>
			btncodes = button::get_event();
 8006712:	f000 fc45 	bl	8006fa0 <_ZN6button9get_eventEv>
 8006716:	6638      	str	r0, [r7, #96]	@ 0x60
		} while (btncodes == button::btncodes::cNONE);
 8006718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800671a:	2b00      	cmp	r3, #0
 800671c:	d094      	beq.n	8006648 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x34>

		switch (btncodes) {
 800671e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006720:	2b32      	cmp	r3, #50	@ 0x32
 8006722:	d013      	beq.n	800674c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x138>
 8006724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006726:	2b32      	cmp	r3, #50	@ 0x32
 8006728:	f300 815f 	bgt.w	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
 800672c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800672e:	2b28      	cmp	r3, #40	@ 0x28
 8006730:	d05b      	beq.n	80067ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1d6>
 8006732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006734:	2b28      	cmp	r3, #40	@ 0x28
 8006736:	f300 8158 	bgt.w	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
 800673a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800673c:	2b0a      	cmp	r3, #10
 800673e:	f000 8147 	beq.w	80069d0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3bc>
 8006742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006744:	2b1e      	cmp	r3, #30
 8006746:	f000 80c5 	beq.w	80068d4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2c0>
 800674a:	e14e      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>

		case button::btncodes::cRGHT_BT: {
			selEpochPos++;
 800674c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006750:	b2db      	uxtb	r3, r3
 8006752:	3301      	adds	r3, #1
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			if (selEpochPos < 6) {
 800675a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800675e:	2b05      	cmp	r3, #5
 8006760:	dc25      	bgt.n	80067ae <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x19a>
				if (selEpochPos > 2) {
 8006762:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006766:	2b02      	cmp	r3, #2
 8006768:	dd11      	ble.n	800678e <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x17a>
					if (selEpochPos >= 4) {
 800676a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800676e:	2b03      	cmp	r3, #3
 8006770:	dd06      	ble.n	8006780 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x16c>
						prevselPos = selEpochPos + 2;
 8006772:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006776:	3302      	adds	r3, #2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
				} else {
					prevselPos = prevselPos + 1;
				}
			}

			break;
 800677e:	e134      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
						prevselPos = selEpochPos + 1;
 8006780:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006784:	3301      	adds	r3, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 800678c:	e12d      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
					if (selEpochPos == 2) {
 800678e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006792:	2b02      	cmp	r3, #2
 8006794:	d106      	bne.n	80067a4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x190>
						prevselPos = prevselPos + 2;
 8006796:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800679a:	3302      	adds	r3, #2
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 80067a2:	e122      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
						prevselPos = selEpochPos;
 80067a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067a8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 80067ac:	e11d      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
				if (selEpochPos == 6 || selEpochPos == 8 || selEpochPos == 10
 80067ae:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80067b2:	2b06      	cmp	r3, #6
 80067b4:	d00b      	beq.n	80067ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
 80067b6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d007      	beq.n	80067ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
 80067be:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80067c2:	2b0a      	cmp	r3, #10
 80067c4:	d003      	beq.n	80067ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1ba>
						|| selEpochPos == 12) {
 80067c6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80067ca:	2b0c      	cmp	r3, #12
 80067cc:	d106      	bne.n	80067dc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1c8>
					prevselPos = prevselPos + 2;
 80067ce:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80067d2:	3302      	adds	r3, #2
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 80067da:	e106      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
					prevselPos = prevselPos + 1;
 80067dc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80067e0:	3301      	adds	r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			break;
 80067e8:	e0ff      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
		}

		case button::btncodes::cDWN_BT: {

			switch (selEpochPos) {
 80067ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80067ee:	2b0d      	cmp	r3, #13
 80067f0:	f200 80f8 	bhi.w	80069e4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d0>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x1e8>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006835 	.word	0x08006835
 8006800:	08006835 	.word	0x08006835
 8006804:	08006849 	.word	0x08006849
 8006808:	08006849 	.word	0x08006849
 800680c:	0800685d 	.word	0x0800685d
 8006810:	0800685d 	.word	0x0800685d
 8006814:	08006871 	.word	0x08006871
 8006818:	08006871 	.word	0x08006871
 800681c:	08006889 	.word	0x08006889
 8006820:	08006889 	.word	0x08006889
 8006824:	080068a1 	.word	0x080068a1
 8006828:	080068a1 	.word	0x080068a1
 800682c:	080068b9 	.word	0x080068b9
 8006830:	080068b9 	.word	0x080068b9
			case 0:
			case 1: {
				DTime.Hours = DTime.Hours - datetime[selEpochPos];
 8006834:	7c3a      	ldrb	r2, [r7, #16]
 8006836:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800683a:	493c      	ldr	r1, [pc, #240]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 800683c:	56cb      	ldrsb	r3, [r1, r3]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	743b      	strb	r3, [r7, #16]
				break;
 8006846:	e044      	b.n	80068d2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 2:
			case 3: {
				DTime.Minutes = DTime.Minutes - datetime[selEpochPos];
 8006848:	7c7a      	ldrb	r2, [r7, #17]
 800684a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800684e:	4937      	ldr	r1, [pc, #220]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006850:	56cb      	ldrsb	r3, [r1, r3]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	b2db      	uxtb	r3, r3
 8006858:	747b      	strb	r3, [r7, #17]
				break;
 800685a:	e03a      	b.n	80068d2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 4:
			case 5: {
				DTime.Seconds = DTime.Seconds - datetime[selEpochPos];
 800685c:	7cba      	ldrb	r2, [r7, #18]
 800685e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006862:	4932      	ldr	r1, [pc, #200]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006864:	56cb      	ldrsb	r3, [r1, r3]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	b2db      	uxtb	r3, r3
 800686c:	74bb      	strb	r3, [r7, #18]
				break;
 800686e:	e030      	b.n	80068d2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 6:
			case 7: {
				DDate.Date = DDate.Date - datetime[selEpochPos];
 8006870:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006874:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006878:	492c      	ldr	r1, [pc, #176]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 800687a:	56cb      	ldrsb	r3, [r1, r3]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8006886:	e024      	b.n	80068d2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 8:
			case 9: {
				DDate.Month = DDate.Month - datetime[selEpochPos];
 8006888:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800688c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006890:	4926      	ldr	r1, [pc, #152]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 8006892:	56cb      	ldrsb	r3, [r1, r3]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 800689e:	e018      	b.n	80068d2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 10:
			case 11: {
				DDate.Year = DDate.Year - datetime[selEpochPos];
 80068a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80068a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80068a8:	4920      	ldr	r1, [pc, #128]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 80068aa:	56cb      	ldrsb	r3, [r1, r3]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 80068b6:	e00c      	b.n	80068d2 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2be>
			}
			case 12:
			case 13: {
				timezone = timezone - datetime[selEpochPos];
 80068b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80068c2:	491a      	ldr	r1, [pc, #104]	@ (800692c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x318>)
 80068c4:	56cb      	ldrsb	r3, [r1, r3]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	73fb      	strb	r3, [r7, #15]
				break;
 80068d0:	bf00      	nop

			}

			}

			break;
 80068d2:	e087      	b.n	80069e4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d0>
		}

		case button::btncodes::cUP_BT: {
			switch (selEpochPos) {
 80068d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80068d8:	2b0d      	cmp	r3, #13
 80068da:	f200 8085 	bhi.w	80069e8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d4>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2d0>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006931 	.word	0x08006931
 80068e8:	08006931 	.word	0x08006931
 80068ec:	08006945 	.word	0x08006945
 80068f0:	08006945 	.word	0x08006945
 80068f4:	08006959 	.word	0x08006959
 80068f8:	08006959 	.word	0x08006959
 80068fc:	0800696d 	.word	0x0800696d
 8006900:	0800696d 	.word	0x0800696d
 8006904:	08006985 	.word	0x08006985
 8006908:	08006985 	.word	0x08006985
 800690c:	0800699d 	.word	0x0800699d
 8006910:	0800699d 	.word	0x0800699d
 8006914:	080069b5 	.word	0x080069b5
 8006918:	080069b5 	.word	0x080069b5
 800691c:	20001978 	.word	0x20001978
 8006920:	08016334 	.word	0x08016334
 8006924:	080155f0 	.word	0x080155f0
 8006928:	08015608 	.word	0x08015608
 800692c:	20000270 	.word	0x20000270
			case 0:
			case 1: {
				DTime.Hours = DTime.Hours + datetime[selEpochPos];
 8006930:	7c3a      	ldrb	r2, [r7, #16]
 8006932:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006936:	495a      	ldr	r1, [pc, #360]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8006938:	56cb      	ldrsb	r3, [r1, r3]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	4413      	add	r3, r2
 800693e:	b2db      	uxtb	r3, r3
 8006940:	743b      	strb	r3, [r7, #16]
				break;
 8006942:	e044      	b.n	80069ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 2:
			case 3: {
				DTime.Minutes = DTime.Minutes + datetime[selEpochPos];
 8006944:	7c7a      	ldrb	r2, [r7, #17]
 8006946:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800694a:	4955      	ldr	r1, [pc, #340]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 800694c:	56cb      	ldrsb	r3, [r1, r3]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4413      	add	r3, r2
 8006952:	b2db      	uxtb	r3, r3
 8006954:	747b      	strb	r3, [r7, #17]
				break;
 8006956:	e03a      	b.n	80069ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 4:
			case 5: {
				DTime.Seconds = DTime.Seconds + datetime[selEpochPos];
 8006958:	7cba      	ldrb	r2, [r7, #18]
 800695a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800695e:	4950      	ldr	r1, [pc, #320]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8006960:	56cb      	ldrsb	r3, [r1, r3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4413      	add	r3, r2
 8006966:	b2db      	uxtb	r3, r3
 8006968:	74bb      	strb	r3, [r7, #18]
				break;
 800696a:	e030      	b.n	80069ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 6:
			case 7: {
				DDate.Date = DDate.Date + datetime[selEpochPos];
 800696c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006970:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8006974:	494a      	ldr	r1, [pc, #296]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 8006976:	56cb      	ldrsb	r3, [r1, r3]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	4413      	add	r3, r2
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8006982:	e024      	b.n	80069ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 8:
			case 9: {
				DDate.Month = DDate.Month + datetime[selEpochPos];
 8006984:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006988:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800698c:	4944      	ldr	r1, [pc, #272]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 800698e:	56cb      	ldrsb	r3, [r1, r3]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	4413      	add	r3, r2
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 800699a:	e018      	b.n	80069ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 10:
			case 11: {
				DDate.Year = DDate.Year + datetime[selEpochPos];
 800699c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80069a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80069a4:	493e      	ldr	r1, [pc, #248]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 80069a6:	56cb      	ldrsb	r3, [r1, r3]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 80069b2:	e00c      	b.n	80069ce <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3ba>
			}
			case 12:
			case 13: {
				timezone = timezone + datetime[selEpochPos];
 80069b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80069b8:	4a39      	ldr	r2, [pc, #228]	@ (8006aa0 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x48c>)
 80069ba:	56d3      	ldrsb	r3, [r2, r3]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	73fb      	strb	r3, [r7, #15]
				break;
 80069cc:	bf00      	nop
			}

			}

			break;
 80069ce:	e00b      	b.n	80069e8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d4>
		}

		case button::btncodes::cEnter_BT: {

			stmRTC.setTime(&DDate, &DTime, timezone);
 80069d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d4:	f107 0210 	add.w	r2, r7, #16
 80069d8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80069dc:	4831      	ldr	r0, [pc, #196]	@ (8006aa4 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x490>)
 80069de:	f7fe fb53 	bl	8005088 <_ZN10System_rtc6stmRTC7setTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefa>

			break;
 80069e2:	e002      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
			break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x3d6>
			break;
 80069e8:	bf00      	nop
		}

		}

		selEpochPos = selEpochPos % 14;
 80069ea:	f997 2067 	ldrsb.w	r2, [r7, #103]	@ 0x67
 80069ee:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa8 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x494>)
 80069f0:	fb83 1302 	smull	r1, r3, r3, r2
 80069f4:	4413      	add	r3, r2
 80069f6:	10d9      	asrs	r1, r3, #3
 80069f8:	17d3      	asrs	r3, r2, #31
 80069fa:	1ac9      	subs	r1, r1, r3
 80069fc:	460b      	mov	r3, r1
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	1a5b      	subs	r3, r3, r1
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		prevselPos = prevselPos % 20;
 8006a0a:	f997 2066 	ldrsb.w	r2, [r7, #102]	@ 0x66
 8006a0e:	4b27      	ldr	r3, [pc, #156]	@ (8006aac <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x498>)
 8006a10:	fb83 1302 	smull	r1, r3, r3, r2
 8006a14:	10d9      	asrs	r1, r3, #3
 8006a16:	17d3      	asrs	r3, r2, #31
 8006a18:	1ac9      	subs	r1, r1, r3
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

		if (DTime.Hours > 24) {
 8006a28:	7c3b      	ldrb	r3, [r7, #16]
 8006a2a:	2b18      	cmp	r3, #24
 8006a2c:	d901      	bls.n	8006a32 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x41e>
			DTime.Hours = 24;
 8006a2e:	2318      	movs	r3, #24
 8006a30:	743b      	strb	r3, [r7, #16]
		}
		if (DTime.Minutes > 59) {
 8006a32:	7c7b      	ldrb	r3, [r7, #17]
 8006a34:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a36:	d901      	bls.n	8006a3c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x428>
			DTime.Minutes = 59;
 8006a38:	233b      	movs	r3, #59	@ 0x3b
 8006a3a:	747b      	strb	r3, [r7, #17]
		}
		if (DTime.Seconds > 59) {
 8006a3c:	7cbb      	ldrb	r3, [r7, #18]
 8006a3e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a40:	d901      	bls.n	8006a46 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x432>
			DTime.Seconds = 59;
 8006a42:	233b      	movs	r3, #59	@ 0x3b
 8006a44:	74bb      	strb	r3, [r7, #18]
		}

		if (DDate.Date > 31) {
 8006a46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a4a:	2b1f      	cmp	r3, #31
 8006a4c:	d902      	bls.n	8006a54 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x440>
			DDate.Date = 31;
 8006a4e:	231f      	movs	r3, #31
 8006a50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (DDate.Month > 12) {
 8006a54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d902      	bls.n	8006a62 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x44e>
			DDate.Month = 12;
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		if (DDate.Year > 99) {
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a66:	2b63      	cmp	r3, #99	@ 0x63
 8006a68:	d902      	bls.n	8006a70 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x45c>
			DDate.Year = 99;
 8006a6a:	2363      	movs	r3, #99	@ 0x63
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (timezone > 13) {
 8006a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a74:	2b0d      	cmp	r3, #13
 8006a76:	dd01      	ble.n	8006a7c <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x468>
			timezone = 13;
 8006a78:	230d      	movs	r3, #13
 8006a7a:	73fb      	strb	r3, [r7, #15]
		}
		if (timezone < -11) {
 8006a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a80:	f113 0f0b 	cmn.w	r3, #11
 8006a84:	da01      	bge.n	8006a8a <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x476>
			timezone = -11;
 8006a86:	23f5      	movs	r3, #245	@ 0xf5
 8006a88:	73fb      	strb	r3, [r7, #15]

		}

	} while (btncodes != button::btncodes::cEnter_BT
			&& btncodes != button::btncodes::cLFT_BT);
 8006a8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a8c:	2b0a      	cmp	r3, #10
 8006a8e:	d003      	beq.n	8006a98 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x484>
 8006a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a92:	2b3c      	cmp	r3, #60	@ 0x3c
 8006a94:	f47f add5 	bne.w	8006642 <_ZN2UI7UI_Subs11SetTimeDateEP11u8g2_struct+0x2e>

}
 8006a98:	bf00      	nop
 8006a9a:	376c      	adds	r7, #108	@ 0x6c
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa0:	20000270 	.word	0x20000270
 8006aa4:	20001978 	.word	0x20001978
 8006aa8:	92492493 	.word	0x92492493
 8006aac:	66666667 	.word	0x66666667

08006ab0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct>:

void UI::UI_Subs::SetFuelMeas(u8g2_t *u8g2) {
 8006ab0:	b5b0      	push	{r4, r5, r7, lr}
 8006ab2:	b0a2      	sub	sp, #136	@ 0x88
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	6078      	str	r0, [r7, #4]
	enum button::btncodes btncodes;
	float zeroSpan = 00.0;
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	677b      	str	r3, [r7, #116]	@ 0x74
	float fullSpan = 00.0;
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	673b      	str	r3, [r7, #112]	@ 0x70
	liquidSensor.getParameters(&zeroSpan, &fullSpan);
 8006ac4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8006ac8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006acc:	4619      	mov	r1, r3
 8006ace:	48aa      	ldr	r0, [pc, #680]	@ (8006d78 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c8>)
 8006ad0:	f7fd ff03 	bl	80048da <_ZN17sensor_liquidMeas12liquidSensor13getParametersEPfS1_>

	char headings[50];
	char buffer[50];

	uint8_t cursor = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t cursorPos = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	do {
		button::resetCode(button::btncodes::cNONE);
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f000 fa89 	bl	8006ff8 <_ZN6button9resetCodeENS_8btncodesE>
		do {
			u8g2_ClearBuffer(u8g2);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fcd5 	bl	8007496 <u8g2_ClearBuffer>
			u8g2_SetFontMode(u8g2, 1);
 8006aec:	2101      	movs	r1, #1
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 f991 	bl	8007e16 <u8g2_SetFontMode>
			u8g2_SetDrawColor(u8g2, 2);
 8006af4:	2102      	movs	r1, #2
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 fc1b 	bl	8008332 <u8g2_SetDrawColor>
			u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006afc:	499f      	ldr	r1, [pc, #636]	@ (8006d7c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2cc>)
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 faea 	bl	80080d8 <u8g2_SetFont>

			u8g2_DrawXBM(u8g2, 104, 0, imgcont::SettingsFuelTank.w,
 8006b04:	4b9e      	ldr	r3, [pc, #632]	@ (8006d80 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d0>)
 8006b06:	7919      	ldrb	r1, [r3, #4]
					imgcont::SettingsFuelTank.h, imgcont::SettingsFuelTank.img);
 8006b08:	4b9d      	ldr	r3, [pc, #628]	@ (8006d80 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d0>)
 8006b0a:	795b      	ldrb	r3, [r3, #5]
 8006b0c:	4a9c      	ldr	r2, [pc, #624]	@ (8006d80 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d0>)
 8006b0e:	6812      	ldr	r2, [r2, #0]
			u8g2_DrawXBM(u8g2, 104, 0, imgcont::SettingsFuelTank.w,
 8006b10:	9201      	str	r2, [sp, #4]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	460b      	mov	r3, r1
 8006b16:	2200      	movs	r2, #0
 8006b18:	2168      	movs	r1, #104	@ 0x68
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fc42 	bl	80073a4 <u8g2_DrawXBM>

			std::sprintf(headings, "ZeroSpan | FullSpan");
 8006b20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006b24:	4997      	ldr	r1, [pc, #604]	@ (8006d84 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d4>)
 8006b26:	4618      	mov	r0, r3
 8006b28:	f00b fef0 	bl	801290c <siprintf>
			u8g2_DrawStr(u8g2, 5, 10, headings);
 8006b2c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006b30:	220a      	movs	r2, #10
 8006b32:	2105      	movs	r1, #5
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fa2d 	bl	8007f94 <u8g2_DrawStr>
			std::sprintf(buffer, "%04.1f | %04.1f", zeroSpan, fullSpan);
 8006b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7f9 fd03 	bl	8000548 <__aeabi_f2d>
 8006b42:	4604      	mov	r4, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7f9 fcfd 	bl	8000548 <__aeabi_f2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	f107 0008 	add.w	r0, r7, #8
 8006b56:	e9cd 2300 	strd	r2, r3, [sp]
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	498a      	ldr	r1, [pc, #552]	@ (8006d88 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2d8>)
 8006b60:	f00b fed4 	bl	801290c <siprintf>
			u8g2_DrawStr(u8g2, 25, 20, buffer);
 8006b64:	f107 0308 	add.w	r3, r7, #8
 8006b68:	2214      	movs	r2, #20
 8006b6a:	2119      	movs	r1, #25
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fa11 	bl	8007f94 <u8g2_DrawStr>

			u8g2_DrawBox(u8g2, 25 + (5 * (cursorPos)), 12, 5, 9);
 8006b72:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006b76:	461a      	mov	r2, r3
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	3319      	adds	r3, #25
 8006b80:	b2d9      	uxtb	r1, r3
 8006b82:	2309      	movs	r3, #9
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	2305      	movs	r3, #5
 8006b88:	220c      	movs	r2, #12
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc4d 	bl	800742a <u8g2_DrawBox>



			UI::UI_helper::SubMenuControlInfo(u8g2);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f981 	bl	8006e98 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>
			u8g2_SendBuffer(u8g2);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcf0 	bl	800757c <u8g2_SendBuffer>
			btncodes = button::get_event();
 8006b9c:	f000 fa00 	bl	8006fa0 <_ZN6button9get_eventEv>
 8006ba0:	67b8      	str	r0, [r7, #120]	@ 0x78
		} while (btncodes == button::btncodes::cNONE);
 8006ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d09e      	beq.n	8006ae6 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x36>

		switch (btncodes) {
 8006ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006baa:	2b32      	cmp	r3, #50	@ 0x32
 8006bac:	d012      	beq.n	8006bd4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x124>
 8006bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bb0:	2b32      	cmp	r3, #50	@ 0x32
 8006bb2:	f300 80c2 	bgt.w	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
 8006bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bb8:	2b28      	cmp	r3, #40	@ 0x28
 8006bba:	d039      	beq.n	8006c30 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x180>
 8006bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bbe:	2b28      	cmp	r3, #40	@ 0x28
 8006bc0:	f300 80bb 	bgt.w	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bc6:	2b0a      	cmp	r3, #10
 8006bc8:	f000 80a8 	beq.w	8006d1c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x26c>
 8006bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bce:	2b1e      	cmp	r3, #30
 8006bd0:	d068      	beq.n	8006ca4 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1f4>
 8006bd2:	e0b2      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>

		case button::btncodes::cRGHT_BT: {
			cursor++;
 8006bd4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006bd8:	3301      	adds	r3, #1
 8006bda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if(cursor == 2)
 8006bde:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d103      	bne.n	8006bee <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x13e>
			{
				cursorPos = 3;
 8006be6:	2303      	movs	r3, #3
 8006be8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			else {

				cursorPos = cursor;
			}

			break;
 8006bec:	e0a5      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			else if(cursor == 3)
 8006bee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d103      	bne.n	8006bfe <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x14e>
				cursorPos = 7;
 8006bf6:	2307      	movs	r3, #7
 8006bf8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8006bfc:	e09d      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			else if(cursor > 3)
 8006bfe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d90f      	bls.n	8006c26 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x176>
				if(cursor > 4)
 8006c06:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d905      	bls.n	8006c1a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x16a>
					cursorPos = cursorPos + 2;
 8006c0e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006c12:	3302      	adds	r3, #2
 8006c14:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8006c18:	e08f      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
					cursorPos = cursorPos + 1;
 8006c1a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8006c24:	e089      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
				cursorPos = cursor;
 8006c26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c2a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			break;
 8006c2e:	e084      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
		}

		case button::btncodes::cDWN_BT: {
			if(cursor < 3)
 8006c30:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d818      	bhi.n	8006c6a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1ba>
			{
				zeroSpan = zeroSpan - SpanSetting[cursor];
 8006c38:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8006c3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c40:	4a52      	ldr	r2, [pc, #328]	@ (8006d8c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	edd3 7a00 	vldr	s15, [r3]
 8006c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c4e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				if(zeroSpan < 0)
 8006c52:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d400      	bmi.n	8006c62 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1b2>
				{
					fullSpan = 0.0;
				}
			}

			break;
 8006c60:	e068      	b.n	8006d34 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
					zeroSpan = 0.0;
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	677b      	str	r3, [r7, #116]	@ 0x74
			break;
 8006c68:	e064      	b.n	8006d34 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
			else if(cursor >=3 )
 8006c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d960      	bls.n	8006d34 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
				fullSpan = fullSpan - SpanSetting[cursor];
 8006c72:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8006c76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c7a:	4a44      	ldr	r2, [pc, #272]	@ (8006d8c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	edd3 7a00 	vldr	s15, [r3]
 8006c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c88:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				if(fullSpan < 0)
 8006c8c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8006c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c98:	d400      	bmi.n	8006c9c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x1ec>
			break;
 8006c9a:	e04b      	b.n	8006d34 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
					fullSpan = 0.0;
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	673b      	str	r3, [r7, #112]	@ 0x70
			break;
 8006ca2:	e047      	b.n	8006d34 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x284>
		}

		case button::btncodes::cUP_BT: {
			if(cursor < 3)
 8006ca4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d819      	bhi.n	8006ce0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x230>
			{
				zeroSpan = zeroSpan + SpanSetting[cursor];
 8006cac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006cb0:	4a36      	ldr	r2, [pc, #216]	@ (8006d8c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	ed93 7a00 	vldr	s14, [r3]
 8006cba:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cc2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

				if(zeroSpan > 99)
 8006cc6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006cca:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006d90 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e0>
 8006cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd6:	dc00      	bgt.n	8006cda <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x22a>
				{
					fullSpan = 99.0;
				}
			}

			break;
 8006cd8:	e02e      	b.n	8006d38 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
					zeroSpan = 99.0;
 8006cda:	4b2e      	ldr	r3, [pc, #184]	@ (8006d94 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8006cdc:	677b      	str	r3, [r7, #116]	@ 0x74
			break;
 8006cde:	e02b      	b.n	8006d38 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
			else if(cursor >=3 )
 8006ce0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d927      	bls.n	8006d38 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
				fullSpan = fullSpan + SpanSetting[cursor];
 8006ce8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006cec:	4a27      	ldr	r2, [pc, #156]	@ (8006d8c <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2dc>)
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	ed93 7a00 	vldr	s14, [r3]
 8006cf6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8006cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cfe:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				if(fullSpan > 99)
 8006d02:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8006d06:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006d90 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e0>
 8006d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d12:	dc00      	bgt.n	8006d16 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x266>
			break;
 8006d14:	e010      	b.n	8006d38 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
					fullSpan = 99.0;
 8006d16:	4b1f      	ldr	r3, [pc, #124]	@ (8006d94 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e4>)
 8006d18:	673b      	str	r3, [r7, #112]	@ 0x70
			break;
 8006d1a:	e00d      	b.n	8006d38 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x288>
		}

		case button::btncodes::cEnter_BT: {

			liquidSensor.setParameters(zeroSpan, fullSpan);
 8006d1c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006d20:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8006d24:	eef0 0a47 	vmov.f32	s1, s14
 8006d28:	eeb0 0a67 	vmov.f32	s0, s15
 8006d2c:	4812      	ldr	r0, [pc, #72]	@ (8006d78 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c8>)
 8006d2e:	f7fd fdae 	bl	800488e <_ZN17sensor_liquidMeas12liquidSensor13setParametersEff>

			break;
 8006d32:	e002      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x28a>
			break;
 8006d38:	bf00      	nop
		}

		}

		cursor = cursor % 6;
 8006d3a:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8006d3e:	4b16      	ldr	r3, [pc, #88]	@ (8006d98 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2e8>)
 8006d40:	fba3 1302 	umull	r1, r3, r3, r2
 8006d44:	0899      	lsrs	r1, r3, #2
 8006d46:	460b      	mov	r3, r1
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	440b      	add	r3, r1
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if(cursorPos > 10)
 8006d54:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006d58:	2b0a      	cmp	r3, #10
 8006d5a:	d902      	bls.n	8006d62 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2b2>
		{
			cursorPos = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		}
	} while (btncodes != button::btncodes::cEnter_BT
			&& btncodes != button::btncodes::cLFT_BT);
 8006d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d64:	2b0a      	cmp	r3, #10
 8006d66:	d003      	beq.n	8006d70 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x2c0>
 8006d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8006d6c:	f47f aeb8 	bne.w	8006ae0 <_ZN2UI7UI_Subs11SetFuelMeasEP11u8g2_struct+0x30>

}
 8006d70:	bf00      	nop
 8006d72:	3780      	adds	r7, #128	@ 0x80
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bdb0      	pop	{r4, r5, r7, pc}
 8006d78:	20001988 	.word	0x20001988
 8006d7c:	08016334 	.word	0x08016334
 8006d80:	08015ee0 	.word	0x08015ee0
 8006d84:	0801562c 	.word	0x0801562c
 8006d88:	08015640 	.word	0x08015640
 8006d8c:	20000280 	.word	0x20000280
 8006d90:	42c60000 	.word	0x42c60000
 8006d94:	42c60000 	.word	0x42c60000
 8006d98:	aaaaaaab 	.word	0xaaaaaaab

08006d9c <_ZN2UI9UI_helper10set_UIcodeE6MenuNo>:

enum MenuNo UIcodeStorage;


void UI::UI_helper::set_UIcode(enum MenuNo UIcode)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

	UIcodeStorage = UIcode;
 8006da4:	4a04      	ldr	r2, [pc, #16]	@ (8006db8 <_ZN2UI9UI_helper10set_UIcodeE6MenuNo+0x1c>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6013      	str	r3, [r2, #0]

}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20001bbc 	.word	0x20001bbc

08006dbc <_ZN2UI9UI_helper10get_UIcodeEv>:
enum MenuNo UI::UI_helper::get_UIcode()
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  return UIcodeStorage;
 8006dc0:	4b03      	ldr	r3, [pc, #12]	@ (8006dd0 <_ZN2UI9UI_helper10get_UIcodeEv+0x14>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20001bbc 	.word	0x20001bbc

08006dd4 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct>:


void UI::UI_helper::common_iconsMain(u8g2_t *u8g2)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0a4      	sub	sp, #144	@ 0x90
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	6078      	str	r0, [r7, #4]
	char time[50];
	char date[50];
	RTC_DateTypeDef DDate;
	RTC_TimeTypeDef DTime;
	stmRTC.getTime(&DDate, &DTime, nullptr);
 8006ddc:	f107 0208 	add.w	r2, r7, #8
 8006de0:	f107 011c 	add.w	r1, r7, #28
 8006de4:	2300      	movs	r3, #0
 8006de6:	4826      	ldr	r0, [pc, #152]	@ (8006e80 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xac>)
 8006de8:	f7fe f85d 	bl	8004ea6 <_ZN10System_rtc6stmRTC7getTimeEP15RTC_DateTypeDefP15RTC_TimeTypeDefPm>
	std::sprintf(time, "%02d:%02d:%02d", DTime.Hours, DTime.Minutes,DTime.Seconds);
 8006dec:	7a3b      	ldrb	r3, [r7, #8]
 8006dee:	461a      	mov	r2, r3
 8006df0:	7a7b      	ldrb	r3, [r7, #9]
 8006df2:	4619      	mov	r1, r3
 8006df4:	7abb      	ldrb	r3, [r7, #10]
 8006df6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4921      	ldr	r1, [pc, #132]	@ (8006e84 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb0>)
 8006e00:	f00b fd84 	bl	801290c <siprintf>
	std::sprintf(date, "%02d/%02d/%02d", DDate.Date,DDate.Month,DDate.Year);
 8006e04:	7fbb      	ldrb	r3, [r7, #30]
 8006e06:	461a      	mov	r2, r3
 8006e08:	7f7b      	ldrb	r3, [r7, #29]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	7ffb      	ldrb	r3, [r7, #31]
 8006e0e:	f107 0020 	add.w	r0, r7, #32
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	460b      	mov	r3, r1
 8006e16:	491c      	ldr	r1, [pc, #112]	@ (8006e88 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb4>)
 8006e18:	f00b fd78 	bl	801290c <siprintf>
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006e1c:	491b      	ldr	r1, [pc, #108]	@ (8006e8c <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xb8>)
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f95a 	bl	80080d8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 0, 10, time);
 8006e24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006e28:	220a      	movs	r2, #10
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f8b1 	bl	8007f94 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 88, 10, date);
 8006e32:	f107 0320 	add.w	r3, r7, #32
 8006e36:	220a      	movs	r2, #10
 8006e38:	2158      	movs	r1, #88	@ 0x58
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 f8aa 	bl	8007f94 <u8g2_DrawStr>
	u8g2_DrawXBM(u8g2,55,48,imgcont::setting.w,imgcont::setting.h,imgcont::setting.img);
 8006e40:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 8006e42:	7919      	ldrb	r1, [r3, #4]
 8006e44:	4b12      	ldr	r3, [pc, #72]	@ (8006e90 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 8006e46:	795b      	ldrb	r3, [r3, #5]
 8006e48:	4a11      	ldr	r2, [pc, #68]	@ (8006e90 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xbc>)
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	9201      	str	r2, [sp, #4]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	460b      	mov	r3, r1
 8006e52:	2230      	movs	r2, #48	@ 0x30
 8006e54:	2137      	movs	r1, #55	@ 0x37
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 faa4 	bl	80073a4 <u8g2_DrawXBM>
	u8g2_DrawXBM(u8g2,112,48,imgcont::leftrightArrow.w,imgcont::leftrightArrow.h,imgcont::leftrightArrow.img);
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 8006e5e:	7919      	ldrb	r1, [r3, #4]
 8006e60:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 8006e62:	795b      	ldrb	r3, [r3, #5]
 8006e64:	4a0b      	ldr	r2, [pc, #44]	@ (8006e94 <_ZN2UI9UI_helper16common_iconsMainEP11u8g2_struct+0xc0>)
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	9201      	str	r2, [sp, #4]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	2230      	movs	r2, #48	@ 0x30
 8006e70:	2170      	movs	r1, #112	@ 0x70
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa96 	bl	80073a4 <u8g2_DrawXBM>

}
 8006e78:	bf00      	nop
 8006e7a:	3788      	adds	r7, #136	@ 0x88
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20001978 	.word	0x20001978
 8006e84:	08015650 	.word	0x08015650
 8006e88:	08015660 	.word	0x08015660
 8006e8c:	08016334 	.word	0x08016334
 8006e90:	08015e98 	.word	0x08015e98
 8006e94:	08015ea0 	.word	0x08015ea0

08006e98 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct>:


void UI::UI_helper::SubMenuControlInfo(u8g2_t *u8g2)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	u8g2_SetFont(u8g2, u8g2_font_5x8_mf);
 8006ea0:	490f      	ldr	r1, [pc, #60]	@ (8006ee0 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x48>)
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f918 	bl	80080d8 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 5, 40, "Up/Dn btn -> Edit");
 8006ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x4c>)
 8006eaa:	2228      	movs	r2, #40	@ 0x28
 8006eac:	2105      	movs	r1, #5
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 f870 	bl	8007f94 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 48, "Rgt btn   -> Cursor");
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x50>)
 8006eb6:	2230      	movs	r2, #48	@ 0x30
 8006eb8:	2105      	movs	r1, #5
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 f86a 	bl	8007f94 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 56, "Lft btn   -> Exit");
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x54>)
 8006ec2:	2238      	movs	r2, #56	@ 0x38
 8006ec4:	2105      	movs	r1, #5
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 f864 	bl	8007f94 <u8g2_DrawStr>
	u8g2_DrawStr(u8g2, 5, 64, "Entr btn  -> Save");
 8006ecc:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <_ZN2UI9UI_helper18SubMenuControlInfoEP11u8g2_struct+0x58>)
 8006ece:	2240      	movs	r2, #64	@ 0x40
 8006ed0:	2105      	movs	r1, #5
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f85e 	bl	8007f94 <u8g2_DrawStr>
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	08016334 	.word	0x08016334
 8006ee4:	08015670 	.word	0x08015670
 8006ee8:	08015684 	.word	0x08015684
 8006eec:	08015698 	.word	0x08015698
 8006ef0:	080156ac 	.word	0x080156ac

08006ef4 <My_Button_IRQHandlerC>:
#include "System_Rtos.hpp"

extern "C"
{
    void My_Button_IRQHandlerC()
    {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
    	button::btn_irq();
 8006ef8:	f000 f88e 	bl	8007018 <_ZN6button7btn_irqEv>
    }
 8006efc:	bf00      	nop
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <_ZN6buttonL8setTimerEPm>:

struct Button_t Button_;


static void setTimer(uint32_t* timer)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 8006f08:	f002 ffb2 	bl	8009e70 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	601a      	str	r2, [r3, #0]
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <_ZN6buttonL10checkTimerEPmm>:

static uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8006f28:	f002 ffa2 	bl	8009e70 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d201      	bcs.n	8006f3e <_ZN6buttonL10checkTimerEPmm+0x24>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <_ZN6buttonL10checkTimerEPmm+0x26>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
	return ret;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZN6button8btn_initEv>:


void btn_init()
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
	eventsRTOS.eventCreate();
 8006f50:	4808      	ldr	r0, [pc, #32]	@ (8006f74 <_ZN6button8btn_initEv+0x28>)
 8006f52:	f7fd ff12 	bl	8004d7a <_ZN11System_Rtos15freertos_events11eventCreateEv>

	Button_.btn_code = button::btncodes::cNONE;
 8006f56:	4b08      	ldr	r3, [pc, #32]	@ (8006f78 <_ZN6button8btn_initEv+0x2c>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60da      	str	r2, [r3, #12]
	Button_.buttonFlag = 1;
 8006f5c:	4b06      	ldr	r3, [pc, #24]	@ (8006f78 <_ZN6button8btn_initEv+0x2c>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	715a      	strb	r2, [r3, #5]
	Button_.buttonTimer = 0;
 8006f62:	4b05      	ldr	r3, [pc, #20]	@ (8006f78 <_ZN6button8btn_initEv+0x2c>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
	Button_.Sel_BT =button_identification::iNONE;
 8006f68:	4b03      	ldr	r3, [pc, #12]	@ (8006f78 <_ZN6button8btn_initEv+0x2c>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	609a      	str	r2, [r3, #8]
}
 8006f6e:	bf00      	nop
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20001bc0 	.word	0x20001bc0
 8006f78:	20001bcc 	.word	0x20001bcc

08006f7c <_ZN6button9gen_eventENS_8btncodesE>:
void gen_event(enum btncodes btnCode)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 8006f84:	4a04      	ldr	r2, [pc, #16]	@ (8006f98 <_ZN6button9gen_eventENS_8btncodesE+0x1c>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60d3      	str	r3, [r2, #12]
	eventsRTOS.eventGive();
 8006f8a:	4804      	ldr	r0, [pc, #16]	@ (8006f9c <_ZN6button9gen_eventENS_8btncodesE+0x20>)
 8006f8c:	f7fd ff02 	bl	8004d94 <_ZN11System_Rtos15freertos_events9eventGiveEv>
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20001bcc 	.word	0x20001bcc
 8006f9c:	20001bc0 	.word	0x20001bc0

08006fa0 <_ZN6button9get_eventEv>:
enum btncodes get_event()
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0

	eventsRTOS.eventTake();
 8006fa4:	4803      	ldr	r0, [pc, #12]	@ (8006fb4 <_ZN6button9get_eventEv+0x14>)
 8006fa6:	f7fd ff2f 	bl	8004e08 <_ZN11System_Rtos15freertos_events9eventTakeEv>
	return Button_.btn_code;
 8006faa:	4b03      	ldr	r3, [pc, #12]	@ (8006fb8 <_ZN6button9get_eventEv+0x18>)
 8006fac:	68db      	ldr	r3, [r3, #12]

}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001bc0 	.word	0x20001bc0
 8006fb8:	20001bcc 	.word	0x20001bcc

08006fbc <_ZN6button14get_eventTimedEm>:
enum btncodes get_eventTimed(uint32_t time)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	eventsRTOS.eventTakeTimed(time);
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4804      	ldr	r0, [pc, #16]	@ (8006fd8 <_ZN6button14get_eventTimedEm+0x1c>)
 8006fc8:	f7fd ff30 	bl	8004e2c <_ZN11System_Rtos15freertos_events14eventTakeTimedEm>
	return Button_.btn_code;
 8006fcc:	4b03      	ldr	r3, [pc, #12]	@ (8006fdc <_ZN6button14get_eventTimedEm+0x20>)
 8006fce:	68db      	ldr	r3, [r3, #12]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20001bc0 	.word	0x20001bc0
 8006fdc:	20001bcc 	.word	0x20001bcc

08006fe0 <_ZN6button8get_codeEv>:

enum btncodes get_code()
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
	return Button_.btn_code;
 8006fe4:	4b03      	ldr	r3, [pc, #12]	@ (8006ff4 <_ZN6button8get_codeEv+0x14>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20001bcc 	.word	0x20001bcc

08006ff8 <_ZN6button9resetCodeENS_8btncodesE>:

void resetCode(enum btncodes btnCode)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	Button_.btn_code = btnCode;
 8007000:	4a04      	ldr	r2, [pc, #16]	@ (8007014 <_ZN6button9resetCodeENS_8btncodesE+0x1c>)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60d3      	str	r3, [r2, #12]
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20001bcc 	.word	0x20001bcc

08007018 <_ZN6button7btn_irqEv>:


void btn_irq()
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
	if (Button_.buttonFlag) {
 800701c:	4b99      	ldr	r3, [pc, #612]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800701e:	795b      	ldrb	r3, [r3, #5]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d06e      	beq.n	8007102 <_ZN6button7btn_irqEv+0xea>

         if (!pEnter_BT) {
 8007024:	2104      	movs	r1, #4
 8007026:	4898      	ldr	r0, [pc, #608]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 8007028:	f003 fdf2 	bl	800ac10 <HAL_GPIO_ReadPin>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <_ZN6button7btn_irqEv+0x38>
				setTimer(&Button_.buttonTimer); //to set debounce
 800703c:	4891      	ldr	r0, [pc, #580]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800703e:	f7ff ff5f 	bl	8006f00 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 8007042:	4b90      	ldr	r3, [pc, #576]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007044:	2200      	movs	r2, #0
 8007046:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iEnter_BT;
 8007048:	4b8e      	ldr	r3, [pc, #568]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800704a:	2201      	movs	r2, #1
 800704c:	609a      	str	r2, [r3, #8]
				Button_.Sel_BT = button_identification::iNONE;
				break;
			}
			}
		}
}
 800704e:	e117      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
			}  else if (!pUP_BT) {
 8007050:	2102      	movs	r1, #2
 8007052:	488d      	ldr	r0, [pc, #564]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 8007054:	f003 fddc 	bl	800ac10 <HAL_GPIO_ReadPin>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf0c      	ite	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	2300      	movne	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d009      	beq.n	800707c <_ZN6button7btn_irqEv+0x64>
				setTimer(&Button_.buttonTimer); //to set debounce
 8007068:	4886      	ldr	r0, [pc, #536]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800706a:	f7ff ff49 	bl	8006f00 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 800706e:	4b85      	ldr	r3, [pc, #532]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007070:	2200      	movs	r2, #0
 8007072:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iUP_BT;
 8007074:	4b83      	ldr	r3, [pc, #524]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007076:	2203      	movs	r2, #3
 8007078:	609a      	str	r2, [r3, #8]
}
 800707a:	e101      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
			} else if (!pDWN_BT) {
 800707c:	2108      	movs	r1, #8
 800707e:	4882      	ldr	r0, [pc, #520]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 8007080:	f003 fdc6 	bl	800ac10 <HAL_GPIO_ReadPin>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	bf0c      	ite	eq
 800708a:	2301      	moveq	r3, #1
 800708c:	2300      	movne	r3, #0
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <_ZN6button7btn_irqEv+0x90>
				setTimer(&Button_.buttonTimer); //to set debounce
 8007094:	487b      	ldr	r0, [pc, #492]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007096:	f7ff ff33 	bl	8006f00 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 800709a:	4b7a      	ldr	r3, [pc, #488]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800709c:	2200      	movs	r2, #0
 800709e:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iDWN_BT;
 80070a0:	4b78      	ldr	r3, [pc, #480]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070a2:	2204      	movs	r2, #4
 80070a4:	609a      	str	r2, [r3, #8]
}
 80070a6:	e0eb      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
			} else if (!pRGHT_BT) {
 80070a8:	2110      	movs	r1, #16
 80070aa:	4877      	ldr	r0, [pc, #476]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 80070ac:	f003 fdb0 	bl	800ac10 <HAL_GPIO_ReadPin>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d009      	beq.n	80070d4 <_ZN6button7btn_irqEv+0xbc>
				setTimer(&Button_.buttonTimer); //to set debounce
 80070c0:	4870      	ldr	r0, [pc, #448]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070c2:	f7ff ff1d 	bl	8006f00 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 80070c6:	4b6f      	ldr	r3, [pc, #444]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iRGHT_BT;
 80070cc:	4b6d      	ldr	r3, [pc, #436]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070ce:	2205      	movs	r2, #5
 80070d0:	609a      	str	r2, [r3, #8]
}
 80070d2:	e0d5      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
			} else if (!pLFT_BT) {
 80070d4:	2120      	movs	r1, #32
 80070d6:	486c      	ldr	r0, [pc, #432]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 80070d8:	f003 fd9a 	bl	800ac10 <HAL_GPIO_ReadPin>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80c9 	beq.w	8007280 <_ZN6button7btn_irqEv+0x268>
				setTimer(&Button_.buttonTimer); //to set debounce
 80070ee:	4865      	ldr	r0, [pc, #404]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070f0:	f7ff ff06 	bl	8006f00 <_ZN6buttonL8setTimerEPm>
				Button_.buttonFlag = RESET;
 80070f4:	4b63      	ldr	r3, [pc, #396]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iLFT_BT;
 80070fa:	4b62      	ldr	r3, [pc, #392]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80070fc:	2206      	movs	r2, #6
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	e0be      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
		} else if ((!Button_.buttonFlag)
 8007102:	4b60      	ldr	r3, [pc, #384]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007104:	795b      	ldrb	r3, [r3, #5]
				&& (checkTimer(&Button_.buttonTimer, 120))) //check debounce
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <_ZN6button7btn_irqEv+0x104>
 800710a:	2178      	movs	r1, #120	@ 0x78
 800710c:	485d      	ldr	r0, [pc, #372]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800710e:	f7ff ff04 	bl	8006f1a <_ZN6buttonL10checkTimerEPmm>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <_ZN6button7btn_irqEv+0x104>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <_ZN6button7btn_irqEv+0x106>
 800711c:	2300      	movs	r3, #0
		} else if ((!Button_.buttonFlag)
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80ae 	beq.w	8007280 <_ZN6button7btn_irqEv+0x268>
			switch (Button_.Sel_BT) {
 8007124:	4b57      	ldr	r3, [pc, #348]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	3b01      	subs	r3, #1
 800712a:	2b05      	cmp	r3, #5
 800712c:	f200 80a1 	bhi.w	8007272 <_ZN6button7btn_irqEv+0x25a>
 8007130:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <_ZN6button7btn_irqEv+0x120>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007151 	.word	0x08007151
 800713c:	08007273 	.word	0x08007273
 8007140:	0800718b 	.word	0x0800718b
 8007144:	080071c5 	.word	0x080071c5
 8007148:	080071ff 	.word	0x080071ff
 800714c:	08007239 	.word	0x08007239
				if (!pEnter_BT) {
 8007150:	2104      	movs	r1, #4
 8007152:	484d      	ldr	r0, [pc, #308]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 8007154:	f003 fd5c 	bl	800ac10 <HAL_GPIO_ReadPin>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <_ZN6button7btn_irqEv+0x164>
					Button_.buttonFlag = SET;
 8007168:	4b46      	ldr	r3, [pc, #280]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800716a:	2201      	movs	r2, #1
 800716c:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800716e:	4b45      	ldr	r3, [pc, #276]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007170:	2200      	movs	r2, #0
 8007172:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cEnter_BT);
 8007174:	200a      	movs	r0, #10
 8007176:	f7ff ff01 	bl	8006f7c <_ZN6button9gen_eventENS_8btncodesE>
				break;
 800717a:	e081      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 800717c:	4b41      	ldr	r3, [pc, #260]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800717e:	2201      	movs	r2, #1
 8007180:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8007182:	4b40      	ldr	r3, [pc, #256]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007184:	2200      	movs	r2, #0
 8007186:	609a      	str	r2, [r3, #8]
				break;
 8007188:	e07a      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
				if (!pUP_BT) {
 800718a:	2102      	movs	r1, #2
 800718c:	483e      	ldr	r0, [pc, #248]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 800718e:	f003 fd3f 	bl	800ac10 <HAL_GPIO_ReadPin>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <_ZN6button7btn_irqEv+0x19e>
					Button_.buttonFlag = SET;
 80071a2:	4b38      	ldr	r3, [pc, #224]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80071a8:	4b36      	ldr	r3, [pc, #216]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cUP_BT);
 80071ae:	201e      	movs	r0, #30
 80071b0:	f7ff fee4 	bl	8006f7c <_ZN6button9gen_eventENS_8btncodesE>
				break;
 80071b4:	e064      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 80071b6:	4b33      	ldr	r3, [pc, #204]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80071bc:	4b31      	ldr	r3, [pc, #196]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071be:	2200      	movs	r2, #0
 80071c0:	609a      	str	r2, [r3, #8]
				break;
 80071c2:	e05d      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
				if (!pDWN_BT) {
 80071c4:	2108      	movs	r1, #8
 80071c6:	4830      	ldr	r0, [pc, #192]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 80071c8:	f003 fd22 	bl	800ac10 <HAL_GPIO_ReadPin>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <_ZN6button7btn_irqEv+0x1d8>
					Button_.buttonFlag = SET;
 80071dc:	4b29      	ldr	r3, [pc, #164]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071de:	2201      	movs	r2, #1
 80071e0:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80071e2:	4b28      	ldr	r3, [pc, #160]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cDWN_BT);
 80071e8:	2028      	movs	r0, #40	@ 0x28
 80071ea:	f7ff fec7 	bl	8006f7c <_ZN6button9gen_eventENS_8btncodesE>
				break;
 80071ee:	e047      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 80071f0:	4b24      	ldr	r3, [pc, #144]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 80071f6:	4b23      	ldr	r3, [pc, #140]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	609a      	str	r2, [r3, #8]
				break;
 80071fc:	e040      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
				if (!pRGHT_BT) {
 80071fe:	2110      	movs	r1, #16
 8007200:	4821      	ldr	r0, [pc, #132]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 8007202:	f003 fd05 	bl	800ac10 <HAL_GPIO_ReadPin>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf0c      	ite	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	2300      	movne	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <_ZN6button7btn_irqEv+0x212>
					Button_.buttonFlag = SET;
 8007216:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007218:	2201      	movs	r2, #1
 800721a:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800721c:	4b19      	ldr	r3, [pc, #100]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cRGHT_BT);
 8007222:	2032      	movs	r0, #50	@ 0x32
 8007224:	f7ff feaa 	bl	8006f7c <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8007228:	e02a      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 800722a:	4b16      	ldr	r3, [pc, #88]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800722c:	2201      	movs	r2, #1
 800722e:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8007230:	4b14      	ldr	r3, [pc, #80]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007232:	2200      	movs	r2, #0
 8007234:	609a      	str	r2, [r3, #8]
				break;
 8007236:	e023      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
				if (!pLFT_BT) {
 8007238:	2120      	movs	r1, #32
 800723a:	4813      	ldr	r0, [pc, #76]	@ (8007288 <_ZN6button7btn_irqEv+0x270>)
 800723c:	f003 fce8 	bl	800ac10 <HAL_GPIO_ReadPin>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <_ZN6button7btn_irqEv+0x24c>
					Button_.buttonFlag = SET;
 8007250:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007252:	2201      	movs	r2, #1
 8007254:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 8007256:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
					gen_event(btncodes::cLFT_BT);
 800725c:	203c      	movs	r0, #60	@ 0x3c
 800725e:	f7ff fe8d 	bl	8006f7c <_ZN6button9gen_eventENS_8btncodesE>
				break;
 8007262:	e00d      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
					Button_.buttonFlag = SET;
 8007264:	4b07      	ldr	r3, [pc, #28]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007266:	2201      	movs	r2, #1
 8007268:	715a      	strb	r2, [r3, #5]
					Button_.Sel_BT = button_identification::iNONE;
 800726a:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800726c:	2200      	movs	r2, #0
 800726e:	609a      	str	r2, [r3, #8]
				break;
 8007270:	e006      	b.n	8007280 <_ZN6button7btn_irqEv+0x268>
				Button_.buttonFlag = SET;
 8007272:	4b04      	ldr	r3, [pc, #16]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 8007274:	2201      	movs	r2, #1
 8007276:	715a      	strb	r2, [r3, #5]
				Button_.Sel_BT = button_identification::iNONE;
 8007278:	4b02      	ldr	r3, [pc, #8]	@ (8007284 <_ZN6button7btn_irqEv+0x26c>)
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
				break;
 800727e:	bf00      	nop
}
 8007280:	bf00      	nop
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20001bcc 	.word	0x20001bcc
 8007288:	40020c00 	.word	0x40020c00

0800728c <_Z41__static_initialization_and_destruction_0ii>:

}
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d107      	bne.n	80072ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d102      	bne.n	80072ac <_Z41__static_initialization_and_destruction_0ii+0x20>
System_Rtos::freertos_events eventsRTOS;
 80072a6:	4803      	ldr	r0, [pc, #12]	@ (80072b4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80072a8:	f7fd fd5c 	bl	8004d64 <_ZN11System_Rtos15freertos_eventsC1Ev>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20001bc0 	.word	0x20001bc0

080072b8 <_GLOBAL__sub_I_My_Button_IRQHandlerC>:
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80072c0:	2001      	movs	r0, #1
 80072c2:	f7ff ffe3 	bl	800728c <_Z41__static_initialization_and_destruction_0ii>
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	4608      	mov	r0, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	461a      	mov	r2, r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	70fb      	strb	r3, [r7, #3]
 80072da:	460b      	mov	r3, r1
 80072dc:	70bb      	strb	r3, [r7, #2]
 80072de:	4613      	mov	r3, r2
 80072e0:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80072e8:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bf0c      	ite	eq
 80072f0:	2301      	moveq	r3, #1
 80072f2:	2300      	movne	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	787b      	ldrb	r3, [r7, #1]
 80072fc:	4413      	add	r3, r2
 80072fe:	b2d8      	uxtb	r0, r3
 8007300:	78bb      	ldrb	r3, [r7, #2]
 8007302:	3301      	adds	r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	78ba      	ldrb	r2, [r7, #2]
 8007308:	78f9      	ldrb	r1, [r7, #3]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4603      	mov	r3, r0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f859 	bl	80083c6 <u8g2_IsIntersection>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d040      	beq.n	800739c <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800731a:	2301      	movs	r3, #1
 800731c:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 800731e:	e035      	b.n	800738c <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	4013      	ands	r3, r2
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7bba      	ldrb	r2, [r7, #14]
 8007332:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8007336:	78ba      	ldrb	r2, [r7, #2]
 8007338:	78f9      	ldrb	r1, [r7, #3]
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	2301      	movs	r3, #1
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 ffd7 	bl	80082f4 <u8g2_DrawHVLine>
 8007346:	e010      	b.n	800736a <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7b7a      	ldrb	r2, [r7, #13]
 8007356:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800735a:	78ba      	ldrb	r2, [r7, #2]
 800735c:	78f9      	ldrb	r1, [r7, #3]
 800735e:	2300      	movs	r3, #0
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	2301      	movs	r3, #1
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 ffc5 	bl	80082f4 <u8g2_DrawHVLine>
    }
    x++;
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	3301      	adds	r3, #1
 800736e:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
      b++;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	3301      	adds	r3, #1
 8007384:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8007386:	787b      	ldrb	r3, [r7, #1]
 8007388:	3b01      	subs	r3, #1
 800738a:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 800738c:	787b      	ldrb	r3, [r7, #1]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1c6      	bne.n	8007320 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7bba      	ldrb	r2, [r7, #14]
 8007396:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 800739a:	e000      	b.n	800739e <u8g2_DrawHXBM+0xd6>
    return;
 800739c:	bf00      	nop
}
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	70fb      	strb	r3, [r7, #3]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70bb      	strb	r3, [r7, #2]
 80073ba:	4613      	mov	r3, r2
 80073bc:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 80073be:	787b      	ldrb	r3, [r7, #1]
 80073c0:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	3307      	adds	r3, #7
 80073c6:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	08db      	lsrs	r3, r3, #3
 80073cc:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	787b      	ldrb	r3, [r7, #1]
 80073d2:	4413      	add	r3, r2
 80073d4:	b2d8      	uxtb	r0, r3
 80073d6:	78ba      	ldrb	r2, [r7, #2]
 80073d8:	7e3b      	ldrb	r3, [r7, #24]
 80073da:	4413      	add	r3, r2
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	78ba      	ldrb	r2, [r7, #2]
 80073e0:	78f9      	ldrb	r1, [r7, #3]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4603      	mov	r3, r0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 ffed 	bl	80083c6 <u8g2_IsIntersection>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d017      	beq.n	8007422 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80073f2:	e012      	b.n	800741a <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80073f4:	7878      	ldrb	r0, [r7, #1]
 80073f6:	78ba      	ldrb	r2, [r7, #2]
 80073f8:	78f9      	ldrb	r1, [r7, #3]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4603      	mov	r3, r0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff61 	bl	80072c8 <u8g2_DrawHXBM>
    bitmap += blen;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	61fb      	str	r3, [r7, #28]
    y++;
 800740e:	78bb      	ldrb	r3, [r7, #2]
 8007410:	3301      	adds	r3, #1
 8007412:	70bb      	strb	r3, [r7, #2]
    h--;
 8007414:	7e3b      	ldrb	r3, [r7, #24]
 8007416:	3b01      	subs	r3, #1
 8007418:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800741a:	7e3b      	ldrb	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e9      	bne.n	80073f4 <u8g2_DrawXBM+0x50>
 8007420:	e000      	b.n	8007424 <u8g2_DrawXBM+0x80>
    return;
 8007422:	bf00      	nop
  }
}
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af02      	add	r7, sp, #8
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	461a      	mov	r2, r3
 8007438:	4603      	mov	r3, r0
 800743a:	70fb      	strb	r3, [r7, #3]
 800743c:	460b      	mov	r3, r1
 800743e:	70bb      	strb	r3, [r7, #2]
 8007440:	4613      	mov	r3, r2
 8007442:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	787b      	ldrb	r3, [r7, #1]
 8007448:	4413      	add	r3, r2
 800744a:	b2d8      	uxtb	r0, r3
 800744c:	78ba      	ldrb	r2, [r7, #2]
 800744e:	7c3b      	ldrb	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	b2db      	uxtb	r3, r3
 8007454:	78ba      	ldrb	r2, [r7, #2]
 8007456:	78f9      	ldrb	r1, [r7, #3]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	4603      	mov	r3, r0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 ffb2 	bl	80083c6 <u8g2_IsIntersection>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d012      	beq.n	800748e <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8007468:	e00d      	b.n	8007486 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800746a:	787b      	ldrb	r3, [r7, #1]
 800746c:	78ba      	ldrb	r2, [r7, #2]
 800746e:	78f9      	ldrb	r1, [r7, #3]
 8007470:	2000      	movs	r0, #0
 8007472:	9000      	str	r0, [sp, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 ff3d 	bl	80082f4 <u8g2_DrawHVLine>
    y++;    
 800747a:	78bb      	ldrb	r3, [r7, #2]
 800747c:	3301      	adds	r3, #1
 800747e:	70bb      	strb	r3, [r7, #2]
    h--;
 8007480:	7c3b      	ldrb	r3, [r7, #16]
 8007482:	3b01      	subs	r3, #1
 8007484:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8007486:	7c3b      	ldrb	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ee      	bne.n	800746a <u8g2_DrawBox+0x40>
 800748c:	e000      	b.n	8007490 <u8g2_DrawBox+0x66>
    return;
 800748e:	bf00      	nop
  }
}
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	7c1b      	ldrb	r3, [r3, #16]
 80074a4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074ac:	461a      	mov	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f00b fa84 	bl	80129d2 <memset>
}
 80074ca:	bf00      	nop
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b086      	sub	sp, #24
 80074d6:	af02      	add	r7, sp, #8
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
 80074de:	4613      	mov	r3, r2
 80074e0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	7c1b      	ldrb	r3, [r3, #16]
 80074e8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	89ba      	ldrh	r2, [r7, #12]
 80074fa:	fb12 f303 	smulbb	r3, r2, r3
 80074fe:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8007500:	89bb      	ldrh	r3, [r7, #12]
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8007506:	89bb      	ldrh	r3, [r7, #12]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4413      	add	r3, r2
 800750c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800750e:	7bf9      	ldrb	r1, [r7, #15]
 8007510:	78ba      	ldrb	r2, [r7, #2]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	460b      	mov	r3, r1
 8007518:	2100      	movs	r1, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 fb72 	bl	8008c04 <u8x8_DrawTile>
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800753a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007542:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	7c5b      	ldrb	r3, [r3, #17]
 800754a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800754c:	7bba      	ldrb	r2, [r7, #14]
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff ffbd 	bl	80074d2 <u8g2_send_tile_row>
    src_row++;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	3301      	adds	r3, #1
 800755c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	3301      	adds	r3, #1
 8007562:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8007564:	7bfa      	ldrb	r2, [r7, #15]
 8007566:	7b7b      	ldrb	r3, [r7, #13]
 8007568:	429a      	cmp	r2, r3
 800756a:	d203      	bcs.n	8007574 <u8g2_send_buffer+0x4c>
 800756c:	7bba      	ldrb	r2, [r7, #14]
 800756e:	7b3b      	ldrb	r3, [r7, #12]
 8007570:	429a      	cmp	r2, r3
 8007572:	d3eb      	bcc.n	800754c <u8g2_send_buffer+0x24>
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ffcf 	bl	8007528 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 fb8b 	bl	8008ca6 <u8x8_RefreshDisplay>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2208      	movs	r2, #8
 80075a4:	701a      	strb	r2, [r3, #0]
  return buf;
 80075a6:	4b03      	ldr	r3, [pc, #12]	@ (80075b4 <u8g2_m_16_8_f+0x1c>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20001bdc 	.word	0x20001bdc

080075b8 <u8g2_Setup_ssd1309_128x64_noname0_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname0, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a0b      	ldr	r2, [pc, #44]	@ (80075fc <u8g2_Setup_ssd1309_128x64_noname0_f+0x44>)
 80075ce:	490c      	ldr	r1, [pc, #48]	@ (8007600 <u8g2_Setup_ssd1309_128x64_noname0_f+0x48>)
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f001 fbc9 	bl	8008d68 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80075d6:	f107 0313 	add.w	r3, r7, #19
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff ffdc 	bl	8007598 <u8g2_m_16_8_f>
 80075e0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80075e2:	7cfa      	ldrb	r2, [r7, #19]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <u8g2_Setup_ssd1309_128x64_noname0_f+0x4c>)
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 ffb6 	bl	800855e <u8g2_SetupBuffer>
}
 80075f2:	bf00      	nop
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	08008941 	.word	0x08008941
 8007600:	08008ac1 	.word	0x08008ac1
 8007604:	0800841d 	.word	0x0800841d

08007608 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	4413      	add	r3, r2
 800761a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	781b      	ldrb	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	81fb      	strh	r3, [r7, #14]
    font++;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3301      	adds	r3, #1
 800764a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800764c:	89fb      	ldrh	r3, [r7, #14]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	89fb      	ldrh	r3, [r7, #14]
 800765a:	4413      	add	r3, r2
 800765c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800765e:	89fb      	ldrh	r3, [r7, #14]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8007676:	2100      	movs	r1, #0
 8007678:	6838      	ldr	r0, [r7, #0]
 800767a:	f7ff ffc5 	bl	8007608 <u8g2_font_get_byte>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8007686:	2101      	movs	r1, #1
 8007688:	6838      	ldr	r0, [r7, #0]
 800768a:	f7ff ffbd 	bl	8007608 <u8g2_font_get_byte>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8007696:	2102      	movs	r1, #2
 8007698:	6838      	ldr	r0, [r7, #0]
 800769a:	f7ff ffb5 	bl	8007608 <u8g2_font_get_byte>
 800769e:	4603      	mov	r3, r0
 80076a0:	461a      	mov	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80076a6:	2103      	movs	r1, #3
 80076a8:	6838      	ldr	r0, [r7, #0]
 80076aa:	f7ff ffad 	bl	8007608 <u8g2_font_get_byte>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80076b6:	2104      	movs	r1, #4
 80076b8:	6838      	ldr	r0, [r7, #0]
 80076ba:	f7ff ffa5 	bl	8007608 <u8g2_font_get_byte>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80076c6:	2105      	movs	r1, #5
 80076c8:	6838      	ldr	r0, [r7, #0]
 80076ca:	f7ff ff9d 	bl	8007608 <u8g2_font_get_byte>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80076d6:	2106      	movs	r1, #6
 80076d8:	6838      	ldr	r0, [r7, #0]
 80076da:	f7ff ff95 	bl	8007608 <u8g2_font_get_byte>
 80076de:	4603      	mov	r3, r0
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80076e6:	2107      	movs	r1, #7
 80076e8:	6838      	ldr	r0, [r7, #0]
 80076ea:	f7ff ff8d 	bl	8007608 <u8g2_font_get_byte>
 80076ee:	4603      	mov	r3, r0
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80076f6:	2108      	movs	r1, #8
 80076f8:	6838      	ldr	r0, [r7, #0]
 80076fa:	f7ff ff85 	bl	8007608 <u8g2_font_get_byte>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8007706:	2109      	movs	r1, #9
 8007708:	6838      	ldr	r0, [r7, #0]
 800770a:	f7ff ff7d 	bl	8007608 <u8g2_font_get_byte>
 800770e:	4603      	mov	r3, r0
 8007710:	b25a      	sxtb	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8007716:	210a      	movs	r1, #10
 8007718:	6838      	ldr	r0, [r7, #0]
 800771a:	f7ff ff75 	bl	8007608 <u8g2_font_get_byte>
 800771e:	4603      	mov	r3, r0
 8007720:	b25a      	sxtb	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8007726:	210b      	movs	r1, #11
 8007728:	6838      	ldr	r0, [r7, #0]
 800772a:	f7ff ff6d 	bl	8007608 <u8g2_font_get_byte>
 800772e:	4603      	mov	r3, r0
 8007730:	b25a      	sxtb	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8007736:	210c      	movs	r1, #12
 8007738:	6838      	ldr	r0, [r7, #0]
 800773a:	f7ff ff65 	bl	8007608 <u8g2_font_get_byte>
 800773e:	4603      	mov	r3, r0
 8007740:	b25a      	sxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8007746:	210d      	movs	r1, #13
 8007748:	6838      	ldr	r0, [r7, #0]
 800774a:	f7ff ff5d 	bl	8007608 <u8g2_font_get_byte>
 800774e:	4603      	mov	r3, r0
 8007750:	b25a      	sxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8007756:	210e      	movs	r1, #14
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f7ff ff55 	bl	8007608 <u8g2_font_get_byte>
 800775e:	4603      	mov	r3, r0
 8007760:	b25a      	sxtb	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8007766:	210f      	movs	r1, #15
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f7ff ff4d 	bl	8007608 <u8g2_font_get_byte>
 800776e:	4603      	mov	r3, r0
 8007770:	b25a      	sxtb	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8007776:	2110      	movs	r1, #16
 8007778:	6838      	ldr	r0, [r7, #0]
 800777a:	f7ff ff45 	bl	8007608 <u8g2_font_get_byte>
 800777e:	4603      	mov	r3, r0
 8007780:	b25a      	sxtb	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8007786:	2111      	movs	r1, #17
 8007788:	6838      	ldr	r0, [r7, #0]
 800778a:	f7ff ff4f 	bl	800762c <u8g2_font_get_word>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8007796:	2113      	movs	r1, #19
 8007798:	6838      	ldr	r0, [r7, #0]
 800779a:	f7ff ff47 	bl	800762c <u8g2_font_get_word>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80077a6:	2115      	movs	r1, #21
 80077a8:	6838      	ldr	r0, [r7, #0]
 80077aa:	f7ff ff3f 	bl	800762c <u8g2_font_get_word>
 80077ae:	4603      	mov	r3, r0
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	82da      	strh	r2, [r3, #22]
#endif
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7a9b      	ldrb	r3, [r3, #10]
 80077ce:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80077d8:	7bfa      	ldrb	r2, [r7, #15]
 80077da:	7b7b      	ldrb	r3, [r7, #13]
 80077dc:	fa42 f303 	asr.w	r3, r2, r3
 80077e0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80077e2:	7b7b      	ldrb	r3, [r7, #13]
 80077e4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80077e6:	7bba      	ldrb	r2, [r7, #14]
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	4413      	add	r3, r2
 80077ec:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b07      	cmp	r3, #7
 80077f2:	d91a      	bls.n	800782a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80077f4:	2308      	movs	r3, #8
 80077f6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80077f8:	7b3a      	ldrb	r2, [r7, #12]
 80077fa:	7b7b      	ldrb	r3, [r7, #13]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	7b3b      	ldrb	r3, [r7, #12]
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	b25a      	sxtb	r2, r3
 800781a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800781e:	4313      	orrs	r3, r2
 8007820:	b25b      	sxtb	r3, r3
 8007822:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	3b08      	subs	r3, #8
 8007828:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	f04f 32ff 	mov.w	r2, #4294967295
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	b2db      	uxtb	r3, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	b2da      	uxtb	r2, r3
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	4013      	ands	r3, r2
 800783e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	7bba      	ldrb	r2, [r7, #14]
 8007844:	729a      	strb	r2, [r3, #10]
  return val;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff ffaa 	bl	80077be <u8g2_font_decode_get_unsigned_bits>
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800786e:	2301      	movs	r3, #1
 8007870:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	3b01      	subs	r3, #1
 8007876:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8007878:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8007884:	7bfa      	ldrb	r2, [r7, #15]
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b2db      	uxtb	r3, r3
 800788c:	73fb      	strb	r3, [r7, #15]
  return v;
 800788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800789a:	b490      	push	{r4, r7}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	461a      	mov	r2, r3
 80078a8:	4623      	mov	r3, r4
 80078aa:	71fb      	strb	r3, [r7, #7]
 80078ac:	4603      	mov	r3, r0
 80078ae:	71bb      	strb	r3, [r7, #6]
 80078b0:	460b      	mov	r3, r1
 80078b2:	717b      	strb	r3, [r7, #5]
 80078b4:	4613      	mov	r3, r2
 80078b6:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80078b8:	793b      	ldrb	r3, [r7, #4]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d010      	beq.n	80078e0 <u8g2_add_vector_y+0x46>
 80078be:	2b02      	cmp	r3, #2
 80078c0:	dc13      	bgt.n	80078ea <u8g2_add_vector_y+0x50>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <u8g2_add_vector_y+0x32>
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d005      	beq.n	80078d6 <u8g2_add_vector_y+0x3c>
 80078ca:	e00e      	b.n	80078ea <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80078cc:	797a      	ldrb	r2, [r7, #5]
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	4413      	add	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
      break;
 80078d4:	e00e      	b.n	80078f4 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80078d6:	79ba      	ldrb	r2, [r7, #6]
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	4413      	add	r3, r2
 80078dc:	71fb      	strb	r3, [r7, #7]
      break;
 80078de:	e009      	b.n	80078f4 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80078e0:	797b      	ldrb	r3, [r7, #5]
 80078e2:	79fa      	ldrb	r2, [r7, #7]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	71fb      	strb	r3, [r7, #7]
      break;
 80078e8:	e004      	b.n	80078f4 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80078ea:	79bb      	ldrb	r3, [r7, #6]
 80078ec:	79fa      	ldrb	r2, [r7, #7]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	71fb      	strb	r3, [r7, #7]
      break;      
 80078f2:	bf00      	nop
  }
  return dy;
 80078f4:	79fb      	ldrb	r3, [r7, #7]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc90      	pop	{r4, r7}
 80078fe:	4770      	bx	lr

08007900 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8007900:	b490      	push	{r4, r7}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	4611      	mov	r1, r2
 800790c:	461a      	mov	r2, r3
 800790e:	4623      	mov	r3, r4
 8007910:	71fb      	strb	r3, [r7, #7]
 8007912:	4603      	mov	r3, r0
 8007914:	71bb      	strb	r3, [r7, #6]
 8007916:	460b      	mov	r3, r1
 8007918:	717b      	strb	r3, [r7, #5]
 800791a:	4613      	mov	r3, r2
 800791c:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800791e:	793b      	ldrb	r3, [r7, #4]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d010      	beq.n	8007946 <u8g2_add_vector_x+0x46>
 8007924:	2b02      	cmp	r3, #2
 8007926:	dc13      	bgt.n	8007950 <u8g2_add_vector_x+0x50>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <u8g2_add_vector_x+0x32>
 800792c:	2b01      	cmp	r3, #1
 800792e:	d005      	beq.n	800793c <u8g2_add_vector_x+0x3c>
 8007930:	e00e      	b.n	8007950 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8007932:	79ba      	ldrb	r2, [r7, #6]
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	4413      	add	r3, r2
 8007938:	71fb      	strb	r3, [r7, #7]
      break;
 800793a:	e00e      	b.n	800795a <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 800793c:	797b      	ldrb	r3, [r7, #5]
 800793e:	79fa      	ldrb	r2, [r7, #7]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	71fb      	strb	r3, [r7, #7]
      break;
 8007944:	e009      	b.n	800795a <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8007946:	79bb      	ldrb	r3, [r7, #6]
 8007948:	79fa      	ldrb	r2, [r7, #7]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	71fb      	strb	r3, [r7, #7]
      break;
 800794e:	e004      	b.n	800795a <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8007950:	797a      	ldrb	r2, [r7, #5]
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	4413      	add	r3, r2
 8007956:	71fb      	strb	r3, [r7, #7]
      break;      
 8007958:	bf00      	nop
  }
  return dx;
 800795a:	79fb      	ldrb	r3, [r7, #7]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bc90      	pop	{r4, r7}
 8007964:	4770      	bx	lr

08007966 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b088      	sub	sp, #32
 800796a:	af02      	add	r7, sp, #8
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
 8007972:	4613      	mov	r3, r2
 8007974:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3350      	adds	r3, #80	@ 0x50
 800797a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007986:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800798e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007996:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8007998:	7bfa      	ldrb	r2, [r7, #15]
 800799a:	7d7b      	ldrb	r3, [r7, #21]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80079a4:	7dfa      	ldrb	r2, [r7, #23]
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d201      	bcs.n	80079b0 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	791b      	ldrb	r3, [r3, #4]
 80079b4:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	795b      	ldrb	r3, [r3, #5]
 80079ba:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80079bc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80079c0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	7b9b      	ldrb	r3, [r3, #14]
 80079c8:	7bb8      	ldrb	r0, [r7, #14]
 80079ca:	f7ff ff99 	bl	8007900 <u8g2_add_vector_x>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80079d2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80079d6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	7b9b      	ldrb	r3, [r3, #14]
 80079de:	7b78      	ldrb	r0, [r7, #13]
 80079e0:	f7ff ff5b 	bl	800789a <u8g2_add_vector_y>
 80079e4:	4603      	mov	r3, r0
 80079e6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80079e8:	78bb      	ldrb	r3, [r7, #2]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00f      	beq.n	8007a0e <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	7b1a      	ldrb	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	7b9b      	ldrb	r3, [r3, #14]
 80079fc:	7db8      	ldrb	r0, [r7, #22]
 80079fe:	7b7a      	ldrb	r2, [r7, #13]
 8007a00:	7bb9      	ldrb	r1, [r7, #14]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	4603      	mov	r3, r0
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fc74 	bl	80082f4 <u8g2_DrawHVLine>
 8007a0c:	e012      	b.n	8007a34 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	7adb      	ldrb	r3, [r3, #11]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10e      	bne.n	8007a34 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	7b5a      	ldrb	r2, [r3, #13]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      u8g2_DrawHVLine(u8g2, 
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	7b9b      	ldrb	r3, [r3, #14]
 8007a24:	7db8      	ldrb	r0, [r7, #22]
 8007a26:	7b7a      	ldrb	r2, [r7, #13]
 8007a28:	7bb9      	ldrb	r1, [r7, #14]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc60 	bl	80082f4 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8007a34:	7dfa      	ldrb	r2, [r7, #23]
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d309      	bcc.n	8007a50 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8007a3c:	7dfa      	ldrb	r2, [r7, #23]
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	757b      	strb	r3, [r7, #21]
    ly++;
 8007a48:	7d3b      	ldrb	r3, [r7, #20]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8007a4e:	e79f      	b.n	8007990 <u8g2_font_decode_len+0x2a>
      break;
 8007a50:	bf00      	nop
  }
  lx += cnt;
 8007a52:	7d7a      	ldrb	r2, [r7, #21]
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	4413      	add	r3, r2
 8007a58:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8007a5a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8007a62:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	71da      	strb	r2, [r3, #7]
  
}
 8007a6a:	bf00      	nop
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3350      	adds	r3, #80	@ 0x50
 8007a80:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8007a94:	4619      	mov	r1, r3
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff fe91 	bl	80077be <u8g2_font_decode_get_unsigned_bits>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	b25a      	sxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8007aaa:	4619      	mov	r1, r3
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff fe86 	bl	80077be <u8g2_font_decode_get_unsigned_bits>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	b25a      	sxtb	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	7b1b      	ldrb	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf0c      	ite	eq
 8007acc:	2301      	moveq	r3, #1
 8007ace:	2300      	movne	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	735a      	strb	r2, [r3, #13]
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3350      	adds	r3, #80	@ 0x50
 8007aee:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ffbd 	bl	8007a72 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007afe:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8007b06:	4619      	mov	r1, r3
 8007b08:	6938      	ldr	r0, [r7, #16]
 8007b0a:	f7ff fea3 	bl	8007854 <u8g2_font_decode_get_signed_bits>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6938      	ldr	r0, [r7, #16]
 8007b1c:	f7ff fe9a 	bl	8007854 <u8g2_font_decode_get_signed_bits>
 8007b20:	4603      	mov	r3, r0
 8007b22:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6938      	ldr	r0, [r7, #16]
 8007b2e:	f7ff fe91 	bl	8007854 <u8g2_font_decode_get_signed_bits>
 8007b32:	4603      	mov	r3, r0
 8007b34:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f340 80cf 	ble.w	8007ce0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	7918      	ldrb	r0, [r3, #4]
 8007b46:	7bfa      	ldrb	r2, [r7, #15]
 8007b48:	7b7b      	ldrb	r3, [r7, #13]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	425b      	negs	r3, r3
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	b25a      	sxtb	r2, r3
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	7b9b      	ldrb	r3, [r3, #14]
 8007b58:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8007b5c:	f7ff fed0 	bl	8007900 <u8g2_add_vector_x>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	7958      	ldrb	r0, [r3, #5]
 8007b6c:	7bfa      	ldrb	r2, [r7, #15]
 8007b6e:	7b7b      	ldrb	r3, [r7, #13]
 8007b70:	4413      	add	r3, r2
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	425b      	negs	r3, r3
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	b25a      	sxtb	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	7b9b      	ldrb	r3, [r3, #14]
 8007b7e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8007b82:	f7ff fe8a 	bl	800789a <u8g2_add_vector_y>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	795b      	ldrb	r3, [r3, #5]
 8007b98:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8007b9e:	7d7b      	ldrb	r3, [r7, #21]
 8007ba0:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	7b9b      	ldrb	r3, [r3, #14]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d852      	bhi.n	8007c50 <u8g2_font_decode_glyph+0x170>
 8007baa:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <u8g2_font_decode_glyph+0xd0>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007c2d 	.word	0x08007c2d
      {
	case 0:
	    x1 += decode->glyph_width;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	7dbb      	ldrb	r3, [r7, #22]
 8007bca:	4413      	add	r3, r2
 8007bcc:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8007bce:	7bfa      	ldrb	r2, [r7, #15]
 8007bd0:	7d3b      	ldrb	r3, [r7, #20]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	753b      	strb	r3, [r7, #20]
	    break;
 8007bd6:	e03b      	b.n	8007c50 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	7dfa      	ldrb	r2, [r7, #23]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	3301      	adds	r3, #1
 8007be4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8007be6:	7dbb      	ldrb	r3, [r7, #22]
 8007be8:	3301      	adds	r3, #1
 8007bea:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	7d3b      	ldrb	r3, [r7, #20]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	753b      	strb	r3, [r7, #20]
	    break;
 8007bfa:	e029      	b.n	8007c50 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	7dfa      	ldrb	r2, [r7, #23]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	3301      	adds	r3, #1
 8007c14:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	7d7a      	ldrb	r2, [r7, #21]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007c1e:	7d7b      	ldrb	r3, [r7, #21]
 8007c20:	3301      	adds	r3, #1
 8007c22:	757b      	strb	r3, [r7, #21]
	    y1++;
 8007c24:	7d3b      	ldrb	r3, [r7, #20]
 8007c26:	3301      	adds	r3, #1
 8007c28:	753b      	strb	r3, [r7, #20]
	    break;	  
 8007c2a:	e011      	b.n	8007c50 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	7dbb      	ldrb	r3, [r7, #22]
 8007c30:	4413      	add	r3, r2
 8007c32:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	7d7a      	ldrb	r2, [r7, #21]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007c42:	7d7b      	ldrb	r3, [r7, #21]
 8007c44:	3301      	adds	r3, #1
 8007c46:	757b      	strb	r3, [r7, #21]
	    y1++;
 8007c48:	7d3b      	ldrb	r3, [r7, #20]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8007c4e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8007c50:	7db8      	ldrb	r0, [r7, #22]
 8007c52:	7d7a      	ldrb	r2, [r7, #21]
 8007c54:	7df9      	ldrb	r1, [r7, #23]
 8007c56:	7d3b      	ldrb	r3, [r7, #20]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fbb2 	bl	80083c6 <u8g2_IsIntersection>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <u8g2_font_decode_glyph+0x18e>
	return d;
 8007c68:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007c6c:	e03a      	b.n	8007ce4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2200      	movs	r2, #0
 8007c72:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2200      	movs	r2, #0
 8007c78:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8007c80:	4619      	mov	r1, r3
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f7ff fd9b 	bl	80077be <u8g2_font_decode_get_unsigned_bits>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8007c92:	4619      	mov	r1, r3
 8007c94:	6938      	ldr	r0, [r7, #16]
 8007c96:	f7ff fd92 	bl	80077be <u8g2_font_decode_get_unsigned_bits>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fe5e 	bl	8007966 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8007caa:	7abb      	ldrb	r3, [r7, #10]
 8007cac:	2201      	movs	r2, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fe58 	bl	8007966 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	6938      	ldr	r0, [r7, #16]
 8007cba:	f7ff fd80 	bl	80077be <u8g2_font_decode_get_unsigned_bits>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1ec      	bne.n	8007c9e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8007cca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	dd00      	ble.n	8007cd4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8007cd2:	e7d2      	b.n	8007c7a <u8g2_font_decode_glyph+0x19a>
	break;
 8007cd4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	7b1a      	ldrb	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  return d;
 8007ce0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cfc:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3317      	adds	r3, #23
 8007d02:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 8007d04:	887b      	ldrh	r3, [r7, #2]
 8007d06:	2bff      	cmp	r3, #255	@ 0xff
 8007d08:	d82a      	bhi.n	8007d60 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8007d0a:	887b      	ldrh	r3, [r7, #2]
 8007d0c:	2b60      	cmp	r3, #96	@ 0x60
 8007d0e:	d907      	bls.n	8007d20 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8007d16:	461a      	mov	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e009      	b.n	8007d34 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d906      	bls.n	8007d34 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d036      	beq.n	8007dac <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	887b      	ldrh	r3, [r7, #2]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d102      	bne.n	8007d50 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	e031      	b.n	8007db4 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8007d5e:	e7e9      	b.n	8007d34 <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8007d66:	461a      	mov	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 8007d74:	897b      	ldrh	r3, [r7, #10]
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	461a      	mov	r2, r3
 8007d82:	897b      	ldrh	r3, [r7, #10]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 8007d88:	897b      	ldrh	r3, [r7, #10]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 8007d8e:	897a      	ldrh	r2, [r7, #10]
 8007d90:	887b      	ldrh	r3, [r7, #2]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d102      	bne.n	8007d9c <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3303      	adds	r3, #3
 8007d9a:	e00b      	b.n	8007db4 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 8007daa:	e7e0      	b.n	8007d6e <u8g2_font_get_glyph_data+0x82>
	break;
 8007dac:	bf00      	nop
 8007dae:	e000      	b.n	8007db2 <u8g2_font_get_glyph_data+0xc6>
	break;
 8007db0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	70fb      	strb	r3, [r7, #3]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70bb      	strb	r3, [r7, #2]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  u8g2->font_decode.target_y = y;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	78ba      	ldrb	r2, [r7, #2]
 8007dea:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8007dee:	883b      	ldrh	r3, [r7, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff ff7a 	bl	8007cec <u8g2_font_get_glyph_data>
 8007df8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fe6c 	bl	8007ae0 <u8g2_font_decode_glyph>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	70fb      	strb	r3, [r7, #3]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70bb      	strb	r3, [r7, #2]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d833      	bhi.n	8007ec4 <u8g2_DrawGlyph+0x8c>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <u8g2_DrawGlyph+0x2c>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e89 	.word	0x08007e89
 8007e6c:	08007e9d 	.word	0x08007e9d
 8007e70:	08007eb1 	.word	0x08007eb1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	78bb      	ldrb	r3, [r7, #2]
 8007e82:	4413      	add	r3, r2
 8007e84:	70bb      	strb	r3, [r7, #2]
      break;
 8007e86:	e01d      	b.n	8007ec4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
 8007e90:	4603      	mov	r3, r0
 8007e92:	461a      	mov	r2, r3
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	70fb      	strb	r3, [r7, #3]
      break;
 8007e9a:	e013      	b.n	8007ec4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	78bb      	ldrb	r3, [r7, #2]
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	70bb      	strb	r3, [r7, #2]
      break;
 8007eae:	e009      	b.n	8007ec4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	70fb      	strb	r3, [r7, #3]
      break;
 8007ec2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8007ec4:	883b      	ldrh	r3, [r7, #0]
 8007ec6:	78ba      	ldrb	r2, [r7, #2]
 8007ec8:	78f9      	ldrb	r1, [r7, #3]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff ff78 	bl	8007dc0 <u8g2_font_draw_glyph>
 8007ed0:	4603      	mov	r3, r0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop

08007edc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	72fb      	strb	r3, [r7, #11]
 8007eea:	4613      	mov	r3, r2
 8007eec:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fc21 	bl	8008736 <u8x8_utf8_init>
  sum = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	4611      	mov	r1, r2
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8007f0a:	8abb      	ldrh	r3, [r7, #20]
 8007f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d038      	beq.n	8007f86 <u8g2_draw_string+0xaa>
      break;
    str++;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3301      	adds	r3, #1
 8007f18:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8007f1a:	8abb      	ldrh	r3, [r7, #20]
 8007f1c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d0e9      	beq.n	8007ef8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8007f24:	8abb      	ldrh	r3, [r7, #20]
 8007f26:	7aba      	ldrb	r2, [r7, #10]
 8007f28:	7af9      	ldrb	r1, [r7, #11]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7ff ff84 	bl	8007e38 <u8g2_DrawGlyph>
 8007f30:	4603      	mov	r3, r0
 8007f32:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d81e      	bhi.n	8007f7c <u8g2_draw_string+0xa0>
 8007f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f44 <u8g2_draw_string+0x68>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f55 	.word	0x08007f55
 8007f48:	08007f5f 	.word	0x08007f5f
 8007f4c:	08007f69 	.word	0x08007f69
 8007f50:	08007f73 	.word	0x08007f73
      {
	case 0:
	  x += delta;
 8007f54:	7afa      	ldrb	r2, [r7, #11]
 8007f56:	7cfb      	ldrb	r3, [r7, #19]
 8007f58:	4413      	add	r3, r2
 8007f5a:	72fb      	strb	r3, [r7, #11]
	  break;
 8007f5c:	e00e      	b.n	8007f7c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8007f5e:	7aba      	ldrb	r2, [r7, #10]
 8007f60:	7cfb      	ldrb	r3, [r7, #19]
 8007f62:	4413      	add	r3, r2
 8007f64:	72bb      	strb	r3, [r7, #10]
	  break;
 8007f66:	e009      	b.n	8007f7c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8007f68:	7afa      	ldrb	r2, [r7, #11]
 8007f6a:	7cfb      	ldrb	r3, [r7, #19]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	72fb      	strb	r3, [r7, #11]
	  break;
 8007f70:	e004      	b.n	8007f7c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8007f72:	7aba      	ldrb	r2, [r7, #10]
 8007f74:	7cfb      	ldrb	r3, [r7, #19]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	72bb      	strb	r3, [r7, #10]
	  break;
 8007f7a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8007f7c:	7dfa      	ldrb	r2, [r7, #23]
 8007f7e:	7cfb      	ldrb	r3, [r7, #19]
 8007f80:	4413      	add	r3, r2
 8007f82:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007f84:	e7b8      	b.n	8007ef8 <u8g2_draw_string+0x1c>
      break;
 8007f86:	bf00      	nop
    }
  }
  return sum;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop

08007f94 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	607b      	str	r3, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	72fb      	strb	r3, [r7, #11]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a06      	ldr	r2, [pc, #24]	@ (8007fc4 <u8g2_DrawStr+0x30>)
 8007faa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8007fac:	7aba      	ldrb	r2, [r7, #10]
 8007fae:	7af9      	ldrb	r1, [r7, #11]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff ff92 	bl	8007edc <u8g2_draw_string>
 8007fb8:	4603      	mov	r3, r0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	08008753 	.word	0x08008753

08007fc8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d05d      	beq.n	8008094 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f993 206d 	ldrsb.w	r2, [r3, #109]	@ 0x6d
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f993 206e 	ldrsb.w	r2, [r3, #110]	@ 0x6e
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d04d      	beq.n	8008096 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11c      	bne.n	800803e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f993 2079 	ldrsb.w	r2, [r3, #121]	@ 0x79
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f993 306f 	ldrsb.w	r3, [r3, #111]	@ 0x6f
 8008010:	429a      	cmp	r2, r3
 8008012:	da05      	bge.n	8008020 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f993 206f 	ldrsb.w	r2, [r3, #111]	@ 0x6f
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 800802c:	429a      	cmp	r2, r3
 800802e:	dd32      	ble.n	8008096 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f993 2070 	ldrsb.w	r2, [r3, #112]	@ 0x70
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 800803c:	e02b      	b.n	8008096 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f993 3079 	ldrsb.w	r3, [r3, #121]	@ 0x79
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 800804c:	4619      	mov	r1, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8008054:	440b      	add	r3, r1
 8008056:	429a      	cmp	r2, r3
 8008058:	da0d      	bge.n	8008076 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8008060:	b2da      	uxtb	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8008068:	b2db      	uxtb	r3, r3
 800806a:	4413      	add	r3, r2
 800806c:	b2db      	uxtb	r3, r3
 800806e:	b25a      	sxtb	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f993 207a 	ldrsb.w	r2, [r3, #122]	@ 0x7a
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f993 306c 	ldrsb.w	r3, [r3, #108]	@ 0x6c
 8008082:	429a      	cmp	r2, r3
 8008084:	dd07      	ble.n	8008096 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f993 206c 	ldrsb.w	r2, [r3, #108]	@ 0x6c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8008092:	e000      	b.n	8008096 <u8g2_UpdateRefHeight+0xce>
    return;
 8008094:	bf00      	nop
  }  
}
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  return 0;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a04      	ldr	r2, [pc, #16]	@ (80080d4 <u8g2_SetFontPosBaseline+0x1c>)
 80080c4:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	080080a1 	.word	0x080080a1

080080d8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d00b      	beq.n	8008104 <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	649a      	str	r2, [r3, #72]	@ 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3360      	adds	r3, #96	@ 0x60
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fab7 	bl	800766c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff ff62 	bl	8007fc8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8008126:	7dfa      	ldrb	r2, [r7, #23]
 8008128:	7dbb      	ldrb	r3, [r7, #22]
 800812a:	429a      	cmp	r2, r3
 800812c:	d911      	bls.n	8008152 <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800812e:	7dfa      	ldrb	r2, [r7, #23]
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	429a      	cmp	r2, r3
 8008134:	d208      	bcs.n	8008148 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	75bb      	strb	r3, [r7, #22]
      b--;
 800813a:	7dbb      	ldrb	r3, [r7, #22]
 800813c:	3b01      	subs	r3, #1
 800813e:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	7dba      	ldrb	r2, [r7, #22]
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e004      	b.n	8008152 <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	7dfa      	ldrb	r2, [r7, #23]
 8008150:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8008152:	7dfa      	ldrb	r2, [r7, #23]
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	429a      	cmp	r2, r3
 8008158:	d301      	bcc.n	800815e <u8g2_clip_intersection+0x52>
    return 0;
 800815a:	2300      	movs	r3, #0
 800815c:	e00c      	b.n	8008178 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 800815e:	7dbb      	ldrb	r3, [r7, #22]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <u8g2_clip_intersection+0x5c>
    return 0;
 8008164:	2300      	movs	r3, #0
 8008166:	e007      	b.n	8008178 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 8008168:	7dba      	ldrb	r2, [r7, #22]
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	429a      	cmp	r2, r3
 800816e:	d902      	bls.n	8008176 <u8g2_clip_intersection+0x6a>
    *bp = d;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	79fa      	ldrb	r2, [r7, #7]
 8008174:	701a      	strb	r2, [r3, #0]
    
  return 1;
 8008176:	2301      	movs	r3, #1
}
 8008178:	4618      	mov	r0, r3
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008184:	b5b0      	push	{r4, r5, r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af02      	add	r7, sp, #8
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	461a      	mov	r2, r3
 8008192:	4603      	mov	r3, r0
 8008194:	70fb      	strb	r3, [r7, #3]
 8008196:	460b      	mov	r3, r1
 8008198:	70bb      	strb	r3, [r7, #2]
 800819a:	4613      	mov	r3, r2
 800819c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 403b 	ldrb.w	r4, [r3, #59]	@ 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 503a 	ldrb.w	r5, [r3, #58]	@ 0x3a


  if ( dir == 0 )
 80081aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d11a      	bne.n	80081e8 <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 80081b2:	78bb      	ldrb	r3, [r7, #2]
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d93d      	bls.n	8008234 <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	73fb      	strb	r3, [r7, #15]
    a += len;
 80081bc:	7bfa      	ldrb	r2, [r7, #15]
 80081be:	787b      	ldrb	r3, [r7, #1]
 80081c0:	4413      	add	r3, r2
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 80081c6:	f107 010f 	add.w	r1, r7, #15
 80081ca:	1cfb      	adds	r3, r7, #3
 80081cc:	462a      	mov	r2, r5
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff ff9c 	bl	800810c <u8g2_clip_intersection>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02e      	beq.n	8008238 <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	707b      	strb	r3, [r7, #1]
    len -= x;
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	787a      	ldrb	r2, [r7, #1]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	707b      	strb	r3, [r7, #1]
 80081e6:	e019      	b.n	800821c <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	429d      	cmp	r5, r3
 80081ec:	d926      	bls.n	800823c <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 80081ee:	78bb      	ldrb	r3, [r7, #2]
 80081f0:	73fb      	strb	r3, [r7, #15]
    a += len;
 80081f2:	7bfa      	ldrb	r2, [r7, #15]
 80081f4:	787b      	ldrb	r3, [r7, #1]
 80081f6:	4413      	add	r3, r2
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 80081fc:	f107 010f 	add.w	r1, r7, #15
 8008200:	1cbb      	adds	r3, r7, #2
 8008202:	4622      	mov	r2, r4
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ff81 	bl	800810c <u8g2_clip_intersection>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d017      	beq.n	8008240 <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	707b      	strb	r3, [r7, #1]
    len -= y;
 8008214:	78bb      	ldrb	r3, [r7, #2]
 8008216:	787a      	ldrb	r2, [r7, #1]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8008220:	78f9      	ldrb	r1, [r7, #3]
 8008222:	78ba      	ldrb	r2, [r7, #2]
 8008224:	7878      	ldrb	r0, [r7, #1]
 8008226:	f897 3020 	ldrb.w	r3, [r7, #32]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	4603      	mov	r3, r0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	47a0      	blx	r4
 8008232:	e006      	b.n	8008242 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8008234:	bf00      	nop
 8008236:	e004      	b.n	8008242 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8008238:	bf00      	nop
 800823a:	e002      	b.n	8008242 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 800823c:	bf00      	nop
 800823e:	e000      	b.n	8008242 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8008240:	bf00      	nop
}
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bdb0      	pop	{r4, r5, r7, pc}

08008248 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b085      	sub	sp, #20
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	4608      	mov	r0, r1
 8008252:	4611      	mov	r1, r2
 8008254:	461a      	mov	r2, r3
 8008256:	4603      	mov	r3, r0
 8008258:	70fb      	strb	r3, [r7, #3]
 800825a:	460b      	mov	r3, r1
 800825c:	70bb      	strb	r3, [r7, #2]
 800825e:	4613      	mov	r3, r2
 8008260:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	b2db      	uxtb	r3, r3
 800826c:	78ba      	ldrb	r2, [r7, #2]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 8008272:	787b      	ldrb	r3, [r7, #1]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d116      	bne.n	80082a6 <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	429a      	cmp	r2, r3
 8008282:	d233      	bcs.n	80082ec <u8g2_draw_hv_line_4dir+0xa4>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800828a:	78ba      	ldrb	r2, [r7, #2]
 800828c:	429a      	cmp	r2, r3
 800828e:	d22d      	bcs.n	80082ec <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8008294:	7878      	ldrb	r0, [r7, #1]
 8008296:	78ba      	ldrb	r2, [r7, #2]
 8008298:	78f9      	ldrb	r1, [r7, #3]
 800829a:	7e3b      	ldrb	r3, [r7, #24]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4603      	mov	r3, r0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	47a0      	blx	r4
    return;
 80082a4:	e022      	b.n	80082ec <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 80082a6:	7e3b      	ldrb	r3, [r7, #24]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d107      	bne.n	80082bc <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	787b      	ldrb	r3, [r7, #1]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	70fb      	strb	r3, [r7, #3]
    x++;
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	3301      	adds	r3, #1
 80082b8:	70fb      	strb	r3, [r7, #3]
 80082ba:	e009      	b.n	80082d0 <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 80082bc:	7e3b      	ldrb	r3, [r7, #24]
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d106      	bne.n	80082d0 <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 80082c2:	78ba      	ldrb	r2, [r7, #2]
 80082c4:	787b      	ldrb	r3, [r7, #1]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	70bb      	strb	r3, [r7, #2]
    y++;
 80082ca:	78bb      	ldrb	r3, [r7, #2]
 80082cc:	3301      	adds	r3, #1
 80082ce:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 80082d0:	7e3b      	ldrb	r3, [r7, #24]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80082d8:	7878      	ldrb	r0, [r7, #1]
 80082da:	78ba      	ldrb	r2, [r7, #2]
 80082dc:	78f9      	ldrb	r1, [r7, #3]
 80082de:	7e3b      	ldrb	r3, [r7, #24]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	4603      	mov	r3, r0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ff4d 	bl	8008184 <u8g2_draw_hv_line_2dir>
 80082ea:	e000      	b.n	80082ee <u8g2_draw_hv_line_4dir+0xa6>
    return;
 80082ec:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}

080082f4 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	70fb      	strb	r3, [r7, #3]
 8008306:	460b      	mov	r3, r1
 8008308:	70bb      	strb	r3, [r7, #2]
 800830a:	4613      	mov	r3, r2
 800830c:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 800830e:	787b      	ldrb	r3, [r7, #1]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008318:	685c      	ldr	r4, [r3, #4]
 800831a:	7878      	ldrb	r0, [r7, #1]
 800831c:	78ba      	ldrb	r2, [r7, #2]
 800831e:	78f9      	ldrb	r1, [r7, #3]
 8008320:	7e3b      	ldrb	r3, [r7, #24]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4603      	mov	r3, r0
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	47a0      	blx	r4
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	bd90      	pop	{r4, r7, pc}

08008332 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  if ( color >= 3 )
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d903      	bls.n	8008354 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8008360:	b490      	push	{r4, r7}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4623      	mov	r3, r4
 8008370:	71fb      	strb	r3, [r7, #7]
 8008372:	4603      	mov	r3, r0
 8008374:	71bb      	strb	r3, [r7, #6]
 8008376:	460b      	mov	r3, r1
 8008378:	717b      	strb	r3, [r7, #5]
 800837a:	4613      	mov	r3, r2
 800837c:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800837e:	797a      	ldrb	r2, [r7, #5]
 8008380:	79bb      	ldrb	r3, [r7, #6]
 8008382:	429a      	cmp	r2, r3
 8008384:	d20d      	bcs.n	80083a2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8008386:	793a      	ldrb	r2, [r7, #4]
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	429a      	cmp	r2, r3
 800838c:	d901      	bls.n	8008392 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800838e:	2301      	movs	r3, #1
 8008390:	e014      	b.n	80083bc <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8008392:	797a      	ldrb	r2, [r7, #5]
 8008394:	793b      	ldrb	r3, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d901      	bls.n	800839e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800839a:	2301      	movs	r3, #1
 800839c:	e00e      	b.n	80083bc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	e00c      	b.n	80083bc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80083a2:	793a      	ldrb	r2, [r7, #4]
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d907      	bls.n	80083ba <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80083aa:	797a      	ldrb	r2, [r7, #5]
 80083ac:	793b      	ldrb	r3, [r7, #4]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d901      	bls.n	80083b6 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e002      	b.n	80083bc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e000      	b.n	80083bc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80083ba:	2300      	movs	r3, #0
    }
  }
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc90      	pop	{r4, r7}
 80083c4:	4770      	bx	lr

080083c6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	4608      	mov	r0, r1
 80083d0:	4611      	mov	r1, r2
 80083d2:	461a      	mov	r2, r3
 80083d4:	4603      	mov	r3, r0
 80083d6:	70fb      	strb	r3, [r7, #3]
 80083d8:	460b      	mov	r3, r1
 80083da:	70bb      	strb	r3, [r7, #2]
 80083dc:	4613      	mov	r3, r2
 80083de:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 0043 	ldrb.w	r0, [r3, #67]	@ 0x43
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 80083ec:	7c3b      	ldrb	r3, [r7, #16]
 80083ee:	78ba      	ldrb	r2, [r7, #2]
 80083f0:	f7ff ffb6 	bl	8008360 <u8g2_is_intersection_decision_tree>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <u8g2_IsIntersection+0x38>
    return 0; 
 80083fa:	2300      	movs	r3, #0
 80083fc:	e00a      	b.n	8008414 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 0041 	ldrb.w	r0, [r3, #65]	@ 0x41
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 1042 	ldrb.w	r1, [r3, #66]	@ 0x42
 800840a:	787b      	ldrb	r3, [r7, #1]
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	f7ff ffa7 	bl	8008360 <u8g2_is_intersection_decision_tree>
 8008412:	4603      	mov	r3, r0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	70fb      	strb	r3, [r7, #3]
 800842e:	460b      	mov	r3, r1
 8008430:	70bb      	strb	r3, [r7, #2]
 8008432:	4613      	mov	r3, r2
 8008434:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8008436:	78bb      	ldrb	r3, [r7, #2]
 8008438:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800843a:	7cfb      	ldrb	r3, [r7, #19]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8008442:	2301      	movs	r3, #1
 8008444:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8008446:	7c3a      	ldrb	r2, [r7, #16]
 8008448:	7cfb      	ldrb	r3, [r7, #19]
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800845e:	2b01      	cmp	r3, #1
 8008460:	d801      	bhi.n	8008466 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8008462:	7c3b      	ldrb	r3, [r7, #16]
 8008464:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800846c:	2b01      	cmp	r3, #1
 800846e:	d001      	beq.n	8008474 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8008470:	7c3b      	ldrb	r3, [r7, #16]
 8008472:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8008474:	78bb      	ldrb	r3, [r7, #2]
 8008476:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8008478:	89fb      	ldrh	r3, [r7, #14]
 800847a:	f023 0307 	bic.w	r3, r3, #7
 800847e:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	7c1b      	ldrb	r3, [r3, #16]
 8008486:	461a      	mov	r2, r3
 8008488:	89fb      	ldrh	r3, [r7, #14]
 800848a:	fb13 f302 	smulbb	r3, r3, r2
 800848e:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008494:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8008496:	89fb      	ldrh	r3, [r7, #14]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4413      	add	r3, r2
 800849c:	617b      	str	r3, [r7, #20]
  ptr += x;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4413      	add	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80084a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d117      	bne.n	80084de <u8g2_ll_hvline_vertical_top_lsb+0xc2>
  {
      do
      {
	*ptr |= or_mask;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	7cbb      	ldrb	r3, [r7, #18]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	7c7b      	ldrb	r3, [r7, #17]
 80084c2:	4053      	eors	r3, r2
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	701a      	strb	r2, [r3, #0]
	ptr++;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	3301      	adds	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
	len--;
 80084d0:	787b      	ldrb	r3, [r7, #1]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80084d6:	787b      	ldrb	r3, [r7, #1]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e8      	bne.n	80084ae <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80084dc:	e039      	b.n	8008552 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	781a      	ldrb	r2, [r3, #0]
 80084e2:	7cbb      	ldrb	r3, [r7, #18]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	7c7b      	ldrb	r3, [r7, #17]
 80084f2:	4053      	eors	r3, r2
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80084fa:	7cfb      	ldrb	r3, [r7, #19]
 80084fc:	3301      	adds	r3, #1
 80084fe:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8008500:	7cfb      	ldrb	r3, [r7, #19]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	74fb      	strb	r3, [r7, #19]
      len--;
 8008508:	787b      	ldrb	r3, [r7, #1]
 800850a:	3b01      	subs	r3, #1
 800850c:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800850e:	7cfb      	ldrb	r3, [r7, #19]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d115      	bne.n	8008540 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800851a:	461a      	mov	r2, r3
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	4413      	add	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008528:	2b01      	cmp	r3, #1
 800852a:	d801      	bhi.n	8008530 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800852c:	2301      	movs	r3, #1
 800852e:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008536:	2b01      	cmp	r3, #1
 8008538:	d008      	beq.n	800854c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800853a:	2301      	movs	r3, #1
 800853c:	747b      	strb	r3, [r7, #17]
 800853e:	e005      	b.n	800854c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8008540:	7cbb      	ldrb	r3, [r7, #18]
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8008546:	7c7b      	ldrb	r3, [r7, #17]
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800854c:	787b      	ldrb	r3, [r7, #1]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1c5      	bne.n	80084de <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	649a      	str	r2, [r3, #72]	@ 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	79fa      	ldrb	r2, [r7, #7]
 8008584:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  u8g2->bitmap_transparency = 0;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  u8g2->draw_color = 1;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  u8g2->is_auto_page_clear = 1;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  
  u8g2->cb = u8g2_cb;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update(u8g2);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff fd79 	bl	80080b8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
#endif
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80085e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	7c1b      	ldrb	r3, [r3, #16]
 80085fa:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b1f      	cmp	r3, #31
 8008600:	d901      	bls.n	8008606 <u8g2_update_dimension_common+0x30>
    t = 31;
 8008602:	231f      	movs	r3, #31
 8008604:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	7bfa      	ldrb	r2, [r7, #15]
 8008610:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800861a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7bfa      	ldrb	r2, [r7, #15]
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  t = u8g2->tile_buf_height;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008630:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800863a:	4413      	add	r3, r2
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	7c52      	ldrb	r2, [r2, #17]
 8008642:	4293      	cmp	r3, r2
 8008644:	dd07      	ble.n	8008656 <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	7c5a      	ldrb	r2, [r3, #17]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  u8g2->buf_y1 += t;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	4413      	add	r3, r2
 800867e:	b2da      	uxtb	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	22f0      	movs	r2, #240	@ 0xf0
 800868a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	8a9b      	ldrh	r3, [r3, #20]
 8008694:	2bf0      	cmp	r3, #240	@ 0xf0
 8008696:	d806      	bhi.n	80086a6 <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	8a9b      	ldrh	r3, [r3, #20]
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	8adb      	ldrh	r3, [r3, #22]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
#endif

}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ff84 	bl	80085d6 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af02      	add	r7, sp, #8
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	461a      	mov	r2, r3
 8008710:	4603      	mov	r3, r0
 8008712:	70fb      	strb	r3, [r7, #3]
 8008714:	460b      	mov	r3, r1
 8008716:	70bb      	strb	r3, [r7, #2]
 8008718:	4613      	mov	r3, r2
 800871a:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 800871c:	7878      	ldrb	r0, [r7, #1]
 800871e:	78ba      	ldrb	r2, [r7, #2]
 8008720:	78f9      	ldrb	r1, [r7, #3]
 8008722:	7c3b      	ldrb	r3, [r7, #16]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4603      	mov	r3, r0
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff fd8d 	bl	8008248 <u8g2_draw_hv_line_4dir>
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <u8x8_ascii_next+0x18>
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	2b0a      	cmp	r3, #10
 8008768:	d102      	bne.n	8008770 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800876a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800876e:	e001      	b.n	8008774 <u8x8_ascii_next+0x22>
  return b;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	b29b      	uxth	r3, r3
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8008780:	b590      	push	{r4, r7, lr}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691c      	ldr	r4, [r3, #16]
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	2300      	movs	r3, #0
 8008794:	2120      	movs	r1, #32
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	47a0      	blx	r4
 800879a:	4603      	mov	r3, r0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80087a4:	b590      	push	{r4, r7, lr}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	460b      	mov	r3, r1
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691c      	ldr	r4, [r3, #16]
 80087b6:	7afa      	ldrb	r2, [r7, #11]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2117      	movs	r1, #23
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	47a0      	blx	r4
 80087c0:	4603      	mov	r3, r0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd90      	pop	{r4, r7, pc}

080087ca <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80087d6:	1cfb      	adds	r3, r7, #3
 80087d8:	461a      	mov	r2, r3
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ffe1 	bl	80087a4 <u8x8_byte_SendBytes>
 80087e2:	4603      	mov	r3, r0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68dc      	ldr	r4, [r3, #12]
 80087fc:	78fa      	ldrb	r2, [r7, #3]
 80087fe:	2300      	movs	r3, #0
 8008800:	2115      	movs	r1, #21
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	47a0      	blx	r4
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	bd90      	pop	{r4, r7, pc}

08008810 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68dc      	ldr	r4, [r3, #12]
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	2300      	movs	r3, #0
 8008824:	2116      	movs	r1, #22
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	47a0      	blx	r4
 800882a:	4603      	mov	r3, r0
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bd90      	pop	{r4, r7, pc}

08008834 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8008834:	b590      	push	{r4, r7, lr}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	460b      	mov	r3, r1
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68dc      	ldr	r4, [r3, #12]
 8008846:	7afa      	ldrb	r2, [r7, #11]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2117      	movs	r1, #23
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	47a0      	blx	r4
 8008850:	4603      	mov	r3, r0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	bd90      	pop	{r4, r7, pc}

0800885a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800885a:	b590      	push	{r4, r7, lr}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68dc      	ldr	r4, [r3, #12]
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	2118      	movs	r1, #24
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	47a0      	blx	r4
 8008870:	4603      	mov	r3, r0
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	bd90      	pop	{r4, r7, pc}

0800887a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800887a:	b590      	push	{r4, r7, lr}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68dc      	ldr	r4, [r3, #12]
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	2119      	movs	r1, #25
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	47a0      	blx	r4
 8008890:	4603      	mov	r3, r0
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bd90      	pop	{r4, r7, pc}

0800889a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800889a:	b590      	push	{r4, r7, lr}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	73fb      	strb	r3, [r7, #15]
    data++;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80088b4:	d031      	beq.n	800891a <u8x8_cad_SendSequence+0x80>
 80088b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80088b8:	dc3d      	bgt.n	8008936 <u8x8_cad_SendSequence+0x9c>
 80088ba:	2b19      	cmp	r3, #25
 80088bc:	dc3b      	bgt.n	8008936 <u8x8_cad_SendSequence+0x9c>
 80088be:	2b18      	cmp	r3, #24
 80088c0:	da23      	bge.n	800890a <u8x8_cad_SendSequence+0x70>
 80088c2:	2b16      	cmp	r3, #22
 80088c4:	dc02      	bgt.n	80088cc <u8x8_cad_SendSequence+0x32>
 80088c6:	2b15      	cmp	r3, #21
 80088c8:	da03      	bge.n	80088d2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80088ca:	e034      	b.n	8008936 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80088cc:	2b17      	cmp	r3, #23
 80088ce:	d00e      	beq.n	80088ee <u8x8_cad_SendSequence+0x54>
	return;
 80088d0:	e031      	b.n	8008936 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68dc      	ldr	r4, [r3, #12]
 80088dc:	7bba      	ldrb	r2, [r7, #14]
 80088de:	7bf9      	ldrb	r1, [r7, #15]
 80088e0:	2300      	movs	r3, #0
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	47a0      	blx	r4
	  data++;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	603b      	str	r3, [r7, #0]
	  break;
 80088ec:	e022      	b.n	8008934 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80088f4:	f107 030e 	add.w	r3, r7, #14
 80088f8:	461a      	mov	r2, r3
 80088fa:	2101      	movs	r1, #1
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff ff99 	bl	8008834 <u8x8_cad_SendData>
	  data++;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	603b      	str	r3, [r7, #0]
	  break;
 8008908:	e014      	b.n	8008934 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68dc      	ldr	r4, [r3, #12]
 800890e:	7bf9      	ldrb	r1, [r7, #15]
 8008910:	2300      	movs	r3, #0
 8008912:	2200      	movs	r2, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	47a0      	blx	r4
	  break;
 8008918:	e00c      	b.n	8008934 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	461a      	mov	r2, r3
 8008924:	2129      	movs	r1, #41	@ 0x29
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9cc 	bl	8008cc4 <u8x8_gpio_call>
	  data++;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	603b      	str	r3, [r7, #0]
	  break;
 8008932:	bf00      	nop
    cmd = *data;
 8008934:	e7b6      	b.n	80088a4 <u8x8_cad_SendSequence+0xa>
	return;
 8008936:	bf00      	nop
    }
  }
}
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	bd90      	pop	{r4, r7, pc}
	...

08008940 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	72fb      	strb	r3, [r7, #11]
 800894e:	4613      	mov	r3, r2
 8008950:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	3b14      	subs	r3, #20
 8008956:	2b05      	cmp	r3, #5
 8008958:	d82f      	bhi.n	80089ba <u8x8_cad_001+0x7a>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <u8x8_cad_001+0x20>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	080089a9 	.word	0x080089a9
 8008964:	08008979 	.word	0x08008979
 8008968:	0800898d 	.word	0x0800898d
 800896c:	080089a1 	.word	0x080089a1
 8008970:	080089a9 	.word	0x080089a9
 8008974:	080089a9 	.word	0x080089a9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8008978:	2100      	movs	r1, #0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f7ff ff00 	bl	8008780 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8008980:	7abb      	ldrb	r3, [r7, #10]
 8008982:	4619      	mov	r1, r3
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff ff20 	bl	80087ca <u8x8_byte_SendByte>
      break;
 800898a:	e018      	b.n	80089be <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800898c:	2100      	movs	r1, #0
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f7ff fef6 	bl	8008780 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8008994:	7abb      	ldrb	r3, [r7, #10]
 8008996:	4619      	mov	r1, r3
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f7ff ff16 	bl	80087ca <u8x8_byte_SendByte>
      break;
 800899e:	e00e      	b.n	80089be <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80089a0:	2101      	movs	r1, #1
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff feec 	bl	8008780 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691c      	ldr	r4, [r3, #16]
 80089ac:	7aba      	ldrb	r2, [r7, #10]
 80089ae:	7af9      	ldrb	r1, [r7, #11]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	47a0      	blx	r4
 80089b6:	4603      	mov	r3, r0
 80089b8:	e002      	b.n	80089c0 <u8x8_cad_001+0x80>
    default:
      return 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e000      	b.n	80089c0 <u8x8_cad_001+0x80>
  }
  return 1;
 80089be:	2301      	movs	r3, #1
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607b      	str	r3, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
 80089d6:	4613      	mov	r3, r2
 80089d8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d006      	beq.n	80089ee <u8x8_d_ssd1309_generic+0x26>
 80089e0:	2b0f      	cmp	r3, #15
 80089e2:	dc62      	bgt.n	8008aaa <u8x8_d_ssd1309_generic+0xe2>
 80089e4:	2b0b      	cmp	r3, #11
 80089e6:	d043      	beq.n	8008a70 <u8x8_d_ssd1309_generic+0xa8>
 80089e8:	2b0e      	cmp	r3, #14
 80089ea:	d04e      	beq.n	8008a8a <u8x8_d_ssd1309_generic+0xc2>
 80089ec:	e05d      	b.n	8008aaa <u8x8_d_ssd1309_generic+0xe2>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7ff ff33 	bl	800885a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	795b      	ldrb	r3, [r3, #5]
 80089f8:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	7f9a      	ldrb	r2, [r3, #30]
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	4413      	add	r3, r2
 8008a08:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	091b      	lsrs	r3, r3, #4
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	f043 0310 	orr.w	r3, r3, #16
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff fee7 	bl	80087ec <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff fef1 	bl	8008810 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	799b      	ldrb	r3, [r3, #6]
 8008a32:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff fee8 	bl	8008810 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8008a4c:	7dbb      	ldrb	r3, [r7, #22]
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4619      	mov	r1, r3
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff feec 	bl	8008834 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8008a5c:	7abb      	ldrb	r3, [r7, #10]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8008a62:	7abb      	ldrb	r3, [r7, #10]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1eb      	bne.n	8008a40 <u8x8_d_ssd1309_generic+0x78>
      
      u8x8_cad_EndTransfer(u8x8);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff ff06 	bl	800887a <u8x8_cad_EndTransfer>
      break;
 8008a6e:	e01e      	b.n	8008aae <u8x8_d_ssd1309_generic+0xe6>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8008a70:	7abb      	ldrb	r3, [r7, #10]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d104      	bne.n	8008a80 <u8x8_d_ssd1309_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 8008a76:	4910      	ldr	r1, [pc, #64]	@ (8008ab8 <u8x8_d_ssd1309_generic+0xf0>)
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff ff0e 	bl	800889a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 8008a7e:	e016      	b.n	8008aae <u8x8_d_ssd1309_generic+0xe6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8008a80:	490e      	ldr	r1, [pc, #56]	@ (8008abc <u8x8_d_ssd1309_generic+0xf4>)
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7ff ff09 	bl	800889a <u8x8_cad_SendSequence>
      break;
 8008a88:	e011      	b.n	8008aae <u8x8_d_ssd1309_generic+0xe6>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f7ff fee5 	bl	800885a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8008a90:	2181      	movs	r1, #129	@ 0x81
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff feaa 	bl	80087ec <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8008a98:	7abb      	ldrb	r3, [r7, #10]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff feb7 	bl	8008810 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff fee9 	bl	800887a <u8x8_cad_EndTransfer>
      break;
 8008aa8:	e001      	b.n	8008aae <u8x8_d_ssd1309_generic+0xe6>
#endif
    default:
      return 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e000      	b.n	8008ab0 <u8x8_d_ssd1309_generic+0xe8>
  }
  return 1;
 8008aae:	2301      	movs	r3, #1
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	08015ef0 	.word	0x08015ef0
 8008abc:	08015ef8 	.word	0x08015ef8

08008ac0 <u8x8_d_ssd1309_128x64_noname0>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	72fb      	strb	r3, [r7, #11]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8008ad2:	7aba      	ldrb	r2, [r7, #10]
 8008ad4:	7af9      	ldrb	r1, [r7, #11]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff ff75 	bl	80089c8 <u8x8_d_ssd1309_generic>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <u8x8_d_ssd1309_128x64_noname0+0x28>
    return 1;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e030      	b.n	8008b4a <u8x8_d_ssd1309_128x64_noname0+0x8a>
  
  switch(msg)
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	2b0d      	cmp	r3, #13
 8008aec:	d006      	beq.n	8008afc <u8x8_d_ssd1309_128x64_noname0+0x3c>
 8008aee:	2b0d      	cmp	r3, #13
 8008af0:	dc28      	bgt.n	8008b44 <u8x8_d_ssd1309_128x64_noname0+0x84>
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d021      	beq.n	8008b3a <u8x8_d_ssd1309_128x64_noname0+0x7a>
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	d017      	beq.n	8008b2a <u8x8_d_ssd1309_128x64_noname0+0x6a>
 8008afa:	e023      	b.n	8008b44 <u8x8_d_ssd1309_128x64_noname0+0x84>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8008afc:	7abb      	ldrb	r3, [r7, #10]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <u8x8_d_ssd1309_128x64_noname0+0x56>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8008b02:	4914      	ldr	r1, [pc, #80]	@ (8008b54 <u8x8_d_ssd1309_128x64_noname0+0x94>)
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff fec8 	bl	800889a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	7c9a      	ldrb	r2, [r3, #18]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	779a      	strb	r2, [r3, #30]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8008b14:	e018      	b.n	8008b48 <u8x8_d_ssd1309_128x64_noname0+0x88>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8008b16:	4910      	ldr	r1, [pc, #64]	@ (8008b58 <u8x8_d_ssd1309_128x64_noname0+0x98>)
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7ff febe 	bl	800889a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	7cda      	ldrb	r2, [r3, #19]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	779a      	strb	r2, [r3, #30]
      break;
 8008b28:	e00e      	b.n	8008b48 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f82d 	bl	8008b8a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8008b30:	490a      	ldr	r1, [pc, #40]	@ (8008b5c <u8x8_d_ssd1309_128x64_noname0+0x9c>)
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff feb1 	bl	800889a <u8x8_cad_SendSequence>
      break;
 8008b38:	e006      	b.n	8008b48 <u8x8_d_ssd1309_128x64_noname0+0x88>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname0_display_info);
 8008b3a:	4909      	ldr	r1, [pc, #36]	@ (8008b60 <u8x8_d_ssd1309_128x64_noname0+0xa0>)
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f811 	bl	8008b64 <u8x8_d_helper_display_setup_memory>
      break;
 8008b42:	e001      	b.n	8008b48 <u8x8_d_ssd1309_128x64_noname0+0x88>
    default:
      return 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e000      	b.n	8008b4a <u8x8_d_ssd1309_128x64_noname0+0x8a>
  }
  return 1;
 8008b48:	2301      	movs	r3, #1
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	08015f00 	.word	0x08015f00
 8008b58:	08015f08 	.word	0x08015f08
 8008b5c:	08015f10 	.word	0x08015f10
 8008b60:	08015f3c 	.word	0x08015f3c

08008b64 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	7c9a      	ldrb	r2, [r3, #18]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	779a      	strb	r2, [r3, #30]
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8008b8a:	b590      	push	{r4, r7, lr}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695c      	ldr	r4, [r3, #20]
 8008b96:	2300      	movs	r3, #0
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2128      	movs	r1, #40	@ 0x28
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68dc      	ldr	r4, [r3, #12]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2114      	movs	r1, #20
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8008bae:	2201      	movs	r2, #1
 8008bb0:	214b      	movs	r1, #75	@ 0x4b
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f886 	bl	8008cc4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	791b      	ldrb	r3, [r3, #4]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2129      	movs	r1, #41	@ 0x29
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f87e 	bl	8008cc4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8008bc8:	2200      	movs	r2, #0
 8008bca:	214b      	movs	r1, #75	@ 0x4b
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f879 	bl	8008cc4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	791b      	ldrb	r3, [r3, #4]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2129      	movs	r1, #41	@ 0x29
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f871 	bl	8008cc4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8008be2:	2201      	movs	r2, #1
 8008be4:	214b      	movs	r1, #75	@ 0x4b
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f86c 	bl	8008cc4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	795b      	ldrb	r3, [r3, #5]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2129      	movs	r1, #41	@ 0x29
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f864 	bl	8008cc4 <u8x8_gpio_call>
}    
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd90      	pop	{r4, r7, pc}

08008c04 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	70fb      	strb	r3, [r7, #3]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70bb      	strb	r3, [r7, #2]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8008c22:	78bb      	ldrb	r3, [r7, #2]
 8008c24:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8008c26:	787b      	ldrb	r3, [r7, #1]
 8008c28:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689c      	ldr	r4, [r3, #8]
 8008c32:	f107 0308 	add.w	r3, r7, #8
 8008c36:	2201      	movs	r2, #1
 8008c38:	210f      	movs	r1, #15
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	47a0      	blx	r4
 8008c3e:	4603      	mov	r3, r0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd90      	pop	{r4, r7, pc}

08008c48 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8008c48:	b590      	push	{r4, r7, lr}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689c      	ldr	r4, [r3, #8]
 8008c54:	2300      	movs	r3, #0
 8008c56:	2200      	movs	r2, #0
 8008c58:	2109      	movs	r1, #9
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	47a0      	blx	r4
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd90      	pop	{r4, r7, pc}

08008c66 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8008c66:	b590      	push	{r4, r7, lr}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689c      	ldr	r4, [r3, #8]
 8008c72:	2300      	movs	r3, #0
 8008c74:	2200      	movs	r2, #0
 8008c76:	210a      	movs	r1, #10
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	47a0      	blx	r4
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd90      	pop	{r4, r7, pc}

08008c84 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689c      	ldr	r4, [r3, #8]
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	2300      	movs	r3, #0
 8008c98:	210b      	movs	r1, #11
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	47a0      	blx	r4
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd90      	pop	{r4, r7, pc}

08008ca6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8008ca6:	b590      	push	{r4, r7, lr}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689c      	ldr	r4, [r3, #8]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2110      	movs	r1, #16
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	47a0      	blx	r4
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd90      	pop	{r4, r7, pc}

08008cc4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	695c      	ldr	r4, [r3, #20]
 8008cd8:	78ba      	ldrb	r2, [r7, #2]
 8008cda:	78f9      	ldrb	r1, [r7, #3]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	47a0      	blx	r4
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}

08008cea <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	72fb      	strb	r3, [r7, #11]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a11      	ldr	r2, [pc, #68]	@ (8008d64 <u8x8_SetupDefaults+0x58>)
 8008d1e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a10      	ldr	r2, [pc, #64]	@ (8008d64 <u8x8_SetupDefaults+0x58>)
 8008d24:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a0e      	ldr	r2, [pc, #56]	@ (8008d64 <u8x8_SetupDefaults+0x58>)
 8008d2a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008d64 <u8x8_SetupDefaults+0x58>)
 8008d30:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->i2c_address = 255;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	22ff      	movs	r2, #255	@ 0xff
 8008d4c:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	22ff      	movs	r2, #255	@ 0xff
 8008d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	08008ceb 	.word	0x08008ceb

08008d68 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff ffc8 	bl	8008d0c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f7ff ff57 	bl	8008c48 <u8x8_SetupMemory>
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008daa:	463b      	mov	r3, r7
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	609a      	str	r2, [r3, #8]
 8008db4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008db6:	4b21      	ldr	r3, [pc, #132]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008db8:	4a21      	ldr	r2, [pc, #132]	@ (8008e40 <MX_ADC1_Init+0x9c>)
 8008dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008dbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008dc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008dca:	4b1c      	ldr	r3, [pc, #112]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008dd6:	4b19      	ldr	r3, [pc, #100]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008dde:	4b17      	ldr	r3, [pc, #92]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008de4:	4b15      	ldr	r3, [pc, #84]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008de6:	4a17      	ldr	r2, [pc, #92]	@ (8008e44 <MX_ADC1_Init+0xa0>)
 8008de8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008dea:	4b14      	ldr	r3, [pc, #80]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008df0:	4b12      	ldr	r3, [pc, #72]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008df6:	4b11      	ldr	r3, [pc, #68]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008e00:	2201      	movs	r2, #1
 8008e02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008e04:	480d      	ldr	r0, [pc, #52]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008e06:	f001 f863 	bl	8009ed0 <HAL_ADC_Init>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008e10:	f000 fb3e 	bl	8009490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008e1c:	2307      	movs	r3, #7
 8008e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e20:	463b      	mov	r3, r7
 8008e22:	4619      	mov	r1, r3
 8008e24:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <MX_ADC1_Init+0x98>)
 8008e26:	f001 fa35 	bl	800a294 <HAL_ADC_ConfigChannel>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008e30:	f000 fb2e 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20001fdc 	.word	0x20001fdc
 8008e40:	40012000 	.word	0x40012000
 8008e44:	0f000001 	.word	0x0f000001

08008e48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008e4e:	463b      	mov	r3, r7
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8008e5a:	4b21      	ldr	r3, [pc, #132]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e5c:	4a21      	ldr	r2, [pc, #132]	@ (8008ee4 <MX_ADC2_Init+0x9c>)
 8008e5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008e60:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008e66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8008e74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008e7a:	4b19      	ldr	r3, [pc, #100]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008e82:	4b17      	ldr	r3, [pc, #92]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008e88:	4b15      	ldr	r3, [pc, #84]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e8a:	4a17      	ldr	r2, [pc, #92]	@ (8008ee8 <MX_ADC2_Init+0xa0>)
 8008e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008e8e:	4b14      	ldr	r3, [pc, #80]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8008e94:	4b12      	ldr	r3, [pc, #72]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8008e9a:	4b11      	ldr	r3, [pc, #68]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008ea8:	480d      	ldr	r0, [pc, #52]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008eaa:	f001 f811 	bl	8009ed0 <HAL_ADC_Init>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8008eb4:	f000 faec 	bl	8009490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008eb8:	230a      	movs	r3, #10
 8008eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008ec0:	2307      	movs	r3, #7
 8008ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4805      	ldr	r0, [pc, #20]	@ (8008ee0 <MX_ADC2_Init+0x98>)
 8008eca:	f001 f9e3 	bl	800a294 <HAL_ADC_ConfigChannel>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8008ed4:	f000 fadc 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20002024 	.word	0x20002024
 8008ee4:	40012100 	.word	0x40012100
 8008ee8:	0f000001 	.word	0x0f000001

08008eec <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	609a      	str	r2, [r3, #8]
 8008efc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8008efe:	4b21      	ldr	r3, [pc, #132]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f00:	4a21      	ldr	r2, [pc, #132]	@ (8008f88 <MX_ADC3_Init+0x9c>)
 8008f02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008f04:	4b1f      	ldr	r3, [pc, #124]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008f0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8008f12:	4b1c      	ldr	r3, [pc, #112]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008f18:	4b1a      	ldr	r3, [pc, #104]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008f1e:	4b19      	ldr	r3, [pc, #100]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008f26:	4b17      	ldr	r3, [pc, #92]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008f2c:	4b15      	ldr	r3, [pc, #84]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f2e:	4a17      	ldr	r2, [pc, #92]	@ (8008f8c <MX_ADC3_Init+0xa0>)
 8008f30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008f32:	4b14      	ldr	r3, [pc, #80]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8008f38:	4b12      	ldr	r3, [pc, #72]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8008f3e:	4b11      	ldr	r3, [pc, #68]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008f46:	4b0f      	ldr	r3, [pc, #60]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f48:	2201      	movs	r2, #1
 8008f4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008f4c:	480d      	ldr	r0, [pc, #52]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f4e:	f000 ffbf 	bl	8009ed0 <HAL_ADC_Init>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8008f58:	f000 fa9a 	bl	8009490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008f5c:	230b      	movs	r3, #11
 8008f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008f64:	2307      	movs	r3, #7
 8008f66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008f68:	463b      	mov	r3, r7
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4805      	ldr	r0, [pc, #20]	@ (8008f84 <MX_ADC3_Init+0x98>)
 8008f6e:	f001 f991 	bl	800a294 <HAL_ADC_ConfigChannel>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8008f78:	f000 fa8a 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	2000206c 	.word	0x2000206c
 8008f88:	40012200 	.word	0x40012200
 8008f8c:	0f000001 	.word	0x0f000001

08008f90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08e      	sub	sp, #56	@ 0x38
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
 8008fa4:	60da      	str	r2, [r3, #12]
 8008fa6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a45      	ldr	r2, [pc, #276]	@ (80090c4 <HAL_ADC_MspInit+0x134>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d128      	bne.n	8009004 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	623b      	str	r3, [r7, #32]
 8008fb6:	4b44      	ldr	r3, [pc, #272]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fba:	4a43      	ldr	r2, [pc, #268]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8008fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008fc2:	4b41      	ldr	r3, [pc, #260]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8008fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61fb      	str	r3, [r7, #28]
 8008fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd6:	4a3c      	ldr	r2, [pc, #240]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8008fd8:	f043 0301 	orr.w	r3, r3, #1
 8008fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fde:	4b3a      	ldr	r3, [pc, #232]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008fea:	2301      	movs	r3, #1
 8008fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4833      	ldr	r0, [pc, #204]	@ (80090cc <HAL_ADC_MspInit+0x13c>)
 8008ffe:	f001 fc6b 	bl	800a8d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8009002:	e05a      	b.n	80090ba <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a31      	ldr	r2, [pc, #196]	@ (80090d0 <HAL_ADC_MspInit+0x140>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d128      	bne.n	8009060 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	4b2d      	ldr	r3, [pc, #180]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009016:	4a2c      	ldr	r2, [pc, #176]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800901c:	6453      	str	r3, [r2, #68]	@ 0x44
 800901e:	4b2a      	ldr	r3, [pc, #168]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009022:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	4b26      	ldr	r3, [pc, #152]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009032:	4a25      	ldr	r2, [pc, #148]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009034:	f043 0304 	orr.w	r3, r3, #4
 8009038:	6313      	str	r3, [r2, #48]	@ 0x30
 800903a:	4b23      	ldr	r3, [pc, #140]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 800903c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903e:	f003 0304 	and.w	r3, r3, #4
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009046:	2301      	movs	r3, #1
 8009048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800904a:	2303      	movs	r3, #3
 800904c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904e:	2300      	movs	r3, #0
 8009050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009056:	4619      	mov	r1, r3
 8009058:	481e      	ldr	r0, [pc, #120]	@ (80090d4 <HAL_ADC_MspInit+0x144>)
 800905a:	f001 fc3d 	bl	800a8d8 <HAL_GPIO_Init>
}
 800905e:	e02c      	b.n	80090ba <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a1c      	ldr	r2, [pc, #112]	@ (80090d8 <HAL_ADC_MspInit+0x148>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d127      	bne.n	80090ba <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	4b16      	ldr	r3, [pc, #88]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	4a15      	ldr	r2, [pc, #84]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009074:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009078:	6453      	str	r3, [r2, #68]	@ 0x44
 800907a:	4b13      	ldr	r3, [pc, #76]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 800907c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	4b0f      	ldr	r3, [pc, #60]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 800908c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908e:	4a0e      	ldr	r2, [pc, #56]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009090:	f043 0304 	orr.w	r3, r3, #4
 8009094:	6313      	str	r3, [r2, #48]	@ 0x30
 8009096:	4b0c      	ldr	r3, [pc, #48]	@ (80090c8 <HAL_ADC_MspInit+0x138>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909a:	f003 0304 	and.w	r3, r3, #4
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80090a2:	2302      	movs	r3, #2
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80090a6:	2303      	movs	r3, #3
 80090a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090b2:	4619      	mov	r1, r3
 80090b4:	4807      	ldr	r0, [pc, #28]	@ (80090d4 <HAL_ADC_MspInit+0x144>)
 80090b6:	f001 fc0f 	bl	800a8d8 <HAL_GPIO_Init>
}
 80090ba:	bf00      	nop
 80090bc:	3738      	adds	r7, #56	@ 0x38
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40012000 	.word	0x40012000
 80090c8:	40023800 	.word	0x40023800
 80090cc:	40020000 	.word	0x40020000
 80090d0:	40012100 	.word	0x40012100
 80090d4:	40020800 	.word	0x40020800
 80090d8:	40012200 	.word	0x40012200

080090dc <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0


	app_mainC();
 80090e0:	f7f8 fe38 	bl	8001d54 <app_mainC>
    vTaskStartScheduler();
 80090e4:	f006 ffb8 	bl	8010058 <vTaskStartScheduler>
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}

080090ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08a      	sub	sp, #40	@ 0x28
 80090f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f2:	f107 0314 	add.w	r3, r7, #20
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	609a      	str	r2, [r3, #8]
 80090fe:	60da      	str	r2, [r3, #12]
 8009100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
 8009106:	4b52      	ldr	r3, [pc, #328]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800910a:	4a51      	ldr	r2, [pc, #324]	@ (8009250 <MX_GPIO_Init+0x164>)
 800910c:	f043 0304 	orr.w	r3, r3, #4
 8009110:	6313      	str	r3, [r2, #48]	@ 0x30
 8009112:	4b4f      	ldr	r3, [pc, #316]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	613b      	str	r3, [r7, #16]
 800911c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	4b4b      	ldr	r3, [pc, #300]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009126:	4a4a      	ldr	r2, [pc, #296]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912c:	6313      	str	r3, [r2, #48]	@ 0x30
 800912e:	4b48      	ldr	r3, [pc, #288]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	4b44      	ldr	r3, [pc, #272]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	4a43      	ldr	r2, [pc, #268]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	6313      	str	r3, [r2, #48]	@ 0x30
 800914a:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <MX_GPIO_Init+0x164>)
 800914c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	60bb      	str	r3, [r7, #8]
 8009154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	4b3d      	ldr	r3, [pc, #244]	@ (8009250 <MX_GPIO_Init+0x164>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915e:	4a3c      	ldr	r2, [pc, #240]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009160:	f043 0302 	orr.w	r3, r3, #2
 8009164:	6313      	str	r3, [r2, #48]	@ 0x30
 8009166:	4b3a      	ldr	r3, [pc, #232]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	607b      	str	r3, [r7, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009172:	2300      	movs	r3, #0
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	4b36      	ldr	r3, [pc, #216]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917a:	4a35      	ldr	r2, [pc, #212]	@ (8009250 <MX_GPIO_Init+0x164>)
 800917c:	f043 0308 	orr.w	r3, r3, #8
 8009180:	6313      	str	r3, [r2, #48]	@ 0x30
 8009182:	4b33      	ldr	r3, [pc, #204]	@ (8009250 <MX_GPIO_Init+0x164>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayCont_GPIO_Port, RelayCont_Pin, GPIO_PIN_RESET);
 800918e:	2200      	movs	r2, #0
 8009190:	2108      	movs	r1, #8
 8009192:	4830      	ldr	r0, [pc, #192]	@ (8009254 <MX_GPIO_Init+0x168>)
 8009194:	f001 fd54 	bl	800ac40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 8009198:	2200      	movs	r2, #0
 800919a:	2102      	movs	r1, #2
 800919c:	482e      	ldr	r0, [pc, #184]	@ (8009258 <MX_GPIO_Init+0x16c>)
 800919e:	f001 fd4f 	bl	800ac40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DC_Pin|DISPLAY_RES_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 80091a2:	2200      	movs	r2, #0
 80091a4:	f245 0120 	movw	r1, #20512	@ 0x5020
 80091a8:	482c      	ldr	r0, [pc, #176]	@ (800925c <MX_GPIO_Init+0x170>)
 80091aa:	f001 fd49 	bl	800ac40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cont_GPIO_Port, Relay_cont_Pin, GPIO_PIN_RESET);
 80091ae:	2200      	movs	r2, #0
 80091b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091b4:	482a      	ldr	r0, [pc, #168]	@ (8009260 <MX_GPIO_Init+0x174>)
 80091b6:	f001 fd43 	bl	800ac40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RelayCont_Pin;
 80091ba:	2308      	movs	r3, #8
 80091bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091be:	2301      	movs	r3, #1
 80091c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091c6:	2300      	movs	r3, #0
 80091c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RelayCont_GPIO_Port, &GPIO_InitStruct);
 80091ca:	f107 0314 	add.w	r3, r7, #20
 80091ce:	4619      	mov	r1, r3
 80091d0:	4820      	ldr	r0, [pc, #128]	@ (8009254 <MX_GPIO_Init+0x168>)
 80091d2:	f001 fb81 	bl	800a8d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 80091d6:	2302      	movs	r3, #2
 80091d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091da:	2301      	movs	r3, #1
 80091dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091e2:	2300      	movs	r3, #0
 80091e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	4619      	mov	r1, r3
 80091ec:	481a      	ldr	r0, [pc, #104]	@ (8009258 <MX_GPIO_Init+0x16c>)
 80091ee:	f001 fb73 	bl	800a8d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_DC_Pin|DISPLAY_RES_Pin|DISPLAY_CS_Pin;
 80091f2:	f245 0320 	movw	r3, #20512	@ 0x5020
 80091f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091f8:	2301      	movs	r3, #1
 80091fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009200:	2300      	movs	r3, #0
 8009202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009204:	f107 0314 	add.w	r3, r7, #20
 8009208:	4619      	mov	r1, r3
 800920a:	4814      	ldr	r0, [pc, #80]	@ (800925c <MX_GPIO_Init+0x170>)
 800920c:	f001 fb64 	bl	800a8d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cont_Pin;
 8009210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009216:	2301      	movs	r3, #1
 8009218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800921e:	2300      	movs	r3, #0
 8009220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cont_GPIO_Port, &GPIO_InitStruct);
 8009222:	f107 0314 	add.w	r3, r7, #20
 8009226:	4619      	mov	r1, r3
 8009228:	480d      	ldr	r0, [pc, #52]	@ (8009260 <MX_GPIO_Init+0x174>)
 800922a:	f001 fb55 	bl	800a8d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_ENTR_Pin|BTN_DWN_Pin|BTN_RGT_Pin
 800922e:	233e      	movs	r3, #62	@ 0x3e
 8009230:	617b      	str	r3, [r7, #20]
                          |BTN_LFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009232:	2300      	movs	r3, #0
 8009234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009236:	2301      	movs	r3, #1
 8009238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800923a:	f107 0314 	add.w	r3, r7, #20
 800923e:	4619      	mov	r1, r3
 8009240:	4807      	ldr	r0, [pc, #28]	@ (8009260 <MX_GPIO_Init+0x174>)
 8009242:	f001 fb49 	bl	800a8d8 <HAL_GPIO_Init>

}
 8009246:	bf00      	nop
 8009248:	3728      	adds	r7, #40	@ 0x28
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	40023800 	.word	0x40023800
 8009254:	40020800 	.word	0x40020800
 8009258:	40020000 	.word	0x40020000
 800925c:	40020400 	.word	0x40020400
 8009260:	40020c00 	.word	0x40020c00

08009264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009268:	4b12      	ldr	r3, [pc, #72]	@ (80092b4 <MX_I2C1_Init+0x50>)
 800926a:	4a13      	ldr	r2, [pc, #76]	@ (80092b8 <MX_I2C1_Init+0x54>)
 800926c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800926e:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <MX_I2C1_Init+0x50>)
 8009270:	4a12      	ldr	r2, [pc, #72]	@ (80092bc <MX_I2C1_Init+0x58>)
 8009272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009274:	4b0f      	ldr	r3, [pc, #60]	@ (80092b4 <MX_I2C1_Init+0x50>)
 8009276:	2200      	movs	r2, #0
 8009278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800927a:	4b0e      	ldr	r3, [pc, #56]	@ (80092b4 <MX_I2C1_Init+0x50>)
 800927c:	2200      	movs	r2, #0
 800927e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009280:	4b0c      	ldr	r3, [pc, #48]	@ (80092b4 <MX_I2C1_Init+0x50>)
 8009282:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009288:	4b0a      	ldr	r3, [pc, #40]	@ (80092b4 <MX_I2C1_Init+0x50>)
 800928a:	2200      	movs	r2, #0
 800928c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800928e:	4b09      	ldr	r3, [pc, #36]	@ (80092b4 <MX_I2C1_Init+0x50>)
 8009290:	2200      	movs	r2, #0
 8009292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009294:	4b07      	ldr	r3, [pc, #28]	@ (80092b4 <MX_I2C1_Init+0x50>)
 8009296:	2200      	movs	r2, #0
 8009298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800929a:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <MX_I2C1_Init+0x50>)
 800929c:	2200      	movs	r2, #0
 800929e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80092a0:	4804      	ldr	r0, [pc, #16]	@ (80092b4 <MX_I2C1_Init+0x50>)
 80092a2:	f001 fd01 	bl	800aca8 <HAL_I2C_Init>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80092ac:	f000 f8f0 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80092b0:	bf00      	nop
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200020b4 	.word	0x200020b4
 80092b8:	40005400 	.word	0x40005400
 80092bc:	000186a0 	.word	0x000186a0

080092c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	@ 0x28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	605a      	str	r2, [r3, #4]
 80092d2:	609a      	str	r2, [r3, #8]
 80092d4:	60da      	str	r2, [r3, #12]
 80092d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a19      	ldr	r2, [pc, #100]	@ (8009344 <HAL_I2C_MspInit+0x84>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d12c      	bne.n	800933c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	4b18      	ldr	r3, [pc, #96]	@ (8009348 <HAL_I2C_MspInit+0x88>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ea:	4a17      	ldr	r2, [pc, #92]	@ (8009348 <HAL_I2C_MspInit+0x88>)
 80092ec:	f043 0302 	orr.w	r3, r3, #2
 80092f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80092f2:	4b15      	ldr	r3, [pc, #84]	@ (8009348 <HAL_I2C_MspInit+0x88>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80092fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009304:	2312      	movs	r3, #18
 8009306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800930c:	2303      	movs	r3, #3
 800930e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009310:	2304      	movs	r3, #4
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	4619      	mov	r1, r3
 800931a:	480c      	ldr	r0, [pc, #48]	@ (800934c <HAL_I2C_MspInit+0x8c>)
 800931c:	f001 fadc 	bl	800a8d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <HAL_I2C_MspInit+0x88>)
 8009326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009328:	4a07      	ldr	r2, [pc, #28]	@ (8009348 <HAL_I2C_MspInit+0x88>)
 800932a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800932e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009330:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <HAL_I2C_MspInit+0x88>)
 8009332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800933c:	bf00      	nop
 800933e:	3728      	adds	r7, #40	@ 0x28
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	40005400 	.word	0x40005400
 8009348:	40023800 	.word	0x40023800
 800934c:	40020400 	.word	0x40020400

08009350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009354:	f000 fd56 	bl	8009e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009358:	f000 f81c 	bl	8009394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800935c:	f7ff fec6 	bl	80090ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8009360:	f7ff fd20 	bl	8008da4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009364:	f7ff ff7e 	bl	8009264 <MX_I2C1_Init>
  MX_RTC_Init();
 8009368:	f000 f898 	bl	800949c <MX_RTC_Init>
  MX_UART4_Init();
 800936c:	f000 fb88 	bl	8009a80 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8009370:	f000 fbb0 	bl	8009ad4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009374:	f000 fbd8 	bl	8009b28 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8009378:	f000 fc00 	bl	8009b7c <MX_USART6_UART_Init>
  MX_TIM8_Init();
 800937c:	f000 fb0e 	bl	800999c <MX_TIM8_Init>
  MX_SPI2_Init();
 8009380:	f000 f8dc 	bl	800953c <MX_SPI2_Init>
  MX_ADC2_Init();
 8009384:	f7ff fd60 	bl	8008e48 <MX_ADC2_Init>
  MX_ADC3_Init();
 8009388:	f7ff fdb0 	bl	8008eec <MX_ADC3_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 800938c:	f7ff fea6 	bl	80090dc <MX_FREERTOS_Init>
  while (1)
 8009390:	bf00      	nop
 8009392:	e7fd      	b.n	8009390 <main+0x40>

08009394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b094      	sub	sp, #80	@ 0x50
 8009398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800939a:	f107 0320 	add.w	r3, r7, #32
 800939e:	2230      	movs	r2, #48	@ 0x30
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f009 fb15 	bl	80129d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80093a8:	f107 030c 	add.w	r3, r7, #12
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	605a      	str	r2, [r3, #4]
 80093b2:	609a      	str	r2, [r3, #8]
 80093b4:	60da      	str	r2, [r3, #12]
 80093b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80093b8:	2300      	movs	r3, #0
 80093ba:	60bb      	str	r3, [r7, #8]
 80093bc:	4b29      	ldr	r3, [pc, #164]	@ (8009464 <SystemClock_Config+0xd0>)
 80093be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c0:	4a28      	ldr	r2, [pc, #160]	@ (8009464 <SystemClock_Config+0xd0>)
 80093c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80093c8:	4b26      	ldr	r3, [pc, #152]	@ (8009464 <SystemClock_Config+0xd0>)
 80093ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093d0:	60bb      	str	r3, [r7, #8]
 80093d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80093d4:	2300      	movs	r3, #0
 80093d6:	607b      	str	r3, [r7, #4]
 80093d8:	4b23      	ldr	r3, [pc, #140]	@ (8009468 <SystemClock_Config+0xd4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a22      	ldr	r2, [pc, #136]	@ (8009468 <SystemClock_Config+0xd4>)
 80093de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	4b20      	ldr	r3, [pc, #128]	@ (8009468 <SystemClock_Config+0xd4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093ec:	607b      	str	r3, [r7, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80093f0:	2306      	movs	r3, #6
 80093f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80093f4:	2301      	movs	r3, #1
 80093f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80093f8:	2301      	movs	r3, #1
 80093fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80093fc:	2310      	movs	r3, #16
 80093fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009400:	2302      	movs	r3, #2
 8009402:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009404:	2300      	movs	r3, #0
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009408:	2308      	movs	r3, #8
 800940a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800940c:	23a8      	movs	r3, #168	@ 0xa8
 800940e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009410:	2302      	movs	r3, #2
 8009412:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009414:	2304      	movs	r3, #4
 8009416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009418:	f107 0320 	add.w	r3, r7, #32
 800941c:	4618      	mov	r0, r3
 800941e:	f002 fd6b 	bl	800bef8 <HAL_RCC_OscConfig>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009428:	f000 f832 	bl	8009490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800942c:	230f      	movs	r3, #15
 800942e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009430:	2302      	movs	r3, #2
 8009432:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009438:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800943c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800943e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009442:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009444:	f107 030c 	add.w	r3, r7, #12
 8009448:	2105      	movs	r1, #5
 800944a:	4618      	mov	r0, r3
 800944c:	f002 ffcc 	bl	800c3e8 <HAL_RCC_ClockConfig>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8009456:	f000 f81b 	bl	8009490 <Error_Handler>
  }
}
 800945a:	bf00      	nop
 800945c:	3750      	adds	r7, #80	@ 0x50
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	40023800 	.word	0x40023800
 8009468:	40007000 	.word	0x40007000

0800946c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a04      	ldr	r2, [pc, #16]	@ (800948c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d101      	bne.n	8009482 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800947e:	f000 fce3 	bl	8009e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	40000400 	.word	0x40000400

08009490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009490:	b480      	push	{r7}
 8009492:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009494:	b672      	cpsid	i
}
 8009496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009498:	bf00      	nop
 800949a:	e7fd      	b.n	8009498 <Error_Handler+0x8>

0800949c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80094a0:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094a2:	4a10      	ldr	r2, [pc, #64]	@ (80094e4 <MX_RTC_Init+0x48>)
 80094a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80094a6:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80094ac:	4b0c      	ldr	r3, [pc, #48]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094ae:	227f      	movs	r2, #127	@ 0x7f
 80094b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094b4:	22ff      	movs	r2, #255	@ 0xff
 80094b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80094be:	4b08      	ldr	r3, [pc, #32]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80094c4:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80094ca:	4805      	ldr	r0, [pc, #20]	@ (80094e0 <MX_RTC_Init+0x44>)
 80094cc:	f003 fa80 	bl	800c9d0 <HAL_RTC_Init>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80094d6:	f7ff ffdb 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80094da:	bf00      	nop
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20002108 	.word	0x20002108
 80094e4:	40002800 	.word	0x40002800

080094e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80094f0:	f107 0308 	add.w	r3, r7, #8
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a0c      	ldr	r2, [pc, #48]	@ (8009534 <HAL_RTC_MspInit+0x4c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d111      	bne.n	800952c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009508:	2302      	movs	r3, #2
 800950a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800950c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009510:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	4618      	mov	r0, r3
 8009518:	f003 f978 	bl	800c80c <HAL_RCCEx_PeriphCLKConfig>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8009522:	f7ff ffb5 	bl	8009490 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009526:	4b04      	ldr	r3, [pc, #16]	@ (8009538 <HAL_RTC_MspInit+0x50>)
 8009528:	2201      	movs	r2, #1
 800952a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800952c:	bf00      	nop
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	40002800 	.word	0x40002800
 8009538:	42470e3c 	.word	0x42470e3c

0800953c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8009540:	4b17      	ldr	r3, [pc, #92]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009542:	4a18      	ldr	r2, [pc, #96]	@ (80095a4 <MX_SPI2_Init+0x68>)
 8009544:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009546:	4b16      	ldr	r3, [pc, #88]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009548:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800954c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800954e:	4b14      	ldr	r3, [pc, #80]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009550:	2200      	movs	r2, #0
 8009552:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009554:	4b12      	ldr	r3, [pc, #72]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009556:	2200      	movs	r2, #0
 8009558:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800955a:	4b11      	ldr	r3, [pc, #68]	@ (80095a0 <MX_SPI2_Init+0x64>)
 800955c:	2202      	movs	r2, #2
 800955e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009560:	4b0f      	ldr	r3, [pc, #60]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009562:	2201      	movs	r2, #1
 8009564:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009566:	4b0e      	ldr	r3, [pc, #56]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800956c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800956e:	4b0c      	ldr	r3, [pc, #48]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009570:	2218      	movs	r2, #24
 8009572:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009574:	4b0a      	ldr	r3, [pc, #40]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009576:	2200      	movs	r2, #0
 8009578:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800957a:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <MX_SPI2_Init+0x64>)
 800957c:	2200      	movs	r2, #0
 800957e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009580:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009582:	2200      	movs	r2, #0
 8009584:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009586:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <MX_SPI2_Init+0x64>)
 8009588:	220a      	movs	r2, #10
 800958a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800958c:	4804      	ldr	r0, [pc, #16]	@ (80095a0 <MX_SPI2_Init+0x64>)
 800958e:	f003 fd2b 	bl	800cfe8 <HAL_SPI_Init>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8009598:	f7ff ff7a 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800959c:	bf00      	nop
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20002128 	.word	0x20002128
 80095a4:	40003800 	.word	0x40003800

080095a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	@ 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	605a      	str	r2, [r3, #4]
 80095ba:	609a      	str	r2, [r3, #8]
 80095bc:	60da      	str	r2, [r3, #12]
 80095be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a19      	ldr	r2, [pc, #100]	@ (800962c <HAL_SPI_MspInit+0x84>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d12c      	bne.n	8009624 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	4b18      	ldr	r3, [pc, #96]	@ (8009630 <HAL_SPI_MspInit+0x88>)
 80095d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d2:	4a17      	ldr	r2, [pc, #92]	@ (8009630 <HAL_SPI_MspInit+0x88>)
 80095d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80095d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80095da:	4b15      	ldr	r3, [pc, #84]	@ (8009630 <HAL_SPI_MspInit+0x88>)
 80095dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	4b11      	ldr	r3, [pc, #68]	@ (8009630 <HAL_SPI_MspInit+0x88>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ee:	4a10      	ldr	r2, [pc, #64]	@ (8009630 <HAL_SPI_MspInit+0x88>)
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80095f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009630 <HAL_SPI_MspInit+0x88>)
 80095f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8009602:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8009606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009608:	2302      	movs	r3, #2
 800960a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960c:	2300      	movs	r3, #0
 800960e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009610:	2303      	movs	r3, #3
 8009612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009614:	2305      	movs	r3, #5
 8009616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	4619      	mov	r1, r3
 800961e:	4805      	ldr	r0, [pc, #20]	@ (8009634 <HAL_SPI_MspInit+0x8c>)
 8009620:	f001 f95a 	bl	800a8d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009624:	bf00      	nop
 8009626:	3728      	adds	r7, #40	@ 0x28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	40003800 	.word	0x40003800
 8009630:	40023800 	.word	0x40023800
 8009634:	40020400 	.word	0x40020400

08009638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800963e:	2300      	movs	r3, #0
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	4b12      	ldr	r3, [pc, #72]	@ (800968c <HAL_MspInit+0x54>)
 8009644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009646:	4a11      	ldr	r2, [pc, #68]	@ (800968c <HAL_MspInit+0x54>)
 8009648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800964c:	6453      	str	r3, [r2, #68]	@ 0x44
 800964e:	4b0f      	ldr	r3, [pc, #60]	@ (800968c <HAL_MspInit+0x54>)
 8009650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009656:	607b      	str	r3, [r7, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800965a:	2300      	movs	r3, #0
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	4b0b      	ldr	r3, [pc, #44]	@ (800968c <HAL_MspInit+0x54>)
 8009660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009662:	4a0a      	ldr	r2, [pc, #40]	@ (800968c <HAL_MspInit+0x54>)
 8009664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009668:	6413      	str	r3, [r2, #64]	@ 0x40
 800966a:	4b08      	ldr	r3, [pc, #32]	@ (800968c <HAL_MspInit+0x54>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009676:	2200      	movs	r2, #0
 8009678:	210f      	movs	r1, #15
 800967a:	f06f 0001 	mvn.w	r0, #1
 800967e:	f001 f8df 	bl	800a840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40023800 	.word	0x40023800

08009690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08e      	sub	sp, #56	@ 0x38
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800969c:	2300      	movs	r3, #0
 800969e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	4b33      	ldr	r3, [pc, #204]	@ (8009774 <HAL_InitTick+0xe4>)
 80096a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a8:	4a32      	ldr	r2, [pc, #200]	@ (8009774 <HAL_InitTick+0xe4>)
 80096aa:	f043 0302 	orr.w	r3, r3, #2
 80096ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80096b0:	4b30      	ldr	r3, [pc, #192]	@ (8009774 <HAL_InitTick+0xe4>)
 80096b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80096bc:	f107 0210 	add.w	r2, r7, #16
 80096c0:	f107 0314 	add.w	r3, r7, #20
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f003 f86e 	bl	800c7a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d103      	bne.n	80096de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80096d6:	f003 f83f 	bl	800c758 <HAL_RCC_GetPCLK1Freq>
 80096da:	6378      	str	r0, [r7, #52]	@ 0x34
 80096dc:	e004      	b.n	80096e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80096de:	f003 f83b 	bl	800c758 <HAL_RCC_GetPCLK1Freq>
 80096e2:	4603      	mov	r3, r0
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	4a23      	ldr	r2, [pc, #140]	@ (8009778 <HAL_InitTick+0xe8>)
 80096ec:	fba2 2303 	umull	r2, r3, r2, r3
 80096f0:	0c9b      	lsrs	r3, r3, #18
 80096f2:	3b01      	subs	r3, #1
 80096f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80096f6:	4b21      	ldr	r3, [pc, #132]	@ (800977c <HAL_InitTick+0xec>)
 80096f8:	4a21      	ldr	r2, [pc, #132]	@ (8009780 <HAL_InitTick+0xf0>)
 80096fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80096fc:	4b1f      	ldr	r3, [pc, #124]	@ (800977c <HAL_InitTick+0xec>)
 80096fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009702:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8009704:	4a1d      	ldr	r2, [pc, #116]	@ (800977c <HAL_InitTick+0xec>)
 8009706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009708:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800970a:	4b1c      	ldr	r3, [pc, #112]	@ (800977c <HAL_InitTick+0xec>)
 800970c:	2200      	movs	r2, #0
 800970e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009710:	4b1a      	ldr	r3, [pc, #104]	@ (800977c <HAL_InitTick+0xec>)
 8009712:	2200      	movs	r2, #0
 8009714:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009716:	4b19      	ldr	r3, [pc, #100]	@ (800977c <HAL_InitTick+0xec>)
 8009718:	2200      	movs	r2, #0
 800971a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800971c:	4817      	ldr	r0, [pc, #92]	@ (800977c <HAL_InitTick+0xec>)
 800971e:	f003 ff0d 	bl	800d53c <HAL_TIM_Base_Init>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8009728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800972c:	2b00      	cmp	r3, #0
 800972e:	d11b      	bne.n	8009768 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8009730:	4812      	ldr	r0, [pc, #72]	@ (800977c <HAL_InitTick+0xec>)
 8009732:	f003 ff53 	bl	800d5dc <HAL_TIM_Base_Start_IT>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800973c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009740:	2b00      	cmp	r3, #0
 8009742:	d111      	bne.n	8009768 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009744:	201d      	movs	r0, #29
 8009746:	f001 f897 	bl	800a878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b0f      	cmp	r3, #15
 800974e:	d808      	bhi.n	8009762 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8009750:	2200      	movs	r2, #0
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	201d      	movs	r0, #29
 8009756:	f001 f873 	bl	800a840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800975a:	4a0a      	ldr	r2, [pc, #40]	@ (8009784 <HAL_InitTick+0xf4>)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	e002      	b.n	8009768 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8009768:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800976c:	4618      	mov	r0, r3
 800976e:	3738      	adds	r7, #56	@ 0x38
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40023800 	.word	0x40023800
 8009778:	431bde83 	.word	0x431bde83
 800977c:	20002180 	.word	0x20002180
 8009780:	40000400 	.word	0x40000400
 8009784:	2000029c 	.word	0x2000029c

08009788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800978c:	bf00      	nop
 800978e:	e7fd      	b.n	800978c <NMI_Handler+0x4>

08009790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009794:	bf00      	nop
 8009796:	e7fd      	b.n	8009794 <HardFault_Handler+0x4>

08009798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <MemManage_Handler+0x4>

080097a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80097a4:	bf00      	nop
 80097a6:	e7fd      	b.n	80097a4 <BusFault_Handler+0x4>

080097a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <UsageFault_Handler+0x4>

080097b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
	...

080097c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80097c4:	4803      	ldr	r0, [pc, #12]	@ (80097d4 <TIM3_IRQHandler+0x14>)
 80097c6:	f003 ff79 	bl	800d6bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  My_Button_IRQHandlerC();
 80097ca:	f7fd fb93 	bl	8006ef4 <My_Button_IRQHandlerC>
  /* USER CODE END TIM3_IRQn 1 */
}
 80097ce:	bf00      	nop
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20002180 	.word	0x20002180

080097d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 80097dc:	4802      	ldr	r0, [pc, #8]	@ (80097e8 <USART2_IRQHandler+0x10>)
 80097de:	f7fb fdf3 	bl	80053c8 <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 80097e2:	bf00      	nop
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200022a4 	.word	0x200022a4

080097ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
  return 1;
 80097f0:	2301      	movs	r3, #1
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <_kill>:

int _kill(int pid, int sig)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009806:	f009 fa87 	bl	8012d18 <__errno>
 800980a:	4603      	mov	r3, r0
 800980c:	2216      	movs	r2, #22
 800980e:	601a      	str	r2, [r3, #0]
  return -1;
 8009810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_exit>:

void _exit (int status)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009824:	f04f 31ff 	mov.w	r1, #4294967295
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ffe7 	bl	80097fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800982e:	bf00      	nop
 8009830:	e7fd      	b.n	800982e <_exit+0x12>

08009832 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b086      	sub	sp, #24
 8009836:	af00      	add	r7, sp, #0
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	60b9      	str	r1, [r7, #8]
 800983c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	e00a      	b.n	800985a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009844:	f3af 8000 	nop.w
 8009848:	4601      	mov	r1, r0
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	60ba      	str	r2, [r7, #8]
 8009850:	b2ca      	uxtb	r2, r1
 8009852:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	3301      	adds	r3, #1
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	dbf0      	blt.n	8009844 <_read+0x12>
  }

  return len;
 8009862:	687b      	ldr	r3, [r7, #4]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e009      	b.n	8009892 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	60ba      	str	r2, [r7, #8]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	3301      	adds	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	429a      	cmp	r2, r3
 8009898:	dbf1      	blt.n	800987e <_write+0x12>
  }
  return len;
 800989a:	687b      	ldr	r3, [r7, #4]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <_close>:

int _close(int file)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80098cc:	605a      	str	r2, [r3, #4]
  return 0;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <_isatty>:

int _isatty(int file)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80098e4:	2301      	movs	r3, #1
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009914:	4a14      	ldr	r2, [pc, #80]	@ (8009968 <_sbrk+0x5c>)
 8009916:	4b15      	ldr	r3, [pc, #84]	@ (800996c <_sbrk+0x60>)
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009920:	4b13      	ldr	r3, [pc, #76]	@ (8009970 <_sbrk+0x64>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d102      	bne.n	800992e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009928:	4b11      	ldr	r3, [pc, #68]	@ (8009970 <_sbrk+0x64>)
 800992a:	4a12      	ldr	r2, [pc, #72]	@ (8009974 <_sbrk+0x68>)
 800992c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800992e:	4b10      	ldr	r3, [pc, #64]	@ (8009970 <_sbrk+0x64>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4413      	add	r3, r2
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	429a      	cmp	r2, r3
 800993a:	d207      	bcs.n	800994c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800993c:	f009 f9ec 	bl	8012d18 <__errno>
 8009940:	4603      	mov	r3, r0
 8009942:	220c      	movs	r2, #12
 8009944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009946:	f04f 33ff 	mov.w	r3, #4294967295
 800994a:	e009      	b.n	8009960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800994c:	4b08      	ldr	r3, [pc, #32]	@ (8009970 <_sbrk+0x64>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009952:	4b07      	ldr	r3, [pc, #28]	@ (8009970 <_sbrk+0x64>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	4a05      	ldr	r2, [pc, #20]	@ (8009970 <_sbrk+0x64>)
 800995c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20020000 	.word	0x20020000
 800996c:	00000400 	.word	0x00000400
 8009970:	200021c8 	.word	0x200021c8
 8009974:	20011cc8 	.word	0x20011cc8

08009978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800997c:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <SystemInit+0x20>)
 800997e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009982:	4a05      	ldr	r2, [pc, #20]	@ (8009998 <SystemInit+0x20>)
 8009984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800998c:	bf00      	nop
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	e000ed00 	.word	0xe000ed00

0800999c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099a2:	f107 0308 	add.w	r3, r7, #8
 80099a6:	2200      	movs	r2, #0
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	605a      	str	r2, [r3, #4]
 80099ac:	609a      	str	r2, [r3, #8]
 80099ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099b0:	463b      	mov	r3, r7
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80099b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009a38 <MX_TIM8_Init+0x9c>)
 80099bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80099be:	4b1d      	ldr	r3, [pc, #116]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099c0:	22a7      	movs	r2, #167	@ 0xa7
 80099c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 80099ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099cc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80099d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099d2:	4b18      	ldr	r3, [pc, #96]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80099d8:	4b16      	ldr	r3, [pc, #88]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099da:	2200      	movs	r2, #0
 80099dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099de:	4b15      	ldr	r3, [pc, #84]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80099e4:	4813      	ldr	r0, [pc, #76]	@ (8009a34 <MX_TIM8_Init+0x98>)
 80099e6:	f003 fda9 	bl	800d53c <HAL_TIM_Base_Init>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80099f0:	f7ff fd4e 	bl	8009490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80099fa:	f107 0308 	add.w	r3, r7, #8
 80099fe:	4619      	mov	r1, r3
 8009a00:	480c      	ldr	r0, [pc, #48]	@ (8009a34 <MX_TIM8_Init+0x98>)
 8009a02:	f003 ff4b 	bl	800d89c <HAL_TIM_ConfigClockSource>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8009a0c:	f7ff fd40 	bl	8009490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009a10:	2320      	movs	r3, #32
 8009a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009a18:	463b      	mov	r3, r7
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4805      	ldr	r0, [pc, #20]	@ (8009a34 <MX_TIM8_Init+0x98>)
 8009a1e:	f004 f973 	bl	800dd08 <HAL_TIMEx_MasterConfigSynchronization>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8009a28:	f7ff fd32 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009a2c:	bf00      	nop
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	200021cc 	.word	0x200021cc
 8009a38:	40010400 	.word	0x40010400

08009a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a0b      	ldr	r2, [pc, #44]	@ (8009a78 <HAL_TIM_Base_MspInit+0x3c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d10d      	bne.n	8009a6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <HAL_TIM_Base_MspInit+0x40>)
 8009a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a56:	4a09      	ldr	r2, [pc, #36]	@ (8009a7c <HAL_TIM_Base_MspInit+0x40>)
 8009a58:	f043 0302 	orr.w	r3, r3, #2
 8009a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a5e:	4b07      	ldr	r3, [pc, #28]	@ (8009a7c <HAL_TIM_Base_MspInit+0x40>)
 8009a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009a6a:	bf00      	nop
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40023800 	.word	0x40023800

08009a80 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8009a84:	4b11      	ldr	r3, [pc, #68]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009a86:	4a12      	ldr	r2, [pc, #72]	@ (8009ad0 <MX_UART4_Init+0x50>)
 8009a88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8009a8a:	4b10      	ldr	r3, [pc, #64]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009a8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009a90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009a92:	4b0e      	ldr	r3, [pc, #56]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009a98:	4b0c      	ldr	r3, [pc, #48]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009aa4:	4b09      	ldr	r3, [pc, #36]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009aa6:	220c      	movs	r2, #12
 8009aa8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009aaa:	4b08      	ldr	r3, [pc, #32]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ab0:	4b06      	ldr	r3, [pc, #24]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009ab6:	4805      	ldr	r0, [pc, #20]	@ (8009acc <MX_UART4_Init+0x4c>)
 8009ab8:	f004 f9b6 	bl	800de28 <HAL_UART_Init>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8009ac2:	f7ff fce5 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8009ac6:	bf00      	nop
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20002214 	.word	0x20002214
 8009ad0:	40004c00 	.word	0x40004c00

08009ad4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009ad8:	4b11      	ldr	r3, [pc, #68]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009ada:	4a12      	ldr	r2, [pc, #72]	@ (8009b24 <MX_USART1_UART_Init+0x50>)
 8009adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8009ade:	4b10      	ldr	r3, [pc, #64]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009ae0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009aec:	4b0c      	ldr	r3, [pc, #48]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009af2:	4b0b      	ldr	r3, [pc, #44]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009af8:	4b09      	ldr	r3, [pc, #36]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009afa:	220c      	movs	r2, #12
 8009afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009afe:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b04:	4b06      	ldr	r3, [pc, #24]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009b0a:	4805      	ldr	r0, [pc, #20]	@ (8009b20 <MX_USART1_UART_Init+0x4c>)
 8009b0c:	f004 f98c 	bl	800de28 <HAL_UART_Init>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009b16:	f7ff fcbb 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009b1a:	bf00      	nop
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000225c 	.word	0x2000225c
 8009b24:	40011000 	.word	0x40011000

08009b28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009b2c:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b2e:	4a12      	ldr	r2, [pc, #72]	@ (8009b78 <MX_USART2_UART_Init+0x50>)
 8009b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009b40:	4b0c      	ldr	r3, [pc, #48]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009b4c:	4b09      	ldr	r3, [pc, #36]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b4e:	220c      	movs	r2, #12
 8009b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b52:	4b08      	ldr	r3, [pc, #32]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b58:	4b06      	ldr	r3, [pc, #24]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009b5e:	4805      	ldr	r0, [pc, #20]	@ (8009b74 <MX_USART2_UART_Init+0x4c>)
 8009b60:	f004 f962 	bl	800de28 <HAL_UART_Init>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009b6a:	f7ff fc91 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009b6e:	bf00      	nop
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200022a4 	.word	0x200022a4
 8009b78:	40004400 	.word	0x40004400

08009b7c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8009b80:	4b11      	ldr	r3, [pc, #68]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009b82:	4a12      	ldr	r2, [pc, #72]	@ (8009bcc <MX_USART6_UART_Init+0x50>)
 8009b84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8009b86:	4b10      	ldr	r3, [pc, #64]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009b88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009b8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009b94:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009ba0:	4b09      	ldr	r3, [pc, #36]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009ba2:	220c      	movs	r2, #12
 8009ba4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ba6:	4b08      	ldr	r3, [pc, #32]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bac:	4b06      	ldr	r3, [pc, #24]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009bb2:	4805      	ldr	r0, [pc, #20]	@ (8009bc8 <MX_USART6_UART_Init+0x4c>)
 8009bb4:	f004 f938 	bl	800de28 <HAL_UART_Init>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009bbe:	f7ff fc67 	bl	8009490 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200022ec 	.word	0x200022ec
 8009bcc:	40011400 	.word	0x40011400

08009bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b090      	sub	sp, #64	@ 0x40
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	605a      	str	r2, [r3, #4]
 8009be2:	609a      	str	r2, [r3, #8]
 8009be4:	60da      	str	r2, [r3, #12]
 8009be6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a69      	ldr	r2, [pc, #420]	@ (8009d94 <HAL_UART_MspInit+0x1c4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d12d      	bne.n	8009c4e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bf6:	4b68      	ldr	r3, [pc, #416]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bfa:	4a67      	ldr	r2, [pc, #412]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c02:	4b65      	ldr	r3, [pc, #404]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c0e:	2300      	movs	r3, #0
 8009c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c12:	4b61      	ldr	r3, [pc, #388]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c16:	4a60      	ldr	r2, [pc, #384]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c18:	f043 0304 	orr.w	r3, r3, #4
 8009c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = PZEM3_UART4_TX_Pin|PZEM3_UART4_RX_Pin;
 8009c2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c30:	2302      	movs	r3, #2
 8009c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009c44:	4619      	mov	r1, r3
 8009c46:	4855      	ldr	r0, [pc, #340]	@ (8009d9c <HAL_UART_MspInit+0x1cc>)
 8009c48:	f000 fe46 	bl	800a8d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8009c4c:	e09d      	b.n	8009d8a <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART1)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a53      	ldr	r2, [pc, #332]	@ (8009da0 <HAL_UART_MspInit+0x1d0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d12d      	bne.n	8009cb4 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009c58:	2300      	movs	r3, #0
 8009c5a:	623b      	str	r3, [r7, #32]
 8009c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c60:	4a4d      	ldr	r2, [pc, #308]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c62:	f043 0310 	orr.w	r3, r3, #16
 8009c66:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c68:	4b4b      	ldr	r3, [pc, #300]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c6c:	f003 0310 	and.w	r3, r3, #16
 8009c70:	623b      	str	r3, [r7, #32]
 8009c72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	4b47      	ldr	r3, [pc, #284]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c7c:	4a46      	ldr	r2, [pc, #280]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c7e:	f043 0301 	orr.w	r3, r3, #1
 8009c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c84:	4b44      	ldr	r3, [pc, #272]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PZEM1_USART1_TX_Pin|PZEM1_USART1_RX_Pin;
 8009c90:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c96:	2302      	movs	r3, #2
 8009c98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009ca2:	2307      	movs	r3, #7
 8009ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009caa:	4619      	mov	r1, r3
 8009cac:	483d      	ldr	r0, [pc, #244]	@ (8009da4 <HAL_UART_MspInit+0x1d4>)
 8009cae:	f000 fe13 	bl	800a8d8 <HAL_GPIO_Init>
}
 8009cb2:	e06a      	b.n	8009d8a <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8009da8 <HAL_UART_MspInit+0x1d8>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d134      	bne.n	8009d28 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61bb      	str	r3, [r7, #24]
 8009cc2:	4b35      	ldr	r3, [pc, #212]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc6:	4a34      	ldr	r2, [pc, #208]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8009cce:	4b32      	ldr	r3, [pc, #200]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd6:	61bb      	str	r3, [r7, #24]
 8009cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	4b2e      	ldr	r3, [pc, #184]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009ce4:	f043 0301 	orr.w	r3, r3, #1
 8009ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009cea:	4b2b      	ldr	r3, [pc, #172]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 8009cf6:	230c      	movs	r3, #12
 8009cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d02:	2303      	movs	r3, #3
 8009d04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009d06:	2307      	movs	r3, #7
 8009d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4824      	ldr	r0, [pc, #144]	@ (8009da4 <HAL_UART_MspInit+0x1d4>)
 8009d12:	f000 fde1 	bl	800a8d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8009d16:	2200      	movs	r2, #0
 8009d18:	2105      	movs	r1, #5
 8009d1a:	2026      	movs	r0, #38	@ 0x26
 8009d1c:	f000 fd90 	bl	800a840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009d20:	2026      	movs	r0, #38	@ 0x26
 8009d22:	f000 fda9 	bl	800a878 <HAL_NVIC_EnableIRQ>
}
 8009d26:	e030      	b.n	8009d8a <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART6)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009dac <HAL_UART_MspInit+0x1dc>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d12b      	bne.n	8009d8a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009d32:	2300      	movs	r3, #0
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	4b18      	ldr	r3, [pc, #96]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d3a:	4a17      	ldr	r2, [pc, #92]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009d3c:	f043 0320 	orr.w	r3, r3, #32
 8009d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d42:	4b15      	ldr	r3, [pc, #84]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	4b11      	ldr	r3, [pc, #68]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d56:	4a10      	ldr	r2, [pc, #64]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009d58:	f043 0304 	orr.w	r3, r3, #4
 8009d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d98 <HAL_UART_MspInit+0x1c8>)
 8009d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PZEM2_USART6_TX_Pin|PZEM2_USART6_RX_Pin;
 8009d6a:	23c0      	movs	r3, #192	@ 0xc0
 8009d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d76:	2303      	movs	r3, #3
 8009d78:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009d7a:	2308      	movs	r3, #8
 8009d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d82:	4619      	mov	r1, r3
 8009d84:	4805      	ldr	r0, [pc, #20]	@ (8009d9c <HAL_UART_MspInit+0x1cc>)
 8009d86:	f000 fda7 	bl	800a8d8 <HAL_GPIO_Init>
}
 8009d8a:	bf00      	nop
 8009d8c:	3740      	adds	r7, #64	@ 0x40
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	40004c00 	.word	0x40004c00
 8009d98:	40023800 	.word	0x40023800
 8009d9c:	40020800 	.word	0x40020800
 8009da0:	40011000 	.word	0x40011000
 8009da4:	40020000 	.word	0x40020000
 8009da8:	40004400 	.word	0x40004400
 8009dac:	40011400 	.word	0x40011400

08009db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009db4:	f7ff fde0 	bl	8009978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009db8:	480c      	ldr	r0, [pc, #48]	@ (8009dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009dba:	490d      	ldr	r1, [pc, #52]	@ (8009df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8009df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009dc0:	e002      	b.n	8009dc8 <LoopCopyDataInit>

08009dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009dc6:	3304      	adds	r3, #4

08009dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009dcc:	d3f9      	bcc.n	8009dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009dce:	4a0a      	ldr	r2, [pc, #40]	@ (8009df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8009dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8009dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009dd4:	e001      	b.n	8009dda <LoopFillZerobss>

08009dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009dd8:	3204      	adds	r2, #4

08009dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ddc:	d3fb      	bcc.n	8009dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009dde:	f008 ffa1 	bl	8012d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009de2:	f7ff fab5 	bl	8009350 <main>
  bx  lr    
 8009de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009df0:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8009df4:	08016b30 	.word	0x08016b30
  ldr r2, =_sbss
 8009df8:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8009dfc:	20011cc8 	.word	0x20011cc8

08009e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e00:	e7fe      	b.n	8009e00 <ADC_IRQHandler>
	...

08009e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e08:	4b0e      	ldr	r3, [pc, #56]	@ (8009e44 <HAL_Init+0x40>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8009e44 <HAL_Init+0x40>)
 8009e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e14:	4b0b      	ldr	r3, [pc, #44]	@ (8009e44 <HAL_Init+0x40>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a0a      	ldr	r2, [pc, #40]	@ (8009e44 <HAL_Init+0x40>)
 8009e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e20:	4b08      	ldr	r3, [pc, #32]	@ (8009e44 <HAL_Init+0x40>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a07      	ldr	r2, [pc, #28]	@ (8009e44 <HAL_Init+0x40>)
 8009e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e2c:	2003      	movs	r0, #3
 8009e2e:	f000 fcfc 	bl	800a82a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e32:	200f      	movs	r0, #15
 8009e34:	f7ff fc2c 	bl	8009690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e38:	f7ff fbfe 	bl	8009638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	40023c00 	.word	0x40023c00

08009e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009e4c:	4b06      	ldr	r3, [pc, #24]	@ (8009e68 <HAL_IncTick+0x20>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	4b06      	ldr	r3, [pc, #24]	@ (8009e6c <HAL_IncTick+0x24>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4413      	add	r3, r2
 8009e58:	4a04      	ldr	r2, [pc, #16]	@ (8009e6c <HAL_IncTick+0x24>)
 8009e5a:	6013      	str	r3, [r2, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	200002a0 	.word	0x200002a0
 8009e6c:	20002334 	.word	0x20002334

08009e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
  return uwTick;
 8009e74:	4b03      	ldr	r3, [pc, #12]	@ (8009e84 <HAL_GetTick+0x14>)
 8009e76:	681b      	ldr	r3, [r3, #0]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20002334 	.word	0x20002334

08009e88 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8009e8c:	4b03      	ldr	r3, [pc, #12]	@ (8009e9c <HAL_GetUIDw0+0x14>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	1fff7a10 	.word	0x1fff7a10

08009ea0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8009ea4:	4b03      	ldr	r3, [pc, #12]	@ (8009eb4 <HAL_GetUIDw1+0x14>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	1fff7a14 	.word	0x1fff7a14

08009eb8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8009ebc:	4b03      	ldr	r3, [pc, #12]	@ (8009ecc <HAL_GetUIDw2+0x14>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	1fff7a18 	.word	0x1fff7a18

08009ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e033      	b.n	8009f4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff f84e 	bl	8008f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f06:	f003 0310 	and.w	r3, r3, #16
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d118      	bne.n	8009f40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009f16:	f023 0302 	bic.w	r3, r3, #2
 8009f1a:	f043 0202 	orr.w	r2, r3, #2
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fad8 	bl	800a4d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f32:	f023 0303 	bic.w	r3, r3, #3
 8009f36:	f043 0201 	orr.w	r2, r3, #1
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8009f3e:	e001      	b.n	8009f44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_ADC_Start+0x1a>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e0b2      	b.n	800a0d8 <HAL_ADC_Start+0x180>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d018      	beq.n	8009fba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009f98:	4b52      	ldr	r3, [pc, #328]	@ (800a0e4 <HAL_ADC_Start+0x18c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a52      	ldr	r2, [pc, #328]	@ (800a0e8 <HAL_ADC_Start+0x190>)
 8009f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa2:	0c9a      	lsrs	r2, r3, #18
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	4413      	add	r3, r2
 8009faa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8009fac:	e002      	b.n	8009fb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1f9      	bne.n	8009fae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d17a      	bne.n	800a0be <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fcc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009fd0:	f023 0301 	bic.w	r3, r3, #1
 8009fd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d007      	beq.n	8009ffa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009ff2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a006:	d106      	bne.n	800a016 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a00c:	f023 0206 	bic.w	r2, r3, #6
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	645a      	str	r2, [r3, #68]	@ 0x44
 800a014:	e002      	b.n	800a01c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a024:	4b31      	ldr	r3, [pc, #196]	@ (800a0ec <HAL_ADC_Start+0x194>)
 800a026:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a030:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f003 031f 	and.w	r3, r3, #31
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d12a      	bne.n	800a094 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a2b      	ldr	r2, [pc, #172]	@ (800a0f0 <HAL_ADC_Start+0x198>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d015      	beq.n	800a074 <HAL_ADC_Start+0x11c>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a29      	ldr	r2, [pc, #164]	@ (800a0f4 <HAL_ADC_Start+0x19c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d105      	bne.n	800a05e <HAL_ADC_Start+0x106>
 800a052:	4b26      	ldr	r3, [pc, #152]	@ (800a0ec <HAL_ADC_Start+0x194>)
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f003 031f 	and.w	r3, r3, #31
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a25      	ldr	r2, [pc, #148]	@ (800a0f8 <HAL_ADC_Start+0x1a0>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d136      	bne.n	800a0d6 <HAL_ADC_Start+0x17e>
 800a068:	4b20      	ldr	r3, [pc, #128]	@ (800a0ec <HAL_ADC_Start+0x194>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b00      	cmp	r3, #0
 800a072:	d130      	bne.n	800a0d6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d129      	bne.n	800a0d6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a090:	609a      	str	r2, [r3, #8]
 800a092:	e020      	b.n	800a0d6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a15      	ldr	r2, [pc, #84]	@ (800a0f0 <HAL_ADC_Start+0x198>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d11b      	bne.n	800a0d6 <HAL_ADC_Start+0x17e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d114      	bne.n	800a0d6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a0ba:	609a      	str	r2, [r3, #8]
 800a0bc:	e00b      	b.n	800a0d6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c2:	f043 0210 	orr.w	r2, r3, #16
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ce:	f043 0201 	orr.w	r2, r3, #1
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	20000298 	.word	0x20000298
 800a0e8:	431bde83 	.word	0x431bde83
 800a0ec:	40012300 	.word	0x40012300
 800a0f0:	40012000 	.word	0x40012000
 800a0f4:	40012100 	.word	0x40012100
 800a0f8:	40012200 	.word	0x40012200

0800a0fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_ADC_Stop+0x16>
 800a10e:	2302      	movs	r3, #2
 800a110:	e021      	b.n	800a156 <HAL_ADC_Stop+0x5a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689a      	ldr	r2, [r3, #8]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0201 	bic.w	r2, r2, #1
 800a128:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	2b00      	cmp	r3, #0
 800a136:	d109      	bne.n	800a14c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a140:	f023 0301 	bic.w	r3, r3, #1
 800a144:	f043 0201 	orr.w	r2, r3, #1
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a17a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a17e:	d113      	bne.n	800a1a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a18a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a18e:	d10b      	bne.n	800a1a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a194:	f043 0220 	orr.w	r2, r3, #32
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e063      	b.n	800a270 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800a1a8:	f7ff fe62 	bl	8009e70 <HAL_GetTick>
 800a1ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a1ae:	e021      	b.n	800a1f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d01d      	beq.n	800a1f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_ADC_PollForConversion+0x6c>
 800a1be:	f7ff fe57 	bl	8009e70 <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d212      	bcs.n	800a1f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d00b      	beq.n	800a1f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e0:	f043 0204 	orr.w	r2, r3, #4
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e03d      	b.n	800a270 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d1d6      	bne.n	800a1b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f06f 0212 	mvn.w	r2, #18
 800a20a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a210:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d123      	bne.n	800a26e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d11f      	bne.n	800a26e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a234:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a246:	2b00      	cmp	r3, #0
 800a248:	d111      	bne.n	800a26e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a24e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d105      	bne.n	800a26e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a266:	f043 0201 	orr.w	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d101      	bne.n	800a2b0 <HAL_ADC_ConfigChannel+0x1c>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e105      	b.n	800a4bc <HAL_ADC_ConfigChannel+0x228>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b09      	cmp	r3, #9
 800a2be:	d925      	bls.n	800a30c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68d9      	ldr	r1, [r3, #12]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3b1e      	subs	r3, #30
 800a2d6:	2207      	movs	r2, #7
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	43da      	mvns	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	400a      	ands	r2, r1
 800a2e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68d9      	ldr	r1, [r3, #12]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	4403      	add	r3, r0
 800a2fe:	3b1e      	subs	r3, #30
 800a300:	409a      	lsls	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	60da      	str	r2, [r3, #12]
 800a30a:	e022      	b.n	800a352 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6919      	ldr	r1, [r3, #16]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	461a      	mov	r2, r3
 800a31a:	4613      	mov	r3, r2
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	4413      	add	r3, r2
 800a320:	2207      	movs	r2, #7
 800a322:	fa02 f303 	lsl.w	r3, r2, r3
 800a326:	43da      	mvns	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	400a      	ands	r2, r1
 800a32e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6919      	ldr	r1, [r3, #16]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4618      	mov	r0, r3
 800a342:	4603      	mov	r3, r0
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4403      	add	r3, r0
 800a348:	409a      	lsls	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b06      	cmp	r3, #6
 800a358:	d824      	bhi.n	800a3a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	3b05      	subs	r3, #5
 800a36c:	221f      	movs	r2, #31
 800a36e:	fa02 f303 	lsl.w	r3, r2, r3
 800a372:	43da      	mvns	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	400a      	ands	r2, r1
 800a37a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	4618      	mov	r0, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	3b05      	subs	r3, #5
 800a396:	fa00 f203 	lsl.w	r2, r0, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a3a2:	e04c      	b.n	800a43e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2b0c      	cmp	r3, #12
 800a3aa:	d824      	bhi.n	800a3f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	3b23      	subs	r3, #35	@ 0x23
 800a3be:	221f      	movs	r2, #31
 800a3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c4:	43da      	mvns	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	400a      	ands	r2, r1
 800a3cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	4618      	mov	r0, r3
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3b23      	subs	r3, #35	@ 0x23
 800a3e8:	fa00 f203 	lsl.w	r2, r0, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3f4:	e023      	b.n	800a43e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	3b41      	subs	r3, #65	@ 0x41
 800a408:	221f      	movs	r2, #31
 800a40a:	fa02 f303 	lsl.w	r3, r2, r3
 800a40e:	43da      	mvns	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	400a      	ands	r2, r1
 800a416:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	b29b      	uxth	r3, r3
 800a424:	4618      	mov	r0, r3
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	3b41      	subs	r3, #65	@ 0x41
 800a432:	fa00 f203 	lsl.w	r2, r0, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a43e:	4b22      	ldr	r3, [pc, #136]	@ (800a4c8 <HAL_ADC_ConfigChannel+0x234>)
 800a440:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a21      	ldr	r2, [pc, #132]	@ (800a4cc <HAL_ADC_ConfigChannel+0x238>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d109      	bne.n	800a460 <HAL_ADC_ConfigChannel+0x1cc>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b12      	cmp	r3, #18
 800a452:	d105      	bne.n	800a460 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a19      	ldr	r2, [pc, #100]	@ (800a4cc <HAL_ADC_ConfigChannel+0x238>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d123      	bne.n	800a4b2 <HAL_ADC_ConfigChannel+0x21e>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b10      	cmp	r3, #16
 800a470:	d003      	beq.n	800a47a <HAL_ADC_ConfigChannel+0x1e6>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b11      	cmp	r3, #17
 800a478:	d11b      	bne.n	800a4b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b10      	cmp	r3, #16
 800a48c:	d111      	bne.n	800a4b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a48e:	4b10      	ldr	r3, [pc, #64]	@ (800a4d0 <HAL_ADC_ConfigChannel+0x23c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a10      	ldr	r2, [pc, #64]	@ (800a4d4 <HAL_ADC_ConfigChannel+0x240>)
 800a494:	fba2 2303 	umull	r2, r3, r2, r3
 800a498:	0c9a      	lsrs	r2, r3, #18
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a4a4:	e002      	b.n	800a4ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f9      	bne.n	800a4a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	40012300 	.word	0x40012300
 800a4cc:	40012000 	.word	0x40012000
 800a4d0:	20000298 	.word	0x20000298
 800a4d4:	431bde83 	.word	0x431bde83

0800a4d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a4e0:	4b79      	ldr	r3, [pc, #484]	@ (800a6c8 <ADC_Init+0x1f0>)
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a50c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6859      	ldr	r1, [r3, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	021a      	lsls	r2, r3, #8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800a530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6859      	ldr	r1, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6899      	ldr	r1, [r3, #8]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56a:	4a58      	ldr	r2, [pc, #352]	@ (800a6cc <ADC_Init+0x1f4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d022      	beq.n	800a5b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a57e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6899      	ldr	r1, [r3, #8]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689a      	ldr	r2, [r3, #8]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a5a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6899      	ldr	r1, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	609a      	str	r2, [r3, #8]
 800a5b4:	e00f      	b.n	800a5d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a5c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689a      	ldr	r2, [r3, #8]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a5d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0202 	bic.w	r2, r2, #2
 800a5e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6899      	ldr	r1, [r3, #8]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7e1b      	ldrb	r3, [r3, #24]
 800a5f0:	005a      	lsls	r2, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01b      	beq.n	800a63c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a612:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800a622:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6859      	ldr	r1, [r3, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62e:	3b01      	subs	r3, #1
 800a630:	035a      	lsls	r2, r3, #13
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
 800a63a:	e007      	b.n	800a64c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a64a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800a65a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	3b01      	subs	r3, #1
 800a668:	051a      	lsls	r2, r3, #20
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6899      	ldr	r1, [r3, #8]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a68e:	025a      	lsls	r2, r3, #9
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6899      	ldr	r1, [r3, #8]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	029a      	lsls	r2, r3, #10
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	609a      	str	r2, [r3, #8]
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	40012300 	.word	0x40012300
 800a6cc:	0f000001 	.word	0x0f000001

0800a6d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <__NVIC_SetPriorityGrouping+0x44>)
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a6fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a702:	4a04      	ldr	r2, [pc, #16]	@ (800a714 <__NVIC_SetPriorityGrouping+0x44>)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	60d3      	str	r3, [r2, #12]
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	e000ed00 	.word	0xe000ed00

0800a718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a71c:	4b04      	ldr	r3, [pc, #16]	@ (800a730 <__NVIC_GetPriorityGrouping+0x18>)
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	f003 0307 	and.w	r3, r3, #7
}
 800a726:	4618      	mov	r0, r3
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	e000ed00 	.word	0xe000ed00

0800a734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a742:	2b00      	cmp	r3, #0
 800a744:	db0b      	blt.n	800a75e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	f003 021f 	and.w	r2, r3, #31
 800a74c:	4907      	ldr	r1, [pc, #28]	@ (800a76c <__NVIC_EnableIRQ+0x38>)
 800a74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a752:	095b      	lsrs	r3, r3, #5
 800a754:	2001      	movs	r0, #1
 800a756:	fa00 f202 	lsl.w	r2, r0, r2
 800a75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a75e:	bf00      	nop
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	e000e100 	.word	0xe000e100

0800a770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a77c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a780:	2b00      	cmp	r3, #0
 800a782:	db0a      	blt.n	800a79a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	b2da      	uxtb	r2, r3
 800a788:	490c      	ldr	r1, [pc, #48]	@ (800a7bc <__NVIC_SetPriority+0x4c>)
 800a78a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a78e:	0112      	lsls	r2, r2, #4
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	440b      	add	r3, r1
 800a794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a798:	e00a      	b.n	800a7b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	4908      	ldr	r1, [pc, #32]	@ (800a7c0 <__NVIC_SetPriority+0x50>)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	0112      	lsls	r2, r2, #4
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	440b      	add	r3, r1
 800a7ae:	761a      	strb	r2, [r3, #24]
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	e000e100 	.word	0xe000e100
 800a7c0:	e000ed00 	.word	0xe000ed00

0800a7c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b089      	sub	sp, #36	@ 0x24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	f1c3 0307 	rsb	r3, r3, #7
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	bf28      	it	cs
 800a7e2:	2304      	movcs	r3, #4
 800a7e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	2b06      	cmp	r3, #6
 800a7ec:	d902      	bls.n	800a7f4 <NVIC_EncodePriority+0x30>
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	3b03      	subs	r3, #3
 800a7f2:	e000      	b.n	800a7f6 <NVIC_EncodePriority+0x32>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a802:	43da      	mvns	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	401a      	ands	r2, r3
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a80c:	f04f 31ff 	mov.w	r1, #4294967295
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	fa01 f303 	lsl.w	r3, r1, r3
 800a816:	43d9      	mvns	r1, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a81c:	4313      	orrs	r3, r2
         );
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3724      	adds	r7, #36	@ 0x24
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff ff4c 	bl	800a6d0 <__NVIC_SetPriorityGrouping>
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a84e:	2300      	movs	r3, #0
 800a850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a852:	f7ff ff61 	bl	800a718 <__NVIC_GetPriorityGrouping>
 800a856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	6978      	ldr	r0, [r7, #20]
 800a85e:	f7ff ffb1 	bl	800a7c4 <NVIC_EncodePriority>
 800a862:	4602      	mov	r2, r0
 800a864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff ff80 	bl	800a770 <__NVIC_SetPriority>
}
 800a870:	bf00      	nop
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff ff54 	bl	800a734 <__NVIC_EnableIRQ>
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d004      	beq.n	800a8b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2280      	movs	r2, #128	@ 0x80
 800a8ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e00c      	b.n	800a8cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 0201 	bic.w	r2, r2, #1
 800a8c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b089      	sub	sp, #36	@ 0x24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	e16b      	b.n	800abcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	4013      	ands	r3, r2
 800a906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	f040 815a 	bne.w	800abc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d005      	beq.n	800a92a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a926:	2b02      	cmp	r3, #2
 800a928:	d130      	bne.n	800a98c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	2203      	movs	r2, #3
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	43db      	mvns	r3, r3
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	4013      	ands	r3, r2
 800a940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	fa02 f303 	lsl.w	r3, r2, r3
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	4313      	orrs	r3, r2
 800a952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a960:	2201      	movs	r2, #1
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	fa02 f303 	lsl.w	r3, r2, r3
 800a968:	43db      	mvns	r3, r3
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	4013      	ands	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	091b      	lsrs	r3, r3, #4
 800a976:	f003 0201 	and.w	r2, r3, #1
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	fa02 f303 	lsl.w	r3, r2, r3
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	4313      	orrs	r3, r2
 800a984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f003 0303 	and.w	r3, r3, #3
 800a994:	2b03      	cmp	r3, #3
 800a996:	d017      	beq.n	800a9c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a8:	43db      	mvns	r3, r3
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d123      	bne.n	800aa1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	08da      	lsrs	r2, r3, #3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3208      	adds	r2, #8
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	220f      	movs	r2, #15
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	691a      	ldr	r2, [r3, #16]
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	fa02 f303 	lsl.w	r3, r2, r3
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	08da      	lsrs	r2, r3, #3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3208      	adds	r2, #8
 800aa16:	69b9      	ldr	r1, [r7, #24]
 800aa18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	2203      	movs	r2, #3
 800aa28:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2c:	43db      	mvns	r3, r3
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	4013      	ands	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f003 0203 	and.w	r2, r3, #3
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	fa02 f303 	lsl.w	r3, r2, r3
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 80b4 	beq.w	800abc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	4b60      	ldr	r3, [pc, #384]	@ (800abe4 <HAL_GPIO_Init+0x30c>)
 800aa64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa66:	4a5f      	ldr	r2, [pc, #380]	@ (800abe4 <HAL_GPIO_Init+0x30c>)
 800aa68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa6c:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa6e:	4b5d      	ldr	r3, [pc, #372]	@ (800abe4 <HAL_GPIO_Init+0x30c>)
 800aa70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa7a:	4a5b      	ldr	r2, [pc, #364]	@ (800abe8 <HAL_GPIO_Init+0x310>)
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	089b      	lsrs	r3, r3, #2
 800aa80:	3302      	adds	r3, #2
 800aa82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	220f      	movs	r2, #15
 800aa92:	fa02 f303 	lsl.w	r3, r2, r3
 800aa96:	43db      	mvns	r3, r3
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a52      	ldr	r2, [pc, #328]	@ (800abec <HAL_GPIO_Init+0x314>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d02b      	beq.n	800aafe <HAL_GPIO_Init+0x226>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a51      	ldr	r2, [pc, #324]	@ (800abf0 <HAL_GPIO_Init+0x318>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d025      	beq.n	800aafa <HAL_GPIO_Init+0x222>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a50      	ldr	r2, [pc, #320]	@ (800abf4 <HAL_GPIO_Init+0x31c>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d01f      	beq.n	800aaf6 <HAL_GPIO_Init+0x21e>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a4f      	ldr	r2, [pc, #316]	@ (800abf8 <HAL_GPIO_Init+0x320>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d019      	beq.n	800aaf2 <HAL_GPIO_Init+0x21a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a4e      	ldr	r2, [pc, #312]	@ (800abfc <HAL_GPIO_Init+0x324>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d013      	beq.n	800aaee <HAL_GPIO_Init+0x216>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a4d      	ldr	r2, [pc, #308]	@ (800ac00 <HAL_GPIO_Init+0x328>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00d      	beq.n	800aaea <HAL_GPIO_Init+0x212>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a4c      	ldr	r2, [pc, #304]	@ (800ac04 <HAL_GPIO_Init+0x32c>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d007      	beq.n	800aae6 <HAL_GPIO_Init+0x20e>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a4b      	ldr	r2, [pc, #300]	@ (800ac08 <HAL_GPIO_Init+0x330>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d101      	bne.n	800aae2 <HAL_GPIO_Init+0x20a>
 800aade:	2307      	movs	r3, #7
 800aae0:	e00e      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aae2:	2308      	movs	r3, #8
 800aae4:	e00c      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aae6:	2306      	movs	r3, #6
 800aae8:	e00a      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aaea:	2305      	movs	r3, #5
 800aaec:	e008      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aaee:	2304      	movs	r3, #4
 800aaf0:	e006      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e004      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e002      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e000      	b.n	800ab00 <HAL_GPIO_Init+0x228>
 800aafe:	2300      	movs	r3, #0
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	f002 0203 	and.w	r2, r2, #3
 800ab06:	0092      	lsls	r2, r2, #2
 800ab08:	4093      	lsls	r3, r2
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab10:	4935      	ldr	r1, [pc, #212]	@ (800abe8 <HAL_GPIO_Init+0x310>)
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	089b      	lsrs	r3, r3, #2
 800ab16:	3302      	adds	r3, #2
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab1e:	4b3b      	ldr	r3, [pc, #236]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	43db      	mvns	r3, r3
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab42:	4a32      	ldr	r2, [pc, #200]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab48:	4b30      	ldr	r3, [pc, #192]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	43db      	mvns	r3, r3
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	4013      	ands	r3, r2
 800ab56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab6c:	4a27      	ldr	r2, [pc, #156]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ab72:	4b26      	ldr	r3, [pc, #152]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	43db      	mvns	r3, r3
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	4013      	ands	r3, r2
 800ab80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab96:	4a1d      	ldr	r2, [pc, #116]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab9c:	4b1b      	ldr	r3, [pc, #108]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	43db      	mvns	r3, r3
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	4013      	ands	r3, r2
 800abaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abc0:	4a12      	ldr	r2, [pc, #72]	@ (800ac0c <HAL_GPIO_Init+0x334>)
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	3301      	adds	r3, #1
 800abca:	61fb      	str	r3, [r7, #28]
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	2b0f      	cmp	r3, #15
 800abd0:	f67f ae90 	bls.w	800a8f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	3724      	adds	r7, #36	@ 0x24
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40023800 	.word	0x40023800
 800abe8:	40013800 	.word	0x40013800
 800abec:	40020000 	.word	0x40020000
 800abf0:	40020400 	.word	0x40020400
 800abf4:	40020800 	.word	0x40020800
 800abf8:	40020c00 	.word	0x40020c00
 800abfc:	40021000 	.word	0x40021000
 800ac00:	40021400 	.word	0x40021400
 800ac04:	40021800 	.word	0x40021800
 800ac08:	40021c00 	.word	0x40021c00
 800ac0c:	40013c00 	.word	0x40013c00

0800ac10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	887b      	ldrh	r3, [r7, #2]
 800ac22:	4013      	ands	r3, r2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	73fb      	strb	r3, [r7, #15]
 800ac2c:	e001      	b.n	800ac32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	807b      	strh	r3, [r7, #2]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac50:	787b      	ldrb	r3, [r7, #1]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac56:	887a      	ldrh	r2, [r7, #2]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac5c:	e003      	b.n	800ac66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac5e:	887b      	ldrh	r3, [r7, #2]
 800ac60:	041a      	lsls	r2, r3, #16
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	619a      	str	r2, [r3, #24]
}
 800ac66:	bf00      	nop
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b085      	sub	sp, #20
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ac84:	887a      	ldrh	r2, [r7, #2]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	041a      	lsls	r2, r3, #16
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	43d9      	mvns	r1, r3
 800ac90:	887b      	ldrh	r3, [r7, #2]
 800ac92:	400b      	ands	r3, r1
 800ac94:	431a      	orrs	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	619a      	str	r2, [r3, #24]
}
 800ac9a:	bf00      	nop
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
	...

0800aca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e12b      	b.n	800af12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7fe faf6 	bl	80092c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2224      	movs	r2, #36	@ 0x24
 800acd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 0201 	bic.w	r2, r2, #1
 800acea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800acfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ad0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad0c:	f001 fd24 	bl	800c758 <HAL_RCC_GetPCLK1Freq>
 800ad10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4a81      	ldr	r2, [pc, #516]	@ (800af1c <HAL_I2C_Init+0x274>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d807      	bhi.n	800ad2c <HAL_I2C_Init+0x84>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4a80      	ldr	r2, [pc, #512]	@ (800af20 <HAL_I2C_Init+0x278>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	bf94      	ite	ls
 800ad24:	2301      	movls	r3, #1
 800ad26:	2300      	movhi	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	e006      	b.n	800ad3a <HAL_I2C_Init+0x92>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4a7d      	ldr	r2, [pc, #500]	@ (800af24 <HAL_I2C_Init+0x27c>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	bf94      	ite	ls
 800ad34:	2301      	movls	r3, #1
 800ad36:	2300      	movhi	r3, #0
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e0e7      	b.n	800af12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4a78      	ldr	r2, [pc, #480]	@ (800af28 <HAL_I2C_Init+0x280>)
 800ad46:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4a:	0c9b      	lsrs	r3, r3, #18
 800ad4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	4a6a      	ldr	r2, [pc, #424]	@ (800af1c <HAL_I2C_Init+0x274>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d802      	bhi.n	800ad7c <HAL_I2C_Init+0xd4>
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	e009      	b.n	800ad90 <HAL_I2C_Init+0xe8>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	4a69      	ldr	r2, [pc, #420]	@ (800af2c <HAL_I2C_Init+0x284>)
 800ad88:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8c:	099b      	lsrs	r3, r3, #6
 800ad8e:	3301      	adds	r3, #1
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	6812      	ldr	r2, [r2, #0]
 800ad94:	430b      	orrs	r3, r1
 800ad96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800ada2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	495c      	ldr	r1, [pc, #368]	@ (800af1c <HAL_I2C_Init+0x274>)
 800adac:	428b      	cmp	r3, r1
 800adae:	d819      	bhi.n	800ade4 <HAL_I2C_Init+0x13c>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	1e59      	subs	r1, r3, #1
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	fbb1 f3f3 	udiv	r3, r1, r3
 800adbe:	1c59      	adds	r1, r3, #1
 800adc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800adc4:	400b      	ands	r3, r1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00a      	beq.n	800ade0 <HAL_I2C_Init+0x138>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	1e59      	subs	r1, r3, #1
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	fbb1 f3f3 	udiv	r3, r1, r3
 800add8:	3301      	adds	r3, #1
 800adda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adde:	e051      	b.n	800ae84 <HAL_I2C_Init+0x1dc>
 800ade0:	2304      	movs	r3, #4
 800ade2:	e04f      	b.n	800ae84 <HAL_I2C_Init+0x1dc>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d111      	bne.n	800ae10 <HAL_I2C_Init+0x168>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	1e58      	subs	r0, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6859      	ldr	r1, [r3, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	440b      	add	r3, r1
 800adfa:	fbb0 f3f3 	udiv	r3, r0, r3
 800adfe:	3301      	adds	r3, #1
 800ae00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bf0c      	ite	eq
 800ae08:	2301      	moveq	r3, #1
 800ae0a:	2300      	movne	r3, #0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	e012      	b.n	800ae36 <HAL_I2C_Init+0x18e>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	1e58      	subs	r0, r3, #1
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6859      	ldr	r1, [r3, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	0099      	lsls	r1, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae26:	3301      	adds	r3, #1
 800ae28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bf0c      	ite	eq
 800ae30:	2301      	moveq	r3, #1
 800ae32:	2300      	movne	r3, #0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <HAL_I2C_Init+0x196>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e022      	b.n	800ae84 <HAL_I2C_Init+0x1dc>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10e      	bne.n	800ae64 <HAL_I2C_Init+0x1bc>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	1e58      	subs	r0, r3, #1
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6859      	ldr	r1, [r3, #4]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	440b      	add	r3, r1
 800ae54:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae58:	3301      	adds	r3, #1
 800ae5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae62:	e00f      	b.n	800ae84 <HAL_I2C_Init+0x1dc>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	1e58      	subs	r0, r3, #1
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6859      	ldr	r1, [r3, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	440b      	add	r3, r1
 800ae72:	0099      	lsls	r1, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	6809      	ldr	r1, [r1, #0]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69da      	ldr	r2, [r3, #28]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800aeb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6911      	ldr	r1, [r2, #16]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	68d2      	ldr	r2, [r2, #12]
 800aebe:	4311      	orrs	r1, r2
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	6812      	ldr	r2, [r2, #0]
 800aec4:	430b      	orrs	r3, r1
 800aec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	695a      	ldr	r2, [r3, #20]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	431a      	orrs	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f042 0201 	orr.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	000186a0 	.word	0x000186a0
 800af20:	001e847f 	.word	0x001e847f
 800af24:	003d08ff 	.word	0x003d08ff
 800af28:	431bde83 	.word	0x431bde83
 800af2c:	10624dd3 	.word	0x10624dd3

0800af30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af02      	add	r7, sp, #8
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	607a      	str	r2, [r7, #4]
 800af3a:	461a      	mov	r2, r3
 800af3c:	460b      	mov	r3, r1
 800af3e:	817b      	strh	r3, [r7, #10]
 800af40:	4613      	mov	r3, r2
 800af42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af44:	f7fe ff94 	bl	8009e70 <HAL_GetTick>
 800af48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b20      	cmp	r3, #32
 800af54:	f040 80e0 	bne.w	800b118 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2319      	movs	r3, #25
 800af5e:	2201      	movs	r2, #1
 800af60:	4970      	ldr	r1, [pc, #448]	@ (800b124 <HAL_I2C_Master_Transmit+0x1f4>)
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 fd92 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800af6e:	2302      	movs	r3, #2
 800af70:	e0d3      	b.n	800b11a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d101      	bne.n	800af80 <HAL_I2C_Master_Transmit+0x50>
 800af7c:	2302      	movs	r3, #2
 800af7e:	e0cc      	b.n	800b11a <HAL_I2C_Master_Transmit+0x1ea>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b01      	cmp	r3, #1
 800af94:	d007      	beq.n	800afa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f042 0201 	orr.w	r2, r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800afb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2221      	movs	r2, #33	@ 0x21
 800afba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2210      	movs	r2, #16
 800afc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	893a      	ldrh	r2, [r7, #8]
 800afd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afdc:	b29a      	uxth	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4a50      	ldr	r2, [pc, #320]	@ (800b128 <HAL_I2C_Master_Transmit+0x1f8>)
 800afe6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800afe8:	8979      	ldrh	r1, [r7, #10]
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	6a3a      	ldr	r2, [r7, #32]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 fbfc 	bl	800b7ec <I2C_MasterRequestWrite>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e08d      	b.n	800b11a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800affe:	2300      	movs	r3, #0
 800b000:	613b      	str	r3, [r7, #16]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	613b      	str	r3, [r7, #16]
 800b012:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b014:	e066      	b.n	800b0e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	6a39      	ldr	r1, [r7, #32]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f000 fe50 	bl	800bcc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00d      	beq.n	800b042 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d107      	bne.n	800b03e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b03c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e06b      	b.n	800b11a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b046:	781a      	ldrb	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	3b01      	subs	r3, #1
 800b060:	b29a      	uxth	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b06a:	3b01      	subs	r3, #1
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	695b      	ldr	r3, [r3, #20]
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d11b      	bne.n	800b0b8 <HAL_I2C_Master_Transmit+0x188>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	d017      	beq.n	800b0b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	6a39      	ldr	r1, [r7, #32]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 fe47 	bl	800bd50 <I2C_WaitOnBTFFlagUntilTimeout>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00d      	beq.n	800b0e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0cc:	2b04      	cmp	r3, #4
 800b0ce:	d107      	bne.n	800b0e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e01a      	b.n	800b11a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d194      	bne.n	800b016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2220      	movs	r2, #32
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	e000      	b.n	800b11a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b118:	2302      	movs	r3, #2
  }
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	00100002 	.word	0x00100002
 800b128:	ffff0000 	.word	0xffff0000

0800b12c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08c      	sub	sp, #48	@ 0x30
 800b130:	af02      	add	r7, sp, #8
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	461a      	mov	r2, r3
 800b138:	460b      	mov	r3, r1
 800b13a:	817b      	strh	r3, [r7, #10]
 800b13c:	4613      	mov	r3, r2
 800b13e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b140:	f7fe fe96 	bl	8009e70 <HAL_GetTick>
 800b144:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b20      	cmp	r3, #32
 800b150:	f040 8217 	bne.w	800b582 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	2319      	movs	r3, #25
 800b15a:	2201      	movs	r2, #1
 800b15c:	497c      	ldr	r1, [pc, #496]	@ (800b350 <HAL_I2C_Master_Receive+0x224>)
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 fc94 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b16a:	2302      	movs	r3, #2
 800b16c:	e20a      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b174:	2b01      	cmp	r3, #1
 800b176:	d101      	bne.n	800b17c <HAL_I2C_Master_Receive+0x50>
 800b178:	2302      	movs	r3, #2
 800b17a:	e203      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d007      	beq.n	800b1a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f042 0201 	orr.w	r2, r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b1b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2222      	movs	r2, #34	@ 0x22
 800b1b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2210      	movs	r2, #16
 800b1be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	893a      	ldrh	r2, [r7, #8]
 800b1d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4a5c      	ldr	r2, [pc, #368]	@ (800b354 <HAL_I2C_Master_Receive+0x228>)
 800b1e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1e4:	8979      	ldrh	r1, [r7, #10]
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f000 fb80 	bl	800b8f0 <I2C_MasterRequestRead>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e1c4      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d113      	bne.n	800b22a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b202:	2300      	movs	r3, #0
 800b204:	623b      	str	r3, [r7, #32]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	623b      	str	r3, [r7, #32]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	623b      	str	r3, [r7, #32]
 800b216:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	e198      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d11b      	bne.n	800b26a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b242:	2300      	movs	r3, #0
 800b244:	61fb      	str	r3, [r7, #28]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	61fb      	str	r3, [r7, #28]
 800b256:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	e178      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d11b      	bne.n	800b2aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b280:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b292:	2300      	movs	r3, #0
 800b294:	61bb      	str	r3, [r7, #24]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	699b      	ldr	r3, [r3, #24]
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	e158      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b2b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	617b      	str	r3, [r7, #20]
 800b2ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b2d0:	e144      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	f200 80f1 	bhi.w	800b4be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d123      	bne.n	800b32c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fd79 	bl	800bde0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e145      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691a      	ldr	r2, [r3, #16]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b302:	b2d2      	uxtb	r2, r2
 800b304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b314:	3b01      	subs	r3, #1
 800b316:	b29a      	uxth	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b320:	b29b      	uxth	r3, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b32a:	e117      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b330:	2b02      	cmp	r3, #2
 800b332:	d14e      	bne.n	800b3d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	2200      	movs	r2, #0
 800b33c:	4906      	ldr	r1, [pc, #24]	@ (800b358 <HAL_I2C_Master_Receive+0x22c>)
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fba4 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d008      	beq.n	800b35c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e11a      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
 800b34e:	bf00      	nop
 800b350:	00100002 	.word	0x00100002
 800b354:	ffff0000 	.word	0xffff0000
 800b358:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b36a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	691a      	ldr	r2, [r3, #16]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	b2d2      	uxtb	r2, r2
 800b378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b388:	3b01      	subs	r3, #1
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b394:	b29b      	uxth	r3, r3
 800b396:	3b01      	subs	r3, #1
 800b398:	b29a      	uxth	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a8:	b2d2      	uxtb	r2, r2
 800b3aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b3d0:	e0c4      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	2200      	movs	r2, #0
 800b3da:	496c      	ldr	r1, [pc, #432]	@ (800b58c <HAL_I2C_Master_Receive+0x460>)
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 fb55 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e0cb      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	691a      	ldr	r2, [r3, #16]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b424:	b29b      	uxth	r3, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	2200      	movs	r2, #0
 800b436:	4955      	ldr	r1, [pc, #340]	@ (800b58c <HAL_I2C_Master_Receive+0x460>)
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 fb27 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e09d      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691a      	ldr	r2, [r3, #16]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b474:	3b01      	subs	r3, #1
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b480:	b29b      	uxth	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691a      	ldr	r2, [r3, #16]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b4bc:	e04e      	b.n	800b55c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fc8c 	bl	800bde0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e058      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b04      	cmp	r3, #4
 800b510:	d124      	bne.n	800b55c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b516:	2b03      	cmp	r3, #3
 800b518:	d107      	bne.n	800b52a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b528:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	691a      	ldr	r2, [r3, #16]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b546:	3b01      	subs	r3, #1
 800b548:	b29a      	uxth	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b01      	subs	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b560:	2b00      	cmp	r3, #0
 800b562:	f47f aeb6 	bne.w	800b2d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2220      	movs	r2, #32
 800b56a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	e000      	b.n	800b584 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800b582:	2302      	movs	r3, #2
  }
}
 800b584:	4618      	mov	r0, r3
 800b586:	3728      	adds	r7, #40	@ 0x28
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	00010004 	.word	0x00010004

0800b590 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08a      	sub	sp, #40	@ 0x28
 800b594:	af02      	add	r7, sp, #8
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	460b      	mov	r3, r1
 800b59e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800b5a0:	f7fe fc66 	bl	8009e70 <HAL_GetTick>
 800b5a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b20      	cmp	r3, #32
 800b5b4:	f040 8111 	bne.w	800b7da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	2319      	movs	r3, #25
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4988      	ldr	r1, [pc, #544]	@ (800b7e4 <HAL_I2C_IsDeviceReady+0x254>)
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 fa62 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800b5ce:	2302      	movs	r3, #2
 800b5d0:	e104      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d101      	bne.n	800b5e0 <HAL_I2C_IsDeviceReady+0x50>
 800b5dc:	2302      	movs	r3, #2
 800b5de:	e0fd      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d007      	beq.n	800b606 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f042 0201 	orr.w	r2, r2, #1
 800b604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2224      	movs	r2, #36	@ 0x24
 800b61a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4a70      	ldr	r2, [pc, #448]	@ (800b7e8 <HAL_I2C_IsDeviceReady+0x258>)
 800b628:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b638:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2200      	movs	r2, #0
 800b642:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 fa20 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00d      	beq.n	800b66e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b65c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b660:	d103      	bne.n	800b66a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b668:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e0b6      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b66e:	897b      	ldrh	r3, [r7, #10]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	461a      	mov	r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b67c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800b67e:	f7fe fbf7 	bl	8009e70 <HAL_GetTick>
 800b682:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b02      	cmp	r3, #2
 800b690:	bf0c      	ite	eq
 800b692:	2301      	moveq	r3, #1
 800b694:	2300      	movne	r3, #0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6a8:	bf0c      	ite	eq
 800b6aa:	2301      	moveq	r3, #1
 800b6ac:	2300      	movne	r3, #0
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800b6b2:	e025      	b.n	800b700 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b6b4:	f7fe fbdc 	bl	8009e70 <HAL_GetTick>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d302      	bcc.n	800b6ca <HAL_I2C_IsDeviceReady+0x13a>
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d103      	bne.n	800b6d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	22a0      	movs	r2, #160	@ 0xa0
 800b6ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	bf0c      	ite	eq
 800b6e0:	2301      	moveq	r3, #1
 800b6e2:	2300      	movne	r3, #0
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6f6:	bf0c      	ite	eq
 800b6f8:	2301      	moveq	r3, #1
 800b6fa:	2300      	movne	r3, #0
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2ba0      	cmp	r3, #160	@ 0xa0
 800b70a:	d005      	beq.n	800b718 <HAL_I2C_IsDeviceReady+0x188>
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <HAL_I2C_IsDeviceReady+0x188>
 800b712:	7dbb      	ldrb	r3, [r7, #22]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0cd      	beq.n	800b6b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2220      	movs	r2, #32
 800b71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d129      	bne.n	800b782 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b73c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b73e:	2300      	movs	r3, #0
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	613b      	str	r3, [r7, #16]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	613b      	str	r3, [r7, #16]
 800b752:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2319      	movs	r3, #25
 800b75a:	2201      	movs	r2, #1
 800b75c:	4921      	ldr	r1, [pc, #132]	@ (800b7e4 <HAL_I2C_IsDeviceReady+0x254>)
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f994 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e036      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2220      	movs	r2, #32
 800b772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	e02c      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b790:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b79a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	2319      	movs	r3, #25
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	490f      	ldr	r1, [pc, #60]	@ (800b7e4 <HAL_I2C_IsDeviceReady+0x254>)
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 f970 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e012      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	f4ff af32 	bcc.w	800b62a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e000      	b.n	800b7dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800b7da:	2302      	movs	r3, #2
  }
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	00100002 	.word	0x00100002
 800b7e8:	ffff0000 	.word	0xffff0000

0800b7ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af02      	add	r7, sp, #8
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	607a      	str	r2, [r7, #4]
 800b7f6:	603b      	str	r3, [r7, #0]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b800:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2b08      	cmp	r3, #8
 800b806:	d006      	beq.n	800b816 <I2C_MasterRequestWrite+0x2a>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d003      	beq.n	800b816 <I2C_MasterRequestWrite+0x2a>
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b814:	d108      	bne.n	800b828 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	e00b      	b.n	800b840 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b82c:	2b12      	cmp	r3, #18
 800b82e:	d107      	bne.n	800b840 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b83e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f91d 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00d      	beq.n	800b874 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b866:	d103      	bne.n	800b870 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b86e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	e035      	b.n	800b8e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b87c:	d108      	bne.n	800b890 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b87e:	897b      	ldrh	r3, [r7, #10]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	461a      	mov	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b88c:	611a      	str	r2, [r3, #16]
 800b88e:	e01b      	b.n	800b8c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b890:	897b      	ldrh	r3, [r7, #10]
 800b892:	11db      	asrs	r3, r3, #7
 800b894:	b2db      	uxtb	r3, r3
 800b896:	f003 0306 	and.w	r3, r3, #6
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f063 030f 	orn	r3, r3, #15
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	490e      	ldr	r1, [pc, #56]	@ (800b8e8 <I2C_MasterRequestWrite+0xfc>)
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 f966 	bl	800bb80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e010      	b.n	800b8e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b8be:	897b      	ldrh	r3, [r7, #10]
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	4907      	ldr	r1, [pc, #28]	@ (800b8ec <I2C_MasterRequestWrite+0x100>)
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f956 	bl	800bb80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e000      	b.n	800b8e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	00010008 	.word	0x00010008
 800b8ec:	00010002 	.word	0x00010002

0800b8f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af02      	add	r7, sp, #8
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	607a      	str	r2, [r7, #4]
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b904:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b914:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b08      	cmp	r3, #8
 800b91a:	d006      	beq.n	800b92a <I2C_MasterRequestRead+0x3a>
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d003      	beq.n	800b92a <I2C_MasterRequestRead+0x3a>
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b928:	d108      	bne.n	800b93c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e00b      	b.n	800b954 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b940:	2b11      	cmp	r3, #17
 800b942:	d107      	bne.n	800b954 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 f893 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00d      	beq.n	800b988 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b97a:	d103      	bne.n	800b984 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b982:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e079      	b.n	800ba7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b990:	d108      	bne.n	800b9a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b992:	897b      	ldrh	r3, [r7, #10]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	f043 0301 	orr.w	r3, r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	611a      	str	r2, [r3, #16]
 800b9a2:	e05f      	b.n	800ba64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b9a4:	897b      	ldrh	r3, [r7, #10]
 800b9a6:	11db      	asrs	r3, r3, #7
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	f003 0306 	and.w	r3, r3, #6
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	f063 030f 	orn	r3, r3, #15
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	4930      	ldr	r1, [pc, #192]	@ (800ba84 <I2C_MasterRequestRead+0x194>)
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 f8dc 	bl	800bb80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e054      	b.n	800ba7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b9d2:	897b      	ldrh	r3, [r7, #10]
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	4929      	ldr	r1, [pc, #164]	@ (800ba88 <I2C_MasterRequestRead+0x198>)
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 f8cc 	bl	800bb80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e044      	b.n	800ba7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	613b      	str	r3, [r7, #16]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	613b      	str	r3, [r7, #16]
 800ba06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f000 f831 	bl	800ba8c <I2C_WaitOnFlagUntilTimeout>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00d      	beq.n	800ba4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba3e:	d103      	bne.n	800ba48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba46:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	e017      	b.n	800ba7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ba4c:	897b      	ldrh	r3, [r7, #10]
 800ba4e:	11db      	asrs	r3, r3, #7
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 0306 	and.w	r3, r3, #6
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	f063 030e 	orn	r3, r3, #14
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	4907      	ldr	r1, [pc, #28]	@ (800ba88 <I2C_MasterRequestRead+0x198>)
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 f888 	bl	800bb80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e000      	b.n	800ba7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	00010008 	.word	0x00010008
 800ba88:	00010002 	.word	0x00010002

0800ba8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba9c:	e048      	b.n	800bb30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d044      	beq.n	800bb30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baa6:	f7fe f9e3 	bl	8009e70 <HAL_GetTick>
 800baaa:	4602      	mov	r2, r0
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d302      	bcc.n	800babc <I2C_WaitOnFlagUntilTimeout+0x30>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d139      	bne.n	800bb30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	0c1b      	lsrs	r3, r3, #16
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d10d      	bne.n	800bae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	43da      	mvns	r2, r3
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4013      	ands	r3, r2
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bf0c      	ite	eq
 800bad8:	2301      	moveq	r3, #1
 800bada:	2300      	movne	r3, #0
 800badc:	b2db      	uxtb	r3, r3
 800bade:	461a      	mov	r2, r3
 800bae0:	e00c      	b.n	800bafc <I2C_WaitOnFlagUntilTimeout+0x70>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	43da      	mvns	r2, r3
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	4013      	ands	r3, r2
 800baee:	b29b      	uxth	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bf0c      	ite	eq
 800baf4:	2301      	moveq	r3, #1
 800baf6:	2300      	movne	r3, #0
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	461a      	mov	r2, r3
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d116      	bne.n	800bb30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1c:	f043 0220 	orr.w	r2, r3, #32
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e023      	b.n	800bb78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	0c1b      	lsrs	r3, r3, #16
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d10d      	bne.n	800bb56 <I2C_WaitOnFlagUntilTimeout+0xca>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	43da      	mvns	r2, r3
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	4013      	ands	r3, r2
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2301      	moveq	r3, #1
 800bb4e:	2300      	movne	r3, #0
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	461a      	mov	r2, r3
 800bb54:	e00c      	b.n	800bb70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	43da      	mvns	r2, r3
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	4013      	ands	r3, r2
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bf0c      	ite	eq
 800bb68:	2301      	moveq	r3, #1
 800bb6a:	2300      	movne	r3, #0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	461a      	mov	r2, r3
 800bb70:	79fb      	ldrb	r3, [r7, #7]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d093      	beq.n	800ba9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb8e:	e071      	b.n	800bc74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb9e:	d123      	bne.n	800bbe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bbb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbd4:	f043 0204 	orr.w	r2, r3, #4
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e067      	b.n	800bcb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d041      	beq.n	800bc74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbf0:	f7fe f93e 	bl	8009e70 <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d302      	bcc.n	800bc06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d136      	bne.n	800bc74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	0c1b      	lsrs	r3, r3, #16
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d10c      	bne.n	800bc2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	43da      	mvns	r2, r3
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bf14      	ite	ne
 800bc22:	2301      	movne	r3, #1
 800bc24:	2300      	moveq	r3, #0
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	e00b      	b.n	800bc42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	43da      	mvns	r2, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	4013      	ands	r3, r2
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	bf14      	ite	ne
 800bc3c:	2301      	movne	r3, #1
 800bc3e:	2300      	moveq	r3, #0
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d016      	beq.n	800bc74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2220      	movs	r2, #32
 800bc50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc60:	f043 0220 	orr.w	r2, r3, #32
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e021      	b.n	800bcb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	0c1b      	lsrs	r3, r3, #16
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d10c      	bne.n	800bc98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	43da      	mvns	r2, r3
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	4013      	ands	r3, r2
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bf14      	ite	ne
 800bc90:	2301      	movne	r3, #1
 800bc92:	2300      	moveq	r3, #0
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	e00b      	b.n	800bcb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	43da      	mvns	r2, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4013      	ands	r3, r2
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bf14      	ite	ne
 800bcaa:	2301      	movne	r3, #1
 800bcac:	2300      	moveq	r3, #0
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f47f af6d 	bne.w	800bb90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bccc:	e034      	b.n	800bd38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f8e3 	bl	800be9a <I2C_IsAcknowledgeFailed>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e034      	b.n	800bd48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d028      	beq.n	800bd38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bce6:	f7fe f8c3 	bl	8009e70 <HAL_GetTick>
 800bcea:	4602      	mov	r2, r0
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d302      	bcc.n	800bcfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d11d      	bne.n	800bd38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd06:	2b80      	cmp	r3, #128	@ 0x80
 800bd08:	d016      	beq.n	800bd38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2220      	movs	r2, #32
 800bd14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd24:	f043 0220 	orr.w	r2, r3, #32
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e007      	b.n	800bd48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd42:	2b80      	cmp	r3, #128	@ 0x80
 800bd44:	d1c3      	bne.n	800bcce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd5c:	e034      	b.n	800bdc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 f89b 	bl	800be9a <I2C_IsAcknowledgeFailed>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e034      	b.n	800bdd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd74:	d028      	beq.n	800bdc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd76:	f7fe f87b 	bl	8009e70 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d302      	bcc.n	800bd8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d11d      	bne.n	800bdc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d016      	beq.n	800bdc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2220      	movs	r2, #32
 800bda4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb4:	f043 0220 	orr.w	r2, r3, #32
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e007      	b.n	800bdd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	f003 0304 	and.w	r3, r3, #4
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	d1c3      	bne.n	800bd5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdec:	e049      	b.n	800be82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	f003 0310 	and.w	r3, r3, #16
 800bdf8:	2b10      	cmp	r3, #16
 800bdfa:	d119      	bne.n	800be30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f06f 0210 	mvn.w	r2, #16
 800be04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2220      	movs	r2, #32
 800be10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e030      	b.n	800be92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be30:	f7fe f81e 	bl	8009e70 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d302      	bcc.n	800be46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d11d      	bne.n	800be82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be50:	2b40      	cmp	r3, #64	@ 0x40
 800be52:	d016      	beq.n	800be82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2220      	movs	r2, #32
 800be5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be6e:	f043 0220 	orr.w	r2, r3, #32
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e007      	b.n	800be92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be8c:	2b40      	cmp	r3, #64	@ 0x40
 800be8e:	d1ae      	bne.n	800bdee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b083      	sub	sp, #12
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800beac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800beb0:	d11b      	bne.n	800beea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800beba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2220      	movs	r2, #32
 800bec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bed6:	f043 0204 	orr.w	r2, r3, #4
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e000      	b.n	800beec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e267      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d075      	beq.n	800c002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800bf16:	4b88      	ldr	r3, [pc, #544]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f003 030c 	and.w	r3, r3, #12
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d00c      	beq.n	800bf3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf22:	4b85      	ldr	r3, [pc, #532]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800bf2a:	2b08      	cmp	r3, #8
 800bf2c:	d112      	bne.n	800bf54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf2e:	4b82      	ldr	r3, [pc, #520]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf3a:	d10b      	bne.n	800bf54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf3c:	4b7e      	ldr	r3, [pc, #504]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d05b      	beq.n	800c000 <HAL_RCC_OscConfig+0x108>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d157      	bne.n	800c000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e242      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf5c:	d106      	bne.n	800bf6c <HAL_RCC_OscConfig+0x74>
 800bf5e:	4b76      	ldr	r3, [pc, #472]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a75      	ldr	r2, [pc, #468]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	e01d      	b.n	800bfa8 <HAL_RCC_OscConfig+0xb0>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf74:	d10c      	bne.n	800bf90 <HAL_RCC_OscConfig+0x98>
 800bf76:	4b70      	ldr	r3, [pc, #448]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a6f      	ldr	r2, [pc, #444]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bf80:	6013      	str	r3, [r2, #0]
 800bf82:	4b6d      	ldr	r3, [pc, #436]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a6c      	ldr	r2, [pc, #432]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	e00b      	b.n	800bfa8 <HAL_RCC_OscConfig+0xb0>
 800bf90:	4b69      	ldr	r3, [pc, #420]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a68      	ldr	r2, [pc, #416]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	4b66      	ldr	r3, [pc, #408]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a65      	ldr	r2, [pc, #404]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bfa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d013      	beq.n	800bfd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfb0:	f7fd ff5e 	bl	8009e70 <HAL_GetTick>
 800bfb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfb6:	e008      	b.n	800bfca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfb8:	f7fd ff5a 	bl	8009e70 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b64      	cmp	r3, #100	@ 0x64
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e207      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfca:	4b5b      	ldr	r3, [pc, #364]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0f0      	beq.n	800bfb8 <HAL_RCC_OscConfig+0xc0>
 800bfd6:	e014      	b.n	800c002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfd8:	f7fd ff4a 	bl	8009e70 <HAL_GetTick>
 800bfdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfde:	e008      	b.n	800bff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfe0:	f7fd ff46 	bl	8009e70 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	2b64      	cmp	r3, #100	@ 0x64
 800bfec:	d901      	bls.n	800bff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bfee:	2303      	movs	r3, #3
 800bff0:	e1f3      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bff2:	4b51      	ldr	r3, [pc, #324]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1f0      	bne.n	800bfe0 <HAL_RCC_OscConfig+0xe8>
 800bffe:	e000      	b.n	800c002 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 0302 	and.w	r3, r3, #2
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d063      	beq.n	800c0d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c00e:	4b4a      	ldr	r3, [pc, #296]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f003 030c 	and.w	r3, r3, #12
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00b      	beq.n	800c032 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c01a:	4b47      	ldr	r3, [pc, #284]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c022:	2b08      	cmp	r3, #8
 800c024:	d11c      	bne.n	800c060 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c026:	4b44      	ldr	r3, [pc, #272]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d116      	bne.n	800c060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c032:	4b41      	ldr	r3, [pc, #260]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 0302 	and.w	r3, r3, #2
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d005      	beq.n	800c04a <HAL_RCC_OscConfig+0x152>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d001      	beq.n	800c04a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e1c7      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c04a:	4b3b      	ldr	r3, [pc, #236]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	4937      	ldr	r1, [pc, #220]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c05a:	4313      	orrs	r3, r2
 800c05c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c05e:	e03a      	b.n	800c0d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d020      	beq.n	800c0aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c068:	4b34      	ldr	r3, [pc, #208]	@ (800c13c <HAL_RCC_OscConfig+0x244>)
 800c06a:	2201      	movs	r2, #1
 800c06c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c06e:	f7fd feff 	bl	8009e70 <HAL_GetTick>
 800c072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c074:	e008      	b.n	800c088 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c076:	f7fd fefb 	bl	8009e70 <HAL_GetTick>
 800c07a:	4602      	mov	r2, r0
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	2b02      	cmp	r3, #2
 800c082:	d901      	bls.n	800c088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c084:	2303      	movs	r3, #3
 800c086:	e1a8      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c088:	4b2b      	ldr	r3, [pc, #172]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	2b00      	cmp	r3, #0
 800c092:	d0f0      	beq.n	800c076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c094:	4b28      	ldr	r3, [pc, #160]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	4925      	ldr	r1, [pc, #148]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	600b      	str	r3, [r1, #0]
 800c0a8:	e015      	b.n	800c0d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0aa:	4b24      	ldr	r3, [pc, #144]	@ (800c13c <HAL_RCC_OscConfig+0x244>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0b0:	f7fd fede 	bl	8009e70 <HAL_GetTick>
 800c0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0b6:	e008      	b.n	800c0ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0b8:	f7fd feda 	bl	8009e70 <HAL_GetTick>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d901      	bls.n	800c0ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e187      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f003 0302 	and.w	r3, r3, #2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1f0      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 0308 	and.w	r3, r3, #8
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d036      	beq.n	800c150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d016      	beq.n	800c118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0ea:	4b15      	ldr	r3, [pc, #84]	@ (800c140 <HAL_RCC_OscConfig+0x248>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0f0:	f7fd febe 	bl	8009e70 <HAL_GetTick>
 800c0f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c0f6:	e008      	b.n	800c10a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0f8:	f7fd feba 	bl	8009e70 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b02      	cmp	r3, #2
 800c104:	d901      	bls.n	800c10a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e167      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c10a:	4b0b      	ldr	r3, [pc, #44]	@ (800c138 <HAL_RCC_OscConfig+0x240>)
 800c10c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c10e:	f003 0302 	and.w	r3, r3, #2
 800c112:	2b00      	cmp	r3, #0
 800c114:	d0f0      	beq.n	800c0f8 <HAL_RCC_OscConfig+0x200>
 800c116:	e01b      	b.n	800c150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c118:	4b09      	ldr	r3, [pc, #36]	@ (800c140 <HAL_RCC_OscConfig+0x248>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c11e:	f7fd fea7 	bl	8009e70 <HAL_GetTick>
 800c122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c124:	e00e      	b.n	800c144 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c126:	f7fd fea3 	bl	8009e70 <HAL_GetTick>
 800c12a:	4602      	mov	r2, r0
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	2b02      	cmp	r3, #2
 800c132:	d907      	bls.n	800c144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c134:	2303      	movs	r3, #3
 800c136:	e150      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
 800c138:	40023800 	.word	0x40023800
 800c13c:	42470000 	.word	0x42470000
 800c140:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c144:	4b88      	ldr	r3, [pc, #544]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1ea      	bne.n	800c126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 0304 	and.w	r3, r3, #4
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 8097 	beq.w	800c28c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c15e:	2300      	movs	r3, #0
 800c160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c162:	4b81      	ldr	r3, [pc, #516]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10f      	bne.n	800c18e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c16e:	2300      	movs	r3, #0
 800c170:	60bb      	str	r3, [r7, #8]
 800c172:	4b7d      	ldr	r3, [pc, #500]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c176:	4a7c      	ldr	r2, [pc, #496]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c17c:	6413      	str	r3, [r2, #64]	@ 0x40
 800c17e:	4b7a      	ldr	r3, [pc, #488]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c186:	60bb      	str	r3, [r7, #8]
 800c188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c18a:	2301      	movs	r3, #1
 800c18c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c18e:	4b77      	ldr	r3, [pc, #476]	@ (800c36c <HAL_RCC_OscConfig+0x474>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c196:	2b00      	cmp	r3, #0
 800c198:	d118      	bne.n	800c1cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c19a:	4b74      	ldr	r3, [pc, #464]	@ (800c36c <HAL_RCC_OscConfig+0x474>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a73      	ldr	r2, [pc, #460]	@ (800c36c <HAL_RCC_OscConfig+0x474>)
 800c1a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1a6:	f7fd fe63 	bl	8009e70 <HAL_GetTick>
 800c1aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1ac:	e008      	b.n	800c1c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1ae:	f7fd fe5f 	bl	8009e70 <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d901      	bls.n	800c1c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e10c      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1c0:	4b6a      	ldr	r3, [pc, #424]	@ (800c36c <HAL_RCC_OscConfig+0x474>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d0f0      	beq.n	800c1ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d106      	bne.n	800c1e2 <HAL_RCC_OscConfig+0x2ea>
 800c1d4:	4b64      	ldr	r3, [pc, #400]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c1d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1d8:	4a63      	ldr	r2, [pc, #396]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c1da:	f043 0301 	orr.w	r3, r3, #1
 800c1de:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1e0:	e01c      	b.n	800c21c <HAL_RCC_OscConfig+0x324>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	2b05      	cmp	r3, #5
 800c1e8:	d10c      	bne.n	800c204 <HAL_RCC_OscConfig+0x30c>
 800c1ea:	4b5f      	ldr	r3, [pc, #380]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c1ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ee:	4a5e      	ldr	r2, [pc, #376]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c1f0:	f043 0304 	orr.w	r3, r3, #4
 800c1f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1f6:	4b5c      	ldr	r3, [pc, #368]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c1f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1fa:	4a5b      	ldr	r2, [pc, #364]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c1fc:	f043 0301 	orr.w	r3, r3, #1
 800c200:	6713      	str	r3, [r2, #112]	@ 0x70
 800c202:	e00b      	b.n	800c21c <HAL_RCC_OscConfig+0x324>
 800c204:	4b58      	ldr	r3, [pc, #352]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c208:	4a57      	ldr	r2, [pc, #348]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c20a:	f023 0301 	bic.w	r3, r3, #1
 800c20e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c210:	4b55      	ldr	r3, [pc, #340]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c214:	4a54      	ldr	r2, [pc, #336]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c216:	f023 0304 	bic.w	r3, r3, #4
 800c21a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d015      	beq.n	800c250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c224:	f7fd fe24 	bl	8009e70 <HAL_GetTick>
 800c228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c22a:	e00a      	b.n	800c242 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c22c:	f7fd fe20 	bl	8009e70 <HAL_GetTick>
 800c230:	4602      	mov	r2, r0
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d901      	bls.n	800c242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e0cb      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c242:	4b49      	ldr	r3, [pc, #292]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c246:	f003 0302 	and.w	r3, r3, #2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0ee      	beq.n	800c22c <HAL_RCC_OscConfig+0x334>
 800c24e:	e014      	b.n	800c27a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c250:	f7fd fe0e 	bl	8009e70 <HAL_GetTick>
 800c254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c256:	e00a      	b.n	800c26e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c258:	f7fd fe0a 	bl	8009e70 <HAL_GetTick>
 800c25c:	4602      	mov	r2, r0
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c266:	4293      	cmp	r3, r2
 800c268:	d901      	bls.n	800c26e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e0b5      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c26e:	4b3e      	ldr	r3, [pc, #248]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c272:	f003 0302 	and.w	r3, r3, #2
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1ee      	bne.n	800c258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d105      	bne.n	800c28c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c280:	4b39      	ldr	r3, [pc, #228]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c284:	4a38      	ldr	r2, [pc, #224]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c28a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 80a1 	beq.w	800c3d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c296:	4b34      	ldr	r3, [pc, #208]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f003 030c 	and.w	r3, r3, #12
 800c29e:	2b08      	cmp	r3, #8
 800c2a0:	d05c      	beq.n	800c35c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d141      	bne.n	800c32e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2aa:	4b31      	ldr	r3, [pc, #196]	@ (800c370 <HAL_RCC_OscConfig+0x478>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2b0:	f7fd fdde 	bl	8009e70 <HAL_GetTick>
 800c2b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2b6:	e008      	b.n	800c2ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2b8:	f7fd fdda 	bl	8009e70 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d901      	bls.n	800c2ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e087      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2ca:	4b27      	ldr	r3, [pc, #156]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1f0      	bne.n	800c2b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	69da      	ldr	r2, [r3, #28]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e4:	019b      	lsls	r3, r3, #6
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ec:	085b      	lsrs	r3, r3, #1
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	041b      	lsls	r3, r3, #16
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f8:	061b      	lsls	r3, r3, #24
 800c2fa:	491b      	ldr	r1, [pc, #108]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c300:	4b1b      	ldr	r3, [pc, #108]	@ (800c370 <HAL_RCC_OscConfig+0x478>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c306:	f7fd fdb3 	bl	8009e70 <HAL_GetTick>
 800c30a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c30c:	e008      	b.n	800c320 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c30e:	f7fd fdaf 	bl	8009e70 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d901      	bls.n	800c320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e05c      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c320:	4b11      	ldr	r3, [pc, #68]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0f0      	beq.n	800c30e <HAL_RCC_OscConfig+0x416>
 800c32c:	e054      	b.n	800c3d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c32e:	4b10      	ldr	r3, [pc, #64]	@ (800c370 <HAL_RCC_OscConfig+0x478>)
 800c330:	2200      	movs	r2, #0
 800c332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c334:	f7fd fd9c 	bl	8009e70 <HAL_GetTick>
 800c338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c33a:	e008      	b.n	800c34e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c33c:	f7fd fd98 	bl	8009e70 <HAL_GetTick>
 800c340:	4602      	mov	r2, r0
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	2b02      	cmp	r3, #2
 800c348:	d901      	bls.n	800c34e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e045      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c34e:	4b06      	ldr	r3, [pc, #24]	@ (800c368 <HAL_RCC_OscConfig+0x470>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1f0      	bne.n	800c33c <HAL_RCC_OscConfig+0x444>
 800c35a:	e03d      	b.n	800c3d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d107      	bne.n	800c374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e038      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
 800c368:	40023800 	.word	0x40023800
 800c36c:	40007000 	.word	0x40007000
 800c370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c374:	4b1b      	ldr	r3, [pc, #108]	@ (800c3e4 <HAL_RCC_OscConfig+0x4ec>)
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	699b      	ldr	r3, [r3, #24]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d028      	beq.n	800c3d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d121      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d11a      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c3aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d111      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ba:	085b      	lsrs	r3, r3, #1
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d107      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d001      	beq.n	800c3d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e000      	b.n	800c3da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	40023800 	.word	0x40023800

0800c3e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e0cc      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c3fc:	4b68      	ldr	r3, [pc, #416]	@ (800c5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	429a      	cmp	r2, r3
 800c408:	d90c      	bls.n	800c424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c40a:	4b65      	ldr	r3, [pc, #404]	@ (800c5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	b2d2      	uxtb	r2, r2
 800c410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c412:	4b63      	ldr	r3, [pc, #396]	@ (800c5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d001      	beq.n	800c424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e0b8      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0302 	and.w	r3, r3, #2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d020      	beq.n	800c472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0304 	and.w	r3, r3, #4
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c43c:	4b59      	ldr	r3, [pc, #356]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	4a58      	ldr	r2, [pc, #352]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0308 	and.w	r3, r3, #8
 800c450:	2b00      	cmp	r3, #0
 800c452:	d005      	beq.n	800c460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c454:	4b53      	ldr	r3, [pc, #332]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	4a52      	ldr	r2, [pc, #328]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c45a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c45e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c460:	4b50      	ldr	r3, [pc, #320]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	494d      	ldr	r1, [pc, #308]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d044      	beq.n	800c508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d107      	bne.n	800c496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c486:	4b47      	ldr	r3, [pc, #284]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d119      	bne.n	800c4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e07f      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d003      	beq.n	800c4a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d107      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4a6:	4b3f      	ldr	r3, [pc, #252]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d109      	bne.n	800c4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e06f      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4b6:	4b3b      	ldr	r3, [pc, #236]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 0302 	and.w	r3, r3, #2
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e067      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4c6:	4b37      	ldr	r3, [pc, #220]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f023 0203 	bic.w	r2, r3, #3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	4934      	ldr	r1, [pc, #208]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c4d8:	f7fd fcca 	bl	8009e70 <HAL_GetTick>
 800c4dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4de:	e00a      	b.n	800c4f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4e0:	f7fd fcc6 	bl	8009e70 <HAL_GetTick>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d901      	bls.n	800c4f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e04f      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4f6:	4b2b      	ldr	r3, [pc, #172]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	f003 020c 	and.w	r2, r3, #12
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	429a      	cmp	r2, r3
 800c506:	d1eb      	bne.n	800c4e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c508:	4b25      	ldr	r3, [pc, #148]	@ (800c5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0307 	and.w	r3, r3, #7
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d20c      	bcs.n	800c530 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c516:	4b22      	ldr	r3, [pc, #136]	@ (800c5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c51e:	4b20      	ldr	r3, [pc, #128]	@ (800c5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0307 	and.w	r3, r3, #7
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d001      	beq.n	800c530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e032      	b.n	800c596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0304 	and.w	r3, r3, #4
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d008      	beq.n	800c54e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c53c:	4b19      	ldr	r3, [pc, #100]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	4916      	ldr	r1, [pc, #88]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0308 	and.w	r3, r3, #8
 800c556:	2b00      	cmp	r3, #0
 800c558:	d009      	beq.n	800c56e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c55a:	4b12      	ldr	r3, [pc, #72]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	490e      	ldr	r1, [pc, #56]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c56e:	f000 f821 	bl	800c5b4 <HAL_RCC_GetSysClockFreq>
 800c572:	4602      	mov	r2, r0
 800c574:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	091b      	lsrs	r3, r3, #4
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	490a      	ldr	r1, [pc, #40]	@ (800c5a8 <HAL_RCC_ClockConfig+0x1c0>)
 800c580:	5ccb      	ldrb	r3, [r1, r3]
 800c582:	fa22 f303 	lsr.w	r3, r2, r3
 800c586:	4a09      	ldr	r2, [pc, #36]	@ (800c5ac <HAL_RCC_ClockConfig+0x1c4>)
 800c588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c58a:	4b09      	ldr	r3, [pc, #36]	@ (800c5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fd f87e 	bl	8009690 <HAL_InitTick>

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	40023c00 	.word	0x40023c00
 800c5a4:	40023800 	.word	0x40023800
 800c5a8:	08015f54 	.word	0x08015f54
 800c5ac:	20000298 	.word	0x20000298
 800c5b0:	2000029c 	.word	0x2000029c

0800c5b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5b8:	b090      	sub	sp, #64	@ 0x40
 800c5ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5cc:	4b59      	ldr	r3, [pc, #356]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x180>)
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	f003 030c 	and.w	r3, r3, #12
 800c5d4:	2b08      	cmp	r3, #8
 800c5d6:	d00d      	beq.n	800c5f4 <HAL_RCC_GetSysClockFreq+0x40>
 800c5d8:	2b08      	cmp	r3, #8
 800c5da:	f200 80a1 	bhi.w	800c720 <HAL_RCC_GetSysClockFreq+0x16c>
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <HAL_RCC_GetSysClockFreq+0x34>
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d003      	beq.n	800c5ee <HAL_RCC_GetSysClockFreq+0x3a>
 800c5e6:	e09b      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c5e8:	4b53      	ldr	r3, [pc, #332]	@ (800c738 <HAL_RCC_GetSysClockFreq+0x184>)
 800c5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c5ec:	e09b      	b.n	800c726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c5ee:	4b53      	ldr	r3, [pc, #332]	@ (800c73c <HAL_RCC_GetSysClockFreq+0x188>)
 800c5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c5f2:	e098      	b.n	800c726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c5f4:	4b4f      	ldr	r3, [pc, #316]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x180>)
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c5fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c5fe:	4b4d      	ldr	r3, [pc, #308]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x180>)
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d028      	beq.n	800c65c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c60a:	4b4a      	ldr	r3, [pc, #296]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x180>)
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	099b      	lsrs	r3, r3, #6
 800c610:	2200      	movs	r2, #0
 800c612:	623b      	str	r3, [r7, #32]
 800c614:	627a      	str	r2, [r7, #36]	@ 0x24
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c61c:	2100      	movs	r1, #0
 800c61e:	4b47      	ldr	r3, [pc, #284]	@ (800c73c <HAL_RCC_GetSysClockFreq+0x188>)
 800c620:	fb03 f201 	mul.w	r2, r3, r1
 800c624:	2300      	movs	r3, #0
 800c626:	fb00 f303 	mul.w	r3, r0, r3
 800c62a:	4413      	add	r3, r2
 800c62c:	4a43      	ldr	r2, [pc, #268]	@ (800c73c <HAL_RCC_GetSysClockFreq+0x188>)
 800c62e:	fba0 1202 	umull	r1, r2, r0, r2
 800c632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c634:	460a      	mov	r2, r1
 800c636:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c63a:	4413      	add	r3, r2
 800c63c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c640:	2200      	movs	r2, #0
 800c642:	61bb      	str	r3, [r7, #24]
 800c644:	61fa      	str	r2, [r7, #28]
 800c646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c64a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c64e:	f7f4 fb6b 	bl	8000d28 <__aeabi_uldivmod>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4613      	mov	r3, r2
 800c658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c65a:	e053      	b.n	800c704 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c65c:	4b35      	ldr	r3, [pc, #212]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x180>)
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	099b      	lsrs	r3, r3, #6
 800c662:	2200      	movs	r2, #0
 800c664:	613b      	str	r3, [r7, #16]
 800c666:	617a      	str	r2, [r7, #20]
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c66e:	f04f 0b00 	mov.w	fp, #0
 800c672:	4652      	mov	r2, sl
 800c674:	465b      	mov	r3, fp
 800c676:	f04f 0000 	mov.w	r0, #0
 800c67a:	f04f 0100 	mov.w	r1, #0
 800c67e:	0159      	lsls	r1, r3, #5
 800c680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c684:	0150      	lsls	r0, r2, #5
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	ebb2 080a 	subs.w	r8, r2, sl
 800c68e:	eb63 090b 	sbc.w	r9, r3, fp
 800c692:	f04f 0200 	mov.w	r2, #0
 800c696:	f04f 0300 	mov.w	r3, #0
 800c69a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c69e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c6a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c6a6:	ebb2 0408 	subs.w	r4, r2, r8
 800c6aa:	eb63 0509 	sbc.w	r5, r3, r9
 800c6ae:	f04f 0200 	mov.w	r2, #0
 800c6b2:	f04f 0300 	mov.w	r3, #0
 800c6b6:	00eb      	lsls	r3, r5, #3
 800c6b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6bc:	00e2      	lsls	r2, r4, #3
 800c6be:	4614      	mov	r4, r2
 800c6c0:	461d      	mov	r5, r3
 800c6c2:	eb14 030a 	adds.w	r3, r4, sl
 800c6c6:	603b      	str	r3, [r7, #0]
 800c6c8:	eb45 030b 	adc.w	r3, r5, fp
 800c6cc:	607b      	str	r3, [r7, #4]
 800c6ce:	f04f 0200 	mov.w	r2, #0
 800c6d2:	f04f 0300 	mov.w	r3, #0
 800c6d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c6da:	4629      	mov	r1, r5
 800c6dc:	028b      	lsls	r3, r1, #10
 800c6de:	4621      	mov	r1, r4
 800c6e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	028a      	lsls	r2, r1, #10
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	60bb      	str	r3, [r7, #8]
 800c6f2:	60fa      	str	r2, [r7, #12]
 800c6f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6f8:	f7f4 fb16 	bl	8000d28 <__aeabi_uldivmod>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	4613      	mov	r3, r2
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c704:	4b0b      	ldr	r3, [pc, #44]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x180>)
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	0c1b      	lsrs	r3, r3, #16
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	3301      	adds	r3, #1
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800c714:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c718:	fbb2 f3f3 	udiv	r3, r2, r3
 800c71c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c71e:	e002      	b.n	800c726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c720:	4b05      	ldr	r3, [pc, #20]	@ (800c738 <HAL_RCC_GetSysClockFreq+0x184>)
 800c722:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c724:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3740      	adds	r7, #64	@ 0x40
 800c72c:	46bd      	mov	sp, r7
 800c72e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c732:	bf00      	nop
 800c734:	40023800 	.word	0x40023800
 800c738:	00f42400 	.word	0x00f42400
 800c73c:	017d7840 	.word	0x017d7840

0800c740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c740:	b480      	push	{r7}
 800c742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c744:	4b03      	ldr	r3, [pc, #12]	@ (800c754 <HAL_RCC_GetHCLKFreq+0x14>)
 800c746:	681b      	ldr	r3, [r3, #0]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20000298 	.word	0x20000298

0800c758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c75c:	f7ff fff0 	bl	800c740 <HAL_RCC_GetHCLKFreq>
 800c760:	4602      	mov	r2, r0
 800c762:	4b05      	ldr	r3, [pc, #20]	@ (800c778 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	0a9b      	lsrs	r3, r3, #10
 800c768:	f003 0307 	and.w	r3, r3, #7
 800c76c:	4903      	ldr	r1, [pc, #12]	@ (800c77c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c76e:	5ccb      	ldrb	r3, [r1, r3]
 800c770:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c774:	4618      	mov	r0, r3
 800c776:	bd80      	pop	{r7, pc}
 800c778:	40023800 	.word	0x40023800
 800c77c:	08015f64 	.word	0x08015f64

0800c780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c784:	f7ff ffdc 	bl	800c740 <HAL_RCC_GetHCLKFreq>
 800c788:	4602      	mov	r2, r0
 800c78a:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	0b5b      	lsrs	r3, r3, #13
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	4903      	ldr	r1, [pc, #12]	@ (800c7a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c796:	5ccb      	ldrb	r3, [r1, r3]
 800c798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	40023800 	.word	0x40023800
 800c7a4:	08015f64 	.word	0x08015f64

0800c7a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	220f      	movs	r2, #15
 800c7b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c7b8:	4b12      	ldr	r3, [pc, #72]	@ (800c804 <HAL_RCC_GetClockConfig+0x5c>)
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	f003 0203 	and.w	r2, r3, #3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c7c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c804 <HAL_RCC_GetClockConfig+0x5c>)
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c804 <HAL_RCC_GetClockConfig+0x5c>)
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c7dc:	4b09      	ldr	r3, [pc, #36]	@ (800c804 <HAL_RCC_GetClockConfig+0x5c>)
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	08db      	lsrs	r3, r3, #3
 800c7e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c7ea:	4b07      	ldr	r3, [pc, #28]	@ (800c808 <HAL_RCC_GetClockConfig+0x60>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 0207 	and.w	r2, r3, #7
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	601a      	str	r2, [r3, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	40023800 	.word	0x40023800
 800c808:	40023c00 	.word	0x40023c00

0800c80c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c814:	2300      	movs	r3, #0
 800c816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	d105      	bne.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c830:	2b00      	cmp	r3, #0
 800c832:	d035      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c834:	4b62      	ldr	r3, [pc, #392]	@ (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c836:	2200      	movs	r2, #0
 800c838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c83a:	f7fd fb19 	bl	8009e70 <HAL_GetTick>
 800c83e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c840:	e008      	b.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c842:	f7fd fb15 	bl	8009e70 <HAL_GetTick>
 800c846:	4602      	mov	r2, r0
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d901      	bls.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e0b0      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c854:	4b5b      	ldr	r3, [pc, #364]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1f0      	bne.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	019a      	lsls	r2, r3, #6
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	071b      	lsls	r3, r3, #28
 800c86c:	4955      	ldr	r1, [pc, #340]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c86e:	4313      	orrs	r3, r2
 800c870:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c874:	4b52      	ldr	r3, [pc, #328]	@ (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c876:	2201      	movs	r2, #1
 800c878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c87a:	f7fd faf9 	bl	8009e70 <HAL_GetTick>
 800c87e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c880:	e008      	b.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c882:	f7fd faf5 	bl	8009e70 <HAL_GetTick>
 800c886:	4602      	mov	r2, r0
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d901      	bls.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e090      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c894:	4b4b      	ldr	r3, [pc, #300]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0f0      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 0302 	and.w	r3, r3, #2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 8083 	beq.w	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60fb      	str	r3, [r7, #12]
 800c8b2:	4b44      	ldr	r3, [pc, #272]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b6:	4a43      	ldr	r2, [pc, #268]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c8b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800c8be:	4b41      	ldr	r3, [pc, #260]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c8ca:	4b3f      	ldr	r3, [pc, #252]	@ (800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a3e      	ldr	r2, [pc, #248]	@ (800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c8d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c8d6:	f7fd facb 	bl	8009e70 <HAL_GetTick>
 800c8da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800c8dc:	e008      	b.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8de:	f7fd fac7 	bl	8009e70 <HAL_GetTick>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d901      	bls.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e062      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800c8f0:	4b35      	ldr	r3, [pc, #212]	@ (800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0f0      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c8fc:	4b31      	ldr	r3, [pc, #196]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c904:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d02f      	beq.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	429a      	cmp	r2, r3
 800c918:	d028      	beq.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c91a:	4b2a      	ldr	r3, [pc, #168]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c91c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c91e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c922:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c924:	4b29      	ldr	r3, [pc, #164]	@ (800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c926:	2201      	movs	r2, #1
 800c928:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c92a:	4b28      	ldr	r3, [pc, #160]	@ (800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c930:	4a24      	ldr	r2, [pc, #144]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c936:	4b23      	ldr	r3, [pc, #140]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d114      	bne.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c942:	f7fd fa95 	bl	8009e70 <HAL_GetTick>
 800c946:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c948:	e00a      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c94a:	f7fd fa91 	bl	8009e70 <HAL_GetTick>
 800c94e:	4602      	mov	r2, r0
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c958:	4293      	cmp	r3, r2
 800c95a:	d901      	bls.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e02a      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c960:	4b18      	ldr	r3, [pc, #96]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c964:	f003 0302 	and.w	r3, r3, #2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d0ee      	beq.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c978:	d10d      	bne.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c97a:	4b12      	ldr	r3, [pc, #72]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c98a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c98e:	490d      	ldr	r1, [pc, #52]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c990:	4313      	orrs	r3, r2
 800c992:	608b      	str	r3, [r1, #8]
 800c994:	e005      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c996:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	4a0a      	ldr	r2, [pc, #40]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c99c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c9a0:	6093      	str	r3, [r2, #8]
 800c9a2:	4b08      	ldr	r3, [pc, #32]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c9a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9ae:	4905      	ldr	r1, [pc, #20]	@ (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	42470068 	.word	0x42470068
 800c9c4:	40023800 	.word	0x40023800
 800c9c8:	40007000 	.word	0x40007000
 800c9cc:	42470e40 	.word	0x42470e40

0800c9d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e073      	b.n	800cace <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	7f5b      	ldrb	r3, [r3, #29]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d105      	bne.n	800c9fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7fc fd76 	bl	80094e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f003 0310 	and.w	r3, r3, #16
 800ca0c:	2b10      	cmp	r3, #16
 800ca0e:	d055      	beq.n	800cabc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	22ca      	movs	r2, #202	@ 0xca
 800ca16:	625a      	str	r2, [r3, #36]	@ 0x24
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2253      	movs	r2, #83	@ 0x53
 800ca1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fa49 	bl	800ceb8 <RTC_EnterInitMode>
 800ca26:	4603      	mov	r3, r0
 800ca28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d12c      	bne.n	800ca8a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ca3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca42:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6899      	ldr	r1, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685a      	ldr	r2, [r3, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	431a      	orrs	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	695b      	ldr	r3, [r3, #20]
 800ca58:	431a      	orrs	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	68d2      	ldr	r2, [r2, #12]
 800ca6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6919      	ldr	r1, [r3, #16]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	041a      	lsls	r2, r3, #16
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	430a      	orrs	r2, r1
 800ca7e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fa50 	bl	800cf26 <RTC_ExitInitMode>
 800ca86:	4603      	mov	r3, r0
 800ca88:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d110      	bne.n	800cab2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ca9e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	699a      	ldr	r2, [r3, #24]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	430a      	orrs	r2, r1
 800cab0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	22ff      	movs	r2, #255	@ 0xff
 800cab8:	625a      	str	r2, [r3, #36]	@ 0x24
 800caba:	e001      	b.n	800cac0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cad6:	b590      	push	{r4, r7, lr}
 800cad8:	b087      	sub	sp, #28
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	60b9      	str	r1, [r7, #8]
 800cae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cae2:	2300      	movs	r3, #0
 800cae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	7f1b      	ldrb	r3, [r3, #28]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d101      	bne.n	800caf2 <HAL_RTC_SetTime+0x1c>
 800caee:	2302      	movs	r3, #2
 800caf0:	e087      	b.n	800cc02 <HAL_RTC_SetTime+0x12c>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2201      	movs	r2, #1
 800caf6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2202      	movs	r2, #2
 800cafc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d126      	bne.n	800cb52 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d102      	bne.n	800cb18 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2200      	movs	r2, #0
 800cb16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fa27 	bl	800cf70 <RTC_ByteToBcd2>
 800cb22:	4603      	mov	r3, r0
 800cb24:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fa20 	bl	800cf70 <RTC_ByteToBcd2>
 800cb30:	4603      	mov	r3, r0
 800cb32:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cb34:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	789b      	ldrb	r3, [r3, #2]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fa18 	bl	800cf70 <RTC_ByteToBcd2>
 800cb40:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cb42:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	78db      	ldrb	r3, [r3, #3]
 800cb4a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	e018      	b.n	800cb84 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2200      	movs	r2, #0
 800cb64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	785b      	ldrb	r3, [r3, #1]
 800cb70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cb72:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cb78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	78db      	ldrb	r3, [r3, #3]
 800cb7e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cb80:	4313      	orrs	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	22ca      	movs	r2, #202	@ 0xca
 800cb8a:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2253      	movs	r2, #83	@ 0x53
 800cb92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f000 f98f 	bl	800ceb8 <RTC_EnterInitMode>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cb9e:	7cfb      	ldrb	r3, [r7, #19]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d120      	bne.n	800cbe6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800cbae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800cbb2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cbc2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6899      	ldr	r1, [r3, #8]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	68da      	ldr	r2, [r3, #12]
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 f9a2 	bl	800cf26 <RTC_ExitInitMode>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cbe6:	7cfb      	ldrb	r3, [r7, #19]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	22ff      	movs	r2, #255	@ 0xff
 800cbf8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	771a      	strb	r2, [r3, #28]

  return status;
 800cc00:	7cfb      	ldrb	r3, [r7, #19]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd90      	pop	{r4, r7, pc}

0800cc0a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b086      	sub	sp, #24
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	60b9      	str	r1, [r7, #8]
 800cc14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cc16:	2300      	movs	r3, #0
 800cc18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800cc3c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800cc40:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	0c1b      	lsrs	r3, r3, #16
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	0a1b      	lsrs	r3, r3, #8
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	0d9b      	lsrs	r3, r3, #22
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 0301 	and.w	r3, r3, #1
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d11a      	bne.n	800ccbc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 f98e 	bl	800cfac <RTC_Bcd2ToByte>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461a      	mov	r2, r3
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	785b      	ldrb	r3, [r3, #1]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 f985 	bl	800cfac <RTC_Bcd2ToByte>
 800cca2:	4603      	mov	r3, r0
 800cca4:	461a      	mov	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	789b      	ldrb	r3, [r3, #2]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 f97c 	bl	800cfac <RTC_Bcd2ToByte>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ccc6:	b590      	push	{r4, r7, lr}
 800ccc8:	b087      	sub	sp, #28
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	60b9      	str	r1, [r7, #8]
 800ccd0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	7f1b      	ldrb	r3, [r3, #28]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d101      	bne.n	800cce2 <HAL_RTC_SetDate+0x1c>
 800ccde:	2302      	movs	r3, #2
 800cce0:	e071      	b.n	800cdc6 <HAL_RTC_SetDate+0x100>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2201      	movs	r2, #1
 800cce6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2202      	movs	r2, #2
 800ccec:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10e      	bne.n	800cd12 <HAL_RTC_SetDate+0x4c>
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	785b      	ldrb	r3, [r3, #1]
 800ccf8:	f003 0310 	and.w	r3, r3, #16
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d008      	beq.n	800cd12 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	785b      	ldrb	r3, [r3, #1]
 800cd04:	f023 0310 	bic.w	r3, r3, #16
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	330a      	adds	r3, #10
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d11c      	bne.n	800cd52 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	78db      	ldrb	r3, [r3, #3]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 f927 	bl	800cf70 <RTC_ByteToBcd2>
 800cd22:	4603      	mov	r3, r0
 800cd24:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	785b      	ldrb	r3, [r3, #1]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 f920 	bl	800cf70 <RTC_ByteToBcd2>
 800cd30:	4603      	mov	r3, r0
 800cd32:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd34:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	789b      	ldrb	r3, [r3, #2]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 f918 	bl	800cf70 <RTC_ByteToBcd2>
 800cd40:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cd42:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	617b      	str	r3, [r7, #20]
 800cd50:	e00e      	b.n	800cd70 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	78db      	ldrb	r3, [r3, #3]
 800cd56:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	785b      	ldrb	r3, [r3, #1]
 800cd5c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cd5e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cd64:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	22ca      	movs	r2, #202	@ 0xca
 800cd76:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2253      	movs	r2, #83	@ 0x53
 800cd7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f000 f899 	bl	800ceb8 <RTC_EnterInitMode>
 800cd86:	4603      	mov	r3, r0
 800cd88:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cd8a:	7cfb      	ldrb	r3, [r7, #19]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10c      	bne.n	800cdaa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cd9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cd9e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f8c0 	bl	800cf26 <RTC_ExitInitMode>
 800cda6:	4603      	mov	r3, r0
 800cda8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cdaa:	7cfb      	ldrb	r3, [r7, #19]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d102      	bne.n	800cdb6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	22ff      	movs	r2, #255	@ 0xff
 800cdbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	771a      	strb	r2, [r3, #28]

  return status;
 800cdc4:	7cfb      	ldrb	r3, [r7, #19]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd90      	pop	{r4, r7, pc}

0800cdce <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b086      	sub	sp, #24
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cde8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cdec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	0c1b      	lsrs	r3, r3, #16
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	0a1b      	lsrs	r3, r3, #8
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	f003 031f 	and.w	r3, r3, #31
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	0b5b      	lsrs	r3, r3, #13
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	f003 0307 	and.w	r3, r3, #7
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d11a      	bne.n	800ce62 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	78db      	ldrb	r3, [r3, #3]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 f8bb 	bl	800cfac <RTC_Bcd2ToByte>
 800ce36:	4603      	mov	r3, r0
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f8b2 	bl	800cfac <RTC_Bcd2ToByte>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	789b      	ldrb	r3, [r3, #2]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f000 f8a9 	bl	800cfac <RTC_Bcd2ToByte>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a0d      	ldr	r2, [pc, #52]	@ (800ceb4 <HAL_RTC_WaitForSynchro+0x48>)
 800ce7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ce80:	f7fc fff6 	bl	8009e70 <HAL_GetTick>
 800ce84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce86:	e009      	b.n	800ce9c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce88:	f7fc fff2 	bl	8009e70 <HAL_GetTick>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce96:	d901      	bls.n	800ce9c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e007      	b.n	800ceac <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0ee      	beq.n	800ce88 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	00017f5f 	.word	0x00017f5f

0800ceb8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cec0:	2300      	movs	r3, #0
 800cec2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d122      	bne.n	800cf1c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68da      	ldr	r2, [r3, #12]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cee4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cee6:	f7fc ffc3 	bl	8009e70 <HAL_GetTick>
 800ceea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ceec:	e00c      	b.n	800cf08 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ceee:	f7fc ffbf 	bl	8009e70 <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cefc:	d904      	bls.n	800cf08 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2204      	movs	r2, #4
 800cf02:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d102      	bne.n	800cf1c <RTC_EnterInitMode+0x64>
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d1e8      	bne.n	800ceee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68da      	ldr	r2, [r3, #12]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf40:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	f003 0320 	and.w	r3, r3, #32
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff ff8b 	bl	800ce6c <HAL_RTC_WaitForSynchro>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2204      	movs	r2, #4
 800cf60:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800cf7e:	e005      	b.n	800cf8c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3301      	adds	r3, #1
 800cf84:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	3b0a      	subs	r3, #10
 800cf8a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	2b09      	cmp	r3, #9
 800cf90:	d8f6      	bhi.n	800cf80 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	011b      	lsls	r3, r3, #4
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	b2db      	uxtb	r3, r3
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	091b      	lsrs	r3, r3, #4
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	4413      	add	r3, r2
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	f003 030f 	and.w	r3, r3, #15
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	4413      	add	r3, r2
 800cfda:	b2db      	uxtb	r3, r3
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3714      	adds	r7, #20
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e07b      	b.n	800d0f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d108      	bne.n	800d014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d00a:	d009      	beq.n	800d020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	61da      	str	r2, [r3, #28]
 800d012:	e005      	b.n	800d020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7fc fab4 	bl	80095a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2202      	movs	r2, #2
 800d044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d068:	431a      	orrs	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	f003 0302 	and.w	r3, r3, #2
 800d07c:	431a      	orrs	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	431a      	orrs	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d090:	431a      	orrs	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	69db      	ldr	r3, [r3, #28]
 800d096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d09a:	431a      	orrs	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a1b      	ldr	r3, [r3, #32]
 800d0a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0a4:	ea42 0103 	orr.w	r1, r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	430a      	orrs	r2, r1
 800d0b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	0c1b      	lsrs	r3, r3, #16
 800d0be:	f003 0104 	and.w	r1, r3, #4
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c6:	f003 0210 	and.w	r2, r3, #16
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	430a      	orrs	r2, r1
 800d0d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	69da      	ldr	r2, [r3, #28]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d0e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b088      	sub	sp, #32
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	603b      	str	r3, [r7, #0]
 800d106:	4613      	mov	r3, r2
 800d108:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d10a:	f7fc feb1 	bl	8009e70 <HAL_GetTick>
 800d10e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d110:	88fb      	ldrh	r3, [r7, #6]
 800d112:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d001      	beq.n	800d124 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d120:	2302      	movs	r3, #2
 800d122:	e12a      	b.n	800d37a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <HAL_SPI_Transmit+0x36>
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e122      	b.n	800d37a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <HAL_SPI_Transmit+0x48>
 800d13e:	2302      	movs	r3, #2
 800d140:	e11b      	b.n	800d37a <HAL_SPI_Transmit+0x280>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2203      	movs	r2, #3
 800d14e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	88fa      	ldrh	r2, [r7, #6]
 800d162:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	88fa      	ldrh	r2, [r7, #6]
 800d168:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d190:	d10f      	bne.n	800d1b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1bc:	2b40      	cmp	r3, #64	@ 0x40
 800d1be:	d007      	beq.n	800d1d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1d8:	d152      	bne.n	800d280 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <HAL_SPI_Transmit+0xee>
 800d1e2:	8b7b      	ldrh	r3, [r7, #26]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d145      	bne.n	800d274 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ec:	881a      	ldrh	r2, [r3, #0]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f8:	1c9a      	adds	r2, r3, #2
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d202:	b29b      	uxth	r3, r3
 800d204:	3b01      	subs	r3, #1
 800d206:	b29a      	uxth	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d20c:	e032      	b.n	800d274 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	f003 0302 	and.w	r3, r3, #2
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d112      	bne.n	800d242 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d220:	881a      	ldrh	r2, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d22c:	1c9a      	adds	r2, r3, #2
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d236:	b29b      	uxth	r3, r3
 800d238:	3b01      	subs	r3, #1
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d240:	e018      	b.n	800d274 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d242:	f7fc fe15 	bl	8009e70 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d803      	bhi.n	800d25a <HAL_SPI_Transmit+0x160>
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d258:	d102      	bne.n	800d260 <HAL_SPI_Transmit+0x166>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d109      	bne.n	800d274 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d270:	2303      	movs	r3, #3
 800d272:	e082      	b.n	800d37a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d278:	b29b      	uxth	r3, r3
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1c7      	bne.n	800d20e <HAL_SPI_Transmit+0x114>
 800d27e:	e053      	b.n	800d328 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <HAL_SPI_Transmit+0x194>
 800d288:	8b7b      	ldrh	r3, [r7, #26]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d147      	bne.n	800d31e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	330c      	adds	r3, #12
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d2b4:	e033      	b.n	800d31e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d113      	bne.n	800d2ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	330c      	adds	r3, #12
 800d2ce:	7812      	ldrb	r2, [r2, #0]
 800d2d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d2ea:	e018      	b.n	800d31e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2ec:	f7fc fdc0 	bl	8009e70 <HAL_GetTick>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d803      	bhi.n	800d304 <HAL_SPI_Transmit+0x20a>
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d302:	d102      	bne.n	800d30a <HAL_SPI_Transmit+0x210>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d31a:	2303      	movs	r3, #3
 800d31c:	e02d      	b.n	800d37a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d322:	b29b      	uxth	r3, r3
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1c6      	bne.n	800d2b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d328:	69fa      	ldr	r2, [r7, #28]
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f000 f8b1 	bl	800d494 <SPI_EndRxTxTransaction>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d002      	beq.n	800d33e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2220      	movs	r2, #32
 800d33c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10a      	bne.n	800d35c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	617b      	str	r3, [r7, #20]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d378:	2300      	movs	r3, #0
  }
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3720      	adds	r7, #32
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
	...

0800d384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	603b      	str	r3, [r7, #0]
 800d390:	4613      	mov	r3, r2
 800d392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d394:	f7fc fd6c 	bl	8009e70 <HAL_GetTick>
 800d398:	4602      	mov	r2, r0
 800d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d3a4:	f7fc fd64 	bl	8009e70 <HAL_GetTick>
 800d3a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d3aa:	4b39      	ldr	r3, [pc, #228]	@ (800d490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	015b      	lsls	r3, r3, #5
 800d3b0:	0d1b      	lsrs	r3, r3, #20
 800d3b2:	69fa      	ldr	r2, [r7, #28]
 800d3b4:	fb02 f303 	mul.w	r3, r2, r3
 800d3b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d3ba:	e054      	b.n	800d466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c2:	d050      	beq.n	800d466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d3c4:	f7fc fd54 	bl	8009e70 <HAL_GetTick>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	69fa      	ldr	r2, [r7, #28]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d902      	bls.n	800d3da <SPI_WaitFlagStateUntilTimeout+0x56>
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d13d      	bne.n	800d456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d3e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d3f2:	d111      	bne.n	800d418 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3fc:	d004      	beq.n	800d408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d406:	d107      	bne.n	800d418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d420:	d10f      	bne.n	800d442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800d452:	2303      	movs	r3, #3
 800d454:	e017      	b.n	800d486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	3b01      	subs	r3, #1
 800d464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	4013      	ands	r3, r2
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	429a      	cmp	r2, r3
 800d474:	bf0c      	ite	eq
 800d476:	2301      	moveq	r3, #1
 800d478:	2300      	movne	r3, #0
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	461a      	mov	r2, r3
 800d47e:	79fb      	ldrb	r3, [r7, #7]
 800d480:	429a      	cmp	r2, r3
 800d482:	d19b      	bne.n	800d3bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3720      	adds	r7, #32
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	20000298 	.word	0x20000298

0800d494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	2102      	movs	r1, #2
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f7ff ff6a 	bl	800d384 <SPI_WaitFlagStateUntilTimeout>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d007      	beq.n	800d4c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4ba:	f043 0220 	orr.w	r2, r3, #32
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e032      	b.n	800d52c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d4c6:	4b1b      	ldr	r3, [pc, #108]	@ (800d534 <SPI_EndRxTxTransaction+0xa0>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d538 <SPI_EndRxTxTransaction+0xa4>)
 800d4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d0:	0d5b      	lsrs	r3, r3, #21
 800d4d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d4d6:	fb02 f303 	mul.w	r3, r2, r3
 800d4da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d4e4:	d112      	bne.n	800d50c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2180      	movs	r1, #128	@ 0x80
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f7ff ff47 	bl	800d384 <SPI_WaitFlagStateUntilTimeout>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d016      	beq.n	800d52a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d500:	f043 0220 	orr.w	r2, r3, #32
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800d508:	2303      	movs	r3, #3
 800d50a:	e00f      	b.n	800d52c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00a      	beq.n	800d528 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	3b01      	subs	r3, #1
 800d516:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d522:	2b80      	cmp	r3, #128	@ 0x80
 800d524:	d0f2      	beq.n	800d50c <SPI_EndRxTxTransaction+0x78>
 800d526:	e000      	b.n	800d52a <SPI_EndRxTxTransaction+0x96>
        break;
 800d528:	bf00      	nop
  }

  return HAL_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	20000298 	.word	0x20000298
 800d538:	165e9f81 	.word	0x165e9f81

0800d53c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d101      	bne.n	800d54e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	e041      	b.n	800d5d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	d106      	bne.n	800d568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7fc fa6a 	bl	8009a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3304      	adds	r3, #4
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f000 fa7e 	bl	800da7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
	...

0800d5dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d001      	beq.n	800d5f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e04e      	b.n	800d692 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68da      	ldr	r2, [r3, #12]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f042 0201 	orr.w	r2, r2, #1
 800d60a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a23      	ldr	r2, [pc, #140]	@ (800d6a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d022      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d61e:	d01d      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a1f      	ldr	r2, [pc, #124]	@ (800d6a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d018      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a1e      	ldr	r2, [pc, #120]	@ (800d6a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d013      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a1c      	ldr	r2, [pc, #112]	@ (800d6ac <HAL_TIM_Base_Start_IT+0xd0>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d00e      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a1b      	ldr	r2, [pc, #108]	@ (800d6b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d009      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a19      	ldr	r2, [pc, #100]	@ (800d6b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d004      	beq.n	800d65c <HAL_TIM_Base_Start_IT+0x80>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a18      	ldr	r2, [pc, #96]	@ (800d6b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d111      	bne.n	800d680 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b06      	cmp	r3, #6
 800d66c:	d010      	beq.n	800d690 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f042 0201 	orr.w	r2, r2, #1
 800d67c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d67e:	e007      	b.n	800d690 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0201 	orr.w	r2, r2, #1
 800d68e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	40010000 	.word	0x40010000
 800d6a4:	40000400 	.word	0x40000400
 800d6a8:	40000800 	.word	0x40000800
 800d6ac:	40000c00 	.word	0x40000c00
 800d6b0:	40010400 	.word	0x40010400
 800d6b4:	40014000 	.word	0x40014000
 800d6b8:	40001800 	.word	0x40001800

0800d6bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d020      	beq.n	800d720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f003 0302 	and.w	r3, r3, #2
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d01b      	beq.n	800d720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f06f 0202 	mvn.w	r2, #2
 800d6f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	f003 0303 	and.w	r3, r3, #3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f999 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d70c:	e005      	b.n	800d71a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f98b 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f99c 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f003 0304 	and.w	r3, r3, #4
 800d726:	2b00      	cmp	r3, #0
 800d728:	d020      	beq.n	800d76c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b00      	cmp	r3, #0
 800d732:	d01b      	beq.n	800d76c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f06f 0204 	mvn.w	r2, #4
 800d73c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2202      	movs	r2, #2
 800d742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f973 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d758:	e005      	b.n	800d766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f965 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f976 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f003 0308 	and.w	r3, r3, #8
 800d772:	2b00      	cmp	r3, #0
 800d774:	d020      	beq.n	800d7b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f003 0308 	and.w	r3, r3, #8
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d01b      	beq.n	800d7b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f06f 0208 	mvn.w	r2, #8
 800d788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2204      	movs	r2, #4
 800d78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d003      	beq.n	800d7a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f94d 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d7a4:	e005      	b.n	800d7b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f93f 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f950 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	f003 0310 	and.w	r3, r3, #16
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d020      	beq.n	800d804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f003 0310 	and.w	r3, r3, #16
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d01b      	beq.n	800d804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f06f 0210 	mvn.w	r2, #16
 800d7d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2208      	movs	r2, #8
 800d7da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	69db      	ldr	r3, [r3, #28]
 800d7e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d003      	beq.n	800d7f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f927 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d7f0:	e005      	b.n	800d7fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f919 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f92a 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2200      	movs	r2, #0
 800d802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00c      	beq.n	800d828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d007      	beq.n	800d828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f06f 0201 	mvn.w	r2, #1
 800d820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7fb fe22 	bl	800946c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00c      	beq.n	800d84c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 fae4 	bl	800de14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00c      	beq.n	800d870 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f8fb 	bl	800da66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	f003 0320 	and.w	r3, r3, #32
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00c      	beq.n	800d894 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f003 0320 	and.w	r3, r3, #32
 800d880:	2b00      	cmp	r3, #0
 800d882:	d007      	beq.n	800d894 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f06f 0220 	mvn.w	r2, #32
 800d88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fab6 	bl	800de00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d894:	bf00      	nop
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d101      	bne.n	800d8b8 <HAL_TIM_ConfigClockSource+0x1c>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	e0b4      	b.n	800da22 <HAL_TIM_ConfigClockSource+0x186>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2202      	movs	r2, #2
 800d8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d8d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d8de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8f0:	d03e      	beq.n	800d970 <HAL_TIM_ConfigClockSource+0xd4>
 800d8f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8f6:	f200 8087 	bhi.w	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8fe:	f000 8086 	beq.w	800da0e <HAL_TIM_ConfigClockSource+0x172>
 800d902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d906:	d87f      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d908:	2b70      	cmp	r3, #112	@ 0x70
 800d90a:	d01a      	beq.n	800d942 <HAL_TIM_ConfigClockSource+0xa6>
 800d90c:	2b70      	cmp	r3, #112	@ 0x70
 800d90e:	d87b      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d910:	2b60      	cmp	r3, #96	@ 0x60
 800d912:	d050      	beq.n	800d9b6 <HAL_TIM_ConfigClockSource+0x11a>
 800d914:	2b60      	cmp	r3, #96	@ 0x60
 800d916:	d877      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d918:	2b50      	cmp	r3, #80	@ 0x50
 800d91a:	d03c      	beq.n	800d996 <HAL_TIM_ConfigClockSource+0xfa>
 800d91c:	2b50      	cmp	r3, #80	@ 0x50
 800d91e:	d873      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d920:	2b40      	cmp	r3, #64	@ 0x40
 800d922:	d058      	beq.n	800d9d6 <HAL_TIM_ConfigClockSource+0x13a>
 800d924:	2b40      	cmp	r3, #64	@ 0x40
 800d926:	d86f      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d928:	2b30      	cmp	r3, #48	@ 0x30
 800d92a:	d064      	beq.n	800d9f6 <HAL_TIM_ConfigClockSource+0x15a>
 800d92c:	2b30      	cmp	r3, #48	@ 0x30
 800d92e:	d86b      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d930:	2b20      	cmp	r3, #32
 800d932:	d060      	beq.n	800d9f6 <HAL_TIM_ConfigClockSource+0x15a>
 800d934:	2b20      	cmp	r3, #32
 800d936:	d867      	bhi.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d05c      	beq.n	800d9f6 <HAL_TIM_ConfigClockSource+0x15a>
 800d93c:	2b10      	cmp	r3, #16
 800d93e:	d05a      	beq.n	800d9f6 <HAL_TIM_ConfigClockSource+0x15a>
 800d940:	e062      	b.n	800da08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d952:	f000 f9b9 	bl	800dcc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	609a      	str	r2, [r3, #8]
      break;
 800d96e:	e04f      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d980:	f000 f9a2 	bl	800dcc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	689a      	ldr	r2, [r3, #8]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d992:	609a      	str	r2, [r3, #8]
      break;
 800d994:	e03c      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	f000 f916 	bl	800dbd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2150      	movs	r1, #80	@ 0x50
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 f96f 	bl	800dc92 <TIM_ITRx_SetConfig>
      break;
 800d9b4:	e02c      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f000 f935 	bl	800dc32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2160      	movs	r1, #96	@ 0x60
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 f95f 	bl	800dc92 <TIM_ITRx_SetConfig>
      break;
 800d9d4:	e01c      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f000 f8f6 	bl	800dbd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2140      	movs	r1, #64	@ 0x40
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 f94f 	bl	800dc92 <TIM_ITRx_SetConfig>
      break;
 800d9f4:	e00c      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4619      	mov	r1, r3
 800da00:	4610      	mov	r0, r2
 800da02:	f000 f946 	bl	800dc92 <TIM_ITRx_SetConfig>
      break;
 800da06:	e003      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	73fb      	strb	r3, [r7, #15]
      break;
 800da0c:	e000      	b.n	800da10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800da0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da20:	7bfb      	ldrb	r3, [r7, #15]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b083      	sub	sp, #12
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da32:	bf00      	nop
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da3e:	b480      	push	{r7}
 800da40:	b083      	sub	sp, #12
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da5a:	bf00      	nop
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da6e:	bf00      	nop
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
	...

0800da7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a46      	ldr	r2, [pc, #280]	@ (800dba8 <TIM_Base_SetConfig+0x12c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d013      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da9a:	d00f      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a43      	ldr	r2, [pc, #268]	@ (800dbac <TIM_Base_SetConfig+0x130>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d00b      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a42      	ldr	r2, [pc, #264]	@ (800dbb0 <TIM_Base_SetConfig+0x134>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d007      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4a41      	ldr	r2, [pc, #260]	@ (800dbb4 <TIM_Base_SetConfig+0x138>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d003      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a40      	ldr	r2, [pc, #256]	@ (800dbb8 <TIM_Base_SetConfig+0x13c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d108      	bne.n	800dace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	4313      	orrs	r3, r2
 800dacc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a35      	ldr	r2, [pc, #212]	@ (800dba8 <TIM_Base_SetConfig+0x12c>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d02b      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dadc:	d027      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a32      	ldr	r2, [pc, #200]	@ (800dbac <TIM_Base_SetConfig+0x130>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d023      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a31      	ldr	r2, [pc, #196]	@ (800dbb0 <TIM_Base_SetConfig+0x134>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d01f      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a30      	ldr	r2, [pc, #192]	@ (800dbb4 <TIM_Base_SetConfig+0x138>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d01b      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a2f      	ldr	r2, [pc, #188]	@ (800dbb8 <TIM_Base_SetConfig+0x13c>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d017      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a2e      	ldr	r2, [pc, #184]	@ (800dbbc <TIM_Base_SetConfig+0x140>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d013      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a2d      	ldr	r2, [pc, #180]	@ (800dbc0 <TIM_Base_SetConfig+0x144>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d00f      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a2c      	ldr	r2, [pc, #176]	@ (800dbc4 <TIM_Base_SetConfig+0x148>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d00b      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a2b      	ldr	r2, [pc, #172]	@ (800dbc8 <TIM_Base_SetConfig+0x14c>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d007      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a2a      	ldr	r2, [pc, #168]	@ (800dbcc <TIM_Base_SetConfig+0x150>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d003      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a29      	ldr	r2, [pc, #164]	@ (800dbd0 <TIM_Base_SetConfig+0x154>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d108      	bne.n	800db40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	689a      	ldr	r2, [r3, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a10      	ldr	r2, [pc, #64]	@ (800dba8 <TIM_Base_SetConfig+0x12c>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d003      	beq.n	800db74 <TIM_Base_SetConfig+0xf8>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4a12      	ldr	r2, [pc, #72]	@ (800dbb8 <TIM_Base_SetConfig+0x13c>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d103      	bne.n	800db7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	691a      	ldr	r2, [r3, #16]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d105      	bne.n	800db9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	f023 0201 	bic.w	r2, r3, #1
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	611a      	str	r2, [r3, #16]
  }
}
 800db9a:	bf00      	nop
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	40010000 	.word	0x40010000
 800dbac:	40000400 	.word	0x40000400
 800dbb0:	40000800 	.word	0x40000800
 800dbb4:	40000c00 	.word	0x40000c00
 800dbb8:	40010400 	.word	0x40010400
 800dbbc:	40014000 	.word	0x40014000
 800dbc0:	40014400 	.word	0x40014400
 800dbc4:	40014800 	.word	0x40014800
 800dbc8:	40001800 	.word	0x40001800
 800dbcc:	40001c00 	.word	0x40001c00
 800dbd0:	40002000 	.word	0x40002000

0800dbd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	f023 0201 	bic.w	r2, r3, #1
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dbfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	011b      	lsls	r3, r3, #4
 800dc04:	693a      	ldr	r2, [r7, #16]
 800dc06:	4313      	orrs	r3, r2
 800dc08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f023 030a 	bic.w	r3, r3, #10
 800dc10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	621a      	str	r2, [r3, #32]
}
 800dc26:	bf00      	nop
 800dc28:	371c      	adds	r7, #28
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b087      	sub	sp, #28
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	f023 0210 	bic.w	r2, r3, #16
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dc5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	031b      	lsls	r3, r3, #12
 800dc62:	693a      	ldr	r2, [r7, #16]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dc6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	011b      	lsls	r3, r3, #4
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	621a      	str	r2, [r3, #32]
}
 800dc86:	bf00      	nop
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b085      	sub	sp, #20
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	f043 0307 	orr.w	r3, r3, #7
 800dcb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	609a      	str	r2, [r3, #8]
}
 800dcbc:	bf00      	nop
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b087      	sub	sp, #28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	021a      	lsls	r2, r3, #8
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	431a      	orrs	r2, r3
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	697a      	ldr	r2, [r7, #20]
 800dcfa:	609a      	str	r2, [r3, #8]
}
 800dcfc:	bf00      	nop
 800dcfe:	371c      	adds	r7, #28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d101      	bne.n	800dd20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	e05a      	b.n	800ddd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a21      	ldr	r2, [pc, #132]	@ (800dde4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d022      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd6c:	d01d      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a1d      	ldr	r2, [pc, #116]	@ (800dde8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d018      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a1b      	ldr	r2, [pc, #108]	@ (800ddec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d013      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a1a      	ldr	r2, [pc, #104]	@ (800ddf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d00e      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a18      	ldr	r2, [pc, #96]	@ (800ddf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d009      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a17      	ldr	r2, [pc, #92]	@ (800ddf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d004      	beq.n	800ddaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a15      	ldr	r2, [pc, #84]	@ (800ddfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d10c      	bne.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	40010000 	.word	0x40010000
 800dde8:	40000400 	.word	0x40000400
 800ddec:	40000800 	.word	0x40000800
 800ddf0:	40000c00 	.word	0x40000c00
 800ddf4:	40010400 	.word	0x40010400
 800ddf8:	40014000 	.word	0x40014000
 800ddfc:	40001800 	.word	0x40001800

0800de00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e042      	b.n	800dec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fb febe 	bl	8009bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2224      	movs	r2, #36	@ 0x24
 800de58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	68da      	ldr	r2, [r3, #12]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800de6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fb47 	bl	800e500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	691a      	ldr	r2, [r3, #16]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800de80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	695a      	ldr	r2, [r3, #20]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800de90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68da      	ldr	r2, [r3, #12]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2220      	movs	r2, #32
 800deac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2220      	movs	r2, #32
 800deb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08a      	sub	sp, #40	@ 0x28
 800decc:	af02      	add	r7, sp, #8
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	603b      	str	r3, [r7, #0]
 800ded4:	4613      	mov	r3, r2
 800ded6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ded8:	2300      	movs	r3, #0
 800deda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b20      	cmp	r3, #32
 800dee6:	d175      	bne.n	800dfd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <HAL_UART_Transmit+0x2c>
 800deee:	88fb      	ldrh	r3, [r7, #6]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800def4:	2301      	movs	r3, #1
 800def6:	e06e      	b.n	800dfd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2221      	movs	r2, #33	@ 0x21
 800df02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df06:	f7fb ffb3 	bl	8009e70 <HAL_GetTick>
 800df0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	88fa      	ldrh	r2, [r7, #6]
 800df10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	88fa      	ldrh	r2, [r7, #6]
 800df16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df20:	d108      	bne.n	800df34 <HAL_UART_Transmit+0x6c>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d104      	bne.n	800df34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	e003      	b.n	800df3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df38:	2300      	movs	r3, #0
 800df3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800df3c:	e02e      	b.n	800df9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	2200      	movs	r2, #0
 800df46:	2180      	movs	r1, #128	@ 0x80
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f9cb 	bl	800e2e4 <UART_WaitOnFlagUntilTimeout>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2220      	movs	r2, #32
 800df58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800df5c:	2303      	movs	r3, #3
 800df5e:	e03a      	b.n	800dfd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10b      	bne.n	800df7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	3302      	adds	r3, #2
 800df7a:	61bb      	str	r3, [r7, #24]
 800df7c:	e007      	b.n	800df8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	781a      	ldrb	r2, [r3, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	3301      	adds	r3, #1
 800df8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800df92:	b29b      	uxth	r3, r3
 800df94:	3b01      	subs	r3, #1
 800df96:	b29a      	uxth	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1cb      	bne.n	800df3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2200      	movs	r2, #0
 800dfae:	2140      	movs	r1, #64	@ 0x40
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f000 f997 	bl	800e2e4 <UART_WaitOnFlagUntilTimeout>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d005      	beq.n	800dfc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2220      	movs	r2, #32
 800dfc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	e006      	b.n	800dfd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e000      	b.n	800dfd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800dfd4:	2302      	movs	r3, #2
  }
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3720      	adds	r7, #32
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b08a      	sub	sp, #40	@ 0x28
 800dfe2:	af02      	add	r7, sp, #8
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	603b      	str	r3, [r7, #0]
 800dfea:	4613      	mov	r3, r2
 800dfec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dfee:	2300      	movs	r3, #0
 800dff0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	2b20      	cmp	r3, #32
 800dffc:	f040 8081 	bne.w	800e102 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d002      	beq.n	800e00c <HAL_UART_Receive+0x2e>
 800e006:	88fb      	ldrh	r3, [r7, #6]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e00c:	2301      	movs	r3, #1
 800e00e:	e079      	b.n	800e104 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2222      	movs	r2, #34	@ 0x22
 800e01a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e024:	f7fb ff24 	bl	8009e70 <HAL_GetTick>
 800e028:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	88fa      	ldrh	r2, [r7, #6]
 800e02e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	88fa      	ldrh	r2, [r7, #6]
 800e034:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e03e:	d108      	bne.n	800e052 <HAL_UART_Receive+0x74>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d104      	bne.n	800e052 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800e048:	2300      	movs	r3, #0
 800e04a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	61bb      	str	r3, [r7, #24]
 800e050:	e003      	b.n	800e05a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e05a:	e047      	b.n	800e0ec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2200      	movs	r2, #0
 800e064:	2120      	movs	r1, #32
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f93c 	bl	800e2e4 <UART_WaitOnFlagUntilTimeout>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2220      	movs	r2, #32
 800e076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800e07a:	2303      	movs	r3, #3
 800e07c:	e042      	b.n	800e104 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10c      	bne.n	800e09e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e090:	b29a      	uxth	r2, r3
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	3302      	adds	r3, #2
 800e09a:	61bb      	str	r3, [r7, #24]
 800e09c:	e01f      	b.n	800e0de <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0a6:	d007      	beq.n	800e0b8 <HAL_UART_Receive+0xda>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <HAL_UART_Receive+0xe8>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d106      	bne.n	800e0c6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	701a      	strb	r2, [r3, #0]
 800e0c4:	e008      	b.n	800e0d8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1b2      	bne.n	800e05c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2220      	movs	r2, #32
 800e0fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	e000      	b.n	800e104 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800e102:	2302      	movs	r3, #2
  }
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	4613      	mov	r3, r2
 800e118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b20      	cmp	r3, #32
 800e124:	d112      	bne.n	800e14c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <HAL_UART_Receive_IT+0x26>
 800e12c:	88fb      	ldrh	r3, [r7, #6]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e00b      	b.n	800e14e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2200      	movs	r2, #0
 800e13a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e13c:	88fb      	ldrh	r3, [r7, #6]
 800e13e:	461a      	mov	r2, r3
 800e140:	68b9      	ldr	r1, [r7, #8]
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f927 	bl	800e396 <UART_Start_Receive_IT>
 800e148:	4603      	mov	r3, r0
 800e14a:	e000      	b.n	800e14e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e14c:	2302      	movs	r3, #2
  }
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b09a      	sub	sp, #104	@ 0x68
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	330c      	adds	r3, #12
 800e166:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e16a:	e853 3f00 	ldrex	r3, [r3]
 800e16e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e172:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e176:	667b      	str	r3, [r7, #100]	@ 0x64
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	330c      	adds	r3, #12
 800e17e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e180:	657a      	str	r2, [r7, #84]	@ 0x54
 800e182:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e184:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e186:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e188:	e841 2300 	strex	r3, r2, [r1]
 800e18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1e5      	bne.n	800e160 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3314      	adds	r3, #20
 800e19a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e19e:	e853 3f00 	ldrex	r3, [r3]
 800e1a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	f023 0301 	bic.w	r3, r3, #1
 800e1aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	3314      	adds	r3, #20
 800e1b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e1b4:	643a      	str	r2, [r7, #64]	@ 0x40
 800e1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1bc:	e841 2300 	strex	r3, r2, [r1]
 800e1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1e5      	bne.n	800e194 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d119      	bne.n	800e204 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	330c      	adds	r3, #12
 800e1d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	e853 3f00 	ldrex	r3, [r3]
 800e1de:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	f023 0310 	bic.w	r3, r3, #16
 800e1e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	330c      	adds	r3, #12
 800e1ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e1f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1f8:	e841 2300 	strex	r3, r2, [r1]
 800e1fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1e5      	bne.n	800e1d0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e20e:	2b40      	cmp	r3, #64	@ 0x40
 800e210:	d13f      	bne.n	800e292 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3314      	adds	r3, #20
 800e218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	e853 3f00 	ldrex	r3, [r3]
 800e220:	60bb      	str	r3, [r7, #8]
   return(result);
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e228:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	3314      	adds	r3, #20
 800e230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e232:	61ba      	str	r2, [r7, #24]
 800e234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e236:	6979      	ldr	r1, [r7, #20]
 800e238:	69ba      	ldr	r2, [r7, #24]
 800e23a:	e841 2300 	strex	r3, r2, [r1]
 800e23e:	613b      	str	r3, [r7, #16]
   return(result);
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1e5      	bne.n	800e212 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d013      	beq.n	800e276 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e252:	4a19      	ldr	r2, [pc, #100]	@ (800e2b8 <HAL_UART_AbortReceive_IT+0x160>)
 800e254:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fc fb1a 	bl	800a894 <HAL_DMA_Abort_IT>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d022      	beq.n	800e2ac <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e26a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e270:	4610      	mov	r0, r2
 800e272:	4798      	blx	r3
 800e274:	e01a      	b.n	800e2ac <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2220      	movs	r2, #32
 800e280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 f820 	bl	800e2d0 <HAL_UART_AbortReceiveCpltCallback>
 800e290:	e00c      	b.n	800e2ac <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2220      	movs	r2, #32
 800e29c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 f812 	bl	800e2d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3768      	adds	r7, #104	@ 0x68
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	0800e4d1 	.word	0x0800e4d1

0800e2bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	603b      	str	r3, [r7, #0]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f4:	e03b      	b.n	800e36e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fc:	d037      	beq.n	800e36e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2fe:	f7fb fdb7 	bl	8009e70 <HAL_GetTick>
 800e302:	4602      	mov	r2, r0
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	6a3a      	ldr	r2, [r7, #32]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d302      	bcc.n	800e314 <UART_WaitOnFlagUntilTimeout+0x30>
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d101      	bne.n	800e318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e03a      	b.n	800e38e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	f003 0304 	and.w	r3, r3, #4
 800e322:	2b00      	cmp	r3, #0
 800e324:	d023      	beq.n	800e36e <UART_WaitOnFlagUntilTimeout+0x8a>
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	2b80      	cmp	r3, #128	@ 0x80
 800e32a:	d020      	beq.n	800e36e <UART_WaitOnFlagUntilTimeout+0x8a>
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	2b40      	cmp	r3, #64	@ 0x40
 800e330:	d01d      	beq.n	800e36e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 0308 	and.w	r3, r3, #8
 800e33c:	2b08      	cmp	r3, #8
 800e33e:	d116      	bne.n	800e36e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e340:	2300      	movs	r3, #0
 800e342:	617b      	str	r3, [r7, #20]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	617b      	str	r3, [r7, #20]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	617b      	str	r3, [r7, #20]
 800e354:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f000 f857 	bl	800e40a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2208      	movs	r2, #8
 800e360:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e00f      	b.n	800e38e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	4013      	ands	r3, r2
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	bf0c      	ite	eq
 800e37e:	2301      	moveq	r3, #1
 800e380:	2300      	movne	r3, #0
 800e382:	b2db      	uxtb	r3, r3
 800e384:	461a      	mov	r2, r3
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d0b4      	beq.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3718      	adds	r7, #24
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e396:	b480      	push	{r7}
 800e398:	b085      	sub	sp, #20
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	88fa      	ldrh	r2, [r7, #6]
 800e3b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2222      	movs	r2, #34	@ 0x22
 800e3c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d007      	beq.n	800e3dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68da      	ldr	r2, [r3, #12]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e3da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	695a      	ldr	r2, [r3, #20]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f042 0201 	orr.w	r2, r2, #1
 800e3ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	68da      	ldr	r2, [r3, #12]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f042 0220 	orr.w	r2, r2, #32
 800e3fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b095      	sub	sp, #84	@ 0x54
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	330c      	adds	r3, #12
 800e418:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e41c:	e853 3f00 	ldrex	r3, [r3]
 800e420:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	330c      	adds	r3, #12
 800e430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e432:	643a      	str	r2, [r7, #64]	@ 0x40
 800e434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e436:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e438:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e43a:	e841 2300 	strex	r3, r2, [r1]
 800e43e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1e5      	bne.n	800e412 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	3314      	adds	r3, #20
 800e44c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	e853 3f00 	ldrex	r3, [r3]
 800e454:	61fb      	str	r3, [r7, #28]
   return(result);
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	f023 0301 	bic.w	r3, r3, #1
 800e45c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3314      	adds	r3, #20
 800e464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e468:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e46a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e46c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e46e:	e841 2300 	strex	r3, r2, [r1]
 800e472:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1e5      	bne.n	800e446 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d119      	bne.n	800e4b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	330c      	adds	r3, #12
 800e488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	e853 3f00 	ldrex	r3, [r3]
 800e490:	60bb      	str	r3, [r7, #8]
   return(result);
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f023 0310 	bic.w	r3, r3, #16
 800e498:	647b      	str	r3, [r7, #68]	@ 0x44
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	330c      	adds	r3, #12
 800e4a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4a2:	61ba      	str	r2, [r7, #24]
 800e4a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a6:	6979      	ldr	r1, [r7, #20]
 800e4a8:	69ba      	ldr	r2, [r7, #24]
 800e4aa:	e841 2300 	strex	r3, r2, [r1]
 800e4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1e5      	bne.n	800e482 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2220      	movs	r2, #32
 800e4ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e4c4:	bf00      	nop
 800e4c6:	3754      	adds	r7, #84	@ 0x54
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4dc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2220      	movs	r2, #32
 800e4e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f7ff feec 	bl	800e2d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e504:	b0c0      	sub	sp, #256	@ 0x100
 800e506:	af00      	add	r7, sp, #0
 800e508:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e51c:	68d9      	ldr	r1, [r3, #12]
 800e51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	ea40 0301 	orr.w	r3, r0, r1
 800e528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	431a      	orrs	r2, r3
 800e538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	431a      	orrs	r2, r3
 800e540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	4313      	orrs	r3, r2
 800e548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e558:	f021 010c 	bic.w	r1, r1, #12
 800e55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e566:	430b      	orrs	r3, r1
 800e568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e57a:	6999      	ldr	r1, [r3, #24]
 800e57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	ea40 0301 	orr.w	r3, r0, r1
 800e586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	4b8f      	ldr	r3, [pc, #572]	@ (800e7cc <UART_SetConfig+0x2cc>)
 800e590:	429a      	cmp	r2, r3
 800e592:	d005      	beq.n	800e5a0 <UART_SetConfig+0xa0>
 800e594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	4b8d      	ldr	r3, [pc, #564]	@ (800e7d0 <UART_SetConfig+0x2d0>)
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d104      	bne.n	800e5aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e5a0:	f7fe f8ee 	bl	800c780 <HAL_RCC_GetPCLK2Freq>
 800e5a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e5a8:	e003      	b.n	800e5b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e5aa:	f7fe f8d5 	bl	800c758 <HAL_RCC_GetPCLK1Freq>
 800e5ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5b6:	69db      	ldr	r3, [r3, #28]
 800e5b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5bc:	f040 810c 	bne.w	800e7d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e5c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e5ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e5ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	462b      	mov	r3, r5
 800e5d6:	1891      	adds	r1, r2, r2
 800e5d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e5da:	415b      	adcs	r3, r3
 800e5dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	eb12 0801 	adds.w	r8, r2, r1
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	eb43 0901 	adc.w	r9, r3, r1
 800e5ee:	f04f 0200 	mov.w	r2, #0
 800e5f2:	f04f 0300 	mov.w	r3, #0
 800e5f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e5fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e5fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e602:	4690      	mov	r8, r2
 800e604:	4699      	mov	r9, r3
 800e606:	4623      	mov	r3, r4
 800e608:	eb18 0303 	adds.w	r3, r8, r3
 800e60c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e610:	462b      	mov	r3, r5
 800e612:	eb49 0303 	adc.w	r3, r9, r3
 800e616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e626:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e62a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e62e:	460b      	mov	r3, r1
 800e630:	18db      	adds	r3, r3, r3
 800e632:	653b      	str	r3, [r7, #80]	@ 0x50
 800e634:	4613      	mov	r3, r2
 800e636:	eb42 0303 	adc.w	r3, r2, r3
 800e63a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e63c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e644:	f7f2 fb70 	bl	8000d28 <__aeabi_uldivmod>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4b61      	ldr	r3, [pc, #388]	@ (800e7d4 <UART_SetConfig+0x2d4>)
 800e64e:	fba3 2302 	umull	r2, r3, r3, r2
 800e652:	095b      	lsrs	r3, r3, #5
 800e654:	011c      	lsls	r4, r3, #4
 800e656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e660:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e668:	4642      	mov	r2, r8
 800e66a:	464b      	mov	r3, r9
 800e66c:	1891      	adds	r1, r2, r2
 800e66e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e670:	415b      	adcs	r3, r3
 800e672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e678:	4641      	mov	r1, r8
 800e67a:	eb12 0a01 	adds.w	sl, r2, r1
 800e67e:	4649      	mov	r1, r9
 800e680:	eb43 0b01 	adc.w	fp, r3, r1
 800e684:	f04f 0200 	mov.w	r2, #0
 800e688:	f04f 0300 	mov.w	r3, #0
 800e68c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e698:	4692      	mov	sl, r2
 800e69a:	469b      	mov	fp, r3
 800e69c:	4643      	mov	r3, r8
 800e69e:	eb1a 0303 	adds.w	r3, sl, r3
 800e6a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e6a6:	464b      	mov	r3, r9
 800e6a8:	eb4b 0303 	adc.w	r3, fp, r3
 800e6ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e6bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e6c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	18db      	adds	r3, r3, r3
 800e6c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	eb42 0303 	adc.w	r3, r2, r3
 800e6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e6d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e6da:	f7f2 fb25 	bl	8000d28 <__aeabi_uldivmod>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e7d4 <UART_SetConfig+0x2d4>)
 800e6e6:	fba3 2301 	umull	r2, r3, r3, r1
 800e6ea:	095b      	lsrs	r3, r3, #5
 800e6ec:	2264      	movs	r2, #100	@ 0x64
 800e6ee:	fb02 f303 	mul.w	r3, r2, r3
 800e6f2:	1acb      	subs	r3, r1, r3
 800e6f4:	00db      	lsls	r3, r3, #3
 800e6f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e6fa:	4b36      	ldr	r3, [pc, #216]	@ (800e7d4 <UART_SetConfig+0x2d4>)
 800e6fc:	fba3 2302 	umull	r2, r3, r3, r2
 800e700:	095b      	lsrs	r3, r3, #5
 800e702:	005b      	lsls	r3, r3, #1
 800e704:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e708:	441c      	add	r4, r3
 800e70a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e70e:	2200      	movs	r2, #0
 800e710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e714:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e71c:	4642      	mov	r2, r8
 800e71e:	464b      	mov	r3, r9
 800e720:	1891      	adds	r1, r2, r2
 800e722:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e724:	415b      	adcs	r3, r3
 800e726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e72c:	4641      	mov	r1, r8
 800e72e:	1851      	adds	r1, r2, r1
 800e730:	6339      	str	r1, [r7, #48]	@ 0x30
 800e732:	4649      	mov	r1, r9
 800e734:	414b      	adcs	r3, r1
 800e736:	637b      	str	r3, [r7, #52]	@ 0x34
 800e738:	f04f 0200 	mov.w	r2, #0
 800e73c:	f04f 0300 	mov.w	r3, #0
 800e740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e744:	4659      	mov	r1, fp
 800e746:	00cb      	lsls	r3, r1, #3
 800e748:	4651      	mov	r1, sl
 800e74a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e74e:	4651      	mov	r1, sl
 800e750:	00ca      	lsls	r2, r1, #3
 800e752:	4610      	mov	r0, r2
 800e754:	4619      	mov	r1, r3
 800e756:	4603      	mov	r3, r0
 800e758:	4642      	mov	r2, r8
 800e75a:	189b      	adds	r3, r3, r2
 800e75c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e760:	464b      	mov	r3, r9
 800e762:	460a      	mov	r2, r1
 800e764:	eb42 0303 	adc.w	r3, r2, r3
 800e768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e778:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e77c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e780:	460b      	mov	r3, r1
 800e782:	18db      	adds	r3, r3, r3
 800e784:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e786:	4613      	mov	r3, r2
 800e788:	eb42 0303 	adc.w	r3, r2, r3
 800e78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e78e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e796:	f7f2 fac7 	bl	8000d28 <__aeabi_uldivmod>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	4b0d      	ldr	r3, [pc, #52]	@ (800e7d4 <UART_SetConfig+0x2d4>)
 800e7a0:	fba3 1302 	umull	r1, r3, r3, r2
 800e7a4:	095b      	lsrs	r3, r3, #5
 800e7a6:	2164      	movs	r1, #100	@ 0x64
 800e7a8:	fb01 f303 	mul.w	r3, r1, r3
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	3332      	adds	r3, #50	@ 0x32
 800e7b2:	4a08      	ldr	r2, [pc, #32]	@ (800e7d4 <UART_SetConfig+0x2d4>)
 800e7b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e7b8:	095b      	lsrs	r3, r3, #5
 800e7ba:	f003 0207 	and.w	r2, r3, #7
 800e7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4422      	add	r2, r4
 800e7c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e7c8:	e106      	b.n	800e9d8 <UART_SetConfig+0x4d8>
 800e7ca:	bf00      	nop
 800e7cc:	40011000 	.word	0x40011000
 800e7d0:	40011400 	.word	0x40011400
 800e7d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e7d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e7e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e7ea:	4642      	mov	r2, r8
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	1891      	adds	r1, r2, r2
 800e7f0:	6239      	str	r1, [r7, #32]
 800e7f2:	415b      	adcs	r3, r3
 800e7f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	1854      	adds	r4, r2, r1
 800e7fe:	4649      	mov	r1, r9
 800e800:	eb43 0501 	adc.w	r5, r3, r1
 800e804:	f04f 0200 	mov.w	r2, #0
 800e808:	f04f 0300 	mov.w	r3, #0
 800e80c:	00eb      	lsls	r3, r5, #3
 800e80e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e812:	00e2      	lsls	r2, r4, #3
 800e814:	4614      	mov	r4, r2
 800e816:	461d      	mov	r5, r3
 800e818:	4643      	mov	r3, r8
 800e81a:	18e3      	adds	r3, r4, r3
 800e81c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e820:	464b      	mov	r3, r9
 800e822:	eb45 0303 	adc.w	r3, r5, r3
 800e826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e836:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e83a:	f04f 0200 	mov.w	r2, #0
 800e83e:	f04f 0300 	mov.w	r3, #0
 800e842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e846:	4629      	mov	r1, r5
 800e848:	008b      	lsls	r3, r1, #2
 800e84a:	4621      	mov	r1, r4
 800e84c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e850:	4621      	mov	r1, r4
 800e852:	008a      	lsls	r2, r1, #2
 800e854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e858:	f7f2 fa66 	bl	8000d28 <__aeabi_uldivmod>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	4b60      	ldr	r3, [pc, #384]	@ (800e9e4 <UART_SetConfig+0x4e4>)
 800e862:	fba3 2302 	umull	r2, r3, r3, r2
 800e866:	095b      	lsrs	r3, r3, #5
 800e868:	011c      	lsls	r4, r3, #4
 800e86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e86e:	2200      	movs	r2, #0
 800e870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e874:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e87c:	4642      	mov	r2, r8
 800e87e:	464b      	mov	r3, r9
 800e880:	1891      	adds	r1, r2, r2
 800e882:	61b9      	str	r1, [r7, #24]
 800e884:	415b      	adcs	r3, r3
 800e886:	61fb      	str	r3, [r7, #28]
 800e888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e88c:	4641      	mov	r1, r8
 800e88e:	1851      	adds	r1, r2, r1
 800e890:	6139      	str	r1, [r7, #16]
 800e892:	4649      	mov	r1, r9
 800e894:	414b      	adcs	r3, r1
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	f04f 0200 	mov.w	r2, #0
 800e89c:	f04f 0300 	mov.w	r3, #0
 800e8a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e8a4:	4659      	mov	r1, fp
 800e8a6:	00cb      	lsls	r3, r1, #3
 800e8a8:	4651      	mov	r1, sl
 800e8aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e8ae:	4651      	mov	r1, sl
 800e8b0:	00ca      	lsls	r2, r1, #3
 800e8b2:	4610      	mov	r0, r2
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	4642      	mov	r2, r8
 800e8ba:	189b      	adds	r3, r3, r2
 800e8bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8c0:	464b      	mov	r3, r9
 800e8c2:	460a      	mov	r2, r1
 800e8c4:	eb42 0303 	adc.w	r3, r2, r3
 800e8c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e8d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e8d8:	f04f 0200 	mov.w	r2, #0
 800e8dc:	f04f 0300 	mov.w	r3, #0
 800e8e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	008b      	lsls	r3, r1, #2
 800e8e8:	4641      	mov	r1, r8
 800e8ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e8ee:	4641      	mov	r1, r8
 800e8f0:	008a      	lsls	r2, r1, #2
 800e8f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e8f6:	f7f2 fa17 	bl	8000d28 <__aeabi_uldivmod>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	4611      	mov	r1, r2
 800e900:	4b38      	ldr	r3, [pc, #224]	@ (800e9e4 <UART_SetConfig+0x4e4>)
 800e902:	fba3 2301 	umull	r2, r3, r3, r1
 800e906:	095b      	lsrs	r3, r3, #5
 800e908:	2264      	movs	r2, #100	@ 0x64
 800e90a:	fb02 f303 	mul.w	r3, r2, r3
 800e90e:	1acb      	subs	r3, r1, r3
 800e910:	011b      	lsls	r3, r3, #4
 800e912:	3332      	adds	r3, #50	@ 0x32
 800e914:	4a33      	ldr	r2, [pc, #204]	@ (800e9e4 <UART_SetConfig+0x4e4>)
 800e916:	fba2 2303 	umull	r2, r3, r2, r3
 800e91a:	095b      	lsrs	r3, r3, #5
 800e91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e920:	441c      	add	r4, r3
 800e922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e926:	2200      	movs	r2, #0
 800e928:	673b      	str	r3, [r7, #112]	@ 0x70
 800e92a:	677a      	str	r2, [r7, #116]	@ 0x74
 800e92c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e930:	4642      	mov	r2, r8
 800e932:	464b      	mov	r3, r9
 800e934:	1891      	adds	r1, r2, r2
 800e936:	60b9      	str	r1, [r7, #8]
 800e938:	415b      	adcs	r3, r3
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e940:	4641      	mov	r1, r8
 800e942:	1851      	adds	r1, r2, r1
 800e944:	6039      	str	r1, [r7, #0]
 800e946:	4649      	mov	r1, r9
 800e948:	414b      	adcs	r3, r1
 800e94a:	607b      	str	r3, [r7, #4]
 800e94c:	f04f 0200 	mov.w	r2, #0
 800e950:	f04f 0300 	mov.w	r3, #0
 800e954:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e958:	4659      	mov	r1, fp
 800e95a:	00cb      	lsls	r3, r1, #3
 800e95c:	4651      	mov	r1, sl
 800e95e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e962:	4651      	mov	r1, sl
 800e964:	00ca      	lsls	r2, r1, #3
 800e966:	4610      	mov	r0, r2
 800e968:	4619      	mov	r1, r3
 800e96a:	4603      	mov	r3, r0
 800e96c:	4642      	mov	r2, r8
 800e96e:	189b      	adds	r3, r3, r2
 800e970:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e972:	464b      	mov	r3, r9
 800e974:	460a      	mov	r2, r1
 800e976:	eb42 0303 	adc.w	r3, r2, r3
 800e97a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	663b      	str	r3, [r7, #96]	@ 0x60
 800e986:	667a      	str	r2, [r7, #100]	@ 0x64
 800e988:	f04f 0200 	mov.w	r2, #0
 800e98c:	f04f 0300 	mov.w	r3, #0
 800e990:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e994:	4649      	mov	r1, r9
 800e996:	008b      	lsls	r3, r1, #2
 800e998:	4641      	mov	r1, r8
 800e99a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e99e:	4641      	mov	r1, r8
 800e9a0:	008a      	lsls	r2, r1, #2
 800e9a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e9a6:	f7f2 f9bf 	bl	8000d28 <__aeabi_uldivmod>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e4 <UART_SetConfig+0x4e4>)
 800e9b0:	fba3 1302 	umull	r1, r3, r3, r2
 800e9b4:	095b      	lsrs	r3, r3, #5
 800e9b6:	2164      	movs	r1, #100	@ 0x64
 800e9b8:	fb01 f303 	mul.w	r3, r1, r3
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	011b      	lsls	r3, r3, #4
 800e9c0:	3332      	adds	r3, #50	@ 0x32
 800e9c2:	4a08      	ldr	r2, [pc, #32]	@ (800e9e4 <UART_SetConfig+0x4e4>)
 800e9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c8:	095b      	lsrs	r3, r3, #5
 800e9ca:	f003 020f 	and.w	r2, r3, #15
 800e9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4422      	add	r2, r4
 800e9d6:	609a      	str	r2, [r3, #8]
}
 800e9d8:	bf00      	nop
 800e9da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9e4:	51eb851f 	.word	0x51eb851f

0800e9e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ea04 <SysTick_Handler+0x1c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e9f0:	f002 f838 	bl	8010a64 <xTaskGetSchedulerState>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d001      	beq.n	800e9fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e9fa:	f002 ff65 	bl	80118c8 <xPortSysTickHandler>
  }
}
 800e9fe:	bf00      	nop
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	e000e010 	.word	0xe000e010

0800ea08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4a07      	ldr	r2, [pc, #28]	@ (800ea34 <vApplicationGetIdleTaskMemory+0x2c>)
 800ea18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	4a06      	ldr	r2, [pc, #24]	@ (800ea38 <vApplicationGetIdleTaskMemory+0x30>)
 800ea1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2280      	movs	r2, #128	@ 0x80
 800ea24:	601a      	str	r2, [r3, #0]
}
 800ea26:	bf00      	nop
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	20002338 	.word	0x20002338
 800ea38:	200023e0 	.word	0x200023e0

0800ea3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	4a07      	ldr	r2, [pc, #28]	@ (800ea68 <vApplicationGetTimerTaskMemory+0x2c>)
 800ea4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	4a06      	ldr	r2, [pc, #24]	@ (800ea6c <vApplicationGetTimerTaskMemory+0x30>)
 800ea52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea5a:	601a      	str	r2, [r3, #0]
}
 800ea5c:	bf00      	nop
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr
 800ea68:	200025e0 	.word	0x200025e0
 800ea6c:	20002688 	.word	0x20002688

0800ea70 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ea76:	2020      	movs	r0, #32
 800ea78:	f002 ffb8 	bl	80119ec <pvPortMalloc>
 800ea7c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00a      	beq.n	800ea9a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 f9aa 	bl	800ede8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ea9a:	687b      	ldr	r3, [r7, #4]
	}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b090      	sub	sp, #64	@ 0x40
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800eaba:	2300      	movs	r3, #0
 800eabc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d10b      	bne.n	800eadc <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac8:	f383 8811 	msr	BASEPRI, r3
 800eacc:	f3bf 8f6f 	isb	sy
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ead6:	bf00      	nop
 800ead8:	bf00      	nop
 800eada:	e7fd      	b.n	800ead8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eae2:	d30b      	bcc.n	800eafc <xEventGroupWaitBits+0x58>
	__asm volatile
 800eae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	61fb      	str	r3, [r7, #28]
}
 800eaf6:	bf00      	nop
 800eaf8:	bf00      	nop
 800eafa:	e7fd      	b.n	800eaf8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10b      	bne.n	800eb1a <xEventGroupWaitBits+0x76>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	61bb      	str	r3, [r7, #24]
}
 800eb14:	bf00      	nop
 800eb16:	bf00      	nop
 800eb18:	e7fd      	b.n	800eb16 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb1a:	f001 ffa3 	bl	8010a64 <xTaskGetSchedulerState>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d102      	bne.n	800eb2a <xEventGroupWaitBits+0x86>
 800eb24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d101      	bne.n	800eb2e <xEventGroupWaitBits+0x8a>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e000      	b.n	800eb30 <xEventGroupWaitBits+0x8c>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10b      	bne.n	800eb4c <xEventGroupWaitBits+0xa8>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	617b      	str	r3, [r7, #20]
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	e7fd      	b.n	800eb48 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800eb4c:	f001 faf4 	bl	8010138 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800eb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	68b9      	ldr	r1, [r7, #8]
 800eb5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb5c:	f000 f90d 	bl	800ed7a <prvTestWaitCondition>
 800eb60:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800eb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00e      	beq.n	800eb86 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800eb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d028      	beq.n	800ebc8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800eb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	43db      	mvns	r3, r3
 800eb7e:	401a      	ands	r2, r3
 800eb80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	e020      	b.n	800ebc8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800eb86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d104      	bne.n	800eb96 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800eb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800eb90:	2301      	movs	r3, #1
 800eb92:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb94:	e018      	b.n	800ebc8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d003      	beq.n	800eba4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eba2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ebb0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb4:	1d18      	adds	r0, r3, #4
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	f001 fcbc 	bl	801053c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800ebc8:	f001 fac4 	bl	8010154 <xTaskResumeAll>
 800ebcc:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800ebce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d031      	beq.n	800ec38 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d107      	bne.n	800ebea <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800ebda:	4b1a      	ldr	r3, [pc, #104]	@ (800ec44 <xEventGroupWaitBits+0x1a0>)
 800ebdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800ebea:	f002 f8b5 	bl	8010d58 <uxTaskResetEventItemValue>
 800ebee:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d11a      	bne.n	800ec30 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800ebfa:	f002 fdd5 	bl	80117a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	68b9      	ldr	r1, [r7, #8]
 800ec08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ec0a:	f000 f8b6 	bl	800ed7a <prvTestWaitCondition>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d009      	beq.n	800ec28 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d006      	beq.n	800ec28 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ec1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	43db      	mvns	r3, r3
 800ec22:	401a      	ands	r2, r3
 800ec24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec26:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800ec2c:	f002 fdee 	bl	801180c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ec30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ec36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ec38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3740      	adds	r7, #64	@ 0x40
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	e000ed04 	.word	0xe000ed04

0800ec48 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b08e      	sub	sp, #56	@ 0x38
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ec52:	2300      	movs	r3, #0
 800ec54:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10b      	bne.n	800ec7c <xEventGroupSetBits+0x34>
	__asm volatile
 800ec64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	613b      	str	r3, [r7, #16]
}
 800ec76:	bf00      	nop
 800ec78:	bf00      	nop
 800ec7a:	e7fd      	b.n	800ec78 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec82:	d30b      	bcc.n	800ec9c <xEventGroupSetBits+0x54>
	__asm volatile
 800ec84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec88:	f383 8811 	msr	BASEPRI, r3
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	60fb      	str	r3, [r7, #12]
}
 800ec96:	bf00      	nop
 800ec98:	bf00      	nop
 800ec9a:	e7fd      	b.n	800ec98 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ec9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec9e:	3304      	adds	r3, #4
 800eca0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca4:	3308      	adds	r3, #8
 800eca6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800eca8:	f001 fa46 	bl	8010138 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	431a      	orrs	r2, r3
 800ecba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecbc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ecbe:	e03c      	b.n	800ed3a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ecc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ecc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800eccc:	2300      	movs	r3, #0
 800ecce:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ecd6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ecde:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d108      	bne.n	800ecfc <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ecea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00b      	beq.n	800ed0e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecfa:	e008      	b.n	800ed0e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ecfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	4013      	ands	r3, r2
 800ed04:	69ba      	ldr	r2, [r7, #24]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d101      	bne.n	800ed0e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ed0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d010      	beq.n	800ed36 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d003      	beq.n	800ed26 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ed1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ed26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ed2e:	4619      	mov	r1, r3
 800ed30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ed32:	f001 fcd1 	bl	80106d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800ed3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed3c:	6a3b      	ldr	r3, [r7, #32]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d1be      	bne.n	800ecc0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ed42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed48:	43db      	mvns	r3, r3
 800ed4a:	401a      	ands	r2, r3
 800ed4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ed50:	f001 fa00 	bl	8010154 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ed54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed56:	681b      	ldr	r3, [r3, #0]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3738      	adds	r7, #56	@ 0x38
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ed6a:	6839      	ldr	r1, [r7, #0]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff ff6b 	bl	800ec48 <xEventGroupSetBits>
}
 800ed72:	bf00      	nop
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ed7a:	b480      	push	{r7}
 800ed7c:	b087      	sub	sp, #28
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	60f8      	str	r0, [r7, #12]
 800ed82:	60b9      	str	r1, [r7, #8]
 800ed84:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800ed86:	2300      	movs	r3, #0
 800ed88:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d107      	bne.n	800eda0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	4013      	ands	r3, r2
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00a      	beq.n	800edb0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	617b      	str	r3, [r7, #20]
 800ed9e:	e007      	b.n	800edb0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	4013      	ands	r3, r2
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d101      	bne.n	800edb0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800edac:	2301      	movs	r3, #1
 800edae:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800edb0:	697b      	ldr	r3, [r7, #20]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
	...

0800edc0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	68f9      	ldr	r1, [r7, #12]
 800edd2:	4804      	ldr	r0, [pc, #16]	@ (800ede4 <xEventGroupSetBitsFromISR+0x24>)
 800edd4:	f002 fb9a 	bl	801150c <xTimerPendFunctionCallFromISR>
 800edd8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800edda:	697b      	ldr	r3, [r7, #20]
	}
 800eddc:	4618      	mov	r0, r3
 800edde:	3718      	adds	r7, #24
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	0800ed61 	.word	0x0800ed61

0800ede8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f103 0208 	add.w	r2, r3, #8
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ee00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f103 0208 	add.w	r2, r3, #8
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f103 0208 	add.w	r2, r3, #8
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ee1c:	bf00      	nop
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee36:	bf00      	nop
 800ee38:	370c      	adds	r7, #12
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr

0800ee42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee42:	b480      	push	{r7}
 800ee44:	b085      	sub	sp, #20
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	689a      	ldr	r2, [r3, #8]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	1c5a      	adds	r2, r3, #1
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	601a      	str	r2, [r3, #0]
}
 800ee7e:	bf00      	nop
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee8a:	b480      	push	{r7}
 800ee8c:	b085      	sub	sp, #20
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea0:	d103      	bne.n	800eeaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	e00c      	b.n	800eec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3308      	adds	r3, #8
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	e002      	b.n	800eeb8 <vListInsert+0x2e>
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d2f6      	bcs.n	800eeb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	685a      	ldr	r2, [r3, #4]
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	1c5a      	adds	r2, r3, #1
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	601a      	str	r2, [r3, #0]
}
 800eef0:	bf00      	nop
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eefc:	b480      	push	{r7}
 800eefe:	b085      	sub	sp, #20
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	6892      	ldr	r2, [r2, #8]
 800ef12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	6852      	ldr	r2, [r2, #4]
 800ef1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d103      	bne.n	800ef30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	689a      	ldr	r2, [r3, #8]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	1e5a      	subs	r2, r3, #1
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d10b      	bne.n	800ef7c <xQueueGenericReset+0x2c>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	60bb      	str	r3, [r7, #8]
}
 800ef76:	bf00      	nop
 800ef78:	bf00      	nop
 800ef7a:	e7fd      	b.n	800ef78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ef7c:	f002 fc14 	bl	80117a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef88:	68f9      	ldr	r1, [r7, #12]
 800ef8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ef8c:	fb01 f303 	mul.w	r3, r1, r3
 800ef90:	441a      	add	r2, r3
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efac:	3b01      	subs	r3, #1
 800efae:	68f9      	ldr	r1, [r7, #12]
 800efb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800efb2:	fb01 f303 	mul.w	r3, r1, r3
 800efb6:	441a      	add	r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	22ff      	movs	r2, #255	@ 0xff
 800efc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	22ff      	movs	r2, #255	@ 0xff
 800efc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d114      	bne.n	800effc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d01a      	beq.n	800f010 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3310      	adds	r3, #16
 800efde:	4618      	mov	r0, r3
 800efe0:	f001 fb16 	bl	8010610 <xTaskRemoveFromEventList>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d012      	beq.n	800f010 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800efea:	4b0d      	ldr	r3, [pc, #52]	@ (800f020 <xQueueGenericReset+0xd0>)
 800efec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	f3bf 8f4f 	dsb	sy
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	e009      	b.n	800f010 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	3310      	adds	r3, #16
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff fef1 	bl	800ede8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3324      	adds	r3, #36	@ 0x24
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7ff feec 	bl	800ede8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f010:	f002 fbfc 	bl	801180c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f014:	2301      	movs	r3, #1
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	@ 0x38
 800f028:	af02      	add	r7, sp, #8
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10b      	bne.n	800f050 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f04a:	bf00      	nop
 800f04c:	bf00      	nop
 800f04e:	e7fd      	b.n	800f04c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10b      	bne.n	800f06e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f068:	bf00      	nop
 800f06a:	bf00      	nop
 800f06c:	e7fd      	b.n	800f06a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <xQueueGenericCreateStatic+0x56>
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <xQueueGenericCreateStatic+0x5a>
 800f07a:	2301      	movs	r3, #1
 800f07c:	e000      	b.n	800f080 <xQueueGenericCreateStatic+0x5c>
 800f07e:	2300      	movs	r3, #0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10b      	bne.n	800f09c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	623b      	str	r3, [r7, #32]
}
 800f096:	bf00      	nop
 800f098:	bf00      	nop
 800f09a:	e7fd      	b.n	800f098 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d102      	bne.n	800f0a8 <xQueueGenericCreateStatic+0x84>
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <xQueueGenericCreateStatic+0x88>
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e000      	b.n	800f0ae <xQueueGenericCreateStatic+0x8a>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10b      	bne.n	800f0ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b6:	f383 8811 	msr	BASEPRI, r3
 800f0ba:	f3bf 8f6f 	isb	sy
 800f0be:	f3bf 8f4f 	dsb	sy
 800f0c2:	61fb      	str	r3, [r7, #28]
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop
 800f0c8:	e7fd      	b.n	800f0c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f0ca:	2350      	movs	r3, #80	@ 0x50
 800f0cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b50      	cmp	r3, #80	@ 0x50
 800f0d2:	d00b      	beq.n	800f0ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	61bb      	str	r3, [r7, #24]
}
 800f0e6:	bf00      	nop
 800f0e8:	bf00      	nop
 800f0ea:	e7fd      	b.n	800f0e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f0ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00d      	beq.n	800f114 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f100:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	4613      	mov	r3, r2
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	68b9      	ldr	r1, [r7, #8]
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f000 f840 	bl	800f194 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f116:	4618      	mov	r0, r3
 800f118:	3730      	adds	r7, #48	@ 0x30
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f11e:	b580      	push	{r7, lr}
 800f120:	b08a      	sub	sp, #40	@ 0x28
 800f122:	af02      	add	r7, sp, #8
 800f124:	60f8      	str	r0, [r7, #12]
 800f126:	60b9      	str	r1, [r7, #8]
 800f128:	4613      	mov	r3, r2
 800f12a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d10b      	bne.n	800f14a <xQueueGenericCreate+0x2c>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	613b      	str	r3, [r7, #16]
}
 800f144:	bf00      	nop
 800f146:	bf00      	nop
 800f148:	e7fd      	b.n	800f146 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	fb02 f303 	mul.w	r3, r2, r3
 800f152:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	3350      	adds	r3, #80	@ 0x50
 800f158:	4618      	mov	r0, r3
 800f15a:	f002 fc47 	bl	80119ec <pvPortMalloc>
 800f15e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d011      	beq.n	800f18a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	3350      	adds	r3, #80	@ 0x50
 800f16e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f178:	79fa      	ldrb	r2, [r7, #7]
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	4613      	mov	r3, r2
 800f180:	697a      	ldr	r2, [r7, #20]
 800f182:	68b9      	ldr	r1, [r7, #8]
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f000 f805 	bl	800f194 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f18a:	69bb      	ldr	r3, [r7, #24]
	}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3720      	adds	r7, #32
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d103      	bne.n	800f1b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	69ba      	ldr	r2, [r7, #24]
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	e002      	b.n	800f1b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	68fa      	ldr	r2, [r7, #12]
 800f1ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	69b8      	ldr	r0, [r7, #24]
 800f1c6:	f7ff fec3 	bl	800ef50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	78fa      	ldrb	r2, [r7, #3]
 800f1ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00e      	beq.n	800f206 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	2100      	movs	r1, #0
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 f81d 	bl	800f240 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f206:	bf00      	nop
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f20e:	b580      	push	{r7, lr}
 800f210:	b086      	sub	sp, #24
 800f212:	af00      	add	r7, sp, #0
 800f214:	4603      	mov	r3, r0
 800f216:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f218:	2301      	movs	r3, #1
 800f21a:	617b      	str	r3, [r7, #20]
 800f21c:	2300      	movs	r3, #0
 800f21e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	461a      	mov	r2, r3
 800f224:	6939      	ldr	r1, [r7, #16]
 800f226:	6978      	ldr	r0, [r7, #20]
 800f228:	f7ff ff79 	bl	800f11e <xQueueGenericCreate>
 800f22c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f7ff ffd3 	bl	800f1da <prvInitialiseMutex>

		return xNewQueue;
 800f234:	68fb      	ldr	r3, [r7, #12]
	}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b08e      	sub	sp, #56	@ 0x38
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
 800f24c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f24e:	2300      	movs	r3, #0
 800f250:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10b      	bne.n	800f274 <xQueueGenericSend+0x34>
	__asm volatile
 800f25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f260:	f383 8811 	msr	BASEPRI, r3
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	f3bf 8f4f 	dsb	sy
 800f26c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f26e:	bf00      	nop
 800f270:	bf00      	nop
 800f272:	e7fd      	b.n	800f270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d103      	bne.n	800f282 <xQueueGenericSend+0x42>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d101      	bne.n	800f286 <xQueueGenericSend+0x46>
 800f282:	2301      	movs	r3, #1
 800f284:	e000      	b.n	800f288 <xQueueGenericSend+0x48>
 800f286:	2300      	movs	r3, #0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10b      	bne.n	800f2a4 <xQueueGenericSend+0x64>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f29e:	bf00      	nop
 800f2a0:	bf00      	nop
 800f2a2:	e7fd      	b.n	800f2a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d103      	bne.n	800f2b2 <xQueueGenericSend+0x72>
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d101      	bne.n	800f2b6 <xQueueGenericSend+0x76>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e000      	b.n	800f2b8 <xQueueGenericSend+0x78>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10b      	bne.n	800f2d4 <xQueueGenericSend+0x94>
	__asm volatile
 800f2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c0:	f383 8811 	msr	BASEPRI, r3
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	623b      	str	r3, [r7, #32]
}
 800f2ce:	bf00      	nop
 800f2d0:	bf00      	nop
 800f2d2:	e7fd      	b.n	800f2d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2d4:	f001 fbc6 	bl	8010a64 <xTaskGetSchedulerState>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d102      	bne.n	800f2e4 <xQueueGenericSend+0xa4>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <xQueueGenericSend+0xa8>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e000      	b.n	800f2ea <xQueueGenericSend+0xaa>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10b      	bne.n	800f306 <xQueueGenericSend+0xc6>
	__asm volatile
 800f2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	61fb      	str	r3, [r7, #28]
}
 800f300:	bf00      	nop
 800f302:	bf00      	nop
 800f304:	e7fd      	b.n	800f302 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f306:	f002 fa4f 	bl	80117a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f312:	429a      	cmp	r2, r3
 800f314:	d302      	bcc.n	800f31c <xQueueGenericSend+0xdc>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d129      	bne.n	800f370 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f322:	f000 fb37 	bl	800f994 <prvCopyDataToQueue>
 800f326:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d010      	beq.n	800f352 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f332:	3324      	adds	r3, #36	@ 0x24
 800f334:	4618      	mov	r0, r3
 800f336:	f001 f96b 	bl	8010610 <xTaskRemoveFromEventList>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d013      	beq.n	800f368 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f340:	4b3f      	ldr	r3, [pc, #252]	@ (800f440 <xQueueGenericSend+0x200>)
 800f342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	f3bf 8f4f 	dsb	sy
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	e00a      	b.n	800f368 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f354:	2b00      	cmp	r3, #0
 800f356:	d007      	beq.n	800f368 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f358:	4b39      	ldr	r3, [pc, #228]	@ (800f440 <xQueueGenericSend+0x200>)
 800f35a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	f3bf 8f4f 	dsb	sy
 800f364:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f368:	f002 fa50 	bl	801180c <vPortExitCritical>
				return pdPASS;
 800f36c:	2301      	movs	r3, #1
 800f36e:	e063      	b.n	800f438 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d103      	bne.n	800f37e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f376:	f002 fa49 	bl	801180c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f37a:	2300      	movs	r3, #0
 800f37c:	e05c      	b.n	800f438 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f380:	2b00      	cmp	r3, #0
 800f382:	d106      	bne.n	800f392 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f384:	f107 0314 	add.w	r3, r7, #20
 800f388:	4618      	mov	r0, r3
 800f38a:	f001 fa09 	bl	80107a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f38e:	2301      	movs	r3, #1
 800f390:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f392:	f002 fa3b 	bl	801180c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f396:	f000 fecf 	bl	8010138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f39a:	f002 fa05 	bl	80117a8 <vPortEnterCritical>
 800f39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f3a4:	b25b      	sxtb	r3, r3
 800f3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3aa:	d103      	bne.n	800f3b4 <xQueueGenericSend+0x174>
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f3ba:	b25b      	sxtb	r3, r3
 800f3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c0:	d103      	bne.n	800f3ca <xQueueGenericSend+0x18a>
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f3ca:	f002 fa1f 	bl	801180c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3ce:	1d3a      	adds	r2, r7, #4
 800f3d0:	f107 0314 	add.w	r3, r7, #20
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f001 f9f8 	bl	80107cc <xTaskCheckForTimeOut>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d124      	bne.n	800f42c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3e4:	f000 fbce 	bl	800fb84 <prvIsQueueFull>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d018      	beq.n	800f420 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f0:	3310      	adds	r3, #16
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f001 f87a 	bl	80104f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3fe:	f000 fb59 	bl	800fab4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f402:	f000 fea7 	bl	8010154 <xTaskResumeAll>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f47f af7c 	bne.w	800f306 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f40e:	4b0c      	ldr	r3, [pc, #48]	@ (800f440 <xQueueGenericSend+0x200>)
 800f410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f414:	601a      	str	r2, [r3, #0]
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	e772      	b.n	800f306 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f422:	f000 fb47 	bl	800fab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f426:	f000 fe95 	bl	8010154 <xTaskResumeAll>
 800f42a:	e76c      	b.n	800f306 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f42c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f42e:	f000 fb41 	bl	800fab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f432:	f000 fe8f 	bl	8010154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f436:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3738      	adds	r7, #56	@ 0x38
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	e000ed04 	.word	0xe000ed04

0800f444 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b090      	sub	sp, #64	@ 0x40
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10b      	bne.n	800f474 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f460:	f383 8811 	msr	BASEPRI, r3
 800f464:	f3bf 8f6f 	isb	sy
 800f468:	f3bf 8f4f 	dsb	sy
 800f46c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f46e:	bf00      	nop
 800f470:	bf00      	nop
 800f472:	e7fd      	b.n	800f470 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d103      	bne.n	800f482 <xQueueGenericSendFromISR+0x3e>
 800f47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <xQueueGenericSendFromISR+0x42>
 800f482:	2301      	movs	r3, #1
 800f484:	e000      	b.n	800f488 <xQueueGenericSendFromISR+0x44>
 800f486:	2300      	movs	r3, #0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10b      	bne.n	800f4a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f490:	f383 8811 	msr	BASEPRI, r3
 800f494:	f3bf 8f6f 	isb	sy
 800f498:	f3bf 8f4f 	dsb	sy
 800f49c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f49e:	bf00      	nop
 800f4a0:	bf00      	nop
 800f4a2:	e7fd      	b.n	800f4a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	d103      	bne.n	800f4b2 <xQueueGenericSendFromISR+0x6e>
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d101      	bne.n	800f4b6 <xQueueGenericSendFromISR+0x72>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e000      	b.n	800f4b8 <xQueueGenericSendFromISR+0x74>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d10b      	bne.n	800f4d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	623b      	str	r3, [r7, #32]
}
 800f4ce:	bf00      	nop
 800f4d0:	bf00      	nop
 800f4d2:	e7fd      	b.n	800f4d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4d4:	f002 fa48 	bl	8011968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4d8:	f3ef 8211 	mrs	r2, BASEPRI
 800f4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	61fa      	str	r2, [r7, #28]
 800f4ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f4f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d302      	bcc.n	800f506 <xQueueGenericSendFromISR+0xc2>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b02      	cmp	r3, #2
 800f504:	d12f      	bne.n	800f566 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f50c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f514:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f516:	683a      	ldr	r2, [r7, #0]
 800f518:	68b9      	ldr	r1, [r7, #8]
 800f51a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f51c:	f000 fa3a 	bl	800f994 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f520:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f528:	d112      	bne.n	800f550 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d016      	beq.n	800f560 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f534:	3324      	adds	r3, #36	@ 0x24
 800f536:	4618      	mov	r0, r3
 800f538:	f001 f86a 	bl	8010610 <xTaskRemoveFromEventList>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00e      	beq.n	800f560 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00b      	beq.n	800f560 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	e007      	b.n	800f560 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f550:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f554:	3301      	adds	r3, #1
 800f556:	b2db      	uxtb	r3, r3
 800f558:	b25a      	sxtb	r2, r3
 800f55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f55c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f560:	2301      	movs	r3, #1
 800f562:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f564:	e001      	b.n	800f56a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f56c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f574:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3740      	adds	r7, #64	@ 0x40
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b08c      	sub	sp, #48	@ 0x30
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f58c:	2300      	movs	r3, #0
 800f58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10b      	bne.n	800f5b2 <xQueueReceive+0x32>
	__asm volatile
 800f59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f59e:	f383 8811 	msr	BASEPRI, r3
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	623b      	str	r3, [r7, #32]
}
 800f5ac:	bf00      	nop
 800f5ae:	bf00      	nop
 800f5b0:	e7fd      	b.n	800f5ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d103      	bne.n	800f5c0 <xQueueReceive+0x40>
 800f5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d101      	bne.n	800f5c4 <xQueueReceive+0x44>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e000      	b.n	800f5c6 <xQueueReceive+0x46>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d10b      	bne.n	800f5e2 <xQueueReceive+0x62>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	61fb      	str	r3, [r7, #28]
}
 800f5dc:	bf00      	nop
 800f5de:	bf00      	nop
 800f5e0:	e7fd      	b.n	800f5de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5e2:	f001 fa3f 	bl	8010a64 <xTaskGetSchedulerState>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d102      	bne.n	800f5f2 <xQueueReceive+0x72>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d101      	bne.n	800f5f6 <xQueueReceive+0x76>
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e000      	b.n	800f5f8 <xQueueReceive+0x78>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10b      	bne.n	800f614 <xQueueReceive+0x94>
	__asm volatile
 800f5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	61bb      	str	r3, [r7, #24]
}
 800f60e:	bf00      	nop
 800f610:	bf00      	nop
 800f612:	e7fd      	b.n	800f610 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f614:	f002 f8c8 	bl	80117a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f61c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f620:	2b00      	cmp	r3, #0
 800f622:	d01f      	beq.n	800f664 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f624:	68b9      	ldr	r1, [r7, #8]
 800f626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f628:	f000 fa1e 	bl	800fa68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62e:	1e5a      	subs	r2, r3, #1
 800f630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f632:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00f      	beq.n	800f65c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63e:	3310      	adds	r3, #16
 800f640:	4618      	mov	r0, r3
 800f642:	f000 ffe5 	bl	8010610 <xTaskRemoveFromEventList>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d007      	beq.n	800f65c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f64c:	4b3c      	ldr	r3, [pc, #240]	@ (800f740 <xQueueReceive+0x1c0>)
 800f64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f65c:	f002 f8d6 	bl	801180c <vPortExitCritical>
				return pdPASS;
 800f660:	2301      	movs	r3, #1
 800f662:	e069      	b.n	800f738 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d103      	bne.n	800f672 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f66a:	f002 f8cf 	bl	801180c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f66e:	2300      	movs	r3, #0
 800f670:	e062      	b.n	800f738 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f674:	2b00      	cmp	r3, #0
 800f676:	d106      	bne.n	800f686 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f678:	f107 0310 	add.w	r3, r7, #16
 800f67c:	4618      	mov	r0, r3
 800f67e:	f001 f88f 	bl	80107a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f682:	2301      	movs	r3, #1
 800f684:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f686:	f002 f8c1 	bl	801180c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f68a:	f000 fd55 	bl	8010138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f68e:	f002 f88b 	bl	80117a8 <vPortEnterCritical>
 800f692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f698:	b25b      	sxtb	r3, r3
 800f69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69e:	d103      	bne.n	800f6a8 <xQueueReceive+0x128>
 800f6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b4:	d103      	bne.n	800f6be <xQueueReceive+0x13e>
 800f6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f6be:	f002 f8a5 	bl	801180c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6c2:	1d3a      	adds	r2, r7, #4
 800f6c4:	f107 0310 	add.w	r3, r7, #16
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f001 f87e 	bl	80107cc <xTaskCheckForTimeOut>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d123      	bne.n	800f71e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6d8:	f000 fa3e 	bl	800fb58 <prvIsQueueEmpty>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d017      	beq.n	800f712 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e4:	3324      	adds	r3, #36	@ 0x24
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	4611      	mov	r1, r2
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f000 ff00 	bl	80104f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6f2:	f000 f9df 	bl	800fab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6f6:	f000 fd2d 	bl	8010154 <xTaskResumeAll>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d189      	bne.n	800f614 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f700:	4b0f      	ldr	r3, [pc, #60]	@ (800f740 <xQueueReceive+0x1c0>)
 800f702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	e780      	b.n	800f614 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f714:	f000 f9ce 	bl	800fab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f718:	f000 fd1c 	bl	8010154 <xTaskResumeAll>
 800f71c:	e77a      	b.n	800f614 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f71e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f720:	f000 f9c8 	bl	800fab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f724:	f000 fd16 	bl	8010154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f72a:	f000 fa15 	bl	800fb58 <prvIsQueueEmpty>
 800f72e:	4603      	mov	r3, r0
 800f730:	2b00      	cmp	r3, #0
 800f732:	f43f af6f 	beq.w	800f614 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f736:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3730      	adds	r7, #48	@ 0x30
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	e000ed04 	.word	0xe000ed04

0800f744 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08e      	sub	sp, #56	@ 0x38
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f74e:	2300      	movs	r3, #0
 800f750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10b      	bne.n	800f778 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f764:	f383 8811 	msr	BASEPRI, r3
 800f768:	f3bf 8f6f 	isb	sy
 800f76c:	f3bf 8f4f 	dsb	sy
 800f770:	623b      	str	r3, [r7, #32]
}
 800f772:	bf00      	nop
 800f774:	bf00      	nop
 800f776:	e7fd      	b.n	800f774 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00b      	beq.n	800f798 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	61fb      	str	r3, [r7, #28]
}
 800f792:	bf00      	nop
 800f794:	bf00      	nop
 800f796:	e7fd      	b.n	800f794 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f798:	f001 f964 	bl	8010a64 <xTaskGetSchedulerState>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d102      	bne.n	800f7a8 <xQueueSemaphoreTake+0x64>
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <xQueueSemaphoreTake+0x68>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e000      	b.n	800f7ae <xQueueSemaphoreTake+0x6a>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d10b      	bne.n	800f7ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	61bb      	str	r3, [r7, #24]
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	e7fd      	b.n	800f7c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f7ca:	f001 ffed 	bl	80117a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d024      	beq.n	800f824 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7dc:	1e5a      	subs	r2, r3, #1
 800f7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d104      	bne.n	800f7f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f7ea:	f001 facd 	bl	8010d88 <pvTaskIncrementMutexHeldCount>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f6:	691b      	ldr	r3, [r3, #16]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00f      	beq.n	800f81c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7fe:	3310      	adds	r3, #16
 800f800:	4618      	mov	r0, r3
 800f802:	f000 ff05 	bl	8010610 <xTaskRemoveFromEventList>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d007      	beq.n	800f81c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f80c:	4b54      	ldr	r3, [pc, #336]	@ (800f960 <xQueueSemaphoreTake+0x21c>)
 800f80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f812:	601a      	str	r2, [r3, #0]
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f81c:	f001 fff6 	bl	801180c <vPortExitCritical>
				return pdPASS;
 800f820:	2301      	movs	r3, #1
 800f822:	e098      	b.n	800f956 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d112      	bne.n	800f850 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00b      	beq.n	800f848 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	617b      	str	r3, [r7, #20]
}
 800f842:	bf00      	nop
 800f844:	bf00      	nop
 800f846:	e7fd      	b.n	800f844 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f848:	f001 ffe0 	bl	801180c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f84c:	2300      	movs	r3, #0
 800f84e:	e082      	b.n	800f956 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f852:	2b00      	cmp	r3, #0
 800f854:	d106      	bne.n	800f864 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f856:	f107 030c 	add.w	r3, r7, #12
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 ffa0 	bl	80107a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f860:	2301      	movs	r3, #1
 800f862:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f864:	f001 ffd2 	bl	801180c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f868:	f000 fc66 	bl	8010138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f86c:	f001 ff9c 	bl	80117a8 <vPortEnterCritical>
 800f870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f872:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f876:	b25b      	sxtb	r3, r3
 800f878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f87c:	d103      	bne.n	800f886 <xQueueSemaphoreTake+0x142>
 800f87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f88c:	b25b      	sxtb	r3, r3
 800f88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f892:	d103      	bne.n	800f89c <xQueueSemaphoreTake+0x158>
 800f894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f896:	2200      	movs	r2, #0
 800f898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f89c:	f001 ffb6 	bl	801180c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f8a0:	463a      	mov	r2, r7
 800f8a2:	f107 030c 	add.w	r3, r7, #12
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 ff8f 	bl	80107cc <xTaskCheckForTimeOut>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d132      	bne.n	800f91a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f8b6:	f000 f94f 	bl	800fb58 <prvIsQueueEmpty>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d026      	beq.n	800f90e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d109      	bne.n	800f8dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f8c8:	f001 ff6e 	bl	80117a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f001 f8e5 	bl	8010aa0 <xTaskPriorityInherit>
 800f8d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f8d8:	f001 ff98 	bl	801180c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8de:	3324      	adds	r3, #36	@ 0x24
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f000 fe03 	bl	80104f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f8ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f8ec:	f000 f8e2 	bl	800fab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f8f0:	f000 fc30 	bl	8010154 <xTaskResumeAll>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f47f af67 	bne.w	800f7ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f8fc:	4b18      	ldr	r3, [pc, #96]	@ (800f960 <xQueueSemaphoreTake+0x21c>)
 800f8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f902:	601a      	str	r2, [r3, #0]
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	e75d      	b.n	800f7ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f90e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f910:	f000 f8d0 	bl	800fab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f914:	f000 fc1e 	bl	8010154 <xTaskResumeAll>
 800f918:	e757      	b.n	800f7ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f91a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f91c:	f000 f8ca 	bl	800fab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f920:	f000 fc18 	bl	8010154 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f926:	f000 f917 	bl	800fb58 <prvIsQueueEmpty>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f43f af4c 	beq.w	800f7ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00d      	beq.n	800f954 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f938:	f001 ff36 	bl	80117a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f93c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f93e:	f000 f811 	bl	800f964 <prvGetDisinheritPriorityAfterTimeout>
 800f942:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f94a:	4618      	mov	r0, r3
 800f94c:	f001 f980 	bl	8010c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f950:	f001 ff5c 	bl	801180c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f956:	4618      	mov	r0, r3
 800f958:	3738      	adds	r7, #56	@ 0x38
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	e000ed04 	.word	0xe000ed04

0800f964 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f964:	b480      	push	{r7}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f970:	2b00      	cmp	r3, #0
 800f972:	d006      	beq.n	800f982 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f97e:	60fb      	str	r3, [r7, #12]
 800f980:	e001      	b.n	800f986 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f982:	2300      	movs	r3, #0
 800f984:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f986:	68fb      	ldr	r3, [r7, #12]
	}
 800f988:	4618      	mov	r0, r3
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10d      	bne.n	800f9ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d14d      	bne.n	800fa56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f001 f8d6 	bl	8010b70 <xTaskPriorityDisinherit>
 800f9c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	609a      	str	r2, [r3, #8]
 800f9cc:	e043      	b.n	800fa56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d119      	bne.n	800fa08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6858      	ldr	r0, [r3, #4]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9dc:	461a      	mov	r2, r3
 800f9de:	68b9      	ldr	r1, [r7, #8]
 800f9e0:	f003 f9cf 	bl	8012d82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	685a      	ldr	r2, [r3, #4]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ec:	441a      	add	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d32b      	bcc.n	800fa56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	605a      	str	r2, [r3, #4]
 800fa06:	e026      	b.n	800fa56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	68d8      	ldr	r0, [r3, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa10:	461a      	mov	r2, r3
 800fa12:	68b9      	ldr	r1, [r7, #8]
 800fa14:	f003 f9b5 	bl	8012d82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	68da      	ldr	r2, [r3, #12]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa20:	425b      	negs	r3, r3
 800fa22:	441a      	add	r2, r3
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	68da      	ldr	r2, [r3, #12]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d207      	bcs.n	800fa44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	689a      	ldr	r2, [r3, #8]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa3c:	425b      	negs	r3, r3
 800fa3e:	441a      	add	r2, r3
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d105      	bne.n	800fa56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fa5e:	697b      	ldr	r3, [r7, #20]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d018      	beq.n	800faac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	68da      	ldr	r2, [r3, #12]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa82:	441a      	add	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	68da      	ldr	r2, [r3, #12]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d303      	bcc.n	800fa9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68d9      	ldr	r1, [r3, #12]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faa4:	461a      	mov	r2, r3
 800faa6:	6838      	ldr	r0, [r7, #0]
 800faa8:	f003 f96b 	bl	8012d82 <memcpy>
	}
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fabc:	f001 fe74 	bl	80117a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fac6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fac8:	e011      	b.n	800faee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800face:	2b00      	cmp	r3, #0
 800fad0:	d012      	beq.n	800faf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	3324      	adds	r3, #36	@ 0x24
 800fad6:	4618      	mov	r0, r3
 800fad8:	f000 fd9a 	bl	8010610 <xTaskRemoveFromEventList>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fae2:	f000 fed7 	bl	8010894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	3b01      	subs	r3, #1
 800faea:	b2db      	uxtb	r3, r3
 800faec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800faee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	dce9      	bgt.n	800faca <prvUnlockQueue+0x16>
 800faf6:	e000      	b.n	800fafa <prvUnlockQueue+0x46>
					break;
 800faf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	22ff      	movs	r2, #255	@ 0xff
 800fafe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fb02:	f001 fe83 	bl	801180c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb06:	f001 fe4f 	bl	80117a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb12:	e011      	b.n	800fb38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d012      	beq.n	800fb42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3310      	adds	r3, #16
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 fd75 	bl	8010610 <xTaskRemoveFromEventList>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb2c:	f000 feb2 	bl	8010894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb30:	7bbb      	ldrb	r3, [r7, #14]
 800fb32:	3b01      	subs	r3, #1
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	dce9      	bgt.n	800fb14 <prvUnlockQueue+0x60>
 800fb40:	e000      	b.n	800fb44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fb42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	22ff      	movs	r2, #255	@ 0xff
 800fb48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800fb4c:	f001 fe5e 	bl	801180c <vPortExitCritical>
}
 800fb50:	bf00      	nop
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb60:	f001 fe22 	bl	80117a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	60fb      	str	r3, [r7, #12]
 800fb70:	e001      	b.n	800fb76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fb76:	f001 fe49 	bl	801180c <vPortExitCritical>

	return xReturn;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb8c:	f001 fe0c 	bl	80117a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d102      	bne.n	800fba2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	e001      	b.n	800fba6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fba2:	2300      	movs	r3, #0
 800fba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fba6:	f001 fe31 	bl	801180c <vPortExitCritical>

	return xReturn;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b085      	sub	sp, #20
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	60fb      	str	r3, [r7, #12]
 800fbc2:	e014      	b.n	800fbee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fbc4:	4a0f      	ldr	r2, [pc, #60]	@ (800fc04 <vQueueAddToRegistry+0x50>)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10b      	bne.n	800fbe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fbd0:	490c      	ldr	r1, [pc, #48]	@ (800fc04 <vQueueAddToRegistry+0x50>)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fbda:	4a0a      	ldr	r2, [pc, #40]	@ (800fc04 <vQueueAddToRegistry+0x50>)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	4413      	add	r3, r2
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fbe6:	e006      	b.n	800fbf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	3301      	adds	r3, #1
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2b07      	cmp	r3, #7
 800fbf2:	d9e7      	bls.n	800fbc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop
 800fbf8:	3714      	adds	r7, #20
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	20002a88 	.word	0x20002a88

0800fc08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fc18:	f001 fdc6 	bl	80117a8 <vPortEnterCritical>
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc22:	b25b      	sxtb	r3, r3
 800fc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc28:	d103      	bne.n	800fc32 <vQueueWaitForMessageRestricted+0x2a>
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc38:	b25b      	sxtb	r3, r3
 800fc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc3e:	d103      	bne.n	800fc48 <vQueueWaitForMessageRestricted+0x40>
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc48:	f001 fde0 	bl	801180c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d106      	bne.n	800fc62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	3324      	adds	r3, #36	@ 0x24
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f000 fcab 	bl	80105b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fc62:	6978      	ldr	r0, [r7, #20]
 800fc64:	f7ff ff26 	bl	800fab4 <prvUnlockQueue>
	}
 800fc68:	bf00      	nop
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b08e      	sub	sp, #56	@ 0x38
 800fc74:	af04      	add	r7, sp, #16
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fc7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10b      	bne.n	800fc9c <xTaskCreateStatic+0x2c>
	__asm volatile
 800fc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc88:	f383 8811 	msr	BASEPRI, r3
 800fc8c:	f3bf 8f6f 	isb	sy
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	623b      	str	r3, [r7, #32]
}
 800fc96:	bf00      	nop
 800fc98:	bf00      	nop
 800fc9a:	e7fd      	b.n	800fc98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10b      	bne.n	800fcba <xTaskCreateStatic+0x4a>
	__asm volatile
 800fca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca6:	f383 8811 	msr	BASEPRI, r3
 800fcaa:	f3bf 8f6f 	isb	sy
 800fcae:	f3bf 8f4f 	dsb	sy
 800fcb2:	61fb      	str	r3, [r7, #28]
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop
 800fcb8:	e7fd      	b.n	800fcb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fcba:	23a8      	movs	r3, #168	@ 0xa8
 800fcbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2ba8      	cmp	r3, #168	@ 0xa8
 800fcc2:	d00b      	beq.n	800fcdc <xTaskCreateStatic+0x6c>
	__asm volatile
 800fcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	61bb      	str	r3, [r7, #24]
}
 800fcd6:	bf00      	nop
 800fcd8:	bf00      	nop
 800fcda:	e7fd      	b.n	800fcd8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fcdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d01e      	beq.n	800fd22 <xTaskCreateStatic+0xb2>
 800fce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d01b      	beq.n	800fd22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fcf2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	9303      	str	r3, [sp, #12]
 800fd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd02:	9302      	str	r3, [sp, #8]
 800fd04:	f107 0314 	add.w	r3, r7, #20
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	68b9      	ldr	r1, [r7, #8]
 800fd14:	68f8      	ldr	r0, [r7, #12]
 800fd16:	f000 f851 	bl	800fdbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fd1c:	f000 f8f6 	bl	800ff0c <prvAddNewTaskToReadyList>
 800fd20:	e001      	b.n	800fd26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fd22:	2300      	movs	r3, #0
 800fd24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fd26:	697b      	ldr	r3, [r7, #20]
	}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3728      	adds	r7, #40	@ 0x28
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b08c      	sub	sp, #48	@ 0x30
 800fd34:	af04      	add	r7, sp, #16
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	603b      	str	r3, [r7, #0]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fd40:	88fb      	ldrh	r3, [r7, #6]
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	4618      	mov	r0, r3
 800fd46:	f001 fe51 	bl	80119ec <pvPortMalloc>
 800fd4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d00e      	beq.n	800fd70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fd52:	20a8      	movs	r0, #168	@ 0xa8
 800fd54:	f001 fe4a 	bl	80119ec <pvPortMalloc>
 800fd58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d003      	beq.n	800fd68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd66:	e005      	b.n	800fd74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fd68:	6978      	ldr	r0, [r7, #20]
 800fd6a:	f001 ff0d 	bl	8011b88 <vPortFree>
 800fd6e:	e001      	b.n	800fd74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fd70:	2300      	movs	r3, #0
 800fd72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d017      	beq.n	800fdaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fd82:	88fa      	ldrh	r2, [r7, #6]
 800fd84:	2300      	movs	r3, #0
 800fd86:	9303      	str	r3, [sp, #12]
 800fd88:	69fb      	ldr	r3, [r7, #28]
 800fd8a:	9302      	str	r3, [sp, #8]
 800fd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd8e:	9301      	str	r3, [sp, #4]
 800fd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f000 f80f 	bl	800fdbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd9e:	69f8      	ldr	r0, [r7, #28]
 800fda0:	f000 f8b4 	bl	800ff0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fda4:	2301      	movs	r3, #1
 800fda6:	61bb      	str	r3, [r7, #24]
 800fda8:	e002      	b.n	800fdb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fdae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fdb0:	69bb      	ldr	r3, [r7, #24]
	}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3720      	adds	r7, #32
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
 800fdc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	21a5      	movs	r1, #165	@ 0xa5
 800fdd6:	f002 fdfc 	bl	80129d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fde4:	3b01      	subs	r3, #1
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	f023 0307 	bic.w	r3, r3, #7
 800fdf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fdf4:	69bb      	ldr	r3, [r7, #24]
 800fdf6:	f003 0307 	and.w	r3, r3, #7
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d00b      	beq.n	800fe16 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	617b      	str	r3, [r7, #20]
}
 800fe10:	bf00      	nop
 800fe12:	bf00      	nop
 800fe14:	e7fd      	b.n	800fe12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d01f      	beq.n	800fe5c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	61fb      	str	r3, [r7, #28]
 800fe20:	e012      	b.n	800fe48 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	4413      	add	r3, r2
 800fe28:	7819      	ldrb	r1, [r3, #0]
 800fe2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	4413      	add	r3, r2
 800fe30:	3334      	adds	r3, #52	@ 0x34
 800fe32:	460a      	mov	r2, r1
 800fe34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fe36:	68ba      	ldr	r2, [r7, #8]
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d006      	beq.n	800fe50 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	3301      	adds	r3, #1
 800fe46:	61fb      	str	r3, [r7, #28]
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	2b0f      	cmp	r3, #15
 800fe4c:	d9e9      	bls.n	800fe22 <prvInitialiseNewTask+0x66>
 800fe4e:	e000      	b.n	800fe52 <prvInitialiseNewTask+0x96>
			{
				break;
 800fe50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fe52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fe5a:	e003      	b.n	800fe64 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fe64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe66:	2b37      	cmp	r3, #55	@ 0x37
 800fe68:	d901      	bls.n	800fe6e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fe6a:	2337      	movs	r3, #55	@ 0x37
 800fe6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fe74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fe80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe82:	3304      	adds	r3, #4
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe ffcf 	bl	800ee28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fe8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe8c:	3318      	adds	r3, #24
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fe ffca 	bl	800ee28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fe94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fea8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800feaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feac:	2200      	movs	r2, #0
 800feae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800feb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb4:	2200      	movs	r2, #0
 800feb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800feba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800febc:	3354      	adds	r3, #84	@ 0x54
 800febe:	224c      	movs	r2, #76	@ 0x4c
 800fec0:	2100      	movs	r1, #0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f002 fd85 	bl	80129d2 <memset>
 800fec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feca:	4a0d      	ldr	r2, [pc, #52]	@ (800ff00 <prvInitialiseNewTask+0x144>)
 800fecc:	659a      	str	r2, [r3, #88]	@ 0x58
 800fece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed0:	4a0c      	ldr	r2, [pc, #48]	@ (800ff04 <prvInitialiseNewTask+0x148>)
 800fed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed6:	4a0c      	ldr	r2, [pc, #48]	@ (800ff08 <prvInitialiseNewTask+0x14c>)
 800fed8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	68f9      	ldr	r1, [r7, #12]
 800fede:	69b8      	ldr	r0, [r7, #24]
 800fee0:	f001 fb34 	bl	801154c <pxPortInitialiseStack>
 800fee4:	4602      	mov	r2, r0
 800fee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800feea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feec:	2b00      	cmp	r3, #0
 800feee:	d002      	beq.n	800fef6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fef6:	bf00      	nop
 800fef8:	3720      	adds	r7, #32
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20011b7c 	.word	0x20011b7c
 800ff04:	20011be4 	.word	0x20011be4
 800ff08:	20011c4c 	.word	0x20011c4c

0800ff0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff14:	f001 fc48 	bl	80117a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff18:	4b2d      	ldr	r3, [pc, #180]	@ (800ffd0 <prvAddNewTaskToReadyList+0xc4>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	4a2c      	ldr	r2, [pc, #176]	@ (800ffd0 <prvAddNewTaskToReadyList+0xc4>)
 800ff20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ff22:	4b2c      	ldr	r3, [pc, #176]	@ (800ffd4 <prvAddNewTaskToReadyList+0xc8>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d109      	bne.n	800ff3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ff2a:	4a2a      	ldr	r2, [pc, #168]	@ (800ffd4 <prvAddNewTaskToReadyList+0xc8>)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff30:	4b27      	ldr	r3, [pc, #156]	@ (800ffd0 <prvAddNewTaskToReadyList+0xc4>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d110      	bne.n	800ff5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ff38:	f000 fcd0 	bl	80108dc <prvInitialiseTaskLists>
 800ff3c:	e00d      	b.n	800ff5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ff3e:	4b26      	ldr	r3, [pc, #152]	@ (800ffd8 <prvAddNewTaskToReadyList+0xcc>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d109      	bne.n	800ff5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff46:	4b23      	ldr	r3, [pc, #140]	@ (800ffd4 <prvAddNewTaskToReadyList+0xc8>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d802      	bhi.n	800ff5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ff54:	4a1f      	ldr	r2, [pc, #124]	@ (800ffd4 <prvAddNewTaskToReadyList+0xc8>)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ff5a:	4b20      	ldr	r3, [pc, #128]	@ (800ffdc <prvAddNewTaskToReadyList+0xd0>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	4a1e      	ldr	r2, [pc, #120]	@ (800ffdc <prvAddNewTaskToReadyList+0xd0>)
 800ff62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff64:	4b1d      	ldr	r3, [pc, #116]	@ (800ffdc <prvAddNewTaskToReadyList+0xd0>)
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff70:	4b1b      	ldr	r3, [pc, #108]	@ (800ffe0 <prvAddNewTaskToReadyList+0xd4>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d903      	bls.n	800ff80 <prvAddNewTaskToReadyList+0x74>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7c:	4a18      	ldr	r2, [pc, #96]	@ (800ffe0 <prvAddNewTaskToReadyList+0xd4>)
 800ff7e:	6013      	str	r3, [r2, #0]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff84:	4613      	mov	r3, r2
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	4413      	add	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4a15      	ldr	r2, [pc, #84]	@ (800ffe4 <prvAddNewTaskToReadyList+0xd8>)
 800ff8e:	441a      	add	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	3304      	adds	r3, #4
 800ff94:	4619      	mov	r1, r3
 800ff96:	4610      	mov	r0, r2
 800ff98:	f7fe ff53 	bl	800ee42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ff9c:	f001 fc36 	bl	801180c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ffa0:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd8 <prvAddNewTaskToReadyList+0xcc>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00e      	beq.n	800ffc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd4 <prvAddNewTaskToReadyList+0xc8>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d207      	bcs.n	800ffc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ffb6:	4b0c      	ldr	r3, [pc, #48]	@ (800ffe8 <prvAddNewTaskToReadyList+0xdc>)
 800ffb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffc6:	bf00      	nop
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20002f9c 	.word	0x20002f9c
 800ffd4:	20002ac8 	.word	0x20002ac8
 800ffd8:	20002fa8 	.word	0x20002fa8
 800ffdc:	20002fb8 	.word	0x20002fb8
 800ffe0:	20002fa4 	.word	0x20002fa4
 800ffe4:	20002acc 	.word	0x20002acc
 800ffe8:	e000ed04 	.word	0xe000ed04

0800ffec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fff4:	2300      	movs	r3, #0
 800fff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d018      	beq.n	8010030 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fffe:	4b14      	ldr	r3, [pc, #80]	@ (8010050 <vTaskDelay+0x64>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00b      	beq.n	801001e <vTaskDelay+0x32>
	__asm volatile
 8010006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801000a:	f383 8811 	msr	BASEPRI, r3
 801000e:	f3bf 8f6f 	isb	sy
 8010012:	f3bf 8f4f 	dsb	sy
 8010016:	60bb      	str	r3, [r7, #8]
}
 8010018:	bf00      	nop
 801001a:	bf00      	nop
 801001c:	e7fd      	b.n	801001a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801001e:	f000 f88b 	bl	8010138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010022:	2100      	movs	r1, #0
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 fec3 	bl	8010db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801002a:	f000 f893 	bl	8010154 <xTaskResumeAll>
 801002e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d107      	bne.n	8010046 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010036:	4b07      	ldr	r3, [pc, #28]	@ (8010054 <vTaskDelay+0x68>)
 8010038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801003c:	601a      	str	r2, [r3, #0]
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010046:	bf00      	nop
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20002fc4 	.word	0x20002fc4
 8010054:	e000ed04 	.word	0xe000ed04

08010058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b08a      	sub	sp, #40	@ 0x28
 801005c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801005e:	2300      	movs	r3, #0
 8010060:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010066:	463a      	mov	r2, r7
 8010068:	1d39      	adds	r1, r7, #4
 801006a:	f107 0308 	add.w	r3, r7, #8
 801006e:	4618      	mov	r0, r3
 8010070:	f7fe fcca 	bl	800ea08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	9202      	str	r2, [sp, #8]
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	2300      	movs	r3, #0
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	2300      	movs	r3, #0
 8010084:	460a      	mov	r2, r1
 8010086:	4924      	ldr	r1, [pc, #144]	@ (8010118 <vTaskStartScheduler+0xc0>)
 8010088:	4824      	ldr	r0, [pc, #144]	@ (801011c <vTaskStartScheduler+0xc4>)
 801008a:	f7ff fdf1 	bl	800fc70 <xTaskCreateStatic>
 801008e:	4603      	mov	r3, r0
 8010090:	4a23      	ldr	r2, [pc, #140]	@ (8010120 <vTaskStartScheduler+0xc8>)
 8010092:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010094:	4b22      	ldr	r3, [pc, #136]	@ (8010120 <vTaskStartScheduler+0xc8>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801009c:	2301      	movs	r3, #1
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	e001      	b.n	80100a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80100a2:	2300      	movs	r3, #0
 80100a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d102      	bne.n	80100b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80100ac:	f000 fed4 	bl	8010e58 <xTimerCreateTimerTask>
 80100b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d11b      	bne.n	80100f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	613b      	str	r3, [r7, #16]
}
 80100ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80100cc:	4b15      	ldr	r3, [pc, #84]	@ (8010124 <vTaskStartScheduler+0xcc>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	3354      	adds	r3, #84	@ 0x54
 80100d2:	4a15      	ldr	r2, [pc, #84]	@ (8010128 <vTaskStartScheduler+0xd0>)
 80100d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80100d6:	4b15      	ldr	r3, [pc, #84]	@ (801012c <vTaskStartScheduler+0xd4>)
 80100d8:	f04f 32ff 	mov.w	r2, #4294967295
 80100dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80100de:	4b14      	ldr	r3, [pc, #80]	@ (8010130 <vTaskStartScheduler+0xd8>)
 80100e0:	2201      	movs	r2, #1
 80100e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80100e4:	4b13      	ldr	r3, [pc, #76]	@ (8010134 <vTaskStartScheduler+0xdc>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80100ea:	f001 fab9 	bl	8011660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80100ee:	e00f      	b.n	8010110 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f6:	d10b      	bne.n	8010110 <vTaskStartScheduler+0xb8>
	__asm volatile
 80100f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fc:	f383 8811 	msr	BASEPRI, r3
 8010100:	f3bf 8f6f 	isb	sy
 8010104:	f3bf 8f4f 	dsb	sy
 8010108:	60fb      	str	r3, [r7, #12]
}
 801010a:	bf00      	nop
 801010c:	bf00      	nop
 801010e:	e7fd      	b.n	801010c <vTaskStartScheduler+0xb4>
}
 8010110:	bf00      	nop
 8010112:	3718      	adds	r7, #24
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	080156c0 	.word	0x080156c0
 801011c:	080108ad 	.word	0x080108ad
 8010120:	20002fc0 	.word	0x20002fc0
 8010124:	20002ac8 	.word	0x20002ac8
 8010128:	200002b4 	.word	0x200002b4
 801012c:	20002fbc 	.word	0x20002fbc
 8010130:	20002fa8 	.word	0x20002fa8
 8010134:	20002fa0 	.word	0x20002fa0

08010138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010138:	b480      	push	{r7}
 801013a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801013c:	4b04      	ldr	r3, [pc, #16]	@ (8010150 <vTaskSuspendAll+0x18>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	3301      	adds	r3, #1
 8010142:	4a03      	ldr	r2, [pc, #12]	@ (8010150 <vTaskSuspendAll+0x18>)
 8010144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010146:	bf00      	nop
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	20002fc4 	.word	0x20002fc4

08010154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801015a:	2300      	movs	r3, #0
 801015c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801015e:	2300      	movs	r3, #0
 8010160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010162:	4b42      	ldr	r3, [pc, #264]	@ (801026c <xTaskResumeAll+0x118>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d10b      	bne.n	8010182 <xTaskResumeAll+0x2e>
	__asm volatile
 801016a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801016e:	f383 8811 	msr	BASEPRI, r3
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	f3bf 8f4f 	dsb	sy
 801017a:	603b      	str	r3, [r7, #0]
}
 801017c:	bf00      	nop
 801017e:	bf00      	nop
 8010180:	e7fd      	b.n	801017e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010182:	f001 fb11 	bl	80117a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010186:	4b39      	ldr	r3, [pc, #228]	@ (801026c <xTaskResumeAll+0x118>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3b01      	subs	r3, #1
 801018c:	4a37      	ldr	r2, [pc, #220]	@ (801026c <xTaskResumeAll+0x118>)
 801018e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010190:	4b36      	ldr	r3, [pc, #216]	@ (801026c <xTaskResumeAll+0x118>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d162      	bne.n	801025e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010198:	4b35      	ldr	r3, [pc, #212]	@ (8010270 <xTaskResumeAll+0x11c>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d05e      	beq.n	801025e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101a0:	e02f      	b.n	8010202 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101a2:	4b34      	ldr	r3, [pc, #208]	@ (8010274 <xTaskResumeAll+0x120>)
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	3318      	adds	r3, #24
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fea4 	bl	800eefc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3304      	adds	r3, #4
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fe fe9f 	bl	800eefc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101c2:	4b2d      	ldr	r3, [pc, #180]	@ (8010278 <xTaskResumeAll+0x124>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d903      	bls.n	80101d2 <xTaskResumeAll+0x7e>
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ce:	4a2a      	ldr	r2, [pc, #168]	@ (8010278 <xTaskResumeAll+0x124>)
 80101d0:	6013      	str	r3, [r2, #0]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101d6:	4613      	mov	r3, r2
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	4413      	add	r3, r2
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	4a27      	ldr	r2, [pc, #156]	@ (801027c <xTaskResumeAll+0x128>)
 80101e0:	441a      	add	r2, r3
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	3304      	adds	r3, #4
 80101e6:	4619      	mov	r1, r3
 80101e8:	4610      	mov	r0, r2
 80101ea:	f7fe fe2a 	bl	800ee42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f2:	4b23      	ldr	r3, [pc, #140]	@ (8010280 <xTaskResumeAll+0x12c>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d302      	bcc.n	8010202 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80101fc:	4b21      	ldr	r3, [pc, #132]	@ (8010284 <xTaskResumeAll+0x130>)
 80101fe:	2201      	movs	r2, #1
 8010200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010202:	4b1c      	ldr	r3, [pc, #112]	@ (8010274 <xTaskResumeAll+0x120>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1cb      	bne.n	80101a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010210:	f000 fc08 	bl	8010a24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010214:	4b1c      	ldr	r3, [pc, #112]	@ (8010288 <xTaskResumeAll+0x134>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d010      	beq.n	8010242 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010220:	f000 f846 	bl	80102b0 <xTaskIncrementTick>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d002      	beq.n	8010230 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801022a:	4b16      	ldr	r3, [pc, #88]	@ (8010284 <xTaskResumeAll+0x130>)
 801022c:	2201      	movs	r2, #1
 801022e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	3b01      	subs	r3, #1
 8010234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1f1      	bne.n	8010220 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801023c:	4b12      	ldr	r3, [pc, #72]	@ (8010288 <xTaskResumeAll+0x134>)
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010242:	4b10      	ldr	r3, [pc, #64]	@ (8010284 <xTaskResumeAll+0x130>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d009      	beq.n	801025e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801024a:	2301      	movs	r3, #1
 801024c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801024e:	4b0f      	ldr	r3, [pc, #60]	@ (801028c <xTaskResumeAll+0x138>)
 8010250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010254:	601a      	str	r2, [r3, #0]
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801025e:	f001 fad5 	bl	801180c <vPortExitCritical>

	return xAlreadyYielded;
 8010262:	68bb      	ldr	r3, [r7, #8]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	20002fc4 	.word	0x20002fc4
 8010270:	20002f9c 	.word	0x20002f9c
 8010274:	20002f5c 	.word	0x20002f5c
 8010278:	20002fa4 	.word	0x20002fa4
 801027c:	20002acc 	.word	0x20002acc
 8010280:	20002ac8 	.word	0x20002ac8
 8010284:	20002fb0 	.word	0x20002fb0
 8010288:	20002fac 	.word	0x20002fac
 801028c:	e000ed04 	.word	0xe000ed04

08010290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010296:	4b05      	ldr	r3, [pc, #20]	@ (80102ac <xTaskGetTickCount+0x1c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801029c:	687b      	ldr	r3, [r7, #4]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	370c      	adds	r7, #12
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	20002fa0 	.word	0x20002fa0

080102b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80102b6:	2300      	movs	r3, #0
 80102b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102ba:	4b4f      	ldr	r3, [pc, #316]	@ (80103f8 <xTaskIncrementTick+0x148>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f040 8090 	bne.w	80103e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102c4:	4b4d      	ldr	r3, [pc, #308]	@ (80103fc <xTaskIncrementTick+0x14c>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3301      	adds	r3, #1
 80102ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102cc:	4a4b      	ldr	r2, [pc, #300]	@ (80103fc <xTaskIncrementTick+0x14c>)
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d121      	bne.n	801031c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80102d8:	4b49      	ldr	r3, [pc, #292]	@ (8010400 <xTaskIncrementTick+0x150>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00b      	beq.n	80102fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	603b      	str	r3, [r7, #0]
}
 80102f4:	bf00      	nop
 80102f6:	bf00      	nop
 80102f8:	e7fd      	b.n	80102f6 <xTaskIncrementTick+0x46>
 80102fa:	4b41      	ldr	r3, [pc, #260]	@ (8010400 <xTaskIncrementTick+0x150>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	4b40      	ldr	r3, [pc, #256]	@ (8010404 <xTaskIncrementTick+0x154>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a3e      	ldr	r2, [pc, #248]	@ (8010400 <xTaskIncrementTick+0x150>)
 8010306:	6013      	str	r3, [r2, #0]
 8010308:	4a3e      	ldr	r2, [pc, #248]	@ (8010404 <xTaskIncrementTick+0x154>)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	6013      	str	r3, [r2, #0]
 801030e:	4b3e      	ldr	r3, [pc, #248]	@ (8010408 <xTaskIncrementTick+0x158>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	3301      	adds	r3, #1
 8010314:	4a3c      	ldr	r2, [pc, #240]	@ (8010408 <xTaskIncrementTick+0x158>)
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	f000 fb84 	bl	8010a24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801031c:	4b3b      	ldr	r3, [pc, #236]	@ (801040c <xTaskIncrementTick+0x15c>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	429a      	cmp	r2, r3
 8010324:	d349      	bcc.n	80103ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010326:	4b36      	ldr	r3, [pc, #216]	@ (8010400 <xTaskIncrementTick+0x150>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d104      	bne.n	801033a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010330:	4b36      	ldr	r3, [pc, #216]	@ (801040c <xTaskIncrementTick+0x15c>)
 8010332:	f04f 32ff 	mov.w	r2, #4294967295
 8010336:	601a      	str	r2, [r3, #0]
					break;
 8010338:	e03f      	b.n	80103ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801033a:	4b31      	ldr	r3, [pc, #196]	@ (8010400 <xTaskIncrementTick+0x150>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	429a      	cmp	r2, r3
 8010350:	d203      	bcs.n	801035a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010352:	4a2e      	ldr	r2, [pc, #184]	@ (801040c <xTaskIncrementTick+0x15c>)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010358:	e02f      	b.n	80103ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	3304      	adds	r3, #4
 801035e:	4618      	mov	r0, r3
 8010360:	f7fe fdcc 	bl	800eefc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010368:	2b00      	cmp	r3, #0
 801036a:	d004      	beq.n	8010376 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	3318      	adds	r3, #24
 8010370:	4618      	mov	r0, r3
 8010372:	f7fe fdc3 	bl	800eefc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801037a:	4b25      	ldr	r3, [pc, #148]	@ (8010410 <xTaskIncrementTick+0x160>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	429a      	cmp	r2, r3
 8010380:	d903      	bls.n	801038a <xTaskIncrementTick+0xda>
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010386:	4a22      	ldr	r2, [pc, #136]	@ (8010410 <xTaskIncrementTick+0x160>)
 8010388:	6013      	str	r3, [r2, #0]
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801038e:	4613      	mov	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	4413      	add	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	4a1f      	ldr	r2, [pc, #124]	@ (8010414 <xTaskIncrementTick+0x164>)
 8010398:	441a      	add	r2, r3
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	3304      	adds	r3, #4
 801039e:	4619      	mov	r1, r3
 80103a0:	4610      	mov	r0, r2
 80103a2:	f7fe fd4e 	bl	800ee42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103aa:	4b1b      	ldr	r3, [pc, #108]	@ (8010418 <xTaskIncrementTick+0x168>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d3b8      	bcc.n	8010326 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80103b4:	2301      	movs	r3, #1
 80103b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103b8:	e7b5      	b.n	8010326 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103ba:	4b17      	ldr	r3, [pc, #92]	@ (8010418 <xTaskIncrementTick+0x168>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103c0:	4914      	ldr	r1, [pc, #80]	@ (8010414 <xTaskIncrementTick+0x164>)
 80103c2:	4613      	mov	r3, r2
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	4413      	add	r3, r2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	440b      	add	r3, r1
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d901      	bls.n	80103d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80103d2:	2301      	movs	r3, #1
 80103d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80103d6:	4b11      	ldr	r3, [pc, #68]	@ (801041c <xTaskIncrementTick+0x16c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d007      	beq.n	80103ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80103de:	2301      	movs	r3, #1
 80103e0:	617b      	str	r3, [r7, #20]
 80103e2:	e004      	b.n	80103ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80103e4:	4b0e      	ldr	r3, [pc, #56]	@ (8010420 <xTaskIncrementTick+0x170>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3301      	adds	r3, #1
 80103ea:	4a0d      	ldr	r2, [pc, #52]	@ (8010420 <xTaskIncrementTick+0x170>)
 80103ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80103ee:	697b      	ldr	r3, [r7, #20]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	20002fc4 	.word	0x20002fc4
 80103fc:	20002fa0 	.word	0x20002fa0
 8010400:	20002f54 	.word	0x20002f54
 8010404:	20002f58 	.word	0x20002f58
 8010408:	20002fb4 	.word	0x20002fb4
 801040c:	20002fbc 	.word	0x20002fbc
 8010410:	20002fa4 	.word	0x20002fa4
 8010414:	20002acc 	.word	0x20002acc
 8010418:	20002ac8 	.word	0x20002ac8
 801041c:	20002fb0 	.word	0x20002fb0
 8010420:	20002fac 	.word	0x20002fac

08010424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801042a:	4b2b      	ldr	r3, [pc, #172]	@ (80104d8 <vTaskSwitchContext+0xb4>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d003      	beq.n	801043a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010432:	4b2a      	ldr	r3, [pc, #168]	@ (80104dc <vTaskSwitchContext+0xb8>)
 8010434:	2201      	movs	r2, #1
 8010436:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010438:	e047      	b.n	80104ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801043a:	4b28      	ldr	r3, [pc, #160]	@ (80104dc <vTaskSwitchContext+0xb8>)
 801043c:	2200      	movs	r2, #0
 801043e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010440:	4b27      	ldr	r3, [pc, #156]	@ (80104e0 <vTaskSwitchContext+0xbc>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	e011      	b.n	801046c <vTaskSwitchContext+0x48>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d10b      	bne.n	8010466 <vTaskSwitchContext+0x42>
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	607b      	str	r3, [r7, #4]
}
 8010460:	bf00      	nop
 8010462:	bf00      	nop
 8010464:	e7fd      	b.n	8010462 <vTaskSwitchContext+0x3e>
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	3b01      	subs	r3, #1
 801046a:	60fb      	str	r3, [r7, #12]
 801046c:	491d      	ldr	r1, [pc, #116]	@ (80104e4 <vTaskSwitchContext+0xc0>)
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	4613      	mov	r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	4413      	add	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	440b      	add	r3, r1
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d0e3      	beq.n	8010448 <vTaskSwitchContext+0x24>
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	4613      	mov	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4413      	add	r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4a16      	ldr	r2, [pc, #88]	@ (80104e4 <vTaskSwitchContext+0xc0>)
 801048c:	4413      	add	r3, r2
 801048e:	60bb      	str	r3, [r7, #8]
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	685a      	ldr	r2, [r3, #4]
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	605a      	str	r2, [r3, #4]
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	685a      	ldr	r2, [r3, #4]
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	3308      	adds	r3, #8
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d104      	bne.n	80104b0 <vTaskSwitchContext+0x8c>
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	605a      	str	r2, [r3, #4]
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	4a0c      	ldr	r2, [pc, #48]	@ (80104e8 <vTaskSwitchContext+0xc4>)
 80104b8:	6013      	str	r3, [r2, #0]
 80104ba:	4a09      	ldr	r2, [pc, #36]	@ (80104e0 <vTaskSwitchContext+0xbc>)
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104c0:	4b09      	ldr	r3, [pc, #36]	@ (80104e8 <vTaskSwitchContext+0xc4>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	3354      	adds	r3, #84	@ 0x54
 80104c6:	4a09      	ldr	r2, [pc, #36]	@ (80104ec <vTaskSwitchContext+0xc8>)
 80104c8:	6013      	str	r3, [r2, #0]
}
 80104ca:	bf00      	nop
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	20002fc4 	.word	0x20002fc4
 80104dc:	20002fb0 	.word	0x20002fb0
 80104e0:	20002fa4 	.word	0x20002fa4
 80104e4:	20002acc 	.word	0x20002acc
 80104e8:	20002ac8 	.word	0x20002ac8
 80104ec:	200002b4 	.word	0x200002b4

080104f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d10b      	bne.n	8010518 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	60fb      	str	r3, [r7, #12]
}
 8010512:	bf00      	nop
 8010514:	bf00      	nop
 8010516:	e7fd      	b.n	8010514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010518:	4b07      	ldr	r3, [pc, #28]	@ (8010538 <vTaskPlaceOnEventList+0x48>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3318      	adds	r3, #24
 801051e:	4619      	mov	r1, r3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7fe fcb2 	bl	800ee8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010526:	2101      	movs	r1, #1
 8010528:	6838      	ldr	r0, [r7, #0]
 801052a:	f000 fc41 	bl	8010db0 <prvAddCurrentTaskToDelayedList>
}
 801052e:	bf00      	nop
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	20002ac8 	.word	0x20002ac8

0801053c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d10b      	bne.n	8010566 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 801054e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010552:	f383 8811 	msr	BASEPRI, r3
 8010556:	f3bf 8f6f 	isb	sy
 801055a:	f3bf 8f4f 	dsb	sy
 801055e:	617b      	str	r3, [r7, #20]
}
 8010560:	bf00      	nop
 8010562:	bf00      	nop
 8010564:	e7fd      	b.n	8010562 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010566:	4b12      	ldr	r3, [pc, #72]	@ (80105b0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d10b      	bne.n	8010586 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 801056e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	613b      	str	r3, [r7, #16]
}
 8010580:	bf00      	nop
 8010582:	bf00      	nop
 8010584:	e7fd      	b.n	8010582 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010586:	4b0b      	ldr	r3, [pc, #44]	@ (80105b4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8010590:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010592:	4b08      	ldr	r3, [pc, #32]	@ (80105b4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3318      	adds	r3, #24
 8010598:	4619      	mov	r1, r3
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f7fe fc51 	bl	800ee42 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105a0:	2101      	movs	r1, #1
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fc04 	bl	8010db0 <prvAddCurrentTaskToDelayedList>
}
 80105a8:	bf00      	nop
 80105aa:	3718      	adds	r7, #24
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	20002fc4 	.word	0x20002fc4
 80105b4:	20002ac8 	.word	0x20002ac8

080105b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b086      	sub	sp, #24
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d10b      	bne.n	80105e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80105ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ce:	f383 8811 	msr	BASEPRI, r3
 80105d2:	f3bf 8f6f 	isb	sy
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	617b      	str	r3, [r7, #20]
}
 80105dc:	bf00      	nop
 80105de:	bf00      	nop
 80105e0:	e7fd      	b.n	80105de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105e2:	4b0a      	ldr	r3, [pc, #40]	@ (801060c <vTaskPlaceOnEventListRestricted+0x54>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	3318      	adds	r3, #24
 80105e8:	4619      	mov	r1, r3
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7fe fc29 	bl	800ee42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d002      	beq.n	80105fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80105f6:	f04f 33ff 	mov.w	r3, #4294967295
 80105fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80105fc:	6879      	ldr	r1, [r7, #4]
 80105fe:	68b8      	ldr	r0, [r7, #8]
 8010600:	f000 fbd6 	bl	8010db0 <prvAddCurrentTaskToDelayedList>
	}
 8010604:	bf00      	nop
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	20002ac8 	.word	0x20002ac8

08010610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d10b      	bne.n	801063e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801062a:	f383 8811 	msr	BASEPRI, r3
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	f3bf 8f4f 	dsb	sy
 8010636:	60fb      	str	r3, [r7, #12]
}
 8010638:	bf00      	nop
 801063a:	bf00      	nop
 801063c:	e7fd      	b.n	801063a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	3318      	adds	r3, #24
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe fc5a 	bl	800eefc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010648:	4b1d      	ldr	r3, [pc, #116]	@ (80106c0 <xTaskRemoveFromEventList+0xb0>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d11d      	bne.n	801068c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	3304      	adds	r3, #4
 8010654:	4618      	mov	r0, r3
 8010656:	f7fe fc51 	bl	800eefc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801065e:	4b19      	ldr	r3, [pc, #100]	@ (80106c4 <xTaskRemoveFromEventList+0xb4>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d903      	bls.n	801066e <xTaskRemoveFromEventList+0x5e>
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801066a:	4a16      	ldr	r2, [pc, #88]	@ (80106c4 <xTaskRemoveFromEventList+0xb4>)
 801066c:	6013      	str	r3, [r2, #0]
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010672:	4613      	mov	r3, r2
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	4413      	add	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4a13      	ldr	r2, [pc, #76]	@ (80106c8 <xTaskRemoveFromEventList+0xb8>)
 801067c:	441a      	add	r2, r3
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	3304      	adds	r3, #4
 8010682:	4619      	mov	r1, r3
 8010684:	4610      	mov	r0, r2
 8010686:	f7fe fbdc 	bl	800ee42 <vListInsertEnd>
 801068a:	e005      	b.n	8010698 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	3318      	adds	r3, #24
 8010690:	4619      	mov	r1, r3
 8010692:	480e      	ldr	r0, [pc, #56]	@ (80106cc <xTaskRemoveFromEventList+0xbc>)
 8010694:	f7fe fbd5 	bl	800ee42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069c:	4b0c      	ldr	r3, [pc, #48]	@ (80106d0 <xTaskRemoveFromEventList+0xc0>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d905      	bls.n	80106b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80106a6:	2301      	movs	r3, #1
 80106a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80106aa:	4b0a      	ldr	r3, [pc, #40]	@ (80106d4 <xTaskRemoveFromEventList+0xc4>)
 80106ac:	2201      	movs	r2, #1
 80106ae:	601a      	str	r2, [r3, #0]
 80106b0:	e001      	b.n	80106b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80106b2:	2300      	movs	r3, #0
 80106b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80106b6:	697b      	ldr	r3, [r7, #20]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20002fc4 	.word	0x20002fc4
 80106c4:	20002fa4 	.word	0x20002fa4
 80106c8:	20002acc 	.word	0x20002acc
 80106cc:	20002f5c 	.word	0x20002f5c
 80106d0:	20002ac8 	.word	0x20002ac8
 80106d4:	20002fb0 	.word	0x20002fb0

080106d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80106e2:	4b2a      	ldr	r3, [pc, #168]	@ (801078c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10b      	bne.n	8010702 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80106ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	613b      	str	r3, [r7, #16]
}
 80106fc:	bf00      	nop
 80106fe:	bf00      	nop
 8010700:	e7fd      	b.n	80106fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d10b      	bne.n	8010730 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	60fb      	str	r3, [r7, #12]
}
 801072a:	bf00      	nop
 801072c:	bf00      	nop
 801072e:	e7fd      	b.n	801072c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7fe fbe3 	bl	800eefc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	3304      	adds	r3, #4
 801073a:	4618      	mov	r0, r3
 801073c:	f7fe fbde 	bl	800eefc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010744:	4b12      	ldr	r3, [pc, #72]	@ (8010790 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	429a      	cmp	r2, r3
 801074a:	d903      	bls.n	8010754 <vTaskRemoveFromUnorderedEventList+0x7c>
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010750:	4a0f      	ldr	r2, [pc, #60]	@ (8010790 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8010752:	6013      	str	r3, [r2, #0]
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010758:	4613      	mov	r3, r2
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	009b      	lsls	r3, r3, #2
 8010760:	4a0c      	ldr	r2, [pc, #48]	@ (8010794 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8010762:	441a      	add	r2, r3
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	3304      	adds	r3, #4
 8010768:	4619      	mov	r1, r3
 801076a:	4610      	mov	r0, r2
 801076c:	f7fe fb69 	bl	800ee42 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010774:	4b08      	ldr	r3, [pc, #32]	@ (8010798 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801077a:	429a      	cmp	r2, r3
 801077c:	d902      	bls.n	8010784 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801077e:	4b07      	ldr	r3, [pc, #28]	@ (801079c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8010780:	2201      	movs	r2, #1
 8010782:	601a      	str	r2, [r3, #0]
	}
}
 8010784:	bf00      	nop
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	20002fc4 	.word	0x20002fc4
 8010790:	20002fa4 	.word	0x20002fa4
 8010794:	20002acc 	.word	0x20002acc
 8010798:	20002ac8 	.word	0x20002ac8
 801079c:	20002fb0 	.word	0x20002fb0

080107a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80107a8:	4b06      	ldr	r3, [pc, #24]	@ (80107c4 <vTaskInternalSetTimeOutState+0x24>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80107b0:	4b05      	ldr	r3, [pc, #20]	@ (80107c8 <vTaskInternalSetTimeOutState+0x28>)
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	605a      	str	r2, [r3, #4]
}
 80107b8:	bf00      	nop
 80107ba:	370c      	adds	r7, #12
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr
 80107c4:	20002fb4 	.word	0x20002fb4
 80107c8:	20002fa0 	.word	0x20002fa0

080107cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b088      	sub	sp, #32
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10b      	bne.n	80107f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	613b      	str	r3, [r7, #16]
}
 80107ee:	bf00      	nop
 80107f0:	bf00      	nop
 80107f2:	e7fd      	b.n	80107f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d10b      	bne.n	8010812 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80107fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	60fb      	str	r3, [r7, #12]
}
 801080c:	bf00      	nop
 801080e:	bf00      	nop
 8010810:	e7fd      	b.n	801080e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010812:	f000 ffc9 	bl	80117a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010816:	4b1d      	ldr	r3, [pc, #116]	@ (801088c <xTaskCheckForTimeOut+0xc0>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	69ba      	ldr	r2, [r7, #24]
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082e:	d102      	bne.n	8010836 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010830:	2300      	movs	r3, #0
 8010832:	61fb      	str	r3, [r7, #28]
 8010834:	e023      	b.n	801087e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	4b15      	ldr	r3, [pc, #84]	@ (8010890 <xTaskCheckForTimeOut+0xc4>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	429a      	cmp	r2, r3
 8010840:	d007      	beq.n	8010852 <xTaskCheckForTimeOut+0x86>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	69ba      	ldr	r2, [r7, #24]
 8010848:	429a      	cmp	r2, r3
 801084a:	d302      	bcc.n	8010852 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801084c:	2301      	movs	r3, #1
 801084e:	61fb      	str	r3, [r7, #28]
 8010850:	e015      	b.n	801087e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	697a      	ldr	r2, [r7, #20]
 8010858:	429a      	cmp	r2, r3
 801085a:	d20b      	bcs.n	8010874 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	1ad2      	subs	r2, r2, r3
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff ff99 	bl	80107a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801086e:	2300      	movs	r3, #0
 8010870:	61fb      	str	r3, [r7, #28]
 8010872:	e004      	b.n	801087e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	2200      	movs	r2, #0
 8010878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801087a:	2301      	movs	r3, #1
 801087c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801087e:	f000 ffc5 	bl	801180c <vPortExitCritical>

	return xReturn;
 8010882:	69fb      	ldr	r3, [r7, #28]
}
 8010884:	4618      	mov	r0, r3
 8010886:	3720      	adds	r7, #32
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	20002fa0 	.word	0x20002fa0
 8010890:	20002fb4 	.word	0x20002fb4

08010894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010894:	b480      	push	{r7}
 8010896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010898:	4b03      	ldr	r3, [pc, #12]	@ (80108a8 <vTaskMissedYield+0x14>)
 801089a:	2201      	movs	r2, #1
 801089c:	601a      	str	r2, [r3, #0]
}
 801089e:	bf00      	nop
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	20002fb0 	.word	0x20002fb0

080108ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80108b4:	f000 f852 	bl	801095c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80108b8:	4b06      	ldr	r3, [pc, #24]	@ (80108d4 <prvIdleTask+0x28>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d9f9      	bls.n	80108b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80108c0:	4b05      	ldr	r3, [pc, #20]	@ (80108d8 <prvIdleTask+0x2c>)
 80108c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108c6:	601a      	str	r2, [r3, #0]
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80108d0:	e7f0      	b.n	80108b4 <prvIdleTask+0x8>
 80108d2:	bf00      	nop
 80108d4:	20002acc 	.word	0x20002acc
 80108d8:	e000ed04 	.word	0xe000ed04

080108dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80108e2:	2300      	movs	r3, #0
 80108e4:	607b      	str	r3, [r7, #4]
 80108e6:	e00c      	b.n	8010902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	4613      	mov	r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4413      	add	r3, r2
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	4a12      	ldr	r2, [pc, #72]	@ (801093c <prvInitialiseTaskLists+0x60>)
 80108f4:	4413      	add	r3, r2
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe fa76 	bl	800ede8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	3301      	adds	r3, #1
 8010900:	607b      	str	r3, [r7, #4]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b37      	cmp	r3, #55	@ 0x37
 8010906:	d9ef      	bls.n	80108e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010908:	480d      	ldr	r0, [pc, #52]	@ (8010940 <prvInitialiseTaskLists+0x64>)
 801090a:	f7fe fa6d 	bl	800ede8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801090e:	480d      	ldr	r0, [pc, #52]	@ (8010944 <prvInitialiseTaskLists+0x68>)
 8010910:	f7fe fa6a 	bl	800ede8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010914:	480c      	ldr	r0, [pc, #48]	@ (8010948 <prvInitialiseTaskLists+0x6c>)
 8010916:	f7fe fa67 	bl	800ede8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801091a:	480c      	ldr	r0, [pc, #48]	@ (801094c <prvInitialiseTaskLists+0x70>)
 801091c:	f7fe fa64 	bl	800ede8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010920:	480b      	ldr	r0, [pc, #44]	@ (8010950 <prvInitialiseTaskLists+0x74>)
 8010922:	f7fe fa61 	bl	800ede8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010926:	4b0b      	ldr	r3, [pc, #44]	@ (8010954 <prvInitialiseTaskLists+0x78>)
 8010928:	4a05      	ldr	r2, [pc, #20]	@ (8010940 <prvInitialiseTaskLists+0x64>)
 801092a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801092c:	4b0a      	ldr	r3, [pc, #40]	@ (8010958 <prvInitialiseTaskLists+0x7c>)
 801092e:	4a05      	ldr	r2, [pc, #20]	@ (8010944 <prvInitialiseTaskLists+0x68>)
 8010930:	601a      	str	r2, [r3, #0]
}
 8010932:	bf00      	nop
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	20002acc 	.word	0x20002acc
 8010940:	20002f2c 	.word	0x20002f2c
 8010944:	20002f40 	.word	0x20002f40
 8010948:	20002f5c 	.word	0x20002f5c
 801094c:	20002f70 	.word	0x20002f70
 8010950:	20002f88 	.word	0x20002f88
 8010954:	20002f54 	.word	0x20002f54
 8010958:	20002f58 	.word	0x20002f58

0801095c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010962:	e019      	b.n	8010998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010964:	f000 ff20 	bl	80117a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010968:	4b10      	ldr	r3, [pc, #64]	@ (80109ac <prvCheckTasksWaitingTermination+0x50>)
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	68db      	ldr	r3, [r3, #12]
 801096e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	3304      	adds	r3, #4
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe fac1 	bl	800eefc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801097a:	4b0d      	ldr	r3, [pc, #52]	@ (80109b0 <prvCheckTasksWaitingTermination+0x54>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3b01      	subs	r3, #1
 8010980:	4a0b      	ldr	r2, [pc, #44]	@ (80109b0 <prvCheckTasksWaitingTermination+0x54>)
 8010982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010984:	4b0b      	ldr	r3, [pc, #44]	@ (80109b4 <prvCheckTasksWaitingTermination+0x58>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	3b01      	subs	r3, #1
 801098a:	4a0a      	ldr	r2, [pc, #40]	@ (80109b4 <prvCheckTasksWaitingTermination+0x58>)
 801098c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801098e:	f000 ff3d 	bl	801180c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f810 	bl	80109b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010998:	4b06      	ldr	r3, [pc, #24]	@ (80109b4 <prvCheckTasksWaitingTermination+0x58>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d1e1      	bne.n	8010964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80109a0:	bf00      	nop
 80109a2:	bf00      	nop
 80109a4:	3708      	adds	r7, #8
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20002f70 	.word	0x20002f70
 80109b0:	20002f9c 	.word	0x20002f9c
 80109b4:	20002f84 	.word	0x20002f84

080109b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	3354      	adds	r3, #84	@ 0x54
 80109c4:	4618      	mov	r0, r3
 80109c6:	f002 f91b 	bl	8012c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d108      	bne.n	80109e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109d8:	4618      	mov	r0, r3
 80109da:	f001 f8d5 	bl	8011b88 <vPortFree>
				vPortFree( pxTCB );
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f001 f8d2 	bl	8011b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80109e4:	e019      	b.n	8010a1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d103      	bne.n	80109f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f001 f8c9 	bl	8011b88 <vPortFree>
	}
 80109f6:	e010      	b.n	8010a1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d00b      	beq.n	8010a1a <prvDeleteTCB+0x62>
	__asm volatile
 8010a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a06:	f383 8811 	msr	BASEPRI, r3
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	60fb      	str	r3, [r7, #12]
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop
 8010a18:	e7fd      	b.n	8010a16 <prvDeleteTCB+0x5e>
	}
 8010a1a:	bf00      	nop
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
	...

08010a24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010a5c <prvResetNextTaskUnblockTime+0x38>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d104      	bne.n	8010a3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a34:	4b0a      	ldr	r3, [pc, #40]	@ (8010a60 <prvResetNextTaskUnblockTime+0x3c>)
 8010a36:	f04f 32ff 	mov.w	r2, #4294967295
 8010a3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010a3c:	e008      	b.n	8010a50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a3e:	4b07      	ldr	r3, [pc, #28]	@ (8010a5c <prvResetNextTaskUnblockTime+0x38>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	4a04      	ldr	r2, [pc, #16]	@ (8010a60 <prvResetNextTaskUnblockTime+0x3c>)
 8010a4e:	6013      	str	r3, [r2, #0]
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr
 8010a5c:	20002f54 	.word	0x20002f54
 8010a60:	20002fbc 	.word	0x20002fbc

08010a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a98 <xTaskGetSchedulerState+0x34>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d102      	bne.n	8010a78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010a72:	2301      	movs	r3, #1
 8010a74:	607b      	str	r3, [r7, #4]
 8010a76:	e008      	b.n	8010a8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a78:	4b08      	ldr	r3, [pc, #32]	@ (8010a9c <xTaskGetSchedulerState+0x38>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d102      	bne.n	8010a86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010a80:	2302      	movs	r3, #2
 8010a82:	607b      	str	r3, [r7, #4]
 8010a84:	e001      	b.n	8010a8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010a86:	2300      	movs	r3, #0
 8010a88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010a8a:	687b      	ldr	r3, [r7, #4]
	}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr
 8010a98:	20002fa8 	.word	0x20002fa8
 8010a9c:	20002fc4 	.word	0x20002fc4

08010aa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010aac:	2300      	movs	r3, #0
 8010aae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d051      	beq.n	8010b5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aba:	4b2a      	ldr	r3, [pc, #168]	@ (8010b64 <xTaskPriorityInherit+0xc4>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d241      	bcs.n	8010b48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	699b      	ldr	r3, [r3, #24]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	db06      	blt.n	8010ada <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010acc:	4b25      	ldr	r3, [pc, #148]	@ (8010b64 <xTaskPriorityInherit+0xc4>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	6959      	ldr	r1, [r3, #20]
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4a1f      	ldr	r2, [pc, #124]	@ (8010b68 <xTaskPriorityInherit+0xc8>)
 8010aec:	4413      	add	r3, r2
 8010aee:	4299      	cmp	r1, r3
 8010af0:	d122      	bne.n	8010b38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	3304      	adds	r3, #4
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe fa00 	bl	800eefc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010afc:	4b19      	ldr	r3, [pc, #100]	@ (8010b64 <xTaskPriorityInherit+0xc4>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b0a:	4b18      	ldr	r3, [pc, #96]	@ (8010b6c <xTaskPriorityInherit+0xcc>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d903      	bls.n	8010b1a <xTaskPriorityInherit+0x7a>
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b16:	4a15      	ldr	r2, [pc, #84]	@ (8010b6c <xTaskPriorityInherit+0xcc>)
 8010b18:	6013      	str	r3, [r2, #0]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b1e:	4613      	mov	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4413      	add	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	4a10      	ldr	r2, [pc, #64]	@ (8010b68 <xTaskPriorityInherit+0xc8>)
 8010b28:	441a      	add	r2, r3
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	3304      	adds	r3, #4
 8010b2e:	4619      	mov	r1, r3
 8010b30:	4610      	mov	r0, r2
 8010b32:	f7fe f986 	bl	800ee42 <vListInsertEnd>
 8010b36:	e004      	b.n	8010b42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010b38:	4b0a      	ldr	r3, [pc, #40]	@ (8010b64 <xTaskPriorityInherit+0xc4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010b42:	2301      	movs	r3, #1
 8010b44:	60fb      	str	r3, [r7, #12]
 8010b46:	e008      	b.n	8010b5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b4c:	4b05      	ldr	r3, [pc, #20]	@ (8010b64 <xTaskPriorityInherit+0xc4>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d201      	bcs.n	8010b5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010b56:	2301      	movs	r3, #1
 8010b58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
	}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	20002ac8 	.word	0x20002ac8
 8010b68:	20002acc 	.word	0x20002acc
 8010b6c:	20002fa4 	.word	0x20002fa4

08010b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d058      	beq.n	8010c38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010b86:	4b2f      	ldr	r3, [pc, #188]	@ (8010c44 <xTaskPriorityDisinherit+0xd4>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	693a      	ldr	r2, [r7, #16]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d00b      	beq.n	8010ba8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b94:	f383 8811 	msr	BASEPRI, r3
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	60fb      	str	r3, [r7, #12]
}
 8010ba2:	bf00      	nop
 8010ba4:	bf00      	nop
 8010ba6:	e7fd      	b.n	8010ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d10b      	bne.n	8010bc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bb4:	f383 8811 	msr	BASEPRI, r3
 8010bb8:	f3bf 8f6f 	isb	sy
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	60bb      	str	r3, [r7, #8]
}
 8010bc2:	bf00      	nop
 8010bc4:	bf00      	nop
 8010bc6:	e7fd      	b.n	8010bc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bcc:	1e5a      	subs	r2, r3, #1
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d02c      	beq.n	8010c38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d128      	bne.n	8010c38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	3304      	adds	r3, #4
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fe f986 	bl	800eefc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c08:	4b0f      	ldr	r3, [pc, #60]	@ (8010c48 <xTaskPriorityDisinherit+0xd8>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d903      	bls.n	8010c18 <xTaskPriorityDisinherit+0xa8>
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c14:	4a0c      	ldr	r2, [pc, #48]	@ (8010c48 <xTaskPriorityDisinherit+0xd8>)
 8010c16:	6013      	str	r3, [r2, #0]
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4a09      	ldr	r2, [pc, #36]	@ (8010c4c <xTaskPriorityDisinherit+0xdc>)
 8010c26:	441a      	add	r2, r3
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	4610      	mov	r0, r2
 8010c30:	f7fe f907 	bl	800ee42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010c34:	2301      	movs	r3, #1
 8010c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c38:	697b      	ldr	r3, [r7, #20]
	}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	20002ac8 	.word	0x20002ac8
 8010c48:	20002fa4 	.word	0x20002fa4
 8010c4c:	20002acc 	.word	0x20002acc

08010c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b088      	sub	sp, #32
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010c5e:	2301      	movs	r3, #1
 8010c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d06c      	beq.n	8010d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d10b      	bne.n	8010c88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	60fb      	str	r3, [r7, #12]
}
 8010c82:	bf00      	nop
 8010c84:	bf00      	nop
 8010c86:	e7fd      	b.n	8010c84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010c88:	69bb      	ldr	r3, [r7, #24]
 8010c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c8c:	683a      	ldr	r2, [r7, #0]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d902      	bls.n	8010c98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	61fb      	str	r3, [r7, #28]
 8010c96:	e002      	b.n	8010c9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010c98:	69bb      	ldr	r3, [r7, #24]
 8010c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010c9e:	69bb      	ldr	r3, [r7, #24]
 8010ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ca2:	69fa      	ldr	r2, [r7, #28]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d04c      	beq.n	8010d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010cac:	697a      	ldr	r2, [r7, #20]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d147      	bne.n	8010d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010cb2:	4b26      	ldr	r3, [pc, #152]	@ (8010d4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	69ba      	ldr	r2, [r7, #24]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d10b      	bne.n	8010cd4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	60bb      	str	r3, [r7, #8]
}
 8010cce:	bf00      	nop
 8010cd0:	bf00      	nop
 8010cd2:	e7fd      	b.n	8010cd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	69fa      	ldr	r2, [r7, #28]
 8010cde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	699b      	ldr	r3, [r3, #24]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	db04      	blt.n	8010cf2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	6959      	ldr	r1, [r3, #20]
 8010cf6:	693a      	ldr	r2, [r7, #16]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4a13      	ldr	r2, [pc, #76]	@ (8010d50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010d02:	4413      	add	r3, r2
 8010d04:	4299      	cmp	r1, r3
 8010d06:	d11c      	bne.n	8010d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	3304      	adds	r3, #4
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fe f8f5 	bl	800eefc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d16:	4b0f      	ldr	r3, [pc, #60]	@ (8010d54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d903      	bls.n	8010d26 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d22:	4a0c      	ldr	r2, [pc, #48]	@ (8010d54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010d24:	6013      	str	r3, [r2, #0]
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	4413      	add	r3, r2
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	4a07      	ldr	r2, [pc, #28]	@ (8010d50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010d34:	441a      	add	r2, r3
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	f7fe f880 	bl	800ee42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010d42:	bf00      	nop
 8010d44:	3720      	adds	r7, #32
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20002ac8 	.word	0x20002ac8
 8010d50:	20002acc 	.word	0x20002acc
 8010d54:	20002fa4 	.word	0x20002fa4

08010d58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8010d5e:	4b09      	ldr	r3, [pc, #36]	@ (8010d84 <uxTaskResetEventItemValue+0x2c>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	699b      	ldr	r3, [r3, #24]
 8010d64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d66:	4b07      	ldr	r3, [pc, #28]	@ (8010d84 <uxTaskResetEventItemValue+0x2c>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d6c:	4b05      	ldr	r3, [pc, #20]	@ (8010d84 <uxTaskResetEventItemValue+0x2c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8010d74:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010d76:	687b      	ldr	r3, [r7, #4]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	20002ac8 	.word	0x20002ac8

08010d88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010d88:	b480      	push	{r7}
 8010d8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010d8c:	4b07      	ldr	r3, [pc, #28]	@ (8010dac <pvTaskIncrementMutexHeldCount+0x24>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d004      	beq.n	8010d9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010d94:	4b05      	ldr	r3, [pc, #20]	@ (8010dac <pvTaskIncrementMutexHeldCount+0x24>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d9a:	3201      	adds	r2, #1
 8010d9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010d9e:	4b03      	ldr	r3, [pc, #12]	@ (8010dac <pvTaskIncrementMutexHeldCount+0x24>)
 8010da0:	681b      	ldr	r3, [r3, #0]
	}
 8010da2:	4618      	mov	r0, r3
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr
 8010dac:	20002ac8 	.word	0x20002ac8

08010db0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010dba:	4b21      	ldr	r3, [pc, #132]	@ (8010e40 <prvAddCurrentTaskToDelayedList+0x90>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dc0:	4b20      	ldr	r3, [pc, #128]	@ (8010e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3304      	adds	r3, #4
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe f898 	bl	800eefc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dd2:	d10a      	bne.n	8010dea <prvAddCurrentTaskToDelayedList+0x3a>
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d007      	beq.n	8010dea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010dda:	4b1a      	ldr	r3, [pc, #104]	@ (8010e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3304      	adds	r3, #4
 8010de0:	4619      	mov	r1, r3
 8010de2:	4819      	ldr	r0, [pc, #100]	@ (8010e48 <prvAddCurrentTaskToDelayedList+0x98>)
 8010de4:	f7fe f82d 	bl	800ee42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010de8:	e026      	b.n	8010e38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	4413      	add	r3, r2
 8010df0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010df2:	4b14      	ldr	r3, [pc, #80]	@ (8010e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d209      	bcs.n	8010e16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e02:	4b12      	ldr	r3, [pc, #72]	@ (8010e4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	4b0f      	ldr	r3, [pc, #60]	@ (8010e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	3304      	adds	r3, #4
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	4610      	mov	r0, r2
 8010e10:	f7fe f83b 	bl	800ee8a <vListInsert>
}
 8010e14:	e010      	b.n	8010e38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e16:	4b0e      	ldr	r3, [pc, #56]	@ (8010e50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8010e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	3304      	adds	r3, #4
 8010e20:	4619      	mov	r1, r3
 8010e22:	4610      	mov	r0, r2
 8010e24:	f7fe f831 	bl	800ee8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010e28:	4b0a      	ldr	r3, [pc, #40]	@ (8010e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	68ba      	ldr	r2, [r7, #8]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d202      	bcs.n	8010e38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010e32:	4a08      	ldr	r2, [pc, #32]	@ (8010e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	6013      	str	r3, [r2, #0]
}
 8010e38:	bf00      	nop
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	20002fa0 	.word	0x20002fa0
 8010e44:	20002ac8 	.word	0x20002ac8
 8010e48:	20002f88 	.word	0x20002f88
 8010e4c:	20002f58 	.word	0x20002f58
 8010e50:	20002f54 	.word	0x20002f54
 8010e54:	20002fbc 	.word	0x20002fbc

08010e58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b08a      	sub	sp, #40	@ 0x28
 8010e5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010e62:	f000 fb13 	bl	801148c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010e66:	4b1d      	ldr	r3, [pc, #116]	@ (8010edc <xTimerCreateTimerTask+0x84>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d021      	beq.n	8010eb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010e76:	1d3a      	adds	r2, r7, #4
 8010e78:	f107 0108 	add.w	r1, r7, #8
 8010e7c:	f107 030c 	add.w	r3, r7, #12
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fd fddb 	bl	800ea3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010e86:	6879      	ldr	r1, [r7, #4]
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	9202      	str	r2, [sp, #8]
 8010e8e:	9301      	str	r3, [sp, #4]
 8010e90:	2337      	movs	r3, #55	@ 0x37
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	2300      	movs	r3, #0
 8010e96:	460a      	mov	r2, r1
 8010e98:	4911      	ldr	r1, [pc, #68]	@ (8010ee0 <xTimerCreateTimerTask+0x88>)
 8010e9a:	4812      	ldr	r0, [pc, #72]	@ (8010ee4 <xTimerCreateTimerTask+0x8c>)
 8010e9c:	f7fe fee8 	bl	800fc70 <xTaskCreateStatic>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	4a11      	ldr	r2, [pc, #68]	@ (8010ee8 <xTimerCreateTimerTask+0x90>)
 8010ea4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010ea6:	4b10      	ldr	r3, [pc, #64]	@ (8010ee8 <xTimerCreateTimerTask+0x90>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d001      	beq.n	8010eb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10b      	bne.n	8010ed0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	613b      	str	r3, [r7, #16]
}
 8010eca:	bf00      	nop
 8010ecc:	bf00      	nop
 8010ece:	e7fd      	b.n	8010ecc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010ed0:	697b      	ldr	r3, [r7, #20]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	20002ff8 	.word	0x20002ff8
 8010ee0:	080156c8 	.word	0x080156c8
 8010ee4:	08011025 	.word	0x08011025
 8010ee8:	20002ffc 	.word	0x20002ffc

08010eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08a      	sub	sp, #40	@ 0x28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010efa:	2300      	movs	r3, #0
 8010efc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10b      	bne.n	8010f1c <xTimerGenericCommand+0x30>
	__asm volatile
 8010f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f08:	f383 8811 	msr	BASEPRI, r3
 8010f0c:	f3bf 8f6f 	isb	sy
 8010f10:	f3bf 8f4f 	dsb	sy
 8010f14:	623b      	str	r3, [r7, #32]
}
 8010f16:	bf00      	nop
 8010f18:	bf00      	nop
 8010f1a:	e7fd      	b.n	8010f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010f1c:	4b19      	ldr	r3, [pc, #100]	@ (8010f84 <xTimerGenericCommand+0x98>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d02a      	beq.n	8010f7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	2b05      	cmp	r3, #5
 8010f34:	dc18      	bgt.n	8010f68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010f36:	f7ff fd95 	bl	8010a64 <xTaskGetSchedulerState>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d109      	bne.n	8010f54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010f40:	4b10      	ldr	r3, [pc, #64]	@ (8010f84 <xTimerGenericCommand+0x98>)
 8010f42:	6818      	ldr	r0, [r3, #0]
 8010f44:	f107 0110 	add.w	r1, r7, #16
 8010f48:	2300      	movs	r3, #0
 8010f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f4c:	f7fe f978 	bl	800f240 <xQueueGenericSend>
 8010f50:	6278      	str	r0, [r7, #36]	@ 0x24
 8010f52:	e012      	b.n	8010f7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010f54:	4b0b      	ldr	r3, [pc, #44]	@ (8010f84 <xTimerGenericCommand+0x98>)
 8010f56:	6818      	ldr	r0, [r3, #0]
 8010f58:	f107 0110 	add.w	r1, r7, #16
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f7fe f96e 	bl	800f240 <xQueueGenericSend>
 8010f64:	6278      	str	r0, [r7, #36]	@ 0x24
 8010f66:	e008      	b.n	8010f7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010f68:	4b06      	ldr	r3, [pc, #24]	@ (8010f84 <xTimerGenericCommand+0x98>)
 8010f6a:	6818      	ldr	r0, [r3, #0]
 8010f6c:	f107 0110 	add.w	r1, r7, #16
 8010f70:	2300      	movs	r3, #0
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	f7fe fa66 	bl	800f444 <xQueueGenericSendFromISR>
 8010f78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3728      	adds	r7, #40	@ 0x28
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	20002ff8 	.word	0x20002ff8

08010f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b088      	sub	sp, #32
 8010f8c:	af02      	add	r7, sp, #8
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f92:	4b23      	ldr	r3, [pc, #140]	@ (8011020 <prvProcessExpiredTimer+0x98>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7fd ffab 	bl	800eefc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fac:	f003 0304 	and.w	r3, r3, #4
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d023      	beq.n	8010ffc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	699a      	ldr	r2, [r3, #24]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	18d1      	adds	r1, r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	6978      	ldr	r0, [r7, #20]
 8010fc2:	f000 f8d5 	bl	8011170 <prvInsertTimerInActiveList>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d020      	beq.n	801100e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fcc:	2300      	movs	r3, #0
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	6978      	ldr	r0, [r7, #20]
 8010fd8:	f7ff ff88 	bl	8010eec <xTimerGenericCommand>
 8010fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d114      	bne.n	801100e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	60fb      	str	r3, [r7, #12]
}
 8010ff6:	bf00      	nop
 8010ff8:	bf00      	nop
 8010ffa:	e7fd      	b.n	8010ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011002:	f023 0301 	bic.w	r3, r3, #1
 8011006:	b2da      	uxtb	r2, r3
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	6a1b      	ldr	r3, [r3, #32]
 8011012:	6978      	ldr	r0, [r7, #20]
 8011014:	4798      	blx	r3
}
 8011016:	bf00      	nop
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	20002ff0 	.word	0x20002ff0

08011024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801102c:	f107 0308 	add.w	r3, r7, #8
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f859 	bl	80110e8 <prvGetNextExpireTime>
 8011036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	4619      	mov	r1, r3
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 f805 	bl	801104c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011042:	f000 f8d7 	bl	80111f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011046:	bf00      	nop
 8011048:	e7f0      	b.n	801102c <prvTimerTask+0x8>
	...

0801104c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011056:	f7ff f86f 	bl	8010138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801105a:	f107 0308 	add.w	r3, r7, #8
 801105e:	4618      	mov	r0, r3
 8011060:	f000 f866 	bl	8011130 <prvSampleTimeNow>
 8011064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d130      	bne.n	80110ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10a      	bne.n	8011088 <prvProcessTimerOrBlockTask+0x3c>
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	429a      	cmp	r2, r3
 8011078:	d806      	bhi.n	8011088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801107a:	f7ff f86b 	bl	8010154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801107e:	68f9      	ldr	r1, [r7, #12]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7ff ff81 	bl	8010f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011086:	e024      	b.n	80110d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d008      	beq.n	80110a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801108e:	4b13      	ldr	r3, [pc, #76]	@ (80110dc <prvProcessTimerOrBlockTask+0x90>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d101      	bne.n	801109c <prvProcessTimerOrBlockTask+0x50>
 8011098:	2301      	movs	r3, #1
 801109a:	e000      	b.n	801109e <prvProcessTimerOrBlockTask+0x52>
 801109c:	2300      	movs	r3, #0
 801109e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80110a0:	4b0f      	ldr	r3, [pc, #60]	@ (80110e0 <prvProcessTimerOrBlockTask+0x94>)
 80110a2:	6818      	ldr	r0, [r3, #0]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	4619      	mov	r1, r3
 80110ae:	f7fe fdab 	bl	800fc08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80110b2:	f7ff f84f 	bl	8010154 <xTaskResumeAll>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d10a      	bne.n	80110d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80110bc:	4b09      	ldr	r3, [pc, #36]	@ (80110e4 <prvProcessTimerOrBlockTask+0x98>)
 80110be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	f3bf 8f6f 	isb	sy
}
 80110cc:	e001      	b.n	80110d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80110ce:	f7ff f841 	bl	8010154 <xTaskResumeAll>
}
 80110d2:	bf00      	nop
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20002ff4 	.word	0x20002ff4
 80110e0:	20002ff8 	.word	0x20002ff8
 80110e4:	e000ed04 	.word	0xe000ed04

080110e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80110f0:	4b0e      	ldr	r3, [pc, #56]	@ (801112c <prvGetNextExpireTime+0x44>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d101      	bne.n	80110fe <prvGetNextExpireTime+0x16>
 80110fa:	2201      	movs	r2, #1
 80110fc:	e000      	b.n	8011100 <prvGetNextExpireTime+0x18>
 80110fe:	2200      	movs	r2, #0
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d105      	bne.n	8011118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801110c:	4b07      	ldr	r3, [pc, #28]	@ (801112c <prvGetNextExpireTime+0x44>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	60fb      	str	r3, [r7, #12]
 8011116:	e001      	b.n	801111c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011118:	2300      	movs	r3, #0
 801111a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801111c:	68fb      	ldr	r3, [r7, #12]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	20002ff0 	.word	0x20002ff0

08011130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011138:	f7ff f8aa 	bl	8010290 <xTaskGetTickCount>
 801113c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801113e:	4b0b      	ldr	r3, [pc, #44]	@ (801116c <prvSampleTimeNow+0x3c>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	429a      	cmp	r2, r3
 8011146:	d205      	bcs.n	8011154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011148:	f000 f93a 	bl	80113c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2201      	movs	r2, #1
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	e002      	b.n	801115a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801115a:	4a04      	ldr	r2, [pc, #16]	@ (801116c <prvSampleTimeNow+0x3c>)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011160:	68fb      	ldr	r3, [r7, #12]
}
 8011162:	4618      	mov	r0, r3
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	20003000 	.word	0x20003000

08011170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af00      	add	r7, sp, #0
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
 801117c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801117e:	2300      	movs	r3, #0
 8011180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	68ba      	ldr	r2, [r7, #8]
 8011186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	429a      	cmp	r2, r3
 8011194:	d812      	bhi.n	80111bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	1ad2      	subs	r2, r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	699b      	ldr	r3, [r3, #24]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d302      	bcc.n	80111aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80111a4:	2301      	movs	r3, #1
 80111a6:	617b      	str	r3, [r7, #20]
 80111a8:	e01b      	b.n	80111e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80111aa:	4b10      	ldr	r3, [pc, #64]	@ (80111ec <prvInsertTimerInActiveList+0x7c>)
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	3304      	adds	r3, #4
 80111b2:	4619      	mov	r1, r3
 80111b4:	4610      	mov	r0, r2
 80111b6:	f7fd fe68 	bl	800ee8a <vListInsert>
 80111ba:	e012      	b.n	80111e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d206      	bcs.n	80111d2 <prvInsertTimerInActiveList+0x62>
 80111c4:	68ba      	ldr	r2, [r7, #8]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d302      	bcc.n	80111d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80111cc:	2301      	movs	r3, #1
 80111ce:	617b      	str	r3, [r7, #20]
 80111d0:	e007      	b.n	80111e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80111d2:	4b07      	ldr	r3, [pc, #28]	@ (80111f0 <prvInsertTimerInActiveList+0x80>)
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	3304      	adds	r3, #4
 80111da:	4619      	mov	r1, r3
 80111dc:	4610      	mov	r0, r2
 80111de:	f7fd fe54 	bl	800ee8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80111e2:	697b      	ldr	r3, [r7, #20]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3718      	adds	r7, #24
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	20002ff4 	.word	0x20002ff4
 80111f0:	20002ff0 	.word	0x20002ff0

080111f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b08e      	sub	sp, #56	@ 0x38
 80111f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80111fa:	e0ce      	b.n	801139a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	da19      	bge.n	8011236 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011202:	1d3b      	adds	r3, r7, #4
 8011204:	3304      	adds	r3, #4
 8011206:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10b      	bne.n	8011226 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801120e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	61fb      	str	r3, [r7, #28]
}
 8011220:	bf00      	nop
 8011222:	bf00      	nop
 8011224:	e7fd      	b.n	8011222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801122c:	6850      	ldr	r0, [r2, #4]
 801122e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011230:	6892      	ldr	r2, [r2, #8]
 8011232:	4611      	mov	r1, r2
 8011234:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	f2c0 80ae 	blt.w	801139a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011244:	695b      	ldr	r3, [r3, #20]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d004      	beq.n	8011254 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801124a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124c:	3304      	adds	r3, #4
 801124e:	4618      	mov	r0, r3
 8011250:	f7fd fe54 	bl	800eefc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011254:	463b      	mov	r3, r7
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff ff6a 	bl	8011130 <prvSampleTimeNow>
 801125c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b09      	cmp	r3, #9
 8011262:	f200 8097 	bhi.w	8011394 <prvProcessReceivedCommands+0x1a0>
 8011266:	a201      	add	r2, pc, #4	@ (adr r2, 801126c <prvProcessReceivedCommands+0x78>)
 8011268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801126c:	08011295 	.word	0x08011295
 8011270:	08011295 	.word	0x08011295
 8011274:	08011295 	.word	0x08011295
 8011278:	0801130b 	.word	0x0801130b
 801127c:	0801131f 	.word	0x0801131f
 8011280:	0801136b 	.word	0x0801136b
 8011284:	08011295 	.word	0x08011295
 8011288:	08011295 	.word	0x08011295
 801128c:	0801130b 	.word	0x0801130b
 8011290:	0801131f 	.word	0x0801131f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801129a:	f043 0301 	orr.w	r3, r3, #1
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112aa:	699b      	ldr	r3, [r3, #24]
 80112ac:	18d1      	adds	r1, r2, r3
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112b4:	f7ff ff5c 	bl	8011170 <prvInsertTimerInActiveList>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d06c      	beq.n	8011398 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c0:	6a1b      	ldr	r3, [r3, #32]
 80112c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80112cc:	f003 0304 	and.w	r3, r3, #4
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d061      	beq.n	8011398 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80112d4:	68ba      	ldr	r2, [r7, #8]
 80112d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	441a      	add	r2, r3
 80112dc:	2300      	movs	r3, #0
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	2300      	movs	r3, #0
 80112e2:	2100      	movs	r1, #0
 80112e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112e6:	f7ff fe01 	bl	8010eec <xTimerGenericCommand>
 80112ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80112ec:	6a3b      	ldr	r3, [r7, #32]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d152      	bne.n	8011398 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80112f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f6:	f383 8811 	msr	BASEPRI, r3
 80112fa:	f3bf 8f6f 	isb	sy
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	61bb      	str	r3, [r7, #24]
}
 8011304:	bf00      	nop
 8011306:	bf00      	nop
 8011308:	e7fd      	b.n	8011306 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801130a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801130c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011310:	f023 0301 	bic.w	r3, r3, #1
 8011314:	b2da      	uxtb	r2, r3
 8011316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801131c:	e03d      	b.n	801139a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011324:	f043 0301 	orr.w	r3, r3, #1
 8011328:	b2da      	uxtb	r2, r3
 801132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011334:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011338:	699b      	ldr	r3, [r3, #24]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d10b      	bne.n	8011356 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801133e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	617b      	str	r3, [r7, #20]
}
 8011350:	bf00      	nop
 8011352:	bf00      	nop
 8011354:	e7fd      	b.n	8011352 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011358:	699a      	ldr	r2, [r3, #24]
 801135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801135c:	18d1      	adds	r1, r2, r3
 801135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011364:	f7ff ff04 	bl	8011170 <prvInsertTimerInActiveList>
					break;
 8011368:	e017      	b.n	801139a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801136c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011370:	f003 0302 	and.w	r3, r3, #2
 8011374:	2b00      	cmp	r3, #0
 8011376:	d103      	bne.n	8011380 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801137a:	f000 fc05 	bl	8011b88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801137e:	e00c      	b.n	801139a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011386:	f023 0301 	bic.w	r3, r3, #1
 801138a:	b2da      	uxtb	r2, r3
 801138c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801138e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011392:	e002      	b.n	801139a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011394:	bf00      	nop
 8011396:	e000      	b.n	801139a <prvProcessReceivedCommands+0x1a6>
					break;
 8011398:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801139a:	4b08      	ldr	r3, [pc, #32]	@ (80113bc <prvProcessReceivedCommands+0x1c8>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	1d39      	adds	r1, r7, #4
 80113a0:	2200      	movs	r2, #0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fe f8ec 	bl	800f580 <xQueueReceive>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f47f af26 	bne.w	80111fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80113b0:	bf00      	nop
 80113b2:	bf00      	nop
 80113b4:	3730      	adds	r7, #48	@ 0x30
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	20002ff8 	.word	0x20002ff8

080113c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b088      	sub	sp, #32
 80113c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80113c6:	e049      	b.n	801145c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113c8:	4b2e      	ldr	r3, [pc, #184]	@ (8011484 <prvSwitchTimerLists+0xc4>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113d2:	4b2c      	ldr	r3, [pc, #176]	@ (8011484 <prvSwitchTimerLists+0xc4>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	3304      	adds	r3, #4
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fd fd8b 	bl	800eefc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	6a1b      	ldr	r3, [r3, #32]
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80113f4:	f003 0304 	and.w	r3, r3, #4
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d02f      	beq.n	801145c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	699b      	ldr	r3, [r3, #24]
 8011400:	693a      	ldr	r2, [r7, #16]
 8011402:	4413      	add	r3, r2
 8011404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	429a      	cmp	r2, r3
 801140c:	d90e      	bls.n	801142c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	68ba      	ldr	r2, [r7, #8]
 8011412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801141a:	4b1a      	ldr	r3, [pc, #104]	@ (8011484 <prvSwitchTimerLists+0xc4>)
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	3304      	adds	r3, #4
 8011422:	4619      	mov	r1, r3
 8011424:	4610      	mov	r0, r2
 8011426:	f7fd fd30 	bl	800ee8a <vListInsert>
 801142a:	e017      	b.n	801145c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801142c:	2300      	movs	r3, #0
 801142e:	9300      	str	r3, [sp, #0]
 8011430:	2300      	movs	r3, #0
 8011432:	693a      	ldr	r2, [r7, #16]
 8011434:	2100      	movs	r1, #0
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f7ff fd58 	bl	8010eec <xTimerGenericCommand>
 801143c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d10b      	bne.n	801145c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	603b      	str	r3, [r7, #0]
}
 8011456:	bf00      	nop
 8011458:	bf00      	nop
 801145a:	e7fd      	b.n	8011458 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801145c:	4b09      	ldr	r3, [pc, #36]	@ (8011484 <prvSwitchTimerLists+0xc4>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1b0      	bne.n	80113c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011466:	4b07      	ldr	r3, [pc, #28]	@ (8011484 <prvSwitchTimerLists+0xc4>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801146c:	4b06      	ldr	r3, [pc, #24]	@ (8011488 <prvSwitchTimerLists+0xc8>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a04      	ldr	r2, [pc, #16]	@ (8011484 <prvSwitchTimerLists+0xc4>)
 8011472:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011474:	4a04      	ldr	r2, [pc, #16]	@ (8011488 <prvSwitchTimerLists+0xc8>)
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	6013      	str	r3, [r2, #0]
}
 801147a:	bf00      	nop
 801147c:	3718      	adds	r7, #24
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	20002ff0 	.word	0x20002ff0
 8011488:	20002ff4 	.word	0x20002ff4

0801148c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011492:	f000 f989 	bl	80117a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011496:	4b15      	ldr	r3, [pc, #84]	@ (80114ec <prvCheckForValidListAndQueue+0x60>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d120      	bne.n	80114e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801149e:	4814      	ldr	r0, [pc, #80]	@ (80114f0 <prvCheckForValidListAndQueue+0x64>)
 80114a0:	f7fd fca2 	bl	800ede8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80114a4:	4813      	ldr	r0, [pc, #76]	@ (80114f4 <prvCheckForValidListAndQueue+0x68>)
 80114a6:	f7fd fc9f 	bl	800ede8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80114aa:	4b13      	ldr	r3, [pc, #76]	@ (80114f8 <prvCheckForValidListAndQueue+0x6c>)
 80114ac:	4a10      	ldr	r2, [pc, #64]	@ (80114f0 <prvCheckForValidListAndQueue+0x64>)
 80114ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80114b0:	4b12      	ldr	r3, [pc, #72]	@ (80114fc <prvCheckForValidListAndQueue+0x70>)
 80114b2:	4a10      	ldr	r2, [pc, #64]	@ (80114f4 <prvCheckForValidListAndQueue+0x68>)
 80114b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80114b6:	2300      	movs	r3, #0
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	4b11      	ldr	r3, [pc, #68]	@ (8011500 <prvCheckForValidListAndQueue+0x74>)
 80114bc:	4a11      	ldr	r2, [pc, #68]	@ (8011504 <prvCheckForValidListAndQueue+0x78>)
 80114be:	2110      	movs	r1, #16
 80114c0:	200a      	movs	r0, #10
 80114c2:	f7fd fdaf 	bl	800f024 <xQueueGenericCreateStatic>
 80114c6:	4603      	mov	r3, r0
 80114c8:	4a08      	ldr	r2, [pc, #32]	@ (80114ec <prvCheckForValidListAndQueue+0x60>)
 80114ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80114cc:	4b07      	ldr	r3, [pc, #28]	@ (80114ec <prvCheckForValidListAndQueue+0x60>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d005      	beq.n	80114e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80114d4:	4b05      	ldr	r3, [pc, #20]	@ (80114ec <prvCheckForValidListAndQueue+0x60>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	490b      	ldr	r1, [pc, #44]	@ (8011508 <prvCheckForValidListAndQueue+0x7c>)
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fe fb6a 	bl	800fbb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80114e0:	f000 f994 	bl	801180c <vPortExitCritical>
}
 80114e4:	bf00      	nop
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	20002ff8 	.word	0x20002ff8
 80114f0:	20002fc8 	.word	0x20002fc8
 80114f4:	20002fdc 	.word	0x20002fdc
 80114f8:	20002ff0 	.word	0x20002ff0
 80114fc:	20002ff4 	.word	0x20002ff4
 8011500:	200030a4 	.word	0x200030a4
 8011504:	20003004 	.word	0x20003004
 8011508:	080156d0 	.word	0x080156d0

0801150c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801150c:	b580      	push	{r7, lr}
 801150e:	b08a      	sub	sp, #40	@ 0x28
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801151a:	f06f 0301 	mvn.w	r3, #1
 801151e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801152c:	4b06      	ldr	r3, [pc, #24]	@ (8011548 <xTimerPendFunctionCallFromISR+0x3c>)
 801152e:	6818      	ldr	r0, [r3, #0]
 8011530:	f107 0114 	add.w	r1, r7, #20
 8011534:	2300      	movs	r3, #0
 8011536:	683a      	ldr	r2, [r7, #0]
 8011538:	f7fd ff84 	bl	800f444 <xQueueGenericSendFromISR>
 801153c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011540:	4618      	mov	r0, r3
 8011542:	3728      	adds	r7, #40	@ 0x28
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	20002ff8 	.word	0x20002ff8

0801154c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	3b04      	subs	r3, #4
 801155c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	3b04      	subs	r3, #4
 801156a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	f023 0201 	bic.w	r2, r3, #1
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	3b04      	subs	r3, #4
 801157a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801157c:	4a0c      	ldr	r2, [pc, #48]	@ (80115b0 <pxPortInitialiseStack+0x64>)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	3b14      	subs	r3, #20
 8011586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	3b04      	subs	r3, #4
 8011592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f06f 0202 	mvn.w	r2, #2
 801159a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	3b20      	subs	r3, #32
 80115a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80115a2:	68fb      	ldr	r3, [r7, #12]
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3714      	adds	r7, #20
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	080115b5 	.word	0x080115b5

080115b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80115b4:	b480      	push	{r7}
 80115b6:	b085      	sub	sp, #20
 80115b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80115be:	4b13      	ldr	r3, [pc, #76]	@ (801160c <prvTaskExitError+0x58>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c6:	d00b      	beq.n	80115e0 <prvTaskExitError+0x2c>
	__asm volatile
 80115c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115cc:	f383 8811 	msr	BASEPRI, r3
 80115d0:	f3bf 8f6f 	isb	sy
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	60fb      	str	r3, [r7, #12]
}
 80115da:	bf00      	nop
 80115dc:	bf00      	nop
 80115de:	e7fd      	b.n	80115dc <prvTaskExitError+0x28>
	__asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	60bb      	str	r3, [r7, #8]
}
 80115f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80115f4:	bf00      	nop
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d0fc      	beq.n	80115f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80115fc:	bf00      	nop
 80115fe:	bf00      	nop
 8011600:	3714      	adds	r7, #20
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr
 801160a:	bf00      	nop
 801160c:	200002a4 	.word	0x200002a4

08011610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011610:	4b07      	ldr	r3, [pc, #28]	@ (8011630 <pxCurrentTCBConst2>)
 8011612:	6819      	ldr	r1, [r3, #0]
 8011614:	6808      	ldr	r0, [r1, #0]
 8011616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161a:	f380 8809 	msr	PSP, r0
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f04f 0000 	mov.w	r0, #0
 8011626:	f380 8811 	msr	BASEPRI, r0
 801162a:	4770      	bx	lr
 801162c:	f3af 8000 	nop.w

08011630 <pxCurrentTCBConst2>:
 8011630:	20002ac8 	.word	0x20002ac8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011634:	bf00      	nop
 8011636:	bf00      	nop

08011638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011638:	4808      	ldr	r0, [pc, #32]	@ (801165c <prvPortStartFirstTask+0x24>)
 801163a:	6800      	ldr	r0, [r0, #0]
 801163c:	6800      	ldr	r0, [r0, #0]
 801163e:	f380 8808 	msr	MSP, r0
 8011642:	f04f 0000 	mov.w	r0, #0
 8011646:	f380 8814 	msr	CONTROL, r0
 801164a:	b662      	cpsie	i
 801164c:	b661      	cpsie	f
 801164e:	f3bf 8f4f 	dsb	sy
 8011652:	f3bf 8f6f 	isb	sy
 8011656:	df00      	svc	0
 8011658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801165a:	bf00      	nop
 801165c:	e000ed08 	.word	0xe000ed08

08011660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b086      	sub	sp, #24
 8011664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011666:	4b47      	ldr	r3, [pc, #284]	@ (8011784 <xPortStartScheduler+0x124>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4a47      	ldr	r2, [pc, #284]	@ (8011788 <xPortStartScheduler+0x128>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d10b      	bne.n	8011688 <xPortStartScheduler+0x28>
	__asm volatile
 8011670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011674:	f383 8811 	msr	BASEPRI, r3
 8011678:	f3bf 8f6f 	isb	sy
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	613b      	str	r3, [r7, #16]
}
 8011682:	bf00      	nop
 8011684:	bf00      	nop
 8011686:	e7fd      	b.n	8011684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011688:	4b3e      	ldr	r3, [pc, #248]	@ (8011784 <xPortStartScheduler+0x124>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4a3f      	ldr	r2, [pc, #252]	@ (801178c <xPortStartScheduler+0x12c>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d10b      	bne.n	80116aa <xPortStartScheduler+0x4a>
	__asm volatile
 8011692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011696:	f383 8811 	msr	BASEPRI, r3
 801169a:	f3bf 8f6f 	isb	sy
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	60fb      	str	r3, [r7, #12]
}
 80116a4:	bf00      	nop
 80116a6:	bf00      	nop
 80116a8:	e7fd      	b.n	80116a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80116aa:	4b39      	ldr	r3, [pc, #228]	@ (8011790 <xPortStartScheduler+0x130>)
 80116ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	22ff      	movs	r2, #255	@ 0xff
 80116ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	b2db      	uxtb	r3, r3
 80116c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80116c4:	78fb      	ldrb	r3, [r7, #3]
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	4b31      	ldr	r3, [pc, #196]	@ (8011794 <xPortStartScheduler+0x134>)
 80116d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80116d2:	4b31      	ldr	r3, [pc, #196]	@ (8011798 <xPortStartScheduler+0x138>)
 80116d4:	2207      	movs	r2, #7
 80116d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116d8:	e009      	b.n	80116ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80116da:	4b2f      	ldr	r3, [pc, #188]	@ (8011798 <xPortStartScheduler+0x138>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	3b01      	subs	r3, #1
 80116e0:	4a2d      	ldr	r2, [pc, #180]	@ (8011798 <xPortStartScheduler+0x138>)
 80116e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80116e4:	78fb      	ldrb	r3, [r7, #3]
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	005b      	lsls	r3, r3, #1
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116ee:	78fb      	ldrb	r3, [r7, #3]
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116f6:	2b80      	cmp	r3, #128	@ 0x80
 80116f8:	d0ef      	beq.n	80116da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80116fa:	4b27      	ldr	r3, [pc, #156]	@ (8011798 <xPortStartScheduler+0x138>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f1c3 0307 	rsb	r3, r3, #7
 8011702:	2b04      	cmp	r3, #4
 8011704:	d00b      	beq.n	801171e <xPortStartScheduler+0xbe>
	__asm volatile
 8011706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801170a:	f383 8811 	msr	BASEPRI, r3
 801170e:	f3bf 8f6f 	isb	sy
 8011712:	f3bf 8f4f 	dsb	sy
 8011716:	60bb      	str	r3, [r7, #8]
}
 8011718:	bf00      	nop
 801171a:	bf00      	nop
 801171c:	e7fd      	b.n	801171a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801171e:	4b1e      	ldr	r3, [pc, #120]	@ (8011798 <xPortStartScheduler+0x138>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	021b      	lsls	r3, r3, #8
 8011724:	4a1c      	ldr	r2, [pc, #112]	@ (8011798 <xPortStartScheduler+0x138>)
 8011726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011728:	4b1b      	ldr	r3, [pc, #108]	@ (8011798 <xPortStartScheduler+0x138>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011730:	4a19      	ldr	r2, [pc, #100]	@ (8011798 <xPortStartScheduler+0x138>)
 8011732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	b2da      	uxtb	r2, r3
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801173c:	4b17      	ldr	r3, [pc, #92]	@ (801179c <xPortStartScheduler+0x13c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4a16      	ldr	r2, [pc, #88]	@ (801179c <xPortStartScheduler+0x13c>)
 8011742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011748:	4b14      	ldr	r3, [pc, #80]	@ (801179c <xPortStartScheduler+0x13c>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4a13      	ldr	r2, [pc, #76]	@ (801179c <xPortStartScheduler+0x13c>)
 801174e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011754:	f000 f8da 	bl	801190c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011758:	4b11      	ldr	r3, [pc, #68]	@ (80117a0 <xPortStartScheduler+0x140>)
 801175a:	2200      	movs	r2, #0
 801175c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801175e:	f000 f8f9 	bl	8011954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011762:	4b10      	ldr	r3, [pc, #64]	@ (80117a4 <xPortStartScheduler+0x144>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4a0f      	ldr	r2, [pc, #60]	@ (80117a4 <xPortStartScheduler+0x144>)
 8011768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801176c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801176e:	f7ff ff63 	bl	8011638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011772:	f7fe fe57 	bl	8010424 <vTaskSwitchContext>
	prvTaskExitError();
 8011776:	f7ff ff1d 	bl	80115b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801177a:	2300      	movs	r3, #0
}
 801177c:	4618      	mov	r0, r3
 801177e:	3718      	adds	r7, #24
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	e000ed00 	.word	0xe000ed00
 8011788:	410fc271 	.word	0x410fc271
 801178c:	410fc270 	.word	0x410fc270
 8011790:	e000e400 	.word	0xe000e400
 8011794:	200030f4 	.word	0x200030f4
 8011798:	200030f8 	.word	0x200030f8
 801179c:	e000ed20 	.word	0xe000ed20
 80117a0:	200002a4 	.word	0x200002a4
 80117a4:	e000ef34 	.word	0xe000ef34

080117a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
	__asm volatile
 80117ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117b2:	f383 8811 	msr	BASEPRI, r3
 80117b6:	f3bf 8f6f 	isb	sy
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	607b      	str	r3, [r7, #4]
}
 80117c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80117c2:	4b10      	ldr	r3, [pc, #64]	@ (8011804 <vPortEnterCritical+0x5c>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	3301      	adds	r3, #1
 80117c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011804 <vPortEnterCritical+0x5c>)
 80117ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80117cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011804 <vPortEnterCritical+0x5c>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d110      	bne.n	80117f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80117d4:	4b0c      	ldr	r3, [pc, #48]	@ (8011808 <vPortEnterCritical+0x60>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00b      	beq.n	80117f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80117de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e2:	f383 8811 	msr	BASEPRI, r3
 80117e6:	f3bf 8f6f 	isb	sy
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	603b      	str	r3, [r7, #0]
}
 80117f0:	bf00      	nop
 80117f2:	bf00      	nop
 80117f4:	e7fd      	b.n	80117f2 <vPortEnterCritical+0x4a>
	}
}
 80117f6:	bf00      	nop
 80117f8:	370c      	adds	r7, #12
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	200002a4 	.word	0x200002a4
 8011808:	e000ed04 	.word	0xe000ed04

0801180c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011812:	4b12      	ldr	r3, [pc, #72]	@ (801185c <vPortExitCritical+0x50>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d10b      	bne.n	8011832 <vPortExitCritical+0x26>
	__asm volatile
 801181a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181e:	f383 8811 	msr	BASEPRI, r3
 8011822:	f3bf 8f6f 	isb	sy
 8011826:	f3bf 8f4f 	dsb	sy
 801182a:	607b      	str	r3, [r7, #4]
}
 801182c:	bf00      	nop
 801182e:	bf00      	nop
 8011830:	e7fd      	b.n	801182e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011832:	4b0a      	ldr	r3, [pc, #40]	@ (801185c <vPortExitCritical+0x50>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	3b01      	subs	r3, #1
 8011838:	4a08      	ldr	r2, [pc, #32]	@ (801185c <vPortExitCritical+0x50>)
 801183a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801183c:	4b07      	ldr	r3, [pc, #28]	@ (801185c <vPortExitCritical+0x50>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d105      	bne.n	8011850 <vPortExitCritical+0x44>
 8011844:	2300      	movs	r3, #0
 8011846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	f383 8811 	msr	BASEPRI, r3
}
 801184e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011850:	bf00      	nop
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr
 801185c:	200002a4 	.word	0x200002a4

08011860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011860:	f3ef 8009 	mrs	r0, PSP
 8011864:	f3bf 8f6f 	isb	sy
 8011868:	4b15      	ldr	r3, [pc, #84]	@ (80118c0 <pxCurrentTCBConst>)
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	f01e 0f10 	tst.w	lr, #16
 8011870:	bf08      	it	eq
 8011872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	6010      	str	r0, [r2, #0]
 801187c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011884:	f380 8811 	msr	BASEPRI, r0
 8011888:	f3bf 8f4f 	dsb	sy
 801188c:	f3bf 8f6f 	isb	sy
 8011890:	f7fe fdc8 	bl	8010424 <vTaskSwitchContext>
 8011894:	f04f 0000 	mov.w	r0, #0
 8011898:	f380 8811 	msr	BASEPRI, r0
 801189c:	bc09      	pop	{r0, r3}
 801189e:	6819      	ldr	r1, [r3, #0]
 80118a0:	6808      	ldr	r0, [r1, #0]
 80118a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a6:	f01e 0f10 	tst.w	lr, #16
 80118aa:	bf08      	it	eq
 80118ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80118b0:	f380 8809 	msr	PSP, r0
 80118b4:	f3bf 8f6f 	isb	sy
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	f3af 8000 	nop.w

080118c0 <pxCurrentTCBConst>:
 80118c0:	20002ac8 	.word	0x20002ac8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80118c4:	bf00      	nop
 80118c6:	bf00      	nop

080118c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
	__asm volatile
 80118ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	607b      	str	r3, [r7, #4]
}
 80118e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80118e2:	f7fe fce5 	bl	80102b0 <xTaskIncrementTick>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d003      	beq.n	80118f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80118ec:	4b06      	ldr	r3, [pc, #24]	@ (8011908 <xPortSysTickHandler+0x40>)
 80118ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	2300      	movs	r3, #0
 80118f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	f383 8811 	msr	BASEPRI, r3
}
 80118fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011900:	bf00      	nop
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	e000ed04 	.word	0xe000ed04

0801190c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801190c:	b480      	push	{r7}
 801190e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011910:	4b0b      	ldr	r3, [pc, #44]	@ (8011940 <vPortSetupTimerInterrupt+0x34>)
 8011912:	2200      	movs	r2, #0
 8011914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011916:	4b0b      	ldr	r3, [pc, #44]	@ (8011944 <vPortSetupTimerInterrupt+0x38>)
 8011918:	2200      	movs	r2, #0
 801191a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801191c:	4b0a      	ldr	r3, [pc, #40]	@ (8011948 <vPortSetupTimerInterrupt+0x3c>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	4a0a      	ldr	r2, [pc, #40]	@ (801194c <vPortSetupTimerInterrupt+0x40>)
 8011922:	fba2 2303 	umull	r2, r3, r2, r3
 8011926:	099b      	lsrs	r3, r3, #6
 8011928:	4a09      	ldr	r2, [pc, #36]	@ (8011950 <vPortSetupTimerInterrupt+0x44>)
 801192a:	3b01      	subs	r3, #1
 801192c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801192e:	4b04      	ldr	r3, [pc, #16]	@ (8011940 <vPortSetupTimerInterrupt+0x34>)
 8011930:	2207      	movs	r2, #7
 8011932:	601a      	str	r2, [r3, #0]
}
 8011934:	bf00      	nop
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	e000e010 	.word	0xe000e010
 8011944:	e000e018 	.word	0xe000e018
 8011948:	20000298 	.word	0x20000298
 801194c:	10624dd3 	.word	0x10624dd3
 8011950:	e000e014 	.word	0xe000e014

08011954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011964 <vPortEnableVFP+0x10>
 8011958:	6801      	ldr	r1, [r0, #0]
 801195a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801195e:	6001      	str	r1, [r0, #0]
 8011960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011962:	bf00      	nop
 8011964:	e000ed88 	.word	0xe000ed88

08011968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011968:	b480      	push	{r7}
 801196a:	b085      	sub	sp, #20
 801196c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801196e:	f3ef 8305 	mrs	r3, IPSR
 8011972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2b0f      	cmp	r3, #15
 8011978:	d915      	bls.n	80119a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801197a:	4a18      	ldr	r2, [pc, #96]	@ (80119dc <vPortValidateInterruptPriority+0x74>)
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	4413      	add	r3, r2
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011984:	4b16      	ldr	r3, [pc, #88]	@ (80119e0 <vPortValidateInterruptPriority+0x78>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	7afa      	ldrb	r2, [r7, #11]
 801198a:	429a      	cmp	r2, r3
 801198c:	d20b      	bcs.n	80119a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	607b      	str	r3, [r7, #4]
}
 80119a0:	bf00      	nop
 80119a2:	bf00      	nop
 80119a4:	e7fd      	b.n	80119a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80119a6:	4b0f      	ldr	r3, [pc, #60]	@ (80119e4 <vPortValidateInterruptPriority+0x7c>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80119ae:	4b0e      	ldr	r3, [pc, #56]	@ (80119e8 <vPortValidateInterruptPriority+0x80>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d90b      	bls.n	80119ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80119b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119ba:	f383 8811 	msr	BASEPRI, r3
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	f3bf 8f4f 	dsb	sy
 80119c6:	603b      	str	r3, [r7, #0]
}
 80119c8:	bf00      	nop
 80119ca:	bf00      	nop
 80119cc:	e7fd      	b.n	80119ca <vPortValidateInterruptPriority+0x62>
	}
 80119ce:	bf00      	nop
 80119d0:	3714      	adds	r7, #20
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	e000e3f0 	.word	0xe000e3f0
 80119e0:	200030f4 	.word	0x200030f4
 80119e4:	e000ed0c 	.word	0xe000ed0c
 80119e8:	200030f8 	.word	0x200030f8

080119ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b08a      	sub	sp, #40	@ 0x28
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80119f4:	2300      	movs	r3, #0
 80119f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80119f8:	f7fe fb9e 	bl	8010138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80119fc:	4b5c      	ldr	r3, [pc, #368]	@ (8011b70 <pvPortMalloc+0x184>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a04:	f000 f924 	bl	8011c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a08:	4b5a      	ldr	r3, [pc, #360]	@ (8011b74 <pvPortMalloc+0x188>)
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4013      	ands	r3, r2
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f040 8095 	bne.w	8011b40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d01e      	beq.n	8011a5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011a1c:	2208      	movs	r2, #8
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4413      	add	r3, r2
 8011a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f003 0307 	and.w	r3, r3, #7
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d015      	beq.n	8011a5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f023 0307 	bic.w	r3, r3, #7
 8011a34:	3308      	adds	r3, #8
 8011a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f003 0307 	and.w	r3, r3, #7
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00b      	beq.n	8011a5a <pvPortMalloc+0x6e>
	__asm volatile
 8011a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	617b      	str	r3, [r7, #20]
}
 8011a54:	bf00      	nop
 8011a56:	bf00      	nop
 8011a58:	e7fd      	b.n	8011a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d06f      	beq.n	8011b40 <pvPortMalloc+0x154>
 8011a60:	4b45      	ldr	r3, [pc, #276]	@ (8011b78 <pvPortMalloc+0x18c>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d86a      	bhi.n	8011b40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011a6a:	4b44      	ldr	r3, [pc, #272]	@ (8011b7c <pvPortMalloc+0x190>)
 8011a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011a6e:	4b43      	ldr	r3, [pc, #268]	@ (8011b7c <pvPortMalloc+0x190>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a74:	e004      	b.n	8011a80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d903      	bls.n	8011a92 <pvPortMalloc+0xa6>
 8011a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d1f1      	bne.n	8011a76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a92:	4b37      	ldr	r3, [pc, #220]	@ (8011b70 <pvPortMalloc+0x184>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d051      	beq.n	8011b40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a9c:	6a3b      	ldr	r3, [r7, #32]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2208      	movs	r2, #8
 8011aa2:	4413      	add	r3, r2
 8011aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	6a3b      	ldr	r3, [r7, #32]
 8011aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab0:	685a      	ldr	r2, [r3, #4]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	1ad2      	subs	r2, r2, r3
 8011ab6:	2308      	movs	r3, #8
 8011ab8:	005b      	lsls	r3, r3, #1
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d920      	bls.n	8011b00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	f003 0307 	and.w	r3, r3, #7
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d00b      	beq.n	8011ae8 <pvPortMalloc+0xfc>
	__asm volatile
 8011ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ad4:	f383 8811 	msr	BASEPRI, r3
 8011ad8:	f3bf 8f6f 	isb	sy
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	613b      	str	r3, [r7, #16]
}
 8011ae2:	bf00      	nop
 8011ae4:	bf00      	nop
 8011ae6:	e7fd      	b.n	8011ae4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aea:	685a      	ldr	r2, [r3, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	1ad2      	subs	r2, r2, r3
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011afa:	69b8      	ldr	r0, [r7, #24]
 8011afc:	f000 f90a 	bl	8011d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b00:	4b1d      	ldr	r3, [pc, #116]	@ (8011b78 <pvPortMalloc+0x18c>)
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	1ad3      	subs	r3, r2, r3
 8011b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8011b78 <pvPortMalloc+0x18c>)
 8011b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8011b78 <pvPortMalloc+0x18c>)
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	4b1b      	ldr	r3, [pc, #108]	@ (8011b80 <pvPortMalloc+0x194>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d203      	bcs.n	8011b22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011b1a:	4b17      	ldr	r3, [pc, #92]	@ (8011b78 <pvPortMalloc+0x18c>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4a18      	ldr	r2, [pc, #96]	@ (8011b80 <pvPortMalloc+0x194>)
 8011b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	4b13      	ldr	r3, [pc, #76]	@ (8011b74 <pvPortMalloc+0x188>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	431a      	orrs	r2, r3
 8011b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b32:	2200      	movs	r2, #0
 8011b34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011b36:	4b13      	ldr	r3, [pc, #76]	@ (8011b84 <pvPortMalloc+0x198>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	4a11      	ldr	r2, [pc, #68]	@ (8011b84 <pvPortMalloc+0x198>)
 8011b3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011b40:	f7fe fb08 	bl	8010154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	f003 0307 	and.w	r3, r3, #7
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00b      	beq.n	8011b66 <pvPortMalloc+0x17a>
	__asm volatile
 8011b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	60fb      	str	r3, [r7, #12]
}
 8011b60:	bf00      	nop
 8011b62:	bf00      	nop
 8011b64:	e7fd      	b.n	8011b62 <pvPortMalloc+0x176>
	return pvReturn;
 8011b66:	69fb      	ldr	r3, [r7, #28]
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3728      	adds	r7, #40	@ 0x28
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	20011b64 	.word	0x20011b64
 8011b74:	20011b78 	.word	0x20011b78
 8011b78:	20011b68 	.word	0x20011b68
 8011b7c:	20011b5c 	.word	0x20011b5c
 8011b80:	20011b6c 	.word	0x20011b6c
 8011b84:	20011b70 	.word	0x20011b70

08011b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b086      	sub	sp, #24
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d04f      	beq.n	8011c3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b9a:	2308      	movs	r3, #8
 8011b9c:	425b      	negs	r3, r3
 8011b9e:	697a      	ldr	r2, [r7, #20]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	685a      	ldr	r2, [r3, #4]
 8011bac:	4b25      	ldr	r3, [pc, #148]	@ (8011c44 <vPortFree+0xbc>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	4013      	ands	r3, r2
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d10b      	bne.n	8011bce <vPortFree+0x46>
	__asm volatile
 8011bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bba:	f383 8811 	msr	BASEPRI, r3
 8011bbe:	f3bf 8f6f 	isb	sy
 8011bc2:	f3bf 8f4f 	dsb	sy
 8011bc6:	60fb      	str	r3, [r7, #12]
}
 8011bc8:	bf00      	nop
 8011bca:	bf00      	nop
 8011bcc:	e7fd      	b.n	8011bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00b      	beq.n	8011bee <vPortFree+0x66>
	__asm volatile
 8011bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bda:	f383 8811 	msr	BASEPRI, r3
 8011bde:	f3bf 8f6f 	isb	sy
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	60bb      	str	r3, [r7, #8]
}
 8011be8:	bf00      	nop
 8011bea:	bf00      	nop
 8011bec:	e7fd      	b.n	8011bea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	685a      	ldr	r2, [r3, #4]
 8011bf2:	4b14      	ldr	r3, [pc, #80]	@ (8011c44 <vPortFree+0xbc>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d01e      	beq.n	8011c3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d11a      	bne.n	8011c3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	4b0e      	ldr	r3, [pc, #56]	@ (8011c44 <vPortFree+0xbc>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	43db      	mvns	r3, r3
 8011c0e:	401a      	ands	r2, r3
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c14:	f7fe fa90 	bl	8010138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	685a      	ldr	r2, [r3, #4]
 8011c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011c48 <vPortFree+0xc0>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4413      	add	r3, r2
 8011c22:	4a09      	ldr	r2, [pc, #36]	@ (8011c48 <vPortFree+0xc0>)
 8011c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c26:	6938      	ldr	r0, [r7, #16]
 8011c28:	f000 f874 	bl	8011d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011c2c:	4b07      	ldr	r3, [pc, #28]	@ (8011c4c <vPortFree+0xc4>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	4a06      	ldr	r2, [pc, #24]	@ (8011c4c <vPortFree+0xc4>)
 8011c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011c36:	f7fe fa8d 	bl	8010154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c3a:	bf00      	nop
 8011c3c:	3718      	adds	r7, #24
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	20011b78 	.word	0x20011b78
 8011c48:	20011b68 	.word	0x20011b68
 8011c4c:	20011b74 	.word	0x20011b74

08011c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c56:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8011c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011c5c:	4b27      	ldr	r3, [pc, #156]	@ (8011cfc <prvHeapInit+0xac>)
 8011c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f003 0307 	and.w	r3, r3, #7
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00c      	beq.n	8011c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	3307      	adds	r3, #7
 8011c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f023 0307 	bic.w	r3, r3, #7
 8011c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8011cfc <prvHeapInit+0xac>)
 8011c80:	4413      	add	r3, r2
 8011c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011c88:	4a1d      	ldr	r2, [pc, #116]	@ (8011d00 <prvHeapInit+0xb0>)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8011d00 <prvHeapInit+0xb0>)
 8011c90:	2200      	movs	r2, #0
 8011c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	4413      	add	r3, r2
 8011c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011c9c:	2208      	movs	r2, #8
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	1a9b      	subs	r3, r3, r2
 8011ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f023 0307 	bic.w	r3, r3, #7
 8011caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	4a15      	ldr	r2, [pc, #84]	@ (8011d04 <prvHeapInit+0xb4>)
 8011cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011cb2:	4b14      	ldr	r3, [pc, #80]	@ (8011d04 <prvHeapInit+0xb4>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011cba:	4b12      	ldr	r3, [pc, #72]	@ (8011d04 <prvHeapInit+0xb4>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	1ad2      	subs	r2, r2, r3
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8011d04 <prvHeapInit+0xb4>)
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8011d08 <prvHeapInit+0xb8>)
 8011cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	4a09      	ldr	r2, [pc, #36]	@ (8011d0c <prvHeapInit+0xbc>)
 8011ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ce8:	4b09      	ldr	r3, [pc, #36]	@ (8011d10 <prvHeapInit+0xc0>)
 8011cea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011cee:	601a      	str	r2, [r3, #0]
}
 8011cf0:	bf00      	nop
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr
 8011cfc:	200030fc 	.word	0x200030fc
 8011d00:	20011b5c 	.word	0x20011b5c
 8011d04:	20011b64 	.word	0x20011b64
 8011d08:	20011b6c 	.word	0x20011b6c
 8011d0c:	20011b68 	.word	0x20011b68
 8011d10:	20011b78 	.word	0x20011b78

08011d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d14:	b480      	push	{r7}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d1c:	4b28      	ldr	r3, [pc, #160]	@ (8011dc0 <prvInsertBlockIntoFreeList+0xac>)
 8011d1e:	60fb      	str	r3, [r7, #12]
 8011d20:	e002      	b.n	8011d28 <prvInsertBlockIntoFreeList+0x14>
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	60fb      	str	r3, [r7, #12]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d8f7      	bhi.n	8011d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	68ba      	ldr	r2, [r7, #8]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d108      	bne.n	8011d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	685a      	ldr	r2, [r3, #4]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	441a      	add	r2, r3
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	441a      	add	r2, r3
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d118      	bne.n	8011d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	4b15      	ldr	r3, [pc, #84]	@ (8011dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d00d      	beq.n	8011d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685a      	ldr	r2, [r3, #4]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	441a      	add	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	601a      	str	r2, [r3, #0]
 8011d90:	e008      	b.n	8011da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011d92:	4b0c      	ldr	r3, [pc, #48]	@ (8011dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	601a      	str	r2, [r3, #0]
 8011d9a:	e003      	b.n	8011da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011da4:	68fa      	ldr	r2, [r7, #12]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d002      	beq.n	8011db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011db2:	bf00      	nop
 8011db4:	3714      	adds	r7, #20
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	20011b5c 	.word	0x20011b5c
 8011dc4:	20011b64 	.word	0x20011b64

08011dc8 <atoi>:
 8011dc8:	220a      	movs	r2, #10
 8011dca:	2100      	movs	r1, #0
 8011dcc:	f000 b87a 	b.w	8011ec4 <strtol>

08011dd0 <_strtol_l.constprop.0>:
 8011dd0:	2b24      	cmp	r3, #36	@ 0x24
 8011dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd6:	4686      	mov	lr, r0
 8011dd8:	4690      	mov	r8, r2
 8011dda:	d801      	bhi.n	8011de0 <_strtol_l.constprop.0+0x10>
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d106      	bne.n	8011dee <_strtol_l.constprop.0+0x1e>
 8011de0:	f000 ff9a 	bl	8012d18 <__errno>
 8011de4:	2316      	movs	r3, #22
 8011de6:	6003      	str	r3, [r0, #0]
 8011de8:	2000      	movs	r0, #0
 8011dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dee:	4834      	ldr	r0, [pc, #208]	@ (8011ec0 <_strtol_l.constprop.0+0xf0>)
 8011df0:	460d      	mov	r5, r1
 8011df2:	462a      	mov	r2, r5
 8011df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011df8:	5d06      	ldrb	r6, [r0, r4]
 8011dfa:	f016 0608 	ands.w	r6, r6, #8
 8011dfe:	d1f8      	bne.n	8011df2 <_strtol_l.constprop.0+0x22>
 8011e00:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e02:	d12d      	bne.n	8011e60 <_strtol_l.constprop.0+0x90>
 8011e04:	782c      	ldrb	r4, [r5, #0]
 8011e06:	2601      	movs	r6, #1
 8011e08:	1c95      	adds	r5, r2, #2
 8011e0a:	f033 0210 	bics.w	r2, r3, #16
 8011e0e:	d109      	bne.n	8011e24 <_strtol_l.constprop.0+0x54>
 8011e10:	2c30      	cmp	r4, #48	@ 0x30
 8011e12:	d12a      	bne.n	8011e6a <_strtol_l.constprop.0+0x9a>
 8011e14:	782a      	ldrb	r2, [r5, #0]
 8011e16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e1a:	2a58      	cmp	r2, #88	@ 0x58
 8011e1c:	d125      	bne.n	8011e6a <_strtol_l.constprop.0+0x9a>
 8011e1e:	786c      	ldrb	r4, [r5, #1]
 8011e20:	2310      	movs	r3, #16
 8011e22:	3502      	adds	r5, #2
 8011e24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	fbbc f9f3 	udiv	r9, ip, r3
 8011e32:	4610      	mov	r0, r2
 8011e34:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e3c:	2f09      	cmp	r7, #9
 8011e3e:	d81b      	bhi.n	8011e78 <_strtol_l.constprop.0+0xa8>
 8011e40:	463c      	mov	r4, r7
 8011e42:	42a3      	cmp	r3, r4
 8011e44:	dd27      	ble.n	8011e96 <_strtol_l.constprop.0+0xc6>
 8011e46:	1c57      	adds	r7, r2, #1
 8011e48:	d007      	beq.n	8011e5a <_strtol_l.constprop.0+0x8a>
 8011e4a:	4581      	cmp	r9, r0
 8011e4c:	d320      	bcc.n	8011e90 <_strtol_l.constprop.0+0xc0>
 8011e4e:	d101      	bne.n	8011e54 <_strtol_l.constprop.0+0x84>
 8011e50:	45a2      	cmp	sl, r4
 8011e52:	db1d      	blt.n	8011e90 <_strtol_l.constprop.0+0xc0>
 8011e54:	fb00 4003 	mla	r0, r0, r3, r4
 8011e58:	2201      	movs	r2, #1
 8011e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e5e:	e7eb      	b.n	8011e38 <_strtol_l.constprop.0+0x68>
 8011e60:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e62:	bf04      	itt	eq
 8011e64:	782c      	ldrbeq	r4, [r5, #0]
 8011e66:	1c95      	addeq	r5, r2, #2
 8011e68:	e7cf      	b.n	8011e0a <_strtol_l.constprop.0+0x3a>
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d1da      	bne.n	8011e24 <_strtol_l.constprop.0+0x54>
 8011e6e:	2c30      	cmp	r4, #48	@ 0x30
 8011e70:	bf0c      	ite	eq
 8011e72:	2308      	moveq	r3, #8
 8011e74:	230a      	movne	r3, #10
 8011e76:	e7d5      	b.n	8011e24 <_strtol_l.constprop.0+0x54>
 8011e78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011e7c:	2f19      	cmp	r7, #25
 8011e7e:	d801      	bhi.n	8011e84 <_strtol_l.constprop.0+0xb4>
 8011e80:	3c37      	subs	r4, #55	@ 0x37
 8011e82:	e7de      	b.n	8011e42 <_strtol_l.constprop.0+0x72>
 8011e84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011e88:	2f19      	cmp	r7, #25
 8011e8a:	d804      	bhi.n	8011e96 <_strtol_l.constprop.0+0xc6>
 8011e8c:	3c57      	subs	r4, #87	@ 0x57
 8011e8e:	e7d8      	b.n	8011e42 <_strtol_l.constprop.0+0x72>
 8011e90:	f04f 32ff 	mov.w	r2, #4294967295
 8011e94:	e7e1      	b.n	8011e5a <_strtol_l.constprop.0+0x8a>
 8011e96:	1c53      	adds	r3, r2, #1
 8011e98:	d108      	bne.n	8011eac <_strtol_l.constprop.0+0xdc>
 8011e9a:	2322      	movs	r3, #34	@ 0x22
 8011e9c:	f8ce 3000 	str.w	r3, [lr]
 8011ea0:	4660      	mov	r0, ip
 8011ea2:	f1b8 0f00 	cmp.w	r8, #0
 8011ea6:	d0a0      	beq.n	8011dea <_strtol_l.constprop.0+0x1a>
 8011ea8:	1e69      	subs	r1, r5, #1
 8011eaa:	e006      	b.n	8011eba <_strtol_l.constprop.0+0xea>
 8011eac:	b106      	cbz	r6, 8011eb0 <_strtol_l.constprop.0+0xe0>
 8011eae:	4240      	negs	r0, r0
 8011eb0:	f1b8 0f00 	cmp.w	r8, #0
 8011eb4:	d099      	beq.n	8011dea <_strtol_l.constprop.0+0x1a>
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	d1f6      	bne.n	8011ea8 <_strtol_l.constprop.0+0xd8>
 8011eba:	f8c8 1000 	str.w	r1, [r8]
 8011ebe:	e794      	b.n	8011dea <_strtol_l.constprop.0+0x1a>
 8011ec0:	08015f6d 	.word	0x08015f6d

08011ec4 <strtol>:
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	460a      	mov	r2, r1
 8011ec8:	4601      	mov	r1, r0
 8011eca:	4802      	ldr	r0, [pc, #8]	@ (8011ed4 <strtol+0x10>)
 8011ecc:	6800      	ldr	r0, [r0, #0]
 8011ece:	f7ff bf7f 	b.w	8011dd0 <_strtol_l.constprop.0>
 8011ed2:	bf00      	nop
 8011ed4:	200002b4 	.word	0x200002b4

08011ed8 <__cvt>:
 8011ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011edc:	ec57 6b10 	vmov	r6, r7, d0
 8011ee0:	2f00      	cmp	r7, #0
 8011ee2:	460c      	mov	r4, r1
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	463b      	mov	r3, r7
 8011ee8:	bfbb      	ittet	lt
 8011eea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011eee:	461f      	movlt	r7, r3
 8011ef0:	2300      	movge	r3, #0
 8011ef2:	232d      	movlt	r3, #45	@ 0x2d
 8011ef4:	700b      	strb	r3, [r1, #0]
 8011ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011efc:	4691      	mov	r9, r2
 8011efe:	f023 0820 	bic.w	r8, r3, #32
 8011f02:	bfbc      	itt	lt
 8011f04:	4632      	movlt	r2, r6
 8011f06:	4616      	movlt	r6, r2
 8011f08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011f0c:	d005      	beq.n	8011f1a <__cvt+0x42>
 8011f0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011f12:	d100      	bne.n	8011f16 <__cvt+0x3e>
 8011f14:	3401      	adds	r4, #1
 8011f16:	2102      	movs	r1, #2
 8011f18:	e000      	b.n	8011f1c <__cvt+0x44>
 8011f1a:	2103      	movs	r1, #3
 8011f1c:	ab03      	add	r3, sp, #12
 8011f1e:	9301      	str	r3, [sp, #4]
 8011f20:	ab02      	add	r3, sp, #8
 8011f22:	9300      	str	r3, [sp, #0]
 8011f24:	ec47 6b10 	vmov	d0, r6, r7
 8011f28:	4653      	mov	r3, sl
 8011f2a:	4622      	mov	r2, r4
 8011f2c:	f000 ffe0 	bl	8012ef0 <_dtoa_r>
 8011f30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011f34:	4605      	mov	r5, r0
 8011f36:	d119      	bne.n	8011f6c <__cvt+0x94>
 8011f38:	f019 0f01 	tst.w	r9, #1
 8011f3c:	d00e      	beq.n	8011f5c <__cvt+0x84>
 8011f3e:	eb00 0904 	add.w	r9, r0, r4
 8011f42:	2200      	movs	r2, #0
 8011f44:	2300      	movs	r3, #0
 8011f46:	4630      	mov	r0, r6
 8011f48:	4639      	mov	r1, r7
 8011f4a:	f7ee fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f4e:	b108      	cbz	r0, 8011f54 <__cvt+0x7c>
 8011f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f54:	2230      	movs	r2, #48	@ 0x30
 8011f56:	9b03      	ldr	r3, [sp, #12]
 8011f58:	454b      	cmp	r3, r9
 8011f5a:	d31e      	bcc.n	8011f9a <__cvt+0xc2>
 8011f5c:	9b03      	ldr	r3, [sp, #12]
 8011f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f60:	1b5b      	subs	r3, r3, r5
 8011f62:	4628      	mov	r0, r5
 8011f64:	6013      	str	r3, [r2, #0]
 8011f66:	b004      	add	sp, #16
 8011f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011f70:	eb00 0904 	add.w	r9, r0, r4
 8011f74:	d1e5      	bne.n	8011f42 <__cvt+0x6a>
 8011f76:	7803      	ldrb	r3, [r0, #0]
 8011f78:	2b30      	cmp	r3, #48	@ 0x30
 8011f7a:	d10a      	bne.n	8011f92 <__cvt+0xba>
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4630      	mov	r0, r6
 8011f82:	4639      	mov	r1, r7
 8011f84:	f7ee fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f88:	b918      	cbnz	r0, 8011f92 <__cvt+0xba>
 8011f8a:	f1c4 0401 	rsb	r4, r4, #1
 8011f8e:	f8ca 4000 	str.w	r4, [sl]
 8011f92:	f8da 3000 	ldr.w	r3, [sl]
 8011f96:	4499      	add	r9, r3
 8011f98:	e7d3      	b.n	8011f42 <__cvt+0x6a>
 8011f9a:	1c59      	adds	r1, r3, #1
 8011f9c:	9103      	str	r1, [sp, #12]
 8011f9e:	701a      	strb	r2, [r3, #0]
 8011fa0:	e7d9      	b.n	8011f56 <__cvt+0x7e>

08011fa2 <__exponent>:
 8011fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fa4:	2900      	cmp	r1, #0
 8011fa6:	bfba      	itte	lt
 8011fa8:	4249      	neglt	r1, r1
 8011faa:	232d      	movlt	r3, #45	@ 0x2d
 8011fac:	232b      	movge	r3, #43	@ 0x2b
 8011fae:	2909      	cmp	r1, #9
 8011fb0:	7002      	strb	r2, [r0, #0]
 8011fb2:	7043      	strb	r3, [r0, #1]
 8011fb4:	dd29      	ble.n	801200a <__exponent+0x68>
 8011fb6:	f10d 0307 	add.w	r3, sp, #7
 8011fba:	461d      	mov	r5, r3
 8011fbc:	270a      	movs	r7, #10
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8011fc4:	fb07 1416 	mls	r4, r7, r6, r1
 8011fc8:	3430      	adds	r4, #48	@ 0x30
 8011fca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011fce:	460c      	mov	r4, r1
 8011fd0:	2c63      	cmp	r4, #99	@ 0x63
 8011fd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011fd6:	4631      	mov	r1, r6
 8011fd8:	dcf1      	bgt.n	8011fbe <__exponent+0x1c>
 8011fda:	3130      	adds	r1, #48	@ 0x30
 8011fdc:	1e94      	subs	r4, r2, #2
 8011fde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011fe2:	1c41      	adds	r1, r0, #1
 8011fe4:	4623      	mov	r3, r4
 8011fe6:	42ab      	cmp	r3, r5
 8011fe8:	d30a      	bcc.n	8012000 <__exponent+0x5e>
 8011fea:	f10d 0309 	add.w	r3, sp, #9
 8011fee:	1a9b      	subs	r3, r3, r2
 8011ff0:	42ac      	cmp	r4, r5
 8011ff2:	bf88      	it	hi
 8011ff4:	2300      	movhi	r3, #0
 8011ff6:	3302      	adds	r3, #2
 8011ff8:	4403      	add	r3, r0
 8011ffa:	1a18      	subs	r0, r3, r0
 8011ffc:	b003      	add	sp, #12
 8011ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012000:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012004:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012008:	e7ed      	b.n	8011fe6 <__exponent+0x44>
 801200a:	2330      	movs	r3, #48	@ 0x30
 801200c:	3130      	adds	r1, #48	@ 0x30
 801200e:	7083      	strb	r3, [r0, #2]
 8012010:	70c1      	strb	r1, [r0, #3]
 8012012:	1d03      	adds	r3, r0, #4
 8012014:	e7f1      	b.n	8011ffa <__exponent+0x58>
	...

08012018 <_printf_float>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	b08d      	sub	sp, #52	@ 0x34
 801201e:	460c      	mov	r4, r1
 8012020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012024:	4616      	mov	r6, r2
 8012026:	461f      	mov	r7, r3
 8012028:	4605      	mov	r5, r0
 801202a:	f000 fdd5 	bl	8012bd8 <_localeconv_r>
 801202e:	6803      	ldr	r3, [r0, #0]
 8012030:	9304      	str	r3, [sp, #16]
 8012032:	4618      	mov	r0, r3
 8012034:	f7ee f91c 	bl	8000270 <strlen>
 8012038:	2300      	movs	r3, #0
 801203a:	930a      	str	r3, [sp, #40]	@ 0x28
 801203c:	f8d8 3000 	ldr.w	r3, [r8]
 8012040:	9005      	str	r0, [sp, #20]
 8012042:	3307      	adds	r3, #7
 8012044:	f023 0307 	bic.w	r3, r3, #7
 8012048:	f103 0208 	add.w	r2, r3, #8
 801204c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012050:	f8d4 b000 	ldr.w	fp, [r4]
 8012054:	f8c8 2000 	str.w	r2, [r8]
 8012058:	e9d3 8900 	ldrd	r8, r9, [r3]
 801205c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012060:	9307      	str	r3, [sp, #28]
 8012062:	f8cd 8018 	str.w	r8, [sp, #24]
 8012066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801206a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801206e:	4b9c      	ldr	r3, [pc, #624]	@ (80122e0 <_printf_float+0x2c8>)
 8012070:	f04f 32ff 	mov.w	r2, #4294967295
 8012074:	f7ee fd5a 	bl	8000b2c <__aeabi_dcmpun>
 8012078:	bb70      	cbnz	r0, 80120d8 <_printf_float+0xc0>
 801207a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801207e:	4b98      	ldr	r3, [pc, #608]	@ (80122e0 <_printf_float+0x2c8>)
 8012080:	f04f 32ff 	mov.w	r2, #4294967295
 8012084:	f7ee fd34 	bl	8000af0 <__aeabi_dcmple>
 8012088:	bb30      	cbnz	r0, 80120d8 <_printf_float+0xc0>
 801208a:	2200      	movs	r2, #0
 801208c:	2300      	movs	r3, #0
 801208e:	4640      	mov	r0, r8
 8012090:	4649      	mov	r1, r9
 8012092:	f7ee fd23 	bl	8000adc <__aeabi_dcmplt>
 8012096:	b110      	cbz	r0, 801209e <_printf_float+0x86>
 8012098:	232d      	movs	r3, #45	@ 0x2d
 801209a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801209e:	4a91      	ldr	r2, [pc, #580]	@ (80122e4 <_printf_float+0x2cc>)
 80120a0:	4b91      	ldr	r3, [pc, #580]	@ (80122e8 <_printf_float+0x2d0>)
 80120a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80120a6:	bf94      	ite	ls
 80120a8:	4690      	movls	r8, r2
 80120aa:	4698      	movhi	r8, r3
 80120ac:	2303      	movs	r3, #3
 80120ae:	6123      	str	r3, [r4, #16]
 80120b0:	f02b 0304 	bic.w	r3, fp, #4
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	f04f 0900 	mov.w	r9, #0
 80120ba:	9700      	str	r7, [sp, #0]
 80120bc:	4633      	mov	r3, r6
 80120be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80120c0:	4621      	mov	r1, r4
 80120c2:	4628      	mov	r0, r5
 80120c4:	f000 f9d2 	bl	801246c <_printf_common>
 80120c8:	3001      	adds	r0, #1
 80120ca:	f040 808d 	bne.w	80121e8 <_printf_float+0x1d0>
 80120ce:	f04f 30ff 	mov.w	r0, #4294967295
 80120d2:	b00d      	add	sp, #52	@ 0x34
 80120d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d8:	4642      	mov	r2, r8
 80120da:	464b      	mov	r3, r9
 80120dc:	4640      	mov	r0, r8
 80120de:	4649      	mov	r1, r9
 80120e0:	f7ee fd24 	bl	8000b2c <__aeabi_dcmpun>
 80120e4:	b140      	cbz	r0, 80120f8 <_printf_float+0xe0>
 80120e6:	464b      	mov	r3, r9
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	bfbc      	itt	lt
 80120ec:	232d      	movlt	r3, #45	@ 0x2d
 80120ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80120f2:	4a7e      	ldr	r2, [pc, #504]	@ (80122ec <_printf_float+0x2d4>)
 80120f4:	4b7e      	ldr	r3, [pc, #504]	@ (80122f0 <_printf_float+0x2d8>)
 80120f6:	e7d4      	b.n	80120a2 <_printf_float+0x8a>
 80120f8:	6863      	ldr	r3, [r4, #4]
 80120fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80120fe:	9206      	str	r2, [sp, #24]
 8012100:	1c5a      	adds	r2, r3, #1
 8012102:	d13b      	bne.n	801217c <_printf_float+0x164>
 8012104:	2306      	movs	r3, #6
 8012106:	6063      	str	r3, [r4, #4]
 8012108:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801210c:	2300      	movs	r3, #0
 801210e:	6022      	str	r2, [r4, #0]
 8012110:	9303      	str	r3, [sp, #12]
 8012112:	ab0a      	add	r3, sp, #40	@ 0x28
 8012114:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012118:	ab09      	add	r3, sp, #36	@ 0x24
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	6861      	ldr	r1, [r4, #4]
 801211e:	ec49 8b10 	vmov	d0, r8, r9
 8012122:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012126:	4628      	mov	r0, r5
 8012128:	f7ff fed6 	bl	8011ed8 <__cvt>
 801212c:	9b06      	ldr	r3, [sp, #24]
 801212e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012130:	2b47      	cmp	r3, #71	@ 0x47
 8012132:	4680      	mov	r8, r0
 8012134:	d129      	bne.n	801218a <_printf_float+0x172>
 8012136:	1cc8      	adds	r0, r1, #3
 8012138:	db02      	blt.n	8012140 <_printf_float+0x128>
 801213a:	6863      	ldr	r3, [r4, #4]
 801213c:	4299      	cmp	r1, r3
 801213e:	dd41      	ble.n	80121c4 <_printf_float+0x1ac>
 8012140:	f1aa 0a02 	sub.w	sl, sl, #2
 8012144:	fa5f fa8a 	uxtb.w	sl, sl
 8012148:	3901      	subs	r1, #1
 801214a:	4652      	mov	r2, sl
 801214c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012150:	9109      	str	r1, [sp, #36]	@ 0x24
 8012152:	f7ff ff26 	bl	8011fa2 <__exponent>
 8012156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012158:	1813      	adds	r3, r2, r0
 801215a:	2a01      	cmp	r2, #1
 801215c:	4681      	mov	r9, r0
 801215e:	6123      	str	r3, [r4, #16]
 8012160:	dc02      	bgt.n	8012168 <_printf_float+0x150>
 8012162:	6822      	ldr	r2, [r4, #0]
 8012164:	07d2      	lsls	r2, r2, #31
 8012166:	d501      	bpl.n	801216c <_printf_float+0x154>
 8012168:	3301      	adds	r3, #1
 801216a:	6123      	str	r3, [r4, #16]
 801216c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012170:	2b00      	cmp	r3, #0
 8012172:	d0a2      	beq.n	80120ba <_printf_float+0xa2>
 8012174:	232d      	movs	r3, #45	@ 0x2d
 8012176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801217a:	e79e      	b.n	80120ba <_printf_float+0xa2>
 801217c:	9a06      	ldr	r2, [sp, #24]
 801217e:	2a47      	cmp	r2, #71	@ 0x47
 8012180:	d1c2      	bne.n	8012108 <_printf_float+0xf0>
 8012182:	2b00      	cmp	r3, #0
 8012184:	d1c0      	bne.n	8012108 <_printf_float+0xf0>
 8012186:	2301      	movs	r3, #1
 8012188:	e7bd      	b.n	8012106 <_printf_float+0xee>
 801218a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801218e:	d9db      	bls.n	8012148 <_printf_float+0x130>
 8012190:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012194:	d118      	bne.n	80121c8 <_printf_float+0x1b0>
 8012196:	2900      	cmp	r1, #0
 8012198:	6863      	ldr	r3, [r4, #4]
 801219a:	dd0b      	ble.n	80121b4 <_printf_float+0x19c>
 801219c:	6121      	str	r1, [r4, #16]
 801219e:	b913      	cbnz	r3, 80121a6 <_printf_float+0x18e>
 80121a0:	6822      	ldr	r2, [r4, #0]
 80121a2:	07d0      	lsls	r0, r2, #31
 80121a4:	d502      	bpl.n	80121ac <_printf_float+0x194>
 80121a6:	3301      	adds	r3, #1
 80121a8:	440b      	add	r3, r1
 80121aa:	6123      	str	r3, [r4, #16]
 80121ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80121ae:	f04f 0900 	mov.w	r9, #0
 80121b2:	e7db      	b.n	801216c <_printf_float+0x154>
 80121b4:	b913      	cbnz	r3, 80121bc <_printf_float+0x1a4>
 80121b6:	6822      	ldr	r2, [r4, #0]
 80121b8:	07d2      	lsls	r2, r2, #31
 80121ba:	d501      	bpl.n	80121c0 <_printf_float+0x1a8>
 80121bc:	3302      	adds	r3, #2
 80121be:	e7f4      	b.n	80121aa <_printf_float+0x192>
 80121c0:	2301      	movs	r3, #1
 80121c2:	e7f2      	b.n	80121aa <_printf_float+0x192>
 80121c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80121c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121ca:	4299      	cmp	r1, r3
 80121cc:	db05      	blt.n	80121da <_printf_float+0x1c2>
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	6121      	str	r1, [r4, #16]
 80121d2:	07d8      	lsls	r0, r3, #31
 80121d4:	d5ea      	bpl.n	80121ac <_printf_float+0x194>
 80121d6:	1c4b      	adds	r3, r1, #1
 80121d8:	e7e7      	b.n	80121aa <_printf_float+0x192>
 80121da:	2900      	cmp	r1, #0
 80121dc:	bfd4      	ite	le
 80121de:	f1c1 0202 	rsble	r2, r1, #2
 80121e2:	2201      	movgt	r2, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	e7e0      	b.n	80121aa <_printf_float+0x192>
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	055a      	lsls	r2, r3, #21
 80121ec:	d407      	bmi.n	80121fe <_printf_float+0x1e6>
 80121ee:	6923      	ldr	r3, [r4, #16]
 80121f0:	4642      	mov	r2, r8
 80121f2:	4631      	mov	r1, r6
 80121f4:	4628      	mov	r0, r5
 80121f6:	47b8      	blx	r7
 80121f8:	3001      	adds	r0, #1
 80121fa:	d12b      	bne.n	8012254 <_printf_float+0x23c>
 80121fc:	e767      	b.n	80120ce <_printf_float+0xb6>
 80121fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012202:	f240 80dd 	bls.w	80123c0 <_printf_float+0x3a8>
 8012206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801220a:	2200      	movs	r2, #0
 801220c:	2300      	movs	r3, #0
 801220e:	f7ee fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012212:	2800      	cmp	r0, #0
 8012214:	d033      	beq.n	801227e <_printf_float+0x266>
 8012216:	4a37      	ldr	r2, [pc, #220]	@ (80122f4 <_printf_float+0x2dc>)
 8012218:	2301      	movs	r3, #1
 801221a:	4631      	mov	r1, r6
 801221c:	4628      	mov	r0, r5
 801221e:	47b8      	blx	r7
 8012220:	3001      	adds	r0, #1
 8012222:	f43f af54 	beq.w	80120ce <_printf_float+0xb6>
 8012226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801222a:	4543      	cmp	r3, r8
 801222c:	db02      	blt.n	8012234 <_printf_float+0x21c>
 801222e:	6823      	ldr	r3, [r4, #0]
 8012230:	07d8      	lsls	r0, r3, #31
 8012232:	d50f      	bpl.n	8012254 <_printf_float+0x23c>
 8012234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012238:	4631      	mov	r1, r6
 801223a:	4628      	mov	r0, r5
 801223c:	47b8      	blx	r7
 801223e:	3001      	adds	r0, #1
 8012240:	f43f af45 	beq.w	80120ce <_printf_float+0xb6>
 8012244:	f04f 0900 	mov.w	r9, #0
 8012248:	f108 38ff 	add.w	r8, r8, #4294967295
 801224c:	f104 0a1a 	add.w	sl, r4, #26
 8012250:	45c8      	cmp	r8, r9
 8012252:	dc09      	bgt.n	8012268 <_printf_float+0x250>
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	079b      	lsls	r3, r3, #30
 8012258:	f100 8103 	bmi.w	8012462 <_printf_float+0x44a>
 801225c:	68e0      	ldr	r0, [r4, #12]
 801225e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012260:	4298      	cmp	r0, r3
 8012262:	bfb8      	it	lt
 8012264:	4618      	movlt	r0, r3
 8012266:	e734      	b.n	80120d2 <_printf_float+0xba>
 8012268:	2301      	movs	r3, #1
 801226a:	4652      	mov	r2, sl
 801226c:	4631      	mov	r1, r6
 801226e:	4628      	mov	r0, r5
 8012270:	47b8      	blx	r7
 8012272:	3001      	adds	r0, #1
 8012274:	f43f af2b 	beq.w	80120ce <_printf_float+0xb6>
 8012278:	f109 0901 	add.w	r9, r9, #1
 801227c:	e7e8      	b.n	8012250 <_printf_float+0x238>
 801227e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012280:	2b00      	cmp	r3, #0
 8012282:	dc39      	bgt.n	80122f8 <_printf_float+0x2e0>
 8012284:	4a1b      	ldr	r2, [pc, #108]	@ (80122f4 <_printf_float+0x2dc>)
 8012286:	2301      	movs	r3, #1
 8012288:	4631      	mov	r1, r6
 801228a:	4628      	mov	r0, r5
 801228c:	47b8      	blx	r7
 801228e:	3001      	adds	r0, #1
 8012290:	f43f af1d 	beq.w	80120ce <_printf_float+0xb6>
 8012294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012298:	ea59 0303 	orrs.w	r3, r9, r3
 801229c:	d102      	bne.n	80122a4 <_printf_float+0x28c>
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	07d9      	lsls	r1, r3, #31
 80122a2:	d5d7      	bpl.n	8012254 <_printf_float+0x23c>
 80122a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122a8:	4631      	mov	r1, r6
 80122aa:	4628      	mov	r0, r5
 80122ac:	47b8      	blx	r7
 80122ae:	3001      	adds	r0, #1
 80122b0:	f43f af0d 	beq.w	80120ce <_printf_float+0xb6>
 80122b4:	f04f 0a00 	mov.w	sl, #0
 80122b8:	f104 0b1a 	add.w	fp, r4, #26
 80122bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122be:	425b      	negs	r3, r3
 80122c0:	4553      	cmp	r3, sl
 80122c2:	dc01      	bgt.n	80122c8 <_printf_float+0x2b0>
 80122c4:	464b      	mov	r3, r9
 80122c6:	e793      	b.n	80121f0 <_printf_float+0x1d8>
 80122c8:	2301      	movs	r3, #1
 80122ca:	465a      	mov	r2, fp
 80122cc:	4631      	mov	r1, r6
 80122ce:	4628      	mov	r0, r5
 80122d0:	47b8      	blx	r7
 80122d2:	3001      	adds	r0, #1
 80122d4:	f43f aefb 	beq.w	80120ce <_printf_float+0xb6>
 80122d8:	f10a 0a01 	add.w	sl, sl, #1
 80122dc:	e7ee      	b.n	80122bc <_printf_float+0x2a4>
 80122de:	bf00      	nop
 80122e0:	7fefffff 	.word	0x7fefffff
 80122e4:	0801606d 	.word	0x0801606d
 80122e8:	08016071 	.word	0x08016071
 80122ec:	08016075 	.word	0x08016075
 80122f0:	08016079 	.word	0x08016079
 80122f4:	0801607d 	.word	0x0801607d
 80122f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80122fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80122fe:	4553      	cmp	r3, sl
 8012300:	bfa8      	it	ge
 8012302:	4653      	movge	r3, sl
 8012304:	2b00      	cmp	r3, #0
 8012306:	4699      	mov	r9, r3
 8012308:	dc36      	bgt.n	8012378 <_printf_float+0x360>
 801230a:	f04f 0b00 	mov.w	fp, #0
 801230e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012312:	f104 021a 	add.w	r2, r4, #26
 8012316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012318:	9306      	str	r3, [sp, #24]
 801231a:	eba3 0309 	sub.w	r3, r3, r9
 801231e:	455b      	cmp	r3, fp
 8012320:	dc31      	bgt.n	8012386 <_printf_float+0x36e>
 8012322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012324:	459a      	cmp	sl, r3
 8012326:	dc3a      	bgt.n	801239e <_printf_float+0x386>
 8012328:	6823      	ldr	r3, [r4, #0]
 801232a:	07da      	lsls	r2, r3, #31
 801232c:	d437      	bmi.n	801239e <_printf_float+0x386>
 801232e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012330:	ebaa 0903 	sub.w	r9, sl, r3
 8012334:	9b06      	ldr	r3, [sp, #24]
 8012336:	ebaa 0303 	sub.w	r3, sl, r3
 801233a:	4599      	cmp	r9, r3
 801233c:	bfa8      	it	ge
 801233e:	4699      	movge	r9, r3
 8012340:	f1b9 0f00 	cmp.w	r9, #0
 8012344:	dc33      	bgt.n	80123ae <_printf_float+0x396>
 8012346:	f04f 0800 	mov.w	r8, #0
 801234a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801234e:	f104 0b1a 	add.w	fp, r4, #26
 8012352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012354:	ebaa 0303 	sub.w	r3, sl, r3
 8012358:	eba3 0309 	sub.w	r3, r3, r9
 801235c:	4543      	cmp	r3, r8
 801235e:	f77f af79 	ble.w	8012254 <_printf_float+0x23c>
 8012362:	2301      	movs	r3, #1
 8012364:	465a      	mov	r2, fp
 8012366:	4631      	mov	r1, r6
 8012368:	4628      	mov	r0, r5
 801236a:	47b8      	blx	r7
 801236c:	3001      	adds	r0, #1
 801236e:	f43f aeae 	beq.w	80120ce <_printf_float+0xb6>
 8012372:	f108 0801 	add.w	r8, r8, #1
 8012376:	e7ec      	b.n	8012352 <_printf_float+0x33a>
 8012378:	4642      	mov	r2, r8
 801237a:	4631      	mov	r1, r6
 801237c:	4628      	mov	r0, r5
 801237e:	47b8      	blx	r7
 8012380:	3001      	adds	r0, #1
 8012382:	d1c2      	bne.n	801230a <_printf_float+0x2f2>
 8012384:	e6a3      	b.n	80120ce <_printf_float+0xb6>
 8012386:	2301      	movs	r3, #1
 8012388:	4631      	mov	r1, r6
 801238a:	4628      	mov	r0, r5
 801238c:	9206      	str	r2, [sp, #24]
 801238e:	47b8      	blx	r7
 8012390:	3001      	adds	r0, #1
 8012392:	f43f ae9c 	beq.w	80120ce <_printf_float+0xb6>
 8012396:	9a06      	ldr	r2, [sp, #24]
 8012398:	f10b 0b01 	add.w	fp, fp, #1
 801239c:	e7bb      	b.n	8012316 <_printf_float+0x2fe>
 801239e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123a2:	4631      	mov	r1, r6
 80123a4:	4628      	mov	r0, r5
 80123a6:	47b8      	blx	r7
 80123a8:	3001      	adds	r0, #1
 80123aa:	d1c0      	bne.n	801232e <_printf_float+0x316>
 80123ac:	e68f      	b.n	80120ce <_printf_float+0xb6>
 80123ae:	9a06      	ldr	r2, [sp, #24]
 80123b0:	464b      	mov	r3, r9
 80123b2:	4442      	add	r2, r8
 80123b4:	4631      	mov	r1, r6
 80123b6:	4628      	mov	r0, r5
 80123b8:	47b8      	blx	r7
 80123ba:	3001      	adds	r0, #1
 80123bc:	d1c3      	bne.n	8012346 <_printf_float+0x32e>
 80123be:	e686      	b.n	80120ce <_printf_float+0xb6>
 80123c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80123c4:	f1ba 0f01 	cmp.w	sl, #1
 80123c8:	dc01      	bgt.n	80123ce <_printf_float+0x3b6>
 80123ca:	07db      	lsls	r3, r3, #31
 80123cc:	d536      	bpl.n	801243c <_printf_float+0x424>
 80123ce:	2301      	movs	r3, #1
 80123d0:	4642      	mov	r2, r8
 80123d2:	4631      	mov	r1, r6
 80123d4:	4628      	mov	r0, r5
 80123d6:	47b8      	blx	r7
 80123d8:	3001      	adds	r0, #1
 80123da:	f43f ae78 	beq.w	80120ce <_printf_float+0xb6>
 80123de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	f43f ae70 	beq.w	80120ce <_printf_float+0xb6>
 80123ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80123f2:	2200      	movs	r2, #0
 80123f4:	2300      	movs	r3, #0
 80123f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80123fa:	f7ee fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 80123fe:	b9c0      	cbnz	r0, 8012432 <_printf_float+0x41a>
 8012400:	4653      	mov	r3, sl
 8012402:	f108 0201 	add.w	r2, r8, #1
 8012406:	4631      	mov	r1, r6
 8012408:	4628      	mov	r0, r5
 801240a:	47b8      	blx	r7
 801240c:	3001      	adds	r0, #1
 801240e:	d10c      	bne.n	801242a <_printf_float+0x412>
 8012410:	e65d      	b.n	80120ce <_printf_float+0xb6>
 8012412:	2301      	movs	r3, #1
 8012414:	465a      	mov	r2, fp
 8012416:	4631      	mov	r1, r6
 8012418:	4628      	mov	r0, r5
 801241a:	47b8      	blx	r7
 801241c:	3001      	adds	r0, #1
 801241e:	f43f ae56 	beq.w	80120ce <_printf_float+0xb6>
 8012422:	f108 0801 	add.w	r8, r8, #1
 8012426:	45d0      	cmp	r8, sl
 8012428:	dbf3      	blt.n	8012412 <_printf_float+0x3fa>
 801242a:	464b      	mov	r3, r9
 801242c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012430:	e6df      	b.n	80121f2 <_printf_float+0x1da>
 8012432:	f04f 0800 	mov.w	r8, #0
 8012436:	f104 0b1a 	add.w	fp, r4, #26
 801243a:	e7f4      	b.n	8012426 <_printf_float+0x40e>
 801243c:	2301      	movs	r3, #1
 801243e:	4642      	mov	r2, r8
 8012440:	e7e1      	b.n	8012406 <_printf_float+0x3ee>
 8012442:	2301      	movs	r3, #1
 8012444:	464a      	mov	r2, r9
 8012446:	4631      	mov	r1, r6
 8012448:	4628      	mov	r0, r5
 801244a:	47b8      	blx	r7
 801244c:	3001      	adds	r0, #1
 801244e:	f43f ae3e 	beq.w	80120ce <_printf_float+0xb6>
 8012452:	f108 0801 	add.w	r8, r8, #1
 8012456:	68e3      	ldr	r3, [r4, #12]
 8012458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801245a:	1a5b      	subs	r3, r3, r1
 801245c:	4543      	cmp	r3, r8
 801245e:	dcf0      	bgt.n	8012442 <_printf_float+0x42a>
 8012460:	e6fc      	b.n	801225c <_printf_float+0x244>
 8012462:	f04f 0800 	mov.w	r8, #0
 8012466:	f104 0919 	add.w	r9, r4, #25
 801246a:	e7f4      	b.n	8012456 <_printf_float+0x43e>

0801246c <_printf_common>:
 801246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012470:	4616      	mov	r6, r2
 8012472:	4698      	mov	r8, r3
 8012474:	688a      	ldr	r2, [r1, #8]
 8012476:	690b      	ldr	r3, [r1, #16]
 8012478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801247c:	4293      	cmp	r3, r2
 801247e:	bfb8      	it	lt
 8012480:	4613      	movlt	r3, r2
 8012482:	6033      	str	r3, [r6, #0]
 8012484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012488:	4607      	mov	r7, r0
 801248a:	460c      	mov	r4, r1
 801248c:	b10a      	cbz	r2, 8012492 <_printf_common+0x26>
 801248e:	3301      	adds	r3, #1
 8012490:	6033      	str	r3, [r6, #0]
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	0699      	lsls	r1, r3, #26
 8012496:	bf42      	ittt	mi
 8012498:	6833      	ldrmi	r3, [r6, #0]
 801249a:	3302      	addmi	r3, #2
 801249c:	6033      	strmi	r3, [r6, #0]
 801249e:	6825      	ldr	r5, [r4, #0]
 80124a0:	f015 0506 	ands.w	r5, r5, #6
 80124a4:	d106      	bne.n	80124b4 <_printf_common+0x48>
 80124a6:	f104 0a19 	add.w	sl, r4, #25
 80124aa:	68e3      	ldr	r3, [r4, #12]
 80124ac:	6832      	ldr	r2, [r6, #0]
 80124ae:	1a9b      	subs	r3, r3, r2
 80124b0:	42ab      	cmp	r3, r5
 80124b2:	dc26      	bgt.n	8012502 <_printf_common+0x96>
 80124b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80124b8:	6822      	ldr	r2, [r4, #0]
 80124ba:	3b00      	subs	r3, #0
 80124bc:	bf18      	it	ne
 80124be:	2301      	movne	r3, #1
 80124c0:	0692      	lsls	r2, r2, #26
 80124c2:	d42b      	bmi.n	801251c <_printf_common+0xb0>
 80124c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80124c8:	4641      	mov	r1, r8
 80124ca:	4638      	mov	r0, r7
 80124cc:	47c8      	blx	r9
 80124ce:	3001      	adds	r0, #1
 80124d0:	d01e      	beq.n	8012510 <_printf_common+0xa4>
 80124d2:	6823      	ldr	r3, [r4, #0]
 80124d4:	6922      	ldr	r2, [r4, #16]
 80124d6:	f003 0306 	and.w	r3, r3, #6
 80124da:	2b04      	cmp	r3, #4
 80124dc:	bf02      	ittt	eq
 80124de:	68e5      	ldreq	r5, [r4, #12]
 80124e0:	6833      	ldreq	r3, [r6, #0]
 80124e2:	1aed      	subeq	r5, r5, r3
 80124e4:	68a3      	ldr	r3, [r4, #8]
 80124e6:	bf0c      	ite	eq
 80124e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124ec:	2500      	movne	r5, #0
 80124ee:	4293      	cmp	r3, r2
 80124f0:	bfc4      	itt	gt
 80124f2:	1a9b      	subgt	r3, r3, r2
 80124f4:	18ed      	addgt	r5, r5, r3
 80124f6:	2600      	movs	r6, #0
 80124f8:	341a      	adds	r4, #26
 80124fa:	42b5      	cmp	r5, r6
 80124fc:	d11a      	bne.n	8012534 <_printf_common+0xc8>
 80124fe:	2000      	movs	r0, #0
 8012500:	e008      	b.n	8012514 <_printf_common+0xa8>
 8012502:	2301      	movs	r3, #1
 8012504:	4652      	mov	r2, sl
 8012506:	4641      	mov	r1, r8
 8012508:	4638      	mov	r0, r7
 801250a:	47c8      	blx	r9
 801250c:	3001      	adds	r0, #1
 801250e:	d103      	bne.n	8012518 <_printf_common+0xac>
 8012510:	f04f 30ff 	mov.w	r0, #4294967295
 8012514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012518:	3501      	adds	r5, #1
 801251a:	e7c6      	b.n	80124aa <_printf_common+0x3e>
 801251c:	18e1      	adds	r1, r4, r3
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	2030      	movs	r0, #48	@ 0x30
 8012522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012526:	4422      	add	r2, r4
 8012528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801252c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012530:	3302      	adds	r3, #2
 8012532:	e7c7      	b.n	80124c4 <_printf_common+0x58>
 8012534:	2301      	movs	r3, #1
 8012536:	4622      	mov	r2, r4
 8012538:	4641      	mov	r1, r8
 801253a:	4638      	mov	r0, r7
 801253c:	47c8      	blx	r9
 801253e:	3001      	adds	r0, #1
 8012540:	d0e6      	beq.n	8012510 <_printf_common+0xa4>
 8012542:	3601      	adds	r6, #1
 8012544:	e7d9      	b.n	80124fa <_printf_common+0x8e>
	...

08012548 <_printf_i>:
 8012548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801254c:	7e0f      	ldrb	r7, [r1, #24]
 801254e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012550:	2f78      	cmp	r7, #120	@ 0x78
 8012552:	4691      	mov	r9, r2
 8012554:	4680      	mov	r8, r0
 8012556:	460c      	mov	r4, r1
 8012558:	469a      	mov	sl, r3
 801255a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801255e:	d807      	bhi.n	8012570 <_printf_i+0x28>
 8012560:	2f62      	cmp	r7, #98	@ 0x62
 8012562:	d80a      	bhi.n	801257a <_printf_i+0x32>
 8012564:	2f00      	cmp	r7, #0
 8012566:	f000 80d2 	beq.w	801270e <_printf_i+0x1c6>
 801256a:	2f58      	cmp	r7, #88	@ 0x58
 801256c:	f000 80b9 	beq.w	80126e2 <_printf_i+0x19a>
 8012570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012578:	e03a      	b.n	80125f0 <_printf_i+0xa8>
 801257a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801257e:	2b15      	cmp	r3, #21
 8012580:	d8f6      	bhi.n	8012570 <_printf_i+0x28>
 8012582:	a101      	add	r1, pc, #4	@ (adr r1, 8012588 <_printf_i+0x40>)
 8012584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012588:	080125e1 	.word	0x080125e1
 801258c:	080125f5 	.word	0x080125f5
 8012590:	08012571 	.word	0x08012571
 8012594:	08012571 	.word	0x08012571
 8012598:	08012571 	.word	0x08012571
 801259c:	08012571 	.word	0x08012571
 80125a0:	080125f5 	.word	0x080125f5
 80125a4:	08012571 	.word	0x08012571
 80125a8:	08012571 	.word	0x08012571
 80125ac:	08012571 	.word	0x08012571
 80125b0:	08012571 	.word	0x08012571
 80125b4:	080126f5 	.word	0x080126f5
 80125b8:	0801261f 	.word	0x0801261f
 80125bc:	080126af 	.word	0x080126af
 80125c0:	08012571 	.word	0x08012571
 80125c4:	08012571 	.word	0x08012571
 80125c8:	08012717 	.word	0x08012717
 80125cc:	08012571 	.word	0x08012571
 80125d0:	0801261f 	.word	0x0801261f
 80125d4:	08012571 	.word	0x08012571
 80125d8:	08012571 	.word	0x08012571
 80125dc:	080126b7 	.word	0x080126b7
 80125e0:	6833      	ldr	r3, [r6, #0]
 80125e2:	1d1a      	adds	r2, r3, #4
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	6032      	str	r2, [r6, #0]
 80125e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80125ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80125f0:	2301      	movs	r3, #1
 80125f2:	e09d      	b.n	8012730 <_printf_i+0x1e8>
 80125f4:	6833      	ldr	r3, [r6, #0]
 80125f6:	6820      	ldr	r0, [r4, #0]
 80125f8:	1d19      	adds	r1, r3, #4
 80125fa:	6031      	str	r1, [r6, #0]
 80125fc:	0606      	lsls	r6, r0, #24
 80125fe:	d501      	bpl.n	8012604 <_printf_i+0xbc>
 8012600:	681d      	ldr	r5, [r3, #0]
 8012602:	e003      	b.n	801260c <_printf_i+0xc4>
 8012604:	0645      	lsls	r5, r0, #25
 8012606:	d5fb      	bpl.n	8012600 <_printf_i+0xb8>
 8012608:	f9b3 5000 	ldrsh.w	r5, [r3]
 801260c:	2d00      	cmp	r5, #0
 801260e:	da03      	bge.n	8012618 <_printf_i+0xd0>
 8012610:	232d      	movs	r3, #45	@ 0x2d
 8012612:	426d      	negs	r5, r5
 8012614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012618:	4859      	ldr	r0, [pc, #356]	@ (8012780 <_printf_i+0x238>)
 801261a:	230a      	movs	r3, #10
 801261c:	e011      	b.n	8012642 <_printf_i+0xfa>
 801261e:	6821      	ldr	r1, [r4, #0]
 8012620:	6833      	ldr	r3, [r6, #0]
 8012622:	0608      	lsls	r0, r1, #24
 8012624:	f853 5b04 	ldr.w	r5, [r3], #4
 8012628:	d402      	bmi.n	8012630 <_printf_i+0xe8>
 801262a:	0649      	lsls	r1, r1, #25
 801262c:	bf48      	it	mi
 801262e:	b2ad      	uxthmi	r5, r5
 8012630:	2f6f      	cmp	r7, #111	@ 0x6f
 8012632:	4853      	ldr	r0, [pc, #332]	@ (8012780 <_printf_i+0x238>)
 8012634:	6033      	str	r3, [r6, #0]
 8012636:	bf14      	ite	ne
 8012638:	230a      	movne	r3, #10
 801263a:	2308      	moveq	r3, #8
 801263c:	2100      	movs	r1, #0
 801263e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012642:	6866      	ldr	r6, [r4, #4]
 8012644:	60a6      	str	r6, [r4, #8]
 8012646:	2e00      	cmp	r6, #0
 8012648:	bfa2      	ittt	ge
 801264a:	6821      	ldrge	r1, [r4, #0]
 801264c:	f021 0104 	bicge.w	r1, r1, #4
 8012650:	6021      	strge	r1, [r4, #0]
 8012652:	b90d      	cbnz	r5, 8012658 <_printf_i+0x110>
 8012654:	2e00      	cmp	r6, #0
 8012656:	d04b      	beq.n	80126f0 <_printf_i+0x1a8>
 8012658:	4616      	mov	r6, r2
 801265a:	fbb5 f1f3 	udiv	r1, r5, r3
 801265e:	fb03 5711 	mls	r7, r3, r1, r5
 8012662:	5dc7      	ldrb	r7, [r0, r7]
 8012664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012668:	462f      	mov	r7, r5
 801266a:	42bb      	cmp	r3, r7
 801266c:	460d      	mov	r5, r1
 801266e:	d9f4      	bls.n	801265a <_printf_i+0x112>
 8012670:	2b08      	cmp	r3, #8
 8012672:	d10b      	bne.n	801268c <_printf_i+0x144>
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	07df      	lsls	r7, r3, #31
 8012678:	d508      	bpl.n	801268c <_printf_i+0x144>
 801267a:	6923      	ldr	r3, [r4, #16]
 801267c:	6861      	ldr	r1, [r4, #4]
 801267e:	4299      	cmp	r1, r3
 8012680:	bfde      	ittt	le
 8012682:	2330      	movle	r3, #48	@ 0x30
 8012684:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012688:	f106 36ff 	addle.w	r6, r6, #4294967295
 801268c:	1b92      	subs	r2, r2, r6
 801268e:	6122      	str	r2, [r4, #16]
 8012690:	f8cd a000 	str.w	sl, [sp]
 8012694:	464b      	mov	r3, r9
 8012696:	aa03      	add	r2, sp, #12
 8012698:	4621      	mov	r1, r4
 801269a:	4640      	mov	r0, r8
 801269c:	f7ff fee6 	bl	801246c <_printf_common>
 80126a0:	3001      	adds	r0, #1
 80126a2:	d14a      	bne.n	801273a <_printf_i+0x1f2>
 80126a4:	f04f 30ff 	mov.w	r0, #4294967295
 80126a8:	b004      	add	sp, #16
 80126aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ae:	6823      	ldr	r3, [r4, #0]
 80126b0:	f043 0320 	orr.w	r3, r3, #32
 80126b4:	6023      	str	r3, [r4, #0]
 80126b6:	4833      	ldr	r0, [pc, #204]	@ (8012784 <_printf_i+0x23c>)
 80126b8:	2778      	movs	r7, #120	@ 0x78
 80126ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	6831      	ldr	r1, [r6, #0]
 80126c2:	061f      	lsls	r7, r3, #24
 80126c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80126c8:	d402      	bmi.n	80126d0 <_printf_i+0x188>
 80126ca:	065f      	lsls	r7, r3, #25
 80126cc:	bf48      	it	mi
 80126ce:	b2ad      	uxthmi	r5, r5
 80126d0:	6031      	str	r1, [r6, #0]
 80126d2:	07d9      	lsls	r1, r3, #31
 80126d4:	bf44      	itt	mi
 80126d6:	f043 0320 	orrmi.w	r3, r3, #32
 80126da:	6023      	strmi	r3, [r4, #0]
 80126dc:	b11d      	cbz	r5, 80126e6 <_printf_i+0x19e>
 80126de:	2310      	movs	r3, #16
 80126e0:	e7ac      	b.n	801263c <_printf_i+0xf4>
 80126e2:	4827      	ldr	r0, [pc, #156]	@ (8012780 <_printf_i+0x238>)
 80126e4:	e7e9      	b.n	80126ba <_printf_i+0x172>
 80126e6:	6823      	ldr	r3, [r4, #0]
 80126e8:	f023 0320 	bic.w	r3, r3, #32
 80126ec:	6023      	str	r3, [r4, #0]
 80126ee:	e7f6      	b.n	80126de <_printf_i+0x196>
 80126f0:	4616      	mov	r6, r2
 80126f2:	e7bd      	b.n	8012670 <_printf_i+0x128>
 80126f4:	6833      	ldr	r3, [r6, #0]
 80126f6:	6825      	ldr	r5, [r4, #0]
 80126f8:	6961      	ldr	r1, [r4, #20]
 80126fa:	1d18      	adds	r0, r3, #4
 80126fc:	6030      	str	r0, [r6, #0]
 80126fe:	062e      	lsls	r6, r5, #24
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	d501      	bpl.n	8012708 <_printf_i+0x1c0>
 8012704:	6019      	str	r1, [r3, #0]
 8012706:	e002      	b.n	801270e <_printf_i+0x1c6>
 8012708:	0668      	lsls	r0, r5, #25
 801270a:	d5fb      	bpl.n	8012704 <_printf_i+0x1bc>
 801270c:	8019      	strh	r1, [r3, #0]
 801270e:	2300      	movs	r3, #0
 8012710:	6123      	str	r3, [r4, #16]
 8012712:	4616      	mov	r6, r2
 8012714:	e7bc      	b.n	8012690 <_printf_i+0x148>
 8012716:	6833      	ldr	r3, [r6, #0]
 8012718:	1d1a      	adds	r2, r3, #4
 801271a:	6032      	str	r2, [r6, #0]
 801271c:	681e      	ldr	r6, [r3, #0]
 801271e:	6862      	ldr	r2, [r4, #4]
 8012720:	2100      	movs	r1, #0
 8012722:	4630      	mov	r0, r6
 8012724:	f7ed fd54 	bl	80001d0 <memchr>
 8012728:	b108      	cbz	r0, 801272e <_printf_i+0x1e6>
 801272a:	1b80      	subs	r0, r0, r6
 801272c:	6060      	str	r0, [r4, #4]
 801272e:	6863      	ldr	r3, [r4, #4]
 8012730:	6123      	str	r3, [r4, #16]
 8012732:	2300      	movs	r3, #0
 8012734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012738:	e7aa      	b.n	8012690 <_printf_i+0x148>
 801273a:	6923      	ldr	r3, [r4, #16]
 801273c:	4632      	mov	r2, r6
 801273e:	4649      	mov	r1, r9
 8012740:	4640      	mov	r0, r8
 8012742:	47d0      	blx	sl
 8012744:	3001      	adds	r0, #1
 8012746:	d0ad      	beq.n	80126a4 <_printf_i+0x15c>
 8012748:	6823      	ldr	r3, [r4, #0]
 801274a:	079b      	lsls	r3, r3, #30
 801274c:	d413      	bmi.n	8012776 <_printf_i+0x22e>
 801274e:	68e0      	ldr	r0, [r4, #12]
 8012750:	9b03      	ldr	r3, [sp, #12]
 8012752:	4298      	cmp	r0, r3
 8012754:	bfb8      	it	lt
 8012756:	4618      	movlt	r0, r3
 8012758:	e7a6      	b.n	80126a8 <_printf_i+0x160>
 801275a:	2301      	movs	r3, #1
 801275c:	4632      	mov	r2, r6
 801275e:	4649      	mov	r1, r9
 8012760:	4640      	mov	r0, r8
 8012762:	47d0      	blx	sl
 8012764:	3001      	adds	r0, #1
 8012766:	d09d      	beq.n	80126a4 <_printf_i+0x15c>
 8012768:	3501      	adds	r5, #1
 801276a:	68e3      	ldr	r3, [r4, #12]
 801276c:	9903      	ldr	r1, [sp, #12]
 801276e:	1a5b      	subs	r3, r3, r1
 8012770:	42ab      	cmp	r3, r5
 8012772:	dcf2      	bgt.n	801275a <_printf_i+0x212>
 8012774:	e7eb      	b.n	801274e <_printf_i+0x206>
 8012776:	2500      	movs	r5, #0
 8012778:	f104 0619 	add.w	r6, r4, #25
 801277c:	e7f5      	b.n	801276a <_printf_i+0x222>
 801277e:	bf00      	nop
 8012780:	0801607f 	.word	0x0801607f
 8012784:	08016090 	.word	0x08016090

08012788 <std>:
 8012788:	2300      	movs	r3, #0
 801278a:	b510      	push	{r4, lr}
 801278c:	4604      	mov	r4, r0
 801278e:	e9c0 3300 	strd	r3, r3, [r0]
 8012792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012796:	6083      	str	r3, [r0, #8]
 8012798:	8181      	strh	r1, [r0, #12]
 801279a:	6643      	str	r3, [r0, #100]	@ 0x64
 801279c:	81c2      	strh	r2, [r0, #14]
 801279e:	6183      	str	r3, [r0, #24]
 80127a0:	4619      	mov	r1, r3
 80127a2:	2208      	movs	r2, #8
 80127a4:	305c      	adds	r0, #92	@ 0x5c
 80127a6:	f000 f914 	bl	80129d2 <memset>
 80127aa:	4b0d      	ldr	r3, [pc, #52]	@ (80127e0 <std+0x58>)
 80127ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80127ae:	4b0d      	ldr	r3, [pc, #52]	@ (80127e4 <std+0x5c>)
 80127b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80127b2:	4b0d      	ldr	r3, [pc, #52]	@ (80127e8 <std+0x60>)
 80127b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80127b6:	4b0d      	ldr	r3, [pc, #52]	@ (80127ec <std+0x64>)
 80127b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80127ba:	4b0d      	ldr	r3, [pc, #52]	@ (80127f0 <std+0x68>)
 80127bc:	6224      	str	r4, [r4, #32]
 80127be:	429c      	cmp	r4, r3
 80127c0:	d006      	beq.n	80127d0 <std+0x48>
 80127c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80127c6:	4294      	cmp	r4, r2
 80127c8:	d002      	beq.n	80127d0 <std+0x48>
 80127ca:	33d0      	adds	r3, #208	@ 0xd0
 80127cc:	429c      	cmp	r4, r3
 80127ce:	d105      	bne.n	80127dc <std+0x54>
 80127d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80127d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127d8:	f000 bac8 	b.w	8012d6c <__retarget_lock_init_recursive>
 80127dc:	bd10      	pop	{r4, pc}
 80127de:	bf00      	nop
 80127e0:	0801294d 	.word	0x0801294d
 80127e4:	0801296f 	.word	0x0801296f
 80127e8:	080129a7 	.word	0x080129a7
 80127ec:	080129cb 	.word	0x080129cb
 80127f0:	20011b7c 	.word	0x20011b7c

080127f4 <stdio_exit_handler>:
 80127f4:	4a02      	ldr	r2, [pc, #8]	@ (8012800 <stdio_exit_handler+0xc>)
 80127f6:	4903      	ldr	r1, [pc, #12]	@ (8012804 <stdio_exit_handler+0x10>)
 80127f8:	4803      	ldr	r0, [pc, #12]	@ (8012808 <stdio_exit_handler+0x14>)
 80127fa:	f000 b869 	b.w	80128d0 <_fwalk_sglue>
 80127fe:	bf00      	nop
 8012800:	200002a8 	.word	0x200002a8
 8012804:	08014735 	.word	0x08014735
 8012808:	200002b8 	.word	0x200002b8

0801280c <cleanup_stdio>:
 801280c:	6841      	ldr	r1, [r0, #4]
 801280e:	4b0c      	ldr	r3, [pc, #48]	@ (8012840 <cleanup_stdio+0x34>)
 8012810:	4299      	cmp	r1, r3
 8012812:	b510      	push	{r4, lr}
 8012814:	4604      	mov	r4, r0
 8012816:	d001      	beq.n	801281c <cleanup_stdio+0x10>
 8012818:	f001 ff8c 	bl	8014734 <_fflush_r>
 801281c:	68a1      	ldr	r1, [r4, #8]
 801281e:	4b09      	ldr	r3, [pc, #36]	@ (8012844 <cleanup_stdio+0x38>)
 8012820:	4299      	cmp	r1, r3
 8012822:	d002      	beq.n	801282a <cleanup_stdio+0x1e>
 8012824:	4620      	mov	r0, r4
 8012826:	f001 ff85 	bl	8014734 <_fflush_r>
 801282a:	68e1      	ldr	r1, [r4, #12]
 801282c:	4b06      	ldr	r3, [pc, #24]	@ (8012848 <cleanup_stdio+0x3c>)
 801282e:	4299      	cmp	r1, r3
 8012830:	d004      	beq.n	801283c <cleanup_stdio+0x30>
 8012832:	4620      	mov	r0, r4
 8012834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012838:	f001 bf7c 	b.w	8014734 <_fflush_r>
 801283c:	bd10      	pop	{r4, pc}
 801283e:	bf00      	nop
 8012840:	20011b7c 	.word	0x20011b7c
 8012844:	20011be4 	.word	0x20011be4
 8012848:	20011c4c 	.word	0x20011c4c

0801284c <global_stdio_init.part.0>:
 801284c:	b510      	push	{r4, lr}
 801284e:	4b0b      	ldr	r3, [pc, #44]	@ (801287c <global_stdio_init.part.0+0x30>)
 8012850:	4c0b      	ldr	r4, [pc, #44]	@ (8012880 <global_stdio_init.part.0+0x34>)
 8012852:	4a0c      	ldr	r2, [pc, #48]	@ (8012884 <global_stdio_init.part.0+0x38>)
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	4620      	mov	r0, r4
 8012858:	2200      	movs	r2, #0
 801285a:	2104      	movs	r1, #4
 801285c:	f7ff ff94 	bl	8012788 <std>
 8012860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012864:	2201      	movs	r2, #1
 8012866:	2109      	movs	r1, #9
 8012868:	f7ff ff8e 	bl	8012788 <std>
 801286c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012870:	2202      	movs	r2, #2
 8012872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012876:	2112      	movs	r1, #18
 8012878:	f7ff bf86 	b.w	8012788 <std>
 801287c:	20011cb4 	.word	0x20011cb4
 8012880:	20011b7c 	.word	0x20011b7c
 8012884:	080127f5 	.word	0x080127f5

08012888 <__sfp_lock_acquire>:
 8012888:	4801      	ldr	r0, [pc, #4]	@ (8012890 <__sfp_lock_acquire+0x8>)
 801288a:	f000 ba70 	b.w	8012d6e <__retarget_lock_acquire_recursive>
 801288e:	bf00      	nop
 8012890:	20011cbd 	.word	0x20011cbd

08012894 <__sfp_lock_release>:
 8012894:	4801      	ldr	r0, [pc, #4]	@ (801289c <__sfp_lock_release+0x8>)
 8012896:	f000 ba6b 	b.w	8012d70 <__retarget_lock_release_recursive>
 801289a:	bf00      	nop
 801289c:	20011cbd 	.word	0x20011cbd

080128a0 <__sinit>:
 80128a0:	b510      	push	{r4, lr}
 80128a2:	4604      	mov	r4, r0
 80128a4:	f7ff fff0 	bl	8012888 <__sfp_lock_acquire>
 80128a8:	6a23      	ldr	r3, [r4, #32]
 80128aa:	b11b      	cbz	r3, 80128b4 <__sinit+0x14>
 80128ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128b0:	f7ff bff0 	b.w	8012894 <__sfp_lock_release>
 80128b4:	4b04      	ldr	r3, [pc, #16]	@ (80128c8 <__sinit+0x28>)
 80128b6:	6223      	str	r3, [r4, #32]
 80128b8:	4b04      	ldr	r3, [pc, #16]	@ (80128cc <__sinit+0x2c>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1f5      	bne.n	80128ac <__sinit+0xc>
 80128c0:	f7ff ffc4 	bl	801284c <global_stdio_init.part.0>
 80128c4:	e7f2      	b.n	80128ac <__sinit+0xc>
 80128c6:	bf00      	nop
 80128c8:	0801280d 	.word	0x0801280d
 80128cc:	20011cb4 	.word	0x20011cb4

080128d0 <_fwalk_sglue>:
 80128d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128d4:	4607      	mov	r7, r0
 80128d6:	4688      	mov	r8, r1
 80128d8:	4614      	mov	r4, r2
 80128da:	2600      	movs	r6, #0
 80128dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80128e0:	f1b9 0901 	subs.w	r9, r9, #1
 80128e4:	d505      	bpl.n	80128f2 <_fwalk_sglue+0x22>
 80128e6:	6824      	ldr	r4, [r4, #0]
 80128e8:	2c00      	cmp	r4, #0
 80128ea:	d1f7      	bne.n	80128dc <_fwalk_sglue+0xc>
 80128ec:	4630      	mov	r0, r6
 80128ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f2:	89ab      	ldrh	r3, [r5, #12]
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d907      	bls.n	8012908 <_fwalk_sglue+0x38>
 80128f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80128fc:	3301      	adds	r3, #1
 80128fe:	d003      	beq.n	8012908 <_fwalk_sglue+0x38>
 8012900:	4629      	mov	r1, r5
 8012902:	4638      	mov	r0, r7
 8012904:	47c0      	blx	r8
 8012906:	4306      	orrs	r6, r0
 8012908:	3568      	adds	r5, #104	@ 0x68
 801290a:	e7e9      	b.n	80128e0 <_fwalk_sglue+0x10>

0801290c <siprintf>:
 801290c:	b40e      	push	{r1, r2, r3}
 801290e:	b500      	push	{lr}
 8012910:	b09c      	sub	sp, #112	@ 0x70
 8012912:	ab1d      	add	r3, sp, #116	@ 0x74
 8012914:	9002      	str	r0, [sp, #8]
 8012916:	9006      	str	r0, [sp, #24]
 8012918:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801291c:	4809      	ldr	r0, [pc, #36]	@ (8012944 <siprintf+0x38>)
 801291e:	9107      	str	r1, [sp, #28]
 8012920:	9104      	str	r1, [sp, #16]
 8012922:	4909      	ldr	r1, [pc, #36]	@ (8012948 <siprintf+0x3c>)
 8012924:	f853 2b04 	ldr.w	r2, [r3], #4
 8012928:	9105      	str	r1, [sp, #20]
 801292a:	6800      	ldr	r0, [r0, #0]
 801292c:	9301      	str	r3, [sp, #4]
 801292e:	a902      	add	r1, sp, #8
 8012930:	f001 fd80 	bl	8014434 <_svfiprintf_r>
 8012934:	9b02      	ldr	r3, [sp, #8]
 8012936:	2200      	movs	r2, #0
 8012938:	701a      	strb	r2, [r3, #0]
 801293a:	b01c      	add	sp, #112	@ 0x70
 801293c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012940:	b003      	add	sp, #12
 8012942:	4770      	bx	lr
 8012944:	200002b4 	.word	0x200002b4
 8012948:	ffff0208 	.word	0xffff0208

0801294c <__sread>:
 801294c:	b510      	push	{r4, lr}
 801294e:	460c      	mov	r4, r1
 8012950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012954:	f000 f9bc 	bl	8012cd0 <_read_r>
 8012958:	2800      	cmp	r0, #0
 801295a:	bfab      	itete	ge
 801295c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801295e:	89a3      	ldrhlt	r3, [r4, #12]
 8012960:	181b      	addge	r3, r3, r0
 8012962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012966:	bfac      	ite	ge
 8012968:	6563      	strge	r3, [r4, #84]	@ 0x54
 801296a:	81a3      	strhlt	r3, [r4, #12]
 801296c:	bd10      	pop	{r4, pc}

0801296e <__swrite>:
 801296e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012972:	461f      	mov	r7, r3
 8012974:	898b      	ldrh	r3, [r1, #12]
 8012976:	05db      	lsls	r3, r3, #23
 8012978:	4605      	mov	r5, r0
 801297a:	460c      	mov	r4, r1
 801297c:	4616      	mov	r6, r2
 801297e:	d505      	bpl.n	801298c <__swrite+0x1e>
 8012980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012984:	2302      	movs	r3, #2
 8012986:	2200      	movs	r2, #0
 8012988:	f000 f990 	bl	8012cac <_lseek_r>
 801298c:	89a3      	ldrh	r3, [r4, #12]
 801298e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012996:	81a3      	strh	r3, [r4, #12]
 8012998:	4632      	mov	r2, r6
 801299a:	463b      	mov	r3, r7
 801299c:	4628      	mov	r0, r5
 801299e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129a2:	f000 b9a7 	b.w	8012cf4 <_write_r>

080129a6 <__sseek>:
 80129a6:	b510      	push	{r4, lr}
 80129a8:	460c      	mov	r4, r1
 80129aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129ae:	f000 f97d 	bl	8012cac <_lseek_r>
 80129b2:	1c43      	adds	r3, r0, #1
 80129b4:	89a3      	ldrh	r3, [r4, #12]
 80129b6:	bf15      	itete	ne
 80129b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80129ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80129be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80129c2:	81a3      	strheq	r3, [r4, #12]
 80129c4:	bf18      	it	ne
 80129c6:	81a3      	strhne	r3, [r4, #12]
 80129c8:	bd10      	pop	{r4, pc}

080129ca <__sclose>:
 80129ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129ce:	f000 b907 	b.w	8012be0 <_close_r>

080129d2 <memset>:
 80129d2:	4402      	add	r2, r0
 80129d4:	4603      	mov	r3, r0
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d100      	bne.n	80129dc <memset+0xa>
 80129da:	4770      	bx	lr
 80129dc:	f803 1b01 	strb.w	r1, [r3], #1
 80129e0:	e7f9      	b.n	80129d6 <memset+0x4>

080129e2 <strchr>:
 80129e2:	b2c9      	uxtb	r1, r1
 80129e4:	4603      	mov	r3, r0
 80129e6:	4618      	mov	r0, r3
 80129e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129ec:	b112      	cbz	r2, 80129f4 <strchr+0x12>
 80129ee:	428a      	cmp	r2, r1
 80129f0:	d1f9      	bne.n	80129e6 <strchr+0x4>
 80129f2:	4770      	bx	lr
 80129f4:	2900      	cmp	r1, #0
 80129f6:	bf18      	it	ne
 80129f8:	2000      	movne	r0, #0
 80129fa:	4770      	bx	lr

080129fc <strncpy>:
 80129fc:	b510      	push	{r4, lr}
 80129fe:	3901      	subs	r1, #1
 8012a00:	4603      	mov	r3, r0
 8012a02:	b132      	cbz	r2, 8012a12 <strncpy+0x16>
 8012a04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a08:	f803 4b01 	strb.w	r4, [r3], #1
 8012a0c:	3a01      	subs	r2, #1
 8012a0e:	2c00      	cmp	r4, #0
 8012a10:	d1f7      	bne.n	8012a02 <strncpy+0x6>
 8012a12:	441a      	add	r2, r3
 8012a14:	2100      	movs	r1, #0
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d100      	bne.n	8012a1c <strncpy+0x20>
 8012a1a:	bd10      	pop	{r4, pc}
 8012a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8012a20:	e7f9      	b.n	8012a16 <strncpy+0x1a>

08012a22 <strstr>:
 8012a22:	780a      	ldrb	r2, [r1, #0]
 8012a24:	b570      	push	{r4, r5, r6, lr}
 8012a26:	b96a      	cbnz	r2, 8012a44 <strstr+0x22>
 8012a28:	bd70      	pop	{r4, r5, r6, pc}
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d109      	bne.n	8012a42 <strstr+0x20>
 8012a2e:	460c      	mov	r4, r1
 8012a30:	4605      	mov	r5, r0
 8012a32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d0f6      	beq.n	8012a28 <strstr+0x6>
 8012a3a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012a3e:	429e      	cmp	r6, r3
 8012a40:	d0f7      	beq.n	8012a32 <strstr+0x10>
 8012a42:	3001      	adds	r0, #1
 8012a44:	7803      	ldrb	r3, [r0, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d1ef      	bne.n	8012a2a <strstr+0x8>
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	e7ec      	b.n	8012a28 <strstr+0x6>
	...

08012a50 <gmtime>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	4b0b      	ldr	r3, [pc, #44]	@ (8012a80 <gmtime+0x30>)
 8012a54:	681d      	ldr	r5, [r3, #0]
 8012a56:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012a58:	4604      	mov	r4, r0
 8012a5a:	b953      	cbnz	r3, 8012a72 <gmtime+0x22>
 8012a5c:	2024      	movs	r0, #36	@ 0x24
 8012a5e:	f001 f855 	bl	8013b0c <malloc>
 8012a62:	4602      	mov	r2, r0
 8012a64:	6368      	str	r0, [r5, #52]	@ 0x34
 8012a66:	b920      	cbnz	r0, 8012a72 <gmtime+0x22>
 8012a68:	4b06      	ldr	r3, [pc, #24]	@ (8012a84 <gmtime+0x34>)
 8012a6a:	4807      	ldr	r0, [pc, #28]	@ (8012a88 <gmtime+0x38>)
 8012a6c:	213d      	movs	r1, #61	@ 0x3d
 8012a6e:	f000 f997 	bl	8012da0 <__assert_func>
 8012a72:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8012a74:	4620      	mov	r0, r4
 8012a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a7a:	f000 b807 	b.w	8012a8c <gmtime_r>
 8012a7e:	bf00      	nop
 8012a80:	200002b4 	.word	0x200002b4
 8012a84:	080160a1 	.word	0x080160a1
 8012a88:	080160b8 	.word	0x080160b8

08012a8c <gmtime_r>:
 8012a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a90:	4a4d      	ldr	r2, [pc, #308]	@ (8012bc8 <gmtime_r+0x13c>)
 8012a92:	460c      	mov	r4, r1
 8012a94:	2300      	movs	r3, #0
 8012a96:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012a9a:	f7ee f8f5 	bl	8000c88 <__aeabi_ldivmod>
 8012a9e:	2a00      	cmp	r2, #0
 8012aa0:	bfbc      	itt	lt
 8012aa2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8012aa6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8012aaa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8012aae:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8012ab2:	fbb2 f3f1 	udiv	r3, r2, r1
 8012ab6:	fb01 2213 	mls	r2, r1, r3, r2
 8012aba:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8012abe:	bfac      	ite	ge
 8012ac0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8012ac4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8012ac8:	60a3      	str	r3, [r4, #8]
 8012aca:	fbb2 f3f1 	udiv	r3, r2, r1
 8012ace:	fb01 2213 	mls	r2, r1, r3, r2
 8012ad2:	6063      	str	r3, [r4, #4]
 8012ad4:	6022      	str	r2, [r4, #0]
 8012ad6:	1cc3      	adds	r3, r0, #3
 8012ad8:	2207      	movs	r2, #7
 8012ada:	fb93 f2f2 	sdiv	r2, r3, r2
 8012ade:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8012ae2:	1a9b      	subs	r3, r3, r2
 8012ae4:	bf48      	it	mi
 8012ae6:	3307      	addmi	r3, #7
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	61a3      	str	r3, [r4, #24]
 8012aec:	bfb8      	it	lt
 8012aee:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8012af2:	4936      	ldr	r1, [pc, #216]	@ (8012bcc <gmtime_r+0x140>)
 8012af4:	bfae      	itee	ge
 8012af6:	fb90 f1f1 	sdivge	r1, r0, r1
 8012afa:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8012afe:	fb93 f1f1 	sdivlt	r1, r3, r1
 8012b02:	4b33      	ldr	r3, [pc, #204]	@ (8012bd0 <gmtime_r+0x144>)
 8012b04:	fb03 0001 	mla	r0, r3, r1, r0
 8012b08:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8012b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8012b10:	4403      	add	r3, r0
 8012b12:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8012b16:	fbb0 f2fc 	udiv	r2, r0, ip
 8012b1a:	1a9b      	subs	r3, r3, r2
 8012b1c:	f240 176d 	movw	r7, #365	@ 0x16d
 8012b20:	4a2c      	ldr	r2, [pc, #176]	@ (8012bd4 <gmtime_r+0x148>)
 8012b22:	fbb0 f2f2 	udiv	r2, r0, r2
 8012b26:	2664      	movs	r6, #100	@ 0x64
 8012b28:	1a9b      	subs	r3, r3, r2
 8012b2a:	fbb3 f2f7 	udiv	r2, r3, r7
 8012b2e:	fbb3 f3fc 	udiv	r3, r3, ip
 8012b32:	fbb2 f5f6 	udiv	r5, r2, r6
 8012b36:	1aeb      	subs	r3, r5, r3
 8012b38:	4403      	add	r3, r0
 8012b3a:	fb07 3312 	mls	r3, r7, r2, r3
 8012b3e:	2099      	movs	r0, #153	@ 0x99
 8012b40:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8012b44:	3702      	adds	r7, #2
 8012b46:	f103 0e01 	add.w	lr, r3, #1
 8012b4a:	fbb7 fcf0 	udiv	ip, r7, r0
 8012b4e:	fb00 f00c 	mul.w	r0, r0, ip
 8012b52:	3002      	adds	r0, #2
 8012b54:	f04f 0805 	mov.w	r8, #5
 8012b58:	fbb0 f0f8 	udiv	r0, r0, r8
 8012b5c:	ebae 0000 	sub.w	r0, lr, r0
 8012b60:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8012b64:	4577      	cmp	r7, lr
 8012b66:	bf8c      	ite	hi
 8012b68:	f06f 0709 	mvnhi.w	r7, #9
 8012b6c:	2702      	movls	r7, #2
 8012b6e:	4467      	add	r7, ip
 8012b70:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8012b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b78:	2f01      	cmp	r7, #1
 8012b7a:	bf98      	it	ls
 8012b7c:	3101      	addls	r1, #1
 8012b7e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8012b82:	d30c      	bcc.n	8012b9e <gmtime_r+0x112>
 8012b84:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8012b88:	61e3      	str	r3, [r4, #28]
 8012b8a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8012b8e:	2300      	movs	r3, #0
 8012b90:	60e0      	str	r0, [r4, #12]
 8012b92:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8012b96:	6223      	str	r3, [r4, #32]
 8012b98:	4620      	mov	r0, r4
 8012b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9e:	f012 0f03 	tst.w	r2, #3
 8012ba2:	d102      	bne.n	8012baa <gmtime_r+0x11e>
 8012ba4:	fb06 2515 	mls	r5, r6, r5, r2
 8012ba8:	b95d      	cbnz	r5, 8012bc2 <gmtime_r+0x136>
 8012baa:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8012bae:	fbb2 f6f5 	udiv	r6, r2, r5
 8012bb2:	fb05 2216 	mls	r2, r5, r6, r2
 8012bb6:	fab2 f282 	clz	r2, r2
 8012bba:	0952      	lsrs	r2, r2, #5
 8012bbc:	333b      	adds	r3, #59	@ 0x3b
 8012bbe:	4413      	add	r3, r2
 8012bc0:	e7e2      	b.n	8012b88 <gmtime_r+0xfc>
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	e7fa      	b.n	8012bbc <gmtime_r+0x130>
 8012bc6:	bf00      	nop
 8012bc8:	00015180 	.word	0x00015180
 8012bcc:	00023ab1 	.word	0x00023ab1
 8012bd0:	fffdc54f 	.word	0xfffdc54f
 8012bd4:	00023ab0 	.word	0x00023ab0

08012bd8 <_localeconv_r>:
 8012bd8:	4800      	ldr	r0, [pc, #0]	@ (8012bdc <_localeconv_r+0x4>)
 8012bda:	4770      	bx	lr
 8012bdc:	200003f4 	.word	0x200003f4

08012be0 <_close_r>:
 8012be0:	b538      	push	{r3, r4, r5, lr}
 8012be2:	4d06      	ldr	r5, [pc, #24]	@ (8012bfc <_close_r+0x1c>)
 8012be4:	2300      	movs	r3, #0
 8012be6:	4604      	mov	r4, r0
 8012be8:	4608      	mov	r0, r1
 8012bea:	602b      	str	r3, [r5, #0]
 8012bec:	f7f6 fe5a 	bl	80098a4 <_close>
 8012bf0:	1c43      	adds	r3, r0, #1
 8012bf2:	d102      	bne.n	8012bfa <_close_r+0x1a>
 8012bf4:	682b      	ldr	r3, [r5, #0]
 8012bf6:	b103      	cbz	r3, 8012bfa <_close_r+0x1a>
 8012bf8:	6023      	str	r3, [r4, #0]
 8012bfa:	bd38      	pop	{r3, r4, r5, pc}
 8012bfc:	20011cb8 	.word	0x20011cb8

08012c00 <_reclaim_reent>:
 8012c00:	4b29      	ldr	r3, [pc, #164]	@ (8012ca8 <_reclaim_reent+0xa8>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4283      	cmp	r3, r0
 8012c06:	b570      	push	{r4, r5, r6, lr}
 8012c08:	4604      	mov	r4, r0
 8012c0a:	d04b      	beq.n	8012ca4 <_reclaim_reent+0xa4>
 8012c0c:	69c3      	ldr	r3, [r0, #28]
 8012c0e:	b1ab      	cbz	r3, 8012c3c <_reclaim_reent+0x3c>
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	b16b      	cbz	r3, 8012c30 <_reclaim_reent+0x30>
 8012c14:	2500      	movs	r5, #0
 8012c16:	69e3      	ldr	r3, [r4, #28]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	5959      	ldr	r1, [r3, r5]
 8012c1c:	2900      	cmp	r1, #0
 8012c1e:	d13b      	bne.n	8012c98 <_reclaim_reent+0x98>
 8012c20:	3504      	adds	r5, #4
 8012c22:	2d80      	cmp	r5, #128	@ 0x80
 8012c24:	d1f7      	bne.n	8012c16 <_reclaim_reent+0x16>
 8012c26:	69e3      	ldr	r3, [r4, #28]
 8012c28:	4620      	mov	r0, r4
 8012c2a:	68d9      	ldr	r1, [r3, #12]
 8012c2c:	f000 ff24 	bl	8013a78 <_free_r>
 8012c30:	69e3      	ldr	r3, [r4, #28]
 8012c32:	6819      	ldr	r1, [r3, #0]
 8012c34:	b111      	cbz	r1, 8012c3c <_reclaim_reent+0x3c>
 8012c36:	4620      	mov	r0, r4
 8012c38:	f000 ff1e 	bl	8013a78 <_free_r>
 8012c3c:	6961      	ldr	r1, [r4, #20]
 8012c3e:	b111      	cbz	r1, 8012c46 <_reclaim_reent+0x46>
 8012c40:	4620      	mov	r0, r4
 8012c42:	f000 ff19 	bl	8013a78 <_free_r>
 8012c46:	69e1      	ldr	r1, [r4, #28]
 8012c48:	b111      	cbz	r1, 8012c50 <_reclaim_reent+0x50>
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 ff14 	bl	8013a78 <_free_r>
 8012c50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012c52:	b111      	cbz	r1, 8012c5a <_reclaim_reent+0x5a>
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 ff0f 	bl	8013a78 <_free_r>
 8012c5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c5c:	b111      	cbz	r1, 8012c64 <_reclaim_reent+0x64>
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f000 ff0a 	bl	8013a78 <_free_r>
 8012c64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012c66:	b111      	cbz	r1, 8012c6e <_reclaim_reent+0x6e>
 8012c68:	4620      	mov	r0, r4
 8012c6a:	f000 ff05 	bl	8013a78 <_free_r>
 8012c6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012c70:	b111      	cbz	r1, 8012c78 <_reclaim_reent+0x78>
 8012c72:	4620      	mov	r0, r4
 8012c74:	f000 ff00 	bl	8013a78 <_free_r>
 8012c78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012c7a:	b111      	cbz	r1, 8012c82 <_reclaim_reent+0x82>
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	f000 fefb 	bl	8013a78 <_free_r>
 8012c82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012c84:	b111      	cbz	r1, 8012c8c <_reclaim_reent+0x8c>
 8012c86:	4620      	mov	r0, r4
 8012c88:	f000 fef6 	bl	8013a78 <_free_r>
 8012c8c:	6a23      	ldr	r3, [r4, #32]
 8012c8e:	b14b      	cbz	r3, 8012ca4 <_reclaim_reent+0xa4>
 8012c90:	4620      	mov	r0, r4
 8012c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c96:	4718      	bx	r3
 8012c98:	680e      	ldr	r6, [r1, #0]
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f000 feec 	bl	8013a78 <_free_r>
 8012ca0:	4631      	mov	r1, r6
 8012ca2:	e7bb      	b.n	8012c1c <_reclaim_reent+0x1c>
 8012ca4:	bd70      	pop	{r4, r5, r6, pc}
 8012ca6:	bf00      	nop
 8012ca8:	200002b4 	.word	0x200002b4

08012cac <_lseek_r>:
 8012cac:	b538      	push	{r3, r4, r5, lr}
 8012cae:	4d07      	ldr	r5, [pc, #28]	@ (8012ccc <_lseek_r+0x20>)
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	4608      	mov	r0, r1
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	602a      	str	r2, [r5, #0]
 8012cba:	461a      	mov	r2, r3
 8012cbc:	f7f6 fe19 	bl	80098f2 <_lseek>
 8012cc0:	1c43      	adds	r3, r0, #1
 8012cc2:	d102      	bne.n	8012cca <_lseek_r+0x1e>
 8012cc4:	682b      	ldr	r3, [r5, #0]
 8012cc6:	b103      	cbz	r3, 8012cca <_lseek_r+0x1e>
 8012cc8:	6023      	str	r3, [r4, #0]
 8012cca:	bd38      	pop	{r3, r4, r5, pc}
 8012ccc:	20011cb8 	.word	0x20011cb8

08012cd0 <_read_r>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4d07      	ldr	r5, [pc, #28]	@ (8012cf0 <_read_r+0x20>)
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	4608      	mov	r0, r1
 8012cd8:	4611      	mov	r1, r2
 8012cda:	2200      	movs	r2, #0
 8012cdc:	602a      	str	r2, [r5, #0]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	f7f6 fda7 	bl	8009832 <_read>
 8012ce4:	1c43      	adds	r3, r0, #1
 8012ce6:	d102      	bne.n	8012cee <_read_r+0x1e>
 8012ce8:	682b      	ldr	r3, [r5, #0]
 8012cea:	b103      	cbz	r3, 8012cee <_read_r+0x1e>
 8012cec:	6023      	str	r3, [r4, #0]
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
 8012cf0:	20011cb8 	.word	0x20011cb8

08012cf4 <_write_r>:
 8012cf4:	b538      	push	{r3, r4, r5, lr}
 8012cf6:	4d07      	ldr	r5, [pc, #28]	@ (8012d14 <_write_r+0x20>)
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	4608      	mov	r0, r1
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	2200      	movs	r2, #0
 8012d00:	602a      	str	r2, [r5, #0]
 8012d02:	461a      	mov	r2, r3
 8012d04:	f7f6 fdb2 	bl	800986c <_write>
 8012d08:	1c43      	adds	r3, r0, #1
 8012d0a:	d102      	bne.n	8012d12 <_write_r+0x1e>
 8012d0c:	682b      	ldr	r3, [r5, #0]
 8012d0e:	b103      	cbz	r3, 8012d12 <_write_r+0x1e>
 8012d10:	6023      	str	r3, [r4, #0]
 8012d12:	bd38      	pop	{r3, r4, r5, pc}
 8012d14:	20011cb8 	.word	0x20011cb8

08012d18 <__errno>:
 8012d18:	4b01      	ldr	r3, [pc, #4]	@ (8012d20 <__errno+0x8>)
 8012d1a:	6818      	ldr	r0, [r3, #0]
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop
 8012d20:	200002b4 	.word	0x200002b4

08012d24 <__libc_init_array>:
 8012d24:	b570      	push	{r4, r5, r6, lr}
 8012d26:	4d0d      	ldr	r5, [pc, #52]	@ (8012d5c <__libc_init_array+0x38>)
 8012d28:	4c0d      	ldr	r4, [pc, #52]	@ (8012d60 <__libc_init_array+0x3c>)
 8012d2a:	1b64      	subs	r4, r4, r5
 8012d2c:	10a4      	asrs	r4, r4, #2
 8012d2e:	2600      	movs	r6, #0
 8012d30:	42a6      	cmp	r6, r4
 8012d32:	d109      	bne.n	8012d48 <__libc_init_array+0x24>
 8012d34:	4d0b      	ldr	r5, [pc, #44]	@ (8012d64 <__libc_init_array+0x40>)
 8012d36:	4c0c      	ldr	r4, [pc, #48]	@ (8012d68 <__libc_init_array+0x44>)
 8012d38:	f002 f86e 	bl	8014e18 <_init>
 8012d3c:	1b64      	subs	r4, r4, r5
 8012d3e:	10a4      	asrs	r4, r4, #2
 8012d40:	2600      	movs	r6, #0
 8012d42:	42a6      	cmp	r6, r4
 8012d44:	d105      	bne.n	8012d52 <__libc_init_array+0x2e>
 8012d46:	bd70      	pop	{r4, r5, r6, pc}
 8012d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d4c:	4798      	blx	r3
 8012d4e:	3601      	adds	r6, #1
 8012d50:	e7ee      	b.n	8012d30 <__libc_init_array+0xc>
 8012d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d56:	4798      	blx	r3
 8012d58:	3601      	adds	r6, #1
 8012d5a:	e7f2      	b.n	8012d42 <__libc_init_array+0x1e>
 8012d5c:	08016b18 	.word	0x08016b18
 8012d60:	08016b18 	.word	0x08016b18
 8012d64:	08016b18 	.word	0x08016b18
 8012d68:	08016b2c 	.word	0x08016b2c

08012d6c <__retarget_lock_init_recursive>:
 8012d6c:	4770      	bx	lr

08012d6e <__retarget_lock_acquire_recursive>:
 8012d6e:	4770      	bx	lr

08012d70 <__retarget_lock_release_recursive>:
 8012d70:	4770      	bx	lr

08012d72 <strcpy>:
 8012d72:	4603      	mov	r3, r0
 8012d74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d78:	f803 2b01 	strb.w	r2, [r3], #1
 8012d7c:	2a00      	cmp	r2, #0
 8012d7e:	d1f9      	bne.n	8012d74 <strcpy+0x2>
 8012d80:	4770      	bx	lr

08012d82 <memcpy>:
 8012d82:	440a      	add	r2, r1
 8012d84:	4291      	cmp	r1, r2
 8012d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8012d8a:	d100      	bne.n	8012d8e <memcpy+0xc>
 8012d8c:	4770      	bx	lr
 8012d8e:	b510      	push	{r4, lr}
 8012d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d98:	4291      	cmp	r1, r2
 8012d9a:	d1f9      	bne.n	8012d90 <memcpy+0xe>
 8012d9c:	bd10      	pop	{r4, pc}
	...

08012da0 <__assert_func>:
 8012da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012da2:	4614      	mov	r4, r2
 8012da4:	461a      	mov	r2, r3
 8012da6:	4b09      	ldr	r3, [pc, #36]	@ (8012dcc <__assert_func+0x2c>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	4605      	mov	r5, r0
 8012dac:	68d8      	ldr	r0, [r3, #12]
 8012dae:	b954      	cbnz	r4, 8012dc6 <__assert_func+0x26>
 8012db0:	4b07      	ldr	r3, [pc, #28]	@ (8012dd0 <__assert_func+0x30>)
 8012db2:	461c      	mov	r4, r3
 8012db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012db8:	9100      	str	r1, [sp, #0]
 8012dba:	462b      	mov	r3, r5
 8012dbc:	4905      	ldr	r1, [pc, #20]	@ (8012dd4 <__assert_func+0x34>)
 8012dbe:	f001 fce1 	bl	8014784 <fiprintf>
 8012dc2:	f001 fdaf 	bl	8014924 <abort>
 8012dc6:	4b04      	ldr	r3, [pc, #16]	@ (8012dd8 <__assert_func+0x38>)
 8012dc8:	e7f4      	b.n	8012db4 <__assert_func+0x14>
 8012dca:	bf00      	nop
 8012dcc:	200002b4 	.word	0x200002b4
 8012dd0:	0801614b 	.word	0x0801614b
 8012dd4:	0801611d 	.word	0x0801611d
 8012dd8:	08016110 	.word	0x08016110

08012ddc <quorem>:
 8012ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de0:	6903      	ldr	r3, [r0, #16]
 8012de2:	690c      	ldr	r4, [r1, #16]
 8012de4:	42a3      	cmp	r3, r4
 8012de6:	4607      	mov	r7, r0
 8012de8:	db7e      	blt.n	8012ee8 <quorem+0x10c>
 8012dea:	3c01      	subs	r4, #1
 8012dec:	f101 0814 	add.w	r8, r1, #20
 8012df0:	00a3      	lsls	r3, r4, #2
 8012df2:	f100 0514 	add.w	r5, r0, #20
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012dfc:	9301      	str	r3, [sp, #4]
 8012dfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e06:	3301      	adds	r3, #1
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e12:	d32e      	bcc.n	8012e72 <quorem+0x96>
 8012e14:	f04f 0a00 	mov.w	sl, #0
 8012e18:	46c4      	mov	ip, r8
 8012e1a:	46ae      	mov	lr, r5
 8012e1c:	46d3      	mov	fp, sl
 8012e1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012e22:	b298      	uxth	r0, r3
 8012e24:	fb06 a000 	mla	r0, r6, r0, sl
 8012e28:	0c02      	lsrs	r2, r0, #16
 8012e2a:	0c1b      	lsrs	r3, r3, #16
 8012e2c:	fb06 2303 	mla	r3, r6, r3, r2
 8012e30:	f8de 2000 	ldr.w	r2, [lr]
 8012e34:	b280      	uxth	r0, r0
 8012e36:	b292      	uxth	r2, r2
 8012e38:	1a12      	subs	r2, r2, r0
 8012e3a:	445a      	add	r2, fp
 8012e3c:	f8de 0000 	ldr.w	r0, [lr]
 8012e40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012e4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012e4e:	b292      	uxth	r2, r2
 8012e50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012e54:	45e1      	cmp	r9, ip
 8012e56:	f84e 2b04 	str.w	r2, [lr], #4
 8012e5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012e5e:	d2de      	bcs.n	8012e1e <quorem+0x42>
 8012e60:	9b00      	ldr	r3, [sp, #0]
 8012e62:	58eb      	ldr	r3, [r5, r3]
 8012e64:	b92b      	cbnz	r3, 8012e72 <quorem+0x96>
 8012e66:	9b01      	ldr	r3, [sp, #4]
 8012e68:	3b04      	subs	r3, #4
 8012e6a:	429d      	cmp	r5, r3
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	d32f      	bcc.n	8012ed0 <quorem+0xf4>
 8012e70:	613c      	str	r4, [r7, #16]
 8012e72:	4638      	mov	r0, r7
 8012e74:	f001 f97a 	bl	801416c <__mcmp>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	db25      	blt.n	8012ec8 <quorem+0xec>
 8012e7c:	4629      	mov	r1, r5
 8012e7e:	2000      	movs	r0, #0
 8012e80:	f858 2b04 	ldr.w	r2, [r8], #4
 8012e84:	f8d1 c000 	ldr.w	ip, [r1]
 8012e88:	fa1f fe82 	uxth.w	lr, r2
 8012e8c:	fa1f f38c 	uxth.w	r3, ip
 8012e90:	eba3 030e 	sub.w	r3, r3, lr
 8012e94:	4403      	add	r3, r0
 8012e96:	0c12      	lsrs	r2, r2, #16
 8012e98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012e9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ea6:	45c1      	cmp	r9, r8
 8012ea8:	f841 3b04 	str.w	r3, [r1], #4
 8012eac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012eb0:	d2e6      	bcs.n	8012e80 <quorem+0xa4>
 8012eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012eba:	b922      	cbnz	r2, 8012ec6 <quorem+0xea>
 8012ebc:	3b04      	subs	r3, #4
 8012ebe:	429d      	cmp	r5, r3
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	d30b      	bcc.n	8012edc <quorem+0x100>
 8012ec4:	613c      	str	r4, [r7, #16]
 8012ec6:	3601      	adds	r6, #1
 8012ec8:	4630      	mov	r0, r6
 8012eca:	b003      	add	sp, #12
 8012ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed0:	6812      	ldr	r2, [r2, #0]
 8012ed2:	3b04      	subs	r3, #4
 8012ed4:	2a00      	cmp	r2, #0
 8012ed6:	d1cb      	bne.n	8012e70 <quorem+0x94>
 8012ed8:	3c01      	subs	r4, #1
 8012eda:	e7c6      	b.n	8012e6a <quorem+0x8e>
 8012edc:	6812      	ldr	r2, [r2, #0]
 8012ede:	3b04      	subs	r3, #4
 8012ee0:	2a00      	cmp	r2, #0
 8012ee2:	d1ef      	bne.n	8012ec4 <quorem+0xe8>
 8012ee4:	3c01      	subs	r4, #1
 8012ee6:	e7ea      	b.n	8012ebe <quorem+0xe2>
 8012ee8:	2000      	movs	r0, #0
 8012eea:	e7ee      	b.n	8012eca <quorem+0xee>
 8012eec:	0000      	movs	r0, r0
	...

08012ef0 <_dtoa_r>:
 8012ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef4:	69c7      	ldr	r7, [r0, #28]
 8012ef6:	b099      	sub	sp, #100	@ 0x64
 8012ef8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012efc:	ec55 4b10 	vmov	r4, r5, d0
 8012f00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012f02:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f04:	4683      	mov	fp, r0
 8012f06:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012f0a:	b97f      	cbnz	r7, 8012f2c <_dtoa_r+0x3c>
 8012f0c:	2010      	movs	r0, #16
 8012f0e:	f000 fdfd 	bl	8013b0c <malloc>
 8012f12:	4602      	mov	r2, r0
 8012f14:	f8cb 001c 	str.w	r0, [fp, #28]
 8012f18:	b920      	cbnz	r0, 8012f24 <_dtoa_r+0x34>
 8012f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80131b8 <_dtoa_r+0x2c8>)
 8012f1c:	21ef      	movs	r1, #239	@ 0xef
 8012f1e:	48a7      	ldr	r0, [pc, #668]	@ (80131bc <_dtoa_r+0x2cc>)
 8012f20:	f7ff ff3e 	bl	8012da0 <__assert_func>
 8012f24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012f28:	6007      	str	r7, [r0, #0]
 8012f2a:	60c7      	str	r7, [r0, #12]
 8012f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012f30:	6819      	ldr	r1, [r3, #0]
 8012f32:	b159      	cbz	r1, 8012f4c <_dtoa_r+0x5c>
 8012f34:	685a      	ldr	r2, [r3, #4]
 8012f36:	604a      	str	r2, [r1, #4]
 8012f38:	2301      	movs	r3, #1
 8012f3a:	4093      	lsls	r3, r2
 8012f3c:	608b      	str	r3, [r1, #8]
 8012f3e:	4658      	mov	r0, fp
 8012f40:	f000 feda 	bl	8013cf8 <_Bfree>
 8012f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]
 8012f4c:	1e2b      	subs	r3, r5, #0
 8012f4e:	bfb9      	ittee	lt
 8012f50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012f54:	9303      	strlt	r3, [sp, #12]
 8012f56:	2300      	movge	r3, #0
 8012f58:	6033      	strge	r3, [r6, #0]
 8012f5a:	9f03      	ldr	r7, [sp, #12]
 8012f5c:	4b98      	ldr	r3, [pc, #608]	@ (80131c0 <_dtoa_r+0x2d0>)
 8012f5e:	bfbc      	itt	lt
 8012f60:	2201      	movlt	r2, #1
 8012f62:	6032      	strlt	r2, [r6, #0]
 8012f64:	43bb      	bics	r3, r7
 8012f66:	d112      	bne.n	8012f8e <_dtoa_r+0x9e>
 8012f68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012f6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012f6e:	6013      	str	r3, [r2, #0]
 8012f70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f74:	4323      	orrs	r3, r4
 8012f76:	f000 854d 	beq.w	8013a14 <_dtoa_r+0xb24>
 8012f7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012f7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80131d4 <_dtoa_r+0x2e4>
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f000 854f 	beq.w	8013a24 <_dtoa_r+0xb34>
 8012f86:	f10a 0303 	add.w	r3, sl, #3
 8012f8a:	f000 bd49 	b.w	8013a20 <_dtoa_r+0xb30>
 8012f8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f92:	2200      	movs	r2, #0
 8012f94:	ec51 0b17 	vmov	r0, r1, d7
 8012f98:	2300      	movs	r3, #0
 8012f9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012f9e:	f7ed fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fa2:	4680      	mov	r8, r0
 8012fa4:	b158      	cbz	r0, 8012fbe <_dtoa_r+0xce>
 8012fa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012fa8:	2301      	movs	r3, #1
 8012faa:	6013      	str	r3, [r2, #0]
 8012fac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012fae:	b113      	cbz	r3, 8012fb6 <_dtoa_r+0xc6>
 8012fb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012fb2:	4b84      	ldr	r3, [pc, #528]	@ (80131c4 <_dtoa_r+0x2d4>)
 8012fb4:	6013      	str	r3, [r2, #0]
 8012fb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80131d8 <_dtoa_r+0x2e8>
 8012fba:	f000 bd33 	b.w	8013a24 <_dtoa_r+0xb34>
 8012fbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012fc2:	aa16      	add	r2, sp, #88	@ 0x58
 8012fc4:	a917      	add	r1, sp, #92	@ 0x5c
 8012fc6:	4658      	mov	r0, fp
 8012fc8:	f001 f980 	bl	80142cc <__d2b>
 8012fcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012fd0:	4681      	mov	r9, r0
 8012fd2:	2e00      	cmp	r6, #0
 8012fd4:	d077      	beq.n	80130c6 <_dtoa_r+0x1d6>
 8012fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012fd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012fe4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012fe8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012fec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	4b74      	ldr	r3, [pc, #464]	@ (80131c8 <_dtoa_r+0x2d8>)
 8012ff6:	f7ed f947 	bl	8000288 <__aeabi_dsub>
 8012ffa:	a369      	add	r3, pc, #420	@ (adr r3, 80131a0 <_dtoa_r+0x2b0>)
 8012ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013000:	f7ed fafa 	bl	80005f8 <__aeabi_dmul>
 8013004:	a368      	add	r3, pc, #416	@ (adr r3, 80131a8 <_dtoa_r+0x2b8>)
 8013006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300a:	f7ed f93f 	bl	800028c <__adddf3>
 801300e:	4604      	mov	r4, r0
 8013010:	4630      	mov	r0, r6
 8013012:	460d      	mov	r5, r1
 8013014:	f7ed fa86 	bl	8000524 <__aeabi_i2d>
 8013018:	a365      	add	r3, pc, #404	@ (adr r3, 80131b0 <_dtoa_r+0x2c0>)
 801301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301e:	f7ed faeb 	bl	80005f8 <__aeabi_dmul>
 8013022:	4602      	mov	r2, r0
 8013024:	460b      	mov	r3, r1
 8013026:	4620      	mov	r0, r4
 8013028:	4629      	mov	r1, r5
 801302a:	f7ed f92f 	bl	800028c <__adddf3>
 801302e:	4604      	mov	r4, r0
 8013030:	460d      	mov	r5, r1
 8013032:	f7ed fd91 	bl	8000b58 <__aeabi_d2iz>
 8013036:	2200      	movs	r2, #0
 8013038:	4607      	mov	r7, r0
 801303a:	2300      	movs	r3, #0
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed fd4c 	bl	8000adc <__aeabi_dcmplt>
 8013044:	b140      	cbz	r0, 8013058 <_dtoa_r+0x168>
 8013046:	4638      	mov	r0, r7
 8013048:	f7ed fa6c 	bl	8000524 <__aeabi_i2d>
 801304c:	4622      	mov	r2, r4
 801304e:	462b      	mov	r3, r5
 8013050:	f7ed fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013054:	b900      	cbnz	r0, 8013058 <_dtoa_r+0x168>
 8013056:	3f01      	subs	r7, #1
 8013058:	2f16      	cmp	r7, #22
 801305a:	d851      	bhi.n	8013100 <_dtoa_r+0x210>
 801305c:	4b5b      	ldr	r3, [pc, #364]	@ (80131cc <_dtoa_r+0x2dc>)
 801305e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801306a:	f7ed fd37 	bl	8000adc <__aeabi_dcmplt>
 801306e:	2800      	cmp	r0, #0
 8013070:	d048      	beq.n	8013104 <_dtoa_r+0x214>
 8013072:	3f01      	subs	r7, #1
 8013074:	2300      	movs	r3, #0
 8013076:	9312      	str	r3, [sp, #72]	@ 0x48
 8013078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801307a:	1b9b      	subs	r3, r3, r6
 801307c:	1e5a      	subs	r2, r3, #1
 801307e:	bf44      	itt	mi
 8013080:	f1c3 0801 	rsbmi	r8, r3, #1
 8013084:	2300      	movmi	r3, #0
 8013086:	9208      	str	r2, [sp, #32]
 8013088:	bf54      	ite	pl
 801308a:	f04f 0800 	movpl.w	r8, #0
 801308e:	9308      	strmi	r3, [sp, #32]
 8013090:	2f00      	cmp	r7, #0
 8013092:	db39      	blt.n	8013108 <_dtoa_r+0x218>
 8013094:	9b08      	ldr	r3, [sp, #32]
 8013096:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013098:	443b      	add	r3, r7
 801309a:	9308      	str	r3, [sp, #32]
 801309c:	2300      	movs	r3, #0
 801309e:	930a      	str	r3, [sp, #40]	@ 0x28
 80130a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130a2:	2b09      	cmp	r3, #9
 80130a4:	d864      	bhi.n	8013170 <_dtoa_r+0x280>
 80130a6:	2b05      	cmp	r3, #5
 80130a8:	bfc4      	itt	gt
 80130aa:	3b04      	subgt	r3, #4
 80130ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80130ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130b0:	f1a3 0302 	sub.w	r3, r3, #2
 80130b4:	bfcc      	ite	gt
 80130b6:	2400      	movgt	r4, #0
 80130b8:	2401      	movle	r4, #1
 80130ba:	2b03      	cmp	r3, #3
 80130bc:	d863      	bhi.n	8013186 <_dtoa_r+0x296>
 80130be:	e8df f003 	tbb	[pc, r3]
 80130c2:	372a      	.short	0x372a
 80130c4:	5535      	.short	0x5535
 80130c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80130ca:	441e      	add	r6, r3
 80130cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80130d0:	2b20      	cmp	r3, #32
 80130d2:	bfc1      	itttt	gt
 80130d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80130d8:	409f      	lslgt	r7, r3
 80130da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80130de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80130e2:	bfd6      	itet	le
 80130e4:	f1c3 0320 	rsble	r3, r3, #32
 80130e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80130ec:	fa04 f003 	lslle.w	r0, r4, r3
 80130f0:	f7ed fa08 	bl	8000504 <__aeabi_ui2d>
 80130f4:	2201      	movs	r2, #1
 80130f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80130fa:	3e01      	subs	r6, #1
 80130fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80130fe:	e777      	b.n	8012ff0 <_dtoa_r+0x100>
 8013100:	2301      	movs	r3, #1
 8013102:	e7b8      	b.n	8013076 <_dtoa_r+0x186>
 8013104:	9012      	str	r0, [sp, #72]	@ 0x48
 8013106:	e7b7      	b.n	8013078 <_dtoa_r+0x188>
 8013108:	427b      	negs	r3, r7
 801310a:	930a      	str	r3, [sp, #40]	@ 0x28
 801310c:	2300      	movs	r3, #0
 801310e:	eba8 0807 	sub.w	r8, r8, r7
 8013112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013114:	e7c4      	b.n	80130a0 <_dtoa_r+0x1b0>
 8013116:	2300      	movs	r3, #0
 8013118:	930b      	str	r3, [sp, #44]	@ 0x2c
 801311a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801311c:	2b00      	cmp	r3, #0
 801311e:	dc35      	bgt.n	801318c <_dtoa_r+0x29c>
 8013120:	2301      	movs	r3, #1
 8013122:	9300      	str	r3, [sp, #0]
 8013124:	9307      	str	r3, [sp, #28]
 8013126:	461a      	mov	r2, r3
 8013128:	920e      	str	r2, [sp, #56]	@ 0x38
 801312a:	e00b      	b.n	8013144 <_dtoa_r+0x254>
 801312c:	2301      	movs	r3, #1
 801312e:	e7f3      	b.n	8013118 <_dtoa_r+0x228>
 8013130:	2300      	movs	r3, #0
 8013132:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013136:	18fb      	adds	r3, r7, r3
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	3301      	adds	r3, #1
 801313c:	2b01      	cmp	r3, #1
 801313e:	9307      	str	r3, [sp, #28]
 8013140:	bfb8      	it	lt
 8013142:	2301      	movlt	r3, #1
 8013144:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013148:	2100      	movs	r1, #0
 801314a:	2204      	movs	r2, #4
 801314c:	f102 0514 	add.w	r5, r2, #20
 8013150:	429d      	cmp	r5, r3
 8013152:	d91f      	bls.n	8013194 <_dtoa_r+0x2a4>
 8013154:	6041      	str	r1, [r0, #4]
 8013156:	4658      	mov	r0, fp
 8013158:	f000 fd8e 	bl	8013c78 <_Balloc>
 801315c:	4682      	mov	sl, r0
 801315e:	2800      	cmp	r0, #0
 8013160:	d13c      	bne.n	80131dc <_dtoa_r+0x2ec>
 8013162:	4b1b      	ldr	r3, [pc, #108]	@ (80131d0 <_dtoa_r+0x2e0>)
 8013164:	4602      	mov	r2, r0
 8013166:	f240 11af 	movw	r1, #431	@ 0x1af
 801316a:	e6d8      	b.n	8012f1e <_dtoa_r+0x2e>
 801316c:	2301      	movs	r3, #1
 801316e:	e7e0      	b.n	8013132 <_dtoa_r+0x242>
 8013170:	2401      	movs	r4, #1
 8013172:	2300      	movs	r3, #0
 8013174:	9309      	str	r3, [sp, #36]	@ 0x24
 8013176:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013178:	f04f 33ff 	mov.w	r3, #4294967295
 801317c:	9300      	str	r3, [sp, #0]
 801317e:	9307      	str	r3, [sp, #28]
 8013180:	2200      	movs	r2, #0
 8013182:	2312      	movs	r3, #18
 8013184:	e7d0      	b.n	8013128 <_dtoa_r+0x238>
 8013186:	2301      	movs	r3, #1
 8013188:	930b      	str	r3, [sp, #44]	@ 0x2c
 801318a:	e7f5      	b.n	8013178 <_dtoa_r+0x288>
 801318c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	9307      	str	r3, [sp, #28]
 8013192:	e7d7      	b.n	8013144 <_dtoa_r+0x254>
 8013194:	3101      	adds	r1, #1
 8013196:	0052      	lsls	r2, r2, #1
 8013198:	e7d8      	b.n	801314c <_dtoa_r+0x25c>
 801319a:	bf00      	nop
 801319c:	f3af 8000 	nop.w
 80131a0:	636f4361 	.word	0x636f4361
 80131a4:	3fd287a7 	.word	0x3fd287a7
 80131a8:	8b60c8b3 	.word	0x8b60c8b3
 80131ac:	3fc68a28 	.word	0x3fc68a28
 80131b0:	509f79fb 	.word	0x509f79fb
 80131b4:	3fd34413 	.word	0x3fd34413
 80131b8:	080160a1 	.word	0x080160a1
 80131bc:	08016159 	.word	0x08016159
 80131c0:	7ff00000 	.word	0x7ff00000
 80131c4:	0801607e 	.word	0x0801607e
 80131c8:	3ff80000 	.word	0x3ff80000
 80131cc:	08016250 	.word	0x08016250
 80131d0:	080161b1 	.word	0x080161b1
 80131d4:	08016155 	.word	0x08016155
 80131d8:	0801607d 	.word	0x0801607d
 80131dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80131e0:	6018      	str	r0, [r3, #0]
 80131e2:	9b07      	ldr	r3, [sp, #28]
 80131e4:	2b0e      	cmp	r3, #14
 80131e6:	f200 80a4 	bhi.w	8013332 <_dtoa_r+0x442>
 80131ea:	2c00      	cmp	r4, #0
 80131ec:	f000 80a1 	beq.w	8013332 <_dtoa_r+0x442>
 80131f0:	2f00      	cmp	r7, #0
 80131f2:	dd33      	ble.n	801325c <_dtoa_r+0x36c>
 80131f4:	4bad      	ldr	r3, [pc, #692]	@ (80134ac <_dtoa_r+0x5bc>)
 80131f6:	f007 020f 	and.w	r2, r7, #15
 80131fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131fe:	ed93 7b00 	vldr	d7, [r3]
 8013202:	05f8      	lsls	r0, r7, #23
 8013204:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013208:	ea4f 1427 	mov.w	r4, r7, asr #4
 801320c:	d516      	bpl.n	801323c <_dtoa_r+0x34c>
 801320e:	4ba8      	ldr	r3, [pc, #672]	@ (80134b0 <_dtoa_r+0x5c0>)
 8013210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013218:	f7ed fb18 	bl	800084c <__aeabi_ddiv>
 801321c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013220:	f004 040f 	and.w	r4, r4, #15
 8013224:	2603      	movs	r6, #3
 8013226:	4da2      	ldr	r5, [pc, #648]	@ (80134b0 <_dtoa_r+0x5c0>)
 8013228:	b954      	cbnz	r4, 8013240 <_dtoa_r+0x350>
 801322a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801322e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013232:	f7ed fb0b 	bl	800084c <__aeabi_ddiv>
 8013236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801323a:	e028      	b.n	801328e <_dtoa_r+0x39e>
 801323c:	2602      	movs	r6, #2
 801323e:	e7f2      	b.n	8013226 <_dtoa_r+0x336>
 8013240:	07e1      	lsls	r1, r4, #31
 8013242:	d508      	bpl.n	8013256 <_dtoa_r+0x366>
 8013244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013248:	e9d5 2300 	ldrd	r2, r3, [r5]
 801324c:	f7ed f9d4 	bl	80005f8 <__aeabi_dmul>
 8013250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013254:	3601      	adds	r6, #1
 8013256:	1064      	asrs	r4, r4, #1
 8013258:	3508      	adds	r5, #8
 801325a:	e7e5      	b.n	8013228 <_dtoa_r+0x338>
 801325c:	f000 80d2 	beq.w	8013404 <_dtoa_r+0x514>
 8013260:	427c      	negs	r4, r7
 8013262:	4b92      	ldr	r3, [pc, #584]	@ (80134ac <_dtoa_r+0x5bc>)
 8013264:	4d92      	ldr	r5, [pc, #584]	@ (80134b0 <_dtoa_r+0x5c0>)
 8013266:	f004 020f 	and.w	r2, r4, #15
 801326a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013276:	f7ed f9bf 	bl	80005f8 <__aeabi_dmul>
 801327a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801327e:	1124      	asrs	r4, r4, #4
 8013280:	2300      	movs	r3, #0
 8013282:	2602      	movs	r6, #2
 8013284:	2c00      	cmp	r4, #0
 8013286:	f040 80b2 	bne.w	80133ee <_dtoa_r+0x4fe>
 801328a:	2b00      	cmp	r3, #0
 801328c:	d1d3      	bne.n	8013236 <_dtoa_r+0x346>
 801328e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013290:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013294:	2b00      	cmp	r3, #0
 8013296:	f000 80b7 	beq.w	8013408 <_dtoa_r+0x518>
 801329a:	4b86      	ldr	r3, [pc, #536]	@ (80134b4 <_dtoa_r+0x5c4>)
 801329c:	2200      	movs	r2, #0
 801329e:	4620      	mov	r0, r4
 80132a0:	4629      	mov	r1, r5
 80132a2:	f7ed fc1b 	bl	8000adc <__aeabi_dcmplt>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	f000 80ae 	beq.w	8013408 <_dtoa_r+0x518>
 80132ac:	9b07      	ldr	r3, [sp, #28]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	f000 80aa 	beq.w	8013408 <_dtoa_r+0x518>
 80132b4:	9b00      	ldr	r3, [sp, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	dd37      	ble.n	801332a <_dtoa_r+0x43a>
 80132ba:	1e7b      	subs	r3, r7, #1
 80132bc:	9304      	str	r3, [sp, #16]
 80132be:	4620      	mov	r0, r4
 80132c0:	4b7d      	ldr	r3, [pc, #500]	@ (80134b8 <_dtoa_r+0x5c8>)
 80132c2:	2200      	movs	r2, #0
 80132c4:	4629      	mov	r1, r5
 80132c6:	f7ed f997 	bl	80005f8 <__aeabi_dmul>
 80132ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132ce:	9c00      	ldr	r4, [sp, #0]
 80132d0:	3601      	adds	r6, #1
 80132d2:	4630      	mov	r0, r6
 80132d4:	f7ed f926 	bl	8000524 <__aeabi_i2d>
 80132d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132dc:	f7ed f98c 	bl	80005f8 <__aeabi_dmul>
 80132e0:	4b76      	ldr	r3, [pc, #472]	@ (80134bc <_dtoa_r+0x5cc>)
 80132e2:	2200      	movs	r2, #0
 80132e4:	f7ec ffd2 	bl	800028c <__adddf3>
 80132e8:	4605      	mov	r5, r0
 80132ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80132ee:	2c00      	cmp	r4, #0
 80132f0:	f040 808d 	bne.w	801340e <_dtoa_r+0x51e>
 80132f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132f8:	4b71      	ldr	r3, [pc, #452]	@ (80134c0 <_dtoa_r+0x5d0>)
 80132fa:	2200      	movs	r2, #0
 80132fc:	f7ec ffc4 	bl	8000288 <__aeabi_dsub>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013308:	462a      	mov	r2, r5
 801330a:	4633      	mov	r3, r6
 801330c:	f7ed fc04 	bl	8000b18 <__aeabi_dcmpgt>
 8013310:	2800      	cmp	r0, #0
 8013312:	f040 828b 	bne.w	801382c <_dtoa_r+0x93c>
 8013316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801331a:	462a      	mov	r2, r5
 801331c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013320:	f7ed fbdc 	bl	8000adc <__aeabi_dcmplt>
 8013324:	2800      	cmp	r0, #0
 8013326:	f040 8128 	bne.w	801357a <_dtoa_r+0x68a>
 801332a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801332e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013334:	2b00      	cmp	r3, #0
 8013336:	f2c0 815a 	blt.w	80135ee <_dtoa_r+0x6fe>
 801333a:	2f0e      	cmp	r7, #14
 801333c:	f300 8157 	bgt.w	80135ee <_dtoa_r+0x6fe>
 8013340:	4b5a      	ldr	r3, [pc, #360]	@ (80134ac <_dtoa_r+0x5bc>)
 8013342:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013346:	ed93 7b00 	vldr	d7, [r3]
 801334a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801334c:	2b00      	cmp	r3, #0
 801334e:	ed8d 7b00 	vstr	d7, [sp]
 8013352:	da03      	bge.n	801335c <_dtoa_r+0x46c>
 8013354:	9b07      	ldr	r3, [sp, #28]
 8013356:	2b00      	cmp	r3, #0
 8013358:	f340 8101 	ble.w	801355e <_dtoa_r+0x66e>
 801335c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013360:	4656      	mov	r6, sl
 8013362:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013366:	4620      	mov	r0, r4
 8013368:	4629      	mov	r1, r5
 801336a:	f7ed fa6f 	bl	800084c <__aeabi_ddiv>
 801336e:	f7ed fbf3 	bl	8000b58 <__aeabi_d2iz>
 8013372:	4680      	mov	r8, r0
 8013374:	f7ed f8d6 	bl	8000524 <__aeabi_i2d>
 8013378:	e9dd 2300 	ldrd	r2, r3, [sp]
 801337c:	f7ed f93c 	bl	80005f8 <__aeabi_dmul>
 8013380:	4602      	mov	r2, r0
 8013382:	460b      	mov	r3, r1
 8013384:	4620      	mov	r0, r4
 8013386:	4629      	mov	r1, r5
 8013388:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801338c:	f7ec ff7c 	bl	8000288 <__aeabi_dsub>
 8013390:	f806 4b01 	strb.w	r4, [r6], #1
 8013394:	9d07      	ldr	r5, [sp, #28]
 8013396:	eba6 040a 	sub.w	r4, r6, sl
 801339a:	42a5      	cmp	r5, r4
 801339c:	4602      	mov	r2, r0
 801339e:	460b      	mov	r3, r1
 80133a0:	f040 8117 	bne.w	80135d2 <_dtoa_r+0x6e2>
 80133a4:	f7ec ff72 	bl	800028c <__adddf3>
 80133a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133ac:	4604      	mov	r4, r0
 80133ae:	460d      	mov	r5, r1
 80133b0:	f7ed fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 80133b4:	2800      	cmp	r0, #0
 80133b6:	f040 80f9 	bne.w	80135ac <_dtoa_r+0x6bc>
 80133ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133be:	4620      	mov	r0, r4
 80133c0:	4629      	mov	r1, r5
 80133c2:	f7ed fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80133c6:	b118      	cbz	r0, 80133d0 <_dtoa_r+0x4e0>
 80133c8:	f018 0f01 	tst.w	r8, #1
 80133cc:	f040 80ee 	bne.w	80135ac <_dtoa_r+0x6bc>
 80133d0:	4649      	mov	r1, r9
 80133d2:	4658      	mov	r0, fp
 80133d4:	f000 fc90 	bl	8013cf8 <_Bfree>
 80133d8:	2300      	movs	r3, #0
 80133da:	7033      	strb	r3, [r6, #0]
 80133dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80133de:	3701      	adds	r7, #1
 80133e0:	601f      	str	r7, [r3, #0]
 80133e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	f000 831d 	beq.w	8013a24 <_dtoa_r+0xb34>
 80133ea:	601e      	str	r6, [r3, #0]
 80133ec:	e31a      	b.n	8013a24 <_dtoa_r+0xb34>
 80133ee:	07e2      	lsls	r2, r4, #31
 80133f0:	d505      	bpl.n	80133fe <_dtoa_r+0x50e>
 80133f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133f6:	f7ed f8ff 	bl	80005f8 <__aeabi_dmul>
 80133fa:	3601      	adds	r6, #1
 80133fc:	2301      	movs	r3, #1
 80133fe:	1064      	asrs	r4, r4, #1
 8013400:	3508      	adds	r5, #8
 8013402:	e73f      	b.n	8013284 <_dtoa_r+0x394>
 8013404:	2602      	movs	r6, #2
 8013406:	e742      	b.n	801328e <_dtoa_r+0x39e>
 8013408:	9c07      	ldr	r4, [sp, #28]
 801340a:	9704      	str	r7, [sp, #16]
 801340c:	e761      	b.n	80132d2 <_dtoa_r+0x3e2>
 801340e:	4b27      	ldr	r3, [pc, #156]	@ (80134ac <_dtoa_r+0x5bc>)
 8013410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013412:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013416:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801341a:	4454      	add	r4, sl
 801341c:	2900      	cmp	r1, #0
 801341e:	d053      	beq.n	80134c8 <_dtoa_r+0x5d8>
 8013420:	4928      	ldr	r1, [pc, #160]	@ (80134c4 <_dtoa_r+0x5d4>)
 8013422:	2000      	movs	r0, #0
 8013424:	f7ed fa12 	bl	800084c <__aeabi_ddiv>
 8013428:	4633      	mov	r3, r6
 801342a:	462a      	mov	r2, r5
 801342c:	f7ec ff2c 	bl	8000288 <__aeabi_dsub>
 8013430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013434:	4656      	mov	r6, sl
 8013436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801343a:	f7ed fb8d 	bl	8000b58 <__aeabi_d2iz>
 801343e:	4605      	mov	r5, r0
 8013440:	f7ed f870 	bl	8000524 <__aeabi_i2d>
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801344c:	f7ec ff1c 	bl	8000288 <__aeabi_dsub>
 8013450:	3530      	adds	r5, #48	@ 0x30
 8013452:	4602      	mov	r2, r0
 8013454:	460b      	mov	r3, r1
 8013456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801345a:	f806 5b01 	strb.w	r5, [r6], #1
 801345e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013462:	f7ed fb3b 	bl	8000adc <__aeabi_dcmplt>
 8013466:	2800      	cmp	r0, #0
 8013468:	d171      	bne.n	801354e <_dtoa_r+0x65e>
 801346a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801346e:	4911      	ldr	r1, [pc, #68]	@ (80134b4 <_dtoa_r+0x5c4>)
 8013470:	2000      	movs	r0, #0
 8013472:	f7ec ff09 	bl	8000288 <__aeabi_dsub>
 8013476:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801347a:	f7ed fb2f 	bl	8000adc <__aeabi_dcmplt>
 801347e:	2800      	cmp	r0, #0
 8013480:	f040 8095 	bne.w	80135ae <_dtoa_r+0x6be>
 8013484:	42a6      	cmp	r6, r4
 8013486:	f43f af50 	beq.w	801332a <_dtoa_r+0x43a>
 801348a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801348e:	4b0a      	ldr	r3, [pc, #40]	@ (80134b8 <_dtoa_r+0x5c8>)
 8013490:	2200      	movs	r2, #0
 8013492:	f7ed f8b1 	bl	80005f8 <__aeabi_dmul>
 8013496:	4b08      	ldr	r3, [pc, #32]	@ (80134b8 <_dtoa_r+0x5c8>)
 8013498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801349c:	2200      	movs	r2, #0
 801349e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134a2:	f7ed f8a9 	bl	80005f8 <__aeabi_dmul>
 80134a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134aa:	e7c4      	b.n	8013436 <_dtoa_r+0x546>
 80134ac:	08016250 	.word	0x08016250
 80134b0:	08016228 	.word	0x08016228
 80134b4:	3ff00000 	.word	0x3ff00000
 80134b8:	40240000 	.word	0x40240000
 80134bc:	401c0000 	.word	0x401c0000
 80134c0:	40140000 	.word	0x40140000
 80134c4:	3fe00000 	.word	0x3fe00000
 80134c8:	4631      	mov	r1, r6
 80134ca:	4628      	mov	r0, r5
 80134cc:	f7ed f894 	bl	80005f8 <__aeabi_dmul>
 80134d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80134d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80134d6:	4656      	mov	r6, sl
 80134d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134dc:	f7ed fb3c 	bl	8000b58 <__aeabi_d2iz>
 80134e0:	4605      	mov	r5, r0
 80134e2:	f7ed f81f 	bl	8000524 <__aeabi_i2d>
 80134e6:	4602      	mov	r2, r0
 80134e8:	460b      	mov	r3, r1
 80134ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134ee:	f7ec fecb 	bl	8000288 <__aeabi_dsub>
 80134f2:	3530      	adds	r5, #48	@ 0x30
 80134f4:	f806 5b01 	strb.w	r5, [r6], #1
 80134f8:	4602      	mov	r2, r0
 80134fa:	460b      	mov	r3, r1
 80134fc:	42a6      	cmp	r6, r4
 80134fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013502:	f04f 0200 	mov.w	r2, #0
 8013506:	d124      	bne.n	8013552 <_dtoa_r+0x662>
 8013508:	4bac      	ldr	r3, [pc, #688]	@ (80137bc <_dtoa_r+0x8cc>)
 801350a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801350e:	f7ec febd 	bl	800028c <__adddf3>
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801351a:	f7ed fafd 	bl	8000b18 <__aeabi_dcmpgt>
 801351e:	2800      	cmp	r0, #0
 8013520:	d145      	bne.n	80135ae <_dtoa_r+0x6be>
 8013522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013526:	49a5      	ldr	r1, [pc, #660]	@ (80137bc <_dtoa_r+0x8cc>)
 8013528:	2000      	movs	r0, #0
 801352a:	f7ec fead 	bl	8000288 <__aeabi_dsub>
 801352e:	4602      	mov	r2, r0
 8013530:	460b      	mov	r3, r1
 8013532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013536:	f7ed fad1 	bl	8000adc <__aeabi_dcmplt>
 801353a:	2800      	cmp	r0, #0
 801353c:	f43f aef5 	beq.w	801332a <_dtoa_r+0x43a>
 8013540:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013542:	1e73      	subs	r3, r6, #1
 8013544:	9315      	str	r3, [sp, #84]	@ 0x54
 8013546:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801354a:	2b30      	cmp	r3, #48	@ 0x30
 801354c:	d0f8      	beq.n	8013540 <_dtoa_r+0x650>
 801354e:	9f04      	ldr	r7, [sp, #16]
 8013550:	e73e      	b.n	80133d0 <_dtoa_r+0x4e0>
 8013552:	4b9b      	ldr	r3, [pc, #620]	@ (80137c0 <_dtoa_r+0x8d0>)
 8013554:	f7ed f850 	bl	80005f8 <__aeabi_dmul>
 8013558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801355c:	e7bc      	b.n	80134d8 <_dtoa_r+0x5e8>
 801355e:	d10c      	bne.n	801357a <_dtoa_r+0x68a>
 8013560:	4b98      	ldr	r3, [pc, #608]	@ (80137c4 <_dtoa_r+0x8d4>)
 8013562:	2200      	movs	r2, #0
 8013564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013568:	f7ed f846 	bl	80005f8 <__aeabi_dmul>
 801356c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013570:	f7ed fac8 	bl	8000b04 <__aeabi_dcmpge>
 8013574:	2800      	cmp	r0, #0
 8013576:	f000 8157 	beq.w	8013828 <_dtoa_r+0x938>
 801357a:	2400      	movs	r4, #0
 801357c:	4625      	mov	r5, r4
 801357e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013580:	43db      	mvns	r3, r3
 8013582:	9304      	str	r3, [sp, #16]
 8013584:	4656      	mov	r6, sl
 8013586:	2700      	movs	r7, #0
 8013588:	4621      	mov	r1, r4
 801358a:	4658      	mov	r0, fp
 801358c:	f000 fbb4 	bl	8013cf8 <_Bfree>
 8013590:	2d00      	cmp	r5, #0
 8013592:	d0dc      	beq.n	801354e <_dtoa_r+0x65e>
 8013594:	b12f      	cbz	r7, 80135a2 <_dtoa_r+0x6b2>
 8013596:	42af      	cmp	r7, r5
 8013598:	d003      	beq.n	80135a2 <_dtoa_r+0x6b2>
 801359a:	4639      	mov	r1, r7
 801359c:	4658      	mov	r0, fp
 801359e:	f000 fbab 	bl	8013cf8 <_Bfree>
 80135a2:	4629      	mov	r1, r5
 80135a4:	4658      	mov	r0, fp
 80135a6:	f000 fba7 	bl	8013cf8 <_Bfree>
 80135aa:	e7d0      	b.n	801354e <_dtoa_r+0x65e>
 80135ac:	9704      	str	r7, [sp, #16]
 80135ae:	4633      	mov	r3, r6
 80135b0:	461e      	mov	r6, r3
 80135b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135b6:	2a39      	cmp	r2, #57	@ 0x39
 80135b8:	d107      	bne.n	80135ca <_dtoa_r+0x6da>
 80135ba:	459a      	cmp	sl, r3
 80135bc:	d1f8      	bne.n	80135b0 <_dtoa_r+0x6c0>
 80135be:	9a04      	ldr	r2, [sp, #16]
 80135c0:	3201      	adds	r2, #1
 80135c2:	9204      	str	r2, [sp, #16]
 80135c4:	2230      	movs	r2, #48	@ 0x30
 80135c6:	f88a 2000 	strb.w	r2, [sl]
 80135ca:	781a      	ldrb	r2, [r3, #0]
 80135cc:	3201      	adds	r2, #1
 80135ce:	701a      	strb	r2, [r3, #0]
 80135d0:	e7bd      	b.n	801354e <_dtoa_r+0x65e>
 80135d2:	4b7b      	ldr	r3, [pc, #492]	@ (80137c0 <_dtoa_r+0x8d0>)
 80135d4:	2200      	movs	r2, #0
 80135d6:	f7ed f80f 	bl	80005f8 <__aeabi_dmul>
 80135da:	2200      	movs	r2, #0
 80135dc:	2300      	movs	r3, #0
 80135de:	4604      	mov	r4, r0
 80135e0:	460d      	mov	r5, r1
 80135e2:	f7ed fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	f43f aebb 	beq.w	8013362 <_dtoa_r+0x472>
 80135ec:	e6f0      	b.n	80133d0 <_dtoa_r+0x4e0>
 80135ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80135f0:	2a00      	cmp	r2, #0
 80135f2:	f000 80db 	beq.w	80137ac <_dtoa_r+0x8bc>
 80135f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135f8:	2a01      	cmp	r2, #1
 80135fa:	f300 80bf 	bgt.w	801377c <_dtoa_r+0x88c>
 80135fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013600:	2a00      	cmp	r2, #0
 8013602:	f000 80b7 	beq.w	8013774 <_dtoa_r+0x884>
 8013606:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801360a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801360c:	4646      	mov	r6, r8
 801360e:	9a08      	ldr	r2, [sp, #32]
 8013610:	2101      	movs	r1, #1
 8013612:	441a      	add	r2, r3
 8013614:	4658      	mov	r0, fp
 8013616:	4498      	add	r8, r3
 8013618:	9208      	str	r2, [sp, #32]
 801361a:	f000 fc21 	bl	8013e60 <__i2b>
 801361e:	4605      	mov	r5, r0
 8013620:	b15e      	cbz	r6, 801363a <_dtoa_r+0x74a>
 8013622:	9b08      	ldr	r3, [sp, #32]
 8013624:	2b00      	cmp	r3, #0
 8013626:	dd08      	ble.n	801363a <_dtoa_r+0x74a>
 8013628:	42b3      	cmp	r3, r6
 801362a:	9a08      	ldr	r2, [sp, #32]
 801362c:	bfa8      	it	ge
 801362e:	4633      	movge	r3, r6
 8013630:	eba8 0803 	sub.w	r8, r8, r3
 8013634:	1af6      	subs	r6, r6, r3
 8013636:	1ad3      	subs	r3, r2, r3
 8013638:	9308      	str	r3, [sp, #32]
 801363a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801363c:	b1f3      	cbz	r3, 801367c <_dtoa_r+0x78c>
 801363e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013640:	2b00      	cmp	r3, #0
 8013642:	f000 80b7 	beq.w	80137b4 <_dtoa_r+0x8c4>
 8013646:	b18c      	cbz	r4, 801366c <_dtoa_r+0x77c>
 8013648:	4629      	mov	r1, r5
 801364a:	4622      	mov	r2, r4
 801364c:	4658      	mov	r0, fp
 801364e:	f000 fcc7 	bl	8013fe0 <__pow5mult>
 8013652:	464a      	mov	r2, r9
 8013654:	4601      	mov	r1, r0
 8013656:	4605      	mov	r5, r0
 8013658:	4658      	mov	r0, fp
 801365a:	f000 fc17 	bl	8013e8c <__multiply>
 801365e:	4649      	mov	r1, r9
 8013660:	9004      	str	r0, [sp, #16]
 8013662:	4658      	mov	r0, fp
 8013664:	f000 fb48 	bl	8013cf8 <_Bfree>
 8013668:	9b04      	ldr	r3, [sp, #16]
 801366a:	4699      	mov	r9, r3
 801366c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801366e:	1b1a      	subs	r2, r3, r4
 8013670:	d004      	beq.n	801367c <_dtoa_r+0x78c>
 8013672:	4649      	mov	r1, r9
 8013674:	4658      	mov	r0, fp
 8013676:	f000 fcb3 	bl	8013fe0 <__pow5mult>
 801367a:	4681      	mov	r9, r0
 801367c:	2101      	movs	r1, #1
 801367e:	4658      	mov	r0, fp
 8013680:	f000 fbee 	bl	8013e60 <__i2b>
 8013684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013686:	4604      	mov	r4, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	f000 81cf 	beq.w	8013a2c <_dtoa_r+0xb3c>
 801368e:	461a      	mov	r2, r3
 8013690:	4601      	mov	r1, r0
 8013692:	4658      	mov	r0, fp
 8013694:	f000 fca4 	bl	8013fe0 <__pow5mult>
 8013698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801369a:	2b01      	cmp	r3, #1
 801369c:	4604      	mov	r4, r0
 801369e:	f300 8095 	bgt.w	80137cc <_dtoa_r+0x8dc>
 80136a2:	9b02      	ldr	r3, [sp, #8]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f040 8087 	bne.w	80137b8 <_dtoa_r+0x8c8>
 80136aa:	9b03      	ldr	r3, [sp, #12]
 80136ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f040 8089 	bne.w	80137c8 <_dtoa_r+0x8d8>
 80136b6:	9b03      	ldr	r3, [sp, #12]
 80136b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80136bc:	0d1b      	lsrs	r3, r3, #20
 80136be:	051b      	lsls	r3, r3, #20
 80136c0:	b12b      	cbz	r3, 80136ce <_dtoa_r+0x7de>
 80136c2:	9b08      	ldr	r3, [sp, #32]
 80136c4:	3301      	adds	r3, #1
 80136c6:	9308      	str	r3, [sp, #32]
 80136c8:	f108 0801 	add.w	r8, r8, #1
 80136cc:	2301      	movs	r3, #1
 80136ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80136d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	f000 81b0 	beq.w	8013a38 <_dtoa_r+0xb48>
 80136d8:	6923      	ldr	r3, [r4, #16]
 80136da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80136de:	6918      	ldr	r0, [r3, #16]
 80136e0:	f000 fb72 	bl	8013dc8 <__hi0bits>
 80136e4:	f1c0 0020 	rsb	r0, r0, #32
 80136e8:	9b08      	ldr	r3, [sp, #32]
 80136ea:	4418      	add	r0, r3
 80136ec:	f010 001f 	ands.w	r0, r0, #31
 80136f0:	d077      	beq.n	80137e2 <_dtoa_r+0x8f2>
 80136f2:	f1c0 0320 	rsb	r3, r0, #32
 80136f6:	2b04      	cmp	r3, #4
 80136f8:	dd6b      	ble.n	80137d2 <_dtoa_r+0x8e2>
 80136fa:	9b08      	ldr	r3, [sp, #32]
 80136fc:	f1c0 001c 	rsb	r0, r0, #28
 8013700:	4403      	add	r3, r0
 8013702:	4480      	add	r8, r0
 8013704:	4406      	add	r6, r0
 8013706:	9308      	str	r3, [sp, #32]
 8013708:	f1b8 0f00 	cmp.w	r8, #0
 801370c:	dd05      	ble.n	801371a <_dtoa_r+0x82a>
 801370e:	4649      	mov	r1, r9
 8013710:	4642      	mov	r2, r8
 8013712:	4658      	mov	r0, fp
 8013714:	f000 fcbe 	bl	8014094 <__lshift>
 8013718:	4681      	mov	r9, r0
 801371a:	9b08      	ldr	r3, [sp, #32]
 801371c:	2b00      	cmp	r3, #0
 801371e:	dd05      	ble.n	801372c <_dtoa_r+0x83c>
 8013720:	4621      	mov	r1, r4
 8013722:	461a      	mov	r2, r3
 8013724:	4658      	mov	r0, fp
 8013726:	f000 fcb5 	bl	8014094 <__lshift>
 801372a:	4604      	mov	r4, r0
 801372c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801372e:	2b00      	cmp	r3, #0
 8013730:	d059      	beq.n	80137e6 <_dtoa_r+0x8f6>
 8013732:	4621      	mov	r1, r4
 8013734:	4648      	mov	r0, r9
 8013736:	f000 fd19 	bl	801416c <__mcmp>
 801373a:	2800      	cmp	r0, #0
 801373c:	da53      	bge.n	80137e6 <_dtoa_r+0x8f6>
 801373e:	1e7b      	subs	r3, r7, #1
 8013740:	9304      	str	r3, [sp, #16]
 8013742:	4649      	mov	r1, r9
 8013744:	2300      	movs	r3, #0
 8013746:	220a      	movs	r2, #10
 8013748:	4658      	mov	r0, fp
 801374a:	f000 faf7 	bl	8013d3c <__multadd>
 801374e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013750:	4681      	mov	r9, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	f000 8172 	beq.w	8013a3c <_dtoa_r+0xb4c>
 8013758:	2300      	movs	r3, #0
 801375a:	4629      	mov	r1, r5
 801375c:	220a      	movs	r2, #10
 801375e:	4658      	mov	r0, fp
 8013760:	f000 faec 	bl	8013d3c <__multadd>
 8013764:	9b00      	ldr	r3, [sp, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	4605      	mov	r5, r0
 801376a:	dc67      	bgt.n	801383c <_dtoa_r+0x94c>
 801376c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801376e:	2b02      	cmp	r3, #2
 8013770:	dc41      	bgt.n	80137f6 <_dtoa_r+0x906>
 8013772:	e063      	b.n	801383c <_dtoa_r+0x94c>
 8013774:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013776:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801377a:	e746      	b.n	801360a <_dtoa_r+0x71a>
 801377c:	9b07      	ldr	r3, [sp, #28]
 801377e:	1e5c      	subs	r4, r3, #1
 8013780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013782:	42a3      	cmp	r3, r4
 8013784:	bfbf      	itttt	lt
 8013786:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013788:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801378a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801378c:	1ae3      	sublt	r3, r4, r3
 801378e:	bfb4      	ite	lt
 8013790:	18d2      	addlt	r2, r2, r3
 8013792:	1b1c      	subge	r4, r3, r4
 8013794:	9b07      	ldr	r3, [sp, #28]
 8013796:	bfbc      	itt	lt
 8013798:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801379a:	2400      	movlt	r4, #0
 801379c:	2b00      	cmp	r3, #0
 801379e:	bfb5      	itete	lt
 80137a0:	eba8 0603 	sublt.w	r6, r8, r3
 80137a4:	9b07      	ldrge	r3, [sp, #28]
 80137a6:	2300      	movlt	r3, #0
 80137a8:	4646      	movge	r6, r8
 80137aa:	e730      	b.n	801360e <_dtoa_r+0x71e>
 80137ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80137ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80137b0:	4646      	mov	r6, r8
 80137b2:	e735      	b.n	8013620 <_dtoa_r+0x730>
 80137b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137b6:	e75c      	b.n	8013672 <_dtoa_r+0x782>
 80137b8:	2300      	movs	r3, #0
 80137ba:	e788      	b.n	80136ce <_dtoa_r+0x7de>
 80137bc:	3fe00000 	.word	0x3fe00000
 80137c0:	40240000 	.word	0x40240000
 80137c4:	40140000 	.word	0x40140000
 80137c8:	9b02      	ldr	r3, [sp, #8]
 80137ca:	e780      	b.n	80136ce <_dtoa_r+0x7de>
 80137cc:	2300      	movs	r3, #0
 80137ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80137d0:	e782      	b.n	80136d8 <_dtoa_r+0x7e8>
 80137d2:	d099      	beq.n	8013708 <_dtoa_r+0x818>
 80137d4:	9a08      	ldr	r2, [sp, #32]
 80137d6:	331c      	adds	r3, #28
 80137d8:	441a      	add	r2, r3
 80137da:	4498      	add	r8, r3
 80137dc:	441e      	add	r6, r3
 80137de:	9208      	str	r2, [sp, #32]
 80137e0:	e792      	b.n	8013708 <_dtoa_r+0x818>
 80137e2:	4603      	mov	r3, r0
 80137e4:	e7f6      	b.n	80137d4 <_dtoa_r+0x8e4>
 80137e6:	9b07      	ldr	r3, [sp, #28]
 80137e8:	9704      	str	r7, [sp, #16]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	dc20      	bgt.n	8013830 <_dtoa_r+0x940>
 80137ee:	9300      	str	r3, [sp, #0]
 80137f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	dd1e      	ble.n	8013834 <_dtoa_r+0x944>
 80137f6:	9b00      	ldr	r3, [sp, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f47f aec0 	bne.w	801357e <_dtoa_r+0x68e>
 80137fe:	4621      	mov	r1, r4
 8013800:	2205      	movs	r2, #5
 8013802:	4658      	mov	r0, fp
 8013804:	f000 fa9a 	bl	8013d3c <__multadd>
 8013808:	4601      	mov	r1, r0
 801380a:	4604      	mov	r4, r0
 801380c:	4648      	mov	r0, r9
 801380e:	f000 fcad 	bl	801416c <__mcmp>
 8013812:	2800      	cmp	r0, #0
 8013814:	f77f aeb3 	ble.w	801357e <_dtoa_r+0x68e>
 8013818:	4656      	mov	r6, sl
 801381a:	2331      	movs	r3, #49	@ 0x31
 801381c:	f806 3b01 	strb.w	r3, [r6], #1
 8013820:	9b04      	ldr	r3, [sp, #16]
 8013822:	3301      	adds	r3, #1
 8013824:	9304      	str	r3, [sp, #16]
 8013826:	e6ae      	b.n	8013586 <_dtoa_r+0x696>
 8013828:	9c07      	ldr	r4, [sp, #28]
 801382a:	9704      	str	r7, [sp, #16]
 801382c:	4625      	mov	r5, r4
 801382e:	e7f3      	b.n	8013818 <_dtoa_r+0x928>
 8013830:	9b07      	ldr	r3, [sp, #28]
 8013832:	9300      	str	r3, [sp, #0]
 8013834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 8104 	beq.w	8013a44 <_dtoa_r+0xb54>
 801383c:	2e00      	cmp	r6, #0
 801383e:	dd05      	ble.n	801384c <_dtoa_r+0x95c>
 8013840:	4629      	mov	r1, r5
 8013842:	4632      	mov	r2, r6
 8013844:	4658      	mov	r0, fp
 8013846:	f000 fc25 	bl	8014094 <__lshift>
 801384a:	4605      	mov	r5, r0
 801384c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801384e:	2b00      	cmp	r3, #0
 8013850:	d05a      	beq.n	8013908 <_dtoa_r+0xa18>
 8013852:	6869      	ldr	r1, [r5, #4]
 8013854:	4658      	mov	r0, fp
 8013856:	f000 fa0f 	bl	8013c78 <_Balloc>
 801385a:	4606      	mov	r6, r0
 801385c:	b928      	cbnz	r0, 801386a <_dtoa_r+0x97a>
 801385e:	4b84      	ldr	r3, [pc, #528]	@ (8013a70 <_dtoa_r+0xb80>)
 8013860:	4602      	mov	r2, r0
 8013862:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013866:	f7ff bb5a 	b.w	8012f1e <_dtoa_r+0x2e>
 801386a:	692a      	ldr	r2, [r5, #16]
 801386c:	3202      	adds	r2, #2
 801386e:	0092      	lsls	r2, r2, #2
 8013870:	f105 010c 	add.w	r1, r5, #12
 8013874:	300c      	adds	r0, #12
 8013876:	f7ff fa84 	bl	8012d82 <memcpy>
 801387a:	2201      	movs	r2, #1
 801387c:	4631      	mov	r1, r6
 801387e:	4658      	mov	r0, fp
 8013880:	f000 fc08 	bl	8014094 <__lshift>
 8013884:	f10a 0301 	add.w	r3, sl, #1
 8013888:	9307      	str	r3, [sp, #28]
 801388a:	9b00      	ldr	r3, [sp, #0]
 801388c:	4453      	add	r3, sl
 801388e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013890:	9b02      	ldr	r3, [sp, #8]
 8013892:	f003 0301 	and.w	r3, r3, #1
 8013896:	462f      	mov	r7, r5
 8013898:	930a      	str	r3, [sp, #40]	@ 0x28
 801389a:	4605      	mov	r5, r0
 801389c:	9b07      	ldr	r3, [sp, #28]
 801389e:	4621      	mov	r1, r4
 80138a0:	3b01      	subs	r3, #1
 80138a2:	4648      	mov	r0, r9
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	f7ff fa99 	bl	8012ddc <quorem>
 80138aa:	4639      	mov	r1, r7
 80138ac:	9002      	str	r0, [sp, #8]
 80138ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80138b2:	4648      	mov	r0, r9
 80138b4:	f000 fc5a 	bl	801416c <__mcmp>
 80138b8:	462a      	mov	r2, r5
 80138ba:	9008      	str	r0, [sp, #32]
 80138bc:	4621      	mov	r1, r4
 80138be:	4658      	mov	r0, fp
 80138c0:	f000 fc70 	bl	80141a4 <__mdiff>
 80138c4:	68c2      	ldr	r2, [r0, #12]
 80138c6:	4606      	mov	r6, r0
 80138c8:	bb02      	cbnz	r2, 801390c <_dtoa_r+0xa1c>
 80138ca:	4601      	mov	r1, r0
 80138cc:	4648      	mov	r0, r9
 80138ce:	f000 fc4d 	bl	801416c <__mcmp>
 80138d2:	4602      	mov	r2, r0
 80138d4:	4631      	mov	r1, r6
 80138d6:	4658      	mov	r0, fp
 80138d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80138da:	f000 fa0d 	bl	8013cf8 <_Bfree>
 80138de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138e2:	9e07      	ldr	r6, [sp, #28]
 80138e4:	ea43 0102 	orr.w	r1, r3, r2
 80138e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138ea:	4319      	orrs	r1, r3
 80138ec:	d110      	bne.n	8013910 <_dtoa_r+0xa20>
 80138ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80138f2:	d029      	beq.n	8013948 <_dtoa_r+0xa58>
 80138f4:	9b08      	ldr	r3, [sp, #32]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	dd02      	ble.n	8013900 <_dtoa_r+0xa10>
 80138fa:	9b02      	ldr	r3, [sp, #8]
 80138fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013900:	9b00      	ldr	r3, [sp, #0]
 8013902:	f883 8000 	strb.w	r8, [r3]
 8013906:	e63f      	b.n	8013588 <_dtoa_r+0x698>
 8013908:	4628      	mov	r0, r5
 801390a:	e7bb      	b.n	8013884 <_dtoa_r+0x994>
 801390c:	2201      	movs	r2, #1
 801390e:	e7e1      	b.n	80138d4 <_dtoa_r+0x9e4>
 8013910:	9b08      	ldr	r3, [sp, #32]
 8013912:	2b00      	cmp	r3, #0
 8013914:	db04      	blt.n	8013920 <_dtoa_r+0xa30>
 8013916:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013918:	430b      	orrs	r3, r1
 801391a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801391c:	430b      	orrs	r3, r1
 801391e:	d120      	bne.n	8013962 <_dtoa_r+0xa72>
 8013920:	2a00      	cmp	r2, #0
 8013922:	dded      	ble.n	8013900 <_dtoa_r+0xa10>
 8013924:	4649      	mov	r1, r9
 8013926:	2201      	movs	r2, #1
 8013928:	4658      	mov	r0, fp
 801392a:	f000 fbb3 	bl	8014094 <__lshift>
 801392e:	4621      	mov	r1, r4
 8013930:	4681      	mov	r9, r0
 8013932:	f000 fc1b 	bl	801416c <__mcmp>
 8013936:	2800      	cmp	r0, #0
 8013938:	dc03      	bgt.n	8013942 <_dtoa_r+0xa52>
 801393a:	d1e1      	bne.n	8013900 <_dtoa_r+0xa10>
 801393c:	f018 0f01 	tst.w	r8, #1
 8013940:	d0de      	beq.n	8013900 <_dtoa_r+0xa10>
 8013942:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013946:	d1d8      	bne.n	80138fa <_dtoa_r+0xa0a>
 8013948:	9a00      	ldr	r2, [sp, #0]
 801394a:	2339      	movs	r3, #57	@ 0x39
 801394c:	7013      	strb	r3, [r2, #0]
 801394e:	4633      	mov	r3, r6
 8013950:	461e      	mov	r6, r3
 8013952:	3b01      	subs	r3, #1
 8013954:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013958:	2a39      	cmp	r2, #57	@ 0x39
 801395a:	d052      	beq.n	8013a02 <_dtoa_r+0xb12>
 801395c:	3201      	adds	r2, #1
 801395e:	701a      	strb	r2, [r3, #0]
 8013960:	e612      	b.n	8013588 <_dtoa_r+0x698>
 8013962:	2a00      	cmp	r2, #0
 8013964:	dd07      	ble.n	8013976 <_dtoa_r+0xa86>
 8013966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801396a:	d0ed      	beq.n	8013948 <_dtoa_r+0xa58>
 801396c:	9a00      	ldr	r2, [sp, #0]
 801396e:	f108 0301 	add.w	r3, r8, #1
 8013972:	7013      	strb	r3, [r2, #0]
 8013974:	e608      	b.n	8013588 <_dtoa_r+0x698>
 8013976:	9b07      	ldr	r3, [sp, #28]
 8013978:	9a07      	ldr	r2, [sp, #28]
 801397a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801397e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013980:	4293      	cmp	r3, r2
 8013982:	d028      	beq.n	80139d6 <_dtoa_r+0xae6>
 8013984:	4649      	mov	r1, r9
 8013986:	2300      	movs	r3, #0
 8013988:	220a      	movs	r2, #10
 801398a:	4658      	mov	r0, fp
 801398c:	f000 f9d6 	bl	8013d3c <__multadd>
 8013990:	42af      	cmp	r7, r5
 8013992:	4681      	mov	r9, r0
 8013994:	f04f 0300 	mov.w	r3, #0
 8013998:	f04f 020a 	mov.w	r2, #10
 801399c:	4639      	mov	r1, r7
 801399e:	4658      	mov	r0, fp
 80139a0:	d107      	bne.n	80139b2 <_dtoa_r+0xac2>
 80139a2:	f000 f9cb 	bl	8013d3c <__multadd>
 80139a6:	4607      	mov	r7, r0
 80139a8:	4605      	mov	r5, r0
 80139aa:	9b07      	ldr	r3, [sp, #28]
 80139ac:	3301      	adds	r3, #1
 80139ae:	9307      	str	r3, [sp, #28]
 80139b0:	e774      	b.n	801389c <_dtoa_r+0x9ac>
 80139b2:	f000 f9c3 	bl	8013d3c <__multadd>
 80139b6:	4629      	mov	r1, r5
 80139b8:	4607      	mov	r7, r0
 80139ba:	2300      	movs	r3, #0
 80139bc:	220a      	movs	r2, #10
 80139be:	4658      	mov	r0, fp
 80139c0:	f000 f9bc 	bl	8013d3c <__multadd>
 80139c4:	4605      	mov	r5, r0
 80139c6:	e7f0      	b.n	80139aa <_dtoa_r+0xaba>
 80139c8:	9b00      	ldr	r3, [sp, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	bfcc      	ite	gt
 80139ce:	461e      	movgt	r6, r3
 80139d0:	2601      	movle	r6, #1
 80139d2:	4456      	add	r6, sl
 80139d4:	2700      	movs	r7, #0
 80139d6:	4649      	mov	r1, r9
 80139d8:	2201      	movs	r2, #1
 80139da:	4658      	mov	r0, fp
 80139dc:	f000 fb5a 	bl	8014094 <__lshift>
 80139e0:	4621      	mov	r1, r4
 80139e2:	4681      	mov	r9, r0
 80139e4:	f000 fbc2 	bl	801416c <__mcmp>
 80139e8:	2800      	cmp	r0, #0
 80139ea:	dcb0      	bgt.n	801394e <_dtoa_r+0xa5e>
 80139ec:	d102      	bne.n	80139f4 <_dtoa_r+0xb04>
 80139ee:	f018 0f01 	tst.w	r8, #1
 80139f2:	d1ac      	bne.n	801394e <_dtoa_r+0xa5e>
 80139f4:	4633      	mov	r3, r6
 80139f6:	461e      	mov	r6, r3
 80139f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80139fc:	2a30      	cmp	r2, #48	@ 0x30
 80139fe:	d0fa      	beq.n	80139f6 <_dtoa_r+0xb06>
 8013a00:	e5c2      	b.n	8013588 <_dtoa_r+0x698>
 8013a02:	459a      	cmp	sl, r3
 8013a04:	d1a4      	bne.n	8013950 <_dtoa_r+0xa60>
 8013a06:	9b04      	ldr	r3, [sp, #16]
 8013a08:	3301      	adds	r3, #1
 8013a0a:	9304      	str	r3, [sp, #16]
 8013a0c:	2331      	movs	r3, #49	@ 0x31
 8013a0e:	f88a 3000 	strb.w	r3, [sl]
 8013a12:	e5b9      	b.n	8013588 <_dtoa_r+0x698>
 8013a14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013a16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013a74 <_dtoa_r+0xb84>
 8013a1a:	b11b      	cbz	r3, 8013a24 <_dtoa_r+0xb34>
 8013a1c:	f10a 0308 	add.w	r3, sl, #8
 8013a20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013a22:	6013      	str	r3, [r2, #0]
 8013a24:	4650      	mov	r0, sl
 8013a26:	b019      	add	sp, #100	@ 0x64
 8013a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	f77f ae37 	ble.w	80136a2 <_dtoa_r+0x7b2>
 8013a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a38:	2001      	movs	r0, #1
 8013a3a:	e655      	b.n	80136e8 <_dtoa_r+0x7f8>
 8013a3c:	9b00      	ldr	r3, [sp, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	f77f aed6 	ble.w	80137f0 <_dtoa_r+0x900>
 8013a44:	4656      	mov	r6, sl
 8013a46:	4621      	mov	r1, r4
 8013a48:	4648      	mov	r0, r9
 8013a4a:	f7ff f9c7 	bl	8012ddc <quorem>
 8013a4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013a52:	f806 8b01 	strb.w	r8, [r6], #1
 8013a56:	9b00      	ldr	r3, [sp, #0]
 8013a58:	eba6 020a 	sub.w	r2, r6, sl
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	ddb3      	ble.n	80139c8 <_dtoa_r+0xad8>
 8013a60:	4649      	mov	r1, r9
 8013a62:	2300      	movs	r3, #0
 8013a64:	220a      	movs	r2, #10
 8013a66:	4658      	mov	r0, fp
 8013a68:	f000 f968 	bl	8013d3c <__multadd>
 8013a6c:	4681      	mov	r9, r0
 8013a6e:	e7ea      	b.n	8013a46 <_dtoa_r+0xb56>
 8013a70:	080161b1 	.word	0x080161b1
 8013a74:	0801614c 	.word	0x0801614c

08013a78 <_free_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4605      	mov	r5, r0
 8013a7c:	2900      	cmp	r1, #0
 8013a7e:	d041      	beq.n	8013b04 <_free_r+0x8c>
 8013a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a84:	1f0c      	subs	r4, r1, #4
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	bfb8      	it	lt
 8013a8a:	18e4      	addlt	r4, r4, r3
 8013a8c:	f000 f8e8 	bl	8013c60 <__malloc_lock>
 8013a90:	4a1d      	ldr	r2, [pc, #116]	@ (8013b08 <_free_r+0x90>)
 8013a92:	6813      	ldr	r3, [r2, #0]
 8013a94:	b933      	cbnz	r3, 8013aa4 <_free_r+0x2c>
 8013a96:	6063      	str	r3, [r4, #4]
 8013a98:	6014      	str	r4, [r2, #0]
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013aa0:	f000 b8e4 	b.w	8013c6c <__malloc_unlock>
 8013aa4:	42a3      	cmp	r3, r4
 8013aa6:	d908      	bls.n	8013aba <_free_r+0x42>
 8013aa8:	6820      	ldr	r0, [r4, #0]
 8013aaa:	1821      	adds	r1, r4, r0
 8013aac:	428b      	cmp	r3, r1
 8013aae:	bf01      	itttt	eq
 8013ab0:	6819      	ldreq	r1, [r3, #0]
 8013ab2:	685b      	ldreq	r3, [r3, #4]
 8013ab4:	1809      	addeq	r1, r1, r0
 8013ab6:	6021      	streq	r1, [r4, #0]
 8013ab8:	e7ed      	b.n	8013a96 <_free_r+0x1e>
 8013aba:	461a      	mov	r2, r3
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	b10b      	cbz	r3, 8013ac4 <_free_r+0x4c>
 8013ac0:	42a3      	cmp	r3, r4
 8013ac2:	d9fa      	bls.n	8013aba <_free_r+0x42>
 8013ac4:	6811      	ldr	r1, [r2, #0]
 8013ac6:	1850      	adds	r0, r2, r1
 8013ac8:	42a0      	cmp	r0, r4
 8013aca:	d10b      	bne.n	8013ae4 <_free_r+0x6c>
 8013acc:	6820      	ldr	r0, [r4, #0]
 8013ace:	4401      	add	r1, r0
 8013ad0:	1850      	adds	r0, r2, r1
 8013ad2:	4283      	cmp	r3, r0
 8013ad4:	6011      	str	r1, [r2, #0]
 8013ad6:	d1e0      	bne.n	8013a9a <_free_r+0x22>
 8013ad8:	6818      	ldr	r0, [r3, #0]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	6053      	str	r3, [r2, #4]
 8013ade:	4408      	add	r0, r1
 8013ae0:	6010      	str	r0, [r2, #0]
 8013ae2:	e7da      	b.n	8013a9a <_free_r+0x22>
 8013ae4:	d902      	bls.n	8013aec <_free_r+0x74>
 8013ae6:	230c      	movs	r3, #12
 8013ae8:	602b      	str	r3, [r5, #0]
 8013aea:	e7d6      	b.n	8013a9a <_free_r+0x22>
 8013aec:	6820      	ldr	r0, [r4, #0]
 8013aee:	1821      	adds	r1, r4, r0
 8013af0:	428b      	cmp	r3, r1
 8013af2:	bf04      	itt	eq
 8013af4:	6819      	ldreq	r1, [r3, #0]
 8013af6:	685b      	ldreq	r3, [r3, #4]
 8013af8:	6063      	str	r3, [r4, #4]
 8013afa:	bf04      	itt	eq
 8013afc:	1809      	addeq	r1, r1, r0
 8013afe:	6021      	streq	r1, [r4, #0]
 8013b00:	6054      	str	r4, [r2, #4]
 8013b02:	e7ca      	b.n	8013a9a <_free_r+0x22>
 8013b04:	bd38      	pop	{r3, r4, r5, pc}
 8013b06:	bf00      	nop
 8013b08:	20011cc4 	.word	0x20011cc4

08013b0c <malloc>:
 8013b0c:	4b02      	ldr	r3, [pc, #8]	@ (8013b18 <malloc+0xc>)
 8013b0e:	4601      	mov	r1, r0
 8013b10:	6818      	ldr	r0, [r3, #0]
 8013b12:	f000 b825 	b.w	8013b60 <_malloc_r>
 8013b16:	bf00      	nop
 8013b18:	200002b4 	.word	0x200002b4

08013b1c <sbrk_aligned>:
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	4e0f      	ldr	r6, [pc, #60]	@ (8013b5c <sbrk_aligned+0x40>)
 8013b20:	460c      	mov	r4, r1
 8013b22:	6831      	ldr	r1, [r6, #0]
 8013b24:	4605      	mov	r5, r0
 8013b26:	b911      	cbnz	r1, 8013b2e <sbrk_aligned+0x12>
 8013b28:	f000 feec 	bl	8014904 <_sbrk_r>
 8013b2c:	6030      	str	r0, [r6, #0]
 8013b2e:	4621      	mov	r1, r4
 8013b30:	4628      	mov	r0, r5
 8013b32:	f000 fee7 	bl	8014904 <_sbrk_r>
 8013b36:	1c43      	adds	r3, r0, #1
 8013b38:	d103      	bne.n	8013b42 <sbrk_aligned+0x26>
 8013b3a:	f04f 34ff 	mov.w	r4, #4294967295
 8013b3e:	4620      	mov	r0, r4
 8013b40:	bd70      	pop	{r4, r5, r6, pc}
 8013b42:	1cc4      	adds	r4, r0, #3
 8013b44:	f024 0403 	bic.w	r4, r4, #3
 8013b48:	42a0      	cmp	r0, r4
 8013b4a:	d0f8      	beq.n	8013b3e <sbrk_aligned+0x22>
 8013b4c:	1a21      	subs	r1, r4, r0
 8013b4e:	4628      	mov	r0, r5
 8013b50:	f000 fed8 	bl	8014904 <_sbrk_r>
 8013b54:	3001      	adds	r0, #1
 8013b56:	d1f2      	bne.n	8013b3e <sbrk_aligned+0x22>
 8013b58:	e7ef      	b.n	8013b3a <sbrk_aligned+0x1e>
 8013b5a:	bf00      	nop
 8013b5c:	20011cc0 	.word	0x20011cc0

08013b60 <_malloc_r>:
 8013b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b64:	1ccd      	adds	r5, r1, #3
 8013b66:	f025 0503 	bic.w	r5, r5, #3
 8013b6a:	3508      	adds	r5, #8
 8013b6c:	2d0c      	cmp	r5, #12
 8013b6e:	bf38      	it	cc
 8013b70:	250c      	movcc	r5, #12
 8013b72:	2d00      	cmp	r5, #0
 8013b74:	4606      	mov	r6, r0
 8013b76:	db01      	blt.n	8013b7c <_malloc_r+0x1c>
 8013b78:	42a9      	cmp	r1, r5
 8013b7a:	d904      	bls.n	8013b86 <_malloc_r+0x26>
 8013b7c:	230c      	movs	r3, #12
 8013b7e:	6033      	str	r3, [r6, #0]
 8013b80:	2000      	movs	r0, #0
 8013b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013c5c <_malloc_r+0xfc>
 8013b8a:	f000 f869 	bl	8013c60 <__malloc_lock>
 8013b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8013b92:	461c      	mov	r4, r3
 8013b94:	bb44      	cbnz	r4, 8013be8 <_malloc_r+0x88>
 8013b96:	4629      	mov	r1, r5
 8013b98:	4630      	mov	r0, r6
 8013b9a:	f7ff ffbf 	bl	8013b1c <sbrk_aligned>
 8013b9e:	1c43      	adds	r3, r0, #1
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	d158      	bne.n	8013c56 <_malloc_r+0xf6>
 8013ba4:	f8d8 4000 	ldr.w	r4, [r8]
 8013ba8:	4627      	mov	r7, r4
 8013baa:	2f00      	cmp	r7, #0
 8013bac:	d143      	bne.n	8013c36 <_malloc_r+0xd6>
 8013bae:	2c00      	cmp	r4, #0
 8013bb0:	d04b      	beq.n	8013c4a <_malloc_r+0xea>
 8013bb2:	6823      	ldr	r3, [r4, #0]
 8013bb4:	4639      	mov	r1, r7
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	eb04 0903 	add.w	r9, r4, r3
 8013bbc:	f000 fea2 	bl	8014904 <_sbrk_r>
 8013bc0:	4581      	cmp	r9, r0
 8013bc2:	d142      	bne.n	8013c4a <_malloc_r+0xea>
 8013bc4:	6821      	ldr	r1, [r4, #0]
 8013bc6:	1a6d      	subs	r5, r5, r1
 8013bc8:	4629      	mov	r1, r5
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f7ff ffa6 	bl	8013b1c <sbrk_aligned>
 8013bd0:	3001      	adds	r0, #1
 8013bd2:	d03a      	beq.n	8013c4a <_malloc_r+0xea>
 8013bd4:	6823      	ldr	r3, [r4, #0]
 8013bd6:	442b      	add	r3, r5
 8013bd8:	6023      	str	r3, [r4, #0]
 8013bda:	f8d8 3000 	ldr.w	r3, [r8]
 8013bde:	685a      	ldr	r2, [r3, #4]
 8013be0:	bb62      	cbnz	r2, 8013c3c <_malloc_r+0xdc>
 8013be2:	f8c8 7000 	str.w	r7, [r8]
 8013be6:	e00f      	b.n	8013c08 <_malloc_r+0xa8>
 8013be8:	6822      	ldr	r2, [r4, #0]
 8013bea:	1b52      	subs	r2, r2, r5
 8013bec:	d420      	bmi.n	8013c30 <_malloc_r+0xd0>
 8013bee:	2a0b      	cmp	r2, #11
 8013bf0:	d917      	bls.n	8013c22 <_malloc_r+0xc2>
 8013bf2:	1961      	adds	r1, r4, r5
 8013bf4:	42a3      	cmp	r3, r4
 8013bf6:	6025      	str	r5, [r4, #0]
 8013bf8:	bf18      	it	ne
 8013bfa:	6059      	strne	r1, [r3, #4]
 8013bfc:	6863      	ldr	r3, [r4, #4]
 8013bfe:	bf08      	it	eq
 8013c00:	f8c8 1000 	streq.w	r1, [r8]
 8013c04:	5162      	str	r2, [r4, r5]
 8013c06:	604b      	str	r3, [r1, #4]
 8013c08:	4630      	mov	r0, r6
 8013c0a:	f000 f82f 	bl	8013c6c <__malloc_unlock>
 8013c0e:	f104 000b 	add.w	r0, r4, #11
 8013c12:	1d23      	adds	r3, r4, #4
 8013c14:	f020 0007 	bic.w	r0, r0, #7
 8013c18:	1ac2      	subs	r2, r0, r3
 8013c1a:	bf1c      	itt	ne
 8013c1c:	1a1b      	subne	r3, r3, r0
 8013c1e:	50a3      	strne	r3, [r4, r2]
 8013c20:	e7af      	b.n	8013b82 <_malloc_r+0x22>
 8013c22:	6862      	ldr	r2, [r4, #4]
 8013c24:	42a3      	cmp	r3, r4
 8013c26:	bf0c      	ite	eq
 8013c28:	f8c8 2000 	streq.w	r2, [r8]
 8013c2c:	605a      	strne	r2, [r3, #4]
 8013c2e:	e7eb      	b.n	8013c08 <_malloc_r+0xa8>
 8013c30:	4623      	mov	r3, r4
 8013c32:	6864      	ldr	r4, [r4, #4]
 8013c34:	e7ae      	b.n	8013b94 <_malloc_r+0x34>
 8013c36:	463c      	mov	r4, r7
 8013c38:	687f      	ldr	r7, [r7, #4]
 8013c3a:	e7b6      	b.n	8013baa <_malloc_r+0x4a>
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	42a3      	cmp	r3, r4
 8013c42:	d1fb      	bne.n	8013c3c <_malloc_r+0xdc>
 8013c44:	2300      	movs	r3, #0
 8013c46:	6053      	str	r3, [r2, #4]
 8013c48:	e7de      	b.n	8013c08 <_malloc_r+0xa8>
 8013c4a:	230c      	movs	r3, #12
 8013c4c:	6033      	str	r3, [r6, #0]
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f000 f80c 	bl	8013c6c <__malloc_unlock>
 8013c54:	e794      	b.n	8013b80 <_malloc_r+0x20>
 8013c56:	6005      	str	r5, [r0, #0]
 8013c58:	e7d6      	b.n	8013c08 <_malloc_r+0xa8>
 8013c5a:	bf00      	nop
 8013c5c:	20011cc4 	.word	0x20011cc4

08013c60 <__malloc_lock>:
 8013c60:	4801      	ldr	r0, [pc, #4]	@ (8013c68 <__malloc_lock+0x8>)
 8013c62:	f7ff b884 	b.w	8012d6e <__retarget_lock_acquire_recursive>
 8013c66:	bf00      	nop
 8013c68:	20011cbc 	.word	0x20011cbc

08013c6c <__malloc_unlock>:
 8013c6c:	4801      	ldr	r0, [pc, #4]	@ (8013c74 <__malloc_unlock+0x8>)
 8013c6e:	f7ff b87f 	b.w	8012d70 <__retarget_lock_release_recursive>
 8013c72:	bf00      	nop
 8013c74:	20011cbc 	.word	0x20011cbc

08013c78 <_Balloc>:
 8013c78:	b570      	push	{r4, r5, r6, lr}
 8013c7a:	69c6      	ldr	r6, [r0, #28]
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	460d      	mov	r5, r1
 8013c80:	b976      	cbnz	r6, 8013ca0 <_Balloc+0x28>
 8013c82:	2010      	movs	r0, #16
 8013c84:	f7ff ff42 	bl	8013b0c <malloc>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	61e0      	str	r0, [r4, #28]
 8013c8c:	b920      	cbnz	r0, 8013c98 <_Balloc+0x20>
 8013c8e:	4b18      	ldr	r3, [pc, #96]	@ (8013cf0 <_Balloc+0x78>)
 8013c90:	4818      	ldr	r0, [pc, #96]	@ (8013cf4 <_Balloc+0x7c>)
 8013c92:	216b      	movs	r1, #107	@ 0x6b
 8013c94:	f7ff f884 	bl	8012da0 <__assert_func>
 8013c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c9c:	6006      	str	r6, [r0, #0]
 8013c9e:	60c6      	str	r6, [r0, #12]
 8013ca0:	69e6      	ldr	r6, [r4, #28]
 8013ca2:	68f3      	ldr	r3, [r6, #12]
 8013ca4:	b183      	cbz	r3, 8013cc8 <_Balloc+0x50>
 8013ca6:	69e3      	ldr	r3, [r4, #28]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013cae:	b9b8      	cbnz	r0, 8013ce0 <_Balloc+0x68>
 8013cb0:	2101      	movs	r1, #1
 8013cb2:	fa01 f605 	lsl.w	r6, r1, r5
 8013cb6:	1d72      	adds	r2, r6, #5
 8013cb8:	0092      	lsls	r2, r2, #2
 8013cba:	4620      	mov	r0, r4
 8013cbc:	f000 fe39 	bl	8014932 <_calloc_r>
 8013cc0:	b160      	cbz	r0, 8013cdc <_Balloc+0x64>
 8013cc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013cc6:	e00e      	b.n	8013ce6 <_Balloc+0x6e>
 8013cc8:	2221      	movs	r2, #33	@ 0x21
 8013cca:	2104      	movs	r1, #4
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f000 fe30 	bl	8014932 <_calloc_r>
 8013cd2:	69e3      	ldr	r3, [r4, #28]
 8013cd4:	60f0      	str	r0, [r6, #12]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d1e4      	bne.n	8013ca6 <_Balloc+0x2e>
 8013cdc:	2000      	movs	r0, #0
 8013cde:	bd70      	pop	{r4, r5, r6, pc}
 8013ce0:	6802      	ldr	r2, [r0, #0]
 8013ce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013cec:	e7f7      	b.n	8013cde <_Balloc+0x66>
 8013cee:	bf00      	nop
 8013cf0:	080160a1 	.word	0x080160a1
 8013cf4:	080161c2 	.word	0x080161c2

08013cf8 <_Bfree>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	69c6      	ldr	r6, [r0, #28]
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	460c      	mov	r4, r1
 8013d00:	b976      	cbnz	r6, 8013d20 <_Bfree+0x28>
 8013d02:	2010      	movs	r0, #16
 8013d04:	f7ff ff02 	bl	8013b0c <malloc>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	61e8      	str	r0, [r5, #28]
 8013d0c:	b920      	cbnz	r0, 8013d18 <_Bfree+0x20>
 8013d0e:	4b09      	ldr	r3, [pc, #36]	@ (8013d34 <_Bfree+0x3c>)
 8013d10:	4809      	ldr	r0, [pc, #36]	@ (8013d38 <_Bfree+0x40>)
 8013d12:	218f      	movs	r1, #143	@ 0x8f
 8013d14:	f7ff f844 	bl	8012da0 <__assert_func>
 8013d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d1c:	6006      	str	r6, [r0, #0]
 8013d1e:	60c6      	str	r6, [r0, #12]
 8013d20:	b13c      	cbz	r4, 8013d32 <_Bfree+0x3a>
 8013d22:	69eb      	ldr	r3, [r5, #28]
 8013d24:	6862      	ldr	r2, [r4, #4]
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d2c:	6021      	str	r1, [r4, #0]
 8013d2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d32:	bd70      	pop	{r4, r5, r6, pc}
 8013d34:	080160a1 	.word	0x080160a1
 8013d38:	080161c2 	.word	0x080161c2

08013d3c <__multadd>:
 8013d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d40:	690d      	ldr	r5, [r1, #16]
 8013d42:	4607      	mov	r7, r0
 8013d44:	460c      	mov	r4, r1
 8013d46:	461e      	mov	r6, r3
 8013d48:	f101 0c14 	add.w	ip, r1, #20
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	f8dc 3000 	ldr.w	r3, [ip]
 8013d52:	b299      	uxth	r1, r3
 8013d54:	fb02 6101 	mla	r1, r2, r1, r6
 8013d58:	0c1e      	lsrs	r6, r3, #16
 8013d5a:	0c0b      	lsrs	r3, r1, #16
 8013d5c:	fb02 3306 	mla	r3, r2, r6, r3
 8013d60:	b289      	uxth	r1, r1
 8013d62:	3001      	adds	r0, #1
 8013d64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013d68:	4285      	cmp	r5, r0
 8013d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8013d6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013d72:	dcec      	bgt.n	8013d4e <__multadd+0x12>
 8013d74:	b30e      	cbz	r6, 8013dba <__multadd+0x7e>
 8013d76:	68a3      	ldr	r3, [r4, #8]
 8013d78:	42ab      	cmp	r3, r5
 8013d7a:	dc19      	bgt.n	8013db0 <__multadd+0x74>
 8013d7c:	6861      	ldr	r1, [r4, #4]
 8013d7e:	4638      	mov	r0, r7
 8013d80:	3101      	adds	r1, #1
 8013d82:	f7ff ff79 	bl	8013c78 <_Balloc>
 8013d86:	4680      	mov	r8, r0
 8013d88:	b928      	cbnz	r0, 8013d96 <__multadd+0x5a>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8013dc0 <__multadd+0x84>)
 8013d8e:	480d      	ldr	r0, [pc, #52]	@ (8013dc4 <__multadd+0x88>)
 8013d90:	21ba      	movs	r1, #186	@ 0xba
 8013d92:	f7ff f805 	bl	8012da0 <__assert_func>
 8013d96:	6922      	ldr	r2, [r4, #16]
 8013d98:	3202      	adds	r2, #2
 8013d9a:	f104 010c 	add.w	r1, r4, #12
 8013d9e:	0092      	lsls	r2, r2, #2
 8013da0:	300c      	adds	r0, #12
 8013da2:	f7fe ffee 	bl	8012d82 <memcpy>
 8013da6:	4621      	mov	r1, r4
 8013da8:	4638      	mov	r0, r7
 8013daa:	f7ff ffa5 	bl	8013cf8 <_Bfree>
 8013dae:	4644      	mov	r4, r8
 8013db0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013db4:	3501      	adds	r5, #1
 8013db6:	615e      	str	r6, [r3, #20]
 8013db8:	6125      	str	r5, [r4, #16]
 8013dba:	4620      	mov	r0, r4
 8013dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc0:	080161b1 	.word	0x080161b1
 8013dc4:	080161c2 	.word	0x080161c2

08013dc8 <__hi0bits>:
 8013dc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013dcc:	4603      	mov	r3, r0
 8013dce:	bf36      	itet	cc
 8013dd0:	0403      	lslcc	r3, r0, #16
 8013dd2:	2000      	movcs	r0, #0
 8013dd4:	2010      	movcc	r0, #16
 8013dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013dda:	bf3c      	itt	cc
 8013ddc:	021b      	lslcc	r3, r3, #8
 8013dde:	3008      	addcc	r0, #8
 8013de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013de4:	bf3c      	itt	cc
 8013de6:	011b      	lslcc	r3, r3, #4
 8013de8:	3004      	addcc	r0, #4
 8013dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013dee:	bf3c      	itt	cc
 8013df0:	009b      	lslcc	r3, r3, #2
 8013df2:	3002      	addcc	r0, #2
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	db05      	blt.n	8013e04 <__hi0bits+0x3c>
 8013df8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013dfc:	f100 0001 	add.w	r0, r0, #1
 8013e00:	bf08      	it	eq
 8013e02:	2020      	moveq	r0, #32
 8013e04:	4770      	bx	lr

08013e06 <__lo0bits>:
 8013e06:	6803      	ldr	r3, [r0, #0]
 8013e08:	4602      	mov	r2, r0
 8013e0a:	f013 0007 	ands.w	r0, r3, #7
 8013e0e:	d00b      	beq.n	8013e28 <__lo0bits+0x22>
 8013e10:	07d9      	lsls	r1, r3, #31
 8013e12:	d421      	bmi.n	8013e58 <__lo0bits+0x52>
 8013e14:	0798      	lsls	r0, r3, #30
 8013e16:	bf49      	itett	mi
 8013e18:	085b      	lsrmi	r3, r3, #1
 8013e1a:	089b      	lsrpl	r3, r3, #2
 8013e1c:	2001      	movmi	r0, #1
 8013e1e:	6013      	strmi	r3, [r2, #0]
 8013e20:	bf5c      	itt	pl
 8013e22:	6013      	strpl	r3, [r2, #0]
 8013e24:	2002      	movpl	r0, #2
 8013e26:	4770      	bx	lr
 8013e28:	b299      	uxth	r1, r3
 8013e2a:	b909      	cbnz	r1, 8013e30 <__lo0bits+0x2a>
 8013e2c:	0c1b      	lsrs	r3, r3, #16
 8013e2e:	2010      	movs	r0, #16
 8013e30:	b2d9      	uxtb	r1, r3
 8013e32:	b909      	cbnz	r1, 8013e38 <__lo0bits+0x32>
 8013e34:	3008      	adds	r0, #8
 8013e36:	0a1b      	lsrs	r3, r3, #8
 8013e38:	0719      	lsls	r1, r3, #28
 8013e3a:	bf04      	itt	eq
 8013e3c:	091b      	lsreq	r3, r3, #4
 8013e3e:	3004      	addeq	r0, #4
 8013e40:	0799      	lsls	r1, r3, #30
 8013e42:	bf04      	itt	eq
 8013e44:	089b      	lsreq	r3, r3, #2
 8013e46:	3002      	addeq	r0, #2
 8013e48:	07d9      	lsls	r1, r3, #31
 8013e4a:	d403      	bmi.n	8013e54 <__lo0bits+0x4e>
 8013e4c:	085b      	lsrs	r3, r3, #1
 8013e4e:	f100 0001 	add.w	r0, r0, #1
 8013e52:	d003      	beq.n	8013e5c <__lo0bits+0x56>
 8013e54:	6013      	str	r3, [r2, #0]
 8013e56:	4770      	bx	lr
 8013e58:	2000      	movs	r0, #0
 8013e5a:	4770      	bx	lr
 8013e5c:	2020      	movs	r0, #32
 8013e5e:	4770      	bx	lr

08013e60 <__i2b>:
 8013e60:	b510      	push	{r4, lr}
 8013e62:	460c      	mov	r4, r1
 8013e64:	2101      	movs	r1, #1
 8013e66:	f7ff ff07 	bl	8013c78 <_Balloc>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	b928      	cbnz	r0, 8013e7a <__i2b+0x1a>
 8013e6e:	4b05      	ldr	r3, [pc, #20]	@ (8013e84 <__i2b+0x24>)
 8013e70:	4805      	ldr	r0, [pc, #20]	@ (8013e88 <__i2b+0x28>)
 8013e72:	f240 1145 	movw	r1, #325	@ 0x145
 8013e76:	f7fe ff93 	bl	8012da0 <__assert_func>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	6144      	str	r4, [r0, #20]
 8013e7e:	6103      	str	r3, [r0, #16]
 8013e80:	bd10      	pop	{r4, pc}
 8013e82:	bf00      	nop
 8013e84:	080161b1 	.word	0x080161b1
 8013e88:	080161c2 	.word	0x080161c2

08013e8c <__multiply>:
 8013e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e90:	4614      	mov	r4, r2
 8013e92:	690a      	ldr	r2, [r1, #16]
 8013e94:	6923      	ldr	r3, [r4, #16]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	bfa8      	it	ge
 8013e9a:	4623      	movge	r3, r4
 8013e9c:	460f      	mov	r7, r1
 8013e9e:	bfa4      	itt	ge
 8013ea0:	460c      	movge	r4, r1
 8013ea2:	461f      	movge	r7, r3
 8013ea4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013ea8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013eac:	68a3      	ldr	r3, [r4, #8]
 8013eae:	6861      	ldr	r1, [r4, #4]
 8013eb0:	eb0a 0609 	add.w	r6, sl, r9
 8013eb4:	42b3      	cmp	r3, r6
 8013eb6:	b085      	sub	sp, #20
 8013eb8:	bfb8      	it	lt
 8013eba:	3101      	addlt	r1, #1
 8013ebc:	f7ff fedc 	bl	8013c78 <_Balloc>
 8013ec0:	b930      	cbnz	r0, 8013ed0 <__multiply+0x44>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	4b44      	ldr	r3, [pc, #272]	@ (8013fd8 <__multiply+0x14c>)
 8013ec6:	4845      	ldr	r0, [pc, #276]	@ (8013fdc <__multiply+0x150>)
 8013ec8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013ecc:	f7fe ff68 	bl	8012da0 <__assert_func>
 8013ed0:	f100 0514 	add.w	r5, r0, #20
 8013ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013ed8:	462b      	mov	r3, r5
 8013eda:	2200      	movs	r2, #0
 8013edc:	4543      	cmp	r3, r8
 8013ede:	d321      	bcc.n	8013f24 <__multiply+0x98>
 8013ee0:	f107 0114 	add.w	r1, r7, #20
 8013ee4:	f104 0214 	add.w	r2, r4, #20
 8013ee8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013eec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013ef0:	9302      	str	r3, [sp, #8]
 8013ef2:	1b13      	subs	r3, r2, r4
 8013ef4:	3b15      	subs	r3, #21
 8013ef6:	f023 0303 	bic.w	r3, r3, #3
 8013efa:	3304      	adds	r3, #4
 8013efc:	f104 0715 	add.w	r7, r4, #21
 8013f00:	42ba      	cmp	r2, r7
 8013f02:	bf38      	it	cc
 8013f04:	2304      	movcc	r3, #4
 8013f06:	9301      	str	r3, [sp, #4]
 8013f08:	9b02      	ldr	r3, [sp, #8]
 8013f0a:	9103      	str	r1, [sp, #12]
 8013f0c:	428b      	cmp	r3, r1
 8013f0e:	d80c      	bhi.n	8013f2a <__multiply+0x9e>
 8013f10:	2e00      	cmp	r6, #0
 8013f12:	dd03      	ble.n	8013f1c <__multiply+0x90>
 8013f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d05b      	beq.n	8013fd4 <__multiply+0x148>
 8013f1c:	6106      	str	r6, [r0, #16]
 8013f1e:	b005      	add	sp, #20
 8013f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f24:	f843 2b04 	str.w	r2, [r3], #4
 8013f28:	e7d8      	b.n	8013edc <__multiply+0x50>
 8013f2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013f2e:	f1ba 0f00 	cmp.w	sl, #0
 8013f32:	d024      	beq.n	8013f7e <__multiply+0xf2>
 8013f34:	f104 0e14 	add.w	lr, r4, #20
 8013f38:	46a9      	mov	r9, r5
 8013f3a:	f04f 0c00 	mov.w	ip, #0
 8013f3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013f42:	f8d9 3000 	ldr.w	r3, [r9]
 8013f46:	fa1f fb87 	uxth.w	fp, r7
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013f50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013f54:	f8d9 7000 	ldr.w	r7, [r9]
 8013f58:	4463      	add	r3, ip
 8013f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013f5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013f62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013f6c:	4572      	cmp	r2, lr
 8013f6e:	f849 3b04 	str.w	r3, [r9], #4
 8013f72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013f76:	d8e2      	bhi.n	8013f3e <__multiply+0xb2>
 8013f78:	9b01      	ldr	r3, [sp, #4]
 8013f7a:	f845 c003 	str.w	ip, [r5, r3]
 8013f7e:	9b03      	ldr	r3, [sp, #12]
 8013f80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013f84:	3104      	adds	r1, #4
 8013f86:	f1b9 0f00 	cmp.w	r9, #0
 8013f8a:	d021      	beq.n	8013fd0 <__multiply+0x144>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	f104 0c14 	add.w	ip, r4, #20
 8013f92:	46ae      	mov	lr, r5
 8013f94:	f04f 0a00 	mov.w	sl, #0
 8013f98:	f8bc b000 	ldrh.w	fp, [ip]
 8013f9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013fa0:	fb09 770b 	mla	r7, r9, fp, r7
 8013fa4:	4457      	add	r7, sl
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013fac:	f84e 3b04 	str.w	r3, [lr], #4
 8013fb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013fb8:	f8be 3000 	ldrh.w	r3, [lr]
 8013fbc:	fb09 330a 	mla	r3, r9, sl, r3
 8013fc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013fc4:	4562      	cmp	r2, ip
 8013fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013fca:	d8e5      	bhi.n	8013f98 <__multiply+0x10c>
 8013fcc:	9f01      	ldr	r7, [sp, #4]
 8013fce:	51eb      	str	r3, [r5, r7]
 8013fd0:	3504      	adds	r5, #4
 8013fd2:	e799      	b.n	8013f08 <__multiply+0x7c>
 8013fd4:	3e01      	subs	r6, #1
 8013fd6:	e79b      	b.n	8013f10 <__multiply+0x84>
 8013fd8:	080161b1 	.word	0x080161b1
 8013fdc:	080161c2 	.word	0x080161c2

08013fe0 <__pow5mult>:
 8013fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fe4:	4615      	mov	r5, r2
 8013fe6:	f012 0203 	ands.w	r2, r2, #3
 8013fea:	4607      	mov	r7, r0
 8013fec:	460e      	mov	r6, r1
 8013fee:	d007      	beq.n	8014000 <__pow5mult+0x20>
 8013ff0:	4c25      	ldr	r4, [pc, #148]	@ (8014088 <__pow5mult+0xa8>)
 8013ff2:	3a01      	subs	r2, #1
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013ffa:	f7ff fe9f 	bl	8013d3c <__multadd>
 8013ffe:	4606      	mov	r6, r0
 8014000:	10ad      	asrs	r5, r5, #2
 8014002:	d03d      	beq.n	8014080 <__pow5mult+0xa0>
 8014004:	69fc      	ldr	r4, [r7, #28]
 8014006:	b97c      	cbnz	r4, 8014028 <__pow5mult+0x48>
 8014008:	2010      	movs	r0, #16
 801400a:	f7ff fd7f 	bl	8013b0c <malloc>
 801400e:	4602      	mov	r2, r0
 8014010:	61f8      	str	r0, [r7, #28]
 8014012:	b928      	cbnz	r0, 8014020 <__pow5mult+0x40>
 8014014:	4b1d      	ldr	r3, [pc, #116]	@ (801408c <__pow5mult+0xac>)
 8014016:	481e      	ldr	r0, [pc, #120]	@ (8014090 <__pow5mult+0xb0>)
 8014018:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801401c:	f7fe fec0 	bl	8012da0 <__assert_func>
 8014020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014024:	6004      	str	r4, [r0, #0]
 8014026:	60c4      	str	r4, [r0, #12]
 8014028:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801402c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014030:	b94c      	cbnz	r4, 8014046 <__pow5mult+0x66>
 8014032:	f240 2171 	movw	r1, #625	@ 0x271
 8014036:	4638      	mov	r0, r7
 8014038:	f7ff ff12 	bl	8013e60 <__i2b>
 801403c:	2300      	movs	r3, #0
 801403e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014042:	4604      	mov	r4, r0
 8014044:	6003      	str	r3, [r0, #0]
 8014046:	f04f 0900 	mov.w	r9, #0
 801404a:	07eb      	lsls	r3, r5, #31
 801404c:	d50a      	bpl.n	8014064 <__pow5mult+0x84>
 801404e:	4631      	mov	r1, r6
 8014050:	4622      	mov	r2, r4
 8014052:	4638      	mov	r0, r7
 8014054:	f7ff ff1a 	bl	8013e8c <__multiply>
 8014058:	4631      	mov	r1, r6
 801405a:	4680      	mov	r8, r0
 801405c:	4638      	mov	r0, r7
 801405e:	f7ff fe4b 	bl	8013cf8 <_Bfree>
 8014062:	4646      	mov	r6, r8
 8014064:	106d      	asrs	r5, r5, #1
 8014066:	d00b      	beq.n	8014080 <__pow5mult+0xa0>
 8014068:	6820      	ldr	r0, [r4, #0]
 801406a:	b938      	cbnz	r0, 801407c <__pow5mult+0x9c>
 801406c:	4622      	mov	r2, r4
 801406e:	4621      	mov	r1, r4
 8014070:	4638      	mov	r0, r7
 8014072:	f7ff ff0b 	bl	8013e8c <__multiply>
 8014076:	6020      	str	r0, [r4, #0]
 8014078:	f8c0 9000 	str.w	r9, [r0]
 801407c:	4604      	mov	r4, r0
 801407e:	e7e4      	b.n	801404a <__pow5mult+0x6a>
 8014080:	4630      	mov	r0, r6
 8014082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014086:	bf00      	nop
 8014088:	0801621c 	.word	0x0801621c
 801408c:	080160a1 	.word	0x080160a1
 8014090:	080161c2 	.word	0x080161c2

08014094 <__lshift>:
 8014094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014098:	460c      	mov	r4, r1
 801409a:	6849      	ldr	r1, [r1, #4]
 801409c:	6923      	ldr	r3, [r4, #16]
 801409e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80140a2:	68a3      	ldr	r3, [r4, #8]
 80140a4:	4607      	mov	r7, r0
 80140a6:	4691      	mov	r9, r2
 80140a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80140ac:	f108 0601 	add.w	r6, r8, #1
 80140b0:	42b3      	cmp	r3, r6
 80140b2:	db0b      	blt.n	80140cc <__lshift+0x38>
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7ff fddf 	bl	8013c78 <_Balloc>
 80140ba:	4605      	mov	r5, r0
 80140bc:	b948      	cbnz	r0, 80140d2 <__lshift+0x3e>
 80140be:	4602      	mov	r2, r0
 80140c0:	4b28      	ldr	r3, [pc, #160]	@ (8014164 <__lshift+0xd0>)
 80140c2:	4829      	ldr	r0, [pc, #164]	@ (8014168 <__lshift+0xd4>)
 80140c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80140c8:	f7fe fe6a 	bl	8012da0 <__assert_func>
 80140cc:	3101      	adds	r1, #1
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	e7ee      	b.n	80140b0 <__lshift+0x1c>
 80140d2:	2300      	movs	r3, #0
 80140d4:	f100 0114 	add.w	r1, r0, #20
 80140d8:	f100 0210 	add.w	r2, r0, #16
 80140dc:	4618      	mov	r0, r3
 80140de:	4553      	cmp	r3, sl
 80140e0:	db33      	blt.n	801414a <__lshift+0xb6>
 80140e2:	6920      	ldr	r0, [r4, #16]
 80140e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80140e8:	f104 0314 	add.w	r3, r4, #20
 80140ec:	f019 091f 	ands.w	r9, r9, #31
 80140f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80140f8:	d02b      	beq.n	8014152 <__lshift+0xbe>
 80140fa:	f1c9 0e20 	rsb	lr, r9, #32
 80140fe:	468a      	mov	sl, r1
 8014100:	2200      	movs	r2, #0
 8014102:	6818      	ldr	r0, [r3, #0]
 8014104:	fa00 f009 	lsl.w	r0, r0, r9
 8014108:	4310      	orrs	r0, r2
 801410a:	f84a 0b04 	str.w	r0, [sl], #4
 801410e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014112:	459c      	cmp	ip, r3
 8014114:	fa22 f20e 	lsr.w	r2, r2, lr
 8014118:	d8f3      	bhi.n	8014102 <__lshift+0x6e>
 801411a:	ebac 0304 	sub.w	r3, ip, r4
 801411e:	3b15      	subs	r3, #21
 8014120:	f023 0303 	bic.w	r3, r3, #3
 8014124:	3304      	adds	r3, #4
 8014126:	f104 0015 	add.w	r0, r4, #21
 801412a:	4584      	cmp	ip, r0
 801412c:	bf38      	it	cc
 801412e:	2304      	movcc	r3, #4
 8014130:	50ca      	str	r2, [r1, r3]
 8014132:	b10a      	cbz	r2, 8014138 <__lshift+0xa4>
 8014134:	f108 0602 	add.w	r6, r8, #2
 8014138:	3e01      	subs	r6, #1
 801413a:	4638      	mov	r0, r7
 801413c:	612e      	str	r6, [r5, #16]
 801413e:	4621      	mov	r1, r4
 8014140:	f7ff fdda 	bl	8013cf8 <_Bfree>
 8014144:	4628      	mov	r0, r5
 8014146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414a:	f842 0f04 	str.w	r0, [r2, #4]!
 801414e:	3301      	adds	r3, #1
 8014150:	e7c5      	b.n	80140de <__lshift+0x4a>
 8014152:	3904      	subs	r1, #4
 8014154:	f853 2b04 	ldr.w	r2, [r3], #4
 8014158:	f841 2f04 	str.w	r2, [r1, #4]!
 801415c:	459c      	cmp	ip, r3
 801415e:	d8f9      	bhi.n	8014154 <__lshift+0xc0>
 8014160:	e7ea      	b.n	8014138 <__lshift+0xa4>
 8014162:	bf00      	nop
 8014164:	080161b1 	.word	0x080161b1
 8014168:	080161c2 	.word	0x080161c2

0801416c <__mcmp>:
 801416c:	690a      	ldr	r2, [r1, #16]
 801416e:	4603      	mov	r3, r0
 8014170:	6900      	ldr	r0, [r0, #16]
 8014172:	1a80      	subs	r0, r0, r2
 8014174:	b530      	push	{r4, r5, lr}
 8014176:	d10e      	bne.n	8014196 <__mcmp+0x2a>
 8014178:	3314      	adds	r3, #20
 801417a:	3114      	adds	r1, #20
 801417c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801418c:	4295      	cmp	r5, r2
 801418e:	d003      	beq.n	8014198 <__mcmp+0x2c>
 8014190:	d205      	bcs.n	801419e <__mcmp+0x32>
 8014192:	f04f 30ff 	mov.w	r0, #4294967295
 8014196:	bd30      	pop	{r4, r5, pc}
 8014198:	42a3      	cmp	r3, r4
 801419a:	d3f3      	bcc.n	8014184 <__mcmp+0x18>
 801419c:	e7fb      	b.n	8014196 <__mcmp+0x2a>
 801419e:	2001      	movs	r0, #1
 80141a0:	e7f9      	b.n	8014196 <__mcmp+0x2a>
	...

080141a4 <__mdiff>:
 80141a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a8:	4689      	mov	r9, r1
 80141aa:	4606      	mov	r6, r0
 80141ac:	4611      	mov	r1, r2
 80141ae:	4648      	mov	r0, r9
 80141b0:	4614      	mov	r4, r2
 80141b2:	f7ff ffdb 	bl	801416c <__mcmp>
 80141b6:	1e05      	subs	r5, r0, #0
 80141b8:	d112      	bne.n	80141e0 <__mdiff+0x3c>
 80141ba:	4629      	mov	r1, r5
 80141bc:	4630      	mov	r0, r6
 80141be:	f7ff fd5b 	bl	8013c78 <_Balloc>
 80141c2:	4602      	mov	r2, r0
 80141c4:	b928      	cbnz	r0, 80141d2 <__mdiff+0x2e>
 80141c6:	4b3f      	ldr	r3, [pc, #252]	@ (80142c4 <__mdiff+0x120>)
 80141c8:	f240 2137 	movw	r1, #567	@ 0x237
 80141cc:	483e      	ldr	r0, [pc, #248]	@ (80142c8 <__mdiff+0x124>)
 80141ce:	f7fe fde7 	bl	8012da0 <__assert_func>
 80141d2:	2301      	movs	r3, #1
 80141d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80141d8:	4610      	mov	r0, r2
 80141da:	b003      	add	sp, #12
 80141dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e0:	bfbc      	itt	lt
 80141e2:	464b      	movlt	r3, r9
 80141e4:	46a1      	movlt	r9, r4
 80141e6:	4630      	mov	r0, r6
 80141e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80141ec:	bfba      	itte	lt
 80141ee:	461c      	movlt	r4, r3
 80141f0:	2501      	movlt	r5, #1
 80141f2:	2500      	movge	r5, #0
 80141f4:	f7ff fd40 	bl	8013c78 <_Balloc>
 80141f8:	4602      	mov	r2, r0
 80141fa:	b918      	cbnz	r0, 8014204 <__mdiff+0x60>
 80141fc:	4b31      	ldr	r3, [pc, #196]	@ (80142c4 <__mdiff+0x120>)
 80141fe:	f240 2145 	movw	r1, #581	@ 0x245
 8014202:	e7e3      	b.n	80141cc <__mdiff+0x28>
 8014204:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014208:	6926      	ldr	r6, [r4, #16]
 801420a:	60c5      	str	r5, [r0, #12]
 801420c:	f109 0310 	add.w	r3, r9, #16
 8014210:	f109 0514 	add.w	r5, r9, #20
 8014214:	f104 0e14 	add.w	lr, r4, #20
 8014218:	f100 0b14 	add.w	fp, r0, #20
 801421c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014220:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014224:	9301      	str	r3, [sp, #4]
 8014226:	46d9      	mov	r9, fp
 8014228:	f04f 0c00 	mov.w	ip, #0
 801422c:	9b01      	ldr	r3, [sp, #4]
 801422e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014232:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014236:	9301      	str	r3, [sp, #4]
 8014238:	fa1f f38a 	uxth.w	r3, sl
 801423c:	4619      	mov	r1, r3
 801423e:	b283      	uxth	r3, r0
 8014240:	1acb      	subs	r3, r1, r3
 8014242:	0c00      	lsrs	r0, r0, #16
 8014244:	4463      	add	r3, ip
 8014246:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801424a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801424e:	b29b      	uxth	r3, r3
 8014250:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014254:	4576      	cmp	r6, lr
 8014256:	f849 3b04 	str.w	r3, [r9], #4
 801425a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801425e:	d8e5      	bhi.n	801422c <__mdiff+0x88>
 8014260:	1b33      	subs	r3, r6, r4
 8014262:	3b15      	subs	r3, #21
 8014264:	f023 0303 	bic.w	r3, r3, #3
 8014268:	3415      	adds	r4, #21
 801426a:	3304      	adds	r3, #4
 801426c:	42a6      	cmp	r6, r4
 801426e:	bf38      	it	cc
 8014270:	2304      	movcc	r3, #4
 8014272:	441d      	add	r5, r3
 8014274:	445b      	add	r3, fp
 8014276:	461e      	mov	r6, r3
 8014278:	462c      	mov	r4, r5
 801427a:	4544      	cmp	r4, r8
 801427c:	d30e      	bcc.n	801429c <__mdiff+0xf8>
 801427e:	f108 0103 	add.w	r1, r8, #3
 8014282:	1b49      	subs	r1, r1, r5
 8014284:	f021 0103 	bic.w	r1, r1, #3
 8014288:	3d03      	subs	r5, #3
 801428a:	45a8      	cmp	r8, r5
 801428c:	bf38      	it	cc
 801428e:	2100      	movcc	r1, #0
 8014290:	440b      	add	r3, r1
 8014292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014296:	b191      	cbz	r1, 80142be <__mdiff+0x11a>
 8014298:	6117      	str	r7, [r2, #16]
 801429a:	e79d      	b.n	80141d8 <__mdiff+0x34>
 801429c:	f854 1b04 	ldr.w	r1, [r4], #4
 80142a0:	46e6      	mov	lr, ip
 80142a2:	0c08      	lsrs	r0, r1, #16
 80142a4:	fa1c fc81 	uxtah	ip, ip, r1
 80142a8:	4471      	add	r1, lr
 80142aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80142ae:	b289      	uxth	r1, r1
 80142b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80142b4:	f846 1b04 	str.w	r1, [r6], #4
 80142b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80142bc:	e7dd      	b.n	801427a <__mdiff+0xd6>
 80142be:	3f01      	subs	r7, #1
 80142c0:	e7e7      	b.n	8014292 <__mdiff+0xee>
 80142c2:	bf00      	nop
 80142c4:	080161b1 	.word	0x080161b1
 80142c8:	080161c2 	.word	0x080161c2

080142cc <__d2b>:
 80142cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142d0:	460f      	mov	r7, r1
 80142d2:	2101      	movs	r1, #1
 80142d4:	ec59 8b10 	vmov	r8, r9, d0
 80142d8:	4616      	mov	r6, r2
 80142da:	f7ff fccd 	bl	8013c78 <_Balloc>
 80142de:	4604      	mov	r4, r0
 80142e0:	b930      	cbnz	r0, 80142f0 <__d2b+0x24>
 80142e2:	4602      	mov	r2, r0
 80142e4:	4b23      	ldr	r3, [pc, #140]	@ (8014374 <__d2b+0xa8>)
 80142e6:	4824      	ldr	r0, [pc, #144]	@ (8014378 <__d2b+0xac>)
 80142e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80142ec:	f7fe fd58 	bl	8012da0 <__assert_func>
 80142f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80142f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142f8:	b10d      	cbz	r5, 80142fe <__d2b+0x32>
 80142fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	f1b8 0300 	subs.w	r3, r8, #0
 8014304:	d023      	beq.n	801434e <__d2b+0x82>
 8014306:	4668      	mov	r0, sp
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	f7ff fd7c 	bl	8013e06 <__lo0bits>
 801430e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014312:	b1d0      	cbz	r0, 801434a <__d2b+0x7e>
 8014314:	f1c0 0320 	rsb	r3, r0, #32
 8014318:	fa02 f303 	lsl.w	r3, r2, r3
 801431c:	430b      	orrs	r3, r1
 801431e:	40c2      	lsrs	r2, r0
 8014320:	6163      	str	r3, [r4, #20]
 8014322:	9201      	str	r2, [sp, #4]
 8014324:	9b01      	ldr	r3, [sp, #4]
 8014326:	61a3      	str	r3, [r4, #24]
 8014328:	2b00      	cmp	r3, #0
 801432a:	bf0c      	ite	eq
 801432c:	2201      	moveq	r2, #1
 801432e:	2202      	movne	r2, #2
 8014330:	6122      	str	r2, [r4, #16]
 8014332:	b1a5      	cbz	r5, 801435e <__d2b+0x92>
 8014334:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014338:	4405      	add	r5, r0
 801433a:	603d      	str	r5, [r7, #0]
 801433c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014340:	6030      	str	r0, [r6, #0]
 8014342:	4620      	mov	r0, r4
 8014344:	b003      	add	sp, #12
 8014346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801434a:	6161      	str	r1, [r4, #20]
 801434c:	e7ea      	b.n	8014324 <__d2b+0x58>
 801434e:	a801      	add	r0, sp, #4
 8014350:	f7ff fd59 	bl	8013e06 <__lo0bits>
 8014354:	9b01      	ldr	r3, [sp, #4]
 8014356:	6163      	str	r3, [r4, #20]
 8014358:	3020      	adds	r0, #32
 801435a:	2201      	movs	r2, #1
 801435c:	e7e8      	b.n	8014330 <__d2b+0x64>
 801435e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014362:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014366:	6038      	str	r0, [r7, #0]
 8014368:	6918      	ldr	r0, [r3, #16]
 801436a:	f7ff fd2d 	bl	8013dc8 <__hi0bits>
 801436e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014372:	e7e5      	b.n	8014340 <__d2b+0x74>
 8014374:	080161b1 	.word	0x080161b1
 8014378:	080161c2 	.word	0x080161c2

0801437c <__ssputs_r>:
 801437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014380:	688e      	ldr	r6, [r1, #8]
 8014382:	461f      	mov	r7, r3
 8014384:	42be      	cmp	r6, r7
 8014386:	680b      	ldr	r3, [r1, #0]
 8014388:	4682      	mov	sl, r0
 801438a:	460c      	mov	r4, r1
 801438c:	4690      	mov	r8, r2
 801438e:	d82d      	bhi.n	80143ec <__ssputs_r+0x70>
 8014390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014398:	d026      	beq.n	80143e8 <__ssputs_r+0x6c>
 801439a:	6965      	ldr	r5, [r4, #20]
 801439c:	6909      	ldr	r1, [r1, #16]
 801439e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143a2:	eba3 0901 	sub.w	r9, r3, r1
 80143a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143aa:	1c7b      	adds	r3, r7, #1
 80143ac:	444b      	add	r3, r9
 80143ae:	106d      	asrs	r5, r5, #1
 80143b0:	429d      	cmp	r5, r3
 80143b2:	bf38      	it	cc
 80143b4:	461d      	movcc	r5, r3
 80143b6:	0553      	lsls	r3, r2, #21
 80143b8:	d527      	bpl.n	801440a <__ssputs_r+0x8e>
 80143ba:	4629      	mov	r1, r5
 80143bc:	f7ff fbd0 	bl	8013b60 <_malloc_r>
 80143c0:	4606      	mov	r6, r0
 80143c2:	b360      	cbz	r0, 801441e <__ssputs_r+0xa2>
 80143c4:	6921      	ldr	r1, [r4, #16]
 80143c6:	464a      	mov	r2, r9
 80143c8:	f7fe fcdb 	bl	8012d82 <memcpy>
 80143cc:	89a3      	ldrh	r3, [r4, #12]
 80143ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80143d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143d6:	81a3      	strh	r3, [r4, #12]
 80143d8:	6126      	str	r6, [r4, #16]
 80143da:	6165      	str	r5, [r4, #20]
 80143dc:	444e      	add	r6, r9
 80143de:	eba5 0509 	sub.w	r5, r5, r9
 80143e2:	6026      	str	r6, [r4, #0]
 80143e4:	60a5      	str	r5, [r4, #8]
 80143e6:	463e      	mov	r6, r7
 80143e8:	42be      	cmp	r6, r7
 80143ea:	d900      	bls.n	80143ee <__ssputs_r+0x72>
 80143ec:	463e      	mov	r6, r7
 80143ee:	6820      	ldr	r0, [r4, #0]
 80143f0:	4632      	mov	r2, r6
 80143f2:	4641      	mov	r1, r8
 80143f4:	f000 fa6c 	bl	80148d0 <memmove>
 80143f8:	68a3      	ldr	r3, [r4, #8]
 80143fa:	1b9b      	subs	r3, r3, r6
 80143fc:	60a3      	str	r3, [r4, #8]
 80143fe:	6823      	ldr	r3, [r4, #0]
 8014400:	4433      	add	r3, r6
 8014402:	6023      	str	r3, [r4, #0]
 8014404:	2000      	movs	r0, #0
 8014406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801440a:	462a      	mov	r2, r5
 801440c:	f000 fab7 	bl	801497e <_realloc_r>
 8014410:	4606      	mov	r6, r0
 8014412:	2800      	cmp	r0, #0
 8014414:	d1e0      	bne.n	80143d8 <__ssputs_r+0x5c>
 8014416:	6921      	ldr	r1, [r4, #16]
 8014418:	4650      	mov	r0, sl
 801441a:	f7ff fb2d 	bl	8013a78 <_free_r>
 801441e:	230c      	movs	r3, #12
 8014420:	f8ca 3000 	str.w	r3, [sl]
 8014424:	89a3      	ldrh	r3, [r4, #12]
 8014426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801442a:	81a3      	strh	r3, [r4, #12]
 801442c:	f04f 30ff 	mov.w	r0, #4294967295
 8014430:	e7e9      	b.n	8014406 <__ssputs_r+0x8a>
	...

08014434 <_svfiprintf_r>:
 8014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014438:	4698      	mov	r8, r3
 801443a:	898b      	ldrh	r3, [r1, #12]
 801443c:	061b      	lsls	r3, r3, #24
 801443e:	b09d      	sub	sp, #116	@ 0x74
 8014440:	4607      	mov	r7, r0
 8014442:	460d      	mov	r5, r1
 8014444:	4614      	mov	r4, r2
 8014446:	d510      	bpl.n	801446a <_svfiprintf_r+0x36>
 8014448:	690b      	ldr	r3, [r1, #16]
 801444a:	b973      	cbnz	r3, 801446a <_svfiprintf_r+0x36>
 801444c:	2140      	movs	r1, #64	@ 0x40
 801444e:	f7ff fb87 	bl	8013b60 <_malloc_r>
 8014452:	6028      	str	r0, [r5, #0]
 8014454:	6128      	str	r0, [r5, #16]
 8014456:	b930      	cbnz	r0, 8014466 <_svfiprintf_r+0x32>
 8014458:	230c      	movs	r3, #12
 801445a:	603b      	str	r3, [r7, #0]
 801445c:	f04f 30ff 	mov.w	r0, #4294967295
 8014460:	b01d      	add	sp, #116	@ 0x74
 8014462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014466:	2340      	movs	r3, #64	@ 0x40
 8014468:	616b      	str	r3, [r5, #20]
 801446a:	2300      	movs	r3, #0
 801446c:	9309      	str	r3, [sp, #36]	@ 0x24
 801446e:	2320      	movs	r3, #32
 8014470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014474:	f8cd 800c 	str.w	r8, [sp, #12]
 8014478:	2330      	movs	r3, #48	@ 0x30
 801447a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014618 <_svfiprintf_r+0x1e4>
 801447e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014482:	f04f 0901 	mov.w	r9, #1
 8014486:	4623      	mov	r3, r4
 8014488:	469a      	mov	sl, r3
 801448a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801448e:	b10a      	cbz	r2, 8014494 <_svfiprintf_r+0x60>
 8014490:	2a25      	cmp	r2, #37	@ 0x25
 8014492:	d1f9      	bne.n	8014488 <_svfiprintf_r+0x54>
 8014494:	ebba 0b04 	subs.w	fp, sl, r4
 8014498:	d00b      	beq.n	80144b2 <_svfiprintf_r+0x7e>
 801449a:	465b      	mov	r3, fp
 801449c:	4622      	mov	r2, r4
 801449e:	4629      	mov	r1, r5
 80144a0:	4638      	mov	r0, r7
 80144a2:	f7ff ff6b 	bl	801437c <__ssputs_r>
 80144a6:	3001      	adds	r0, #1
 80144a8:	f000 80a7 	beq.w	80145fa <_svfiprintf_r+0x1c6>
 80144ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144ae:	445a      	add	r2, fp
 80144b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80144b2:	f89a 3000 	ldrb.w	r3, [sl]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f000 809f 	beq.w	80145fa <_svfiprintf_r+0x1c6>
 80144bc:	2300      	movs	r3, #0
 80144be:	f04f 32ff 	mov.w	r2, #4294967295
 80144c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144c6:	f10a 0a01 	add.w	sl, sl, #1
 80144ca:	9304      	str	r3, [sp, #16]
 80144cc:	9307      	str	r3, [sp, #28]
 80144ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80144d4:	4654      	mov	r4, sl
 80144d6:	2205      	movs	r2, #5
 80144d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144dc:	484e      	ldr	r0, [pc, #312]	@ (8014618 <_svfiprintf_r+0x1e4>)
 80144de:	f7eb fe77 	bl	80001d0 <memchr>
 80144e2:	9a04      	ldr	r2, [sp, #16]
 80144e4:	b9d8      	cbnz	r0, 801451e <_svfiprintf_r+0xea>
 80144e6:	06d0      	lsls	r0, r2, #27
 80144e8:	bf44      	itt	mi
 80144ea:	2320      	movmi	r3, #32
 80144ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144f0:	0711      	lsls	r1, r2, #28
 80144f2:	bf44      	itt	mi
 80144f4:	232b      	movmi	r3, #43	@ 0x2b
 80144f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144fa:	f89a 3000 	ldrb.w	r3, [sl]
 80144fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014500:	d015      	beq.n	801452e <_svfiprintf_r+0xfa>
 8014502:	9a07      	ldr	r2, [sp, #28]
 8014504:	4654      	mov	r4, sl
 8014506:	2000      	movs	r0, #0
 8014508:	f04f 0c0a 	mov.w	ip, #10
 801450c:	4621      	mov	r1, r4
 801450e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014512:	3b30      	subs	r3, #48	@ 0x30
 8014514:	2b09      	cmp	r3, #9
 8014516:	d94b      	bls.n	80145b0 <_svfiprintf_r+0x17c>
 8014518:	b1b0      	cbz	r0, 8014548 <_svfiprintf_r+0x114>
 801451a:	9207      	str	r2, [sp, #28]
 801451c:	e014      	b.n	8014548 <_svfiprintf_r+0x114>
 801451e:	eba0 0308 	sub.w	r3, r0, r8
 8014522:	fa09 f303 	lsl.w	r3, r9, r3
 8014526:	4313      	orrs	r3, r2
 8014528:	9304      	str	r3, [sp, #16]
 801452a:	46a2      	mov	sl, r4
 801452c:	e7d2      	b.n	80144d4 <_svfiprintf_r+0xa0>
 801452e:	9b03      	ldr	r3, [sp, #12]
 8014530:	1d19      	adds	r1, r3, #4
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	9103      	str	r1, [sp, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	bfbb      	ittet	lt
 801453a:	425b      	neglt	r3, r3
 801453c:	f042 0202 	orrlt.w	r2, r2, #2
 8014540:	9307      	strge	r3, [sp, #28]
 8014542:	9307      	strlt	r3, [sp, #28]
 8014544:	bfb8      	it	lt
 8014546:	9204      	strlt	r2, [sp, #16]
 8014548:	7823      	ldrb	r3, [r4, #0]
 801454a:	2b2e      	cmp	r3, #46	@ 0x2e
 801454c:	d10a      	bne.n	8014564 <_svfiprintf_r+0x130>
 801454e:	7863      	ldrb	r3, [r4, #1]
 8014550:	2b2a      	cmp	r3, #42	@ 0x2a
 8014552:	d132      	bne.n	80145ba <_svfiprintf_r+0x186>
 8014554:	9b03      	ldr	r3, [sp, #12]
 8014556:	1d1a      	adds	r2, r3, #4
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	9203      	str	r2, [sp, #12]
 801455c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014560:	3402      	adds	r4, #2
 8014562:	9305      	str	r3, [sp, #20]
 8014564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014628 <_svfiprintf_r+0x1f4>
 8014568:	7821      	ldrb	r1, [r4, #0]
 801456a:	2203      	movs	r2, #3
 801456c:	4650      	mov	r0, sl
 801456e:	f7eb fe2f 	bl	80001d0 <memchr>
 8014572:	b138      	cbz	r0, 8014584 <_svfiprintf_r+0x150>
 8014574:	9b04      	ldr	r3, [sp, #16]
 8014576:	eba0 000a 	sub.w	r0, r0, sl
 801457a:	2240      	movs	r2, #64	@ 0x40
 801457c:	4082      	lsls	r2, r0
 801457e:	4313      	orrs	r3, r2
 8014580:	3401      	adds	r4, #1
 8014582:	9304      	str	r3, [sp, #16]
 8014584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014588:	4824      	ldr	r0, [pc, #144]	@ (801461c <_svfiprintf_r+0x1e8>)
 801458a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801458e:	2206      	movs	r2, #6
 8014590:	f7eb fe1e 	bl	80001d0 <memchr>
 8014594:	2800      	cmp	r0, #0
 8014596:	d036      	beq.n	8014606 <_svfiprintf_r+0x1d2>
 8014598:	4b21      	ldr	r3, [pc, #132]	@ (8014620 <_svfiprintf_r+0x1ec>)
 801459a:	bb1b      	cbnz	r3, 80145e4 <_svfiprintf_r+0x1b0>
 801459c:	9b03      	ldr	r3, [sp, #12]
 801459e:	3307      	adds	r3, #7
 80145a0:	f023 0307 	bic.w	r3, r3, #7
 80145a4:	3308      	adds	r3, #8
 80145a6:	9303      	str	r3, [sp, #12]
 80145a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145aa:	4433      	add	r3, r6
 80145ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80145ae:	e76a      	b.n	8014486 <_svfiprintf_r+0x52>
 80145b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80145b4:	460c      	mov	r4, r1
 80145b6:	2001      	movs	r0, #1
 80145b8:	e7a8      	b.n	801450c <_svfiprintf_r+0xd8>
 80145ba:	2300      	movs	r3, #0
 80145bc:	3401      	adds	r4, #1
 80145be:	9305      	str	r3, [sp, #20]
 80145c0:	4619      	mov	r1, r3
 80145c2:	f04f 0c0a 	mov.w	ip, #10
 80145c6:	4620      	mov	r0, r4
 80145c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145cc:	3a30      	subs	r2, #48	@ 0x30
 80145ce:	2a09      	cmp	r2, #9
 80145d0:	d903      	bls.n	80145da <_svfiprintf_r+0x1a6>
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d0c6      	beq.n	8014564 <_svfiprintf_r+0x130>
 80145d6:	9105      	str	r1, [sp, #20]
 80145d8:	e7c4      	b.n	8014564 <_svfiprintf_r+0x130>
 80145da:	fb0c 2101 	mla	r1, ip, r1, r2
 80145de:	4604      	mov	r4, r0
 80145e0:	2301      	movs	r3, #1
 80145e2:	e7f0      	b.n	80145c6 <_svfiprintf_r+0x192>
 80145e4:	ab03      	add	r3, sp, #12
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	462a      	mov	r2, r5
 80145ea:	4b0e      	ldr	r3, [pc, #56]	@ (8014624 <_svfiprintf_r+0x1f0>)
 80145ec:	a904      	add	r1, sp, #16
 80145ee:	4638      	mov	r0, r7
 80145f0:	f7fd fd12 	bl	8012018 <_printf_float>
 80145f4:	1c42      	adds	r2, r0, #1
 80145f6:	4606      	mov	r6, r0
 80145f8:	d1d6      	bne.n	80145a8 <_svfiprintf_r+0x174>
 80145fa:	89ab      	ldrh	r3, [r5, #12]
 80145fc:	065b      	lsls	r3, r3, #25
 80145fe:	f53f af2d 	bmi.w	801445c <_svfiprintf_r+0x28>
 8014602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014604:	e72c      	b.n	8014460 <_svfiprintf_r+0x2c>
 8014606:	ab03      	add	r3, sp, #12
 8014608:	9300      	str	r3, [sp, #0]
 801460a:	462a      	mov	r2, r5
 801460c:	4b05      	ldr	r3, [pc, #20]	@ (8014624 <_svfiprintf_r+0x1f0>)
 801460e:	a904      	add	r1, sp, #16
 8014610:	4638      	mov	r0, r7
 8014612:	f7fd ff99 	bl	8012548 <_printf_i>
 8014616:	e7ed      	b.n	80145f4 <_svfiprintf_r+0x1c0>
 8014618:	08016318 	.word	0x08016318
 801461c:	08016322 	.word	0x08016322
 8014620:	08012019 	.word	0x08012019
 8014624:	0801437d 	.word	0x0801437d
 8014628:	0801631e 	.word	0x0801631e

0801462c <__sflush_r>:
 801462c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014634:	0716      	lsls	r6, r2, #28
 8014636:	4605      	mov	r5, r0
 8014638:	460c      	mov	r4, r1
 801463a:	d454      	bmi.n	80146e6 <__sflush_r+0xba>
 801463c:	684b      	ldr	r3, [r1, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	dc02      	bgt.n	8014648 <__sflush_r+0x1c>
 8014642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014644:	2b00      	cmp	r3, #0
 8014646:	dd48      	ble.n	80146da <__sflush_r+0xae>
 8014648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801464a:	2e00      	cmp	r6, #0
 801464c:	d045      	beq.n	80146da <__sflush_r+0xae>
 801464e:	2300      	movs	r3, #0
 8014650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014654:	682f      	ldr	r7, [r5, #0]
 8014656:	6a21      	ldr	r1, [r4, #32]
 8014658:	602b      	str	r3, [r5, #0]
 801465a:	d030      	beq.n	80146be <__sflush_r+0x92>
 801465c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	0759      	lsls	r1, r3, #29
 8014662:	d505      	bpl.n	8014670 <__sflush_r+0x44>
 8014664:	6863      	ldr	r3, [r4, #4]
 8014666:	1ad2      	subs	r2, r2, r3
 8014668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801466a:	b10b      	cbz	r3, 8014670 <__sflush_r+0x44>
 801466c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801466e:	1ad2      	subs	r2, r2, r3
 8014670:	2300      	movs	r3, #0
 8014672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014674:	6a21      	ldr	r1, [r4, #32]
 8014676:	4628      	mov	r0, r5
 8014678:	47b0      	blx	r6
 801467a:	1c43      	adds	r3, r0, #1
 801467c:	89a3      	ldrh	r3, [r4, #12]
 801467e:	d106      	bne.n	801468e <__sflush_r+0x62>
 8014680:	6829      	ldr	r1, [r5, #0]
 8014682:	291d      	cmp	r1, #29
 8014684:	d82b      	bhi.n	80146de <__sflush_r+0xb2>
 8014686:	4a2a      	ldr	r2, [pc, #168]	@ (8014730 <__sflush_r+0x104>)
 8014688:	410a      	asrs	r2, r1
 801468a:	07d6      	lsls	r6, r2, #31
 801468c:	d427      	bmi.n	80146de <__sflush_r+0xb2>
 801468e:	2200      	movs	r2, #0
 8014690:	6062      	str	r2, [r4, #4]
 8014692:	04d9      	lsls	r1, r3, #19
 8014694:	6922      	ldr	r2, [r4, #16]
 8014696:	6022      	str	r2, [r4, #0]
 8014698:	d504      	bpl.n	80146a4 <__sflush_r+0x78>
 801469a:	1c42      	adds	r2, r0, #1
 801469c:	d101      	bne.n	80146a2 <__sflush_r+0x76>
 801469e:	682b      	ldr	r3, [r5, #0]
 80146a0:	b903      	cbnz	r3, 80146a4 <__sflush_r+0x78>
 80146a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80146a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146a6:	602f      	str	r7, [r5, #0]
 80146a8:	b1b9      	cbz	r1, 80146da <__sflush_r+0xae>
 80146aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146ae:	4299      	cmp	r1, r3
 80146b0:	d002      	beq.n	80146b8 <__sflush_r+0x8c>
 80146b2:	4628      	mov	r0, r5
 80146b4:	f7ff f9e0 	bl	8013a78 <_free_r>
 80146b8:	2300      	movs	r3, #0
 80146ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80146bc:	e00d      	b.n	80146da <__sflush_r+0xae>
 80146be:	2301      	movs	r3, #1
 80146c0:	4628      	mov	r0, r5
 80146c2:	47b0      	blx	r6
 80146c4:	4602      	mov	r2, r0
 80146c6:	1c50      	adds	r0, r2, #1
 80146c8:	d1c9      	bne.n	801465e <__sflush_r+0x32>
 80146ca:	682b      	ldr	r3, [r5, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d0c6      	beq.n	801465e <__sflush_r+0x32>
 80146d0:	2b1d      	cmp	r3, #29
 80146d2:	d001      	beq.n	80146d8 <__sflush_r+0xac>
 80146d4:	2b16      	cmp	r3, #22
 80146d6:	d11e      	bne.n	8014716 <__sflush_r+0xea>
 80146d8:	602f      	str	r7, [r5, #0]
 80146da:	2000      	movs	r0, #0
 80146dc:	e022      	b.n	8014724 <__sflush_r+0xf8>
 80146de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146e2:	b21b      	sxth	r3, r3
 80146e4:	e01b      	b.n	801471e <__sflush_r+0xf2>
 80146e6:	690f      	ldr	r7, [r1, #16]
 80146e8:	2f00      	cmp	r7, #0
 80146ea:	d0f6      	beq.n	80146da <__sflush_r+0xae>
 80146ec:	0793      	lsls	r3, r2, #30
 80146ee:	680e      	ldr	r6, [r1, #0]
 80146f0:	bf08      	it	eq
 80146f2:	694b      	ldreq	r3, [r1, #20]
 80146f4:	600f      	str	r7, [r1, #0]
 80146f6:	bf18      	it	ne
 80146f8:	2300      	movne	r3, #0
 80146fa:	eba6 0807 	sub.w	r8, r6, r7
 80146fe:	608b      	str	r3, [r1, #8]
 8014700:	f1b8 0f00 	cmp.w	r8, #0
 8014704:	dde9      	ble.n	80146da <__sflush_r+0xae>
 8014706:	6a21      	ldr	r1, [r4, #32]
 8014708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801470a:	4643      	mov	r3, r8
 801470c:	463a      	mov	r2, r7
 801470e:	4628      	mov	r0, r5
 8014710:	47b0      	blx	r6
 8014712:	2800      	cmp	r0, #0
 8014714:	dc08      	bgt.n	8014728 <__sflush_r+0xfc>
 8014716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801471a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801471e:	81a3      	strh	r3, [r4, #12]
 8014720:	f04f 30ff 	mov.w	r0, #4294967295
 8014724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014728:	4407      	add	r7, r0
 801472a:	eba8 0800 	sub.w	r8, r8, r0
 801472e:	e7e7      	b.n	8014700 <__sflush_r+0xd4>
 8014730:	dfbffffe 	.word	0xdfbffffe

08014734 <_fflush_r>:
 8014734:	b538      	push	{r3, r4, r5, lr}
 8014736:	690b      	ldr	r3, [r1, #16]
 8014738:	4605      	mov	r5, r0
 801473a:	460c      	mov	r4, r1
 801473c:	b913      	cbnz	r3, 8014744 <_fflush_r+0x10>
 801473e:	2500      	movs	r5, #0
 8014740:	4628      	mov	r0, r5
 8014742:	bd38      	pop	{r3, r4, r5, pc}
 8014744:	b118      	cbz	r0, 801474e <_fflush_r+0x1a>
 8014746:	6a03      	ldr	r3, [r0, #32]
 8014748:	b90b      	cbnz	r3, 801474e <_fflush_r+0x1a>
 801474a:	f7fe f8a9 	bl	80128a0 <__sinit>
 801474e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d0f3      	beq.n	801473e <_fflush_r+0xa>
 8014756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014758:	07d0      	lsls	r0, r2, #31
 801475a:	d404      	bmi.n	8014766 <_fflush_r+0x32>
 801475c:	0599      	lsls	r1, r3, #22
 801475e:	d402      	bmi.n	8014766 <_fflush_r+0x32>
 8014760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014762:	f7fe fb04 	bl	8012d6e <__retarget_lock_acquire_recursive>
 8014766:	4628      	mov	r0, r5
 8014768:	4621      	mov	r1, r4
 801476a:	f7ff ff5f 	bl	801462c <__sflush_r>
 801476e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014770:	07da      	lsls	r2, r3, #31
 8014772:	4605      	mov	r5, r0
 8014774:	d4e4      	bmi.n	8014740 <_fflush_r+0xc>
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	059b      	lsls	r3, r3, #22
 801477a:	d4e1      	bmi.n	8014740 <_fflush_r+0xc>
 801477c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801477e:	f7fe faf7 	bl	8012d70 <__retarget_lock_release_recursive>
 8014782:	e7dd      	b.n	8014740 <_fflush_r+0xc>

08014784 <fiprintf>:
 8014784:	b40e      	push	{r1, r2, r3}
 8014786:	b503      	push	{r0, r1, lr}
 8014788:	4601      	mov	r1, r0
 801478a:	ab03      	add	r3, sp, #12
 801478c:	4805      	ldr	r0, [pc, #20]	@ (80147a4 <fiprintf+0x20>)
 801478e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014792:	6800      	ldr	r0, [r0, #0]
 8014794:	9301      	str	r3, [sp, #4]
 8014796:	f000 f957 	bl	8014a48 <_vfiprintf_r>
 801479a:	b002      	add	sp, #8
 801479c:	f85d eb04 	ldr.w	lr, [sp], #4
 80147a0:	b003      	add	sp, #12
 80147a2:	4770      	bx	lr
 80147a4:	200002b4 	.word	0x200002b4

080147a8 <__swbuf_r>:
 80147a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147aa:	460e      	mov	r6, r1
 80147ac:	4614      	mov	r4, r2
 80147ae:	4605      	mov	r5, r0
 80147b0:	b118      	cbz	r0, 80147ba <__swbuf_r+0x12>
 80147b2:	6a03      	ldr	r3, [r0, #32]
 80147b4:	b90b      	cbnz	r3, 80147ba <__swbuf_r+0x12>
 80147b6:	f7fe f873 	bl	80128a0 <__sinit>
 80147ba:	69a3      	ldr	r3, [r4, #24]
 80147bc:	60a3      	str	r3, [r4, #8]
 80147be:	89a3      	ldrh	r3, [r4, #12]
 80147c0:	071a      	lsls	r2, r3, #28
 80147c2:	d501      	bpl.n	80147c8 <__swbuf_r+0x20>
 80147c4:	6923      	ldr	r3, [r4, #16]
 80147c6:	b943      	cbnz	r3, 80147da <__swbuf_r+0x32>
 80147c8:	4621      	mov	r1, r4
 80147ca:	4628      	mov	r0, r5
 80147cc:	f000 f82a 	bl	8014824 <__swsetup_r>
 80147d0:	b118      	cbz	r0, 80147da <__swbuf_r+0x32>
 80147d2:	f04f 37ff 	mov.w	r7, #4294967295
 80147d6:	4638      	mov	r0, r7
 80147d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147da:	6823      	ldr	r3, [r4, #0]
 80147dc:	6922      	ldr	r2, [r4, #16]
 80147de:	1a98      	subs	r0, r3, r2
 80147e0:	6963      	ldr	r3, [r4, #20]
 80147e2:	b2f6      	uxtb	r6, r6
 80147e4:	4283      	cmp	r3, r0
 80147e6:	4637      	mov	r7, r6
 80147e8:	dc05      	bgt.n	80147f6 <__swbuf_r+0x4e>
 80147ea:	4621      	mov	r1, r4
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7ff ffa1 	bl	8014734 <_fflush_r>
 80147f2:	2800      	cmp	r0, #0
 80147f4:	d1ed      	bne.n	80147d2 <__swbuf_r+0x2a>
 80147f6:	68a3      	ldr	r3, [r4, #8]
 80147f8:	3b01      	subs	r3, #1
 80147fa:	60a3      	str	r3, [r4, #8]
 80147fc:	6823      	ldr	r3, [r4, #0]
 80147fe:	1c5a      	adds	r2, r3, #1
 8014800:	6022      	str	r2, [r4, #0]
 8014802:	701e      	strb	r6, [r3, #0]
 8014804:	6962      	ldr	r2, [r4, #20]
 8014806:	1c43      	adds	r3, r0, #1
 8014808:	429a      	cmp	r2, r3
 801480a:	d004      	beq.n	8014816 <__swbuf_r+0x6e>
 801480c:	89a3      	ldrh	r3, [r4, #12]
 801480e:	07db      	lsls	r3, r3, #31
 8014810:	d5e1      	bpl.n	80147d6 <__swbuf_r+0x2e>
 8014812:	2e0a      	cmp	r6, #10
 8014814:	d1df      	bne.n	80147d6 <__swbuf_r+0x2e>
 8014816:	4621      	mov	r1, r4
 8014818:	4628      	mov	r0, r5
 801481a:	f7ff ff8b 	bl	8014734 <_fflush_r>
 801481e:	2800      	cmp	r0, #0
 8014820:	d0d9      	beq.n	80147d6 <__swbuf_r+0x2e>
 8014822:	e7d6      	b.n	80147d2 <__swbuf_r+0x2a>

08014824 <__swsetup_r>:
 8014824:	b538      	push	{r3, r4, r5, lr}
 8014826:	4b29      	ldr	r3, [pc, #164]	@ (80148cc <__swsetup_r+0xa8>)
 8014828:	4605      	mov	r5, r0
 801482a:	6818      	ldr	r0, [r3, #0]
 801482c:	460c      	mov	r4, r1
 801482e:	b118      	cbz	r0, 8014838 <__swsetup_r+0x14>
 8014830:	6a03      	ldr	r3, [r0, #32]
 8014832:	b90b      	cbnz	r3, 8014838 <__swsetup_r+0x14>
 8014834:	f7fe f834 	bl	80128a0 <__sinit>
 8014838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483c:	0719      	lsls	r1, r3, #28
 801483e:	d422      	bmi.n	8014886 <__swsetup_r+0x62>
 8014840:	06da      	lsls	r2, r3, #27
 8014842:	d407      	bmi.n	8014854 <__swsetup_r+0x30>
 8014844:	2209      	movs	r2, #9
 8014846:	602a      	str	r2, [r5, #0]
 8014848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801484c:	81a3      	strh	r3, [r4, #12]
 801484e:	f04f 30ff 	mov.w	r0, #4294967295
 8014852:	e033      	b.n	80148bc <__swsetup_r+0x98>
 8014854:	0758      	lsls	r0, r3, #29
 8014856:	d512      	bpl.n	801487e <__swsetup_r+0x5a>
 8014858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801485a:	b141      	cbz	r1, 801486e <__swsetup_r+0x4a>
 801485c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014860:	4299      	cmp	r1, r3
 8014862:	d002      	beq.n	801486a <__swsetup_r+0x46>
 8014864:	4628      	mov	r0, r5
 8014866:	f7ff f907 	bl	8013a78 <_free_r>
 801486a:	2300      	movs	r3, #0
 801486c:	6363      	str	r3, [r4, #52]	@ 0x34
 801486e:	89a3      	ldrh	r3, [r4, #12]
 8014870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014874:	81a3      	strh	r3, [r4, #12]
 8014876:	2300      	movs	r3, #0
 8014878:	6063      	str	r3, [r4, #4]
 801487a:	6923      	ldr	r3, [r4, #16]
 801487c:	6023      	str	r3, [r4, #0]
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	f043 0308 	orr.w	r3, r3, #8
 8014884:	81a3      	strh	r3, [r4, #12]
 8014886:	6923      	ldr	r3, [r4, #16]
 8014888:	b94b      	cbnz	r3, 801489e <__swsetup_r+0x7a>
 801488a:	89a3      	ldrh	r3, [r4, #12]
 801488c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014894:	d003      	beq.n	801489e <__swsetup_r+0x7a>
 8014896:	4621      	mov	r1, r4
 8014898:	4628      	mov	r0, r5
 801489a:	f000 fa13 	bl	8014cc4 <__smakebuf_r>
 801489e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148a2:	f013 0201 	ands.w	r2, r3, #1
 80148a6:	d00a      	beq.n	80148be <__swsetup_r+0x9a>
 80148a8:	2200      	movs	r2, #0
 80148aa:	60a2      	str	r2, [r4, #8]
 80148ac:	6962      	ldr	r2, [r4, #20]
 80148ae:	4252      	negs	r2, r2
 80148b0:	61a2      	str	r2, [r4, #24]
 80148b2:	6922      	ldr	r2, [r4, #16]
 80148b4:	b942      	cbnz	r2, 80148c8 <__swsetup_r+0xa4>
 80148b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80148ba:	d1c5      	bne.n	8014848 <__swsetup_r+0x24>
 80148bc:	bd38      	pop	{r3, r4, r5, pc}
 80148be:	0799      	lsls	r1, r3, #30
 80148c0:	bf58      	it	pl
 80148c2:	6962      	ldrpl	r2, [r4, #20]
 80148c4:	60a2      	str	r2, [r4, #8]
 80148c6:	e7f4      	b.n	80148b2 <__swsetup_r+0x8e>
 80148c8:	2000      	movs	r0, #0
 80148ca:	e7f7      	b.n	80148bc <__swsetup_r+0x98>
 80148cc:	200002b4 	.word	0x200002b4

080148d0 <memmove>:
 80148d0:	4288      	cmp	r0, r1
 80148d2:	b510      	push	{r4, lr}
 80148d4:	eb01 0402 	add.w	r4, r1, r2
 80148d8:	d902      	bls.n	80148e0 <memmove+0x10>
 80148da:	4284      	cmp	r4, r0
 80148dc:	4623      	mov	r3, r4
 80148de:	d807      	bhi.n	80148f0 <memmove+0x20>
 80148e0:	1e43      	subs	r3, r0, #1
 80148e2:	42a1      	cmp	r1, r4
 80148e4:	d008      	beq.n	80148f8 <memmove+0x28>
 80148e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148ee:	e7f8      	b.n	80148e2 <memmove+0x12>
 80148f0:	4402      	add	r2, r0
 80148f2:	4601      	mov	r1, r0
 80148f4:	428a      	cmp	r2, r1
 80148f6:	d100      	bne.n	80148fa <memmove+0x2a>
 80148f8:	bd10      	pop	{r4, pc}
 80148fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014902:	e7f7      	b.n	80148f4 <memmove+0x24>

08014904 <_sbrk_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	4d06      	ldr	r5, [pc, #24]	@ (8014920 <_sbrk_r+0x1c>)
 8014908:	2300      	movs	r3, #0
 801490a:	4604      	mov	r4, r0
 801490c:	4608      	mov	r0, r1
 801490e:	602b      	str	r3, [r5, #0]
 8014910:	f7f4 fffc 	bl	800990c <_sbrk>
 8014914:	1c43      	adds	r3, r0, #1
 8014916:	d102      	bne.n	801491e <_sbrk_r+0x1a>
 8014918:	682b      	ldr	r3, [r5, #0]
 801491a:	b103      	cbz	r3, 801491e <_sbrk_r+0x1a>
 801491c:	6023      	str	r3, [r4, #0]
 801491e:	bd38      	pop	{r3, r4, r5, pc}
 8014920:	20011cb8 	.word	0x20011cb8

08014924 <abort>:
 8014924:	b508      	push	{r3, lr}
 8014926:	2006      	movs	r0, #6
 8014928:	f000 fa30 	bl	8014d8c <raise>
 801492c:	2001      	movs	r0, #1
 801492e:	f7f4 ff75 	bl	800981c <_exit>

08014932 <_calloc_r>:
 8014932:	b570      	push	{r4, r5, r6, lr}
 8014934:	fba1 5402 	umull	r5, r4, r1, r2
 8014938:	b93c      	cbnz	r4, 801494a <_calloc_r+0x18>
 801493a:	4629      	mov	r1, r5
 801493c:	f7ff f910 	bl	8013b60 <_malloc_r>
 8014940:	4606      	mov	r6, r0
 8014942:	b928      	cbnz	r0, 8014950 <_calloc_r+0x1e>
 8014944:	2600      	movs	r6, #0
 8014946:	4630      	mov	r0, r6
 8014948:	bd70      	pop	{r4, r5, r6, pc}
 801494a:	220c      	movs	r2, #12
 801494c:	6002      	str	r2, [r0, #0]
 801494e:	e7f9      	b.n	8014944 <_calloc_r+0x12>
 8014950:	462a      	mov	r2, r5
 8014952:	4621      	mov	r1, r4
 8014954:	f7fe f83d 	bl	80129d2 <memset>
 8014958:	e7f5      	b.n	8014946 <_calloc_r+0x14>

0801495a <__ascii_mbtowc>:
 801495a:	b082      	sub	sp, #8
 801495c:	b901      	cbnz	r1, 8014960 <__ascii_mbtowc+0x6>
 801495e:	a901      	add	r1, sp, #4
 8014960:	b142      	cbz	r2, 8014974 <__ascii_mbtowc+0x1a>
 8014962:	b14b      	cbz	r3, 8014978 <__ascii_mbtowc+0x1e>
 8014964:	7813      	ldrb	r3, [r2, #0]
 8014966:	600b      	str	r3, [r1, #0]
 8014968:	7812      	ldrb	r2, [r2, #0]
 801496a:	1e10      	subs	r0, r2, #0
 801496c:	bf18      	it	ne
 801496e:	2001      	movne	r0, #1
 8014970:	b002      	add	sp, #8
 8014972:	4770      	bx	lr
 8014974:	4610      	mov	r0, r2
 8014976:	e7fb      	b.n	8014970 <__ascii_mbtowc+0x16>
 8014978:	f06f 0001 	mvn.w	r0, #1
 801497c:	e7f8      	b.n	8014970 <__ascii_mbtowc+0x16>

0801497e <_realloc_r>:
 801497e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014982:	4680      	mov	r8, r0
 8014984:	4615      	mov	r5, r2
 8014986:	460c      	mov	r4, r1
 8014988:	b921      	cbnz	r1, 8014994 <_realloc_r+0x16>
 801498a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801498e:	4611      	mov	r1, r2
 8014990:	f7ff b8e6 	b.w	8013b60 <_malloc_r>
 8014994:	b92a      	cbnz	r2, 80149a2 <_realloc_r+0x24>
 8014996:	f7ff f86f 	bl	8013a78 <_free_r>
 801499a:	2400      	movs	r4, #0
 801499c:	4620      	mov	r0, r4
 801499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149a2:	f000 fa31 	bl	8014e08 <_malloc_usable_size_r>
 80149a6:	4285      	cmp	r5, r0
 80149a8:	4606      	mov	r6, r0
 80149aa:	d802      	bhi.n	80149b2 <_realloc_r+0x34>
 80149ac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80149b0:	d8f4      	bhi.n	801499c <_realloc_r+0x1e>
 80149b2:	4629      	mov	r1, r5
 80149b4:	4640      	mov	r0, r8
 80149b6:	f7ff f8d3 	bl	8013b60 <_malloc_r>
 80149ba:	4607      	mov	r7, r0
 80149bc:	2800      	cmp	r0, #0
 80149be:	d0ec      	beq.n	801499a <_realloc_r+0x1c>
 80149c0:	42b5      	cmp	r5, r6
 80149c2:	462a      	mov	r2, r5
 80149c4:	4621      	mov	r1, r4
 80149c6:	bf28      	it	cs
 80149c8:	4632      	movcs	r2, r6
 80149ca:	f7fe f9da 	bl	8012d82 <memcpy>
 80149ce:	4621      	mov	r1, r4
 80149d0:	4640      	mov	r0, r8
 80149d2:	f7ff f851 	bl	8013a78 <_free_r>
 80149d6:	463c      	mov	r4, r7
 80149d8:	e7e0      	b.n	801499c <_realloc_r+0x1e>

080149da <__ascii_wctomb>:
 80149da:	4603      	mov	r3, r0
 80149dc:	4608      	mov	r0, r1
 80149de:	b141      	cbz	r1, 80149f2 <__ascii_wctomb+0x18>
 80149e0:	2aff      	cmp	r2, #255	@ 0xff
 80149e2:	d904      	bls.n	80149ee <__ascii_wctomb+0x14>
 80149e4:	228a      	movs	r2, #138	@ 0x8a
 80149e6:	601a      	str	r2, [r3, #0]
 80149e8:	f04f 30ff 	mov.w	r0, #4294967295
 80149ec:	4770      	bx	lr
 80149ee:	700a      	strb	r2, [r1, #0]
 80149f0:	2001      	movs	r0, #1
 80149f2:	4770      	bx	lr

080149f4 <__sfputc_r>:
 80149f4:	6893      	ldr	r3, [r2, #8]
 80149f6:	3b01      	subs	r3, #1
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	b410      	push	{r4}
 80149fc:	6093      	str	r3, [r2, #8]
 80149fe:	da08      	bge.n	8014a12 <__sfputc_r+0x1e>
 8014a00:	6994      	ldr	r4, [r2, #24]
 8014a02:	42a3      	cmp	r3, r4
 8014a04:	db01      	blt.n	8014a0a <__sfputc_r+0x16>
 8014a06:	290a      	cmp	r1, #10
 8014a08:	d103      	bne.n	8014a12 <__sfputc_r+0x1e>
 8014a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a0e:	f7ff becb 	b.w	80147a8 <__swbuf_r>
 8014a12:	6813      	ldr	r3, [r2, #0]
 8014a14:	1c58      	adds	r0, r3, #1
 8014a16:	6010      	str	r0, [r2, #0]
 8014a18:	7019      	strb	r1, [r3, #0]
 8014a1a:	4608      	mov	r0, r1
 8014a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a20:	4770      	bx	lr

08014a22 <__sfputs_r>:
 8014a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a24:	4606      	mov	r6, r0
 8014a26:	460f      	mov	r7, r1
 8014a28:	4614      	mov	r4, r2
 8014a2a:	18d5      	adds	r5, r2, r3
 8014a2c:	42ac      	cmp	r4, r5
 8014a2e:	d101      	bne.n	8014a34 <__sfputs_r+0x12>
 8014a30:	2000      	movs	r0, #0
 8014a32:	e007      	b.n	8014a44 <__sfputs_r+0x22>
 8014a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a38:	463a      	mov	r2, r7
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	f7ff ffda 	bl	80149f4 <__sfputc_r>
 8014a40:	1c43      	adds	r3, r0, #1
 8014a42:	d1f3      	bne.n	8014a2c <__sfputs_r+0xa>
 8014a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a48 <_vfiprintf_r>:
 8014a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4c:	460d      	mov	r5, r1
 8014a4e:	b09d      	sub	sp, #116	@ 0x74
 8014a50:	4614      	mov	r4, r2
 8014a52:	4698      	mov	r8, r3
 8014a54:	4606      	mov	r6, r0
 8014a56:	b118      	cbz	r0, 8014a60 <_vfiprintf_r+0x18>
 8014a58:	6a03      	ldr	r3, [r0, #32]
 8014a5a:	b90b      	cbnz	r3, 8014a60 <_vfiprintf_r+0x18>
 8014a5c:	f7fd ff20 	bl	80128a0 <__sinit>
 8014a60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a62:	07d9      	lsls	r1, r3, #31
 8014a64:	d405      	bmi.n	8014a72 <_vfiprintf_r+0x2a>
 8014a66:	89ab      	ldrh	r3, [r5, #12]
 8014a68:	059a      	lsls	r2, r3, #22
 8014a6a:	d402      	bmi.n	8014a72 <_vfiprintf_r+0x2a>
 8014a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a6e:	f7fe f97e 	bl	8012d6e <__retarget_lock_acquire_recursive>
 8014a72:	89ab      	ldrh	r3, [r5, #12]
 8014a74:	071b      	lsls	r3, r3, #28
 8014a76:	d501      	bpl.n	8014a7c <_vfiprintf_r+0x34>
 8014a78:	692b      	ldr	r3, [r5, #16]
 8014a7a:	b99b      	cbnz	r3, 8014aa4 <_vfiprintf_r+0x5c>
 8014a7c:	4629      	mov	r1, r5
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f7ff fed0 	bl	8014824 <__swsetup_r>
 8014a84:	b170      	cbz	r0, 8014aa4 <_vfiprintf_r+0x5c>
 8014a86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a88:	07dc      	lsls	r4, r3, #31
 8014a8a:	d504      	bpl.n	8014a96 <_vfiprintf_r+0x4e>
 8014a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a90:	b01d      	add	sp, #116	@ 0x74
 8014a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a96:	89ab      	ldrh	r3, [r5, #12]
 8014a98:	0598      	lsls	r0, r3, #22
 8014a9a:	d4f7      	bmi.n	8014a8c <_vfiprintf_r+0x44>
 8014a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a9e:	f7fe f967 	bl	8012d70 <__retarget_lock_release_recursive>
 8014aa2:	e7f3      	b.n	8014a8c <_vfiprintf_r+0x44>
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014aa8:	2320      	movs	r3, #32
 8014aaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ab2:	2330      	movs	r3, #48	@ 0x30
 8014ab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014c64 <_vfiprintf_r+0x21c>
 8014ab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014abc:	f04f 0901 	mov.w	r9, #1
 8014ac0:	4623      	mov	r3, r4
 8014ac2:	469a      	mov	sl, r3
 8014ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ac8:	b10a      	cbz	r2, 8014ace <_vfiprintf_r+0x86>
 8014aca:	2a25      	cmp	r2, #37	@ 0x25
 8014acc:	d1f9      	bne.n	8014ac2 <_vfiprintf_r+0x7a>
 8014ace:	ebba 0b04 	subs.w	fp, sl, r4
 8014ad2:	d00b      	beq.n	8014aec <_vfiprintf_r+0xa4>
 8014ad4:	465b      	mov	r3, fp
 8014ad6:	4622      	mov	r2, r4
 8014ad8:	4629      	mov	r1, r5
 8014ada:	4630      	mov	r0, r6
 8014adc:	f7ff ffa1 	bl	8014a22 <__sfputs_r>
 8014ae0:	3001      	adds	r0, #1
 8014ae2:	f000 80a7 	beq.w	8014c34 <_vfiprintf_r+0x1ec>
 8014ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ae8:	445a      	add	r2, fp
 8014aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8014aec:	f89a 3000 	ldrb.w	r3, [sl]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	f000 809f 	beq.w	8014c34 <_vfiprintf_r+0x1ec>
 8014af6:	2300      	movs	r3, #0
 8014af8:	f04f 32ff 	mov.w	r2, #4294967295
 8014afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b00:	f10a 0a01 	add.w	sl, sl, #1
 8014b04:	9304      	str	r3, [sp, #16]
 8014b06:	9307      	str	r3, [sp, #28]
 8014b08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b0e:	4654      	mov	r4, sl
 8014b10:	2205      	movs	r2, #5
 8014b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b16:	4853      	ldr	r0, [pc, #332]	@ (8014c64 <_vfiprintf_r+0x21c>)
 8014b18:	f7eb fb5a 	bl	80001d0 <memchr>
 8014b1c:	9a04      	ldr	r2, [sp, #16]
 8014b1e:	b9d8      	cbnz	r0, 8014b58 <_vfiprintf_r+0x110>
 8014b20:	06d1      	lsls	r1, r2, #27
 8014b22:	bf44      	itt	mi
 8014b24:	2320      	movmi	r3, #32
 8014b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b2a:	0713      	lsls	r3, r2, #28
 8014b2c:	bf44      	itt	mi
 8014b2e:	232b      	movmi	r3, #43	@ 0x2b
 8014b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b34:	f89a 3000 	ldrb.w	r3, [sl]
 8014b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b3a:	d015      	beq.n	8014b68 <_vfiprintf_r+0x120>
 8014b3c:	9a07      	ldr	r2, [sp, #28]
 8014b3e:	4654      	mov	r4, sl
 8014b40:	2000      	movs	r0, #0
 8014b42:	f04f 0c0a 	mov.w	ip, #10
 8014b46:	4621      	mov	r1, r4
 8014b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b4c:	3b30      	subs	r3, #48	@ 0x30
 8014b4e:	2b09      	cmp	r3, #9
 8014b50:	d94b      	bls.n	8014bea <_vfiprintf_r+0x1a2>
 8014b52:	b1b0      	cbz	r0, 8014b82 <_vfiprintf_r+0x13a>
 8014b54:	9207      	str	r2, [sp, #28]
 8014b56:	e014      	b.n	8014b82 <_vfiprintf_r+0x13a>
 8014b58:	eba0 0308 	sub.w	r3, r0, r8
 8014b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8014b60:	4313      	orrs	r3, r2
 8014b62:	9304      	str	r3, [sp, #16]
 8014b64:	46a2      	mov	sl, r4
 8014b66:	e7d2      	b.n	8014b0e <_vfiprintf_r+0xc6>
 8014b68:	9b03      	ldr	r3, [sp, #12]
 8014b6a:	1d19      	adds	r1, r3, #4
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	9103      	str	r1, [sp, #12]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	bfbb      	ittet	lt
 8014b74:	425b      	neglt	r3, r3
 8014b76:	f042 0202 	orrlt.w	r2, r2, #2
 8014b7a:	9307      	strge	r3, [sp, #28]
 8014b7c:	9307      	strlt	r3, [sp, #28]
 8014b7e:	bfb8      	it	lt
 8014b80:	9204      	strlt	r2, [sp, #16]
 8014b82:	7823      	ldrb	r3, [r4, #0]
 8014b84:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b86:	d10a      	bne.n	8014b9e <_vfiprintf_r+0x156>
 8014b88:	7863      	ldrb	r3, [r4, #1]
 8014b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b8c:	d132      	bne.n	8014bf4 <_vfiprintf_r+0x1ac>
 8014b8e:	9b03      	ldr	r3, [sp, #12]
 8014b90:	1d1a      	adds	r2, r3, #4
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	9203      	str	r2, [sp, #12]
 8014b96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b9a:	3402      	adds	r4, #2
 8014b9c:	9305      	str	r3, [sp, #20]
 8014b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c74 <_vfiprintf_r+0x22c>
 8014ba2:	7821      	ldrb	r1, [r4, #0]
 8014ba4:	2203      	movs	r2, #3
 8014ba6:	4650      	mov	r0, sl
 8014ba8:	f7eb fb12 	bl	80001d0 <memchr>
 8014bac:	b138      	cbz	r0, 8014bbe <_vfiprintf_r+0x176>
 8014bae:	9b04      	ldr	r3, [sp, #16]
 8014bb0:	eba0 000a 	sub.w	r0, r0, sl
 8014bb4:	2240      	movs	r2, #64	@ 0x40
 8014bb6:	4082      	lsls	r2, r0
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	3401      	adds	r4, #1
 8014bbc:	9304      	str	r3, [sp, #16]
 8014bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bc2:	4829      	ldr	r0, [pc, #164]	@ (8014c68 <_vfiprintf_r+0x220>)
 8014bc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014bc8:	2206      	movs	r2, #6
 8014bca:	f7eb fb01 	bl	80001d0 <memchr>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d03f      	beq.n	8014c52 <_vfiprintf_r+0x20a>
 8014bd2:	4b26      	ldr	r3, [pc, #152]	@ (8014c6c <_vfiprintf_r+0x224>)
 8014bd4:	bb1b      	cbnz	r3, 8014c1e <_vfiprintf_r+0x1d6>
 8014bd6:	9b03      	ldr	r3, [sp, #12]
 8014bd8:	3307      	adds	r3, #7
 8014bda:	f023 0307 	bic.w	r3, r3, #7
 8014bde:	3308      	adds	r3, #8
 8014be0:	9303      	str	r3, [sp, #12]
 8014be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014be4:	443b      	add	r3, r7
 8014be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014be8:	e76a      	b.n	8014ac0 <_vfiprintf_r+0x78>
 8014bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bee:	460c      	mov	r4, r1
 8014bf0:	2001      	movs	r0, #1
 8014bf2:	e7a8      	b.n	8014b46 <_vfiprintf_r+0xfe>
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	3401      	adds	r4, #1
 8014bf8:	9305      	str	r3, [sp, #20]
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	f04f 0c0a 	mov.w	ip, #10
 8014c00:	4620      	mov	r0, r4
 8014c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c06:	3a30      	subs	r2, #48	@ 0x30
 8014c08:	2a09      	cmp	r2, #9
 8014c0a:	d903      	bls.n	8014c14 <_vfiprintf_r+0x1cc>
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d0c6      	beq.n	8014b9e <_vfiprintf_r+0x156>
 8014c10:	9105      	str	r1, [sp, #20]
 8014c12:	e7c4      	b.n	8014b9e <_vfiprintf_r+0x156>
 8014c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c18:	4604      	mov	r4, r0
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	e7f0      	b.n	8014c00 <_vfiprintf_r+0x1b8>
 8014c1e:	ab03      	add	r3, sp, #12
 8014c20:	9300      	str	r3, [sp, #0]
 8014c22:	462a      	mov	r2, r5
 8014c24:	4b12      	ldr	r3, [pc, #72]	@ (8014c70 <_vfiprintf_r+0x228>)
 8014c26:	a904      	add	r1, sp, #16
 8014c28:	4630      	mov	r0, r6
 8014c2a:	f7fd f9f5 	bl	8012018 <_printf_float>
 8014c2e:	4607      	mov	r7, r0
 8014c30:	1c78      	adds	r0, r7, #1
 8014c32:	d1d6      	bne.n	8014be2 <_vfiprintf_r+0x19a>
 8014c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c36:	07d9      	lsls	r1, r3, #31
 8014c38:	d405      	bmi.n	8014c46 <_vfiprintf_r+0x1fe>
 8014c3a:	89ab      	ldrh	r3, [r5, #12]
 8014c3c:	059a      	lsls	r2, r3, #22
 8014c3e:	d402      	bmi.n	8014c46 <_vfiprintf_r+0x1fe>
 8014c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c42:	f7fe f895 	bl	8012d70 <__retarget_lock_release_recursive>
 8014c46:	89ab      	ldrh	r3, [r5, #12]
 8014c48:	065b      	lsls	r3, r3, #25
 8014c4a:	f53f af1f 	bmi.w	8014a8c <_vfiprintf_r+0x44>
 8014c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c50:	e71e      	b.n	8014a90 <_vfiprintf_r+0x48>
 8014c52:	ab03      	add	r3, sp, #12
 8014c54:	9300      	str	r3, [sp, #0]
 8014c56:	462a      	mov	r2, r5
 8014c58:	4b05      	ldr	r3, [pc, #20]	@ (8014c70 <_vfiprintf_r+0x228>)
 8014c5a:	a904      	add	r1, sp, #16
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	f7fd fc73 	bl	8012548 <_printf_i>
 8014c62:	e7e4      	b.n	8014c2e <_vfiprintf_r+0x1e6>
 8014c64:	08016318 	.word	0x08016318
 8014c68:	08016322 	.word	0x08016322
 8014c6c:	08012019 	.word	0x08012019
 8014c70:	08014a23 	.word	0x08014a23
 8014c74:	0801631e 	.word	0x0801631e

08014c78 <__swhatbuf_r>:
 8014c78:	b570      	push	{r4, r5, r6, lr}
 8014c7a:	460c      	mov	r4, r1
 8014c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c80:	2900      	cmp	r1, #0
 8014c82:	b096      	sub	sp, #88	@ 0x58
 8014c84:	4615      	mov	r5, r2
 8014c86:	461e      	mov	r6, r3
 8014c88:	da0d      	bge.n	8014ca6 <__swhatbuf_r+0x2e>
 8014c8a:	89a3      	ldrh	r3, [r4, #12]
 8014c8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014c90:	f04f 0100 	mov.w	r1, #0
 8014c94:	bf14      	ite	ne
 8014c96:	2340      	movne	r3, #64	@ 0x40
 8014c98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014c9c:	2000      	movs	r0, #0
 8014c9e:	6031      	str	r1, [r6, #0]
 8014ca0:	602b      	str	r3, [r5, #0]
 8014ca2:	b016      	add	sp, #88	@ 0x58
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}
 8014ca6:	466a      	mov	r2, sp
 8014ca8:	f000 f878 	bl	8014d9c <_fstat_r>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	dbec      	blt.n	8014c8a <__swhatbuf_r+0x12>
 8014cb0:	9901      	ldr	r1, [sp, #4]
 8014cb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014cb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014cba:	4259      	negs	r1, r3
 8014cbc:	4159      	adcs	r1, r3
 8014cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014cc2:	e7eb      	b.n	8014c9c <__swhatbuf_r+0x24>

08014cc4 <__smakebuf_r>:
 8014cc4:	898b      	ldrh	r3, [r1, #12]
 8014cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cc8:	079d      	lsls	r5, r3, #30
 8014cca:	4606      	mov	r6, r0
 8014ccc:	460c      	mov	r4, r1
 8014cce:	d507      	bpl.n	8014ce0 <__smakebuf_r+0x1c>
 8014cd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014cd4:	6023      	str	r3, [r4, #0]
 8014cd6:	6123      	str	r3, [r4, #16]
 8014cd8:	2301      	movs	r3, #1
 8014cda:	6163      	str	r3, [r4, #20]
 8014cdc:	b003      	add	sp, #12
 8014cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ce0:	ab01      	add	r3, sp, #4
 8014ce2:	466a      	mov	r2, sp
 8014ce4:	f7ff ffc8 	bl	8014c78 <__swhatbuf_r>
 8014ce8:	9f00      	ldr	r7, [sp, #0]
 8014cea:	4605      	mov	r5, r0
 8014cec:	4639      	mov	r1, r7
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f7fe ff36 	bl	8013b60 <_malloc_r>
 8014cf4:	b948      	cbnz	r0, 8014d0a <__smakebuf_r+0x46>
 8014cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cfa:	059a      	lsls	r2, r3, #22
 8014cfc:	d4ee      	bmi.n	8014cdc <__smakebuf_r+0x18>
 8014cfe:	f023 0303 	bic.w	r3, r3, #3
 8014d02:	f043 0302 	orr.w	r3, r3, #2
 8014d06:	81a3      	strh	r3, [r4, #12]
 8014d08:	e7e2      	b.n	8014cd0 <__smakebuf_r+0xc>
 8014d0a:	89a3      	ldrh	r3, [r4, #12]
 8014d0c:	6020      	str	r0, [r4, #0]
 8014d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d12:	81a3      	strh	r3, [r4, #12]
 8014d14:	9b01      	ldr	r3, [sp, #4]
 8014d16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d1a:	b15b      	cbz	r3, 8014d34 <__smakebuf_r+0x70>
 8014d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d20:	4630      	mov	r0, r6
 8014d22:	f000 f84d 	bl	8014dc0 <_isatty_r>
 8014d26:	b128      	cbz	r0, 8014d34 <__smakebuf_r+0x70>
 8014d28:	89a3      	ldrh	r3, [r4, #12]
 8014d2a:	f023 0303 	bic.w	r3, r3, #3
 8014d2e:	f043 0301 	orr.w	r3, r3, #1
 8014d32:	81a3      	strh	r3, [r4, #12]
 8014d34:	89a3      	ldrh	r3, [r4, #12]
 8014d36:	431d      	orrs	r5, r3
 8014d38:	81a5      	strh	r5, [r4, #12]
 8014d3a:	e7cf      	b.n	8014cdc <__smakebuf_r+0x18>

08014d3c <_raise_r>:
 8014d3c:	291f      	cmp	r1, #31
 8014d3e:	b538      	push	{r3, r4, r5, lr}
 8014d40:	4605      	mov	r5, r0
 8014d42:	460c      	mov	r4, r1
 8014d44:	d904      	bls.n	8014d50 <_raise_r+0x14>
 8014d46:	2316      	movs	r3, #22
 8014d48:	6003      	str	r3, [r0, #0]
 8014d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d4e:	bd38      	pop	{r3, r4, r5, pc}
 8014d50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014d52:	b112      	cbz	r2, 8014d5a <_raise_r+0x1e>
 8014d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d58:	b94b      	cbnz	r3, 8014d6e <_raise_r+0x32>
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	f000 f852 	bl	8014e04 <_getpid_r>
 8014d60:	4622      	mov	r2, r4
 8014d62:	4601      	mov	r1, r0
 8014d64:	4628      	mov	r0, r5
 8014d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d6a:	f000 b839 	b.w	8014de0 <_kill_r>
 8014d6e:	2b01      	cmp	r3, #1
 8014d70:	d00a      	beq.n	8014d88 <_raise_r+0x4c>
 8014d72:	1c59      	adds	r1, r3, #1
 8014d74:	d103      	bne.n	8014d7e <_raise_r+0x42>
 8014d76:	2316      	movs	r3, #22
 8014d78:	6003      	str	r3, [r0, #0]
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	e7e7      	b.n	8014d4e <_raise_r+0x12>
 8014d7e:	2100      	movs	r1, #0
 8014d80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014d84:	4620      	mov	r0, r4
 8014d86:	4798      	blx	r3
 8014d88:	2000      	movs	r0, #0
 8014d8a:	e7e0      	b.n	8014d4e <_raise_r+0x12>

08014d8c <raise>:
 8014d8c:	4b02      	ldr	r3, [pc, #8]	@ (8014d98 <raise+0xc>)
 8014d8e:	4601      	mov	r1, r0
 8014d90:	6818      	ldr	r0, [r3, #0]
 8014d92:	f7ff bfd3 	b.w	8014d3c <_raise_r>
 8014d96:	bf00      	nop
 8014d98:	200002b4 	.word	0x200002b4

08014d9c <_fstat_r>:
 8014d9c:	b538      	push	{r3, r4, r5, lr}
 8014d9e:	4d07      	ldr	r5, [pc, #28]	@ (8014dbc <_fstat_r+0x20>)
 8014da0:	2300      	movs	r3, #0
 8014da2:	4604      	mov	r4, r0
 8014da4:	4608      	mov	r0, r1
 8014da6:	4611      	mov	r1, r2
 8014da8:	602b      	str	r3, [r5, #0]
 8014daa:	f7f4 fd87 	bl	80098bc <_fstat>
 8014dae:	1c43      	adds	r3, r0, #1
 8014db0:	d102      	bne.n	8014db8 <_fstat_r+0x1c>
 8014db2:	682b      	ldr	r3, [r5, #0]
 8014db4:	b103      	cbz	r3, 8014db8 <_fstat_r+0x1c>
 8014db6:	6023      	str	r3, [r4, #0]
 8014db8:	bd38      	pop	{r3, r4, r5, pc}
 8014dba:	bf00      	nop
 8014dbc:	20011cb8 	.word	0x20011cb8

08014dc0 <_isatty_r>:
 8014dc0:	b538      	push	{r3, r4, r5, lr}
 8014dc2:	4d06      	ldr	r5, [pc, #24]	@ (8014ddc <_isatty_r+0x1c>)
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	4608      	mov	r0, r1
 8014dca:	602b      	str	r3, [r5, #0]
 8014dcc:	f7f4 fd86 	bl	80098dc <_isatty>
 8014dd0:	1c43      	adds	r3, r0, #1
 8014dd2:	d102      	bne.n	8014dda <_isatty_r+0x1a>
 8014dd4:	682b      	ldr	r3, [r5, #0]
 8014dd6:	b103      	cbz	r3, 8014dda <_isatty_r+0x1a>
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	bd38      	pop	{r3, r4, r5, pc}
 8014ddc:	20011cb8 	.word	0x20011cb8

08014de0 <_kill_r>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4d07      	ldr	r5, [pc, #28]	@ (8014e00 <_kill_r+0x20>)
 8014de4:	2300      	movs	r3, #0
 8014de6:	4604      	mov	r4, r0
 8014de8:	4608      	mov	r0, r1
 8014dea:	4611      	mov	r1, r2
 8014dec:	602b      	str	r3, [r5, #0]
 8014dee:	f7f4 fd05 	bl	80097fc <_kill>
 8014df2:	1c43      	adds	r3, r0, #1
 8014df4:	d102      	bne.n	8014dfc <_kill_r+0x1c>
 8014df6:	682b      	ldr	r3, [r5, #0]
 8014df8:	b103      	cbz	r3, 8014dfc <_kill_r+0x1c>
 8014dfa:	6023      	str	r3, [r4, #0]
 8014dfc:	bd38      	pop	{r3, r4, r5, pc}
 8014dfe:	bf00      	nop
 8014e00:	20011cb8 	.word	0x20011cb8

08014e04 <_getpid_r>:
 8014e04:	f7f4 bcf2 	b.w	80097ec <_getpid>

08014e08 <_malloc_usable_size_r>:
 8014e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e0c:	1f18      	subs	r0, r3, #4
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	bfbc      	itt	lt
 8014e12:	580b      	ldrlt	r3, [r1, r0]
 8014e14:	18c0      	addlt	r0, r0, r3
 8014e16:	4770      	bx	lr

08014e18 <_init>:
 8014e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e1a:	bf00      	nop
 8014e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e1e:	bc08      	pop	{r3}
 8014e20:	469e      	mov	lr, r3
 8014e22:	4770      	bx	lr

08014e24 <_fini>:
 8014e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e26:	bf00      	nop
 8014e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e2a:	bc08      	pop	{r3}
 8014e2c:	469e      	mov	lr, r3
 8014e2e:	4770      	bx	lr
